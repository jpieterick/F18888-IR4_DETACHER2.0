
IR4DetacherFirmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000170  08000000  08000000  00001000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000542c  08000170  08000170  00001170  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000144  0800559c  0800559c  0000659c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080056e0  080056e0  0000700c  2**0
                  CONTENTS
  4 .ARM          00000000  080056e0  080056e0  0000700c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080056e0  080056e0  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080056e0  080056e0  000066e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080056e4  080056e4  000066e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080056e8  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002c0  2000000c  080056f4  0000700c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002cc  080056f4  000072cc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019a54  00000000  00000000  00007034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004562  00000000  00000000  00020a88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016c8  00000000  00000000  00024ff0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001197  00000000  00000000  000266b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a665  00000000  00000000  0002784f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00021b2c  00000000  00000000  00041eb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a012c  00000000  00000000  000639e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00103b0c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005010  00000000  00000000  00103b50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000009e  00000000  00000000  00108b60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000170 <__do_global_dtors_aux>:
 8000170:	b510      	push	{r4, lr}
 8000172:	4c06      	ldr	r4, [pc, #24]	@ (800018c <__do_global_dtors_aux+0x1c>)
 8000174:	7823      	ldrb	r3, [r4, #0]
 8000176:	2b00      	cmp	r3, #0
 8000178:	d107      	bne.n	800018a <__do_global_dtors_aux+0x1a>
 800017a:	4b05      	ldr	r3, [pc, #20]	@ (8000190 <__do_global_dtors_aux+0x20>)
 800017c:	2b00      	cmp	r3, #0
 800017e:	d002      	beq.n	8000186 <__do_global_dtors_aux+0x16>
 8000180:	4804      	ldr	r0, [pc, #16]	@ (8000194 <__do_global_dtors_aux+0x24>)
 8000182:	e000      	b.n	8000186 <__do_global_dtors_aux+0x16>
 8000184:	bf00      	nop
 8000186:	2301      	movs	r3, #1
 8000188:	7023      	strb	r3, [r4, #0]
 800018a:	bd10      	pop	{r4, pc}
 800018c:	2000000c 	.word	0x2000000c
 8000190:	00000000 	.word	0x00000000
 8000194:	08005584 	.word	0x08005584

08000198 <frame_dummy>:
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <frame_dummy+0x14>)
 800019a:	b510      	push	{r4, lr}
 800019c:	2b00      	cmp	r3, #0
 800019e:	d003      	beq.n	80001a8 <frame_dummy+0x10>
 80001a0:	4903      	ldr	r1, [pc, #12]	@ (80001b0 <frame_dummy+0x18>)
 80001a2:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <frame_dummy+0x1c>)
 80001a4:	e000      	b.n	80001a8 <frame_dummy+0x10>
 80001a6:	bf00      	nop
 80001a8:	bd10      	pop	{r4, pc}
 80001aa:	46c0      	nop			@ (mov r8, r8)
 80001ac:	00000000 	.word	0x00000000
 80001b0:	20000010 	.word	0x20000010
 80001b4:	08005584 	.word	0x08005584

080001b8 <__udivsi3>:
 80001b8:	2200      	movs	r2, #0
 80001ba:	0843      	lsrs	r3, r0, #1
 80001bc:	428b      	cmp	r3, r1
 80001be:	d374      	bcc.n	80002aa <__udivsi3+0xf2>
 80001c0:	0903      	lsrs	r3, r0, #4
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d35f      	bcc.n	8000286 <__udivsi3+0xce>
 80001c6:	0a03      	lsrs	r3, r0, #8
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d344      	bcc.n	8000256 <__udivsi3+0x9e>
 80001cc:	0b03      	lsrs	r3, r0, #12
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d328      	bcc.n	8000224 <__udivsi3+0x6c>
 80001d2:	0c03      	lsrs	r3, r0, #16
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d30d      	bcc.n	80001f4 <__udivsi3+0x3c>
 80001d8:	22ff      	movs	r2, #255	@ 0xff
 80001da:	0209      	lsls	r1, r1, #8
 80001dc:	ba12      	rev	r2, r2
 80001de:	0c03      	lsrs	r3, r0, #16
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d302      	bcc.n	80001ea <__udivsi3+0x32>
 80001e4:	1212      	asrs	r2, r2, #8
 80001e6:	0209      	lsls	r1, r1, #8
 80001e8:	d065      	beq.n	80002b6 <__udivsi3+0xfe>
 80001ea:	0b03      	lsrs	r3, r0, #12
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d319      	bcc.n	8000224 <__udivsi3+0x6c>
 80001f0:	e000      	b.n	80001f4 <__udivsi3+0x3c>
 80001f2:	0a09      	lsrs	r1, r1, #8
 80001f4:	0bc3      	lsrs	r3, r0, #15
 80001f6:	428b      	cmp	r3, r1
 80001f8:	d301      	bcc.n	80001fe <__udivsi3+0x46>
 80001fa:	03cb      	lsls	r3, r1, #15
 80001fc:	1ac0      	subs	r0, r0, r3
 80001fe:	4152      	adcs	r2, r2
 8000200:	0b83      	lsrs	r3, r0, #14
 8000202:	428b      	cmp	r3, r1
 8000204:	d301      	bcc.n	800020a <__udivsi3+0x52>
 8000206:	038b      	lsls	r3, r1, #14
 8000208:	1ac0      	subs	r0, r0, r3
 800020a:	4152      	adcs	r2, r2
 800020c:	0b43      	lsrs	r3, r0, #13
 800020e:	428b      	cmp	r3, r1
 8000210:	d301      	bcc.n	8000216 <__udivsi3+0x5e>
 8000212:	034b      	lsls	r3, r1, #13
 8000214:	1ac0      	subs	r0, r0, r3
 8000216:	4152      	adcs	r2, r2
 8000218:	0b03      	lsrs	r3, r0, #12
 800021a:	428b      	cmp	r3, r1
 800021c:	d301      	bcc.n	8000222 <__udivsi3+0x6a>
 800021e:	030b      	lsls	r3, r1, #12
 8000220:	1ac0      	subs	r0, r0, r3
 8000222:	4152      	adcs	r2, r2
 8000224:	0ac3      	lsrs	r3, r0, #11
 8000226:	428b      	cmp	r3, r1
 8000228:	d301      	bcc.n	800022e <__udivsi3+0x76>
 800022a:	02cb      	lsls	r3, r1, #11
 800022c:	1ac0      	subs	r0, r0, r3
 800022e:	4152      	adcs	r2, r2
 8000230:	0a83      	lsrs	r3, r0, #10
 8000232:	428b      	cmp	r3, r1
 8000234:	d301      	bcc.n	800023a <__udivsi3+0x82>
 8000236:	028b      	lsls	r3, r1, #10
 8000238:	1ac0      	subs	r0, r0, r3
 800023a:	4152      	adcs	r2, r2
 800023c:	0a43      	lsrs	r3, r0, #9
 800023e:	428b      	cmp	r3, r1
 8000240:	d301      	bcc.n	8000246 <__udivsi3+0x8e>
 8000242:	024b      	lsls	r3, r1, #9
 8000244:	1ac0      	subs	r0, r0, r3
 8000246:	4152      	adcs	r2, r2
 8000248:	0a03      	lsrs	r3, r0, #8
 800024a:	428b      	cmp	r3, r1
 800024c:	d301      	bcc.n	8000252 <__udivsi3+0x9a>
 800024e:	020b      	lsls	r3, r1, #8
 8000250:	1ac0      	subs	r0, r0, r3
 8000252:	4152      	adcs	r2, r2
 8000254:	d2cd      	bcs.n	80001f2 <__udivsi3+0x3a>
 8000256:	09c3      	lsrs	r3, r0, #7
 8000258:	428b      	cmp	r3, r1
 800025a:	d301      	bcc.n	8000260 <__udivsi3+0xa8>
 800025c:	01cb      	lsls	r3, r1, #7
 800025e:	1ac0      	subs	r0, r0, r3
 8000260:	4152      	adcs	r2, r2
 8000262:	0983      	lsrs	r3, r0, #6
 8000264:	428b      	cmp	r3, r1
 8000266:	d301      	bcc.n	800026c <__udivsi3+0xb4>
 8000268:	018b      	lsls	r3, r1, #6
 800026a:	1ac0      	subs	r0, r0, r3
 800026c:	4152      	adcs	r2, r2
 800026e:	0943      	lsrs	r3, r0, #5
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__udivsi3+0xc0>
 8000274:	014b      	lsls	r3, r1, #5
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0903      	lsrs	r3, r0, #4
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__udivsi3+0xcc>
 8000280:	010b      	lsls	r3, r1, #4
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	08c3      	lsrs	r3, r0, #3
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__udivsi3+0xd8>
 800028c:	00cb      	lsls	r3, r1, #3
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0883      	lsrs	r3, r0, #2
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__udivsi3+0xe4>
 8000298:	008b      	lsls	r3, r1, #2
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0843      	lsrs	r3, r0, #1
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__udivsi3+0xf0>
 80002a4:	004b      	lsls	r3, r1, #1
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	1a41      	subs	r1, r0, r1
 80002ac:	d200      	bcs.n	80002b0 <__udivsi3+0xf8>
 80002ae:	4601      	mov	r1, r0
 80002b0:	4152      	adcs	r2, r2
 80002b2:	4610      	mov	r0, r2
 80002b4:	4770      	bx	lr
 80002b6:	e7ff      	b.n	80002b8 <__udivsi3+0x100>
 80002b8:	b501      	push	{r0, lr}
 80002ba:	2000      	movs	r0, #0
 80002bc:	f000 f8f0 	bl	80004a0 <__aeabi_idiv0>
 80002c0:	bd02      	pop	{r1, pc}
 80002c2:	46c0      	nop			@ (mov r8, r8)

080002c4 <__aeabi_uidivmod>:
 80002c4:	2900      	cmp	r1, #0
 80002c6:	d0f7      	beq.n	80002b8 <__udivsi3+0x100>
 80002c8:	e776      	b.n	80001b8 <__udivsi3>
 80002ca:	4770      	bx	lr

080002cc <__divsi3>:
 80002cc:	4603      	mov	r3, r0
 80002ce:	430b      	orrs	r3, r1
 80002d0:	d47f      	bmi.n	80003d2 <__divsi3+0x106>
 80002d2:	2200      	movs	r2, #0
 80002d4:	0843      	lsrs	r3, r0, #1
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d374      	bcc.n	80003c4 <__divsi3+0xf8>
 80002da:	0903      	lsrs	r3, r0, #4
 80002dc:	428b      	cmp	r3, r1
 80002de:	d35f      	bcc.n	80003a0 <__divsi3+0xd4>
 80002e0:	0a03      	lsrs	r3, r0, #8
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d344      	bcc.n	8000370 <__divsi3+0xa4>
 80002e6:	0b03      	lsrs	r3, r0, #12
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d328      	bcc.n	800033e <__divsi3+0x72>
 80002ec:	0c03      	lsrs	r3, r0, #16
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d30d      	bcc.n	800030e <__divsi3+0x42>
 80002f2:	22ff      	movs	r2, #255	@ 0xff
 80002f4:	0209      	lsls	r1, r1, #8
 80002f6:	ba12      	rev	r2, r2
 80002f8:	0c03      	lsrs	r3, r0, #16
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d302      	bcc.n	8000304 <__divsi3+0x38>
 80002fe:	1212      	asrs	r2, r2, #8
 8000300:	0209      	lsls	r1, r1, #8
 8000302:	d065      	beq.n	80003d0 <__divsi3+0x104>
 8000304:	0b03      	lsrs	r3, r0, #12
 8000306:	428b      	cmp	r3, r1
 8000308:	d319      	bcc.n	800033e <__divsi3+0x72>
 800030a:	e000      	b.n	800030e <__divsi3+0x42>
 800030c:	0a09      	lsrs	r1, r1, #8
 800030e:	0bc3      	lsrs	r3, r0, #15
 8000310:	428b      	cmp	r3, r1
 8000312:	d301      	bcc.n	8000318 <__divsi3+0x4c>
 8000314:	03cb      	lsls	r3, r1, #15
 8000316:	1ac0      	subs	r0, r0, r3
 8000318:	4152      	adcs	r2, r2
 800031a:	0b83      	lsrs	r3, r0, #14
 800031c:	428b      	cmp	r3, r1
 800031e:	d301      	bcc.n	8000324 <__divsi3+0x58>
 8000320:	038b      	lsls	r3, r1, #14
 8000322:	1ac0      	subs	r0, r0, r3
 8000324:	4152      	adcs	r2, r2
 8000326:	0b43      	lsrs	r3, r0, #13
 8000328:	428b      	cmp	r3, r1
 800032a:	d301      	bcc.n	8000330 <__divsi3+0x64>
 800032c:	034b      	lsls	r3, r1, #13
 800032e:	1ac0      	subs	r0, r0, r3
 8000330:	4152      	adcs	r2, r2
 8000332:	0b03      	lsrs	r3, r0, #12
 8000334:	428b      	cmp	r3, r1
 8000336:	d301      	bcc.n	800033c <__divsi3+0x70>
 8000338:	030b      	lsls	r3, r1, #12
 800033a:	1ac0      	subs	r0, r0, r3
 800033c:	4152      	adcs	r2, r2
 800033e:	0ac3      	lsrs	r3, r0, #11
 8000340:	428b      	cmp	r3, r1
 8000342:	d301      	bcc.n	8000348 <__divsi3+0x7c>
 8000344:	02cb      	lsls	r3, r1, #11
 8000346:	1ac0      	subs	r0, r0, r3
 8000348:	4152      	adcs	r2, r2
 800034a:	0a83      	lsrs	r3, r0, #10
 800034c:	428b      	cmp	r3, r1
 800034e:	d301      	bcc.n	8000354 <__divsi3+0x88>
 8000350:	028b      	lsls	r3, r1, #10
 8000352:	1ac0      	subs	r0, r0, r3
 8000354:	4152      	adcs	r2, r2
 8000356:	0a43      	lsrs	r3, r0, #9
 8000358:	428b      	cmp	r3, r1
 800035a:	d301      	bcc.n	8000360 <__divsi3+0x94>
 800035c:	024b      	lsls	r3, r1, #9
 800035e:	1ac0      	subs	r0, r0, r3
 8000360:	4152      	adcs	r2, r2
 8000362:	0a03      	lsrs	r3, r0, #8
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0xa0>
 8000368:	020b      	lsls	r3, r1, #8
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	d2cd      	bcs.n	800030c <__divsi3+0x40>
 8000370:	09c3      	lsrs	r3, r0, #7
 8000372:	428b      	cmp	r3, r1
 8000374:	d301      	bcc.n	800037a <__divsi3+0xae>
 8000376:	01cb      	lsls	r3, r1, #7
 8000378:	1ac0      	subs	r0, r0, r3
 800037a:	4152      	adcs	r2, r2
 800037c:	0983      	lsrs	r3, r0, #6
 800037e:	428b      	cmp	r3, r1
 8000380:	d301      	bcc.n	8000386 <__divsi3+0xba>
 8000382:	018b      	lsls	r3, r1, #6
 8000384:	1ac0      	subs	r0, r0, r3
 8000386:	4152      	adcs	r2, r2
 8000388:	0943      	lsrs	r3, r0, #5
 800038a:	428b      	cmp	r3, r1
 800038c:	d301      	bcc.n	8000392 <__divsi3+0xc6>
 800038e:	014b      	lsls	r3, r1, #5
 8000390:	1ac0      	subs	r0, r0, r3
 8000392:	4152      	adcs	r2, r2
 8000394:	0903      	lsrs	r3, r0, #4
 8000396:	428b      	cmp	r3, r1
 8000398:	d301      	bcc.n	800039e <__divsi3+0xd2>
 800039a:	010b      	lsls	r3, r1, #4
 800039c:	1ac0      	subs	r0, r0, r3
 800039e:	4152      	adcs	r2, r2
 80003a0:	08c3      	lsrs	r3, r0, #3
 80003a2:	428b      	cmp	r3, r1
 80003a4:	d301      	bcc.n	80003aa <__divsi3+0xde>
 80003a6:	00cb      	lsls	r3, r1, #3
 80003a8:	1ac0      	subs	r0, r0, r3
 80003aa:	4152      	adcs	r2, r2
 80003ac:	0883      	lsrs	r3, r0, #2
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0xea>
 80003b2:	008b      	lsls	r3, r1, #2
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	0843      	lsrs	r3, r0, #1
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d301      	bcc.n	80003c2 <__divsi3+0xf6>
 80003be:	004b      	lsls	r3, r1, #1
 80003c0:	1ac0      	subs	r0, r0, r3
 80003c2:	4152      	adcs	r2, r2
 80003c4:	1a41      	subs	r1, r0, r1
 80003c6:	d200      	bcs.n	80003ca <__divsi3+0xfe>
 80003c8:	4601      	mov	r1, r0
 80003ca:	4152      	adcs	r2, r2
 80003cc:	4610      	mov	r0, r2
 80003ce:	4770      	bx	lr
 80003d0:	e05d      	b.n	800048e <__divsi3+0x1c2>
 80003d2:	0fca      	lsrs	r2, r1, #31
 80003d4:	d000      	beq.n	80003d8 <__divsi3+0x10c>
 80003d6:	4249      	negs	r1, r1
 80003d8:	1003      	asrs	r3, r0, #32
 80003da:	d300      	bcc.n	80003de <__divsi3+0x112>
 80003dc:	4240      	negs	r0, r0
 80003de:	4053      	eors	r3, r2
 80003e0:	2200      	movs	r2, #0
 80003e2:	469c      	mov	ip, r3
 80003e4:	0903      	lsrs	r3, r0, #4
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d32d      	bcc.n	8000446 <__divsi3+0x17a>
 80003ea:	0a03      	lsrs	r3, r0, #8
 80003ec:	428b      	cmp	r3, r1
 80003ee:	d312      	bcc.n	8000416 <__divsi3+0x14a>
 80003f0:	22fc      	movs	r2, #252	@ 0xfc
 80003f2:	0189      	lsls	r1, r1, #6
 80003f4:	ba12      	rev	r2, r2
 80003f6:	0a03      	lsrs	r3, r0, #8
 80003f8:	428b      	cmp	r3, r1
 80003fa:	d30c      	bcc.n	8000416 <__divsi3+0x14a>
 80003fc:	0189      	lsls	r1, r1, #6
 80003fe:	1192      	asrs	r2, r2, #6
 8000400:	428b      	cmp	r3, r1
 8000402:	d308      	bcc.n	8000416 <__divsi3+0x14a>
 8000404:	0189      	lsls	r1, r1, #6
 8000406:	1192      	asrs	r2, r2, #6
 8000408:	428b      	cmp	r3, r1
 800040a:	d304      	bcc.n	8000416 <__divsi3+0x14a>
 800040c:	0189      	lsls	r1, r1, #6
 800040e:	d03a      	beq.n	8000486 <__divsi3+0x1ba>
 8000410:	1192      	asrs	r2, r2, #6
 8000412:	e000      	b.n	8000416 <__divsi3+0x14a>
 8000414:	0989      	lsrs	r1, r1, #6
 8000416:	09c3      	lsrs	r3, r0, #7
 8000418:	428b      	cmp	r3, r1
 800041a:	d301      	bcc.n	8000420 <__divsi3+0x154>
 800041c:	01cb      	lsls	r3, r1, #7
 800041e:	1ac0      	subs	r0, r0, r3
 8000420:	4152      	adcs	r2, r2
 8000422:	0983      	lsrs	r3, r0, #6
 8000424:	428b      	cmp	r3, r1
 8000426:	d301      	bcc.n	800042c <__divsi3+0x160>
 8000428:	018b      	lsls	r3, r1, #6
 800042a:	1ac0      	subs	r0, r0, r3
 800042c:	4152      	adcs	r2, r2
 800042e:	0943      	lsrs	r3, r0, #5
 8000430:	428b      	cmp	r3, r1
 8000432:	d301      	bcc.n	8000438 <__divsi3+0x16c>
 8000434:	014b      	lsls	r3, r1, #5
 8000436:	1ac0      	subs	r0, r0, r3
 8000438:	4152      	adcs	r2, r2
 800043a:	0903      	lsrs	r3, r0, #4
 800043c:	428b      	cmp	r3, r1
 800043e:	d301      	bcc.n	8000444 <__divsi3+0x178>
 8000440:	010b      	lsls	r3, r1, #4
 8000442:	1ac0      	subs	r0, r0, r3
 8000444:	4152      	adcs	r2, r2
 8000446:	08c3      	lsrs	r3, r0, #3
 8000448:	428b      	cmp	r3, r1
 800044a:	d301      	bcc.n	8000450 <__divsi3+0x184>
 800044c:	00cb      	lsls	r3, r1, #3
 800044e:	1ac0      	subs	r0, r0, r3
 8000450:	4152      	adcs	r2, r2
 8000452:	0883      	lsrs	r3, r0, #2
 8000454:	428b      	cmp	r3, r1
 8000456:	d301      	bcc.n	800045c <__divsi3+0x190>
 8000458:	008b      	lsls	r3, r1, #2
 800045a:	1ac0      	subs	r0, r0, r3
 800045c:	4152      	adcs	r2, r2
 800045e:	d2d9      	bcs.n	8000414 <__divsi3+0x148>
 8000460:	0843      	lsrs	r3, r0, #1
 8000462:	428b      	cmp	r3, r1
 8000464:	d301      	bcc.n	800046a <__divsi3+0x19e>
 8000466:	004b      	lsls	r3, r1, #1
 8000468:	1ac0      	subs	r0, r0, r3
 800046a:	4152      	adcs	r2, r2
 800046c:	1a41      	subs	r1, r0, r1
 800046e:	d200      	bcs.n	8000472 <__divsi3+0x1a6>
 8000470:	4601      	mov	r1, r0
 8000472:	4663      	mov	r3, ip
 8000474:	4152      	adcs	r2, r2
 8000476:	105b      	asrs	r3, r3, #1
 8000478:	4610      	mov	r0, r2
 800047a:	d301      	bcc.n	8000480 <__divsi3+0x1b4>
 800047c:	4240      	negs	r0, r0
 800047e:	2b00      	cmp	r3, #0
 8000480:	d500      	bpl.n	8000484 <__divsi3+0x1b8>
 8000482:	4249      	negs	r1, r1
 8000484:	4770      	bx	lr
 8000486:	4663      	mov	r3, ip
 8000488:	105b      	asrs	r3, r3, #1
 800048a:	d300      	bcc.n	800048e <__divsi3+0x1c2>
 800048c:	4240      	negs	r0, r0
 800048e:	b501      	push	{r0, lr}
 8000490:	2000      	movs	r0, #0
 8000492:	f000 f805 	bl	80004a0 <__aeabi_idiv0>
 8000496:	bd02      	pop	{r1, pc}

08000498 <__aeabi_idivmod>:
 8000498:	2900      	cmp	r1, #0
 800049a:	d0f8      	beq.n	800048e <__divsi3+0x1c2>
 800049c:	e716      	b.n	80002cc <__divsi3>
 800049e:	4770      	bx	lr

080004a0 <__aeabi_idiv0>:
 80004a0:	4770      	bx	lr
 80004a2:	46c0      	nop			@ (mov r8, r8)

080004a4 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80004a4:	b580      	push	{r7, lr}
 80004a6:	b084      	sub	sp, #16
 80004a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80004aa:	1d3b      	adds	r3, r7, #4
 80004ac:	0018      	movs	r0, r3
 80004ae:	230c      	movs	r3, #12
 80004b0:	001a      	movs	r2, r3
 80004b2:	2100      	movs	r1, #0
 80004b4:	f005 f85e 	bl	8005574 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80004b8:	4b2d      	ldr	r3, [pc, #180]	@ (8000570 <MX_ADC1_Init+0xcc>)
 80004ba:	4a2e      	ldr	r2, [pc, #184]	@ (8000574 <MX_ADC1_Init+0xd0>)
 80004bc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80004be:	4b2c      	ldr	r3, [pc, #176]	@ (8000570 <MX_ADC1_Init+0xcc>)
 80004c0:	2280      	movs	r2, #128	@ 0x80
 80004c2:	05d2      	lsls	r2, r2, #23
 80004c4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80004c6:	4b2a      	ldr	r3, [pc, #168]	@ (8000570 <MX_ADC1_Init+0xcc>)
 80004c8:	2200      	movs	r2, #0
 80004ca:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80004cc:	4b28      	ldr	r3, [pc, #160]	@ (8000570 <MX_ADC1_Init+0xcc>)
 80004ce:	2200      	movs	r2, #0
 80004d0:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80004d2:	4b27      	ldr	r3, [pc, #156]	@ (8000570 <MX_ADC1_Init+0xcc>)
 80004d4:	2200      	movs	r2, #0
 80004d6:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80004d8:	4b25      	ldr	r3, [pc, #148]	@ (8000570 <MX_ADC1_Init+0xcc>)
 80004da:	2204      	movs	r2, #4
 80004dc:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80004de:	4b24      	ldr	r3, [pc, #144]	@ (8000570 <MX_ADC1_Init+0xcc>)
 80004e0:	2200      	movs	r2, #0
 80004e2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 80004e4:	4b22      	ldr	r3, [pc, #136]	@ (8000570 <MX_ADC1_Init+0xcc>)
 80004e6:	2200      	movs	r2, #0
 80004e8:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80004ea:	4b21      	ldr	r3, [pc, #132]	@ (8000570 <MX_ADC1_Init+0xcc>)
 80004ec:	2200      	movs	r2, #0
 80004ee:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 80004f0:	4b1f      	ldr	r3, [pc, #124]	@ (8000570 <MX_ADC1_Init+0xcc>)
 80004f2:	2201      	movs	r2, #1
 80004f4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80004f6:	4b1e      	ldr	r3, [pc, #120]	@ (8000570 <MX_ADC1_Init+0xcc>)
 80004f8:	2220      	movs	r2, #32
 80004fa:	2100      	movs	r1, #0
 80004fc:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80004fe:	4b1c      	ldr	r3, [pc, #112]	@ (8000570 <MX_ADC1_Init+0xcc>)
 8000500:	2200      	movs	r2, #0
 8000502:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000504:	4b1a      	ldr	r3, [pc, #104]	@ (8000570 <MX_ADC1_Init+0xcc>)
 8000506:	2200      	movs	r2, #0
 8000508:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800050a:	4b19      	ldr	r3, [pc, #100]	@ (8000570 <MX_ADC1_Init+0xcc>)
 800050c:	222c      	movs	r2, #44	@ 0x2c
 800050e:	2100      	movs	r1, #0
 8000510:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000512:	4b17      	ldr	r3, [pc, #92]	@ (8000570 <MX_ADC1_Init+0xcc>)
 8000514:	2200      	movs	r2, #0
 8000516:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8000518:	4b15      	ldr	r3, [pc, #84]	@ (8000570 <MX_ADC1_Init+0xcc>)
 800051a:	2200      	movs	r2, #0
 800051c:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 800051e:	4b14      	ldr	r3, [pc, #80]	@ (8000570 <MX_ADC1_Init+0xcc>)
 8000520:	2200      	movs	r2, #0
 8000522:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8000524:	4b12      	ldr	r3, [pc, #72]	@ (8000570 <MX_ADC1_Init+0xcc>)
 8000526:	223c      	movs	r2, #60	@ 0x3c
 8000528:	2100      	movs	r1, #0
 800052a:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 800052c:	4b10      	ldr	r3, [pc, #64]	@ (8000570 <MX_ADC1_Init+0xcc>)
 800052e:	2200      	movs	r2, #0
 8000530:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000532:	4b0f      	ldr	r3, [pc, #60]	@ (8000570 <MX_ADC1_Init+0xcc>)
 8000534:	0018      	movs	r0, r3
 8000536:	f001 f8e3 	bl	8001700 <HAL_ADC_Init>
 800053a:	1e03      	subs	r3, r0, #0
 800053c:	d001      	beq.n	8000542 <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 800053e:	f000 fad6 	bl	8000aee <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000542:	1d3b      	adds	r3, r7, #4
 8000544:	2201      	movs	r2, #1
 8000546:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000548:	1d3b      	adds	r3, r7, #4
 800054a:	2200      	movs	r2, #0
 800054c:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 800054e:	1d3b      	adds	r3, r7, #4
 8000550:	2200      	movs	r2, #0
 8000552:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000554:	1d3a      	adds	r2, r7, #4
 8000556:	4b06      	ldr	r3, [pc, #24]	@ (8000570 <MX_ADC1_Init+0xcc>)
 8000558:	0011      	movs	r1, r2
 800055a:	0018      	movs	r0, r3
 800055c:	f001 fba8 	bl	8001cb0 <HAL_ADC_ConfigChannel>
 8000560:	1e03      	subs	r3, r0, #0
 8000562:	d001      	beq.n	8000568 <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 8000564:	f000 fac3 	bl	8000aee <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000568:	46c0      	nop			@ (mov r8, r8)
 800056a:	46bd      	mov	sp, r7
 800056c:	b004      	add	sp, #16
 800056e:	bd80      	pop	{r7, pc}
 8000570:	20000028 	.word	0x20000028
 8000574:	40012400 	.word	0x40012400

08000578 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000578:	b590      	push	{r4, r7, lr}
 800057a:	b08b      	sub	sp, #44	@ 0x2c
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000580:	2414      	movs	r4, #20
 8000582:	193b      	adds	r3, r7, r4
 8000584:	0018      	movs	r0, r3
 8000586:	2314      	movs	r3, #20
 8000588:	001a      	movs	r2, r3
 800058a:	2100      	movs	r1, #0
 800058c:	f004 fff2 	bl	8005574 <memset>
  if(adcHandle->Instance==ADC1)
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	4a29      	ldr	r2, [pc, #164]	@ (800063c <HAL_ADC_MspInit+0xc4>)
 8000596:	4293      	cmp	r3, r2
 8000598:	d14c      	bne.n	8000634 <HAL_ADC_MspInit+0xbc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800059a:	4b29      	ldr	r3, [pc, #164]	@ (8000640 <HAL_ADC_MspInit+0xc8>)
 800059c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800059e:	4b28      	ldr	r3, [pc, #160]	@ (8000640 <HAL_ADC_MspInit+0xc8>)
 80005a0:	2180      	movs	r1, #128	@ 0x80
 80005a2:	0349      	lsls	r1, r1, #13
 80005a4:	430a      	orrs	r2, r1
 80005a6:	641a      	str	r2, [r3, #64]	@ 0x40
 80005a8:	4b25      	ldr	r3, [pc, #148]	@ (8000640 <HAL_ADC_MspInit+0xc8>)
 80005aa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80005ac:	2380      	movs	r3, #128	@ 0x80
 80005ae:	035b      	lsls	r3, r3, #13
 80005b0:	4013      	ands	r3, r2
 80005b2:	613b      	str	r3, [r7, #16]
 80005b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005b6:	4b22      	ldr	r3, [pc, #136]	@ (8000640 <HAL_ADC_MspInit+0xc8>)
 80005b8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80005ba:	4b21      	ldr	r3, [pc, #132]	@ (8000640 <HAL_ADC_MspInit+0xc8>)
 80005bc:	2101      	movs	r1, #1
 80005be:	430a      	orrs	r2, r1
 80005c0:	635a      	str	r2, [r3, #52]	@ 0x34
 80005c2:	4b1f      	ldr	r3, [pc, #124]	@ (8000640 <HAL_ADC_MspInit+0xc8>)
 80005c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80005c6:	2201      	movs	r2, #1
 80005c8:	4013      	ands	r3, r2
 80005ca:	60fb      	str	r3, [r7, #12]
 80005cc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80005ce:	4b1c      	ldr	r3, [pc, #112]	@ (8000640 <HAL_ADC_MspInit+0xc8>)
 80005d0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80005d2:	4b1b      	ldr	r3, [pc, #108]	@ (8000640 <HAL_ADC_MspInit+0xc8>)
 80005d4:	2102      	movs	r1, #2
 80005d6:	430a      	orrs	r2, r1
 80005d8:	635a      	str	r2, [r3, #52]	@ 0x34
 80005da:	4b19      	ldr	r3, [pc, #100]	@ (8000640 <HAL_ADC_MspInit+0xc8>)
 80005dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80005de:	2202      	movs	r2, #2
 80005e0:	4013      	ands	r3, r2
 80005e2:	60bb      	str	r3, [r7, #8]
 80005e4:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN0
    PB2     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = VBOOST_FDBK_Pin;
 80005e6:	193b      	adds	r3, r7, r4
 80005e8:	2201      	movs	r2, #1
 80005ea:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005ec:	193b      	adds	r3, r7, r4
 80005ee:	2203      	movs	r2, #3
 80005f0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f2:	193b      	adds	r3, r7, r4
 80005f4:	2200      	movs	r2, #0
 80005f6:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(VBOOST_FDBK_GPIO_Port, &GPIO_InitStruct);
 80005f8:	193a      	adds	r2, r7, r4
 80005fa:	23a0      	movs	r3, #160	@ 0xa0
 80005fc:	05db      	lsls	r3, r3, #23
 80005fe:	0011      	movs	r1, r2
 8000600:	0018      	movs	r0, r3
 8000602:	f001 fe2b 	bl	800225c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = NFC_VOUT_SENSE_Pin;
 8000606:	193b      	adds	r3, r7, r4
 8000608:	2204      	movs	r2, #4
 800060a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800060c:	193b      	adds	r3, r7, r4
 800060e:	2203      	movs	r2, #3
 8000610:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000612:	193b      	adds	r3, r7, r4
 8000614:	2200      	movs	r2, #0
 8000616:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(NFC_VOUT_SENSE_GPIO_Port, &GPIO_InitStruct);
 8000618:	193b      	adds	r3, r7, r4
 800061a:	4a0a      	ldr	r2, [pc, #40]	@ (8000644 <HAL_ADC_MspInit+0xcc>)
 800061c:	0019      	movs	r1, r3
 800061e:	0010      	movs	r0, r2
 8000620:	f001 fe1c 	bl	800225c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 8000624:	2200      	movs	r2, #0
 8000626:	2100      	movs	r1, #0
 8000628:	200c      	movs	r0, #12
 800062a:	f001 fde5 	bl	80021f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 800062e:	200c      	movs	r0, #12
 8000630:	f001 fdf7 	bl	8002222 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000634:	46c0      	nop			@ (mov r8, r8)
 8000636:	46bd      	mov	sp, r7
 8000638:	b00b      	add	sp, #44	@ 0x2c
 800063a:	bd90      	pop	{r4, r7, pc}
 800063c:	40012400 	.word	0x40012400
 8000640:	40021000 	.word	0x40021000
 8000644:	50000400 	.word	0x50000400

08000648 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8000648:	b590      	push	{r4, r7, lr}
 800064a:	b08b      	sub	sp, #44	@ 0x2c
 800064c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800064e:	2414      	movs	r4, #20
 8000650:	193b      	adds	r3, r7, r4
 8000652:	0018      	movs	r0, r3
 8000654:	2314      	movs	r3, #20
 8000656:	001a      	movs	r2, r3
 8000658:	2100      	movs	r1, #0
 800065a:	f004 ff8b 	bl	8005574 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800065e:	4b73      	ldr	r3, [pc, #460]	@ (800082c <MX_GPIO_Init+0x1e4>)
 8000660:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000662:	4b72      	ldr	r3, [pc, #456]	@ (800082c <MX_GPIO_Init+0x1e4>)
 8000664:	2104      	movs	r1, #4
 8000666:	430a      	orrs	r2, r1
 8000668:	635a      	str	r2, [r3, #52]	@ 0x34
 800066a:	4b70      	ldr	r3, [pc, #448]	@ (800082c <MX_GPIO_Init+0x1e4>)
 800066c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800066e:	2204      	movs	r2, #4
 8000670:	4013      	ands	r3, r2
 8000672:	613b      	str	r3, [r7, #16]
 8000674:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000676:	4b6d      	ldr	r3, [pc, #436]	@ (800082c <MX_GPIO_Init+0x1e4>)
 8000678:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800067a:	4b6c      	ldr	r3, [pc, #432]	@ (800082c <MX_GPIO_Init+0x1e4>)
 800067c:	2120      	movs	r1, #32
 800067e:	430a      	orrs	r2, r1
 8000680:	635a      	str	r2, [r3, #52]	@ 0x34
 8000682:	4b6a      	ldr	r3, [pc, #424]	@ (800082c <MX_GPIO_Init+0x1e4>)
 8000684:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000686:	2220      	movs	r2, #32
 8000688:	4013      	ands	r3, r2
 800068a:	60fb      	str	r3, [r7, #12]
 800068c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800068e:	4b67      	ldr	r3, [pc, #412]	@ (800082c <MX_GPIO_Init+0x1e4>)
 8000690:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000692:	4b66      	ldr	r3, [pc, #408]	@ (800082c <MX_GPIO_Init+0x1e4>)
 8000694:	2101      	movs	r1, #1
 8000696:	430a      	orrs	r2, r1
 8000698:	635a      	str	r2, [r3, #52]	@ 0x34
 800069a:	4b64      	ldr	r3, [pc, #400]	@ (800082c <MX_GPIO_Init+0x1e4>)
 800069c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800069e:	2201      	movs	r2, #1
 80006a0:	4013      	ands	r3, r2
 80006a2:	60bb      	str	r3, [r7, #8]
 80006a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006a6:	4b61      	ldr	r3, [pc, #388]	@ (800082c <MX_GPIO_Init+0x1e4>)
 80006a8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80006aa:	4b60      	ldr	r3, [pc, #384]	@ (800082c <MX_GPIO_Init+0x1e4>)
 80006ac:	2102      	movs	r1, #2
 80006ae:	430a      	orrs	r2, r1
 80006b0:	635a      	str	r2, [r3, #52]	@ 0x34
 80006b2:	4b5e      	ldr	r3, [pc, #376]	@ (800082c <MX_GPIO_Init+0x1e4>)
 80006b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80006b6:	2202      	movs	r2, #2
 80006b8:	4013      	ands	r3, r2
 80006ba:	607b      	str	r3, [r7, #4]
 80006bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006be:	4b5b      	ldr	r3, [pc, #364]	@ (800082c <MX_GPIO_Init+0x1e4>)
 80006c0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80006c2:	4b5a      	ldr	r3, [pc, #360]	@ (800082c <MX_GPIO_Init+0x1e4>)
 80006c4:	2108      	movs	r1, #8
 80006c6:	430a      	orrs	r2, r1
 80006c8:	635a      	str	r2, [r3, #52]	@ 0x34
 80006ca:	4b58      	ldr	r3, [pc, #352]	@ (800082c <MX_GPIO_Init+0x1e4>)
 80006cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80006ce:	2208      	movs	r2, #8
 80006d0:	4013      	ands	r3, r2
 80006d2:	603b      	str	r3, [r7, #0]
 80006d4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, VBOOST_ENABLE_Pin|LED_RED_Pin|LED_YELLOW_Pin|LED_GREEN_Pin, GPIO_PIN_RESET);
 80006d6:	23a0      	movs	r3, #160	@ 0xa0
 80006d8:	05db      	lsls	r3, r3, #23
 80006da:	2200      	movs	r2, #0
 80006dc:	213c      	movs	r1, #60	@ 0x3c
 80006de:	0018      	movs	r0, r3
 80006e0:	f001 ff20 	bl	8002524 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NFC_POWER_ENABLE_GPIO_Port, NFC_POWER_ENABLE_Pin, GPIO_PIN_RESET);
 80006e4:	4b52      	ldr	r3, [pc, #328]	@ (8000830 <MX_GPIO_Init+0x1e8>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	2140      	movs	r1, #64	@ 0x40
 80006ea:	0018      	movs	r0, r3
 80006ec:	f001 ff1a 	bl	8002524 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BASE_BUTTON_Pin;
 80006f0:	193b      	adds	r3, r7, r4
 80006f2:	2280      	movs	r2, #128	@ 0x80
 80006f4:	0192      	lsls	r2, r2, #6
 80006f6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006f8:	193b      	adds	r3, r7, r4
 80006fa:	2200      	movs	r2, #0
 80006fc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fe:	193b      	adds	r3, r7, r4
 8000700:	2200      	movs	r2, #0
 8000702:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BASE_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000704:	193b      	adds	r3, r7, r4
 8000706:	4a4b      	ldr	r2, [pc, #300]	@ (8000834 <MX_GPIO_Init+0x1ec>)
 8000708:	0019      	movs	r1, r3
 800070a:	0010      	movs	r0, r2
 800070c:	f001 fda6 	bl	800225c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 PC6 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_6|GPIO_PIN_7;
 8000710:	193b      	adds	r3, r7, r4
 8000712:	4a49      	ldr	r2, [pc, #292]	@ (8000838 <MX_GPIO_Init+0x1f0>)
 8000714:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000716:	193b      	adds	r3, r7, r4
 8000718:	2203      	movs	r2, #3
 800071a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071c:	193b      	adds	r3, r7, r4
 800071e:	2200      	movs	r2, #0
 8000720:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000722:	193b      	adds	r3, r7, r4
 8000724:	4a43      	ldr	r2, [pc, #268]	@ (8000834 <MX_GPIO_Init+0x1ec>)
 8000726:	0019      	movs	r1, r3
 8000728:	0010      	movs	r0, r2
 800072a:	f001 fd97 	bl	800225c <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800072e:	193b      	adds	r3, r7, r4
 8000730:	2203      	movs	r2, #3
 8000732:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000734:	193b      	adds	r3, r7, r4
 8000736:	2203      	movs	r2, #3
 8000738:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073a:	193b      	adds	r3, r7, r4
 800073c:	2200      	movs	r2, #0
 800073e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000740:	193b      	adds	r3, r7, r4
 8000742:	4a3e      	ldr	r2, [pc, #248]	@ (800083c <MX_GPIO_Init+0x1f4>)
 8000744:	0019      	movs	r1, r3
 8000746:	0010      	movs	r0, r2
 8000748:	f001 fd88 	bl	800225c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = VBOOST_ENABLE_Pin|LED_RED_Pin|LED_YELLOW_Pin|LED_GREEN_Pin;
 800074c:	193b      	adds	r3, r7, r4
 800074e:	223c      	movs	r2, #60	@ 0x3c
 8000750:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000752:	193b      	adds	r3, r7, r4
 8000754:	2201      	movs	r2, #1
 8000756:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000758:	193b      	adds	r3, r7, r4
 800075a:	2200      	movs	r2, #0
 800075c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800075e:	193b      	adds	r3, r7, r4
 8000760:	2200      	movs	r2, #0
 8000762:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000764:	193a      	adds	r2, r7, r4
 8000766:	23a0      	movs	r3, #160	@ 0xa0
 8000768:	05db      	lsls	r3, r3, #23
 800076a:	0011      	movs	r1, r2
 800076c:	0018      	movs	r0, r3
 800076e:	f001 fd75 	bl	800225c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA7 PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
 8000772:	193b      	adds	r3, r7, r4
 8000774:	4a32      	ldr	r2, [pc, #200]	@ (8000840 <MX_GPIO_Init+0x1f8>)
 8000776:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000778:	193b      	adds	r3, r7, r4
 800077a:	2203      	movs	r2, #3
 800077c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077e:	193b      	adds	r3, r7, r4
 8000780:	2200      	movs	r2, #0
 8000782:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000784:	193a      	adds	r2, r7, r4
 8000786:	23a0      	movs	r3, #160	@ 0xa0
 8000788:	05db      	lsls	r3, r3, #23
 800078a:	0011      	movs	r1, r2
 800078c:	0018      	movs	r0, r3
 800078e:	f001 fd65 	bl	800225c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB10 PB11
                           PB12 PB13 PB14 PB15
                           PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11
 8000792:	193b      	adds	r3, r7, r4
 8000794:	4a2b      	ldr	r2, [pc, #172]	@ (8000844 <MX_GPIO_Init+0x1fc>)
 8000796:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000798:	193b      	adds	r3, r7, r4
 800079a:	2203      	movs	r2, #3
 800079c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079e:	193b      	adds	r3, r7, r4
 80007a0:	2200      	movs	r2, #0
 80007a2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007a4:	193b      	adds	r3, r7, r4
 80007a6:	4a22      	ldr	r2, [pc, #136]	@ (8000830 <MX_GPIO_Init+0x1e8>)
 80007a8:	0019      	movs	r1, r3
 80007aa:	0010      	movs	r0, r2
 80007ac:	f001 fd56 	bl	800225c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD2 PD3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80007b0:	193b      	adds	r3, r7, r4
 80007b2:	220f      	movs	r2, #15
 80007b4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007b6:	193b      	adds	r3, r7, r4
 80007b8:	2203      	movs	r2, #3
 80007ba:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007bc:	193b      	adds	r3, r7, r4
 80007be:	2200      	movs	r2, #0
 80007c0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007c2:	193b      	adds	r3, r7, r4
 80007c4:	4a20      	ldr	r2, [pc, #128]	@ (8000848 <MX_GPIO_Init+0x200>)
 80007c6:	0019      	movs	r1, r3
 80007c8:	0010      	movs	r0, r2
 80007ca:	f001 fd47 	bl	800225c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NFC_POWER_ENABLE_Pin;
 80007ce:	193b      	adds	r3, r7, r4
 80007d0:	2240      	movs	r2, #64	@ 0x40
 80007d2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007d4:	193b      	adds	r3, r7, r4
 80007d6:	2201      	movs	r2, #1
 80007d8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007da:	193b      	adds	r3, r7, r4
 80007dc:	2200      	movs	r2, #0
 80007de:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e0:	193b      	adds	r3, r7, r4
 80007e2:	2200      	movs	r2, #0
 80007e4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(NFC_POWER_ENABLE_GPIO_Port, &GPIO_InitStruct);
 80007e6:	193b      	adds	r3, r7, r4
 80007e8:	4a11      	ldr	r2, [pc, #68]	@ (8000830 <MX_GPIO_Init+0x1e8>)
 80007ea:	0019      	movs	r1, r3
 80007ec:	0010      	movs	r0, r2
 80007ee:	f001 fd35 	bl	800225c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NFC_FD_INT_Pin;
 80007f2:	0021      	movs	r1, r4
 80007f4:	187b      	adds	r3, r7, r1
 80007f6:	2280      	movs	r2, #128	@ 0x80
 80007f8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007fa:	187b      	adds	r3, r7, r1
 80007fc:	2288      	movs	r2, #136	@ 0x88
 80007fe:	0352      	lsls	r2, r2, #13
 8000800:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000802:	187b      	adds	r3, r7, r1
 8000804:	2200      	movs	r2, #0
 8000806:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(NFC_FD_INT_GPIO_Port, &GPIO_InitStruct);
 8000808:	187b      	adds	r3, r7, r1
 800080a:	4a09      	ldr	r2, [pc, #36]	@ (8000830 <MX_GPIO_Init+0x1e8>)
 800080c:	0019      	movs	r1, r3
 800080e:	0010      	movs	r0, r2
 8000810:	f001 fd24 	bl	800225c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8000814:	2200      	movs	r2, #0
 8000816:	2100      	movs	r1, #0
 8000818:	2007      	movs	r0, #7
 800081a:	f001 fced 	bl	80021f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 800081e:	2007      	movs	r0, #7
 8000820:	f001 fcff 	bl	8002222 <HAL_NVIC_EnableIRQ>

}
 8000824:	46c0      	nop			@ (mov r8, r8)
 8000826:	46bd      	mov	sp, r7
 8000828:	b00b      	add	sp, #44	@ 0x2c
 800082a:	bd90      	pop	{r4, r7, pc}
 800082c:	40021000 	.word	0x40021000
 8000830:	50000400 	.word	0x50000400
 8000834:	50000800 	.word	0x50000800
 8000838:	0000c0c0 	.word	0x0000c0c0
 800083c:	50001400 	.word	0x50001400
 8000840:	00009880 	.word	0x00009880
 8000844:	0000fc3b 	.word	0x0000fc3b
 8000848:	50000c00 	.word	0x50000c00

0800084c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000850:	4b1b      	ldr	r3, [pc, #108]	@ (80008c0 <MX_I2C1_Init+0x74>)
 8000852:	4a1c      	ldr	r2, [pc, #112]	@ (80008c4 <MX_I2C1_Init+0x78>)
 8000854:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10707DBC;
 8000856:	4b1a      	ldr	r3, [pc, #104]	@ (80008c0 <MX_I2C1_Init+0x74>)
 8000858:	4a1b      	ldr	r2, [pc, #108]	@ (80008c8 <MX_I2C1_Init+0x7c>)
 800085a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800085c:	4b18      	ldr	r3, [pc, #96]	@ (80008c0 <MX_I2C1_Init+0x74>)
 800085e:	2200      	movs	r2, #0
 8000860:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000862:	4b17      	ldr	r3, [pc, #92]	@ (80008c0 <MX_I2C1_Init+0x74>)
 8000864:	2201      	movs	r2, #1
 8000866:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000868:	4b15      	ldr	r3, [pc, #84]	@ (80008c0 <MX_I2C1_Init+0x74>)
 800086a:	2200      	movs	r2, #0
 800086c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800086e:	4b14      	ldr	r3, [pc, #80]	@ (80008c0 <MX_I2C1_Init+0x74>)
 8000870:	2200      	movs	r2, #0
 8000872:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000874:	4b12      	ldr	r3, [pc, #72]	@ (80008c0 <MX_I2C1_Init+0x74>)
 8000876:	2200      	movs	r2, #0
 8000878:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800087a:	4b11      	ldr	r3, [pc, #68]	@ (80008c0 <MX_I2C1_Init+0x74>)
 800087c:	2200      	movs	r2, #0
 800087e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000880:	4b0f      	ldr	r3, [pc, #60]	@ (80008c0 <MX_I2C1_Init+0x74>)
 8000882:	2200      	movs	r2, #0
 8000884:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000886:	4b0e      	ldr	r3, [pc, #56]	@ (80008c0 <MX_I2C1_Init+0x74>)
 8000888:	0018      	movs	r0, r3
 800088a:	f001 fec1 	bl	8002610 <HAL_I2C_Init>
 800088e:	1e03      	subs	r3, r0, #0
 8000890:	d001      	beq.n	8000896 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000892:	f000 f92c 	bl	8000aee <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000896:	4b0a      	ldr	r3, [pc, #40]	@ (80008c0 <MX_I2C1_Init+0x74>)
 8000898:	2100      	movs	r1, #0
 800089a:	0018      	movs	r0, r3
 800089c:	f001 ff5e 	bl	800275c <HAL_I2CEx_ConfigAnalogFilter>
 80008a0:	1e03      	subs	r3, r0, #0
 80008a2:	d001      	beq.n	80008a8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80008a4:	f000 f923 	bl	8000aee <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80008a8:	4b05      	ldr	r3, [pc, #20]	@ (80008c0 <MX_I2C1_Init+0x74>)
 80008aa:	2100      	movs	r1, #0
 80008ac:	0018      	movs	r0, r3
 80008ae:	f001 ffa1 	bl	80027f4 <HAL_I2CEx_ConfigDigitalFilter>
 80008b2:	1e03      	subs	r3, r0, #0
 80008b4:	d001      	beq.n	80008ba <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80008b6:	f000 f91a 	bl	8000aee <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008ba:	46c0      	nop			@ (mov r8, r8)
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	2000008c 	.word	0x2000008c
 80008c4:	40005400 	.word	0x40005400
 80008c8:	10707dbc 	.word	0x10707dbc

080008cc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80008cc:	b590      	push	{r4, r7, lr}
 80008ce:	b091      	sub	sp, #68	@ 0x44
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d4:	232c      	movs	r3, #44	@ 0x2c
 80008d6:	18fb      	adds	r3, r7, r3
 80008d8:	0018      	movs	r0, r3
 80008da:	2314      	movs	r3, #20
 80008dc:	001a      	movs	r2, r3
 80008de:	2100      	movs	r1, #0
 80008e0:	f004 fe48 	bl	8005574 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008e4:	2410      	movs	r4, #16
 80008e6:	193b      	adds	r3, r7, r4
 80008e8:	0018      	movs	r0, r3
 80008ea:	231c      	movs	r3, #28
 80008ec:	001a      	movs	r2, r3
 80008ee:	2100      	movs	r1, #0
 80008f0:	f004 fe40 	bl	8005574 <memset>
  if(i2cHandle->Instance==I2C1)
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	4a22      	ldr	r2, [pc, #136]	@ (8000984 <HAL_I2C_MspInit+0xb8>)
 80008fa:	4293      	cmp	r3, r2
 80008fc:	d13e      	bne.n	800097c <HAL_I2C_MspInit+0xb0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80008fe:	193b      	adds	r3, r7, r4
 8000900:	2220      	movs	r2, #32
 8000902:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000904:	193b      	adds	r3, r7, r4
 8000906:	2200      	movs	r2, #0
 8000908:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800090a:	193b      	adds	r3, r7, r4
 800090c:	0018      	movs	r0, r3
 800090e:	f002 fd25 	bl	800335c <HAL_RCCEx_PeriphCLKConfig>
 8000912:	1e03      	subs	r3, r0, #0
 8000914:	d001      	beq.n	800091a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000916:	f000 f8ea 	bl	8000aee <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800091a:	4b1b      	ldr	r3, [pc, #108]	@ (8000988 <HAL_I2C_MspInit+0xbc>)
 800091c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800091e:	4b1a      	ldr	r3, [pc, #104]	@ (8000988 <HAL_I2C_MspInit+0xbc>)
 8000920:	2102      	movs	r1, #2
 8000922:	430a      	orrs	r2, r1
 8000924:	635a      	str	r2, [r3, #52]	@ 0x34
 8000926:	4b18      	ldr	r3, [pc, #96]	@ (8000988 <HAL_I2C_MspInit+0xbc>)
 8000928:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800092a:	2202      	movs	r2, #2
 800092c:	4013      	ands	r3, r2
 800092e:	60fb      	str	r3, [r7, #12]
 8000930:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = NFC_I2C_SCL_Pin|NFC_I2C_SDA_Pin;
 8000932:	212c      	movs	r1, #44	@ 0x2c
 8000934:	187b      	adds	r3, r7, r1
 8000936:	22c0      	movs	r2, #192	@ 0xc0
 8000938:	0092      	lsls	r2, r2, #2
 800093a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800093c:	187b      	adds	r3, r7, r1
 800093e:	2212      	movs	r2, #18
 8000940:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000942:	187b      	adds	r3, r7, r1
 8000944:	2200      	movs	r2, #0
 8000946:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000948:	187b      	adds	r3, r7, r1
 800094a:	2200      	movs	r2, #0
 800094c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 800094e:	187b      	adds	r3, r7, r1
 8000950:	2206      	movs	r2, #6
 8000952:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000954:	187b      	adds	r3, r7, r1
 8000956:	4a0d      	ldr	r2, [pc, #52]	@ (800098c <HAL_I2C_MspInit+0xc0>)
 8000958:	0019      	movs	r1, r3
 800095a:	0010      	movs	r0, r2
 800095c:	f001 fc7e 	bl	800225c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000960:	4b09      	ldr	r3, [pc, #36]	@ (8000988 <HAL_I2C_MspInit+0xbc>)
 8000962:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000964:	4b08      	ldr	r3, [pc, #32]	@ (8000988 <HAL_I2C_MspInit+0xbc>)
 8000966:	2180      	movs	r1, #128	@ 0x80
 8000968:	0389      	lsls	r1, r1, #14
 800096a:	430a      	orrs	r2, r1
 800096c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800096e:	4b06      	ldr	r3, [pc, #24]	@ (8000988 <HAL_I2C_MspInit+0xbc>)
 8000970:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000972:	2380      	movs	r3, #128	@ 0x80
 8000974:	039b      	lsls	r3, r3, #14
 8000976:	4013      	ands	r3, r2
 8000978:	60bb      	str	r3, [r7, #8]
 800097a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800097c:	46c0      	nop			@ (mov r8, r8)
 800097e:	46bd      	mov	sp, r7
 8000980:	b011      	add	sp, #68	@ 0x44
 8000982:	bd90      	pop	{r4, r7, pc}
 8000984:	40005400 	.word	0x40005400
 8000988:	40021000 	.word	0x40021000
 800098c:	50000400 	.word	0x50000400

08000990 <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8000994:	4b0b      	ldr	r3, [pc, #44]	@ (80009c4 <MX_IWDG_Init+0x34>)
 8000996:	4a0c      	ldr	r2, [pc, #48]	@ (80009c8 <MX_IWDG_Init+0x38>)
 8000998:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
 800099a:	4b0a      	ldr	r3, [pc, #40]	@ (80009c4 <MX_IWDG_Init+0x34>)
 800099c:	2200      	movs	r2, #0
 800099e:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 80009a0:	4b08      	ldr	r3, [pc, #32]	@ (80009c4 <MX_IWDG_Init+0x34>)
 80009a2:	4a0a      	ldr	r2, [pc, #40]	@ (80009cc <MX_IWDG_Init+0x3c>)
 80009a4:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 4095;
 80009a6:	4b07      	ldr	r3, [pc, #28]	@ (80009c4 <MX_IWDG_Init+0x34>)
 80009a8:	4a08      	ldr	r2, [pc, #32]	@ (80009cc <MX_IWDG_Init+0x3c>)
 80009aa:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 80009ac:	4b05      	ldr	r3, [pc, #20]	@ (80009c4 <MX_IWDG_Init+0x34>)
 80009ae:	0018      	movs	r0, r3
 80009b0:	f001 ff6c 	bl	800288c <HAL_IWDG_Init>
 80009b4:	1e03      	subs	r3, r0, #0
 80009b6:	d001      	beq.n	80009bc <MX_IWDG_Init+0x2c>
  {
    Error_Handler();
 80009b8:	f000 f899 	bl	8000aee <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 80009bc:	46c0      	nop			@ (mov r8, r8)
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	46c0      	nop			@ (mov r8, r8)
 80009c4:	200000e0 	.word	0x200000e0
 80009c8:	40003000 	.word	0x40003000
 80009cc:	00000fff 	.word	0x00000fff

080009d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009d4:	f000 fcdc 	bl	8001390 <HAL_Init>
 #endif

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009d8:	f000 f82c 	bl	8000a34 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  hal_gpio_init();
 80009dc:	f004 fc2e 	bl	800523c <hal_gpio_init>
  MX_I2C1_Init();
 80009e0:	f7ff ff34 	bl	800084c <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80009e4:	f000 fc1a 	bl	800121c <MX_USART1_UART_Init>
  MX_ADC1_Init();
 80009e8:	f7ff fd5c 	bl	80004a4 <MX_ADC1_Init>

	hal_timer_init();
 80009ec:	f004 fc6d 	bl	80052ca <hal_timer_init>
  MX_IWDG_Init();
  MX_RTC_Init();
  MX_TIM15_Init();
  /* USER CODE BEGIN 2 */
#endif
  hal_watchdog_init(); // Initialize the the watch dog handle in submod-hal_generic
 80009f0:	f004 fd9e 	bl	8005530 <hal_watchdog_init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  /* reset the WDT */
	  hal_watchdog_reset();
 80009f4:	f004 fdae 	bl	8005554 <hal_watchdog_reset>

      TickSinceLastExecution = hal_timer_get_ticks_since_count(LastExecutionCount);
 80009f8:	4b0c      	ldr	r3, [pc, #48]	@ (8000a2c <main+0x5c>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	0018      	movs	r0, r3
 80009fe:	f004 fc49 	bl	8005294 <hal_timer_get_ticks_since_count>
 8000a02:	0002      	movs	r2, r0
 8000a04:	4b0a      	ldr	r3, [pc, #40]	@ (8000a30 <main+0x60>)
 8000a06:	601a      	str	r2, [r3, #0]

	  if (LED_TIMEOUT_INTERVAL <= TickSinceLastExecution)
 8000a08:	4b09      	ldr	r3, [pc, #36]	@ (8000a30 <main+0x60>)
 8000a0a:	681a      	ldr	r2, [r3, #0]
 8000a0c:	23fa      	movs	r3, #250	@ 0xfa
 8000a0e:	005b      	lsls	r3, r3, #1
 8000a10:	429a      	cmp	r2, r3
 8000a12:	d307      	bcc.n	8000a24 <main+0x54>
	  {
		  // Toggle the LED
		  LastExecutionCount = hal_timer_get_systick();
 8000a14:	f004 fc36 	bl	8005284 <hal_timer_get_systick>
 8000a18:	0002      	movs	r2, r0
 8000a1a:	4b04      	ldr	r3, [pc, #16]	@ (8000a2c <main+0x5c>)
 8000a1c:	601a      	str	r2, [r3, #0]
		  hal_gpio_toggle_output(LED_GREEN);
 8000a1e:	2003      	movs	r0, #3
 8000a20:	f004 fc14 	bl	800524c <hal_gpio_toggle_output>
	  }

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  hal_watchdog_reset();
 8000a24:	f004 fd96 	bl	8005554 <hal_watchdog_reset>
	  hal_watchdog_reset();
 8000a28:	e7e4      	b.n	80009f4 <main+0x24>
 8000a2a:	46c0      	nop			@ (mov r8, r8)
 8000a2c:	200000f0 	.word	0x200000f0
 8000a30:	200000f4 	.word	0x200000f4

08000a34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a34:	b590      	push	{r4, r7, lr}
 8000a36:	b093      	sub	sp, #76	@ 0x4c
 8000a38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a3a:	2414      	movs	r4, #20
 8000a3c:	193b      	adds	r3, r7, r4
 8000a3e:	0018      	movs	r0, r3
 8000a40:	2334      	movs	r3, #52	@ 0x34
 8000a42:	001a      	movs	r2, r3
 8000a44:	2100      	movs	r1, #0
 8000a46:	f004 fd95 	bl	8005574 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a4a:	1d3b      	adds	r3, r7, #4
 8000a4c:	0018      	movs	r0, r3
 8000a4e:	2310      	movs	r3, #16
 8000a50:	001a      	movs	r2, r3
 8000a52:	2100      	movs	r1, #0
 8000a54:	f004 fd8e 	bl	8005574 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a58:	2380      	movs	r3, #128	@ 0x80
 8000a5a:	009b      	lsls	r3, r3, #2
 8000a5c:	0018      	movs	r0, r3
 8000a5e:	f001 ff77 	bl	8002950 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000a62:	193b      	adds	r3, r7, r4
 8000a64:	220a      	movs	r2, #10
 8000a66:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a68:	193b      	adds	r3, r7, r4
 8000a6a:	2280      	movs	r2, #128	@ 0x80
 8000a6c:	0052      	lsls	r2, r2, #1
 8000a6e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000a70:	0021      	movs	r1, r4
 8000a72:	187b      	adds	r3, r7, r1
 8000a74:	2200      	movs	r2, #0
 8000a76:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a78:	187b      	adds	r3, r7, r1
 8000a7a:	2240      	movs	r2, #64	@ 0x40
 8000a7c:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000a7e:	187b      	adds	r3, r7, r1
 8000a80:	2201      	movs	r2, #1
 8000a82:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a84:	187b      	adds	r3, r7, r1
 8000a86:	2202      	movs	r2, #2
 8000a88:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a8a:	187b      	adds	r3, r7, r1
 8000a8c:	2202      	movs	r2, #2
 8000a8e:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000a90:	187b      	adds	r3, r7, r1
 8000a92:	2200      	movs	r2, #0
 8000a94:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000a96:	187b      	adds	r3, r7, r1
 8000a98:	2208      	movs	r2, #8
 8000a9a:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a9c:	187b      	adds	r3, r7, r1
 8000a9e:	2280      	movs	r2, #128	@ 0x80
 8000aa0:	0292      	lsls	r2, r2, #10
 8000aa2:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000aa4:	187b      	adds	r3, r7, r1
 8000aa6:	2280      	movs	r2, #128	@ 0x80
 8000aa8:	0592      	lsls	r2, r2, #22
 8000aaa:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000aac:	187b      	adds	r3, r7, r1
 8000aae:	0018      	movs	r0, r3
 8000ab0:	f001 ff9a 	bl	80029e8 <HAL_RCC_OscConfig>
 8000ab4:	1e03      	subs	r3, r0, #0
 8000ab6:	d001      	beq.n	8000abc <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000ab8:	f000 f819 	bl	8000aee <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000abc:	1d3b      	adds	r3, r7, #4
 8000abe:	2207      	movs	r2, #7
 8000ac0:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ac2:	1d3b      	adds	r3, r7, #4
 8000ac4:	2202      	movs	r2, #2
 8000ac6:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ac8:	1d3b      	adds	r3, r7, #4
 8000aca:	2200      	movs	r2, #0
 8000acc:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ace:	1d3b      	adds	r3, r7, #4
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ad4:	1d3b      	adds	r3, r7, #4
 8000ad6:	2102      	movs	r1, #2
 8000ad8:	0018      	movs	r0, r3
 8000ada:	f002 fa95 	bl	8003008 <HAL_RCC_ClockConfig>
 8000ade:	1e03      	subs	r3, r0, #0
 8000ae0:	d001      	beq.n	8000ae6 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000ae2:	f000 f804 	bl	8000aee <Error_Handler>
  }
}
 8000ae6:	46c0      	nop			@ (mov r8, r8)
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	b013      	add	sp, #76	@ 0x4c
 8000aec:	bd90      	pop	{r4, r7, pc}

08000aee <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aee:	b580      	push	{r7, lr}
 8000af0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000af2:	b672      	cpsid	i
}
 8000af4:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000af6:	46c0      	nop			@ (mov r8, r8)
 8000af8:	e7fd      	b.n	8000af6 <Error_Handler+0x8>
	...

08000afc <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000b00:	4b13      	ldr	r3, [pc, #76]	@ (8000b50 <MX_RTC_Init+0x54>)
 8000b02:	4a14      	ldr	r2, [pc, #80]	@ (8000b54 <MX_RTC_Init+0x58>)
 8000b04:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000b06:	4b12      	ldr	r3, [pc, #72]	@ (8000b50 <MX_RTC_Init+0x54>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 8000b0c:	4b10      	ldr	r3, [pc, #64]	@ (8000b50 <MX_RTC_Init+0x54>)
 8000b0e:	227f      	movs	r2, #127	@ 0x7f
 8000b10:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 8000b12:	4b0f      	ldr	r3, [pc, #60]	@ (8000b50 <MX_RTC_Init+0x54>)
 8000b14:	22ff      	movs	r2, #255	@ 0xff
 8000b16:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000b18:	4b0d      	ldr	r3, [pc, #52]	@ (8000b50 <MX_RTC_Init+0x54>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000b1e:	4b0c      	ldr	r3, [pc, #48]	@ (8000b50 <MX_RTC_Init+0x54>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000b24:	4b0a      	ldr	r3, [pc, #40]	@ (8000b50 <MX_RTC_Init+0x54>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000b2a:	4b09      	ldr	r3, [pc, #36]	@ (8000b50 <MX_RTC_Init+0x54>)
 8000b2c:	2280      	movs	r2, #128	@ 0x80
 8000b2e:	05d2      	lsls	r2, r2, #23
 8000b30:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8000b32:	4b07      	ldr	r3, [pc, #28]	@ (8000b50 <MX_RTC_Init+0x54>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000b38:	4b05      	ldr	r3, [pc, #20]	@ (8000b50 <MX_RTC_Init+0x54>)
 8000b3a:	0018      	movs	r0, r3
 8000b3c:	f002 fd42 	bl	80035c4 <HAL_RTC_Init>
 8000b40:	1e03      	subs	r3, r0, #0
 8000b42:	d001      	beq.n	8000b48 <MX_RTC_Init+0x4c>
  {
    Error_Handler();
 8000b44:	f7ff ffd3 	bl	8000aee <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000b48:	46c0      	nop			@ (mov r8, r8)
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	46c0      	nop			@ (mov r8, r8)
 8000b50:	200000f8 	.word	0x200000f8
 8000b54:	40002800 	.word	0x40002800

08000b58 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000b58:	b590      	push	{r4, r7, lr}
 8000b5a:	b08b      	sub	sp, #44	@ 0x2c
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b60:	240c      	movs	r4, #12
 8000b62:	193b      	adds	r3, r7, r4
 8000b64:	0018      	movs	r0, r3
 8000b66:	231c      	movs	r3, #28
 8000b68:	001a      	movs	r2, r3
 8000b6a:	2100      	movs	r1, #0
 8000b6c:	f004 fd02 	bl	8005574 <memset>
  if(rtcHandle->Instance==RTC)
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	4a15      	ldr	r2, [pc, #84]	@ (8000bcc <HAL_RTC_MspInit+0x74>)
 8000b76:	4293      	cmp	r3, r2
 8000b78:	d124      	bne.n	8000bc4 <HAL_RTC_MspInit+0x6c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000b7a:	193b      	adds	r3, r7, r4
 8000b7c:	2280      	movs	r2, #128	@ 0x80
 8000b7e:	0292      	lsls	r2, r2, #10
 8000b80:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000b82:	193b      	adds	r3, r7, r4
 8000b84:	2280      	movs	r2, #128	@ 0x80
 8000b86:	0092      	lsls	r2, r2, #2
 8000b88:	619a      	str	r2, [r3, #24]

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b8a:	193b      	adds	r3, r7, r4
 8000b8c:	0018      	movs	r0, r3
 8000b8e:	f002 fbe5 	bl	800335c <HAL_RCCEx_PeriphCLKConfig>
 8000b92:	1e03      	subs	r3, r0, #0
 8000b94:	d001      	beq.n	8000b9a <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8000b96:	f7ff ffaa 	bl	8000aee <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000b9a:	4b0d      	ldr	r3, [pc, #52]	@ (8000bd0 <HAL_RTC_MspInit+0x78>)
 8000b9c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8000b9e:	4b0c      	ldr	r3, [pc, #48]	@ (8000bd0 <HAL_RTC_MspInit+0x78>)
 8000ba0:	2180      	movs	r1, #128	@ 0x80
 8000ba2:	0209      	lsls	r1, r1, #8
 8000ba4:	430a      	orrs	r2, r1
 8000ba6:	65da      	str	r2, [r3, #92]	@ 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8000ba8:	4b09      	ldr	r3, [pc, #36]	@ (8000bd0 <HAL_RTC_MspInit+0x78>)
 8000baa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000bac:	4b08      	ldr	r3, [pc, #32]	@ (8000bd0 <HAL_RTC_MspInit+0x78>)
 8000bae:	2180      	movs	r1, #128	@ 0x80
 8000bb0:	00c9      	lsls	r1, r1, #3
 8000bb2:	430a      	orrs	r2, r1
 8000bb4:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000bb6:	4b06      	ldr	r3, [pc, #24]	@ (8000bd0 <HAL_RTC_MspInit+0x78>)
 8000bb8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000bba:	2380      	movs	r3, #128	@ 0x80
 8000bbc:	00db      	lsls	r3, r3, #3
 8000bbe:	4013      	ands	r3, r2
 8000bc0:	60bb      	str	r3, [r7, #8]
 8000bc2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000bc4:	46c0      	nop			@ (mov r8, r8)
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	b00b      	add	sp, #44	@ 0x2c
 8000bca:	bd90      	pop	{r4, r7, pc}
 8000bcc:	40002800 	.word	0x40002800
 8000bd0:	40021000 	.word	0x40021000

08000bd4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b082      	sub	sp, #8
 8000bd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bda:	4b11      	ldr	r3, [pc, #68]	@ (8000c20 <HAL_MspInit+0x4c>)
 8000bdc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000bde:	4b10      	ldr	r3, [pc, #64]	@ (8000c20 <HAL_MspInit+0x4c>)
 8000be0:	2101      	movs	r1, #1
 8000be2:	430a      	orrs	r2, r1
 8000be4:	641a      	str	r2, [r3, #64]	@ 0x40
 8000be6:	4b0e      	ldr	r3, [pc, #56]	@ (8000c20 <HAL_MspInit+0x4c>)
 8000be8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bea:	2201      	movs	r2, #1
 8000bec:	4013      	ands	r3, r2
 8000bee:	607b      	str	r3, [r7, #4]
 8000bf0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bf2:	4b0b      	ldr	r3, [pc, #44]	@ (8000c20 <HAL_MspInit+0x4c>)
 8000bf4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000bf6:	4b0a      	ldr	r3, [pc, #40]	@ (8000c20 <HAL_MspInit+0x4c>)
 8000bf8:	2180      	movs	r1, #128	@ 0x80
 8000bfa:	0549      	lsls	r1, r1, #21
 8000bfc:	430a      	orrs	r2, r1
 8000bfe:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000c00:	4b07      	ldr	r3, [pc, #28]	@ (8000c20 <HAL_MspInit+0x4c>)
 8000c02:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000c04:	2380      	movs	r3, #128	@ 0x80
 8000c06:	055b      	lsls	r3, r3, #21
 8000c08:	4013      	ands	r3, r2
 8000c0a:	603b      	str	r3, [r7, #0]
 8000c0c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8000c0e:	23c0      	movs	r3, #192	@ 0xc0
 8000c10:	00db      	lsls	r3, r3, #3
 8000c12:	0018      	movs	r0, r3
 8000c14:	f000 fc42 	bl	800149c <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c18:	46c0      	nop			@ (mov r8, r8)
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	b002      	add	sp, #8
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	40021000 	.word	0x40021000

08000c24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c28:	46c0      	nop			@ (mov r8, r8)
 8000c2a:	e7fd      	b.n	8000c28 <NMI_Handler+0x4>

08000c2c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c30:	46c0      	nop			@ (mov r8, r8)
 8000c32:	e7fd      	b.n	8000c30 <HardFault_Handler+0x4>

08000c34 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000c38:	46c0      	nop			@ (mov r8, r8)
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}

08000c3e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c3e:	b580      	push	{r7, lr}
 8000c40:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c42:	46c0      	nop			@ (mov r8, r8)
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}

08000c48 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c4c:	f000 fc0a 	bl	8001464 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c50:	46c0      	nop			@ (mov r8, r8)
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}

08000c56 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8000c56:	b580      	push	{r7, lr}
 8000c58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(NFC_FD_INT_Pin);
 8000c5a:	2080      	movs	r0, #128	@ 0x80
 8000c5c:	f001 fc9a 	bl	8002594 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8000c60:	46c0      	nop			@ (mov r8, r8)
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
	...

08000c68 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 interrupt.
  */
void ADC1_IRQHandler(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000c6c:	4b03      	ldr	r3, [pc, #12]	@ (8000c7c <ADC1_IRQHandler+0x14>)
 8000c6e:	0018      	movs	r0, r3
 8000c70:	f000 feee 	bl	8001a50 <HAL_ADC_IRQHandler>
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
  /* USER CODE BEGIN USART1_IRQn 1 */
#endif
  /* USER CODE END USART1_IRQn 1 */
}
 8000c74:	46c0      	nop			@ (mov r8, r8)
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	46c0      	nop			@ (mov r8, r8)
 8000c7c:	20000028 	.word	0x20000028

08000c80 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim15;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b09c      	sub	sp, #112	@ 0x70
 8000c84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c86:	2360      	movs	r3, #96	@ 0x60
 8000c88:	18fb      	adds	r3, r7, r3
 8000c8a:	0018      	movs	r0, r3
 8000c8c:	2310      	movs	r3, #16
 8000c8e:	001a      	movs	r2, r3
 8000c90:	2100      	movs	r1, #0
 8000c92:	f004 fc6f 	bl	8005574 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c96:	2354      	movs	r3, #84	@ 0x54
 8000c98:	18fb      	adds	r3, r7, r3
 8000c9a:	0018      	movs	r0, r3
 8000c9c:	230c      	movs	r3, #12
 8000c9e:	001a      	movs	r2, r3
 8000ca0:	2100      	movs	r1, #0
 8000ca2:	f004 fc67 	bl	8005574 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ca6:	2338      	movs	r3, #56	@ 0x38
 8000ca8:	18fb      	adds	r3, r7, r3
 8000caa:	0018      	movs	r0, r3
 8000cac:	231c      	movs	r3, #28
 8000cae:	001a      	movs	r2, r3
 8000cb0:	2100      	movs	r1, #0
 8000cb2:	f004 fc5f 	bl	8005574 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000cb6:	1d3b      	adds	r3, r7, #4
 8000cb8:	0018      	movs	r0, r3
 8000cba:	2334      	movs	r3, #52	@ 0x34
 8000cbc:	001a      	movs	r2, r3
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	f004 fc58 	bl	8005574 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000cc4:	4b51      	ldr	r3, [pc, #324]	@ (8000e0c <MX_TIM1_Init+0x18c>)
 8000cc6:	4a52      	ldr	r2, [pc, #328]	@ (8000e10 <MX_TIM1_Init+0x190>)
 8000cc8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000cca:	4b50      	ldr	r3, [pc, #320]	@ (8000e0c <MX_TIM1_Init+0x18c>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cd0:	4b4e      	ldr	r3, [pc, #312]	@ (8000e0c <MX_TIM1_Init+0x18c>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000cd6:	4b4d      	ldr	r3, [pc, #308]	@ (8000e0c <MX_TIM1_Init+0x18c>)
 8000cd8:	4a4e      	ldr	r2, [pc, #312]	@ (8000e14 <MX_TIM1_Init+0x194>)
 8000cda:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cdc:	4b4b      	ldr	r3, [pc, #300]	@ (8000e0c <MX_TIM1_Init+0x18c>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000ce2:	4b4a      	ldr	r3, [pc, #296]	@ (8000e0c <MX_TIM1_Init+0x18c>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ce8:	4b48      	ldr	r3, [pc, #288]	@ (8000e0c <MX_TIM1_Init+0x18c>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000cee:	4b47      	ldr	r3, [pc, #284]	@ (8000e0c <MX_TIM1_Init+0x18c>)
 8000cf0:	0018      	movs	r0, r3
 8000cf2:	f002 fdb5 	bl	8003860 <HAL_TIM_Base_Init>
 8000cf6:	1e03      	subs	r3, r0, #0
 8000cf8:	d001      	beq.n	8000cfe <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 8000cfa:	f7ff fef8 	bl	8000aee <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cfe:	2160      	movs	r1, #96	@ 0x60
 8000d00:	187b      	adds	r3, r7, r1
 8000d02:	2280      	movs	r2, #128	@ 0x80
 8000d04:	0152      	lsls	r2, r2, #5
 8000d06:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000d08:	187a      	adds	r2, r7, r1
 8000d0a:	4b40      	ldr	r3, [pc, #256]	@ (8000e0c <MX_TIM1_Init+0x18c>)
 8000d0c:	0011      	movs	r1, r2
 8000d0e:	0018      	movs	r0, r3
 8000d10:	f002 ff56 	bl	8003bc0 <HAL_TIM_ConfigClockSource>
 8000d14:	1e03      	subs	r3, r0, #0
 8000d16:	d001      	beq.n	8000d1c <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8000d18:	f7ff fee9 	bl	8000aee <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000d1c:	4b3b      	ldr	r3, [pc, #236]	@ (8000e0c <MX_TIM1_Init+0x18c>)
 8000d1e:	0018      	movs	r0, r3
 8000d20:	f002 fdf6 	bl	8003910 <HAL_TIM_PWM_Init>
 8000d24:	1e03      	subs	r3, r0, #0
 8000d26:	d001      	beq.n	8000d2c <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 8000d28:	f7ff fee1 	bl	8000aee <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d2c:	2154      	movs	r1, #84	@ 0x54
 8000d2e:	187b      	adds	r3, r7, r1
 8000d30:	2200      	movs	r2, #0
 8000d32:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000d34:	187b      	adds	r3, r7, r1
 8000d36:	2200      	movs	r2, #0
 8000d38:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d3a:	187b      	adds	r3, r7, r1
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000d40:	187a      	adds	r2, r7, r1
 8000d42:	4b32      	ldr	r3, [pc, #200]	@ (8000e0c <MX_TIM1_Init+0x18c>)
 8000d44:	0011      	movs	r1, r2
 8000d46:	0018      	movs	r0, r3
 8000d48:	f003 fbf4 	bl	8004534 <HAL_TIMEx_MasterConfigSynchronization>
 8000d4c:	1e03      	subs	r3, r0, #0
 8000d4e:	d001      	beq.n	8000d54 <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 8000d50:	f7ff fecd 	bl	8000aee <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d54:	2138      	movs	r1, #56	@ 0x38
 8000d56:	187b      	adds	r3, r7, r1
 8000d58:	2260      	movs	r2, #96	@ 0x60
 8000d5a:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000d5c:	187b      	adds	r3, r7, r1
 8000d5e:	2200      	movs	r2, #0
 8000d60:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d62:	187b      	adds	r3, r7, r1
 8000d64:	2200      	movs	r2, #0
 8000d66:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000d68:	187b      	adds	r3, r7, r1
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d6e:	187b      	adds	r3, r7, r1
 8000d70:	2200      	movs	r2, #0
 8000d72:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000d74:	187b      	adds	r3, r7, r1
 8000d76:	2200      	movs	r2, #0
 8000d78:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000d7a:	187b      	adds	r3, r7, r1
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d80:	1879      	adds	r1, r7, r1
 8000d82:	4b22      	ldr	r3, [pc, #136]	@ (8000e0c <MX_TIM1_Init+0x18c>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	0018      	movs	r0, r3
 8000d88:	f002 fe1a 	bl	80039c0 <HAL_TIM_PWM_ConfigChannel>
 8000d8c:	1e03      	subs	r3, r0, #0
 8000d8e:	d001      	beq.n	8000d94 <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 8000d90:	f7ff fead 	bl	8000aee <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000d94:	1d3b      	adds	r3, r7, #4
 8000d96:	2200      	movs	r2, #0
 8000d98:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000d9a:	1d3b      	adds	r3, r7, #4
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000da0:	1d3b      	adds	r3, r7, #4
 8000da2:	2200      	movs	r2, #0
 8000da4:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000da6:	1d3b      	adds	r3, r7, #4
 8000da8:	2200      	movs	r2, #0
 8000daa:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000dac:	1d3b      	adds	r3, r7, #4
 8000dae:	2200      	movs	r2, #0
 8000db0:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000db2:	1d3b      	adds	r3, r7, #4
 8000db4:	2280      	movs	r2, #128	@ 0x80
 8000db6:	0192      	lsls	r2, r2, #6
 8000db8:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000dba:	1d3b      	adds	r3, r7, #4
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000dc0:	1d3b      	adds	r3, r7, #4
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000dc6:	1d3b      	adds	r3, r7, #4
 8000dc8:	2200      	movs	r2, #0
 8000dca:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000dcc:	1d3b      	adds	r3, r7, #4
 8000dce:	2280      	movs	r2, #128	@ 0x80
 8000dd0:	0492      	lsls	r2, r2, #18
 8000dd2:	625a      	str	r2, [r3, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000dd4:	1d3b      	adds	r3, r7, #4
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	629a      	str	r2, [r3, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000dda:	1d3b      	adds	r3, r7, #4
 8000ddc:	2200      	movs	r2, #0
 8000dde:	62da      	str	r2, [r3, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000de0:	1d3b      	adds	r3, r7, #4
 8000de2:	2200      	movs	r2, #0
 8000de4:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000de6:	1d3a      	adds	r2, r7, #4
 8000de8:	4b08      	ldr	r3, [pc, #32]	@ (8000e0c <MX_TIM1_Init+0x18c>)
 8000dea:	0011      	movs	r1, r2
 8000dec:	0018      	movs	r0, r3
 8000dee:	f003 fc09 	bl	8004604 <HAL_TIMEx_ConfigBreakDeadTime>
 8000df2:	1e03      	subs	r3, r0, #0
 8000df4:	d001      	beq.n	8000dfa <MX_TIM1_Init+0x17a>
  {
    Error_Handler();
 8000df6:	f7ff fe7a 	bl	8000aee <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000dfa:	4b04      	ldr	r3, [pc, #16]	@ (8000e0c <MX_TIM1_Init+0x18c>)
 8000dfc:	0018      	movs	r0, r3
 8000dfe:	f000 f979 	bl	80010f4 <HAL_TIM_MspPostInit>

}
 8000e02:	46c0      	nop			@ (mov r8, r8)
 8000e04:	46bd      	mov	sp, r7
 8000e06:	b01c      	add	sp, #112	@ 0x70
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	46c0      	nop			@ (mov r8, r8)
 8000e0c:	20000124 	.word	0x20000124
 8000e10:	40012c00 	.word	0x40012c00
 8000e14:	0000ffff 	.word	0x0000ffff

08000e18 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b08e      	sub	sp, #56	@ 0x38
 8000e1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e1e:	2328      	movs	r3, #40	@ 0x28
 8000e20:	18fb      	adds	r3, r7, r3
 8000e22:	0018      	movs	r0, r3
 8000e24:	2310      	movs	r3, #16
 8000e26:	001a      	movs	r2, r3
 8000e28:	2100      	movs	r1, #0
 8000e2a:	f004 fba3 	bl	8005574 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e2e:	231c      	movs	r3, #28
 8000e30:	18fb      	adds	r3, r7, r3
 8000e32:	0018      	movs	r0, r3
 8000e34:	230c      	movs	r3, #12
 8000e36:	001a      	movs	r2, r3
 8000e38:	2100      	movs	r1, #0
 8000e3a:	f004 fb9b 	bl	8005574 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e3e:	003b      	movs	r3, r7
 8000e40:	0018      	movs	r0, r3
 8000e42:	231c      	movs	r3, #28
 8000e44:	001a      	movs	r2, r3
 8000e46:	2100      	movs	r1, #0
 8000e48:	f004 fb94 	bl	8005574 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000e4c:	4b2f      	ldr	r3, [pc, #188]	@ (8000f0c <MX_TIM3_Init+0xf4>)
 8000e4e:	4a30      	ldr	r2, [pc, #192]	@ (8000f10 <MX_TIM3_Init+0xf8>)
 8000e50:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000e52:	4b2e      	ldr	r3, [pc, #184]	@ (8000f0c <MX_TIM3_Init+0xf4>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e58:	4b2c      	ldr	r3, [pc, #176]	@ (8000f0c <MX_TIM3_Init+0xf4>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000e5e:	4b2b      	ldr	r3, [pc, #172]	@ (8000f0c <MX_TIM3_Init+0xf4>)
 8000e60:	4a2c      	ldr	r2, [pc, #176]	@ (8000f14 <MX_TIM3_Init+0xfc>)
 8000e62:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e64:	4b29      	ldr	r3, [pc, #164]	@ (8000f0c <MX_TIM3_Init+0xf4>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e6a:	4b28      	ldr	r3, [pc, #160]	@ (8000f0c <MX_TIM3_Init+0xf4>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000e70:	4b26      	ldr	r3, [pc, #152]	@ (8000f0c <MX_TIM3_Init+0xf4>)
 8000e72:	0018      	movs	r0, r3
 8000e74:	f002 fcf4 	bl	8003860 <HAL_TIM_Base_Init>
 8000e78:	1e03      	subs	r3, r0, #0
 8000e7a:	d001      	beq.n	8000e80 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000e7c:	f7ff fe37 	bl	8000aee <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e80:	2128      	movs	r1, #40	@ 0x28
 8000e82:	187b      	adds	r3, r7, r1
 8000e84:	2280      	movs	r2, #128	@ 0x80
 8000e86:	0152      	lsls	r2, r2, #5
 8000e88:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000e8a:	187a      	adds	r2, r7, r1
 8000e8c:	4b1f      	ldr	r3, [pc, #124]	@ (8000f0c <MX_TIM3_Init+0xf4>)
 8000e8e:	0011      	movs	r1, r2
 8000e90:	0018      	movs	r0, r3
 8000e92:	f002 fe95 	bl	8003bc0 <HAL_TIM_ConfigClockSource>
 8000e96:	1e03      	subs	r3, r0, #0
 8000e98:	d001      	beq.n	8000e9e <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8000e9a:	f7ff fe28 	bl	8000aee <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000e9e:	4b1b      	ldr	r3, [pc, #108]	@ (8000f0c <MX_TIM3_Init+0xf4>)
 8000ea0:	0018      	movs	r0, r3
 8000ea2:	f002 fd35 	bl	8003910 <HAL_TIM_PWM_Init>
 8000ea6:	1e03      	subs	r3, r0, #0
 8000ea8:	d001      	beq.n	8000eae <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8000eaa:	f7ff fe20 	bl	8000aee <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000eae:	211c      	movs	r1, #28
 8000eb0:	187b      	adds	r3, r7, r1
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000eb6:	187b      	adds	r3, r7, r1
 8000eb8:	2200      	movs	r2, #0
 8000eba:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000ebc:	187a      	adds	r2, r7, r1
 8000ebe:	4b13      	ldr	r3, [pc, #76]	@ (8000f0c <MX_TIM3_Init+0xf4>)
 8000ec0:	0011      	movs	r1, r2
 8000ec2:	0018      	movs	r0, r3
 8000ec4:	f003 fb36 	bl	8004534 <HAL_TIMEx_MasterConfigSynchronization>
 8000ec8:	1e03      	subs	r3, r0, #0
 8000eca:	d001      	beq.n	8000ed0 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 8000ecc:	f7ff fe0f 	bl	8000aee <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ed0:	003b      	movs	r3, r7
 8000ed2:	2260      	movs	r2, #96	@ 0x60
 8000ed4:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000ed6:	003b      	movs	r3, r7
 8000ed8:	2200      	movs	r2, #0
 8000eda:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000edc:	003b      	movs	r3, r7
 8000ede:	2200      	movs	r2, #0
 8000ee0:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ee2:	003b      	movs	r3, r7
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ee8:	0039      	movs	r1, r7
 8000eea:	4b08      	ldr	r3, [pc, #32]	@ (8000f0c <MX_TIM3_Init+0xf4>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	0018      	movs	r0, r3
 8000ef0:	f002 fd66 	bl	80039c0 <HAL_TIM_PWM_ConfigChannel>
 8000ef4:	1e03      	subs	r3, r0, #0
 8000ef6:	d001      	beq.n	8000efc <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 8000ef8:	f7ff fdf9 	bl	8000aee <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000efc:	4b03      	ldr	r3, [pc, #12]	@ (8000f0c <MX_TIM3_Init+0xf4>)
 8000efe:	0018      	movs	r0, r3
 8000f00:	f000 f8f8 	bl	80010f4 <HAL_TIM_MspPostInit>

}
 8000f04:	46c0      	nop			@ (mov r8, r8)
 8000f06:	46bd      	mov	sp, r7
 8000f08:	b00e      	add	sp, #56	@ 0x38
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	20000170 	.word	0x20000170
 8000f10:	40000400 	.word	0x40000400
 8000f14:	0000ffff 	.word	0x0000ffff

08000f18 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b098      	sub	sp, #96	@ 0x60
 8000f1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f1e:	2354      	movs	r3, #84	@ 0x54
 8000f20:	18fb      	adds	r3, r7, r3
 8000f22:	0018      	movs	r0, r3
 8000f24:	230c      	movs	r3, #12
 8000f26:	001a      	movs	r2, r3
 8000f28:	2100      	movs	r1, #0
 8000f2a:	f004 fb23 	bl	8005574 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f2e:	2338      	movs	r3, #56	@ 0x38
 8000f30:	18fb      	adds	r3, r7, r3
 8000f32:	0018      	movs	r0, r3
 8000f34:	231c      	movs	r3, #28
 8000f36:	001a      	movs	r2, r3
 8000f38:	2100      	movs	r1, #0
 8000f3a:	f004 fb1b 	bl	8005574 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000f3e:	1d3b      	adds	r3, r7, #4
 8000f40:	0018      	movs	r0, r3
 8000f42:	2334      	movs	r3, #52	@ 0x34
 8000f44:	001a      	movs	r2, r3
 8000f46:	2100      	movs	r1, #0
 8000f48:	f004 fb14 	bl	8005574 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8000f4c:	4b3c      	ldr	r3, [pc, #240]	@ (8001040 <MX_TIM15_Init+0x128>)
 8000f4e:	4a3d      	ldr	r2, [pc, #244]	@ (8001044 <MX_TIM15_Init+0x12c>)
 8000f50:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8000f52:	4b3b      	ldr	r3, [pc, #236]	@ (8001040 <MX_TIM15_Init+0x128>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f58:	4b39      	ldr	r3, [pc, #228]	@ (8001040 <MX_TIM15_Init+0x128>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8000f5e:	4b38      	ldr	r3, [pc, #224]	@ (8001040 <MX_TIM15_Init+0x128>)
 8000f60:	4a39      	ldr	r2, [pc, #228]	@ (8001048 <MX_TIM15_Init+0x130>)
 8000f62:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f64:	4b36      	ldr	r3, [pc, #216]	@ (8001040 <MX_TIM15_Init+0x128>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8000f6a:	4b35      	ldr	r3, [pc, #212]	@ (8001040 <MX_TIM15_Init+0x128>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f70:	4b33      	ldr	r3, [pc, #204]	@ (8001040 <MX_TIM15_Init+0x128>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8000f76:	4b32      	ldr	r3, [pc, #200]	@ (8001040 <MX_TIM15_Init+0x128>)
 8000f78:	0018      	movs	r0, r3
 8000f7a:	f002 fcc9 	bl	8003910 <HAL_TIM_PWM_Init>
 8000f7e:	1e03      	subs	r3, r0, #0
 8000f80:	d001      	beq.n	8000f86 <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 8000f82:	f7ff fdb4 	bl	8000aee <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f86:	2154      	movs	r1, #84	@ 0x54
 8000f88:	187b      	adds	r3, r7, r1
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f8e:	187b      	adds	r3, r7, r1
 8000f90:	2200      	movs	r2, #0
 8000f92:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8000f94:	187a      	adds	r2, r7, r1
 8000f96:	4b2a      	ldr	r3, [pc, #168]	@ (8001040 <MX_TIM15_Init+0x128>)
 8000f98:	0011      	movs	r1, r2
 8000f9a:	0018      	movs	r0, r3
 8000f9c:	f003 faca 	bl	8004534 <HAL_TIMEx_MasterConfigSynchronization>
 8000fa0:	1e03      	subs	r3, r0, #0
 8000fa2:	d001      	beq.n	8000fa8 <MX_TIM15_Init+0x90>
  {
    Error_Handler();
 8000fa4:	f7ff fda3 	bl	8000aee <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000fa8:	2138      	movs	r1, #56	@ 0x38
 8000faa:	187b      	adds	r3, r7, r1
 8000fac:	2260      	movs	r2, #96	@ 0x60
 8000fae:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000fb0:	187b      	adds	r3, r7, r1
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fb6:	187b      	adds	r3, r7, r1
 8000fb8:	2200      	movs	r2, #0
 8000fba:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000fbc:	187b      	adds	r3, r7, r1
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fc2:	187b      	adds	r3, r7, r1
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000fc8:	187b      	adds	r3, r7, r1
 8000fca:	2200      	movs	r2, #0
 8000fcc:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000fce:	187b      	adds	r3, r7, r1
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000fd4:	1879      	adds	r1, r7, r1
 8000fd6:	4b1a      	ldr	r3, [pc, #104]	@ (8001040 <MX_TIM15_Init+0x128>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	0018      	movs	r0, r3
 8000fdc:	f002 fcf0 	bl	80039c0 <HAL_TIM_PWM_ConfigChannel>
 8000fe0:	1e03      	subs	r3, r0, #0
 8000fe2:	d001      	beq.n	8000fe8 <MX_TIM15_Init+0xd0>
  {
    Error_Handler();
 8000fe4:	f7ff fd83 	bl	8000aee <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000fe8:	1d3b      	adds	r3, r7, #4
 8000fea:	2200      	movs	r2, #0
 8000fec:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000fee:	1d3b      	adds	r3, r7, #4
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000ff4:	1d3b      	adds	r3, r7, #4
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000ffa:	1d3b      	adds	r3, r7, #4
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001000:	1d3b      	adds	r3, r7, #4
 8001002:	2200      	movs	r2, #0
 8001004:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001006:	1d3b      	adds	r3, r7, #4
 8001008:	2280      	movs	r2, #128	@ 0x80
 800100a:	0192      	lsls	r2, r2, #6
 800100c:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800100e:	1d3b      	adds	r3, r7, #4
 8001010:	2200      	movs	r2, #0
 8001012:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001014:	1d3b      	adds	r3, r7, #4
 8001016:	2200      	movs	r2, #0
 8001018:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 800101a:	1d3a      	adds	r2, r7, #4
 800101c:	4b08      	ldr	r3, [pc, #32]	@ (8001040 <MX_TIM15_Init+0x128>)
 800101e:	0011      	movs	r1, r2
 8001020:	0018      	movs	r0, r3
 8001022:	f003 faef 	bl	8004604 <HAL_TIMEx_ConfigBreakDeadTime>
 8001026:	1e03      	subs	r3, r0, #0
 8001028:	d001      	beq.n	800102e <MX_TIM15_Init+0x116>
  {
    Error_Handler();
 800102a:	f7ff fd60 	bl	8000aee <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 800102e:	4b04      	ldr	r3, [pc, #16]	@ (8001040 <MX_TIM15_Init+0x128>)
 8001030:	0018      	movs	r0, r3
 8001032:	f000 f85f 	bl	80010f4 <HAL_TIM_MspPostInit>

}
 8001036:	46c0      	nop			@ (mov r8, r8)
 8001038:	46bd      	mov	sp, r7
 800103a:	b018      	add	sp, #96	@ 0x60
 800103c:	bd80      	pop	{r7, pc}
 800103e:	46c0      	nop			@ (mov r8, r8)
 8001040:	200001bc 	.word	0x200001bc
 8001044:	40014000 	.word	0x40014000
 8001048:	0000ffff 	.word	0x0000ffff

0800104c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b084      	sub	sp, #16
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4a13      	ldr	r2, [pc, #76]	@ (80010a8 <HAL_TIM_Base_MspInit+0x5c>)
 800105a:	4293      	cmp	r3, r2
 800105c:	d10e      	bne.n	800107c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800105e:	4b13      	ldr	r3, [pc, #76]	@ (80010ac <HAL_TIM_Base_MspInit+0x60>)
 8001060:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001062:	4b12      	ldr	r3, [pc, #72]	@ (80010ac <HAL_TIM_Base_MspInit+0x60>)
 8001064:	2180      	movs	r1, #128	@ 0x80
 8001066:	0109      	lsls	r1, r1, #4
 8001068:	430a      	orrs	r2, r1
 800106a:	641a      	str	r2, [r3, #64]	@ 0x40
 800106c:	4b0f      	ldr	r3, [pc, #60]	@ (80010ac <HAL_TIM_Base_MspInit+0x60>)
 800106e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001070:	2380      	movs	r3, #128	@ 0x80
 8001072:	011b      	lsls	r3, r3, #4
 8001074:	4013      	ands	r3, r2
 8001076:	60fb      	str	r3, [r7, #12]
 8001078:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800107a:	e010      	b.n	800109e <HAL_TIM_Base_MspInit+0x52>
  else if(tim_baseHandle->Instance==TIM3)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4a0b      	ldr	r2, [pc, #44]	@ (80010b0 <HAL_TIM_Base_MspInit+0x64>)
 8001082:	4293      	cmp	r3, r2
 8001084:	d10b      	bne.n	800109e <HAL_TIM_Base_MspInit+0x52>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001086:	4b09      	ldr	r3, [pc, #36]	@ (80010ac <HAL_TIM_Base_MspInit+0x60>)
 8001088:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800108a:	4b08      	ldr	r3, [pc, #32]	@ (80010ac <HAL_TIM_Base_MspInit+0x60>)
 800108c:	2102      	movs	r1, #2
 800108e:	430a      	orrs	r2, r1
 8001090:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001092:	4b06      	ldr	r3, [pc, #24]	@ (80010ac <HAL_TIM_Base_MspInit+0x60>)
 8001094:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001096:	2202      	movs	r2, #2
 8001098:	4013      	ands	r3, r2
 800109a:	60bb      	str	r3, [r7, #8]
 800109c:	68bb      	ldr	r3, [r7, #8]
}
 800109e:	46c0      	nop			@ (mov r8, r8)
 80010a0:	46bd      	mov	sp, r7
 80010a2:	b004      	add	sp, #16
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	46c0      	nop			@ (mov r8, r8)
 80010a8:	40012c00 	.word	0x40012c00
 80010ac:	40021000 	.word	0x40021000
 80010b0:	40000400 	.word	0x40000400

080010b4 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b084      	sub	sp, #16
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM15)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4a0a      	ldr	r2, [pc, #40]	@ (80010ec <HAL_TIM_PWM_MspInit+0x38>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d10d      	bne.n	80010e2 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* TIM15 clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 80010c6:	4b0a      	ldr	r3, [pc, #40]	@ (80010f0 <HAL_TIM_PWM_MspInit+0x3c>)
 80010c8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80010ca:	4b09      	ldr	r3, [pc, #36]	@ (80010f0 <HAL_TIM_PWM_MspInit+0x3c>)
 80010cc:	2180      	movs	r1, #128	@ 0x80
 80010ce:	0249      	lsls	r1, r1, #9
 80010d0:	430a      	orrs	r2, r1
 80010d2:	641a      	str	r2, [r3, #64]	@ 0x40
 80010d4:	4b06      	ldr	r3, [pc, #24]	@ (80010f0 <HAL_TIM_PWM_MspInit+0x3c>)
 80010d6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80010d8:	2380      	movs	r3, #128	@ 0x80
 80010da:	025b      	lsls	r3, r3, #9
 80010dc:	4013      	ands	r3, r2
 80010de:	60fb      	str	r3, [r7, #12]
 80010e0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 80010e2:	46c0      	nop			@ (mov r8, r8)
 80010e4:	46bd      	mov	sp, r7
 80010e6:	b004      	add	sp, #16
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	46c0      	nop			@ (mov r8, r8)
 80010ec:	40014000 	.word	0x40014000
 80010f0:	40021000 	.word	0x40021000

080010f4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80010f4:	b590      	push	{r4, r7, lr}
 80010f6:	b08b      	sub	sp, #44	@ 0x2c
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010fc:	2414      	movs	r4, #20
 80010fe:	193b      	adds	r3, r7, r4
 8001100:	0018      	movs	r0, r3
 8001102:	2314      	movs	r3, #20
 8001104:	001a      	movs	r2, r3
 8001106:	2100      	movs	r1, #0
 8001108:	f004 fa34 	bl	8005574 <memset>
  if(timHandle->Instance==TIM1)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4a3e      	ldr	r2, [pc, #248]	@ (800120c <HAL_TIM_MspPostInit+0x118>)
 8001112:	4293      	cmp	r3, r2
 8001114:	d124      	bne.n	8001160 <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001116:	4b3e      	ldr	r3, [pc, #248]	@ (8001210 <HAL_TIM_MspPostInit+0x11c>)
 8001118:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800111a:	4b3d      	ldr	r3, [pc, #244]	@ (8001210 <HAL_TIM_MspPostInit+0x11c>)
 800111c:	2101      	movs	r1, #1
 800111e:	430a      	orrs	r2, r1
 8001120:	635a      	str	r2, [r3, #52]	@ 0x34
 8001122:	4b3b      	ldr	r3, [pc, #236]	@ (8001210 <HAL_TIM_MspPostInit+0x11c>)
 8001124:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001126:	2201      	movs	r2, #1
 8001128:	4013      	ands	r3, r2
 800112a:	613b      	str	r3, [r7, #16]
 800112c:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = PIEZO_PWM_Pin;
 800112e:	193b      	adds	r3, r7, r4
 8001130:	2280      	movs	r2, #128	@ 0x80
 8001132:	0052      	lsls	r2, r2, #1
 8001134:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001136:	0021      	movs	r1, r4
 8001138:	187b      	adds	r3, r7, r1
 800113a:	2202      	movs	r2, #2
 800113c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113e:	187b      	adds	r3, r7, r1
 8001140:	2200      	movs	r2, #0
 8001142:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001144:	187b      	adds	r3, r7, r1
 8001146:	2200      	movs	r2, #0
 8001148:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800114a:	187b      	adds	r3, r7, r1
 800114c:	2202      	movs	r2, #2
 800114e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(PIEZO_PWM_GPIO_Port, &GPIO_InitStruct);
 8001150:	187a      	adds	r2, r7, r1
 8001152:	23a0      	movs	r3, #160	@ 0xa0
 8001154:	05db      	lsls	r3, r3, #23
 8001156:	0011      	movs	r1, r2
 8001158:	0018      	movs	r0, r3
 800115a:	f001 f87f 	bl	800225c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 800115e:	e050      	b.n	8001202 <HAL_TIM_MspPostInit+0x10e>
  else if(timHandle->Instance==TIM3)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4a2b      	ldr	r2, [pc, #172]	@ (8001214 <HAL_TIM_MspPostInit+0x120>)
 8001166:	4293      	cmp	r3, r2
 8001168:	d123      	bne.n	80011b2 <HAL_TIM_MspPostInit+0xbe>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800116a:	4b29      	ldr	r3, [pc, #164]	@ (8001210 <HAL_TIM_MspPostInit+0x11c>)
 800116c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800116e:	4b28      	ldr	r3, [pc, #160]	@ (8001210 <HAL_TIM_MspPostInit+0x11c>)
 8001170:	2101      	movs	r1, #1
 8001172:	430a      	orrs	r2, r1
 8001174:	635a      	str	r2, [r3, #52]	@ 0x34
 8001176:	4b26      	ldr	r3, [pc, #152]	@ (8001210 <HAL_TIM_MspPostInit+0x11c>)
 8001178:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800117a:	2201      	movs	r2, #1
 800117c:	4013      	ands	r3, r2
 800117e:	60fb      	str	r3, [r7, #12]
 8001180:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = WPT_PWM_Pin;
 8001182:	2114      	movs	r1, #20
 8001184:	187b      	adds	r3, r7, r1
 8001186:	2240      	movs	r2, #64	@ 0x40
 8001188:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800118a:	187b      	adds	r3, r7, r1
 800118c:	2202      	movs	r2, #2
 800118e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001190:	187b      	adds	r3, r7, r1
 8001192:	2200      	movs	r2, #0
 8001194:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001196:	187b      	adds	r3, r7, r1
 8001198:	2200      	movs	r2, #0
 800119a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 800119c:	187b      	adds	r3, r7, r1
 800119e:	2201      	movs	r2, #1
 80011a0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(WPT_PWM_GPIO_Port, &GPIO_InitStruct);
 80011a2:	187a      	adds	r2, r7, r1
 80011a4:	23a0      	movs	r3, #160	@ 0xa0
 80011a6:	05db      	lsls	r3, r3, #23
 80011a8:	0011      	movs	r1, r2
 80011aa:	0018      	movs	r0, r3
 80011ac:	f001 f856 	bl	800225c <HAL_GPIO_Init>
}
 80011b0:	e027      	b.n	8001202 <HAL_TIM_MspPostInit+0x10e>
  else if(timHandle->Instance==TIM15)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	4a18      	ldr	r2, [pc, #96]	@ (8001218 <HAL_TIM_MspPostInit+0x124>)
 80011b8:	4293      	cmp	r3, r2
 80011ba:	d122      	bne.n	8001202 <HAL_TIM_MspPostInit+0x10e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011bc:	4b14      	ldr	r3, [pc, #80]	@ (8001210 <HAL_TIM_MspPostInit+0x11c>)
 80011be:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80011c0:	4b13      	ldr	r3, [pc, #76]	@ (8001210 <HAL_TIM_MspPostInit+0x11c>)
 80011c2:	2101      	movs	r1, #1
 80011c4:	430a      	orrs	r2, r1
 80011c6:	635a      	str	r2, [r3, #52]	@ 0x34
 80011c8:	4b11      	ldr	r3, [pc, #68]	@ (8001210 <HAL_TIM_MspPostInit+0x11c>)
 80011ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80011cc:	2201      	movs	r2, #1
 80011ce:	4013      	ands	r3, r2
 80011d0:	60bb      	str	r3, [r7, #8]
 80011d2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = VBOOST_CAL_PWM_Pin;
 80011d4:	2114      	movs	r1, #20
 80011d6:	187b      	adds	r3, r7, r1
 80011d8:	2202      	movs	r2, #2
 80011da:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011dc:	187b      	adds	r3, r7, r1
 80011de:	2202      	movs	r2, #2
 80011e0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e2:	187b      	adds	r3, r7, r1
 80011e4:	2200      	movs	r2, #0
 80011e6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e8:	187b      	adds	r3, r7, r1
 80011ea:	2200      	movs	r2, #0
 80011ec:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM15;
 80011ee:	187b      	adds	r3, r7, r1
 80011f0:	2205      	movs	r2, #5
 80011f2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(VBOOST_CAL_PWM_GPIO_Port, &GPIO_InitStruct);
 80011f4:	187a      	adds	r2, r7, r1
 80011f6:	23a0      	movs	r3, #160	@ 0xa0
 80011f8:	05db      	lsls	r3, r3, #23
 80011fa:	0011      	movs	r1, r2
 80011fc:	0018      	movs	r0, r3
 80011fe:	f001 f82d 	bl	800225c <HAL_GPIO_Init>
}
 8001202:	46c0      	nop			@ (mov r8, r8)
 8001204:	46bd      	mov	sp, r7
 8001206:	b00b      	add	sp, #44	@ 0x2c
 8001208:	bd90      	pop	{r4, r7, pc}
 800120a:	46c0      	nop			@ (mov r8, r8)
 800120c:	40012c00 	.word	0x40012c00
 8001210:	40021000 	.word	0x40021000
 8001214:	40000400 	.word	0x40000400
 8001218:	40014000 	.word	0x40014000

0800121c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001220:	4b22      	ldr	r3, [pc, #136]	@ (80012ac <MX_USART1_UART_Init+0x90>)
 8001222:	4a23      	ldr	r2, [pc, #140]	@ (80012b0 <MX_USART1_UART_Init+0x94>)
 8001224:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 6553;
 8001226:	4b21      	ldr	r3, [pc, #132]	@ (80012ac <MX_USART1_UART_Init+0x90>)
 8001228:	4a22      	ldr	r2, [pc, #136]	@ (80012b4 <MX_USART1_UART_Init+0x98>)
 800122a:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800122c:	4b1f      	ldr	r3, [pc, #124]	@ (80012ac <MX_USART1_UART_Init+0x90>)
 800122e:	2200      	movs	r2, #0
 8001230:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001232:	4b1e      	ldr	r3, [pc, #120]	@ (80012ac <MX_USART1_UART_Init+0x90>)
 8001234:	2200      	movs	r2, #0
 8001236:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001238:	4b1c      	ldr	r3, [pc, #112]	@ (80012ac <MX_USART1_UART_Init+0x90>)
 800123a:	2200      	movs	r2, #0
 800123c:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800123e:	4b1b      	ldr	r3, [pc, #108]	@ (80012ac <MX_USART1_UART_Init+0x90>)
 8001240:	220c      	movs	r2, #12
 8001242:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001244:	4b19      	ldr	r3, [pc, #100]	@ (80012ac <MX_USART1_UART_Init+0x90>)
 8001246:	2200      	movs	r2, #0
 8001248:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800124a:	4b18      	ldr	r3, [pc, #96]	@ (80012ac <MX_USART1_UART_Init+0x90>)
 800124c:	2200      	movs	r2, #0
 800124e:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001250:	4b16      	ldr	r3, [pc, #88]	@ (80012ac <MX_USART1_UART_Init+0x90>)
 8001252:	2200      	movs	r2, #0
 8001254:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001256:	4b15      	ldr	r3, [pc, #84]	@ (80012ac <MX_USART1_UART_Init+0x90>)
 8001258:	2200      	movs	r2, #0
 800125a:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800125c:	4b13      	ldr	r3, [pc, #76]	@ (80012ac <MX_USART1_UART_Init+0x90>)
 800125e:	2200      	movs	r2, #0
 8001260:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001262:	4b12      	ldr	r3, [pc, #72]	@ (80012ac <MX_USART1_UART_Init+0x90>)
 8001264:	0018      	movs	r0, r3
 8001266:	f003 fa69 	bl	800473c <HAL_UART_Init>
 800126a:	1e03      	subs	r3, r0, #0
 800126c:	d001      	beq.n	8001272 <MX_USART1_UART_Init+0x56>
  {
    Error_Handler();
 800126e:	f7ff fc3e 	bl	8000aee <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001272:	4b0e      	ldr	r3, [pc, #56]	@ (80012ac <MX_USART1_UART_Init+0x90>)
 8001274:	2100      	movs	r1, #0
 8001276:	0018      	movs	r0, r3
 8001278:	f003 fec8 	bl	800500c <HAL_UARTEx_SetTxFifoThreshold>
 800127c:	1e03      	subs	r3, r0, #0
 800127e:	d001      	beq.n	8001284 <MX_USART1_UART_Init+0x68>
  {
    Error_Handler();
 8001280:	f7ff fc35 	bl	8000aee <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001284:	4b09      	ldr	r3, [pc, #36]	@ (80012ac <MX_USART1_UART_Init+0x90>)
 8001286:	2100      	movs	r1, #0
 8001288:	0018      	movs	r0, r3
 800128a:	f003 feff 	bl	800508c <HAL_UARTEx_SetRxFifoThreshold>
 800128e:	1e03      	subs	r3, r0, #0
 8001290:	d001      	beq.n	8001296 <MX_USART1_UART_Init+0x7a>
  {
    Error_Handler();
 8001292:	f7ff fc2c 	bl	8000aee <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001296:	4b05      	ldr	r3, [pc, #20]	@ (80012ac <MX_USART1_UART_Init+0x90>)
 8001298:	0018      	movs	r0, r3
 800129a:	f003 fe7d 	bl	8004f98 <HAL_UARTEx_DisableFifoMode>
 800129e:	1e03      	subs	r3, r0, #0
 80012a0:	d001      	beq.n	80012a6 <MX_USART1_UART_Init+0x8a>
  {
    Error_Handler();
 80012a2:	f7ff fc24 	bl	8000aee <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80012a6:	46c0      	nop			@ (mov r8, r8)
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	20000208 	.word	0x20000208
 80012b0:	40013800 	.word	0x40013800
 80012b4:	00001999 	.word	0x00001999

080012b8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80012b8:	b590      	push	{r4, r7, lr}
 80012ba:	b091      	sub	sp, #68	@ 0x44
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012c0:	232c      	movs	r3, #44	@ 0x2c
 80012c2:	18fb      	adds	r3, r7, r3
 80012c4:	0018      	movs	r0, r3
 80012c6:	2314      	movs	r3, #20
 80012c8:	001a      	movs	r2, r3
 80012ca:	2100      	movs	r1, #0
 80012cc:	f004 f952 	bl	8005574 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012d0:	2410      	movs	r4, #16
 80012d2:	193b      	adds	r3, r7, r4
 80012d4:	0018      	movs	r0, r3
 80012d6:	231c      	movs	r3, #28
 80012d8:	001a      	movs	r2, r3
 80012da:	2100      	movs	r1, #0
 80012dc:	f004 f94a 	bl	8005574 <memset>
  if(uartHandle->Instance==USART1)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4a27      	ldr	r2, [pc, #156]	@ (8001384 <HAL_UART_MspInit+0xcc>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d147      	bne.n	800137a <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80012ea:	193b      	adds	r3, r7, r4
 80012ec:	2201      	movs	r2, #1
 80012ee:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80012f0:	193b      	adds	r3, r7, r4
 80012f2:	2200      	movs	r2, #0
 80012f4:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012f6:	193b      	adds	r3, r7, r4
 80012f8:	0018      	movs	r0, r3
 80012fa:	f002 f82f 	bl	800335c <HAL_RCCEx_PeriphCLKConfig>
 80012fe:	1e03      	subs	r3, r0, #0
 8001300:	d001      	beq.n	8001306 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001302:	f7ff fbf4 	bl	8000aee <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001306:	4b20      	ldr	r3, [pc, #128]	@ (8001388 <HAL_UART_MspInit+0xd0>)
 8001308:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800130a:	4b1f      	ldr	r3, [pc, #124]	@ (8001388 <HAL_UART_MspInit+0xd0>)
 800130c:	2180      	movs	r1, #128	@ 0x80
 800130e:	01c9      	lsls	r1, r1, #7
 8001310:	430a      	orrs	r2, r1
 8001312:	641a      	str	r2, [r3, #64]	@ 0x40
 8001314:	4b1c      	ldr	r3, [pc, #112]	@ (8001388 <HAL_UART_MspInit+0xd0>)
 8001316:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001318:	2380      	movs	r3, #128	@ 0x80
 800131a:	01db      	lsls	r3, r3, #7
 800131c:	4013      	ands	r3, r2
 800131e:	60fb      	str	r3, [r7, #12]
 8001320:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001322:	4b19      	ldr	r3, [pc, #100]	@ (8001388 <HAL_UART_MspInit+0xd0>)
 8001324:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001326:	4b18      	ldr	r3, [pc, #96]	@ (8001388 <HAL_UART_MspInit+0xd0>)
 8001328:	2101      	movs	r1, #1
 800132a:	430a      	orrs	r2, r1
 800132c:	635a      	str	r2, [r3, #52]	@ 0x34
 800132e:	4b16      	ldr	r3, [pc, #88]	@ (8001388 <HAL_UART_MspInit+0xd0>)
 8001330:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001332:	2201      	movs	r2, #1
 8001334:	4013      	ands	r3, r2
 8001336:	60bb      	str	r3, [r7, #8]
 8001338:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = IR_UART_TX_Pin|IR_UART_RX_Pin;
 800133a:	212c      	movs	r1, #44	@ 0x2c
 800133c:	187b      	adds	r3, r7, r1
 800133e:	22c0      	movs	r2, #192	@ 0xc0
 8001340:	00d2      	lsls	r2, r2, #3
 8001342:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001344:	187b      	adds	r3, r7, r1
 8001346:	2202      	movs	r2, #2
 8001348:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134a:	187b      	adds	r3, r7, r1
 800134c:	2200      	movs	r2, #0
 800134e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001350:	187b      	adds	r3, r7, r1
 8001352:	2200      	movs	r2, #0
 8001354:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8001356:	187b      	adds	r3, r7, r1
 8001358:	2201      	movs	r2, #1
 800135a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800135c:	187a      	adds	r2, r7, r1
 800135e:	23a0      	movs	r3, #160	@ 0xa0
 8001360:	05db      	lsls	r3, r3, #23
 8001362:	0011      	movs	r1, r2
 8001364:	0018      	movs	r0, r3
 8001366:	f000 ff79 	bl	800225c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 800136a:	2200      	movs	r2, #0
 800136c:	2101      	movs	r1, #1
 800136e:	201b      	movs	r0, #27
 8001370:	f000 ff42 	bl	80021f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001374:	201b      	movs	r0, #27
 8001376:	f000 ff54 	bl	8002222 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800137a:	46c0      	nop			@ (mov r8, r8)
 800137c:	46bd      	mov	sp, r7
 800137e:	b011      	add	sp, #68	@ 0x44
 8001380:	bd90      	pop	{r4, r7, pc}
 8001382:	46c0      	nop			@ (mov r8, r8)
 8001384:	40013800 	.word	0x40013800
 8001388:	40021000 	.word	0x40021000

0800138c <DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800138c:	e7fe      	b.n	800138c <DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler>
	...

08001390 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b082      	sub	sp, #8
 8001394:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001396:	1dfb      	adds	r3, r7, #7
 8001398:	2200      	movs	r2, #0
 800139a:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800139c:	4b0b      	ldr	r3, [pc, #44]	@ (80013cc <HAL_Init+0x3c>)
 800139e:	681a      	ldr	r2, [r3, #0]
 80013a0:	4b0a      	ldr	r3, [pc, #40]	@ (80013cc <HAL_Init+0x3c>)
 80013a2:	2180      	movs	r1, #128	@ 0x80
 80013a4:	0049      	lsls	r1, r1, #1
 80013a6:	430a      	orrs	r2, r1
 80013a8:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80013aa:	2003      	movs	r0, #3
 80013ac:	f000 f810 	bl	80013d0 <HAL_InitTick>
 80013b0:	1e03      	subs	r3, r0, #0
 80013b2:	d003      	beq.n	80013bc <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80013b4:	1dfb      	adds	r3, r7, #7
 80013b6:	2201      	movs	r2, #1
 80013b8:	701a      	strb	r2, [r3, #0]
 80013ba:	e001      	b.n	80013c0 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80013bc:	f7ff fc0a 	bl	8000bd4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80013c0:	1dfb      	adds	r3, r7, #7
 80013c2:	781b      	ldrb	r3, [r3, #0]
}
 80013c4:	0018      	movs	r0, r3
 80013c6:	46bd      	mov	sp, r7
 80013c8:	b002      	add	sp, #8
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	40022000 	.word	0x40022000

080013d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013d0:	b590      	push	{r4, r7, lr}
 80013d2:	b085      	sub	sp, #20
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80013d8:	230f      	movs	r3, #15
 80013da:	18fb      	adds	r3, r7, r3
 80013dc:	2200      	movs	r2, #0
 80013de:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80013e0:	4b1d      	ldr	r3, [pc, #116]	@ (8001458 <HAL_InitTick+0x88>)
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d02b      	beq.n	8001440 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80013e8:	4b1c      	ldr	r3, [pc, #112]	@ (800145c <HAL_InitTick+0x8c>)
 80013ea:	681c      	ldr	r4, [r3, #0]
 80013ec:	4b1a      	ldr	r3, [pc, #104]	@ (8001458 <HAL_InitTick+0x88>)
 80013ee:	781b      	ldrb	r3, [r3, #0]
 80013f0:	0019      	movs	r1, r3
 80013f2:	23fa      	movs	r3, #250	@ 0xfa
 80013f4:	0098      	lsls	r0, r3, #2
 80013f6:	f7fe fedf 	bl	80001b8 <__udivsi3>
 80013fa:	0003      	movs	r3, r0
 80013fc:	0019      	movs	r1, r3
 80013fe:	0020      	movs	r0, r4
 8001400:	f7fe feda 	bl	80001b8 <__udivsi3>
 8001404:	0003      	movs	r3, r0
 8001406:	0018      	movs	r0, r3
 8001408:	f000 ff1b 	bl	8002242 <HAL_SYSTICK_Config>
 800140c:	1e03      	subs	r3, r0, #0
 800140e:	d112      	bne.n	8001436 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2b03      	cmp	r3, #3
 8001414:	d80a      	bhi.n	800142c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001416:	6879      	ldr	r1, [r7, #4]
 8001418:	2301      	movs	r3, #1
 800141a:	425b      	negs	r3, r3
 800141c:	2200      	movs	r2, #0
 800141e:	0018      	movs	r0, r3
 8001420:	f000 feea 	bl	80021f8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001424:	4b0e      	ldr	r3, [pc, #56]	@ (8001460 <HAL_InitTick+0x90>)
 8001426:	687a      	ldr	r2, [r7, #4]
 8001428:	601a      	str	r2, [r3, #0]
 800142a:	e00d      	b.n	8001448 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 800142c:	230f      	movs	r3, #15
 800142e:	18fb      	adds	r3, r7, r3
 8001430:	2201      	movs	r2, #1
 8001432:	701a      	strb	r2, [r3, #0]
 8001434:	e008      	b.n	8001448 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001436:	230f      	movs	r3, #15
 8001438:	18fb      	adds	r3, r7, r3
 800143a:	2201      	movs	r2, #1
 800143c:	701a      	strb	r2, [r3, #0]
 800143e:	e003      	b.n	8001448 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001440:	230f      	movs	r3, #15
 8001442:	18fb      	adds	r3, r7, r3
 8001444:	2201      	movs	r2, #1
 8001446:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001448:	230f      	movs	r3, #15
 800144a:	18fb      	adds	r3, r7, r3
 800144c:	781b      	ldrb	r3, [r3, #0]
}
 800144e:	0018      	movs	r0, r3
 8001450:	46bd      	mov	sp, r7
 8001452:	b005      	add	sp, #20
 8001454:	bd90      	pop	{r4, r7, pc}
 8001456:	46c0      	nop			@ (mov r8, r8)
 8001458:	20000008 	.word	0x20000008
 800145c:	20000000 	.word	0x20000000
 8001460:	20000004 	.word	0x20000004

08001464 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001468:	4b05      	ldr	r3, [pc, #20]	@ (8001480 <HAL_IncTick+0x1c>)
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	001a      	movs	r2, r3
 800146e:	4b05      	ldr	r3, [pc, #20]	@ (8001484 <HAL_IncTick+0x20>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	18d2      	adds	r2, r2, r3
 8001474:	4b03      	ldr	r3, [pc, #12]	@ (8001484 <HAL_IncTick+0x20>)
 8001476:	601a      	str	r2, [r3, #0]
}
 8001478:	46c0      	nop			@ (mov r8, r8)
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
 800147e:	46c0      	nop			@ (mov r8, r8)
 8001480:	20000008 	.word	0x20000008
 8001484:	2000029c 	.word	0x2000029c

08001488 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	af00      	add	r7, sp, #0
  return uwTick;
 800148c:	4b02      	ldr	r3, [pc, #8]	@ (8001498 <HAL_GetTick+0x10>)
 800148e:	681b      	ldr	r3, [r3, #0]
}
 8001490:	0018      	movs	r0, r3
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
 8001496:	46c0      	nop			@ (mov r8, r8)
 8001498:	2000029c 	.word	0x2000029c

0800149c <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b082      	sub	sp, #8
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 80014a4:	4b06      	ldr	r3, [pc, #24]	@ (80014c0 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a06      	ldr	r2, [pc, #24]	@ (80014c4 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 80014aa:	4013      	ands	r3, r2
 80014ac:	0019      	movs	r1, r3
 80014ae:	4b04      	ldr	r3, [pc, #16]	@ (80014c0 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80014b0:	687a      	ldr	r2, [r7, #4]
 80014b2:	430a      	orrs	r2, r1
 80014b4:	601a      	str	r2, [r3, #0]
}
 80014b6:	46c0      	nop			@ (mov r8, r8)
 80014b8:	46bd      	mov	sp, r7
 80014ba:	b002      	add	sp, #8
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	46c0      	nop			@ (mov r8, r8)
 80014c0:	40010000 	.word	0x40010000
 80014c4:	fffff9ff 	.word	0xfffff9ff

080014c8 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b082      	sub	sp, #8
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
 80014d0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4a05      	ldr	r2, [pc, #20]	@ (80014ec <LL_ADC_SetCommonPathInternalCh+0x24>)
 80014d8:	401a      	ands	r2, r3
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	431a      	orrs	r2, r3
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	601a      	str	r2, [r3, #0]
}
 80014e2:	46c0      	nop			@ (mov r8, r8)
 80014e4:	46bd      	mov	sp, r7
 80014e6:	b002      	add	sp, #8
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	46c0      	nop			@ (mov r8, r8)
 80014ec:	fe3fffff 	.word	0xfe3fffff

080014f0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b082      	sub	sp, #8
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681a      	ldr	r2, [r3, #0]
 80014fc:	23e0      	movs	r3, #224	@ 0xe0
 80014fe:	045b      	lsls	r3, r3, #17
 8001500:	4013      	ands	r3, r2
}
 8001502:	0018      	movs	r0, r3
 8001504:	46bd      	mov	sp, r7
 8001506:	b002      	add	sp, #8
 8001508:	bd80      	pop	{r7, pc}

0800150a <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 800150a:	b580      	push	{r7, lr}
 800150c:	b084      	sub	sp, #16
 800150e:	af00      	add	r7, sp, #0
 8001510:	60f8      	str	r0, [r7, #12]
 8001512:	60b9      	str	r1, [r7, #8]
 8001514:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	695b      	ldr	r3, [r3, #20]
 800151a:	68ba      	ldr	r2, [r7, #8]
 800151c:	2104      	movs	r1, #4
 800151e:	400a      	ands	r2, r1
 8001520:	2107      	movs	r1, #7
 8001522:	4091      	lsls	r1, r2
 8001524:	000a      	movs	r2, r1
 8001526:	43d2      	mvns	r2, r2
 8001528:	401a      	ands	r2, r3
 800152a:	68bb      	ldr	r3, [r7, #8]
 800152c:	2104      	movs	r1, #4
 800152e:	400b      	ands	r3, r1
 8001530:	6879      	ldr	r1, [r7, #4]
 8001532:	4099      	lsls	r1, r3
 8001534:	000b      	movs	r3, r1
 8001536:	431a      	orrs	r2, r3
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 800153c:	46c0      	nop			@ (mov r8, r8)
 800153e:	46bd      	mov	sp, r7
 8001540:	b004      	add	sp, #16
 8001542:	bd80      	pop	{r7, pc}

08001544 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b082      	sub	sp, #8
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
 800154c:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	695b      	ldr	r3, [r3, #20]
 8001552:	683a      	ldr	r2, [r7, #0]
 8001554:	2104      	movs	r1, #4
 8001556:	400a      	ands	r2, r1
 8001558:	2107      	movs	r1, #7
 800155a:	4091      	lsls	r1, r2
 800155c:	000a      	movs	r2, r1
 800155e:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	2104      	movs	r1, #4
 8001564:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8001566:	40da      	lsrs	r2, r3
 8001568:	0013      	movs	r3, r2
}
 800156a:	0018      	movs	r0, r3
 800156c:	46bd      	mov	sp, r7
 800156e:	b002      	add	sp, #8
 8001570:	bd80      	pop	{r7, pc}

08001572 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001572:	b580      	push	{r7, lr}
 8001574:	b082      	sub	sp, #8
 8001576:	af00      	add	r7, sp, #0
 8001578:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	68da      	ldr	r2, [r3, #12]
 800157e:	23c0      	movs	r3, #192	@ 0xc0
 8001580:	011b      	lsls	r3, r3, #4
 8001582:	4013      	ands	r3, r2
 8001584:	d101      	bne.n	800158a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001586:	2301      	movs	r3, #1
 8001588:	e000      	b.n	800158c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800158a:	2300      	movs	r3, #0
}
 800158c:	0018      	movs	r0, r3
 800158e:	46bd      	mov	sp, r7
 8001590:	b002      	add	sp, #8
 8001592:	bd80      	pop	{r7, pc}

08001594 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b084      	sub	sp, #16
 8001598:	af00      	add	r7, sp, #0
 800159a:	60f8      	str	r0, [r7, #12]
 800159c:	60b9      	str	r1, [r7, #8]
 800159e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015a4:	68ba      	ldr	r2, [r7, #8]
 80015a6:	211f      	movs	r1, #31
 80015a8:	400a      	ands	r2, r1
 80015aa:	210f      	movs	r1, #15
 80015ac:	4091      	lsls	r1, r2
 80015ae:	000a      	movs	r2, r1
 80015b0:	43d2      	mvns	r2, r2
 80015b2:	401a      	ands	r2, r3
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	0e9b      	lsrs	r3, r3, #26
 80015b8:	210f      	movs	r1, #15
 80015ba:	4019      	ands	r1, r3
 80015bc:	68bb      	ldr	r3, [r7, #8]
 80015be:	201f      	movs	r0, #31
 80015c0:	4003      	ands	r3, r0
 80015c2:	4099      	lsls	r1, r3
 80015c4:	000b      	movs	r3, r1
 80015c6:	431a      	orrs	r2, r3
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80015cc:	46c0      	nop			@ (mov r8, r8)
 80015ce:	46bd      	mov	sp, r7
 80015d0:	b004      	add	sp, #16
 80015d2:	bd80      	pop	{r7, pc}

080015d4 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b082      	sub	sp, #8
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
 80015dc:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	035b      	lsls	r3, r3, #13
 80015e6:	0b5b      	lsrs	r3, r3, #13
 80015e8:	431a      	orrs	r2, r3
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80015ee:	46c0      	nop			@ (mov r8, r8)
 80015f0:	46bd      	mov	sp, r7
 80015f2:	b002      	add	sp, #8
 80015f4:	bd80      	pop	{r7, pc}

080015f6 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80015f6:	b580      	push	{r7, lr}
 80015f8:	b082      	sub	sp, #8
 80015fa:	af00      	add	r7, sp, #0
 80015fc:	6078      	str	r0, [r7, #4]
 80015fe:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001604:	683a      	ldr	r2, [r7, #0]
 8001606:	0352      	lsls	r2, r2, #13
 8001608:	0b52      	lsrs	r2, r2, #13
 800160a:	43d2      	mvns	r2, r2
 800160c:	401a      	ands	r2, r3
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001612:	46c0      	nop			@ (mov r8, r8)
 8001614:	46bd      	mov	sp, r7
 8001616:	b002      	add	sp, #8
 8001618:	bd80      	pop	{r7, pc}

0800161a <LL_ADC_REG_GetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  */
__STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(const ADC_TypeDef *ADCx)
{
 800161a:	b580      	push	{r7, lr}
 800161c:	b082      	sub	sp, #8
 800161e:	af00      	add	r7, sp, #0
 8001620:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG));
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	68db      	ldr	r3, [r3, #12]
 8001626:	2203      	movs	r2, #3
 8001628:	4013      	ands	r3, r2
}
 800162a:	0018      	movs	r0, r3
 800162c:	46bd      	mov	sp, r7
 800162e:	b002      	add	sp, #8
 8001630:	bd80      	pop	{r7, pc}
	...

08001634 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b084      	sub	sp, #16
 8001638:	af00      	add	r7, sp, #0
 800163a:	60f8      	str	r0, [r7, #12]
 800163c:	60b9      	str	r1, [r7, #8]
 800163e:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	695b      	ldr	r3, [r3, #20]
 8001644:	68ba      	ldr	r2, [r7, #8]
 8001646:	0212      	lsls	r2, r2, #8
 8001648:	43d2      	mvns	r2, r2
 800164a:	401a      	ands	r2, r3
 800164c:	68bb      	ldr	r3, [r7, #8]
 800164e:	021b      	lsls	r3, r3, #8
 8001650:	6879      	ldr	r1, [r7, #4]
 8001652:	400b      	ands	r3, r1
 8001654:	4904      	ldr	r1, [pc, #16]	@ (8001668 <LL_ADC_SetChannelSamplingTime+0x34>)
 8001656:	400b      	ands	r3, r1
 8001658:	431a      	orrs	r2, r3
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 800165e:	46c0      	nop			@ (mov r8, r8)
 8001660:	46bd      	mov	sp, r7
 8001662:	b004      	add	sp, #16
 8001664:	bd80      	pop	{r7, pc}
 8001666:	46c0      	nop			@ (mov r8, r8)
 8001668:	07ffff00 	.word	0x07ffff00

0800166c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b082      	sub	sp, #8
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	689b      	ldr	r3, [r3, #8]
 8001678:	4a05      	ldr	r2, [pc, #20]	@ (8001690 <LL_ADC_EnableInternalRegulator+0x24>)
 800167a:	4013      	ands	r3, r2
 800167c:	2280      	movs	r2, #128	@ 0x80
 800167e:	0552      	lsls	r2, r2, #21
 8001680:	431a      	orrs	r2, r3
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001686:	46c0      	nop			@ (mov r8, r8)
 8001688:	46bd      	mov	sp, r7
 800168a:	b002      	add	sp, #8
 800168c:	bd80      	pop	{r7, pc}
 800168e:	46c0      	nop			@ (mov r8, r8)
 8001690:	6fffffe8 	.word	0x6fffffe8

08001694 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b082      	sub	sp, #8
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	689a      	ldr	r2, [r3, #8]
 80016a0:	2380      	movs	r3, #128	@ 0x80
 80016a2:	055b      	lsls	r3, r3, #21
 80016a4:	401a      	ands	r2, r3
 80016a6:	2380      	movs	r3, #128	@ 0x80
 80016a8:	055b      	lsls	r3, r3, #21
 80016aa:	429a      	cmp	r2, r3
 80016ac:	d101      	bne.n	80016b2 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 80016ae:	2301      	movs	r3, #1
 80016b0:	e000      	b.n	80016b4 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 80016b2:	2300      	movs	r3, #0
}
 80016b4:	0018      	movs	r0, r3
 80016b6:	46bd      	mov	sp, r7
 80016b8:	b002      	add	sp, #8
 80016ba:	bd80      	pop	{r7, pc}

080016bc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b082      	sub	sp, #8
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	689b      	ldr	r3, [r3, #8]
 80016c8:	2201      	movs	r2, #1
 80016ca:	4013      	ands	r3, r2
 80016cc:	2b01      	cmp	r3, #1
 80016ce:	d101      	bne.n	80016d4 <LL_ADC_IsEnabled+0x18>
 80016d0:	2301      	movs	r3, #1
 80016d2:	e000      	b.n	80016d6 <LL_ADC_IsEnabled+0x1a>
 80016d4:	2300      	movs	r3, #0
}
 80016d6:	0018      	movs	r0, r3
 80016d8:	46bd      	mov	sp, r7
 80016da:	b002      	add	sp, #8
 80016dc:	bd80      	pop	{r7, pc}

080016de <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80016de:	b580      	push	{r7, lr}
 80016e0:	b082      	sub	sp, #8
 80016e2:	af00      	add	r7, sp, #0
 80016e4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	689b      	ldr	r3, [r3, #8]
 80016ea:	2204      	movs	r2, #4
 80016ec:	4013      	ands	r3, r2
 80016ee:	2b04      	cmp	r3, #4
 80016f0:	d101      	bne.n	80016f6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80016f2:	2301      	movs	r3, #1
 80016f4:	e000      	b.n	80016f8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80016f6:	2300      	movs	r3, #0
}
 80016f8:	0018      	movs	r0, r3
 80016fa:	46bd      	mov	sp, r7
 80016fc:	b002      	add	sp, #8
 80016fe:	bd80      	pop	{r7, pc}

08001700 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b088      	sub	sp, #32
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001708:	231f      	movs	r3, #31
 800170a:	18fb      	adds	r3, r7, r3
 800170c:	2200      	movs	r2, #0
 800170e:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 8001710:	2300      	movs	r3, #0
 8001712:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 8001714:	2300      	movs	r3, #0
 8001716:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001718:	2300      	movs	r3, #0
 800171a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d101      	bne.n	8001726 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8001722:	2301      	movs	r3, #1
 8001724:	e17f      	b.n	8001a26 <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800172a:	2b00      	cmp	r3, #0
 800172c:	d10a      	bne.n	8001744 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	0018      	movs	r0, r3
 8001732:	f7fe ff21 	bl	8000578 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	2200      	movs	r2, #0
 800173a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2254      	movs	r2, #84	@ 0x54
 8001740:	2100      	movs	r1, #0
 8001742:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	0018      	movs	r0, r3
 800174a:	f7ff ffa3 	bl	8001694 <LL_ADC_IsInternalRegulatorEnabled>
 800174e:	1e03      	subs	r3, r0, #0
 8001750:	d115      	bne.n	800177e <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	0018      	movs	r0, r3
 8001758:	f7ff ff88 	bl	800166c <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800175c:	4bb4      	ldr	r3, [pc, #720]	@ (8001a30 <HAL_ADC_Init+0x330>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	49b4      	ldr	r1, [pc, #720]	@ (8001a34 <HAL_ADC_Init+0x334>)
 8001762:	0018      	movs	r0, r3
 8001764:	f7fe fd28 	bl	80001b8 <__udivsi3>
 8001768:	0003      	movs	r3, r0
 800176a:	3301      	adds	r3, #1
 800176c:	005b      	lsls	r3, r3, #1
 800176e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001770:	e002      	b.n	8001778 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	3b01      	subs	r3, #1
 8001776:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d1f9      	bne.n	8001772 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	0018      	movs	r0, r3
 8001784:	f7ff ff86 	bl	8001694 <LL_ADC_IsInternalRegulatorEnabled>
 8001788:	1e03      	subs	r3, r0, #0
 800178a:	d10f      	bne.n	80017ac <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001790:	2210      	movs	r2, #16
 8001792:	431a      	orrs	r2, r3
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800179c:	2201      	movs	r2, #1
 800179e:	431a      	orrs	r2, r3
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80017a4:	231f      	movs	r3, #31
 80017a6:	18fb      	adds	r3, r7, r3
 80017a8:	2201      	movs	r2, #1
 80017aa:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	0018      	movs	r0, r3
 80017b2:	f7ff ff94 	bl	80016de <LL_ADC_REG_IsConversionOngoing>
 80017b6:	0003      	movs	r3, r0
 80017b8:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017be:	2210      	movs	r2, #16
 80017c0:	4013      	ands	r3, r2
 80017c2:	d000      	beq.n	80017c6 <HAL_ADC_Init+0xc6>
 80017c4:	e122      	b.n	8001a0c <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80017c6:	693b      	ldr	r3, [r7, #16]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d000      	beq.n	80017ce <HAL_ADC_Init+0xce>
 80017cc:	e11e      	b.n	8001a0c <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017d2:	4a99      	ldr	r2, [pc, #612]	@ (8001a38 <HAL_ADC_Init+0x338>)
 80017d4:	4013      	ands	r3, r2
 80017d6:	2202      	movs	r2, #2
 80017d8:	431a      	orrs	r2, r3
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	0018      	movs	r0, r3
 80017e4:	f7ff ff6a 	bl	80016bc <LL_ADC_IsEnabled>
 80017e8:	1e03      	subs	r3, r0, #0
 80017ea:	d000      	beq.n	80017ee <HAL_ADC_Init+0xee>
 80017ec:	e0ad      	b.n	800194a <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	7e1b      	ldrb	r3, [r3, #24]
 80017f6:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 80017f8:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	7e5b      	ldrb	r3, [r3, #25]
 80017fe:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001800:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	7e9b      	ldrb	r3, [r3, #26]
 8001806:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001808:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800180e:	2b00      	cmp	r3, #0
 8001810:	d002      	beq.n	8001818 <HAL_ADC_Init+0x118>
 8001812:	2380      	movs	r3, #128	@ 0x80
 8001814:	015b      	lsls	r3, r3, #5
 8001816:	e000      	b.n	800181a <HAL_ADC_Init+0x11a>
 8001818:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800181a:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001820:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	691b      	ldr	r3, [r3, #16]
 8001826:	2b00      	cmp	r3, #0
 8001828:	da04      	bge.n	8001834 <HAL_ADC_Init+0x134>
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	691b      	ldr	r3, [r3, #16]
 800182e:	005b      	lsls	r3, r3, #1
 8001830:	085b      	lsrs	r3, r3, #1
 8001832:	e001      	b.n	8001838 <HAL_ADC_Init+0x138>
 8001834:	2380      	movs	r3, #128	@ 0x80
 8001836:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 8001838:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	212c      	movs	r1, #44	@ 0x2c
 800183e:	5c5b      	ldrb	r3, [r3, r1]
 8001840:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001842:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8001844:	69ba      	ldr	r2, [r7, #24]
 8001846:	4313      	orrs	r3, r2
 8001848:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2220      	movs	r2, #32
 800184e:	5c9b      	ldrb	r3, [r3, r2]
 8001850:	2b01      	cmp	r3, #1
 8001852:	d115      	bne.n	8001880 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	7e9b      	ldrb	r3, [r3, #26]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d105      	bne.n	8001868 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 800185c:	69bb      	ldr	r3, [r7, #24]
 800185e:	2280      	movs	r2, #128	@ 0x80
 8001860:	0252      	lsls	r2, r2, #9
 8001862:	4313      	orrs	r3, r2
 8001864:	61bb      	str	r3, [r7, #24]
 8001866:	e00b      	b.n	8001880 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800186c:	2220      	movs	r2, #32
 800186e:	431a      	orrs	r2, r3
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001878:	2201      	movs	r2, #1
 800187a:	431a      	orrs	r2, r3
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001884:	2b00      	cmp	r3, #0
 8001886:	d00a      	beq.n	800189e <HAL_ADC_Init+0x19e>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800188c:	23e0      	movs	r3, #224	@ 0xe0
 800188e:	005b      	lsls	r3, r3, #1
 8001890:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001896:	4313      	orrs	r3, r2
 8001898:	69ba      	ldr	r2, [r7, #24]
 800189a:	4313      	orrs	r3, r2
 800189c:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	68db      	ldr	r3, [r3, #12]
 80018a4:	4a65      	ldr	r2, [pc, #404]	@ (8001a3c <HAL_ADC_Init+0x33c>)
 80018a6:	4013      	ands	r3, r2
 80018a8:	0019      	movs	r1, r3
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	69ba      	ldr	r2, [r7, #24]
 80018b0:	430a      	orrs	r2, r1
 80018b2:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	0f9b      	lsrs	r3, r3, #30
 80018ba:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80018c0:	4313      	orrs	r3, r2
 80018c2:	697a      	ldr	r2, [r7, #20]
 80018c4:	4313      	orrs	r3, r2
 80018c6:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	223c      	movs	r2, #60	@ 0x3c
 80018cc:	5c9b      	ldrb	r3, [r3, r2]
 80018ce:	2b01      	cmp	r3, #1
 80018d0:	d111      	bne.n	80018f6 <HAL_ADC_Init+0x1f6>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	0f9b      	lsrs	r3, r3, #30
 80018d8:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80018de:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                      hadc->Init.Oversampling.Ratio         |
 80018e4:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                      hadc->Init.Oversampling.RightBitShift |
 80018ea:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	4313      	orrs	r3, r2
 80018f0:	2201      	movs	r2, #1
 80018f2:	4313      	orrs	r3, r2
 80018f4:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	691b      	ldr	r3, [r3, #16]
 80018fc:	4a50      	ldr	r2, [pc, #320]	@ (8001a40 <HAL_ADC_Init+0x340>)
 80018fe:	4013      	ands	r3, r2
 8001900:	0019      	movs	r1, r3
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	697a      	ldr	r2, [r7, #20]
 8001908:	430a      	orrs	r2, r1
 800190a:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	685a      	ldr	r2, [r3, #4]
 8001910:	23c0      	movs	r3, #192	@ 0xc0
 8001912:	061b      	lsls	r3, r3, #24
 8001914:	429a      	cmp	r2, r3
 8001916:	d018      	beq.n	800194a <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800191c:	2380      	movs	r3, #128	@ 0x80
 800191e:	05db      	lsls	r3, r3, #23
 8001920:	429a      	cmp	r2, r3
 8001922:	d012      	beq.n	800194a <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001928:	2380      	movs	r3, #128	@ 0x80
 800192a:	061b      	lsls	r3, r3, #24
 800192c:	429a      	cmp	r2, r3
 800192e:	d00c      	beq.n	800194a <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8001930:	4b44      	ldr	r3, [pc, #272]	@ (8001a44 <HAL_ADC_Init+0x344>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a44      	ldr	r2, [pc, #272]	@ (8001a48 <HAL_ADC_Init+0x348>)
 8001936:	4013      	ands	r3, r2
 8001938:	0019      	movs	r1, r3
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	685a      	ldr	r2, [r3, #4]
 800193e:	23f0      	movs	r3, #240	@ 0xf0
 8001940:	039b      	lsls	r3, r3, #14
 8001942:	401a      	ands	r2, r3
 8001944:	4b3f      	ldr	r3, [pc, #252]	@ (8001a44 <HAL_ADC_Init+0x344>)
 8001946:	430a      	orrs	r2, r1
 8001948:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6818      	ldr	r0, [r3, #0]
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001952:	001a      	movs	r2, r3
 8001954:	2100      	movs	r1, #0
 8001956:	f7ff fdd8 	bl	800150a <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6818      	ldr	r0, [r3, #0]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001962:	493a      	ldr	r1, [pc, #232]	@ (8001a4c <HAL_ADC_Init+0x34c>)
 8001964:	001a      	movs	r2, r3
 8001966:	f7ff fdd0 	bl	800150a <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	691b      	ldr	r3, [r3, #16]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d109      	bne.n	8001986 <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	2110      	movs	r1, #16
 800197e:	4249      	negs	r1, r1
 8001980:	430a      	orrs	r2, r1
 8001982:	629a      	str	r2, [r3, #40]	@ 0x28
 8001984:	e018      	b.n	80019b8 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	691a      	ldr	r2, [r3, #16]
 800198a:	2380      	movs	r3, #128	@ 0x80
 800198c:	039b      	lsls	r3, r3, #14
 800198e:	429a      	cmp	r2, r3
 8001990:	d112      	bne.n	80019b8 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	69db      	ldr	r3, [r3, #28]
 800199c:	3b01      	subs	r3, #1
 800199e:	009b      	lsls	r3, r3, #2
 80019a0:	221c      	movs	r2, #28
 80019a2:	4013      	ands	r3, r2
 80019a4:	2210      	movs	r2, #16
 80019a6:	4252      	negs	r2, r2
 80019a8:	409a      	lsls	r2, r3
 80019aa:	0011      	movs	r1, r2
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	430a      	orrs	r2, r1
 80019b6:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	2100      	movs	r1, #0
 80019be:	0018      	movs	r0, r3
 80019c0:	f7ff fdc0 	bl	8001544 <LL_ADC_GetSamplingTimeCommonChannels>
 80019c4:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80019ca:	429a      	cmp	r2, r3
 80019cc:	d10b      	bne.n	80019e6 <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2200      	movs	r2, #0
 80019d2:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019d8:	2203      	movs	r2, #3
 80019da:	4393      	bics	r3, r2
 80019dc:	2201      	movs	r2, #1
 80019de:	431a      	orrs	r2, r3
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80019e4:	e01c      	b.n	8001a20 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019ea:	2212      	movs	r2, #18
 80019ec:	4393      	bics	r3, r2
 80019ee:	2210      	movs	r2, #16
 80019f0:	431a      	orrs	r2, r3
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019fa:	2201      	movs	r2, #1
 80019fc:	431a      	orrs	r2, r3
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 8001a02:	231f      	movs	r3, #31
 8001a04:	18fb      	adds	r3, r7, r3
 8001a06:	2201      	movs	r2, #1
 8001a08:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001a0a:	e009      	b.n	8001a20 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a10:	2210      	movs	r2, #16
 8001a12:	431a      	orrs	r2, r3
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001a18:	231f      	movs	r3, #31
 8001a1a:	18fb      	adds	r3, r7, r3
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8001a20:	231f      	movs	r3, #31
 8001a22:	18fb      	adds	r3, r7, r3
 8001a24:	781b      	ldrb	r3, [r3, #0]
}
 8001a26:	0018      	movs	r0, r3
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	b008      	add	sp, #32
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	46c0      	nop			@ (mov r8, r8)
 8001a30:	20000000 	.word	0x20000000
 8001a34:	00030d40 	.word	0x00030d40
 8001a38:	fffffefd 	.word	0xfffffefd
 8001a3c:	ffde0201 	.word	0xffde0201
 8001a40:	1ffffc02 	.word	0x1ffffc02
 8001a44:	40012708 	.word	0x40012708
 8001a48:	ffc3ffff 	.word	0xffc3ffff
 8001a4c:	07ffff04 	.word	0x07ffff04

08001a50 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b086      	sub	sp, #24
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8001a58:	2300      	movs	r3, #0
 8001a5a:	617b      	str	r3, [r7, #20]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	613b      	str	r3, [r7, #16]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8001a6c:	693b      	ldr	r3, [r7, #16]
 8001a6e:	2202      	movs	r2, #2
 8001a70:	4013      	ands	r3, r2
 8001a72:	d017      	beq.n	8001aa4 <HAL_ADC_IRQHandler+0x54>
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	2202      	movs	r2, #2
 8001a78:	4013      	ands	r3, r2
 8001a7a:	d013      	beq.n	8001aa4 <HAL_ADC_IRQHandler+0x54>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a80:	2210      	movs	r2, #16
 8001a82:	4013      	ands	r3, r2
 8001a84:	d106      	bne.n	8001a94 <HAL_ADC_IRQHandler+0x44>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a8a:	2280      	movs	r2, #128	@ 0x80
 8001a8c:	0112      	lsls	r2, r2, #4
 8001a8e:	431a      	orrs	r2, r3
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	659a      	str	r2, [r3, #88]	@ 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	0018      	movs	r0, r3
 8001a98:	f000 faf2 	bl	8002080 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	2202      	movs	r2, #2
 8001aa2:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001aa4:	693b      	ldr	r3, [r7, #16]
 8001aa6:	2204      	movs	r2, #4
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	d003      	beq.n	8001ab4 <HAL_ADC_IRQHandler+0x64>
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	2204      	movs	r2, #4
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	d107      	bne.n	8001ac4 <HAL_ADC_IRQHandler+0x74>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001ab4:	693b      	ldr	r3, [r7, #16]
 8001ab6:	2208      	movs	r2, #8
 8001ab8:	4013      	ands	r3, r2
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001aba:	d04d      	beq.n	8001b58 <HAL_ADC_IRQHandler+0x108>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	2208      	movs	r2, #8
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	d049      	beq.n	8001b58 <HAL_ADC_IRQHandler+0x108>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ac8:	2210      	movs	r2, #16
 8001aca:	4013      	ands	r3, r2
 8001acc:	d106      	bne.n	8001adc <HAL_ADC_IRQHandler+0x8c>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ad2:	2280      	movs	r2, #128	@ 0x80
 8001ad4:	0092      	lsls	r2, r2, #2
 8001ad6:	431a      	orrs	r2, r3
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	0018      	movs	r0, r3
 8001ae2:	f7ff fd46 	bl	8001572 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001ae6:	1e03      	subs	r3, r0, #0
 8001ae8:	d02e      	beq.n	8001b48 <HAL_ADC_IRQHandler+0xf8>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	7e9b      	ldrb	r3, [r3, #26]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d12a      	bne.n	8001b48 <HAL_ADC_IRQHandler+0xf8>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	2208      	movs	r2, #8
 8001afa:	4013      	ands	r3, r2
 8001afc:	2b08      	cmp	r3, #8
 8001afe:	d123      	bne.n	8001b48 <HAL_ADC_IRQHandler+0xf8>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	0018      	movs	r0, r3
 8001b06:	f7ff fdea 	bl	80016de <LL_ADC_REG_IsConversionOngoing>
 8001b0a:	1e03      	subs	r3, r0, #0
 8001b0c:	d110      	bne.n	8001b30 <HAL_ADC_IRQHandler+0xe0>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	685a      	ldr	r2, [r3, #4]
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	210c      	movs	r1, #12
 8001b1a:	438a      	bics	r2, r1
 8001b1c:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b22:	4a56      	ldr	r2, [pc, #344]	@ (8001c7c <HAL_ADC_IRQHandler+0x22c>)
 8001b24:	4013      	ands	r3, r2
 8001b26:	2201      	movs	r2, #1
 8001b28:	431a      	orrs	r2, r3
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	659a      	str	r2, [r3, #88]	@ 0x58
 8001b2e:	e00b      	b.n	8001b48 <HAL_ADC_IRQHandler+0xf8>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b34:	2220      	movs	r2, #32
 8001b36:	431a      	orrs	r2, r3
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b40:	2201      	movs	r2, #1
 8001b42:	431a      	orrs	r2, r3
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	65da      	str	r2, [r3, #92]	@ 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	0018      	movs	r0, r3
 8001b4c:	f000 f898 	bl	8001c80 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	220c      	movs	r2, #12
 8001b56:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8001b58:	693b      	ldr	r3, [r7, #16]
 8001b5a:	2280      	movs	r2, #128	@ 0x80
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	d012      	beq.n	8001b86 <HAL_ADC_IRQHandler+0x136>
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	2280      	movs	r2, #128	@ 0x80
 8001b64:	4013      	ands	r3, r2
 8001b66:	d00e      	beq.n	8001b86 <HAL_ADC_IRQHandler+0x136>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b6c:	2280      	movs	r2, #128	@ 0x80
 8001b6e:	0252      	lsls	r2, r2, #9
 8001b70:	431a      	orrs	r2, r3
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	0018      	movs	r0, r3
 8001b7a:	f000 f889 	bl	8001c90 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	2280      	movs	r2, #128	@ 0x80
 8001b84:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8001b86:	693a      	ldr	r2, [r7, #16]
 8001b88:	2380      	movs	r3, #128	@ 0x80
 8001b8a:	005b      	lsls	r3, r3, #1
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	d014      	beq.n	8001bba <HAL_ADC_IRQHandler+0x16a>
 8001b90:	68fa      	ldr	r2, [r7, #12]
 8001b92:	2380      	movs	r3, #128	@ 0x80
 8001b94:	005b      	lsls	r3, r3, #1
 8001b96:	4013      	ands	r3, r2
 8001b98:	d00f      	beq.n	8001bba <HAL_ADC_IRQHandler+0x16a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b9e:	2280      	movs	r2, #128	@ 0x80
 8001ba0:	0292      	lsls	r2, r2, #10
 8001ba2:	431a      	orrs	r2, r3
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	0018      	movs	r0, r3
 8001bac:	f000 fa58 	bl	8002060 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	2280      	movs	r2, #128	@ 0x80
 8001bb6:	0052      	lsls	r2, r2, #1
 8001bb8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8001bba:	693a      	ldr	r2, [r7, #16]
 8001bbc:	2380      	movs	r3, #128	@ 0x80
 8001bbe:	009b      	lsls	r3, r3, #2
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	d014      	beq.n	8001bee <HAL_ADC_IRQHandler+0x19e>
 8001bc4:	68fa      	ldr	r2, [r7, #12]
 8001bc6:	2380      	movs	r3, #128	@ 0x80
 8001bc8:	009b      	lsls	r3, r3, #2
 8001bca:	4013      	ands	r3, r2
 8001bcc:	d00f      	beq.n	8001bee <HAL_ADC_IRQHandler+0x19e>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bd2:	2280      	movs	r2, #128	@ 0x80
 8001bd4:	02d2      	lsls	r2, r2, #11
 8001bd6:	431a      	orrs	r2, r3
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	0018      	movs	r0, r3
 8001be0:	f000 fa46 	bl	8002070 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	2280      	movs	r2, #128	@ 0x80
 8001bea:	0092      	lsls	r2, r2, #2
 8001bec:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8001bee:	693b      	ldr	r3, [r7, #16]
 8001bf0:	2210      	movs	r2, #16
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	d02b      	beq.n	8001c4e <HAL_ADC_IRQHandler+0x1fe>
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	2210      	movs	r2, #16
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	d027      	beq.n	8001c4e <HAL_ADC_IRQHandler+0x1fe>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d102      	bne.n	8001c0c <HAL_ADC_IRQHandler+0x1bc>
    {
      overrun_error = 1UL;
 8001c06:	2301      	movs	r3, #1
 8001c08:	617b      	str	r3, [r7, #20]
 8001c0a:	e008      	b.n	8001c1e <HAL_ADC_IRQHandler+0x1ce>
    }
    else
    {
      /* Check DMA configuration */
      if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	0018      	movs	r0, r3
 8001c12:	f7ff fd02 	bl	800161a <LL_ADC_REG_GetDMATransfer>
 8001c16:	1e03      	subs	r3, r0, #0
 8001c18:	d001      	beq.n	8001c1e <HAL_ADC_IRQHandler+0x1ce>
      {
        overrun_error = 1UL;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	617b      	str	r3, [r7, #20]
      }
    }

    if (overrun_error == 1UL)
 8001c1e:	697b      	ldr	r3, [r7, #20]
 8001c20:	2b01      	cmp	r3, #1
 8001c22:	d110      	bne.n	8001c46 <HAL_ADC_IRQHandler+0x1f6>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c28:	2280      	movs	r2, #128	@ 0x80
 8001c2a:	00d2      	lsls	r2, r2, #3
 8001c2c:	431a      	orrs	r2, r3
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c36:	2202      	movs	r2, #2
 8001c38:	431a      	orrs	r2, r3
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	65da      	str	r2, [r3, #92]	@ 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	0018      	movs	r0, r3
 8001c42:	f000 f82d 	bl	8001ca0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	2210      	movs	r2, #16
 8001c4c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check channel configuration ready flag ========== */
  if (((tmp_isr & ADC_FLAG_CCRDY) == ADC_FLAG_CCRDY) && ((tmp_ier & ADC_IT_CCRDY) == ADC_IT_CCRDY))
 8001c4e:	693a      	ldr	r2, [r7, #16]
 8001c50:	2380      	movs	r3, #128	@ 0x80
 8001c52:	019b      	lsls	r3, r3, #6
 8001c54:	4013      	ands	r3, r2
 8001c56:	d00d      	beq.n	8001c74 <HAL_ADC_IRQHandler+0x224>
 8001c58:	68fa      	ldr	r2, [r7, #12]
 8001c5a:	2380      	movs	r3, #128	@ 0x80
 8001c5c:	019b      	lsls	r3, r3, #6
 8001c5e:	4013      	ands	r3, r2
 8001c60:	d008      	beq.n	8001c74 <HAL_ADC_IRQHandler+0x224>
  {
    /* Channel configuration ready callback */
    HAL_ADCEx_ChannelConfigReadyCallback(hadc);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	0018      	movs	r0, r3
 8001c66:	f000 fa13 	bl	8002090 <HAL_ADCEx_ChannelConfigReadyCallback>

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_CCRDY);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	2280      	movs	r2, #128	@ 0x80
 8001c70:	0192      	lsls	r2, r2, #6
 8001c72:	601a      	str	r2, [r3, #0]
  }
}
 8001c74:	46c0      	nop			@ (mov r8, r8)
 8001c76:	46bd      	mov	sp, r7
 8001c78:	b006      	add	sp, #24
 8001c7a:	bd80      	pop	{r7, pc}
 8001c7c:	fffffefe 	.word	0xfffffefe

08001c80 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b082      	sub	sp, #8
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001c88:	46c0      	nop			@ (mov r8, r8)
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	b002      	add	sp, #8
 8001c8e:	bd80      	pop	{r7, pc}

08001c90 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b082      	sub	sp, #8
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001c98:	46c0      	nop			@ (mov r8, r8)
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	b002      	add	sp, #8
 8001c9e:	bd80      	pop	{r7, pc}

08001ca0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b082      	sub	sp, #8
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001ca8:	46c0      	nop			@ (mov r8, r8)
 8001caa:	46bd      	mov	sp, r7
 8001cac:	b002      	add	sp, #8
 8001cae:	bd80      	pop	{r7, pc}

08001cb0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b086      	sub	sp, #24
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
 8001cb8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001cba:	2317      	movs	r3, #23
 8001cbc:	18fb      	adds	r3, r7, r3
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2254      	movs	r2, #84	@ 0x54
 8001cca:	5c9b      	ldrb	r3, [r3, r2]
 8001ccc:	2b01      	cmp	r3, #1
 8001cce:	d101      	bne.n	8001cd4 <HAL_ADC_ConfigChannel+0x24>
 8001cd0:	2302      	movs	r3, #2
 8001cd2:	e1c0      	b.n	8002056 <HAL_ADC_ConfigChannel+0x3a6>
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2254      	movs	r2, #84	@ 0x54
 8001cd8:	2101      	movs	r1, #1
 8001cda:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	0018      	movs	r0, r3
 8001ce2:	f7ff fcfc 	bl	80016de <LL_ADC_REG_IsConversionOngoing>
 8001ce6:	1e03      	subs	r3, r0, #0
 8001ce8:	d000      	beq.n	8001cec <HAL_ADC_ConfigChannel+0x3c>
 8001cea:	e1a3      	b.n	8002034 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	2b02      	cmp	r3, #2
 8001cf2:	d100      	bne.n	8001cf6 <HAL_ADC_ConfigChannel+0x46>
 8001cf4:	e143      	b.n	8001f7e <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	691a      	ldr	r2, [r3, #16]
 8001cfa:	2380      	movs	r3, #128	@ 0x80
 8001cfc:	061b      	lsls	r3, r3, #24
 8001cfe:	429a      	cmp	r2, r3
 8001d00:	d004      	beq.n	8001d0c <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001d06:	4ac1      	ldr	r2, [pc, #772]	@ (800200c <HAL_ADC_ConfigChannel+0x35c>)
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d108      	bne.n	8001d1e <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681a      	ldr	r2, [r3, #0]
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	0019      	movs	r1, r3
 8001d16:	0010      	movs	r0, r2
 8001d18:	f7ff fc5c 	bl	80015d4 <LL_ADC_REG_SetSequencerChAdd>
 8001d1c:	e0c9      	b.n	8001eb2 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	211f      	movs	r1, #31
 8001d28:	400b      	ands	r3, r1
 8001d2a:	210f      	movs	r1, #15
 8001d2c:	4099      	lsls	r1, r3
 8001d2e:	000b      	movs	r3, r1
 8001d30:	43db      	mvns	r3, r3
 8001d32:	4013      	ands	r3, r2
 8001d34:	0019      	movs	r1, r3
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	035b      	lsls	r3, r3, #13
 8001d3c:	0b5b      	lsrs	r3, r3, #13
 8001d3e:	d105      	bne.n	8001d4c <HAL_ADC_ConfigChannel+0x9c>
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	0e9b      	lsrs	r3, r3, #26
 8001d46:	221f      	movs	r2, #31
 8001d48:	4013      	ands	r3, r2
 8001d4a:	e098      	b.n	8001e7e <HAL_ADC_ConfigChannel+0x1ce>
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	2201      	movs	r2, #1
 8001d52:	4013      	ands	r3, r2
 8001d54:	d000      	beq.n	8001d58 <HAL_ADC_ConfigChannel+0xa8>
 8001d56:	e091      	b.n	8001e7c <HAL_ADC_ConfigChannel+0x1cc>
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	2202      	movs	r2, #2
 8001d5e:	4013      	ands	r3, r2
 8001d60:	d000      	beq.n	8001d64 <HAL_ADC_ConfigChannel+0xb4>
 8001d62:	e089      	b.n	8001e78 <HAL_ADC_ConfigChannel+0x1c8>
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	2204      	movs	r2, #4
 8001d6a:	4013      	ands	r3, r2
 8001d6c:	d000      	beq.n	8001d70 <HAL_ADC_ConfigChannel+0xc0>
 8001d6e:	e081      	b.n	8001e74 <HAL_ADC_ConfigChannel+0x1c4>
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	2208      	movs	r2, #8
 8001d76:	4013      	ands	r3, r2
 8001d78:	d000      	beq.n	8001d7c <HAL_ADC_ConfigChannel+0xcc>
 8001d7a:	e079      	b.n	8001e70 <HAL_ADC_ConfigChannel+0x1c0>
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	2210      	movs	r2, #16
 8001d82:	4013      	ands	r3, r2
 8001d84:	d000      	beq.n	8001d88 <HAL_ADC_ConfigChannel+0xd8>
 8001d86:	e071      	b.n	8001e6c <HAL_ADC_ConfigChannel+0x1bc>
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	2220      	movs	r2, #32
 8001d8e:	4013      	ands	r3, r2
 8001d90:	d000      	beq.n	8001d94 <HAL_ADC_ConfigChannel+0xe4>
 8001d92:	e069      	b.n	8001e68 <HAL_ADC_ConfigChannel+0x1b8>
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	2240      	movs	r2, #64	@ 0x40
 8001d9a:	4013      	ands	r3, r2
 8001d9c:	d000      	beq.n	8001da0 <HAL_ADC_ConfigChannel+0xf0>
 8001d9e:	e061      	b.n	8001e64 <HAL_ADC_ConfigChannel+0x1b4>
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	2280      	movs	r2, #128	@ 0x80
 8001da6:	4013      	ands	r3, r2
 8001da8:	d000      	beq.n	8001dac <HAL_ADC_ConfigChannel+0xfc>
 8001daa:	e059      	b.n	8001e60 <HAL_ADC_ConfigChannel+0x1b0>
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	681a      	ldr	r2, [r3, #0]
 8001db0:	2380      	movs	r3, #128	@ 0x80
 8001db2:	005b      	lsls	r3, r3, #1
 8001db4:	4013      	ands	r3, r2
 8001db6:	d151      	bne.n	8001e5c <HAL_ADC_ConfigChannel+0x1ac>
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	681a      	ldr	r2, [r3, #0]
 8001dbc:	2380      	movs	r3, #128	@ 0x80
 8001dbe:	009b      	lsls	r3, r3, #2
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	d149      	bne.n	8001e58 <HAL_ADC_ConfigChannel+0x1a8>
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	681a      	ldr	r2, [r3, #0]
 8001dc8:	2380      	movs	r3, #128	@ 0x80
 8001dca:	00db      	lsls	r3, r3, #3
 8001dcc:	4013      	ands	r3, r2
 8001dce:	d141      	bne.n	8001e54 <HAL_ADC_ConfigChannel+0x1a4>
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	681a      	ldr	r2, [r3, #0]
 8001dd4:	2380      	movs	r3, #128	@ 0x80
 8001dd6:	011b      	lsls	r3, r3, #4
 8001dd8:	4013      	ands	r3, r2
 8001dda:	d139      	bne.n	8001e50 <HAL_ADC_ConfigChannel+0x1a0>
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	681a      	ldr	r2, [r3, #0]
 8001de0:	2380      	movs	r3, #128	@ 0x80
 8001de2:	015b      	lsls	r3, r3, #5
 8001de4:	4013      	ands	r3, r2
 8001de6:	d131      	bne.n	8001e4c <HAL_ADC_ConfigChannel+0x19c>
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	681a      	ldr	r2, [r3, #0]
 8001dec:	2380      	movs	r3, #128	@ 0x80
 8001dee:	019b      	lsls	r3, r3, #6
 8001df0:	4013      	ands	r3, r2
 8001df2:	d129      	bne.n	8001e48 <HAL_ADC_ConfigChannel+0x198>
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	2380      	movs	r3, #128	@ 0x80
 8001dfa:	01db      	lsls	r3, r3, #7
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	d121      	bne.n	8001e44 <HAL_ADC_ConfigChannel+0x194>
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	681a      	ldr	r2, [r3, #0]
 8001e04:	2380      	movs	r3, #128	@ 0x80
 8001e06:	021b      	lsls	r3, r3, #8
 8001e08:	4013      	ands	r3, r2
 8001e0a:	d119      	bne.n	8001e40 <HAL_ADC_ConfigChannel+0x190>
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	681a      	ldr	r2, [r3, #0]
 8001e10:	2380      	movs	r3, #128	@ 0x80
 8001e12:	025b      	lsls	r3, r3, #9
 8001e14:	4013      	ands	r3, r2
 8001e16:	d111      	bne.n	8001e3c <HAL_ADC_ConfigChannel+0x18c>
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	681a      	ldr	r2, [r3, #0]
 8001e1c:	2380      	movs	r3, #128	@ 0x80
 8001e1e:	029b      	lsls	r3, r3, #10
 8001e20:	4013      	ands	r3, r2
 8001e22:	d109      	bne.n	8001e38 <HAL_ADC_ConfigChannel+0x188>
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	2380      	movs	r3, #128	@ 0x80
 8001e2a:	02db      	lsls	r3, r3, #11
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	d001      	beq.n	8001e34 <HAL_ADC_ConfigChannel+0x184>
 8001e30:	2312      	movs	r3, #18
 8001e32:	e024      	b.n	8001e7e <HAL_ADC_ConfigChannel+0x1ce>
 8001e34:	2300      	movs	r3, #0
 8001e36:	e022      	b.n	8001e7e <HAL_ADC_ConfigChannel+0x1ce>
 8001e38:	2311      	movs	r3, #17
 8001e3a:	e020      	b.n	8001e7e <HAL_ADC_ConfigChannel+0x1ce>
 8001e3c:	2310      	movs	r3, #16
 8001e3e:	e01e      	b.n	8001e7e <HAL_ADC_ConfigChannel+0x1ce>
 8001e40:	230f      	movs	r3, #15
 8001e42:	e01c      	b.n	8001e7e <HAL_ADC_ConfigChannel+0x1ce>
 8001e44:	230e      	movs	r3, #14
 8001e46:	e01a      	b.n	8001e7e <HAL_ADC_ConfigChannel+0x1ce>
 8001e48:	230d      	movs	r3, #13
 8001e4a:	e018      	b.n	8001e7e <HAL_ADC_ConfigChannel+0x1ce>
 8001e4c:	230c      	movs	r3, #12
 8001e4e:	e016      	b.n	8001e7e <HAL_ADC_ConfigChannel+0x1ce>
 8001e50:	230b      	movs	r3, #11
 8001e52:	e014      	b.n	8001e7e <HAL_ADC_ConfigChannel+0x1ce>
 8001e54:	230a      	movs	r3, #10
 8001e56:	e012      	b.n	8001e7e <HAL_ADC_ConfigChannel+0x1ce>
 8001e58:	2309      	movs	r3, #9
 8001e5a:	e010      	b.n	8001e7e <HAL_ADC_ConfigChannel+0x1ce>
 8001e5c:	2308      	movs	r3, #8
 8001e5e:	e00e      	b.n	8001e7e <HAL_ADC_ConfigChannel+0x1ce>
 8001e60:	2307      	movs	r3, #7
 8001e62:	e00c      	b.n	8001e7e <HAL_ADC_ConfigChannel+0x1ce>
 8001e64:	2306      	movs	r3, #6
 8001e66:	e00a      	b.n	8001e7e <HAL_ADC_ConfigChannel+0x1ce>
 8001e68:	2305      	movs	r3, #5
 8001e6a:	e008      	b.n	8001e7e <HAL_ADC_ConfigChannel+0x1ce>
 8001e6c:	2304      	movs	r3, #4
 8001e6e:	e006      	b.n	8001e7e <HAL_ADC_ConfigChannel+0x1ce>
 8001e70:	2303      	movs	r3, #3
 8001e72:	e004      	b.n	8001e7e <HAL_ADC_ConfigChannel+0x1ce>
 8001e74:	2302      	movs	r3, #2
 8001e76:	e002      	b.n	8001e7e <HAL_ADC_ConfigChannel+0x1ce>
 8001e78:	2301      	movs	r3, #1
 8001e7a:	e000      	b.n	8001e7e <HAL_ADC_ConfigChannel+0x1ce>
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	683a      	ldr	r2, [r7, #0]
 8001e80:	6852      	ldr	r2, [r2, #4]
 8001e82:	201f      	movs	r0, #31
 8001e84:	4002      	ands	r2, r0
 8001e86:	4093      	lsls	r3, r2
 8001e88:	000a      	movs	r2, r1
 8001e8a:	431a      	orrs	r2, r3
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	089b      	lsrs	r3, r3, #2
 8001e96:	1c5a      	adds	r2, r3, #1
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	69db      	ldr	r3, [r3, #28]
 8001e9c:	429a      	cmp	r2, r3
 8001e9e:	d808      	bhi.n	8001eb2 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6818      	ldr	r0, [r3, #0]
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	6859      	ldr	r1, [r3, #4]
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	001a      	movs	r2, r3
 8001eae:	f7ff fb71 	bl	8001594 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6818      	ldr	r0, [r3, #0]
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	6819      	ldr	r1, [r3, #0]
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	689b      	ldr	r3, [r3, #8]
 8001ebe:	001a      	movs	r2, r3
 8001ec0:	f7ff fbb8 	bl	8001634 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	db00      	blt.n	8001ece <HAL_ADC_ConfigChannel+0x21e>
 8001ecc:	e0bc      	b.n	8002048 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001ece:	4b50      	ldr	r3, [pc, #320]	@ (8002010 <HAL_ADC_ConfigChannel+0x360>)
 8001ed0:	0018      	movs	r0, r3
 8001ed2:	f7ff fb0d 	bl	80014f0 <LL_ADC_GetCommonPathInternalCh>
 8001ed6:	0003      	movs	r3, r0
 8001ed8:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a4d      	ldr	r2, [pc, #308]	@ (8002014 <HAL_ADC_ConfigChannel+0x364>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d122      	bne.n	8001f2a <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001ee4:	693a      	ldr	r2, [r7, #16]
 8001ee6:	2380      	movs	r3, #128	@ 0x80
 8001ee8:	041b      	lsls	r3, r3, #16
 8001eea:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001eec:	d11d      	bne.n	8001f2a <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	2280      	movs	r2, #128	@ 0x80
 8001ef2:	0412      	lsls	r2, r2, #16
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	4a46      	ldr	r2, [pc, #280]	@ (8002010 <HAL_ADC_ConfigChannel+0x360>)
 8001ef8:	0019      	movs	r1, r3
 8001efa:	0010      	movs	r0, r2
 8001efc:	f7ff fae4 	bl	80014c8 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001f00:	4b45      	ldr	r3, [pc, #276]	@ (8002018 <HAL_ADC_ConfigChannel+0x368>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4945      	ldr	r1, [pc, #276]	@ (800201c <HAL_ADC_ConfigChannel+0x36c>)
 8001f06:	0018      	movs	r0, r3
 8001f08:	f7fe f956 	bl	80001b8 <__udivsi3>
 8001f0c:	0003      	movs	r3, r0
 8001f0e:	1c5a      	adds	r2, r3, #1
 8001f10:	0013      	movs	r3, r2
 8001f12:	005b      	lsls	r3, r3, #1
 8001f14:	189b      	adds	r3, r3, r2
 8001f16:	009b      	lsls	r3, r3, #2
 8001f18:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001f1a:	e002      	b.n	8001f22 <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	3b01      	subs	r3, #1
 8001f20:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d1f9      	bne.n	8001f1c <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001f28:	e08e      	b.n	8002048 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4a3c      	ldr	r2, [pc, #240]	@ (8002020 <HAL_ADC_ConfigChannel+0x370>)
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d10e      	bne.n	8001f52 <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001f34:	693a      	ldr	r2, [r7, #16]
 8001f36:	2380      	movs	r3, #128	@ 0x80
 8001f38:	045b      	lsls	r3, r3, #17
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	d109      	bne.n	8001f52 <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	2280      	movs	r2, #128	@ 0x80
 8001f42:	0452      	lsls	r2, r2, #17
 8001f44:	4313      	orrs	r3, r2
 8001f46:	4a32      	ldr	r2, [pc, #200]	@ (8002010 <HAL_ADC_ConfigChannel+0x360>)
 8001f48:	0019      	movs	r1, r3
 8001f4a:	0010      	movs	r0, r2
 8001f4c:	f7ff fabc 	bl	80014c8 <LL_ADC_SetCommonPathInternalCh>
 8001f50:	e07a      	b.n	8002048 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4a33      	ldr	r2, [pc, #204]	@ (8002024 <HAL_ADC_ConfigChannel+0x374>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d000      	beq.n	8001f5e <HAL_ADC_ConfigChannel+0x2ae>
 8001f5c:	e074      	b.n	8002048 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001f5e:	693a      	ldr	r2, [r7, #16]
 8001f60:	2380      	movs	r3, #128	@ 0x80
 8001f62:	03db      	lsls	r3, r3, #15
 8001f64:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001f66:	d000      	beq.n	8001f6a <HAL_ADC_ConfigChannel+0x2ba>
 8001f68:	e06e      	b.n	8002048 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	2280      	movs	r2, #128	@ 0x80
 8001f6e:	03d2      	lsls	r2, r2, #15
 8001f70:	4313      	orrs	r3, r2
 8001f72:	4a27      	ldr	r2, [pc, #156]	@ (8002010 <HAL_ADC_ConfigChannel+0x360>)
 8001f74:	0019      	movs	r1, r3
 8001f76:	0010      	movs	r0, r2
 8001f78:	f7ff faa6 	bl	80014c8 <LL_ADC_SetCommonPathInternalCh>
 8001f7c:	e064      	b.n	8002048 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	691a      	ldr	r2, [r3, #16]
 8001f82:	2380      	movs	r3, #128	@ 0x80
 8001f84:	061b      	lsls	r3, r3, #24
 8001f86:	429a      	cmp	r2, r3
 8001f88:	d004      	beq.n	8001f94 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001f8e:	4a1f      	ldr	r2, [pc, #124]	@ (800200c <HAL_ADC_ConfigChannel+0x35c>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d107      	bne.n	8001fa4 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681a      	ldr	r2, [r3, #0]
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	0019      	movs	r1, r3
 8001f9e:	0010      	movs	r0, r2
 8001fa0:	f7ff fb29 	bl	80015f6 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	da4d      	bge.n	8002048 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001fac:	4b18      	ldr	r3, [pc, #96]	@ (8002010 <HAL_ADC_ConfigChannel+0x360>)
 8001fae:	0018      	movs	r0, r3
 8001fb0:	f7ff fa9e 	bl	80014f0 <LL_ADC_GetCommonPathInternalCh>
 8001fb4:	0003      	movs	r3, r0
 8001fb6:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a15      	ldr	r2, [pc, #84]	@ (8002014 <HAL_ADC_ConfigChannel+0x364>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d108      	bne.n	8001fd4 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001fc2:	693b      	ldr	r3, [r7, #16]
 8001fc4:	4a18      	ldr	r2, [pc, #96]	@ (8002028 <HAL_ADC_ConfigChannel+0x378>)
 8001fc6:	4013      	ands	r3, r2
 8001fc8:	4a11      	ldr	r2, [pc, #68]	@ (8002010 <HAL_ADC_ConfigChannel+0x360>)
 8001fca:	0019      	movs	r1, r3
 8001fcc:	0010      	movs	r0, r2
 8001fce:	f7ff fa7b 	bl	80014c8 <LL_ADC_SetCommonPathInternalCh>
 8001fd2:	e039      	b.n	8002048 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a11      	ldr	r2, [pc, #68]	@ (8002020 <HAL_ADC_ConfigChannel+0x370>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d108      	bne.n	8001ff0 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001fde:	693b      	ldr	r3, [r7, #16]
 8001fe0:	4a12      	ldr	r2, [pc, #72]	@ (800202c <HAL_ADC_ConfigChannel+0x37c>)
 8001fe2:	4013      	ands	r3, r2
 8001fe4:	4a0a      	ldr	r2, [pc, #40]	@ (8002010 <HAL_ADC_ConfigChannel+0x360>)
 8001fe6:	0019      	movs	r1, r3
 8001fe8:	0010      	movs	r0, r2
 8001fea:	f7ff fa6d 	bl	80014c8 <LL_ADC_SetCommonPathInternalCh>
 8001fee:	e02b      	b.n	8002048 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a0b      	ldr	r2, [pc, #44]	@ (8002024 <HAL_ADC_ConfigChannel+0x374>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d126      	bne.n	8002048 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001ffa:	693b      	ldr	r3, [r7, #16]
 8001ffc:	4a0c      	ldr	r2, [pc, #48]	@ (8002030 <HAL_ADC_ConfigChannel+0x380>)
 8001ffe:	4013      	ands	r3, r2
 8002000:	4a03      	ldr	r2, [pc, #12]	@ (8002010 <HAL_ADC_ConfigChannel+0x360>)
 8002002:	0019      	movs	r1, r3
 8002004:	0010      	movs	r0, r2
 8002006:	f7ff fa5f 	bl	80014c8 <LL_ADC_SetCommonPathInternalCh>
 800200a:	e01d      	b.n	8002048 <HAL_ADC_ConfigChannel+0x398>
 800200c:	80000004 	.word	0x80000004
 8002010:	40012708 	.word	0x40012708
 8002014:	b0001000 	.word	0xb0001000
 8002018:	20000000 	.word	0x20000000
 800201c:	00030d40 	.word	0x00030d40
 8002020:	b8004000 	.word	0xb8004000
 8002024:	b4002000 	.word	0xb4002000
 8002028:	ff7fffff 	.word	0xff7fffff
 800202c:	feffffff 	.word	0xfeffffff
 8002030:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002038:	2220      	movs	r2, #32
 800203a:	431a      	orrs	r2, r3
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002040:	2317      	movs	r3, #23
 8002042:	18fb      	adds	r3, r7, r3
 8002044:	2201      	movs	r2, #1
 8002046:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2254      	movs	r2, #84	@ 0x54
 800204c:	2100      	movs	r1, #0
 800204e:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8002050:	2317      	movs	r3, #23
 8002052:	18fb      	adds	r3, r7, r3
 8002054:	781b      	ldrb	r3, [r3, #0]
}
 8002056:	0018      	movs	r0, r3
 8002058:	46bd      	mov	sp, r7
 800205a:	b006      	add	sp, #24
 800205c:	bd80      	pop	{r7, pc}
 800205e:	46c0      	nop			@ (mov r8, r8)

08002060 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b082      	sub	sp, #8
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8002068:	46c0      	nop			@ (mov r8, r8)
 800206a:	46bd      	mov	sp, r7
 800206c:	b002      	add	sp, #8
 800206e:	bd80      	pop	{r7, pc}

08002070 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b082      	sub	sp, #8
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8002078:	46c0      	nop			@ (mov r8, r8)
 800207a:	46bd      	mov	sp, r7
 800207c:	b002      	add	sp, #8
 800207e:	bd80      	pop	{r7, pc}

08002080 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b082      	sub	sp, #8
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8002088:	46c0      	nop			@ (mov r8, r8)
 800208a:	46bd      	mov	sp, r7
 800208c:	b002      	add	sp, #8
 800208e:	bd80      	pop	{r7, pc}

08002090 <HAL_ADCEx_ChannelConfigReadyCallback>:
  * @brief  ADC channel configuration ready callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_ChannelConfigReadyCallback(ADC_HandleTypeDef *hadc)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b082      	sub	sp, #8
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_ChannelConfigReadyCallback must be implemented in the user file.
  */
}
 8002098:	46c0      	nop			@ (mov r8, r8)
 800209a:	46bd      	mov	sp, r7
 800209c:	b002      	add	sp, #8
 800209e:	bd80      	pop	{r7, pc}

080020a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b082      	sub	sp, #8
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	0002      	movs	r2, r0
 80020a8:	1dfb      	adds	r3, r7, #7
 80020aa:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80020ac:	1dfb      	adds	r3, r7, #7
 80020ae:	781b      	ldrb	r3, [r3, #0]
 80020b0:	2b7f      	cmp	r3, #127	@ 0x7f
 80020b2:	d809      	bhi.n	80020c8 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020b4:	1dfb      	adds	r3, r7, #7
 80020b6:	781b      	ldrb	r3, [r3, #0]
 80020b8:	001a      	movs	r2, r3
 80020ba:	231f      	movs	r3, #31
 80020bc:	401a      	ands	r2, r3
 80020be:	4b04      	ldr	r3, [pc, #16]	@ (80020d0 <__NVIC_EnableIRQ+0x30>)
 80020c0:	2101      	movs	r1, #1
 80020c2:	4091      	lsls	r1, r2
 80020c4:	000a      	movs	r2, r1
 80020c6:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80020c8:	46c0      	nop			@ (mov r8, r8)
 80020ca:	46bd      	mov	sp, r7
 80020cc:	b002      	add	sp, #8
 80020ce:	bd80      	pop	{r7, pc}
 80020d0:	e000e100 	.word	0xe000e100

080020d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020d4:	b590      	push	{r4, r7, lr}
 80020d6:	b083      	sub	sp, #12
 80020d8:	af00      	add	r7, sp, #0
 80020da:	0002      	movs	r2, r0
 80020dc:	6039      	str	r1, [r7, #0]
 80020de:	1dfb      	adds	r3, r7, #7
 80020e0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80020e2:	1dfb      	adds	r3, r7, #7
 80020e4:	781b      	ldrb	r3, [r3, #0]
 80020e6:	2b7f      	cmp	r3, #127	@ 0x7f
 80020e8:	d828      	bhi.n	800213c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80020ea:	4a2f      	ldr	r2, [pc, #188]	@ (80021a8 <__NVIC_SetPriority+0xd4>)
 80020ec:	1dfb      	adds	r3, r7, #7
 80020ee:	781b      	ldrb	r3, [r3, #0]
 80020f0:	b25b      	sxtb	r3, r3
 80020f2:	089b      	lsrs	r3, r3, #2
 80020f4:	33c0      	adds	r3, #192	@ 0xc0
 80020f6:	009b      	lsls	r3, r3, #2
 80020f8:	589b      	ldr	r3, [r3, r2]
 80020fa:	1dfa      	adds	r2, r7, #7
 80020fc:	7812      	ldrb	r2, [r2, #0]
 80020fe:	0011      	movs	r1, r2
 8002100:	2203      	movs	r2, #3
 8002102:	400a      	ands	r2, r1
 8002104:	00d2      	lsls	r2, r2, #3
 8002106:	21ff      	movs	r1, #255	@ 0xff
 8002108:	4091      	lsls	r1, r2
 800210a:	000a      	movs	r2, r1
 800210c:	43d2      	mvns	r2, r2
 800210e:	401a      	ands	r2, r3
 8002110:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	019b      	lsls	r3, r3, #6
 8002116:	22ff      	movs	r2, #255	@ 0xff
 8002118:	401a      	ands	r2, r3
 800211a:	1dfb      	adds	r3, r7, #7
 800211c:	781b      	ldrb	r3, [r3, #0]
 800211e:	0018      	movs	r0, r3
 8002120:	2303      	movs	r3, #3
 8002122:	4003      	ands	r3, r0
 8002124:	00db      	lsls	r3, r3, #3
 8002126:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002128:	481f      	ldr	r0, [pc, #124]	@ (80021a8 <__NVIC_SetPriority+0xd4>)
 800212a:	1dfb      	adds	r3, r7, #7
 800212c:	781b      	ldrb	r3, [r3, #0]
 800212e:	b25b      	sxtb	r3, r3
 8002130:	089b      	lsrs	r3, r3, #2
 8002132:	430a      	orrs	r2, r1
 8002134:	33c0      	adds	r3, #192	@ 0xc0
 8002136:	009b      	lsls	r3, r3, #2
 8002138:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800213a:	e031      	b.n	80021a0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800213c:	4a1b      	ldr	r2, [pc, #108]	@ (80021ac <__NVIC_SetPriority+0xd8>)
 800213e:	1dfb      	adds	r3, r7, #7
 8002140:	781b      	ldrb	r3, [r3, #0]
 8002142:	0019      	movs	r1, r3
 8002144:	230f      	movs	r3, #15
 8002146:	400b      	ands	r3, r1
 8002148:	3b08      	subs	r3, #8
 800214a:	089b      	lsrs	r3, r3, #2
 800214c:	3306      	adds	r3, #6
 800214e:	009b      	lsls	r3, r3, #2
 8002150:	18d3      	adds	r3, r2, r3
 8002152:	3304      	adds	r3, #4
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	1dfa      	adds	r2, r7, #7
 8002158:	7812      	ldrb	r2, [r2, #0]
 800215a:	0011      	movs	r1, r2
 800215c:	2203      	movs	r2, #3
 800215e:	400a      	ands	r2, r1
 8002160:	00d2      	lsls	r2, r2, #3
 8002162:	21ff      	movs	r1, #255	@ 0xff
 8002164:	4091      	lsls	r1, r2
 8002166:	000a      	movs	r2, r1
 8002168:	43d2      	mvns	r2, r2
 800216a:	401a      	ands	r2, r3
 800216c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	019b      	lsls	r3, r3, #6
 8002172:	22ff      	movs	r2, #255	@ 0xff
 8002174:	401a      	ands	r2, r3
 8002176:	1dfb      	adds	r3, r7, #7
 8002178:	781b      	ldrb	r3, [r3, #0]
 800217a:	0018      	movs	r0, r3
 800217c:	2303      	movs	r3, #3
 800217e:	4003      	ands	r3, r0
 8002180:	00db      	lsls	r3, r3, #3
 8002182:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002184:	4809      	ldr	r0, [pc, #36]	@ (80021ac <__NVIC_SetPriority+0xd8>)
 8002186:	1dfb      	adds	r3, r7, #7
 8002188:	781b      	ldrb	r3, [r3, #0]
 800218a:	001c      	movs	r4, r3
 800218c:	230f      	movs	r3, #15
 800218e:	4023      	ands	r3, r4
 8002190:	3b08      	subs	r3, #8
 8002192:	089b      	lsrs	r3, r3, #2
 8002194:	430a      	orrs	r2, r1
 8002196:	3306      	adds	r3, #6
 8002198:	009b      	lsls	r3, r3, #2
 800219a:	18c3      	adds	r3, r0, r3
 800219c:	3304      	adds	r3, #4
 800219e:	601a      	str	r2, [r3, #0]
}
 80021a0:	46c0      	nop			@ (mov r8, r8)
 80021a2:	46bd      	mov	sp, r7
 80021a4:	b003      	add	sp, #12
 80021a6:	bd90      	pop	{r4, r7, pc}
 80021a8:	e000e100 	.word	0xe000e100
 80021ac:	e000ed00 	.word	0xe000ed00

080021b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b082      	sub	sp, #8
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	1e5a      	subs	r2, r3, #1
 80021bc:	2380      	movs	r3, #128	@ 0x80
 80021be:	045b      	lsls	r3, r3, #17
 80021c0:	429a      	cmp	r2, r3
 80021c2:	d301      	bcc.n	80021c8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021c4:	2301      	movs	r3, #1
 80021c6:	e010      	b.n	80021ea <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021c8:	4b0a      	ldr	r3, [pc, #40]	@ (80021f4 <SysTick_Config+0x44>)
 80021ca:	687a      	ldr	r2, [r7, #4]
 80021cc:	3a01      	subs	r2, #1
 80021ce:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021d0:	2301      	movs	r3, #1
 80021d2:	425b      	negs	r3, r3
 80021d4:	2103      	movs	r1, #3
 80021d6:	0018      	movs	r0, r3
 80021d8:	f7ff ff7c 	bl	80020d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021dc:	4b05      	ldr	r3, [pc, #20]	@ (80021f4 <SysTick_Config+0x44>)
 80021de:	2200      	movs	r2, #0
 80021e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021e2:	4b04      	ldr	r3, [pc, #16]	@ (80021f4 <SysTick_Config+0x44>)
 80021e4:	2207      	movs	r2, #7
 80021e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021e8:	2300      	movs	r3, #0
}
 80021ea:	0018      	movs	r0, r3
 80021ec:	46bd      	mov	sp, r7
 80021ee:	b002      	add	sp, #8
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	46c0      	nop			@ (mov r8, r8)
 80021f4:	e000e010 	.word	0xe000e010

080021f8 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b084      	sub	sp, #16
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	60b9      	str	r1, [r7, #8]
 8002200:	607a      	str	r2, [r7, #4]
 8002202:	210f      	movs	r1, #15
 8002204:	187b      	adds	r3, r7, r1
 8002206:	1c02      	adds	r2, r0, #0
 8002208:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800220a:	68ba      	ldr	r2, [r7, #8]
 800220c:	187b      	adds	r3, r7, r1
 800220e:	781b      	ldrb	r3, [r3, #0]
 8002210:	b25b      	sxtb	r3, r3
 8002212:	0011      	movs	r1, r2
 8002214:	0018      	movs	r0, r3
 8002216:	f7ff ff5d 	bl	80020d4 <__NVIC_SetPriority>
}
 800221a:	46c0      	nop			@ (mov r8, r8)
 800221c:	46bd      	mov	sp, r7
 800221e:	b004      	add	sp, #16
 8002220:	bd80      	pop	{r7, pc}

08002222 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002222:	b580      	push	{r7, lr}
 8002224:	b082      	sub	sp, #8
 8002226:	af00      	add	r7, sp, #0
 8002228:	0002      	movs	r2, r0
 800222a:	1dfb      	adds	r3, r7, #7
 800222c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800222e:	1dfb      	adds	r3, r7, #7
 8002230:	781b      	ldrb	r3, [r3, #0]
 8002232:	b25b      	sxtb	r3, r3
 8002234:	0018      	movs	r0, r3
 8002236:	f7ff ff33 	bl	80020a0 <__NVIC_EnableIRQ>
}
 800223a:	46c0      	nop			@ (mov r8, r8)
 800223c:	46bd      	mov	sp, r7
 800223e:	b002      	add	sp, #8
 8002240:	bd80      	pop	{r7, pc}

08002242 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002242:	b580      	push	{r7, lr}
 8002244:	b082      	sub	sp, #8
 8002246:	af00      	add	r7, sp, #0
 8002248:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	0018      	movs	r0, r3
 800224e:	f7ff ffaf 	bl	80021b0 <SysTick_Config>
 8002252:	0003      	movs	r3, r0
}
 8002254:	0018      	movs	r0, r3
 8002256:	46bd      	mov	sp, r7
 8002258:	b002      	add	sp, #8
 800225a:	bd80      	pop	{r7, pc}

0800225c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b086      	sub	sp, #24
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
 8002264:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002266:	2300      	movs	r3, #0
 8002268:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800226a:	e147      	b.n	80024fc <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	2101      	movs	r1, #1
 8002272:	697a      	ldr	r2, [r7, #20]
 8002274:	4091      	lsls	r1, r2
 8002276:	000a      	movs	r2, r1
 8002278:	4013      	ands	r3, r2
 800227a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d100      	bne.n	8002284 <HAL_GPIO_Init+0x28>
 8002282:	e138      	b.n	80024f6 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	2203      	movs	r2, #3
 800228a:	4013      	ands	r3, r2
 800228c:	2b01      	cmp	r3, #1
 800228e:	d005      	beq.n	800229c <HAL_GPIO_Init+0x40>
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	2203      	movs	r2, #3
 8002296:	4013      	ands	r3, r2
 8002298:	2b02      	cmp	r3, #2
 800229a:	d130      	bne.n	80022fe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	005b      	lsls	r3, r3, #1
 80022a6:	2203      	movs	r2, #3
 80022a8:	409a      	lsls	r2, r3
 80022aa:	0013      	movs	r3, r2
 80022ac:	43da      	mvns	r2, r3
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	4013      	ands	r3, r2
 80022b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	68da      	ldr	r2, [r3, #12]
 80022b8:	697b      	ldr	r3, [r7, #20]
 80022ba:	005b      	lsls	r3, r3, #1
 80022bc:	409a      	lsls	r2, r3
 80022be:	0013      	movs	r3, r2
 80022c0:	693a      	ldr	r2, [r7, #16]
 80022c2:	4313      	orrs	r3, r2
 80022c4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	693a      	ldr	r2, [r7, #16]
 80022ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80022d2:	2201      	movs	r2, #1
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	409a      	lsls	r2, r3
 80022d8:	0013      	movs	r3, r2
 80022da:	43da      	mvns	r2, r3
 80022dc:	693b      	ldr	r3, [r7, #16]
 80022de:	4013      	ands	r3, r2
 80022e0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	091b      	lsrs	r3, r3, #4
 80022e8:	2201      	movs	r2, #1
 80022ea:	401a      	ands	r2, r3
 80022ec:	697b      	ldr	r3, [r7, #20]
 80022ee:	409a      	lsls	r2, r3
 80022f0:	0013      	movs	r3, r2
 80022f2:	693a      	ldr	r2, [r7, #16]
 80022f4:	4313      	orrs	r3, r2
 80022f6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	693a      	ldr	r2, [r7, #16]
 80022fc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	2203      	movs	r2, #3
 8002304:	4013      	ands	r3, r2
 8002306:	2b03      	cmp	r3, #3
 8002308:	d017      	beq.n	800233a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	68db      	ldr	r3, [r3, #12]
 800230e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	005b      	lsls	r3, r3, #1
 8002314:	2203      	movs	r2, #3
 8002316:	409a      	lsls	r2, r3
 8002318:	0013      	movs	r3, r2
 800231a:	43da      	mvns	r2, r3
 800231c:	693b      	ldr	r3, [r7, #16]
 800231e:	4013      	ands	r3, r2
 8002320:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	689a      	ldr	r2, [r3, #8]
 8002326:	697b      	ldr	r3, [r7, #20]
 8002328:	005b      	lsls	r3, r3, #1
 800232a:	409a      	lsls	r2, r3
 800232c:	0013      	movs	r3, r2
 800232e:	693a      	ldr	r2, [r7, #16]
 8002330:	4313      	orrs	r3, r2
 8002332:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	693a      	ldr	r2, [r7, #16]
 8002338:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	2203      	movs	r2, #3
 8002340:	4013      	ands	r3, r2
 8002342:	2b02      	cmp	r3, #2
 8002344:	d123      	bne.n	800238e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002346:	697b      	ldr	r3, [r7, #20]
 8002348:	08da      	lsrs	r2, r3, #3
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	3208      	adds	r2, #8
 800234e:	0092      	lsls	r2, r2, #2
 8002350:	58d3      	ldr	r3, [r2, r3]
 8002352:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002354:	697b      	ldr	r3, [r7, #20]
 8002356:	2207      	movs	r2, #7
 8002358:	4013      	ands	r3, r2
 800235a:	009b      	lsls	r3, r3, #2
 800235c:	220f      	movs	r2, #15
 800235e:	409a      	lsls	r2, r3
 8002360:	0013      	movs	r3, r2
 8002362:	43da      	mvns	r2, r3
 8002364:	693b      	ldr	r3, [r7, #16]
 8002366:	4013      	ands	r3, r2
 8002368:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	691a      	ldr	r2, [r3, #16]
 800236e:	697b      	ldr	r3, [r7, #20]
 8002370:	2107      	movs	r1, #7
 8002372:	400b      	ands	r3, r1
 8002374:	009b      	lsls	r3, r3, #2
 8002376:	409a      	lsls	r2, r3
 8002378:	0013      	movs	r3, r2
 800237a:	693a      	ldr	r2, [r7, #16]
 800237c:	4313      	orrs	r3, r2
 800237e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	08da      	lsrs	r2, r3, #3
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	3208      	adds	r2, #8
 8002388:	0092      	lsls	r2, r2, #2
 800238a:	6939      	ldr	r1, [r7, #16]
 800238c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	005b      	lsls	r3, r3, #1
 8002398:	2203      	movs	r2, #3
 800239a:	409a      	lsls	r2, r3
 800239c:	0013      	movs	r3, r2
 800239e:	43da      	mvns	r2, r3
 80023a0:	693b      	ldr	r3, [r7, #16]
 80023a2:	4013      	ands	r3, r2
 80023a4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	2203      	movs	r2, #3
 80023ac:	401a      	ands	r2, r3
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	005b      	lsls	r3, r3, #1
 80023b2:	409a      	lsls	r2, r3
 80023b4:	0013      	movs	r3, r2
 80023b6:	693a      	ldr	r2, [r7, #16]
 80023b8:	4313      	orrs	r3, r2
 80023ba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	693a      	ldr	r2, [r7, #16]
 80023c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	685a      	ldr	r2, [r3, #4]
 80023c6:	23c0      	movs	r3, #192	@ 0xc0
 80023c8:	029b      	lsls	r3, r3, #10
 80023ca:	4013      	ands	r3, r2
 80023cc:	d100      	bne.n	80023d0 <HAL_GPIO_Init+0x174>
 80023ce:	e092      	b.n	80024f6 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80023d0:	4a50      	ldr	r2, [pc, #320]	@ (8002514 <HAL_GPIO_Init+0x2b8>)
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	089b      	lsrs	r3, r3, #2
 80023d6:	3318      	adds	r3, #24
 80023d8:	009b      	lsls	r3, r3, #2
 80023da:	589b      	ldr	r3, [r3, r2]
 80023dc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80023de:	697b      	ldr	r3, [r7, #20]
 80023e0:	2203      	movs	r2, #3
 80023e2:	4013      	ands	r3, r2
 80023e4:	00db      	lsls	r3, r3, #3
 80023e6:	220f      	movs	r2, #15
 80023e8:	409a      	lsls	r2, r3
 80023ea:	0013      	movs	r3, r2
 80023ec:	43da      	mvns	r2, r3
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	4013      	ands	r3, r2
 80023f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80023f4:	687a      	ldr	r2, [r7, #4]
 80023f6:	23a0      	movs	r3, #160	@ 0xa0
 80023f8:	05db      	lsls	r3, r3, #23
 80023fa:	429a      	cmp	r2, r3
 80023fc:	d013      	beq.n	8002426 <HAL_GPIO_Init+0x1ca>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	4a45      	ldr	r2, [pc, #276]	@ (8002518 <HAL_GPIO_Init+0x2bc>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d00d      	beq.n	8002422 <HAL_GPIO_Init+0x1c6>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	4a44      	ldr	r2, [pc, #272]	@ (800251c <HAL_GPIO_Init+0x2c0>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d007      	beq.n	800241e <HAL_GPIO_Init+0x1c2>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	4a43      	ldr	r2, [pc, #268]	@ (8002520 <HAL_GPIO_Init+0x2c4>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d101      	bne.n	800241a <HAL_GPIO_Init+0x1be>
 8002416:	2303      	movs	r3, #3
 8002418:	e006      	b.n	8002428 <HAL_GPIO_Init+0x1cc>
 800241a:	2305      	movs	r3, #5
 800241c:	e004      	b.n	8002428 <HAL_GPIO_Init+0x1cc>
 800241e:	2302      	movs	r3, #2
 8002420:	e002      	b.n	8002428 <HAL_GPIO_Init+0x1cc>
 8002422:	2301      	movs	r3, #1
 8002424:	e000      	b.n	8002428 <HAL_GPIO_Init+0x1cc>
 8002426:	2300      	movs	r3, #0
 8002428:	697a      	ldr	r2, [r7, #20]
 800242a:	2103      	movs	r1, #3
 800242c:	400a      	ands	r2, r1
 800242e:	00d2      	lsls	r2, r2, #3
 8002430:	4093      	lsls	r3, r2
 8002432:	693a      	ldr	r2, [r7, #16]
 8002434:	4313      	orrs	r3, r2
 8002436:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8002438:	4936      	ldr	r1, [pc, #216]	@ (8002514 <HAL_GPIO_Init+0x2b8>)
 800243a:	697b      	ldr	r3, [r7, #20]
 800243c:	089b      	lsrs	r3, r3, #2
 800243e:	3318      	adds	r3, #24
 8002440:	009b      	lsls	r3, r3, #2
 8002442:	693a      	ldr	r2, [r7, #16]
 8002444:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002446:	4b33      	ldr	r3, [pc, #204]	@ (8002514 <HAL_GPIO_Init+0x2b8>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	43da      	mvns	r2, r3
 8002450:	693b      	ldr	r3, [r7, #16]
 8002452:	4013      	ands	r3, r2
 8002454:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	685a      	ldr	r2, [r3, #4]
 800245a:	2380      	movs	r3, #128	@ 0x80
 800245c:	035b      	lsls	r3, r3, #13
 800245e:	4013      	ands	r3, r2
 8002460:	d003      	beq.n	800246a <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8002462:	693a      	ldr	r2, [r7, #16]
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	4313      	orrs	r3, r2
 8002468:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800246a:	4b2a      	ldr	r3, [pc, #168]	@ (8002514 <HAL_GPIO_Init+0x2b8>)
 800246c:	693a      	ldr	r2, [r7, #16]
 800246e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8002470:	4b28      	ldr	r3, [pc, #160]	@ (8002514 <HAL_GPIO_Init+0x2b8>)
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	43da      	mvns	r2, r3
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	4013      	ands	r3, r2
 800247e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	685a      	ldr	r2, [r3, #4]
 8002484:	2380      	movs	r3, #128	@ 0x80
 8002486:	039b      	lsls	r3, r3, #14
 8002488:	4013      	ands	r3, r2
 800248a:	d003      	beq.n	8002494 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 800248c:	693a      	ldr	r2, [r7, #16]
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	4313      	orrs	r3, r2
 8002492:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002494:	4b1f      	ldr	r3, [pc, #124]	@ (8002514 <HAL_GPIO_Init+0x2b8>)
 8002496:	693a      	ldr	r2, [r7, #16]
 8002498:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800249a:	4a1e      	ldr	r2, [pc, #120]	@ (8002514 <HAL_GPIO_Init+0x2b8>)
 800249c:	2384      	movs	r3, #132	@ 0x84
 800249e:	58d3      	ldr	r3, [r2, r3]
 80024a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	43da      	mvns	r2, r3
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	4013      	ands	r3, r2
 80024aa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	685a      	ldr	r2, [r3, #4]
 80024b0:	2380      	movs	r3, #128	@ 0x80
 80024b2:	029b      	lsls	r3, r3, #10
 80024b4:	4013      	ands	r3, r2
 80024b6:	d003      	beq.n	80024c0 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80024b8:	693a      	ldr	r2, [r7, #16]
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	4313      	orrs	r3, r2
 80024be:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80024c0:	4914      	ldr	r1, [pc, #80]	@ (8002514 <HAL_GPIO_Init+0x2b8>)
 80024c2:	2284      	movs	r2, #132	@ 0x84
 80024c4:	693b      	ldr	r3, [r7, #16]
 80024c6:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80024c8:	4a12      	ldr	r2, [pc, #72]	@ (8002514 <HAL_GPIO_Init+0x2b8>)
 80024ca:	2380      	movs	r3, #128	@ 0x80
 80024cc:	58d3      	ldr	r3, [r2, r3]
 80024ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	43da      	mvns	r2, r3
 80024d4:	693b      	ldr	r3, [r7, #16]
 80024d6:	4013      	ands	r3, r2
 80024d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	685a      	ldr	r2, [r3, #4]
 80024de:	2380      	movs	r3, #128	@ 0x80
 80024e0:	025b      	lsls	r3, r3, #9
 80024e2:	4013      	ands	r3, r2
 80024e4:	d003      	beq.n	80024ee <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 80024e6:	693a      	ldr	r2, [r7, #16]
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	4313      	orrs	r3, r2
 80024ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80024ee:	4909      	ldr	r1, [pc, #36]	@ (8002514 <HAL_GPIO_Init+0x2b8>)
 80024f0:	2280      	movs	r2, #128	@ 0x80
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	3301      	adds	r3, #1
 80024fa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	681a      	ldr	r2, [r3, #0]
 8002500:	697b      	ldr	r3, [r7, #20]
 8002502:	40da      	lsrs	r2, r3
 8002504:	1e13      	subs	r3, r2, #0
 8002506:	d000      	beq.n	800250a <HAL_GPIO_Init+0x2ae>
 8002508:	e6b0      	b.n	800226c <HAL_GPIO_Init+0x10>
  }
}
 800250a:	46c0      	nop			@ (mov r8, r8)
 800250c:	46c0      	nop			@ (mov r8, r8)
 800250e:	46bd      	mov	sp, r7
 8002510:	b006      	add	sp, #24
 8002512:	bd80      	pop	{r7, pc}
 8002514:	40021800 	.word	0x40021800
 8002518:	50000400 	.word	0x50000400
 800251c:	50000800 	.word	0x50000800
 8002520:	50000c00 	.word	0x50000c00

08002524 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b082      	sub	sp, #8
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
 800252c:	0008      	movs	r0, r1
 800252e:	0011      	movs	r1, r2
 8002530:	1cbb      	adds	r3, r7, #2
 8002532:	1c02      	adds	r2, r0, #0
 8002534:	801a      	strh	r2, [r3, #0]
 8002536:	1c7b      	adds	r3, r7, #1
 8002538:	1c0a      	adds	r2, r1, #0
 800253a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800253c:	1c7b      	adds	r3, r7, #1
 800253e:	781b      	ldrb	r3, [r3, #0]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d004      	beq.n	800254e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002544:	1cbb      	adds	r3, r7, #2
 8002546:	881a      	ldrh	r2, [r3, #0]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800254c:	e003      	b.n	8002556 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800254e:	1cbb      	adds	r3, r7, #2
 8002550:	881a      	ldrh	r2, [r3, #0]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002556:	46c0      	nop			@ (mov r8, r8)
 8002558:	46bd      	mov	sp, r7
 800255a:	b002      	add	sp, #8
 800255c:	bd80      	pop	{r7, pc}

0800255e <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800255e:	b580      	push	{r7, lr}
 8002560:	b084      	sub	sp, #16
 8002562:	af00      	add	r7, sp, #0
 8002564:	6078      	str	r0, [r7, #4]
 8002566:	000a      	movs	r2, r1
 8002568:	1cbb      	adds	r3, r7, #2
 800256a:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	695b      	ldr	r3, [r3, #20]
 8002570:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002572:	1cbb      	adds	r3, r7, #2
 8002574:	881b      	ldrh	r3, [r3, #0]
 8002576:	68fa      	ldr	r2, [r7, #12]
 8002578:	4013      	ands	r3, r2
 800257a:	041a      	lsls	r2, r3, #16
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	43db      	mvns	r3, r3
 8002580:	1cb9      	adds	r1, r7, #2
 8002582:	8809      	ldrh	r1, [r1, #0]
 8002584:	400b      	ands	r3, r1
 8002586:	431a      	orrs	r2, r3
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	619a      	str	r2, [r3, #24]
}
 800258c:	46c0      	nop			@ (mov r8, r8)
 800258e:	46bd      	mov	sp, r7
 8002590:	b004      	add	sp, #16
 8002592:	bd80      	pop	{r7, pc}

08002594 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b082      	sub	sp, #8
 8002598:	af00      	add	r7, sp, #0
 800259a:	0002      	movs	r2, r0
 800259c:	1dbb      	adds	r3, r7, #6
 800259e:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 80025a0:	4b10      	ldr	r3, [pc, #64]	@ (80025e4 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80025a2:	68db      	ldr	r3, [r3, #12]
 80025a4:	1dba      	adds	r2, r7, #6
 80025a6:	8812      	ldrh	r2, [r2, #0]
 80025a8:	4013      	ands	r3, r2
 80025aa:	d008      	beq.n	80025be <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 80025ac:	4b0d      	ldr	r3, [pc, #52]	@ (80025e4 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80025ae:	1dba      	adds	r2, r7, #6
 80025b0:	8812      	ldrh	r2, [r2, #0]
 80025b2:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 80025b4:	1dbb      	adds	r3, r7, #6
 80025b6:	881b      	ldrh	r3, [r3, #0]
 80025b8:	0018      	movs	r0, r3
 80025ba:	f000 f815 	bl	80025e8 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 80025be:	4b09      	ldr	r3, [pc, #36]	@ (80025e4 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80025c0:	691b      	ldr	r3, [r3, #16]
 80025c2:	1dba      	adds	r2, r7, #6
 80025c4:	8812      	ldrh	r2, [r2, #0]
 80025c6:	4013      	ands	r3, r2
 80025c8:	d008      	beq.n	80025dc <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 80025ca:	4b06      	ldr	r3, [pc, #24]	@ (80025e4 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80025cc:	1dba      	adds	r2, r7, #6
 80025ce:	8812      	ldrh	r2, [r2, #0]
 80025d0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 80025d2:	1dbb      	adds	r3, r7, #6
 80025d4:	881b      	ldrh	r3, [r3, #0]
 80025d6:	0018      	movs	r0, r3
 80025d8:	f000 f810 	bl	80025fc <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 80025dc:	46c0      	nop			@ (mov r8, r8)
 80025de:	46bd      	mov	sp, r7
 80025e0:	b002      	add	sp, #8
 80025e2:	bd80      	pop	{r7, pc}
 80025e4:	40021800 	.word	0x40021800

080025e8 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b082      	sub	sp, #8
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	0002      	movs	r2, r0
 80025f0:	1dbb      	adds	r3, r7, #6
 80025f2:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 80025f4:	46c0      	nop			@ (mov r8, r8)
 80025f6:	46bd      	mov	sp, r7
 80025f8:	b002      	add	sp, #8
 80025fa:	bd80      	pop	{r7, pc}

080025fc <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b082      	sub	sp, #8
 8002600:	af00      	add	r7, sp, #0
 8002602:	0002      	movs	r2, r0
 8002604:	1dbb      	adds	r3, r7, #6
 8002606:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8002608:	46c0      	nop			@ (mov r8, r8)
 800260a:	46bd      	mov	sp, r7
 800260c:	b002      	add	sp, #8
 800260e:	bd80      	pop	{r7, pc}

08002610 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b082      	sub	sp, #8
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d101      	bne.n	8002622 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	e08f      	b.n	8002742 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2241      	movs	r2, #65	@ 0x41
 8002626:	5c9b      	ldrb	r3, [r3, r2]
 8002628:	b2db      	uxtb	r3, r3
 800262a:	2b00      	cmp	r3, #0
 800262c:	d107      	bne.n	800263e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2240      	movs	r2, #64	@ 0x40
 8002632:	2100      	movs	r1, #0
 8002634:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	0018      	movs	r0, r3
 800263a:	f7fe f947 	bl	80008cc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2241      	movs	r2, #65	@ 0x41
 8002642:	2124      	movs	r1, #36	@ 0x24
 8002644:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	681a      	ldr	r2, [r3, #0]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	2101      	movs	r1, #1
 8002652:	438a      	bics	r2, r1
 8002654:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	685a      	ldr	r2, [r3, #4]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	493b      	ldr	r1, [pc, #236]	@ (800274c <HAL_I2C_Init+0x13c>)
 8002660:	400a      	ands	r2, r1
 8002662:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	689a      	ldr	r2, [r3, #8]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4938      	ldr	r1, [pc, #224]	@ (8002750 <HAL_I2C_Init+0x140>)
 8002670:	400a      	ands	r2, r1
 8002672:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	68db      	ldr	r3, [r3, #12]
 8002678:	2b01      	cmp	r3, #1
 800267a:	d108      	bne.n	800268e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	689a      	ldr	r2, [r3, #8]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	2180      	movs	r1, #128	@ 0x80
 8002686:	0209      	lsls	r1, r1, #8
 8002688:	430a      	orrs	r2, r1
 800268a:	609a      	str	r2, [r3, #8]
 800268c:	e007      	b.n	800269e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	689a      	ldr	r2, [r3, #8]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	2184      	movs	r1, #132	@ 0x84
 8002698:	0209      	lsls	r1, r1, #8
 800269a:	430a      	orrs	r2, r1
 800269c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	68db      	ldr	r3, [r3, #12]
 80026a2:	2b02      	cmp	r3, #2
 80026a4:	d109      	bne.n	80026ba <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	685a      	ldr	r2, [r3, #4]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	2180      	movs	r1, #128	@ 0x80
 80026b2:	0109      	lsls	r1, r1, #4
 80026b4:	430a      	orrs	r2, r1
 80026b6:	605a      	str	r2, [r3, #4]
 80026b8:	e007      	b.n	80026ca <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	685a      	ldr	r2, [r3, #4]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4923      	ldr	r1, [pc, #140]	@ (8002754 <HAL_I2C_Init+0x144>)
 80026c6:	400a      	ands	r2, r1
 80026c8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	685a      	ldr	r2, [r3, #4]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4920      	ldr	r1, [pc, #128]	@ (8002758 <HAL_I2C_Init+0x148>)
 80026d6:	430a      	orrs	r2, r1
 80026d8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	68da      	ldr	r2, [r3, #12]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	491a      	ldr	r1, [pc, #104]	@ (8002750 <HAL_I2C_Init+0x140>)
 80026e6:	400a      	ands	r2, r1
 80026e8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	691a      	ldr	r2, [r3, #16]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	695b      	ldr	r3, [r3, #20]
 80026f2:	431a      	orrs	r2, r3
 80026f4:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	699b      	ldr	r3, [r3, #24]
 80026fa:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	430a      	orrs	r2, r1
 8002702:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	69d9      	ldr	r1, [r3, #28]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6a1a      	ldr	r2, [r3, #32]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	430a      	orrs	r2, r1
 8002712:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	681a      	ldr	r2, [r3, #0]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	2101      	movs	r1, #1
 8002720:	430a      	orrs	r2, r1
 8002722:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2200      	movs	r2, #0
 8002728:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2241      	movs	r2, #65	@ 0x41
 800272e:	2120      	movs	r1, #32
 8002730:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2200      	movs	r2, #0
 8002736:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2242      	movs	r2, #66	@ 0x42
 800273c:	2100      	movs	r1, #0
 800273e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002740:	2300      	movs	r3, #0
}
 8002742:	0018      	movs	r0, r3
 8002744:	46bd      	mov	sp, r7
 8002746:	b002      	add	sp, #8
 8002748:	bd80      	pop	{r7, pc}
 800274a:	46c0      	nop			@ (mov r8, r8)
 800274c:	f0ffffff 	.word	0xf0ffffff
 8002750:	ffff7fff 	.word	0xffff7fff
 8002754:	fffff7ff 	.word	0xfffff7ff
 8002758:	02008000 	.word	0x02008000

0800275c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b082      	sub	sp, #8
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
 8002764:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2241      	movs	r2, #65	@ 0x41
 800276a:	5c9b      	ldrb	r3, [r3, r2]
 800276c:	b2db      	uxtb	r3, r3
 800276e:	2b20      	cmp	r3, #32
 8002770:	d138      	bne.n	80027e4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2240      	movs	r2, #64	@ 0x40
 8002776:	5c9b      	ldrb	r3, [r3, r2]
 8002778:	2b01      	cmp	r3, #1
 800277a:	d101      	bne.n	8002780 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800277c:	2302      	movs	r3, #2
 800277e:	e032      	b.n	80027e6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2240      	movs	r2, #64	@ 0x40
 8002784:	2101      	movs	r1, #1
 8002786:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2241      	movs	r2, #65	@ 0x41
 800278c:	2124      	movs	r1, #36	@ 0x24
 800278e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	681a      	ldr	r2, [r3, #0]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	2101      	movs	r1, #1
 800279c:	438a      	bics	r2, r1
 800279e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	681a      	ldr	r2, [r3, #0]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4911      	ldr	r1, [pc, #68]	@ (80027f0 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80027ac:	400a      	ands	r2, r1
 80027ae:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	6819      	ldr	r1, [r3, #0]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	683a      	ldr	r2, [r7, #0]
 80027bc:	430a      	orrs	r2, r1
 80027be:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	681a      	ldr	r2, [r3, #0]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	2101      	movs	r1, #1
 80027cc:	430a      	orrs	r2, r1
 80027ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2241      	movs	r2, #65	@ 0x41
 80027d4:	2120      	movs	r1, #32
 80027d6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2240      	movs	r2, #64	@ 0x40
 80027dc:	2100      	movs	r1, #0
 80027de:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80027e0:	2300      	movs	r3, #0
 80027e2:	e000      	b.n	80027e6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80027e4:	2302      	movs	r3, #2
  }
}
 80027e6:	0018      	movs	r0, r3
 80027e8:	46bd      	mov	sp, r7
 80027ea:	b002      	add	sp, #8
 80027ec:	bd80      	pop	{r7, pc}
 80027ee:	46c0      	nop			@ (mov r8, r8)
 80027f0:	ffffefff 	.word	0xffffefff

080027f4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b084      	sub	sp, #16
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
 80027fc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2241      	movs	r2, #65	@ 0x41
 8002802:	5c9b      	ldrb	r3, [r3, r2]
 8002804:	b2db      	uxtb	r3, r3
 8002806:	2b20      	cmp	r3, #32
 8002808:	d139      	bne.n	800287e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2240      	movs	r2, #64	@ 0x40
 800280e:	5c9b      	ldrb	r3, [r3, r2]
 8002810:	2b01      	cmp	r3, #1
 8002812:	d101      	bne.n	8002818 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002814:	2302      	movs	r3, #2
 8002816:	e033      	b.n	8002880 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2240      	movs	r2, #64	@ 0x40
 800281c:	2101      	movs	r1, #1
 800281e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2241      	movs	r2, #65	@ 0x41
 8002824:	2124      	movs	r1, #36	@ 0x24
 8002826:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	681a      	ldr	r2, [r3, #0]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	2101      	movs	r1, #1
 8002834:	438a      	bics	r2, r1
 8002836:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	4a11      	ldr	r2, [pc, #68]	@ (8002888 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8002844:	4013      	ands	r3, r2
 8002846:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	021b      	lsls	r3, r3, #8
 800284c:	68fa      	ldr	r2, [r7, #12]
 800284e:	4313      	orrs	r3, r2
 8002850:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	68fa      	ldr	r2, [r7, #12]
 8002858:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	681a      	ldr	r2, [r3, #0]
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	2101      	movs	r1, #1
 8002866:	430a      	orrs	r2, r1
 8002868:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2241      	movs	r2, #65	@ 0x41
 800286e:	2120      	movs	r1, #32
 8002870:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2240      	movs	r2, #64	@ 0x40
 8002876:	2100      	movs	r1, #0
 8002878:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800287a:	2300      	movs	r3, #0
 800287c:	e000      	b.n	8002880 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800287e:	2302      	movs	r3, #2
  }
}
 8002880:	0018      	movs	r0, r3
 8002882:	46bd      	mov	sp, r7
 8002884:	b004      	add	sp, #16
 8002886:	bd80      	pop	{r7, pc}
 8002888:	fffff0ff 	.word	0xfffff0ff

0800288c <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b084      	sub	sp, #16
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d101      	bne.n	800289e <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	e03d      	b.n	800291a <HAL_IWDG_Init+0x8e>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a20      	ldr	r2, [pc, #128]	@ (8002924 <HAL_IWDG_Init+0x98>)
 80028a4:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4a1f      	ldr	r2, [pc, #124]	@ (8002928 <HAL_IWDG_Init+0x9c>)
 80028ac:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	687a      	ldr	r2, [r7, #4]
 80028b4:	6852      	ldr	r2, [r2, #4]
 80028b6:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	687a      	ldr	r2, [r7, #4]
 80028be:	6892      	ldr	r2, [r2, #8]
 80028c0:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 80028c2:	f7fe fde1 	bl	8001488 <HAL_GetTick>
 80028c6:	0003      	movs	r3, r0
 80028c8:	60fb      	str	r3, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80028ca:	e00e      	b.n	80028ea <HAL_IWDG_Init+0x5e>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 80028cc:	f7fe fddc 	bl	8001488 <HAL_GetTick>
 80028d0:	0002      	movs	r2, r0
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	1ad3      	subs	r3, r2, r3
 80028d6:	2b31      	cmp	r3, #49	@ 0x31
 80028d8:	d907      	bls.n	80028ea <HAL_IWDG_Init+0x5e>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	68db      	ldr	r3, [r3, #12]
 80028e0:	2207      	movs	r2, #7
 80028e2:	4013      	ands	r3, r2
 80028e4:	d001      	beq.n	80028ea <HAL_IWDG_Init+0x5e>
      {
        return HAL_TIMEOUT;
 80028e6:	2303      	movs	r3, #3
 80028e8:	e017      	b.n	800291a <HAL_IWDG_Init+0x8e>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	68db      	ldr	r3, [r3, #12]
 80028f0:	2207      	movs	r2, #7
 80028f2:	4013      	ands	r3, r2
 80028f4:	d1ea      	bne.n	80028cc <HAL_IWDG_Init+0x40>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	691a      	ldr	r2, [r3, #16]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	68db      	ldr	r3, [r3, #12]
 8002900:	429a      	cmp	r2, r3
 8002902:	d005      	beq.n	8002910 <HAL_IWDG_Init+0x84>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	687a      	ldr	r2, [r7, #4]
 800290a:	68d2      	ldr	r2, [r2, #12]
 800290c:	611a      	str	r2, [r3, #16]
 800290e:	e003      	b.n	8002918 <HAL_IWDG_Init+0x8c>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a05      	ldr	r2, [pc, #20]	@ (800292c <HAL_IWDG_Init+0xa0>)
 8002916:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002918:	2300      	movs	r3, #0
}
 800291a:	0018      	movs	r0, r3
 800291c:	46bd      	mov	sp, r7
 800291e:	b004      	add	sp, #16
 8002920:	bd80      	pop	{r7, pc}
 8002922:	46c0      	nop			@ (mov r8, r8)
 8002924:	0000cccc 	.word	0x0000cccc
 8002928:	00005555 	.word	0x00005555
 800292c:	0000aaaa 	.word	0x0000aaaa

08002930 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b082      	sub	sp, #8
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a03      	ldr	r2, [pc, #12]	@ (800294c <HAL_IWDG_Refresh+0x1c>)
 800293e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002940:	2300      	movs	r3, #0
}
 8002942:	0018      	movs	r0, r3
 8002944:	46bd      	mov	sp, r7
 8002946:	b002      	add	sp, #8
 8002948:	bd80      	pop	{r7, pc}
 800294a:	46c0      	nop			@ (mov r8, r8)
 800294c:	0000aaaa 	.word	0x0000aaaa

08002950 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b084      	sub	sp, #16
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002958:	4b19      	ldr	r3, [pc, #100]	@ (80029c0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a19      	ldr	r2, [pc, #100]	@ (80029c4 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800295e:	4013      	ands	r3, r2
 8002960:	0019      	movs	r1, r3
 8002962:	4b17      	ldr	r3, [pc, #92]	@ (80029c0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002964:	687a      	ldr	r2, [r7, #4]
 8002966:	430a      	orrs	r2, r1
 8002968:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800296a:	687a      	ldr	r2, [r7, #4]
 800296c:	2380      	movs	r3, #128	@ 0x80
 800296e:	009b      	lsls	r3, r3, #2
 8002970:	429a      	cmp	r2, r3
 8002972:	d11f      	bne.n	80029b4 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8002974:	4b14      	ldr	r3, [pc, #80]	@ (80029c8 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8002976:	681a      	ldr	r2, [r3, #0]
 8002978:	0013      	movs	r3, r2
 800297a:	005b      	lsls	r3, r3, #1
 800297c:	189b      	adds	r3, r3, r2
 800297e:	005b      	lsls	r3, r3, #1
 8002980:	4912      	ldr	r1, [pc, #72]	@ (80029cc <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8002982:	0018      	movs	r0, r3
 8002984:	f7fd fc18 	bl	80001b8 <__udivsi3>
 8002988:	0003      	movs	r3, r0
 800298a:	3301      	adds	r3, #1
 800298c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800298e:	e008      	b.n	80029a2 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d003      	beq.n	800299e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	3b01      	subs	r3, #1
 800299a:	60fb      	str	r3, [r7, #12]
 800299c:	e001      	b.n	80029a2 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800299e:	2303      	movs	r3, #3
 80029a0:	e009      	b.n	80029b6 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80029a2:	4b07      	ldr	r3, [pc, #28]	@ (80029c0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80029a4:	695a      	ldr	r2, [r3, #20]
 80029a6:	2380      	movs	r3, #128	@ 0x80
 80029a8:	00db      	lsls	r3, r3, #3
 80029aa:	401a      	ands	r2, r3
 80029ac:	2380      	movs	r3, #128	@ 0x80
 80029ae:	00db      	lsls	r3, r3, #3
 80029b0:	429a      	cmp	r2, r3
 80029b2:	d0ed      	beq.n	8002990 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80029b4:	2300      	movs	r3, #0
}
 80029b6:	0018      	movs	r0, r3
 80029b8:	46bd      	mov	sp, r7
 80029ba:	b004      	add	sp, #16
 80029bc:	bd80      	pop	{r7, pc}
 80029be:	46c0      	nop			@ (mov r8, r8)
 80029c0:	40007000 	.word	0x40007000
 80029c4:	fffff9ff 	.word	0xfffff9ff
 80029c8:	20000000 	.word	0x20000000
 80029cc:	000f4240 	.word	0x000f4240

080029d0 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80029d4:	4b03      	ldr	r3, [pc, #12]	@ (80029e4 <LL_RCC_GetAPB1Prescaler+0x14>)
 80029d6:	689a      	ldr	r2, [r3, #8]
 80029d8:	23e0      	movs	r3, #224	@ 0xe0
 80029da:	01db      	lsls	r3, r3, #7
 80029dc:	4013      	ands	r3, r2
}
 80029de:	0018      	movs	r0, r3
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd80      	pop	{r7, pc}
 80029e4:	40021000 	.word	0x40021000

080029e8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b088      	sub	sp, #32
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d101      	bne.n	80029fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
 80029f8:	e2f3      	b.n	8002fe2 <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	2201      	movs	r2, #1
 8002a00:	4013      	ands	r3, r2
 8002a02:	d100      	bne.n	8002a06 <HAL_RCC_OscConfig+0x1e>
 8002a04:	e07c      	b.n	8002b00 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a06:	4bc3      	ldr	r3, [pc, #780]	@ (8002d14 <HAL_RCC_OscConfig+0x32c>)
 8002a08:	689b      	ldr	r3, [r3, #8]
 8002a0a:	2238      	movs	r2, #56	@ 0x38
 8002a0c:	4013      	ands	r3, r2
 8002a0e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a10:	4bc0      	ldr	r3, [pc, #768]	@ (8002d14 <HAL_RCC_OscConfig+0x32c>)
 8002a12:	68db      	ldr	r3, [r3, #12]
 8002a14:	2203      	movs	r2, #3
 8002a16:	4013      	ands	r3, r2
 8002a18:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8002a1a:	69bb      	ldr	r3, [r7, #24]
 8002a1c:	2b10      	cmp	r3, #16
 8002a1e:	d102      	bne.n	8002a26 <HAL_RCC_OscConfig+0x3e>
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	2b03      	cmp	r3, #3
 8002a24:	d002      	beq.n	8002a2c <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8002a26:	69bb      	ldr	r3, [r7, #24]
 8002a28:	2b08      	cmp	r3, #8
 8002a2a:	d10b      	bne.n	8002a44 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a2c:	4bb9      	ldr	r3, [pc, #740]	@ (8002d14 <HAL_RCC_OscConfig+0x32c>)
 8002a2e:	681a      	ldr	r2, [r3, #0]
 8002a30:	2380      	movs	r3, #128	@ 0x80
 8002a32:	029b      	lsls	r3, r3, #10
 8002a34:	4013      	ands	r3, r2
 8002a36:	d062      	beq.n	8002afe <HAL_RCC_OscConfig+0x116>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d15e      	bne.n	8002afe <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8002a40:	2301      	movs	r3, #1
 8002a42:	e2ce      	b.n	8002fe2 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	685a      	ldr	r2, [r3, #4]
 8002a48:	2380      	movs	r3, #128	@ 0x80
 8002a4a:	025b      	lsls	r3, r3, #9
 8002a4c:	429a      	cmp	r2, r3
 8002a4e:	d107      	bne.n	8002a60 <HAL_RCC_OscConfig+0x78>
 8002a50:	4bb0      	ldr	r3, [pc, #704]	@ (8002d14 <HAL_RCC_OscConfig+0x32c>)
 8002a52:	681a      	ldr	r2, [r3, #0]
 8002a54:	4baf      	ldr	r3, [pc, #700]	@ (8002d14 <HAL_RCC_OscConfig+0x32c>)
 8002a56:	2180      	movs	r1, #128	@ 0x80
 8002a58:	0249      	lsls	r1, r1, #9
 8002a5a:	430a      	orrs	r2, r1
 8002a5c:	601a      	str	r2, [r3, #0]
 8002a5e:	e020      	b.n	8002aa2 <HAL_RCC_OscConfig+0xba>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	685a      	ldr	r2, [r3, #4]
 8002a64:	23a0      	movs	r3, #160	@ 0xa0
 8002a66:	02db      	lsls	r3, r3, #11
 8002a68:	429a      	cmp	r2, r3
 8002a6a:	d10e      	bne.n	8002a8a <HAL_RCC_OscConfig+0xa2>
 8002a6c:	4ba9      	ldr	r3, [pc, #676]	@ (8002d14 <HAL_RCC_OscConfig+0x32c>)
 8002a6e:	681a      	ldr	r2, [r3, #0]
 8002a70:	4ba8      	ldr	r3, [pc, #672]	@ (8002d14 <HAL_RCC_OscConfig+0x32c>)
 8002a72:	2180      	movs	r1, #128	@ 0x80
 8002a74:	02c9      	lsls	r1, r1, #11
 8002a76:	430a      	orrs	r2, r1
 8002a78:	601a      	str	r2, [r3, #0]
 8002a7a:	4ba6      	ldr	r3, [pc, #664]	@ (8002d14 <HAL_RCC_OscConfig+0x32c>)
 8002a7c:	681a      	ldr	r2, [r3, #0]
 8002a7e:	4ba5      	ldr	r3, [pc, #660]	@ (8002d14 <HAL_RCC_OscConfig+0x32c>)
 8002a80:	2180      	movs	r1, #128	@ 0x80
 8002a82:	0249      	lsls	r1, r1, #9
 8002a84:	430a      	orrs	r2, r1
 8002a86:	601a      	str	r2, [r3, #0]
 8002a88:	e00b      	b.n	8002aa2 <HAL_RCC_OscConfig+0xba>
 8002a8a:	4ba2      	ldr	r3, [pc, #648]	@ (8002d14 <HAL_RCC_OscConfig+0x32c>)
 8002a8c:	681a      	ldr	r2, [r3, #0]
 8002a8e:	4ba1      	ldr	r3, [pc, #644]	@ (8002d14 <HAL_RCC_OscConfig+0x32c>)
 8002a90:	49a1      	ldr	r1, [pc, #644]	@ (8002d18 <HAL_RCC_OscConfig+0x330>)
 8002a92:	400a      	ands	r2, r1
 8002a94:	601a      	str	r2, [r3, #0]
 8002a96:	4b9f      	ldr	r3, [pc, #636]	@ (8002d14 <HAL_RCC_OscConfig+0x32c>)
 8002a98:	681a      	ldr	r2, [r3, #0]
 8002a9a:	4b9e      	ldr	r3, [pc, #632]	@ (8002d14 <HAL_RCC_OscConfig+0x32c>)
 8002a9c:	499f      	ldr	r1, [pc, #636]	@ (8002d1c <HAL_RCC_OscConfig+0x334>)
 8002a9e:	400a      	ands	r2, r1
 8002aa0:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d014      	beq.n	8002ad4 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aaa:	f7fe fced 	bl	8001488 <HAL_GetTick>
 8002aae:	0003      	movs	r3, r0
 8002ab0:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ab2:	e008      	b.n	8002ac6 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ab4:	f7fe fce8 	bl	8001488 <HAL_GetTick>
 8002ab8:	0002      	movs	r2, r0
 8002aba:	693b      	ldr	r3, [r7, #16]
 8002abc:	1ad3      	subs	r3, r2, r3
 8002abe:	2b64      	cmp	r3, #100	@ 0x64
 8002ac0:	d901      	bls.n	8002ac6 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8002ac2:	2303      	movs	r3, #3
 8002ac4:	e28d      	b.n	8002fe2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ac6:	4b93      	ldr	r3, [pc, #588]	@ (8002d14 <HAL_RCC_OscConfig+0x32c>)
 8002ac8:	681a      	ldr	r2, [r3, #0]
 8002aca:	2380      	movs	r3, #128	@ 0x80
 8002acc:	029b      	lsls	r3, r3, #10
 8002ace:	4013      	ands	r3, r2
 8002ad0:	d0f0      	beq.n	8002ab4 <HAL_RCC_OscConfig+0xcc>
 8002ad2:	e015      	b.n	8002b00 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ad4:	f7fe fcd8 	bl	8001488 <HAL_GetTick>
 8002ad8:	0003      	movs	r3, r0
 8002ada:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002adc:	e008      	b.n	8002af0 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ade:	f7fe fcd3 	bl	8001488 <HAL_GetTick>
 8002ae2:	0002      	movs	r2, r0
 8002ae4:	693b      	ldr	r3, [r7, #16]
 8002ae6:	1ad3      	subs	r3, r2, r3
 8002ae8:	2b64      	cmp	r3, #100	@ 0x64
 8002aea:	d901      	bls.n	8002af0 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002aec:	2303      	movs	r3, #3
 8002aee:	e278      	b.n	8002fe2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002af0:	4b88      	ldr	r3, [pc, #544]	@ (8002d14 <HAL_RCC_OscConfig+0x32c>)
 8002af2:	681a      	ldr	r2, [r3, #0]
 8002af4:	2380      	movs	r3, #128	@ 0x80
 8002af6:	029b      	lsls	r3, r3, #10
 8002af8:	4013      	ands	r3, r2
 8002afa:	d1f0      	bne.n	8002ade <HAL_RCC_OscConfig+0xf6>
 8002afc:	e000      	b.n	8002b00 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002afe:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	2202      	movs	r2, #2
 8002b06:	4013      	ands	r3, r2
 8002b08:	d100      	bne.n	8002b0c <HAL_RCC_OscConfig+0x124>
 8002b0a:	e099      	b.n	8002c40 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b0c:	4b81      	ldr	r3, [pc, #516]	@ (8002d14 <HAL_RCC_OscConfig+0x32c>)
 8002b0e:	689b      	ldr	r3, [r3, #8]
 8002b10:	2238      	movs	r2, #56	@ 0x38
 8002b12:	4013      	ands	r3, r2
 8002b14:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b16:	4b7f      	ldr	r3, [pc, #508]	@ (8002d14 <HAL_RCC_OscConfig+0x32c>)
 8002b18:	68db      	ldr	r3, [r3, #12]
 8002b1a:	2203      	movs	r2, #3
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8002b20:	69bb      	ldr	r3, [r7, #24]
 8002b22:	2b10      	cmp	r3, #16
 8002b24:	d102      	bne.n	8002b2c <HAL_RCC_OscConfig+0x144>
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	2b02      	cmp	r3, #2
 8002b2a:	d002      	beq.n	8002b32 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8002b2c:	69bb      	ldr	r3, [r7, #24]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d135      	bne.n	8002b9e <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b32:	4b78      	ldr	r3, [pc, #480]	@ (8002d14 <HAL_RCC_OscConfig+0x32c>)
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	2380      	movs	r3, #128	@ 0x80
 8002b38:	00db      	lsls	r3, r3, #3
 8002b3a:	4013      	ands	r3, r2
 8002b3c:	d005      	beq.n	8002b4a <HAL_RCC_OscConfig+0x162>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	68db      	ldr	r3, [r3, #12]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d101      	bne.n	8002b4a <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	e24b      	b.n	8002fe2 <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b4a:	4b72      	ldr	r3, [pc, #456]	@ (8002d14 <HAL_RCC_OscConfig+0x32c>)
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	4a74      	ldr	r2, [pc, #464]	@ (8002d20 <HAL_RCC_OscConfig+0x338>)
 8002b50:	4013      	ands	r3, r2
 8002b52:	0019      	movs	r1, r3
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	695b      	ldr	r3, [r3, #20]
 8002b58:	021a      	lsls	r2, r3, #8
 8002b5a:	4b6e      	ldr	r3, [pc, #440]	@ (8002d14 <HAL_RCC_OscConfig+0x32c>)
 8002b5c:	430a      	orrs	r2, r1
 8002b5e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b60:	69bb      	ldr	r3, [r7, #24]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d112      	bne.n	8002b8c <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002b66:	4b6b      	ldr	r3, [pc, #428]	@ (8002d14 <HAL_RCC_OscConfig+0x32c>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a6e      	ldr	r2, [pc, #440]	@ (8002d24 <HAL_RCC_OscConfig+0x33c>)
 8002b6c:	4013      	ands	r3, r2
 8002b6e:	0019      	movs	r1, r3
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	691a      	ldr	r2, [r3, #16]
 8002b74:	4b67      	ldr	r3, [pc, #412]	@ (8002d14 <HAL_RCC_OscConfig+0x32c>)
 8002b76:	430a      	orrs	r2, r1
 8002b78:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8002b7a:	4b66      	ldr	r3, [pc, #408]	@ (8002d14 <HAL_RCC_OscConfig+0x32c>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	0adb      	lsrs	r3, r3, #11
 8002b80:	2207      	movs	r2, #7
 8002b82:	4013      	ands	r3, r2
 8002b84:	4a68      	ldr	r2, [pc, #416]	@ (8002d28 <HAL_RCC_OscConfig+0x340>)
 8002b86:	40da      	lsrs	r2, r3
 8002b88:	4b68      	ldr	r3, [pc, #416]	@ (8002d2c <HAL_RCC_OscConfig+0x344>)
 8002b8a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002b8c:	4b68      	ldr	r3, [pc, #416]	@ (8002d30 <HAL_RCC_OscConfig+0x348>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	0018      	movs	r0, r3
 8002b92:	f7fe fc1d 	bl	80013d0 <HAL_InitTick>
 8002b96:	1e03      	subs	r3, r0, #0
 8002b98:	d051      	beq.n	8002c3e <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	e221      	b.n	8002fe2 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	68db      	ldr	r3, [r3, #12]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d030      	beq.n	8002c08 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002ba6:	4b5b      	ldr	r3, [pc, #364]	@ (8002d14 <HAL_RCC_OscConfig+0x32c>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a5e      	ldr	r2, [pc, #376]	@ (8002d24 <HAL_RCC_OscConfig+0x33c>)
 8002bac:	4013      	ands	r3, r2
 8002bae:	0019      	movs	r1, r3
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	691a      	ldr	r2, [r3, #16]
 8002bb4:	4b57      	ldr	r3, [pc, #348]	@ (8002d14 <HAL_RCC_OscConfig+0x32c>)
 8002bb6:	430a      	orrs	r2, r1
 8002bb8:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8002bba:	4b56      	ldr	r3, [pc, #344]	@ (8002d14 <HAL_RCC_OscConfig+0x32c>)
 8002bbc:	681a      	ldr	r2, [r3, #0]
 8002bbe:	4b55      	ldr	r3, [pc, #340]	@ (8002d14 <HAL_RCC_OscConfig+0x32c>)
 8002bc0:	2180      	movs	r1, #128	@ 0x80
 8002bc2:	0049      	lsls	r1, r1, #1
 8002bc4:	430a      	orrs	r2, r1
 8002bc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bc8:	f7fe fc5e 	bl	8001488 <HAL_GetTick>
 8002bcc:	0003      	movs	r3, r0
 8002bce:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002bd0:	e008      	b.n	8002be4 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bd2:	f7fe fc59 	bl	8001488 <HAL_GetTick>
 8002bd6:	0002      	movs	r2, r0
 8002bd8:	693b      	ldr	r3, [r7, #16]
 8002bda:	1ad3      	subs	r3, r2, r3
 8002bdc:	2b02      	cmp	r3, #2
 8002bde:	d901      	bls.n	8002be4 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002be0:	2303      	movs	r3, #3
 8002be2:	e1fe      	b.n	8002fe2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002be4:	4b4b      	ldr	r3, [pc, #300]	@ (8002d14 <HAL_RCC_OscConfig+0x32c>)
 8002be6:	681a      	ldr	r2, [r3, #0]
 8002be8:	2380      	movs	r3, #128	@ 0x80
 8002bea:	00db      	lsls	r3, r3, #3
 8002bec:	4013      	ands	r3, r2
 8002bee:	d0f0      	beq.n	8002bd2 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bf0:	4b48      	ldr	r3, [pc, #288]	@ (8002d14 <HAL_RCC_OscConfig+0x32c>)
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	4a4a      	ldr	r2, [pc, #296]	@ (8002d20 <HAL_RCC_OscConfig+0x338>)
 8002bf6:	4013      	ands	r3, r2
 8002bf8:	0019      	movs	r1, r3
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	695b      	ldr	r3, [r3, #20]
 8002bfe:	021a      	lsls	r2, r3, #8
 8002c00:	4b44      	ldr	r3, [pc, #272]	@ (8002d14 <HAL_RCC_OscConfig+0x32c>)
 8002c02:	430a      	orrs	r2, r1
 8002c04:	605a      	str	r2, [r3, #4]
 8002c06:	e01b      	b.n	8002c40 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8002c08:	4b42      	ldr	r3, [pc, #264]	@ (8002d14 <HAL_RCC_OscConfig+0x32c>)
 8002c0a:	681a      	ldr	r2, [r3, #0]
 8002c0c:	4b41      	ldr	r3, [pc, #260]	@ (8002d14 <HAL_RCC_OscConfig+0x32c>)
 8002c0e:	4949      	ldr	r1, [pc, #292]	@ (8002d34 <HAL_RCC_OscConfig+0x34c>)
 8002c10:	400a      	ands	r2, r1
 8002c12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c14:	f7fe fc38 	bl	8001488 <HAL_GetTick>
 8002c18:	0003      	movs	r3, r0
 8002c1a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c1c:	e008      	b.n	8002c30 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c1e:	f7fe fc33 	bl	8001488 <HAL_GetTick>
 8002c22:	0002      	movs	r2, r0
 8002c24:	693b      	ldr	r3, [r7, #16]
 8002c26:	1ad3      	subs	r3, r2, r3
 8002c28:	2b02      	cmp	r3, #2
 8002c2a:	d901      	bls.n	8002c30 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002c2c:	2303      	movs	r3, #3
 8002c2e:	e1d8      	b.n	8002fe2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c30:	4b38      	ldr	r3, [pc, #224]	@ (8002d14 <HAL_RCC_OscConfig+0x32c>)
 8002c32:	681a      	ldr	r2, [r3, #0]
 8002c34:	2380      	movs	r3, #128	@ 0x80
 8002c36:	00db      	lsls	r3, r3, #3
 8002c38:	4013      	ands	r3, r2
 8002c3a:	d1f0      	bne.n	8002c1e <HAL_RCC_OscConfig+0x236>
 8002c3c:	e000      	b.n	8002c40 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c3e:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	2208      	movs	r2, #8
 8002c46:	4013      	ands	r3, r2
 8002c48:	d047      	beq.n	8002cda <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002c4a:	4b32      	ldr	r3, [pc, #200]	@ (8002d14 <HAL_RCC_OscConfig+0x32c>)
 8002c4c:	689b      	ldr	r3, [r3, #8]
 8002c4e:	2238      	movs	r2, #56	@ 0x38
 8002c50:	4013      	ands	r3, r2
 8002c52:	2b18      	cmp	r3, #24
 8002c54:	d10a      	bne.n	8002c6c <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8002c56:	4b2f      	ldr	r3, [pc, #188]	@ (8002d14 <HAL_RCC_OscConfig+0x32c>)
 8002c58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c5a:	2202      	movs	r2, #2
 8002c5c:	4013      	ands	r3, r2
 8002c5e:	d03c      	beq.n	8002cda <HAL_RCC_OscConfig+0x2f2>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	699b      	ldr	r3, [r3, #24]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d138      	bne.n	8002cda <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	e1ba      	b.n	8002fe2 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	699b      	ldr	r3, [r3, #24]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d019      	beq.n	8002ca8 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8002c74:	4b27      	ldr	r3, [pc, #156]	@ (8002d14 <HAL_RCC_OscConfig+0x32c>)
 8002c76:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002c78:	4b26      	ldr	r3, [pc, #152]	@ (8002d14 <HAL_RCC_OscConfig+0x32c>)
 8002c7a:	2101      	movs	r1, #1
 8002c7c:	430a      	orrs	r2, r1
 8002c7e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c80:	f7fe fc02 	bl	8001488 <HAL_GetTick>
 8002c84:	0003      	movs	r3, r0
 8002c86:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002c88:	e008      	b.n	8002c9c <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c8a:	f7fe fbfd 	bl	8001488 <HAL_GetTick>
 8002c8e:	0002      	movs	r2, r0
 8002c90:	693b      	ldr	r3, [r7, #16]
 8002c92:	1ad3      	subs	r3, r2, r3
 8002c94:	2b02      	cmp	r3, #2
 8002c96:	d901      	bls.n	8002c9c <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8002c98:	2303      	movs	r3, #3
 8002c9a:	e1a2      	b.n	8002fe2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002c9c:	4b1d      	ldr	r3, [pc, #116]	@ (8002d14 <HAL_RCC_OscConfig+0x32c>)
 8002c9e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ca0:	2202      	movs	r2, #2
 8002ca2:	4013      	ands	r3, r2
 8002ca4:	d0f1      	beq.n	8002c8a <HAL_RCC_OscConfig+0x2a2>
 8002ca6:	e018      	b.n	8002cda <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8002ca8:	4b1a      	ldr	r3, [pc, #104]	@ (8002d14 <HAL_RCC_OscConfig+0x32c>)
 8002caa:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002cac:	4b19      	ldr	r3, [pc, #100]	@ (8002d14 <HAL_RCC_OscConfig+0x32c>)
 8002cae:	2101      	movs	r1, #1
 8002cb0:	438a      	bics	r2, r1
 8002cb2:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cb4:	f7fe fbe8 	bl	8001488 <HAL_GetTick>
 8002cb8:	0003      	movs	r3, r0
 8002cba:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002cbc:	e008      	b.n	8002cd0 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cbe:	f7fe fbe3 	bl	8001488 <HAL_GetTick>
 8002cc2:	0002      	movs	r2, r0
 8002cc4:	693b      	ldr	r3, [r7, #16]
 8002cc6:	1ad3      	subs	r3, r2, r3
 8002cc8:	2b02      	cmp	r3, #2
 8002cca:	d901      	bls.n	8002cd0 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8002ccc:	2303      	movs	r3, #3
 8002cce:	e188      	b.n	8002fe2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002cd0:	4b10      	ldr	r3, [pc, #64]	@ (8002d14 <HAL_RCC_OscConfig+0x32c>)
 8002cd2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002cd4:	2202      	movs	r2, #2
 8002cd6:	4013      	ands	r3, r2
 8002cd8:	d1f1      	bne.n	8002cbe <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	2204      	movs	r2, #4
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	d100      	bne.n	8002ce6 <HAL_RCC_OscConfig+0x2fe>
 8002ce4:	e0c6      	b.n	8002e74 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ce6:	231f      	movs	r3, #31
 8002ce8:	18fb      	adds	r3, r7, r3
 8002cea:	2200      	movs	r2, #0
 8002cec:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002cee:	4b09      	ldr	r3, [pc, #36]	@ (8002d14 <HAL_RCC_OscConfig+0x32c>)
 8002cf0:	689b      	ldr	r3, [r3, #8]
 8002cf2:	2238      	movs	r2, #56	@ 0x38
 8002cf4:	4013      	ands	r3, r2
 8002cf6:	2b20      	cmp	r3, #32
 8002cf8:	d11e      	bne.n	8002d38 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8002cfa:	4b06      	ldr	r3, [pc, #24]	@ (8002d14 <HAL_RCC_OscConfig+0x32c>)
 8002cfc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cfe:	2202      	movs	r2, #2
 8002d00:	4013      	ands	r3, r2
 8002d02:	d100      	bne.n	8002d06 <HAL_RCC_OscConfig+0x31e>
 8002d04:	e0b6      	b.n	8002e74 <HAL_RCC_OscConfig+0x48c>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	689b      	ldr	r3, [r3, #8]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d000      	beq.n	8002d10 <HAL_RCC_OscConfig+0x328>
 8002d0e:	e0b1      	b.n	8002e74 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8002d10:	2301      	movs	r3, #1
 8002d12:	e166      	b.n	8002fe2 <HAL_RCC_OscConfig+0x5fa>
 8002d14:	40021000 	.word	0x40021000
 8002d18:	fffeffff 	.word	0xfffeffff
 8002d1c:	fffbffff 	.word	0xfffbffff
 8002d20:	ffff80ff 	.word	0xffff80ff
 8002d24:	ffffc7ff 	.word	0xffffc7ff
 8002d28:	00f42400 	.word	0x00f42400
 8002d2c:	20000000 	.word	0x20000000
 8002d30:	20000004 	.word	0x20000004
 8002d34:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002d38:	4bac      	ldr	r3, [pc, #688]	@ (8002fec <HAL_RCC_OscConfig+0x604>)
 8002d3a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002d3c:	2380      	movs	r3, #128	@ 0x80
 8002d3e:	055b      	lsls	r3, r3, #21
 8002d40:	4013      	ands	r3, r2
 8002d42:	d101      	bne.n	8002d48 <HAL_RCC_OscConfig+0x360>
 8002d44:	2301      	movs	r3, #1
 8002d46:	e000      	b.n	8002d4a <HAL_RCC_OscConfig+0x362>
 8002d48:	2300      	movs	r3, #0
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d011      	beq.n	8002d72 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8002d4e:	4ba7      	ldr	r3, [pc, #668]	@ (8002fec <HAL_RCC_OscConfig+0x604>)
 8002d50:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002d52:	4ba6      	ldr	r3, [pc, #664]	@ (8002fec <HAL_RCC_OscConfig+0x604>)
 8002d54:	2180      	movs	r1, #128	@ 0x80
 8002d56:	0549      	lsls	r1, r1, #21
 8002d58:	430a      	orrs	r2, r1
 8002d5a:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002d5c:	4ba3      	ldr	r3, [pc, #652]	@ (8002fec <HAL_RCC_OscConfig+0x604>)
 8002d5e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002d60:	2380      	movs	r3, #128	@ 0x80
 8002d62:	055b      	lsls	r3, r3, #21
 8002d64:	4013      	ands	r3, r2
 8002d66:	60fb      	str	r3, [r7, #12]
 8002d68:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8002d6a:	231f      	movs	r3, #31
 8002d6c:	18fb      	adds	r3, r7, r3
 8002d6e:	2201      	movs	r2, #1
 8002d70:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d72:	4b9f      	ldr	r3, [pc, #636]	@ (8002ff0 <HAL_RCC_OscConfig+0x608>)
 8002d74:	681a      	ldr	r2, [r3, #0]
 8002d76:	2380      	movs	r3, #128	@ 0x80
 8002d78:	005b      	lsls	r3, r3, #1
 8002d7a:	4013      	ands	r3, r2
 8002d7c:	d11a      	bne.n	8002db4 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d7e:	4b9c      	ldr	r3, [pc, #624]	@ (8002ff0 <HAL_RCC_OscConfig+0x608>)
 8002d80:	681a      	ldr	r2, [r3, #0]
 8002d82:	4b9b      	ldr	r3, [pc, #620]	@ (8002ff0 <HAL_RCC_OscConfig+0x608>)
 8002d84:	2180      	movs	r1, #128	@ 0x80
 8002d86:	0049      	lsls	r1, r1, #1
 8002d88:	430a      	orrs	r2, r1
 8002d8a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8002d8c:	f7fe fb7c 	bl	8001488 <HAL_GetTick>
 8002d90:	0003      	movs	r3, r0
 8002d92:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d94:	e008      	b.n	8002da8 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d96:	f7fe fb77 	bl	8001488 <HAL_GetTick>
 8002d9a:	0002      	movs	r2, r0
 8002d9c:	693b      	ldr	r3, [r7, #16]
 8002d9e:	1ad3      	subs	r3, r2, r3
 8002da0:	2b02      	cmp	r3, #2
 8002da2:	d901      	bls.n	8002da8 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8002da4:	2303      	movs	r3, #3
 8002da6:	e11c      	b.n	8002fe2 <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002da8:	4b91      	ldr	r3, [pc, #580]	@ (8002ff0 <HAL_RCC_OscConfig+0x608>)
 8002daa:	681a      	ldr	r2, [r3, #0]
 8002dac:	2380      	movs	r3, #128	@ 0x80
 8002dae:	005b      	lsls	r3, r3, #1
 8002db0:	4013      	ands	r3, r2
 8002db2:	d0f0      	beq.n	8002d96 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	689b      	ldr	r3, [r3, #8]
 8002db8:	2b01      	cmp	r3, #1
 8002dba:	d106      	bne.n	8002dca <HAL_RCC_OscConfig+0x3e2>
 8002dbc:	4b8b      	ldr	r3, [pc, #556]	@ (8002fec <HAL_RCC_OscConfig+0x604>)
 8002dbe:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002dc0:	4b8a      	ldr	r3, [pc, #552]	@ (8002fec <HAL_RCC_OscConfig+0x604>)
 8002dc2:	2101      	movs	r1, #1
 8002dc4:	430a      	orrs	r2, r1
 8002dc6:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002dc8:	e01c      	b.n	8002e04 <HAL_RCC_OscConfig+0x41c>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	689b      	ldr	r3, [r3, #8]
 8002dce:	2b05      	cmp	r3, #5
 8002dd0:	d10c      	bne.n	8002dec <HAL_RCC_OscConfig+0x404>
 8002dd2:	4b86      	ldr	r3, [pc, #536]	@ (8002fec <HAL_RCC_OscConfig+0x604>)
 8002dd4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002dd6:	4b85      	ldr	r3, [pc, #532]	@ (8002fec <HAL_RCC_OscConfig+0x604>)
 8002dd8:	2104      	movs	r1, #4
 8002dda:	430a      	orrs	r2, r1
 8002ddc:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002dde:	4b83      	ldr	r3, [pc, #524]	@ (8002fec <HAL_RCC_OscConfig+0x604>)
 8002de0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002de2:	4b82      	ldr	r3, [pc, #520]	@ (8002fec <HAL_RCC_OscConfig+0x604>)
 8002de4:	2101      	movs	r1, #1
 8002de6:	430a      	orrs	r2, r1
 8002de8:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002dea:	e00b      	b.n	8002e04 <HAL_RCC_OscConfig+0x41c>
 8002dec:	4b7f      	ldr	r3, [pc, #508]	@ (8002fec <HAL_RCC_OscConfig+0x604>)
 8002dee:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002df0:	4b7e      	ldr	r3, [pc, #504]	@ (8002fec <HAL_RCC_OscConfig+0x604>)
 8002df2:	2101      	movs	r1, #1
 8002df4:	438a      	bics	r2, r1
 8002df6:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002df8:	4b7c      	ldr	r3, [pc, #496]	@ (8002fec <HAL_RCC_OscConfig+0x604>)
 8002dfa:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002dfc:	4b7b      	ldr	r3, [pc, #492]	@ (8002fec <HAL_RCC_OscConfig+0x604>)
 8002dfe:	2104      	movs	r1, #4
 8002e00:	438a      	bics	r2, r1
 8002e02:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d014      	beq.n	8002e36 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e0c:	f7fe fb3c 	bl	8001488 <HAL_GetTick>
 8002e10:	0003      	movs	r3, r0
 8002e12:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e14:	e009      	b.n	8002e2a <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e16:	f7fe fb37 	bl	8001488 <HAL_GetTick>
 8002e1a:	0002      	movs	r2, r0
 8002e1c:	693b      	ldr	r3, [r7, #16]
 8002e1e:	1ad3      	subs	r3, r2, r3
 8002e20:	4a74      	ldr	r2, [pc, #464]	@ (8002ff4 <HAL_RCC_OscConfig+0x60c>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d901      	bls.n	8002e2a <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8002e26:	2303      	movs	r3, #3
 8002e28:	e0db      	b.n	8002fe2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e2a:	4b70      	ldr	r3, [pc, #448]	@ (8002fec <HAL_RCC_OscConfig+0x604>)
 8002e2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e2e:	2202      	movs	r2, #2
 8002e30:	4013      	ands	r3, r2
 8002e32:	d0f0      	beq.n	8002e16 <HAL_RCC_OscConfig+0x42e>
 8002e34:	e013      	b.n	8002e5e <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e36:	f7fe fb27 	bl	8001488 <HAL_GetTick>
 8002e3a:	0003      	movs	r3, r0
 8002e3c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002e3e:	e009      	b.n	8002e54 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e40:	f7fe fb22 	bl	8001488 <HAL_GetTick>
 8002e44:	0002      	movs	r2, r0
 8002e46:	693b      	ldr	r3, [r7, #16]
 8002e48:	1ad3      	subs	r3, r2, r3
 8002e4a:	4a6a      	ldr	r2, [pc, #424]	@ (8002ff4 <HAL_RCC_OscConfig+0x60c>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d901      	bls.n	8002e54 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8002e50:	2303      	movs	r3, #3
 8002e52:	e0c6      	b.n	8002fe2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002e54:	4b65      	ldr	r3, [pc, #404]	@ (8002fec <HAL_RCC_OscConfig+0x604>)
 8002e56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e58:	2202      	movs	r2, #2
 8002e5a:	4013      	ands	r3, r2
 8002e5c:	d1f0      	bne.n	8002e40 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002e5e:	231f      	movs	r3, #31
 8002e60:	18fb      	adds	r3, r7, r3
 8002e62:	781b      	ldrb	r3, [r3, #0]
 8002e64:	2b01      	cmp	r3, #1
 8002e66:	d105      	bne.n	8002e74 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002e68:	4b60      	ldr	r3, [pc, #384]	@ (8002fec <HAL_RCC_OscConfig+0x604>)
 8002e6a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002e6c:	4b5f      	ldr	r3, [pc, #380]	@ (8002fec <HAL_RCC_OscConfig+0x604>)
 8002e6e:	4962      	ldr	r1, [pc, #392]	@ (8002ff8 <HAL_RCC_OscConfig+0x610>)
 8002e70:	400a      	ands	r2, r1
 8002e72:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	69db      	ldr	r3, [r3, #28]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d100      	bne.n	8002e7e <HAL_RCC_OscConfig+0x496>
 8002e7c:	e0b0      	b.n	8002fe0 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e7e:	4b5b      	ldr	r3, [pc, #364]	@ (8002fec <HAL_RCC_OscConfig+0x604>)
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	2238      	movs	r2, #56	@ 0x38
 8002e84:	4013      	ands	r3, r2
 8002e86:	2b10      	cmp	r3, #16
 8002e88:	d100      	bne.n	8002e8c <HAL_RCC_OscConfig+0x4a4>
 8002e8a:	e078      	b.n	8002f7e <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	69db      	ldr	r3, [r3, #28]
 8002e90:	2b02      	cmp	r3, #2
 8002e92:	d153      	bne.n	8002f3c <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e94:	4b55      	ldr	r3, [pc, #340]	@ (8002fec <HAL_RCC_OscConfig+0x604>)
 8002e96:	681a      	ldr	r2, [r3, #0]
 8002e98:	4b54      	ldr	r3, [pc, #336]	@ (8002fec <HAL_RCC_OscConfig+0x604>)
 8002e9a:	4958      	ldr	r1, [pc, #352]	@ (8002ffc <HAL_RCC_OscConfig+0x614>)
 8002e9c:	400a      	ands	r2, r1
 8002e9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ea0:	f7fe faf2 	bl	8001488 <HAL_GetTick>
 8002ea4:	0003      	movs	r3, r0
 8002ea6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ea8:	e008      	b.n	8002ebc <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002eaa:	f7fe faed 	bl	8001488 <HAL_GetTick>
 8002eae:	0002      	movs	r2, r0
 8002eb0:	693b      	ldr	r3, [r7, #16]
 8002eb2:	1ad3      	subs	r3, r2, r3
 8002eb4:	2b02      	cmp	r3, #2
 8002eb6:	d901      	bls.n	8002ebc <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8002eb8:	2303      	movs	r3, #3
 8002eba:	e092      	b.n	8002fe2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ebc:	4b4b      	ldr	r3, [pc, #300]	@ (8002fec <HAL_RCC_OscConfig+0x604>)
 8002ebe:	681a      	ldr	r2, [r3, #0]
 8002ec0:	2380      	movs	r3, #128	@ 0x80
 8002ec2:	049b      	lsls	r3, r3, #18
 8002ec4:	4013      	ands	r3, r2
 8002ec6:	d1f0      	bne.n	8002eaa <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ec8:	4b48      	ldr	r3, [pc, #288]	@ (8002fec <HAL_RCC_OscConfig+0x604>)
 8002eca:	68db      	ldr	r3, [r3, #12]
 8002ecc:	4a4c      	ldr	r2, [pc, #304]	@ (8003000 <HAL_RCC_OscConfig+0x618>)
 8002ece:	4013      	ands	r3, r2
 8002ed0:	0019      	movs	r1, r3
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6a1a      	ldr	r2, [r3, #32]
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eda:	431a      	orrs	r2, r3
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ee0:	021b      	lsls	r3, r3, #8
 8002ee2:	431a      	orrs	r2, r3
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ee8:	431a      	orrs	r2, r3
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eee:	431a      	orrs	r2, r3
 8002ef0:	4b3e      	ldr	r3, [pc, #248]	@ (8002fec <HAL_RCC_OscConfig+0x604>)
 8002ef2:	430a      	orrs	r2, r1
 8002ef4:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ef6:	4b3d      	ldr	r3, [pc, #244]	@ (8002fec <HAL_RCC_OscConfig+0x604>)
 8002ef8:	681a      	ldr	r2, [r3, #0]
 8002efa:	4b3c      	ldr	r3, [pc, #240]	@ (8002fec <HAL_RCC_OscConfig+0x604>)
 8002efc:	2180      	movs	r1, #128	@ 0x80
 8002efe:	0449      	lsls	r1, r1, #17
 8002f00:	430a      	orrs	r2, r1
 8002f02:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002f04:	4b39      	ldr	r3, [pc, #228]	@ (8002fec <HAL_RCC_OscConfig+0x604>)
 8002f06:	68da      	ldr	r2, [r3, #12]
 8002f08:	4b38      	ldr	r3, [pc, #224]	@ (8002fec <HAL_RCC_OscConfig+0x604>)
 8002f0a:	2180      	movs	r1, #128	@ 0x80
 8002f0c:	0549      	lsls	r1, r1, #21
 8002f0e:	430a      	orrs	r2, r1
 8002f10:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f12:	f7fe fab9 	bl	8001488 <HAL_GetTick>
 8002f16:	0003      	movs	r3, r0
 8002f18:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f1a:	e008      	b.n	8002f2e <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f1c:	f7fe fab4 	bl	8001488 <HAL_GetTick>
 8002f20:	0002      	movs	r2, r0
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	1ad3      	subs	r3, r2, r3
 8002f26:	2b02      	cmp	r3, #2
 8002f28:	d901      	bls.n	8002f2e <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8002f2a:	2303      	movs	r3, #3
 8002f2c:	e059      	b.n	8002fe2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f2e:	4b2f      	ldr	r3, [pc, #188]	@ (8002fec <HAL_RCC_OscConfig+0x604>)
 8002f30:	681a      	ldr	r2, [r3, #0]
 8002f32:	2380      	movs	r3, #128	@ 0x80
 8002f34:	049b      	lsls	r3, r3, #18
 8002f36:	4013      	ands	r3, r2
 8002f38:	d0f0      	beq.n	8002f1c <HAL_RCC_OscConfig+0x534>
 8002f3a:	e051      	b.n	8002fe0 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f3c:	4b2b      	ldr	r3, [pc, #172]	@ (8002fec <HAL_RCC_OscConfig+0x604>)
 8002f3e:	681a      	ldr	r2, [r3, #0]
 8002f40:	4b2a      	ldr	r3, [pc, #168]	@ (8002fec <HAL_RCC_OscConfig+0x604>)
 8002f42:	492e      	ldr	r1, [pc, #184]	@ (8002ffc <HAL_RCC_OscConfig+0x614>)
 8002f44:	400a      	ands	r2, r1
 8002f46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f48:	f7fe fa9e 	bl	8001488 <HAL_GetTick>
 8002f4c:	0003      	movs	r3, r0
 8002f4e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f50:	e008      	b.n	8002f64 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f52:	f7fe fa99 	bl	8001488 <HAL_GetTick>
 8002f56:	0002      	movs	r2, r0
 8002f58:	693b      	ldr	r3, [r7, #16]
 8002f5a:	1ad3      	subs	r3, r2, r3
 8002f5c:	2b02      	cmp	r3, #2
 8002f5e:	d901      	bls.n	8002f64 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8002f60:	2303      	movs	r3, #3
 8002f62:	e03e      	b.n	8002fe2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f64:	4b21      	ldr	r3, [pc, #132]	@ (8002fec <HAL_RCC_OscConfig+0x604>)
 8002f66:	681a      	ldr	r2, [r3, #0]
 8002f68:	2380      	movs	r3, #128	@ 0x80
 8002f6a:	049b      	lsls	r3, r3, #18
 8002f6c:	4013      	ands	r3, r2
 8002f6e:	d1f0      	bne.n	8002f52 <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8002f70:	4b1e      	ldr	r3, [pc, #120]	@ (8002fec <HAL_RCC_OscConfig+0x604>)
 8002f72:	68da      	ldr	r2, [r3, #12]
 8002f74:	4b1d      	ldr	r3, [pc, #116]	@ (8002fec <HAL_RCC_OscConfig+0x604>)
 8002f76:	4923      	ldr	r1, [pc, #140]	@ (8003004 <HAL_RCC_OscConfig+0x61c>)
 8002f78:	400a      	ands	r2, r1
 8002f7a:	60da      	str	r2, [r3, #12]
 8002f7c:	e030      	b.n	8002fe0 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	69db      	ldr	r3, [r3, #28]
 8002f82:	2b01      	cmp	r3, #1
 8002f84:	d101      	bne.n	8002f8a <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8002f86:	2301      	movs	r3, #1
 8002f88:	e02b      	b.n	8002fe2 <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8002f8a:	4b18      	ldr	r3, [pc, #96]	@ (8002fec <HAL_RCC_OscConfig+0x604>)
 8002f8c:	68db      	ldr	r3, [r3, #12]
 8002f8e:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f90:	697b      	ldr	r3, [r7, #20]
 8002f92:	2203      	movs	r2, #3
 8002f94:	401a      	ands	r2, r3
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6a1b      	ldr	r3, [r3, #32]
 8002f9a:	429a      	cmp	r2, r3
 8002f9c:	d11e      	bne.n	8002fdc <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002f9e:	697b      	ldr	r3, [r7, #20]
 8002fa0:	2270      	movs	r2, #112	@ 0x70
 8002fa2:	401a      	ands	r2, r3
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fa8:	429a      	cmp	r2, r3
 8002faa:	d117      	bne.n	8002fdc <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002fac:	697a      	ldr	r2, [r7, #20]
 8002fae:	23fe      	movs	r3, #254	@ 0xfe
 8002fb0:	01db      	lsls	r3, r3, #7
 8002fb2:	401a      	ands	r2, r3
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fb8:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002fba:	429a      	cmp	r2, r3
 8002fbc:	d10e      	bne.n	8002fdc <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002fbe:	697a      	ldr	r2, [r7, #20]
 8002fc0:	23f8      	movs	r3, #248	@ 0xf8
 8002fc2:	039b      	lsls	r3, r3, #14
 8002fc4:	401a      	ands	r2, r3
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002fca:	429a      	cmp	r2, r3
 8002fcc:	d106      	bne.n	8002fdc <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002fce:	697b      	ldr	r3, [r7, #20]
 8002fd0:	0f5b      	lsrs	r3, r3, #29
 8002fd2:	075a      	lsls	r2, r3, #29
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002fd8:	429a      	cmp	r2, r3
 8002fda:	d001      	beq.n	8002fe0 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	e000      	b.n	8002fe2 <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8002fe0:	2300      	movs	r3, #0
}
 8002fe2:	0018      	movs	r0, r3
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	b008      	add	sp, #32
 8002fe8:	bd80      	pop	{r7, pc}
 8002fea:	46c0      	nop			@ (mov r8, r8)
 8002fec:	40021000 	.word	0x40021000
 8002ff0:	40007000 	.word	0x40007000
 8002ff4:	00001388 	.word	0x00001388
 8002ff8:	efffffff 	.word	0xefffffff
 8002ffc:	feffffff 	.word	0xfeffffff
 8003000:	1fc1808c 	.word	0x1fc1808c
 8003004:	effefffc 	.word	0xeffefffc

08003008 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b084      	sub	sp, #16
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
 8003010:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d101      	bne.n	800301c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003018:	2301      	movs	r3, #1
 800301a:	e0e9      	b.n	80031f0 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800301c:	4b76      	ldr	r3, [pc, #472]	@ (80031f8 <HAL_RCC_ClockConfig+0x1f0>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	2207      	movs	r2, #7
 8003022:	4013      	ands	r3, r2
 8003024:	683a      	ldr	r2, [r7, #0]
 8003026:	429a      	cmp	r2, r3
 8003028:	d91e      	bls.n	8003068 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800302a:	4b73      	ldr	r3, [pc, #460]	@ (80031f8 <HAL_RCC_ClockConfig+0x1f0>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	2207      	movs	r2, #7
 8003030:	4393      	bics	r3, r2
 8003032:	0019      	movs	r1, r3
 8003034:	4b70      	ldr	r3, [pc, #448]	@ (80031f8 <HAL_RCC_ClockConfig+0x1f0>)
 8003036:	683a      	ldr	r2, [r7, #0]
 8003038:	430a      	orrs	r2, r1
 800303a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800303c:	f7fe fa24 	bl	8001488 <HAL_GetTick>
 8003040:	0003      	movs	r3, r0
 8003042:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003044:	e009      	b.n	800305a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003046:	f7fe fa1f 	bl	8001488 <HAL_GetTick>
 800304a:	0002      	movs	r2, r0
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	1ad3      	subs	r3, r2, r3
 8003050:	4a6a      	ldr	r2, [pc, #424]	@ (80031fc <HAL_RCC_ClockConfig+0x1f4>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d901      	bls.n	800305a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8003056:	2303      	movs	r3, #3
 8003058:	e0ca      	b.n	80031f0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800305a:	4b67      	ldr	r3, [pc, #412]	@ (80031f8 <HAL_RCC_ClockConfig+0x1f0>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	2207      	movs	r2, #7
 8003060:	4013      	ands	r3, r2
 8003062:	683a      	ldr	r2, [r7, #0]
 8003064:	429a      	cmp	r2, r3
 8003066:	d1ee      	bne.n	8003046 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	2202      	movs	r2, #2
 800306e:	4013      	ands	r3, r2
 8003070:	d015      	beq.n	800309e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	2204      	movs	r2, #4
 8003078:	4013      	ands	r3, r2
 800307a:	d006      	beq.n	800308a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800307c:	4b60      	ldr	r3, [pc, #384]	@ (8003200 <HAL_RCC_ClockConfig+0x1f8>)
 800307e:	689a      	ldr	r2, [r3, #8]
 8003080:	4b5f      	ldr	r3, [pc, #380]	@ (8003200 <HAL_RCC_ClockConfig+0x1f8>)
 8003082:	21e0      	movs	r1, #224	@ 0xe0
 8003084:	01c9      	lsls	r1, r1, #7
 8003086:	430a      	orrs	r2, r1
 8003088:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800308a:	4b5d      	ldr	r3, [pc, #372]	@ (8003200 <HAL_RCC_ClockConfig+0x1f8>)
 800308c:	689b      	ldr	r3, [r3, #8]
 800308e:	4a5d      	ldr	r2, [pc, #372]	@ (8003204 <HAL_RCC_ClockConfig+0x1fc>)
 8003090:	4013      	ands	r3, r2
 8003092:	0019      	movs	r1, r3
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	689a      	ldr	r2, [r3, #8]
 8003098:	4b59      	ldr	r3, [pc, #356]	@ (8003200 <HAL_RCC_ClockConfig+0x1f8>)
 800309a:	430a      	orrs	r2, r1
 800309c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	2201      	movs	r2, #1
 80030a4:	4013      	ands	r3, r2
 80030a6:	d057      	beq.n	8003158 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	2b01      	cmp	r3, #1
 80030ae:	d107      	bne.n	80030c0 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80030b0:	4b53      	ldr	r3, [pc, #332]	@ (8003200 <HAL_RCC_ClockConfig+0x1f8>)
 80030b2:	681a      	ldr	r2, [r3, #0]
 80030b4:	2380      	movs	r3, #128	@ 0x80
 80030b6:	029b      	lsls	r3, r3, #10
 80030b8:	4013      	ands	r3, r2
 80030ba:	d12b      	bne.n	8003114 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80030bc:	2301      	movs	r3, #1
 80030be:	e097      	b.n	80031f0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	2b02      	cmp	r3, #2
 80030c6:	d107      	bne.n	80030d8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030c8:	4b4d      	ldr	r3, [pc, #308]	@ (8003200 <HAL_RCC_ClockConfig+0x1f8>)
 80030ca:	681a      	ldr	r2, [r3, #0]
 80030cc:	2380      	movs	r3, #128	@ 0x80
 80030ce:	049b      	lsls	r3, r3, #18
 80030d0:	4013      	ands	r3, r2
 80030d2:	d11f      	bne.n	8003114 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80030d4:	2301      	movs	r3, #1
 80030d6:	e08b      	b.n	80031f0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d107      	bne.n	80030f0 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80030e0:	4b47      	ldr	r3, [pc, #284]	@ (8003200 <HAL_RCC_ClockConfig+0x1f8>)
 80030e2:	681a      	ldr	r2, [r3, #0]
 80030e4:	2380      	movs	r3, #128	@ 0x80
 80030e6:	00db      	lsls	r3, r3, #3
 80030e8:	4013      	ands	r3, r2
 80030ea:	d113      	bne.n	8003114 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80030ec:	2301      	movs	r3, #1
 80030ee:	e07f      	b.n	80031f0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	2b03      	cmp	r3, #3
 80030f6:	d106      	bne.n	8003106 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80030f8:	4b41      	ldr	r3, [pc, #260]	@ (8003200 <HAL_RCC_ClockConfig+0x1f8>)
 80030fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030fc:	2202      	movs	r2, #2
 80030fe:	4013      	ands	r3, r2
 8003100:	d108      	bne.n	8003114 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003102:	2301      	movs	r3, #1
 8003104:	e074      	b.n	80031f0 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003106:	4b3e      	ldr	r3, [pc, #248]	@ (8003200 <HAL_RCC_ClockConfig+0x1f8>)
 8003108:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800310a:	2202      	movs	r2, #2
 800310c:	4013      	ands	r3, r2
 800310e:	d101      	bne.n	8003114 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003110:	2301      	movs	r3, #1
 8003112:	e06d      	b.n	80031f0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003114:	4b3a      	ldr	r3, [pc, #232]	@ (8003200 <HAL_RCC_ClockConfig+0x1f8>)
 8003116:	689b      	ldr	r3, [r3, #8]
 8003118:	2207      	movs	r2, #7
 800311a:	4393      	bics	r3, r2
 800311c:	0019      	movs	r1, r3
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	685a      	ldr	r2, [r3, #4]
 8003122:	4b37      	ldr	r3, [pc, #220]	@ (8003200 <HAL_RCC_ClockConfig+0x1f8>)
 8003124:	430a      	orrs	r2, r1
 8003126:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003128:	f7fe f9ae 	bl	8001488 <HAL_GetTick>
 800312c:	0003      	movs	r3, r0
 800312e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003130:	e009      	b.n	8003146 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003132:	f7fe f9a9 	bl	8001488 <HAL_GetTick>
 8003136:	0002      	movs	r2, r0
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	1ad3      	subs	r3, r2, r3
 800313c:	4a2f      	ldr	r2, [pc, #188]	@ (80031fc <HAL_RCC_ClockConfig+0x1f4>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d901      	bls.n	8003146 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8003142:	2303      	movs	r3, #3
 8003144:	e054      	b.n	80031f0 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003146:	4b2e      	ldr	r3, [pc, #184]	@ (8003200 <HAL_RCC_ClockConfig+0x1f8>)
 8003148:	689b      	ldr	r3, [r3, #8]
 800314a:	2238      	movs	r2, #56	@ 0x38
 800314c:	401a      	ands	r2, r3
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	00db      	lsls	r3, r3, #3
 8003154:	429a      	cmp	r2, r3
 8003156:	d1ec      	bne.n	8003132 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003158:	4b27      	ldr	r3, [pc, #156]	@ (80031f8 <HAL_RCC_ClockConfig+0x1f0>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	2207      	movs	r2, #7
 800315e:	4013      	ands	r3, r2
 8003160:	683a      	ldr	r2, [r7, #0]
 8003162:	429a      	cmp	r2, r3
 8003164:	d21e      	bcs.n	80031a4 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003166:	4b24      	ldr	r3, [pc, #144]	@ (80031f8 <HAL_RCC_ClockConfig+0x1f0>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	2207      	movs	r2, #7
 800316c:	4393      	bics	r3, r2
 800316e:	0019      	movs	r1, r3
 8003170:	4b21      	ldr	r3, [pc, #132]	@ (80031f8 <HAL_RCC_ClockConfig+0x1f0>)
 8003172:	683a      	ldr	r2, [r7, #0]
 8003174:	430a      	orrs	r2, r1
 8003176:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003178:	f7fe f986 	bl	8001488 <HAL_GetTick>
 800317c:	0003      	movs	r3, r0
 800317e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003180:	e009      	b.n	8003196 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003182:	f7fe f981 	bl	8001488 <HAL_GetTick>
 8003186:	0002      	movs	r2, r0
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	1ad3      	subs	r3, r2, r3
 800318c:	4a1b      	ldr	r2, [pc, #108]	@ (80031fc <HAL_RCC_ClockConfig+0x1f4>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d901      	bls.n	8003196 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8003192:	2303      	movs	r3, #3
 8003194:	e02c      	b.n	80031f0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003196:	4b18      	ldr	r3, [pc, #96]	@ (80031f8 <HAL_RCC_ClockConfig+0x1f0>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	2207      	movs	r2, #7
 800319c:	4013      	ands	r3, r2
 800319e:	683a      	ldr	r2, [r7, #0]
 80031a0:	429a      	cmp	r2, r3
 80031a2:	d1ee      	bne.n	8003182 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	2204      	movs	r2, #4
 80031aa:	4013      	ands	r3, r2
 80031ac:	d009      	beq.n	80031c2 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80031ae:	4b14      	ldr	r3, [pc, #80]	@ (8003200 <HAL_RCC_ClockConfig+0x1f8>)
 80031b0:	689b      	ldr	r3, [r3, #8]
 80031b2:	4a15      	ldr	r2, [pc, #84]	@ (8003208 <HAL_RCC_ClockConfig+0x200>)
 80031b4:	4013      	ands	r3, r2
 80031b6:	0019      	movs	r1, r3
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	68da      	ldr	r2, [r3, #12]
 80031bc:	4b10      	ldr	r3, [pc, #64]	@ (8003200 <HAL_RCC_ClockConfig+0x1f8>)
 80031be:	430a      	orrs	r2, r1
 80031c0:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80031c2:	f000 f829 	bl	8003218 <HAL_RCC_GetSysClockFreq>
 80031c6:	0001      	movs	r1, r0
 80031c8:	4b0d      	ldr	r3, [pc, #52]	@ (8003200 <HAL_RCC_ClockConfig+0x1f8>)
 80031ca:	689b      	ldr	r3, [r3, #8]
 80031cc:	0a1b      	lsrs	r3, r3, #8
 80031ce:	220f      	movs	r2, #15
 80031d0:	401a      	ands	r2, r3
 80031d2:	4b0e      	ldr	r3, [pc, #56]	@ (800320c <HAL_RCC_ClockConfig+0x204>)
 80031d4:	0092      	lsls	r2, r2, #2
 80031d6:	58d3      	ldr	r3, [r2, r3]
 80031d8:	221f      	movs	r2, #31
 80031da:	4013      	ands	r3, r2
 80031dc:	000a      	movs	r2, r1
 80031de:	40da      	lsrs	r2, r3
 80031e0:	4b0b      	ldr	r3, [pc, #44]	@ (8003210 <HAL_RCC_ClockConfig+0x208>)
 80031e2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80031e4:	4b0b      	ldr	r3, [pc, #44]	@ (8003214 <HAL_RCC_ClockConfig+0x20c>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	0018      	movs	r0, r3
 80031ea:	f7fe f8f1 	bl	80013d0 <HAL_InitTick>
 80031ee:	0003      	movs	r3, r0
}
 80031f0:	0018      	movs	r0, r3
 80031f2:	46bd      	mov	sp, r7
 80031f4:	b004      	add	sp, #16
 80031f6:	bd80      	pop	{r7, pc}
 80031f8:	40022000 	.word	0x40022000
 80031fc:	00001388 	.word	0x00001388
 8003200:	40021000 	.word	0x40021000
 8003204:	fffff0ff 	.word	0xfffff0ff
 8003208:	ffff8fff 	.word	0xffff8fff
 800320c:	0800559c 	.word	0x0800559c
 8003210:	20000000 	.word	0x20000000
 8003214:	20000004 	.word	0x20000004

08003218 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b086      	sub	sp, #24
 800321c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800321e:	4b3c      	ldr	r3, [pc, #240]	@ (8003310 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003220:	689b      	ldr	r3, [r3, #8]
 8003222:	2238      	movs	r2, #56	@ 0x38
 8003224:	4013      	ands	r3, r2
 8003226:	d10f      	bne.n	8003248 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8003228:	4b39      	ldr	r3, [pc, #228]	@ (8003310 <HAL_RCC_GetSysClockFreq+0xf8>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	0adb      	lsrs	r3, r3, #11
 800322e:	2207      	movs	r2, #7
 8003230:	4013      	ands	r3, r2
 8003232:	2201      	movs	r2, #1
 8003234:	409a      	lsls	r2, r3
 8003236:	0013      	movs	r3, r2
 8003238:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800323a:	6839      	ldr	r1, [r7, #0]
 800323c:	4835      	ldr	r0, [pc, #212]	@ (8003314 <HAL_RCC_GetSysClockFreq+0xfc>)
 800323e:	f7fc ffbb 	bl	80001b8 <__udivsi3>
 8003242:	0003      	movs	r3, r0
 8003244:	613b      	str	r3, [r7, #16]
 8003246:	e05d      	b.n	8003304 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003248:	4b31      	ldr	r3, [pc, #196]	@ (8003310 <HAL_RCC_GetSysClockFreq+0xf8>)
 800324a:	689b      	ldr	r3, [r3, #8]
 800324c:	2238      	movs	r2, #56	@ 0x38
 800324e:	4013      	ands	r3, r2
 8003250:	2b08      	cmp	r3, #8
 8003252:	d102      	bne.n	800325a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003254:	4b30      	ldr	r3, [pc, #192]	@ (8003318 <HAL_RCC_GetSysClockFreq+0x100>)
 8003256:	613b      	str	r3, [r7, #16]
 8003258:	e054      	b.n	8003304 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800325a:	4b2d      	ldr	r3, [pc, #180]	@ (8003310 <HAL_RCC_GetSysClockFreq+0xf8>)
 800325c:	689b      	ldr	r3, [r3, #8]
 800325e:	2238      	movs	r2, #56	@ 0x38
 8003260:	4013      	ands	r3, r2
 8003262:	2b10      	cmp	r3, #16
 8003264:	d138      	bne.n	80032d8 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8003266:	4b2a      	ldr	r3, [pc, #168]	@ (8003310 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003268:	68db      	ldr	r3, [r3, #12]
 800326a:	2203      	movs	r2, #3
 800326c:	4013      	ands	r3, r2
 800326e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003270:	4b27      	ldr	r3, [pc, #156]	@ (8003310 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003272:	68db      	ldr	r3, [r3, #12]
 8003274:	091b      	lsrs	r3, r3, #4
 8003276:	2207      	movs	r2, #7
 8003278:	4013      	ands	r3, r2
 800327a:	3301      	adds	r3, #1
 800327c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	2b03      	cmp	r3, #3
 8003282:	d10d      	bne.n	80032a0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003284:	68b9      	ldr	r1, [r7, #8]
 8003286:	4824      	ldr	r0, [pc, #144]	@ (8003318 <HAL_RCC_GetSysClockFreq+0x100>)
 8003288:	f7fc ff96 	bl	80001b8 <__udivsi3>
 800328c:	0003      	movs	r3, r0
 800328e:	0019      	movs	r1, r3
 8003290:	4b1f      	ldr	r3, [pc, #124]	@ (8003310 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003292:	68db      	ldr	r3, [r3, #12]
 8003294:	0a1b      	lsrs	r3, r3, #8
 8003296:	227f      	movs	r2, #127	@ 0x7f
 8003298:	4013      	ands	r3, r2
 800329a:	434b      	muls	r3, r1
 800329c:	617b      	str	r3, [r7, #20]
        break;
 800329e:	e00d      	b.n	80032bc <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80032a0:	68b9      	ldr	r1, [r7, #8]
 80032a2:	481c      	ldr	r0, [pc, #112]	@ (8003314 <HAL_RCC_GetSysClockFreq+0xfc>)
 80032a4:	f7fc ff88 	bl	80001b8 <__udivsi3>
 80032a8:	0003      	movs	r3, r0
 80032aa:	0019      	movs	r1, r3
 80032ac:	4b18      	ldr	r3, [pc, #96]	@ (8003310 <HAL_RCC_GetSysClockFreq+0xf8>)
 80032ae:	68db      	ldr	r3, [r3, #12]
 80032b0:	0a1b      	lsrs	r3, r3, #8
 80032b2:	227f      	movs	r2, #127	@ 0x7f
 80032b4:	4013      	ands	r3, r2
 80032b6:	434b      	muls	r3, r1
 80032b8:	617b      	str	r3, [r7, #20]
        break;
 80032ba:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80032bc:	4b14      	ldr	r3, [pc, #80]	@ (8003310 <HAL_RCC_GetSysClockFreq+0xf8>)
 80032be:	68db      	ldr	r3, [r3, #12]
 80032c0:	0f5b      	lsrs	r3, r3, #29
 80032c2:	2207      	movs	r2, #7
 80032c4:	4013      	ands	r3, r2
 80032c6:	3301      	adds	r3, #1
 80032c8:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80032ca:	6879      	ldr	r1, [r7, #4]
 80032cc:	6978      	ldr	r0, [r7, #20]
 80032ce:	f7fc ff73 	bl	80001b8 <__udivsi3>
 80032d2:	0003      	movs	r3, r0
 80032d4:	613b      	str	r3, [r7, #16]
 80032d6:	e015      	b.n	8003304 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80032d8:	4b0d      	ldr	r3, [pc, #52]	@ (8003310 <HAL_RCC_GetSysClockFreq+0xf8>)
 80032da:	689b      	ldr	r3, [r3, #8]
 80032dc:	2238      	movs	r2, #56	@ 0x38
 80032de:	4013      	ands	r3, r2
 80032e0:	2b20      	cmp	r3, #32
 80032e2:	d103      	bne.n	80032ec <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80032e4:	2380      	movs	r3, #128	@ 0x80
 80032e6:	021b      	lsls	r3, r3, #8
 80032e8:	613b      	str	r3, [r7, #16]
 80032ea:	e00b      	b.n	8003304 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80032ec:	4b08      	ldr	r3, [pc, #32]	@ (8003310 <HAL_RCC_GetSysClockFreq+0xf8>)
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	2238      	movs	r2, #56	@ 0x38
 80032f2:	4013      	ands	r3, r2
 80032f4:	2b18      	cmp	r3, #24
 80032f6:	d103      	bne.n	8003300 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80032f8:	23fa      	movs	r3, #250	@ 0xfa
 80032fa:	01db      	lsls	r3, r3, #7
 80032fc:	613b      	str	r3, [r7, #16]
 80032fe:	e001      	b.n	8003304 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8003300:	2300      	movs	r3, #0
 8003302:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003304:	693b      	ldr	r3, [r7, #16]
}
 8003306:	0018      	movs	r0, r3
 8003308:	46bd      	mov	sp, r7
 800330a:	b006      	add	sp, #24
 800330c:	bd80      	pop	{r7, pc}
 800330e:	46c0      	nop			@ (mov r8, r8)
 8003310:	40021000 	.word	0x40021000
 8003314:	00f42400 	.word	0x00f42400
 8003318:	007a1200 	.word	0x007a1200

0800331c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003320:	4b02      	ldr	r3, [pc, #8]	@ (800332c <HAL_RCC_GetHCLKFreq+0x10>)
 8003322:	681b      	ldr	r3, [r3, #0]
}
 8003324:	0018      	movs	r0, r3
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}
 800332a:	46c0      	nop			@ (mov r8, r8)
 800332c:	20000000 	.word	0x20000000

08003330 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003330:	b5b0      	push	{r4, r5, r7, lr}
 8003332:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003334:	f7ff fff2 	bl	800331c <HAL_RCC_GetHCLKFreq>
 8003338:	0004      	movs	r4, r0
 800333a:	f7ff fb49 	bl	80029d0 <LL_RCC_GetAPB1Prescaler>
 800333e:	0003      	movs	r3, r0
 8003340:	0b1a      	lsrs	r2, r3, #12
 8003342:	4b05      	ldr	r3, [pc, #20]	@ (8003358 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003344:	0092      	lsls	r2, r2, #2
 8003346:	58d3      	ldr	r3, [r2, r3]
 8003348:	221f      	movs	r2, #31
 800334a:	4013      	ands	r3, r2
 800334c:	40dc      	lsrs	r4, r3
 800334e:	0023      	movs	r3, r4
}
 8003350:	0018      	movs	r0, r3
 8003352:	46bd      	mov	sp, r7
 8003354:	bdb0      	pop	{r4, r5, r7, pc}
 8003356:	46c0      	nop			@ (mov r8, r8)
 8003358:	080055dc 	.word	0x080055dc

0800335c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b086      	sub	sp, #24
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8003364:	2313      	movs	r3, #19
 8003366:	18fb      	adds	r3, r7, r3
 8003368:	2200      	movs	r2, #0
 800336a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800336c:	2312      	movs	r3, #18
 800336e:	18fb      	adds	r3, r7, r3
 8003370:	2200      	movs	r2, #0
 8003372:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681a      	ldr	r2, [r3, #0]
 8003378:	2380      	movs	r3, #128	@ 0x80
 800337a:	029b      	lsls	r3, r3, #10
 800337c:	4013      	ands	r3, r2
 800337e:	d100      	bne.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8003380:	e0a3      	b.n	80034ca <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003382:	2011      	movs	r0, #17
 8003384:	183b      	adds	r3, r7, r0
 8003386:	2200      	movs	r2, #0
 8003388:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800338a:	4b86      	ldr	r3, [pc, #536]	@ (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800338c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800338e:	2380      	movs	r3, #128	@ 0x80
 8003390:	055b      	lsls	r3, r3, #21
 8003392:	4013      	ands	r3, r2
 8003394:	d110      	bne.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003396:	4b83      	ldr	r3, [pc, #524]	@ (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003398:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800339a:	4b82      	ldr	r3, [pc, #520]	@ (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800339c:	2180      	movs	r1, #128	@ 0x80
 800339e:	0549      	lsls	r1, r1, #21
 80033a0:	430a      	orrs	r2, r1
 80033a2:	63da      	str	r2, [r3, #60]	@ 0x3c
 80033a4:	4b7f      	ldr	r3, [pc, #508]	@ (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80033a6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80033a8:	2380      	movs	r3, #128	@ 0x80
 80033aa:	055b      	lsls	r3, r3, #21
 80033ac:	4013      	ands	r3, r2
 80033ae:	60bb      	str	r3, [r7, #8]
 80033b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033b2:	183b      	adds	r3, r7, r0
 80033b4:	2201      	movs	r2, #1
 80033b6:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80033b8:	4b7b      	ldr	r3, [pc, #492]	@ (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80033ba:	681a      	ldr	r2, [r3, #0]
 80033bc:	4b7a      	ldr	r3, [pc, #488]	@ (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80033be:	2180      	movs	r1, #128	@ 0x80
 80033c0:	0049      	lsls	r1, r1, #1
 80033c2:	430a      	orrs	r2, r1
 80033c4:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80033c6:	f7fe f85f 	bl	8001488 <HAL_GetTick>
 80033ca:	0003      	movs	r3, r0
 80033cc:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80033ce:	e00b      	b.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033d0:	f7fe f85a 	bl	8001488 <HAL_GetTick>
 80033d4:	0002      	movs	r2, r0
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	1ad3      	subs	r3, r2, r3
 80033da:	2b02      	cmp	r3, #2
 80033dc:	d904      	bls.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80033de:	2313      	movs	r3, #19
 80033e0:	18fb      	adds	r3, r7, r3
 80033e2:	2203      	movs	r2, #3
 80033e4:	701a      	strb	r2, [r3, #0]
        break;
 80033e6:	e005      	b.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80033e8:	4b6f      	ldr	r3, [pc, #444]	@ (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80033ea:	681a      	ldr	r2, [r3, #0]
 80033ec:	2380      	movs	r3, #128	@ 0x80
 80033ee:	005b      	lsls	r3, r3, #1
 80033f0:	4013      	ands	r3, r2
 80033f2:	d0ed      	beq.n	80033d0 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80033f4:	2313      	movs	r3, #19
 80033f6:	18fb      	adds	r3, r7, r3
 80033f8:	781b      	ldrb	r3, [r3, #0]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d154      	bne.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80033fe:	4b69      	ldr	r3, [pc, #420]	@ (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003400:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003402:	23c0      	movs	r3, #192	@ 0xc0
 8003404:	009b      	lsls	r3, r3, #2
 8003406:	4013      	ands	r3, r2
 8003408:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800340a:	697b      	ldr	r3, [r7, #20]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d019      	beq.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	699b      	ldr	r3, [r3, #24]
 8003414:	697a      	ldr	r2, [r7, #20]
 8003416:	429a      	cmp	r2, r3
 8003418:	d014      	beq.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800341a:	4b62      	ldr	r3, [pc, #392]	@ (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800341c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800341e:	4a63      	ldr	r2, [pc, #396]	@ (80035ac <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8003420:	4013      	ands	r3, r2
 8003422:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003424:	4b5f      	ldr	r3, [pc, #380]	@ (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003426:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003428:	4b5e      	ldr	r3, [pc, #376]	@ (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800342a:	2180      	movs	r1, #128	@ 0x80
 800342c:	0249      	lsls	r1, r1, #9
 800342e:	430a      	orrs	r2, r1
 8003430:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003432:	4b5c      	ldr	r3, [pc, #368]	@ (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003434:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003436:	4b5b      	ldr	r3, [pc, #364]	@ (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003438:	495d      	ldr	r1, [pc, #372]	@ (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800343a:	400a      	ands	r2, r1
 800343c:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800343e:	4b59      	ldr	r3, [pc, #356]	@ (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003440:	697a      	ldr	r2, [r7, #20]
 8003442:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	2201      	movs	r2, #1
 8003448:	4013      	ands	r3, r2
 800344a:	d016      	beq.n	800347a <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800344c:	f7fe f81c 	bl	8001488 <HAL_GetTick>
 8003450:	0003      	movs	r3, r0
 8003452:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003454:	e00c      	b.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003456:	f7fe f817 	bl	8001488 <HAL_GetTick>
 800345a:	0002      	movs	r2, r0
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	1ad3      	subs	r3, r2, r3
 8003460:	4a54      	ldr	r2, [pc, #336]	@ (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d904      	bls.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8003466:	2313      	movs	r3, #19
 8003468:	18fb      	adds	r3, r7, r3
 800346a:	2203      	movs	r2, #3
 800346c:	701a      	strb	r2, [r3, #0]
            break;
 800346e:	e004      	b.n	800347a <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003470:	4b4c      	ldr	r3, [pc, #304]	@ (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003472:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003474:	2202      	movs	r2, #2
 8003476:	4013      	ands	r3, r2
 8003478:	d0ed      	beq.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800347a:	2313      	movs	r3, #19
 800347c:	18fb      	adds	r3, r7, r3
 800347e:	781b      	ldrb	r3, [r3, #0]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d10a      	bne.n	800349a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003484:	4b47      	ldr	r3, [pc, #284]	@ (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003486:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003488:	4a48      	ldr	r2, [pc, #288]	@ (80035ac <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800348a:	4013      	ands	r3, r2
 800348c:	0019      	movs	r1, r3
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	699a      	ldr	r2, [r3, #24]
 8003492:	4b44      	ldr	r3, [pc, #272]	@ (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003494:	430a      	orrs	r2, r1
 8003496:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003498:	e00c      	b.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800349a:	2312      	movs	r3, #18
 800349c:	18fb      	adds	r3, r7, r3
 800349e:	2213      	movs	r2, #19
 80034a0:	18ba      	adds	r2, r7, r2
 80034a2:	7812      	ldrb	r2, [r2, #0]
 80034a4:	701a      	strb	r2, [r3, #0]
 80034a6:	e005      	b.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034a8:	2312      	movs	r3, #18
 80034aa:	18fb      	adds	r3, r7, r3
 80034ac:	2213      	movs	r2, #19
 80034ae:	18ba      	adds	r2, r7, r2
 80034b0:	7812      	ldrb	r2, [r2, #0]
 80034b2:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80034b4:	2311      	movs	r3, #17
 80034b6:	18fb      	adds	r3, r7, r3
 80034b8:	781b      	ldrb	r3, [r3, #0]
 80034ba:	2b01      	cmp	r3, #1
 80034bc:	d105      	bne.n	80034ca <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034be:	4b39      	ldr	r3, [pc, #228]	@ (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80034c0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80034c2:	4b38      	ldr	r3, [pc, #224]	@ (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80034c4:	493c      	ldr	r1, [pc, #240]	@ (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80034c6:	400a      	ands	r2, r1
 80034c8:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	2201      	movs	r2, #1
 80034d0:	4013      	ands	r3, r2
 80034d2:	d009      	beq.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80034d4:	4b33      	ldr	r3, [pc, #204]	@ (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80034d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034d8:	2203      	movs	r2, #3
 80034da:	4393      	bics	r3, r2
 80034dc:	0019      	movs	r1, r3
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	685a      	ldr	r2, [r3, #4]
 80034e2:	4b30      	ldr	r3, [pc, #192]	@ (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80034e4:	430a      	orrs	r2, r1
 80034e6:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	2202      	movs	r2, #2
 80034ee:	4013      	ands	r3, r2
 80034f0:	d009      	beq.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80034f2:	4b2c      	ldr	r3, [pc, #176]	@ (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80034f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034f6:	220c      	movs	r2, #12
 80034f8:	4393      	bics	r3, r2
 80034fa:	0019      	movs	r1, r3
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	689a      	ldr	r2, [r3, #8]
 8003500:	4b28      	ldr	r3, [pc, #160]	@ (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003502:	430a      	orrs	r2, r1
 8003504:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	2220      	movs	r2, #32
 800350c:	4013      	ands	r3, r2
 800350e:	d009      	beq.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003510:	4b24      	ldr	r3, [pc, #144]	@ (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003512:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003514:	4a29      	ldr	r2, [pc, #164]	@ (80035bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003516:	4013      	ands	r3, r2
 8003518:	0019      	movs	r1, r3
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	68da      	ldr	r2, [r3, #12]
 800351e:	4b21      	ldr	r3, [pc, #132]	@ (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003520:	430a      	orrs	r2, r1
 8003522:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681a      	ldr	r2, [r3, #0]
 8003528:	2380      	movs	r3, #128	@ 0x80
 800352a:	01db      	lsls	r3, r3, #7
 800352c:	4013      	ands	r3, r2
 800352e:	d015      	beq.n	800355c <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003530:	4b1c      	ldr	r3, [pc, #112]	@ (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003532:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003534:	009b      	lsls	r3, r3, #2
 8003536:	0899      	lsrs	r1, r3, #2
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	695a      	ldr	r2, [r3, #20]
 800353c:	4b19      	ldr	r3, [pc, #100]	@ (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800353e:	430a      	orrs	r2, r1
 8003540:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	695a      	ldr	r2, [r3, #20]
 8003546:	2380      	movs	r3, #128	@ 0x80
 8003548:	05db      	lsls	r3, r3, #23
 800354a:	429a      	cmp	r2, r3
 800354c:	d106      	bne.n	800355c <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800354e:	4b15      	ldr	r3, [pc, #84]	@ (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003550:	68da      	ldr	r2, [r3, #12]
 8003552:	4b14      	ldr	r3, [pc, #80]	@ (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003554:	2180      	movs	r1, #128	@ 0x80
 8003556:	0249      	lsls	r1, r1, #9
 8003558:	430a      	orrs	r2, r1
 800355a:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681a      	ldr	r2, [r3, #0]
 8003560:	2380      	movs	r3, #128	@ 0x80
 8003562:	011b      	lsls	r3, r3, #4
 8003564:	4013      	ands	r3, r2
 8003566:	d016      	beq.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8003568:	4b0e      	ldr	r3, [pc, #56]	@ (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800356a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800356c:	4a14      	ldr	r2, [pc, #80]	@ (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800356e:	4013      	ands	r3, r2
 8003570:	0019      	movs	r1, r3
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	691a      	ldr	r2, [r3, #16]
 8003576:	4b0b      	ldr	r3, [pc, #44]	@ (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003578:	430a      	orrs	r2, r1
 800357a:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	691a      	ldr	r2, [r3, #16]
 8003580:	2380      	movs	r3, #128	@ 0x80
 8003582:	01db      	lsls	r3, r3, #7
 8003584:	429a      	cmp	r2, r3
 8003586:	d106      	bne.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0x23a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003588:	4b06      	ldr	r3, [pc, #24]	@ (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800358a:	68da      	ldr	r2, [r3, #12]
 800358c:	4b05      	ldr	r3, [pc, #20]	@ (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800358e:	2180      	movs	r1, #128	@ 0x80
 8003590:	0249      	lsls	r1, r1, #9
 8003592:	430a      	orrs	r2, r1
 8003594:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8003596:	2312      	movs	r3, #18
 8003598:	18fb      	adds	r3, r7, r3
 800359a:	781b      	ldrb	r3, [r3, #0]
}
 800359c:	0018      	movs	r0, r3
 800359e:	46bd      	mov	sp, r7
 80035a0:	b006      	add	sp, #24
 80035a2:	bd80      	pop	{r7, pc}
 80035a4:	40021000 	.word	0x40021000
 80035a8:	40007000 	.word	0x40007000
 80035ac:	fffffcff 	.word	0xfffffcff
 80035b0:	fffeffff 	.word	0xfffeffff
 80035b4:	00001388 	.word	0x00001388
 80035b8:	efffffff 	.word	0xefffffff
 80035bc:	ffffcfff 	.word	0xffffcfff
 80035c0:	ffff3fff 	.word	0xffff3fff

080035c4 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80035c4:	b5b0      	push	{r4, r5, r7, lr}
 80035c6:	b084      	sub	sp, #16
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80035cc:	230f      	movs	r3, #15
 80035ce:	18fb      	adds	r3, r7, r3
 80035d0:	2201      	movs	r2, #1
 80035d2:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d100      	bne.n	80035dc <HAL_RTC_Init+0x18>
 80035da:	e08c      	b.n	80036f6 <HAL_RTC_Init+0x132>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

    if(hrtc->State == HAL_RTC_STATE_RESET)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2229      	movs	r2, #41	@ 0x29
 80035e0:	5c9b      	ldrb	r3, [r3, r2]
 80035e2:	b2db      	uxtb	r3, r3
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d10b      	bne.n	8003600 <HAL_RTC_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2228      	movs	r2, #40	@ 0x28
 80035ec:	2100      	movs	r1, #0
 80035ee:	5499      	strb	r1, [r3, r2]

      /* Process TAMP peripheral offset from RTC one */
      hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2288      	movs	r2, #136	@ 0x88
 80035f4:	0212      	lsls	r2, r2, #8
 80035f6:	605a      	str	r2, [r3, #4]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
#else
      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	0018      	movs	r0, r3
 80035fc:	f7fd faac 	bl	8000b58 <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
    }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2229      	movs	r2, #41	@ 0x29
 8003604:	2102      	movs	r1, #2
 8003606:	5499      	strb	r1, [r3, r2]

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	68db      	ldr	r3, [r3, #12]
 800360e:	2210      	movs	r2, #16
 8003610:	4013      	ands	r3, r2
 8003612:	2b10      	cmp	r3, #16
 8003614:	d062      	beq.n	80036dc <HAL_RTC_Init+0x118>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	22ca      	movs	r2, #202	@ 0xca
 800361c:	625a      	str	r2, [r3, #36]	@ 0x24
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	2253      	movs	r2, #83	@ 0x53
 8003624:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8003626:	250f      	movs	r5, #15
 8003628:	197c      	adds	r4, r7, r5
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	0018      	movs	r0, r3
 800362e:	f000 f891 	bl	8003754 <RTC_EnterInitMode>
 8003632:	0003      	movs	r3, r0
 8003634:	7023      	strb	r3, [r4, #0]

      if(status == HAL_OK)
 8003636:	0028      	movs	r0, r5
 8003638:	183b      	adds	r3, r7, r0
 800363a:	781b      	ldrb	r3, [r3, #0]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d12c      	bne.n	800369a <HAL_RTC_Init+0xd6>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	699a      	ldr	r2, [r3, #24]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	492e      	ldr	r1, [pc, #184]	@ (8003704 <HAL_RTC_Init+0x140>)
 800364c:	400a      	ands	r2, r1
 800364e:	619a      	str	r2, [r3, #24]
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	6999      	ldr	r1, [r3, #24]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	689a      	ldr	r2, [r3, #8]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	695b      	ldr	r3, [r3, #20]
 800365e:	431a      	orrs	r2, r3
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	69db      	ldr	r3, [r3, #28]
 8003664:	431a      	orrs	r2, r3
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	430a      	orrs	r2, r1
 800366c:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	687a      	ldr	r2, [r7, #4]
 8003674:	6912      	ldr	r2, [r2, #16]
 8003676:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	6919      	ldr	r1, [r3, #16]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	68db      	ldr	r3, [r3, #12]
 8003682:	041a      	lsls	r2, r3, #16
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	430a      	orrs	r2, r1
 800368a:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800368c:	183c      	adds	r4, r7, r0
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	0018      	movs	r0, r3
 8003692:	f000 f8a1 	bl	80037d8 <RTC_ExitInitMode>
 8003696:	0003      	movs	r3, r0
 8003698:	7023      	strb	r3, [r4, #0]
      }

      if (status == HAL_OK)
 800369a:	230f      	movs	r3, #15
 800369c:	18fb      	adds	r3, r7, r3
 800369e:	781b      	ldrb	r3, [r3, #0]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d116      	bne.n	80036d2 <HAL_RTC_Init+0x10e>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	699a      	ldr	r2, [r3, #24]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	00d2      	lsls	r2, r2, #3
 80036b0:	08d2      	lsrs	r2, r2, #3
 80036b2:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	6999      	ldr	r1, [r3, #24]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6a1b      	ldr	r3, [r3, #32]
 80036c2:	431a      	orrs	r2, r3
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	699b      	ldr	r3, [r3, #24]
 80036c8:	431a      	orrs	r2, r3
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	430a      	orrs	r2, r1
 80036d0:	619a      	str	r2, [r3, #24]
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	22ff      	movs	r2, #255	@ 0xff
 80036d8:	625a      	str	r2, [r3, #36]	@ 0x24
 80036da:	e003      	b.n	80036e4 <HAL_RTC_Init+0x120>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 80036dc:	230f      	movs	r3, #15
 80036de:	18fb      	adds	r3, r7, r3
 80036e0:	2200      	movs	r2, #0
 80036e2:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 80036e4:	230f      	movs	r3, #15
 80036e6:	18fb      	adds	r3, r7, r3
 80036e8:	781b      	ldrb	r3, [r3, #0]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d103      	bne.n	80036f6 <HAL_RTC_Init+0x132>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2229      	movs	r2, #41	@ 0x29
 80036f2:	2101      	movs	r1, #1
 80036f4:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 80036f6:	230f      	movs	r3, #15
 80036f8:	18fb      	adds	r3, r7, r3
 80036fa:	781b      	ldrb	r3, [r3, #0]
}
 80036fc:	0018      	movs	r0, r3
 80036fe:	46bd      	mov	sp, r7
 8003700:	b004      	add	sp, #16
 8003702:	bdb0      	pop	{r4, r5, r7, pc}
 8003704:	fb8fffbf 	.word	0xfb8fffbf

08003708 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b084      	sub	sp, #16
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a0e      	ldr	r2, [pc, #56]	@ (8003750 <HAL_RTC_WaitForSynchro+0x48>)
 8003716:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8003718:	f7fd feb6 	bl	8001488 <HAL_GetTick>
 800371c:	0003      	movs	r3, r0
 800371e:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8003720:	e00a      	b.n	8003738 <HAL_RTC_WaitForSynchro+0x30>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8003722:	f7fd feb1 	bl	8001488 <HAL_GetTick>
 8003726:	0002      	movs	r2, r0
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	1ad2      	subs	r2, r2, r3
 800372c:	23fa      	movs	r3, #250	@ 0xfa
 800372e:	009b      	lsls	r3, r3, #2
 8003730:	429a      	cmp	r2, r3
 8003732:	d901      	bls.n	8003738 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8003734:	2303      	movs	r3, #3
 8003736:	e006      	b.n	8003746 <HAL_RTC_WaitForSynchro+0x3e>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	68db      	ldr	r3, [r3, #12]
 800373e:	2220      	movs	r2, #32
 8003740:	4013      	ands	r3, r2
 8003742:	d0ee      	beq.n	8003722 <HAL_RTC_WaitForSynchro+0x1a>
    }
  }

  return HAL_OK;
 8003744:	2300      	movs	r3, #0
}
 8003746:	0018      	movs	r0, r3
 8003748:	46bd      	mov	sp, r7
 800374a:	b004      	add	sp, #16
 800374c:	bd80      	pop	{r7, pc}
 800374e:	46c0      	nop			@ (mov r8, r8)
 8003750:	0001005f 	.word	0x0001005f

08003754 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b084      	sub	sp, #16
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 800375c:	230f      	movs	r3, #15
 800375e:	18fb      	adds	r3, r7, r3
 8003760:	2200      	movs	r2, #0
 8003762:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	68db      	ldr	r3, [r3, #12]
 800376a:	2240      	movs	r2, #64	@ 0x40
 800376c:	4013      	ands	r3, r2
 800376e:	d12c      	bne.n	80037ca <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	68da      	ldr	r2, [r3, #12]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	2180      	movs	r1, #128	@ 0x80
 800377c:	430a      	orrs	r2, r1
 800377e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8003780:	f7fd fe82 	bl	8001488 <HAL_GetTick>
 8003784:	0003      	movs	r3, r0
 8003786:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8003788:	e014      	b.n	80037b4 <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 800378a:	f7fd fe7d 	bl	8001488 <HAL_GetTick>
 800378e:	0002      	movs	r2, r0
 8003790:	68bb      	ldr	r3, [r7, #8]
 8003792:	1ad2      	subs	r2, r2, r3
 8003794:	200f      	movs	r0, #15
 8003796:	183b      	adds	r3, r7, r0
 8003798:	1839      	adds	r1, r7, r0
 800379a:	7809      	ldrb	r1, [r1, #0]
 800379c:	7019      	strb	r1, [r3, #0]
 800379e:	23fa      	movs	r3, #250	@ 0xfa
 80037a0:	009b      	lsls	r3, r3, #2
 80037a2:	429a      	cmp	r2, r3
 80037a4:	d906      	bls.n	80037b4 <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 80037a6:	183b      	adds	r3, r7, r0
 80037a8:	2203      	movs	r2, #3
 80037aa:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2229      	movs	r2, #41	@ 0x29
 80037b0:	2103      	movs	r1, #3
 80037b2:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	68db      	ldr	r3, [r3, #12]
 80037ba:	2240      	movs	r2, #64	@ 0x40
 80037bc:	4013      	ands	r3, r2
 80037be:	d104      	bne.n	80037ca <RTC_EnterInitMode+0x76>
 80037c0:	230f      	movs	r3, #15
 80037c2:	18fb      	adds	r3, r7, r3
 80037c4:	781b      	ldrb	r3, [r3, #0]
 80037c6:	2b03      	cmp	r3, #3
 80037c8:	d1df      	bne.n	800378a <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80037ca:	230f      	movs	r3, #15
 80037cc:	18fb      	adds	r3, r7, r3
 80037ce:	781b      	ldrb	r3, [r3, #0]
}
 80037d0:	0018      	movs	r0, r3
 80037d2:	46bd      	mov	sp, r7
 80037d4:	b004      	add	sp, #16
 80037d6:	bd80      	pop	{r7, pc}

080037d8 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80037d8:	b590      	push	{r4, r7, lr}
 80037da:	b085      	sub	sp, #20
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80037e0:	240f      	movs	r4, #15
 80037e2:	193b      	adds	r3, r7, r4
 80037e4:	2200      	movs	r2, #0
 80037e6:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80037e8:	4b1c      	ldr	r3, [pc, #112]	@ (800385c <RTC_ExitInitMode+0x84>)
 80037ea:	68da      	ldr	r2, [r3, #12]
 80037ec:	4b1b      	ldr	r3, [pc, #108]	@ (800385c <RTC_ExitInitMode+0x84>)
 80037ee:	2180      	movs	r1, #128	@ 0x80
 80037f0:	438a      	bics	r2, r1
 80037f2:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80037f4:	4b19      	ldr	r3, [pc, #100]	@ (800385c <RTC_ExitInitMode+0x84>)
 80037f6:	699b      	ldr	r3, [r3, #24]
 80037f8:	2220      	movs	r2, #32
 80037fa:	4013      	ands	r3, r2
 80037fc:	d10d      	bne.n	800381a <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	0018      	movs	r0, r3
 8003802:	f7ff ff81 	bl	8003708 <HAL_RTC_WaitForSynchro>
 8003806:	1e03      	subs	r3, r0, #0
 8003808:	d021      	beq.n	800384e <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2229      	movs	r2, #41	@ 0x29
 800380e:	2103      	movs	r1, #3
 8003810:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8003812:	193b      	adds	r3, r7, r4
 8003814:	2203      	movs	r2, #3
 8003816:	701a      	strb	r2, [r3, #0]
 8003818:	e019      	b.n	800384e <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800381a:	4b10      	ldr	r3, [pc, #64]	@ (800385c <RTC_ExitInitMode+0x84>)
 800381c:	699a      	ldr	r2, [r3, #24]
 800381e:	4b0f      	ldr	r3, [pc, #60]	@ (800385c <RTC_ExitInitMode+0x84>)
 8003820:	2120      	movs	r1, #32
 8003822:	438a      	bics	r2, r1
 8003824:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	0018      	movs	r0, r3
 800382a:	f7ff ff6d 	bl	8003708 <HAL_RTC_WaitForSynchro>
 800382e:	1e03      	subs	r3, r0, #0
 8003830:	d007      	beq.n	8003842 <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2229      	movs	r2, #41	@ 0x29
 8003836:	2103      	movs	r1, #3
 8003838:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 800383a:	230f      	movs	r3, #15
 800383c:	18fb      	adds	r3, r7, r3
 800383e:	2203      	movs	r2, #3
 8003840:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8003842:	4b06      	ldr	r3, [pc, #24]	@ (800385c <RTC_ExitInitMode+0x84>)
 8003844:	699a      	ldr	r2, [r3, #24]
 8003846:	4b05      	ldr	r3, [pc, #20]	@ (800385c <RTC_ExitInitMode+0x84>)
 8003848:	2120      	movs	r1, #32
 800384a:	430a      	orrs	r2, r1
 800384c:	619a      	str	r2, [r3, #24]
  }

  return status;
 800384e:	230f      	movs	r3, #15
 8003850:	18fb      	adds	r3, r7, r3
 8003852:	781b      	ldrb	r3, [r3, #0]
}
 8003854:	0018      	movs	r0, r3
 8003856:	46bd      	mov	sp, r7
 8003858:	b005      	add	sp, #20
 800385a:	bd90      	pop	{r4, r7, pc}
 800385c:	40002800 	.word	0x40002800

08003860 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b082      	sub	sp, #8
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d101      	bne.n	8003872 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	e04a      	b.n	8003908 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	223d      	movs	r2, #61	@ 0x3d
 8003876:	5c9b      	ldrb	r3, [r3, r2]
 8003878:	b2db      	uxtb	r3, r3
 800387a:	2b00      	cmp	r3, #0
 800387c:	d107      	bne.n	800388e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	223c      	movs	r2, #60	@ 0x3c
 8003882:	2100      	movs	r1, #0
 8003884:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	0018      	movs	r0, r3
 800388a:	f7fd fbdf 	bl	800104c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	223d      	movs	r2, #61	@ 0x3d
 8003892:	2102      	movs	r1, #2
 8003894:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681a      	ldr	r2, [r3, #0]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	3304      	adds	r3, #4
 800389e:	0019      	movs	r1, r3
 80038a0:	0010      	movs	r0, r2
 80038a2:	f000 fa63 	bl	8003d6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2248      	movs	r2, #72	@ 0x48
 80038aa:	2101      	movs	r1, #1
 80038ac:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	223e      	movs	r2, #62	@ 0x3e
 80038b2:	2101      	movs	r1, #1
 80038b4:	5499      	strb	r1, [r3, r2]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	223f      	movs	r2, #63	@ 0x3f
 80038ba:	2101      	movs	r1, #1
 80038bc:	5499      	strb	r1, [r3, r2]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2240      	movs	r2, #64	@ 0x40
 80038c2:	2101      	movs	r1, #1
 80038c4:	5499      	strb	r1, [r3, r2]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2241      	movs	r2, #65	@ 0x41
 80038ca:	2101      	movs	r1, #1
 80038cc:	5499      	strb	r1, [r3, r2]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2242      	movs	r2, #66	@ 0x42
 80038d2:	2101      	movs	r1, #1
 80038d4:	5499      	strb	r1, [r3, r2]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2243      	movs	r2, #67	@ 0x43
 80038da:	2101      	movs	r1, #1
 80038dc:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2244      	movs	r2, #68	@ 0x44
 80038e2:	2101      	movs	r1, #1
 80038e4:	5499      	strb	r1, [r3, r2]
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2245      	movs	r2, #69	@ 0x45
 80038ea:	2101      	movs	r1, #1
 80038ec:	5499      	strb	r1, [r3, r2]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2246      	movs	r2, #70	@ 0x46
 80038f2:	2101      	movs	r1, #1
 80038f4:	5499      	strb	r1, [r3, r2]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2247      	movs	r2, #71	@ 0x47
 80038fa:	2101      	movs	r1, #1
 80038fc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	223d      	movs	r2, #61	@ 0x3d
 8003902:	2101      	movs	r1, #1
 8003904:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003906:	2300      	movs	r3, #0
}
 8003908:	0018      	movs	r0, r3
 800390a:	46bd      	mov	sp, r7
 800390c:	b002      	add	sp, #8
 800390e:	bd80      	pop	{r7, pc}

08003910 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b082      	sub	sp, #8
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d101      	bne.n	8003922 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800391e:	2301      	movs	r3, #1
 8003920:	e04a      	b.n	80039b8 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	223d      	movs	r2, #61	@ 0x3d
 8003926:	5c9b      	ldrb	r3, [r3, r2]
 8003928:	b2db      	uxtb	r3, r3
 800392a:	2b00      	cmp	r3, #0
 800392c:	d107      	bne.n	800393e <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	223c      	movs	r2, #60	@ 0x3c
 8003932:	2100      	movs	r1, #0
 8003934:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	0018      	movs	r0, r3
 800393a:	f7fd fbbb 	bl	80010b4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	223d      	movs	r2, #61	@ 0x3d
 8003942:	2102      	movs	r1, #2
 8003944:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681a      	ldr	r2, [r3, #0]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	3304      	adds	r3, #4
 800394e:	0019      	movs	r1, r3
 8003950:	0010      	movs	r0, r2
 8003952:	f000 fa0b 	bl	8003d6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2248      	movs	r2, #72	@ 0x48
 800395a:	2101      	movs	r1, #1
 800395c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	223e      	movs	r2, #62	@ 0x3e
 8003962:	2101      	movs	r1, #1
 8003964:	5499      	strb	r1, [r3, r2]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	223f      	movs	r2, #63	@ 0x3f
 800396a:	2101      	movs	r1, #1
 800396c:	5499      	strb	r1, [r3, r2]
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2240      	movs	r2, #64	@ 0x40
 8003972:	2101      	movs	r1, #1
 8003974:	5499      	strb	r1, [r3, r2]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2241      	movs	r2, #65	@ 0x41
 800397a:	2101      	movs	r1, #1
 800397c:	5499      	strb	r1, [r3, r2]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2242      	movs	r2, #66	@ 0x42
 8003982:	2101      	movs	r1, #1
 8003984:	5499      	strb	r1, [r3, r2]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2243      	movs	r2, #67	@ 0x43
 800398a:	2101      	movs	r1, #1
 800398c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2244      	movs	r2, #68	@ 0x44
 8003992:	2101      	movs	r1, #1
 8003994:	5499      	strb	r1, [r3, r2]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2245      	movs	r2, #69	@ 0x45
 800399a:	2101      	movs	r1, #1
 800399c:	5499      	strb	r1, [r3, r2]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2246      	movs	r2, #70	@ 0x46
 80039a2:	2101      	movs	r1, #1
 80039a4:	5499      	strb	r1, [r3, r2]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2247      	movs	r2, #71	@ 0x47
 80039aa:	2101      	movs	r1, #1
 80039ac:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	223d      	movs	r2, #61	@ 0x3d
 80039b2:	2101      	movs	r1, #1
 80039b4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80039b6:	2300      	movs	r3, #0
}
 80039b8:	0018      	movs	r0, r3
 80039ba:	46bd      	mov	sp, r7
 80039bc:	b002      	add	sp, #8
 80039be:	bd80      	pop	{r7, pc}

080039c0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b086      	sub	sp, #24
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	60f8      	str	r0, [r7, #12]
 80039c8:	60b9      	str	r1, [r7, #8]
 80039ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039cc:	2317      	movs	r3, #23
 80039ce:	18fb      	adds	r3, r7, r3
 80039d0:	2200      	movs	r2, #0
 80039d2:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	223c      	movs	r2, #60	@ 0x3c
 80039d8:	5c9b      	ldrb	r3, [r3, r2]
 80039da:	2b01      	cmp	r3, #1
 80039dc:	d101      	bne.n	80039e2 <HAL_TIM_PWM_ConfigChannel+0x22>
 80039de:	2302      	movs	r3, #2
 80039e0:	e0e5      	b.n	8003bae <HAL_TIM_PWM_ConfigChannel+0x1ee>
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	223c      	movs	r2, #60	@ 0x3c
 80039e6:	2101      	movs	r1, #1
 80039e8:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2b14      	cmp	r3, #20
 80039ee:	d900      	bls.n	80039f2 <HAL_TIM_PWM_ConfigChannel+0x32>
 80039f0:	e0d1      	b.n	8003b96 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	009a      	lsls	r2, r3, #2
 80039f6:	4b70      	ldr	r3, [pc, #448]	@ (8003bb8 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 80039f8:	18d3      	adds	r3, r2, r3
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	68ba      	ldr	r2, [r7, #8]
 8003a04:	0011      	movs	r1, r2
 8003a06:	0018      	movs	r0, r3
 8003a08:	f000 fa34 	bl	8003e74 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	699a      	ldr	r2, [r3, #24]
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	2108      	movs	r1, #8
 8003a18:	430a      	orrs	r2, r1
 8003a1a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	699a      	ldr	r2, [r3, #24]
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	2104      	movs	r1, #4
 8003a28:	438a      	bics	r2, r1
 8003a2a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	6999      	ldr	r1, [r3, #24]
 8003a32:	68bb      	ldr	r3, [r7, #8]
 8003a34:	691a      	ldr	r2, [r3, #16]
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	430a      	orrs	r2, r1
 8003a3c:	619a      	str	r2, [r3, #24]
      break;
 8003a3e:	e0af      	b.n	8003ba0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	68ba      	ldr	r2, [r7, #8]
 8003a46:	0011      	movs	r1, r2
 8003a48:	0018      	movs	r0, r3
 8003a4a:	f000 fa9d 	bl	8003f88 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	699a      	ldr	r2, [r3, #24]
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	2180      	movs	r1, #128	@ 0x80
 8003a5a:	0109      	lsls	r1, r1, #4
 8003a5c:	430a      	orrs	r2, r1
 8003a5e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	699a      	ldr	r2, [r3, #24]
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4954      	ldr	r1, [pc, #336]	@ (8003bbc <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003a6c:	400a      	ands	r2, r1
 8003a6e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	6999      	ldr	r1, [r3, #24]
 8003a76:	68bb      	ldr	r3, [r7, #8]
 8003a78:	691b      	ldr	r3, [r3, #16]
 8003a7a:	021a      	lsls	r2, r3, #8
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	430a      	orrs	r2, r1
 8003a82:	619a      	str	r2, [r3, #24]
      break;
 8003a84:	e08c      	b.n	8003ba0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	68ba      	ldr	r2, [r7, #8]
 8003a8c:	0011      	movs	r1, r2
 8003a8e:	0018      	movs	r0, r3
 8003a90:	f000 fafe 	bl	8004090 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	69da      	ldr	r2, [r3, #28]
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	2108      	movs	r1, #8
 8003aa0:	430a      	orrs	r2, r1
 8003aa2:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	69da      	ldr	r2, [r3, #28]
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	2104      	movs	r1, #4
 8003ab0:	438a      	bics	r2, r1
 8003ab2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	69d9      	ldr	r1, [r3, #28]
 8003aba:	68bb      	ldr	r3, [r7, #8]
 8003abc:	691a      	ldr	r2, [r3, #16]
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	430a      	orrs	r2, r1
 8003ac4:	61da      	str	r2, [r3, #28]
      break;
 8003ac6:	e06b      	b.n	8003ba0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	68ba      	ldr	r2, [r7, #8]
 8003ace:	0011      	movs	r1, r2
 8003ad0:	0018      	movs	r0, r3
 8003ad2:	f000 fb65 	bl	80041a0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	69da      	ldr	r2, [r3, #28]
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	2180      	movs	r1, #128	@ 0x80
 8003ae2:	0109      	lsls	r1, r1, #4
 8003ae4:	430a      	orrs	r2, r1
 8003ae6:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	69da      	ldr	r2, [r3, #28]
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4932      	ldr	r1, [pc, #200]	@ (8003bbc <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003af4:	400a      	ands	r2, r1
 8003af6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	69d9      	ldr	r1, [r3, #28]
 8003afe:	68bb      	ldr	r3, [r7, #8]
 8003b00:	691b      	ldr	r3, [r3, #16]
 8003b02:	021a      	lsls	r2, r3, #8
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	430a      	orrs	r2, r1
 8003b0a:	61da      	str	r2, [r3, #28]
      break;
 8003b0c:	e048      	b.n	8003ba0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	68ba      	ldr	r2, [r7, #8]
 8003b14:	0011      	movs	r1, r2
 8003b16:	0018      	movs	r0, r3
 8003b18:	f000 fbac 	bl	8004274 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	2108      	movs	r1, #8
 8003b28:	430a      	orrs	r2, r1
 8003b2a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	2104      	movs	r1, #4
 8003b38:	438a      	bics	r2, r1
 8003b3a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003b42:	68bb      	ldr	r3, [r7, #8]
 8003b44:	691a      	ldr	r2, [r3, #16]
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	430a      	orrs	r2, r1
 8003b4c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003b4e:	e027      	b.n	8003ba0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	68ba      	ldr	r2, [r7, #8]
 8003b56:	0011      	movs	r1, r2
 8003b58:	0018      	movs	r0, r3
 8003b5a:	f000 fbeb 	bl	8004334 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	2180      	movs	r1, #128	@ 0x80
 8003b6a:	0109      	lsls	r1, r1, #4
 8003b6c:	430a      	orrs	r2, r1
 8003b6e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4910      	ldr	r1, [pc, #64]	@ (8003bbc <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003b7c:	400a      	ands	r2, r1
 8003b7e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003b86:	68bb      	ldr	r3, [r7, #8]
 8003b88:	691b      	ldr	r3, [r3, #16]
 8003b8a:	021a      	lsls	r2, r3, #8
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	430a      	orrs	r2, r1
 8003b92:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003b94:	e004      	b.n	8003ba0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8003b96:	2317      	movs	r3, #23
 8003b98:	18fb      	adds	r3, r7, r3
 8003b9a:	2201      	movs	r2, #1
 8003b9c:	701a      	strb	r2, [r3, #0]
      break;
 8003b9e:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	223c      	movs	r2, #60	@ 0x3c
 8003ba4:	2100      	movs	r1, #0
 8003ba6:	5499      	strb	r1, [r3, r2]

  return status;
 8003ba8:	2317      	movs	r3, #23
 8003baa:	18fb      	adds	r3, r7, r3
 8003bac:	781b      	ldrb	r3, [r3, #0]
}
 8003bae:	0018      	movs	r0, r3
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	b006      	add	sp, #24
 8003bb4:	bd80      	pop	{r7, pc}
 8003bb6:	46c0      	nop			@ (mov r8, r8)
 8003bb8:	080055fc 	.word	0x080055fc
 8003bbc:	fffffbff 	.word	0xfffffbff

08003bc0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b084      	sub	sp, #16
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
 8003bc8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003bca:	230f      	movs	r3, #15
 8003bcc:	18fb      	adds	r3, r7, r3
 8003bce:	2200      	movs	r2, #0
 8003bd0:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	223c      	movs	r2, #60	@ 0x3c
 8003bd6:	5c9b      	ldrb	r3, [r3, r2]
 8003bd8:	2b01      	cmp	r3, #1
 8003bda:	d101      	bne.n	8003be0 <HAL_TIM_ConfigClockSource+0x20>
 8003bdc:	2302      	movs	r3, #2
 8003bde:	e0bc      	b.n	8003d5a <HAL_TIM_ConfigClockSource+0x19a>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	223c      	movs	r2, #60	@ 0x3c
 8003be4:	2101      	movs	r1, #1
 8003be6:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	223d      	movs	r2, #61	@ 0x3d
 8003bec:	2102      	movs	r1, #2
 8003bee:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	689b      	ldr	r3, [r3, #8]
 8003bf6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003bf8:	68bb      	ldr	r3, [r7, #8]
 8003bfa:	4a5a      	ldr	r2, [pc, #360]	@ (8003d64 <HAL_TIM_ConfigClockSource+0x1a4>)
 8003bfc:	4013      	ands	r3, r2
 8003bfe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	4a59      	ldr	r2, [pc, #356]	@ (8003d68 <HAL_TIM_ConfigClockSource+0x1a8>)
 8003c04:	4013      	ands	r3, r2
 8003c06:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	68ba      	ldr	r2, [r7, #8]
 8003c0e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	2280      	movs	r2, #128	@ 0x80
 8003c16:	0192      	lsls	r2, r2, #6
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d040      	beq.n	8003c9e <HAL_TIM_ConfigClockSource+0xde>
 8003c1c:	2280      	movs	r2, #128	@ 0x80
 8003c1e:	0192      	lsls	r2, r2, #6
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d900      	bls.n	8003c26 <HAL_TIM_ConfigClockSource+0x66>
 8003c24:	e088      	b.n	8003d38 <HAL_TIM_ConfigClockSource+0x178>
 8003c26:	2280      	movs	r2, #128	@ 0x80
 8003c28:	0152      	lsls	r2, r2, #5
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d100      	bne.n	8003c30 <HAL_TIM_ConfigClockSource+0x70>
 8003c2e:	e088      	b.n	8003d42 <HAL_TIM_ConfigClockSource+0x182>
 8003c30:	2280      	movs	r2, #128	@ 0x80
 8003c32:	0152      	lsls	r2, r2, #5
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d900      	bls.n	8003c3a <HAL_TIM_ConfigClockSource+0x7a>
 8003c38:	e07e      	b.n	8003d38 <HAL_TIM_ConfigClockSource+0x178>
 8003c3a:	2b70      	cmp	r3, #112	@ 0x70
 8003c3c:	d018      	beq.n	8003c70 <HAL_TIM_ConfigClockSource+0xb0>
 8003c3e:	d900      	bls.n	8003c42 <HAL_TIM_ConfigClockSource+0x82>
 8003c40:	e07a      	b.n	8003d38 <HAL_TIM_ConfigClockSource+0x178>
 8003c42:	2b60      	cmp	r3, #96	@ 0x60
 8003c44:	d04f      	beq.n	8003ce6 <HAL_TIM_ConfigClockSource+0x126>
 8003c46:	d900      	bls.n	8003c4a <HAL_TIM_ConfigClockSource+0x8a>
 8003c48:	e076      	b.n	8003d38 <HAL_TIM_ConfigClockSource+0x178>
 8003c4a:	2b50      	cmp	r3, #80	@ 0x50
 8003c4c:	d03b      	beq.n	8003cc6 <HAL_TIM_ConfigClockSource+0x106>
 8003c4e:	d900      	bls.n	8003c52 <HAL_TIM_ConfigClockSource+0x92>
 8003c50:	e072      	b.n	8003d38 <HAL_TIM_ConfigClockSource+0x178>
 8003c52:	2b40      	cmp	r3, #64	@ 0x40
 8003c54:	d057      	beq.n	8003d06 <HAL_TIM_ConfigClockSource+0x146>
 8003c56:	d900      	bls.n	8003c5a <HAL_TIM_ConfigClockSource+0x9a>
 8003c58:	e06e      	b.n	8003d38 <HAL_TIM_ConfigClockSource+0x178>
 8003c5a:	2b30      	cmp	r3, #48	@ 0x30
 8003c5c:	d063      	beq.n	8003d26 <HAL_TIM_ConfigClockSource+0x166>
 8003c5e:	d86b      	bhi.n	8003d38 <HAL_TIM_ConfigClockSource+0x178>
 8003c60:	2b20      	cmp	r3, #32
 8003c62:	d060      	beq.n	8003d26 <HAL_TIM_ConfigClockSource+0x166>
 8003c64:	d868      	bhi.n	8003d38 <HAL_TIM_ConfigClockSource+0x178>
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d05d      	beq.n	8003d26 <HAL_TIM_ConfigClockSource+0x166>
 8003c6a:	2b10      	cmp	r3, #16
 8003c6c:	d05b      	beq.n	8003d26 <HAL_TIM_ConfigClockSource+0x166>
 8003c6e:	e063      	b.n	8003d38 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003c80:	f000 fc38 	bl	80044f4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	689b      	ldr	r3, [r3, #8]
 8003c8a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003c8c:	68bb      	ldr	r3, [r7, #8]
 8003c8e:	2277      	movs	r2, #119	@ 0x77
 8003c90:	4313      	orrs	r3, r2
 8003c92:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	68ba      	ldr	r2, [r7, #8]
 8003c9a:	609a      	str	r2, [r3, #8]
      break;
 8003c9c:	e052      	b.n	8003d44 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003cae:	f000 fc21 	bl	80044f4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	689a      	ldr	r2, [r3, #8]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	2180      	movs	r1, #128	@ 0x80
 8003cbe:	01c9      	lsls	r1, r1, #7
 8003cc0:	430a      	orrs	r2, r1
 8003cc2:	609a      	str	r2, [r3, #8]
      break;
 8003cc4:	e03e      	b.n	8003d44 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003cd2:	001a      	movs	r2, r3
 8003cd4:	f000 fb92 	bl	80043fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	2150      	movs	r1, #80	@ 0x50
 8003cde:	0018      	movs	r0, r3
 8003ce0:	f000 fbec 	bl	80044bc <TIM_ITRx_SetConfig>
      break;
 8003ce4:	e02e      	b.n	8003d44 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003cf2:	001a      	movs	r2, r3
 8003cf4:	f000 fbb0 	bl	8004458 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	2160      	movs	r1, #96	@ 0x60
 8003cfe:	0018      	movs	r0, r3
 8003d00:	f000 fbdc 	bl	80044bc <TIM_ITRx_SetConfig>
      break;
 8003d04:	e01e      	b.n	8003d44 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d12:	001a      	movs	r2, r3
 8003d14:	f000 fb72 	bl	80043fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	2140      	movs	r1, #64	@ 0x40
 8003d1e:	0018      	movs	r0, r3
 8003d20:	f000 fbcc 	bl	80044bc <TIM_ITRx_SetConfig>
      break;
 8003d24:	e00e      	b.n	8003d44 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681a      	ldr	r2, [r3, #0]
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	0019      	movs	r1, r3
 8003d30:	0010      	movs	r0, r2
 8003d32:	f000 fbc3 	bl	80044bc <TIM_ITRx_SetConfig>
      break;
 8003d36:	e005      	b.n	8003d44 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8003d38:	230f      	movs	r3, #15
 8003d3a:	18fb      	adds	r3, r7, r3
 8003d3c:	2201      	movs	r2, #1
 8003d3e:	701a      	strb	r2, [r3, #0]
      break;
 8003d40:	e000      	b.n	8003d44 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8003d42:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	223d      	movs	r2, #61	@ 0x3d
 8003d48:	2101      	movs	r1, #1
 8003d4a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	223c      	movs	r2, #60	@ 0x3c
 8003d50:	2100      	movs	r1, #0
 8003d52:	5499      	strb	r1, [r3, r2]

  return status;
 8003d54:	230f      	movs	r3, #15
 8003d56:	18fb      	adds	r3, r7, r3
 8003d58:	781b      	ldrb	r3, [r3, #0]
}
 8003d5a:	0018      	movs	r0, r3
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	b004      	add	sp, #16
 8003d60:	bd80      	pop	{r7, pc}
 8003d62:	46c0      	nop			@ (mov r8, r8)
 8003d64:	ffceff88 	.word	0xffceff88
 8003d68:	ffff00ff 	.word	0xffff00ff

08003d6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b084      	sub	sp, #16
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
 8003d74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	4a36      	ldr	r2, [pc, #216]	@ (8003e58 <TIM_Base_SetConfig+0xec>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d003      	beq.n	8003d8c <TIM_Base_SetConfig+0x20>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	4a35      	ldr	r2, [pc, #212]	@ (8003e5c <TIM_Base_SetConfig+0xf0>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d108      	bne.n	8003d9e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	2270      	movs	r2, #112	@ 0x70
 8003d90:	4393      	bics	r3, r2
 8003d92:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	68fa      	ldr	r2, [r7, #12]
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	4a2d      	ldr	r2, [pc, #180]	@ (8003e58 <TIM_Base_SetConfig+0xec>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d013      	beq.n	8003dce <TIM_Base_SetConfig+0x62>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	4a2c      	ldr	r2, [pc, #176]	@ (8003e5c <TIM_Base_SetConfig+0xf0>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d00f      	beq.n	8003dce <TIM_Base_SetConfig+0x62>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	4a2b      	ldr	r2, [pc, #172]	@ (8003e60 <TIM_Base_SetConfig+0xf4>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d00b      	beq.n	8003dce <TIM_Base_SetConfig+0x62>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	4a2a      	ldr	r2, [pc, #168]	@ (8003e64 <TIM_Base_SetConfig+0xf8>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d007      	beq.n	8003dce <TIM_Base_SetConfig+0x62>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	4a29      	ldr	r2, [pc, #164]	@ (8003e68 <TIM_Base_SetConfig+0xfc>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d003      	beq.n	8003dce <TIM_Base_SetConfig+0x62>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	4a28      	ldr	r2, [pc, #160]	@ (8003e6c <TIM_Base_SetConfig+0x100>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d108      	bne.n	8003de0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	4a27      	ldr	r2, [pc, #156]	@ (8003e70 <TIM_Base_SetConfig+0x104>)
 8003dd2:	4013      	ands	r3, r2
 8003dd4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	68db      	ldr	r3, [r3, #12]
 8003dda:	68fa      	ldr	r2, [r7, #12]
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	2280      	movs	r2, #128	@ 0x80
 8003de4:	4393      	bics	r3, r2
 8003de6:	001a      	movs	r2, r3
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	695b      	ldr	r3, [r3, #20]
 8003dec:	4313      	orrs	r3, r2
 8003dee:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	68fa      	ldr	r2, [r7, #12]
 8003df4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	689a      	ldr	r2, [r3, #8]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	681a      	ldr	r2, [r3, #0]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	4a13      	ldr	r2, [pc, #76]	@ (8003e58 <TIM_Base_SetConfig+0xec>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d00b      	beq.n	8003e26 <TIM_Base_SetConfig+0xba>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	4a14      	ldr	r2, [pc, #80]	@ (8003e64 <TIM_Base_SetConfig+0xf8>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d007      	beq.n	8003e26 <TIM_Base_SetConfig+0xba>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	4a13      	ldr	r2, [pc, #76]	@ (8003e68 <TIM_Base_SetConfig+0xfc>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d003      	beq.n	8003e26 <TIM_Base_SetConfig+0xba>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	4a12      	ldr	r2, [pc, #72]	@ (8003e6c <TIM_Base_SetConfig+0x100>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d103      	bne.n	8003e2e <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	691a      	ldr	r2, [r3, #16]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2201      	movs	r2, #1
 8003e32:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	691b      	ldr	r3, [r3, #16]
 8003e38:	2201      	movs	r2, #1
 8003e3a:	4013      	ands	r3, r2
 8003e3c:	2b01      	cmp	r3, #1
 8003e3e:	d106      	bne.n	8003e4e <TIM_Base_SetConfig+0xe2>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	691b      	ldr	r3, [r3, #16]
 8003e44:	2201      	movs	r2, #1
 8003e46:	4393      	bics	r3, r2
 8003e48:	001a      	movs	r2, r3
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	611a      	str	r2, [r3, #16]
  }
}
 8003e4e:	46c0      	nop			@ (mov r8, r8)
 8003e50:	46bd      	mov	sp, r7
 8003e52:	b004      	add	sp, #16
 8003e54:	bd80      	pop	{r7, pc}
 8003e56:	46c0      	nop			@ (mov r8, r8)
 8003e58:	40012c00 	.word	0x40012c00
 8003e5c:	40000400 	.word	0x40000400
 8003e60:	40002000 	.word	0x40002000
 8003e64:	40014000 	.word	0x40014000
 8003e68:	40014400 	.word	0x40014400
 8003e6c:	40014800 	.word	0x40014800
 8003e70:	fffffcff 	.word	0xfffffcff

08003e74 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b086      	sub	sp, #24
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
 8003e7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6a1b      	ldr	r3, [r3, #32]
 8003e82:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6a1b      	ldr	r3, [r3, #32]
 8003e88:	2201      	movs	r2, #1
 8003e8a:	4393      	bics	r3, r2
 8003e8c:	001a      	movs	r2, r3
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	699b      	ldr	r3, [r3, #24]
 8003e9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	4a32      	ldr	r2, [pc, #200]	@ (8003f6c <TIM_OC1_SetConfig+0xf8>)
 8003ea2:	4013      	ands	r3, r2
 8003ea4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	2203      	movs	r2, #3
 8003eaa:	4393      	bics	r3, r2
 8003eac:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	68fa      	ldr	r2, [r7, #12]
 8003eb4:	4313      	orrs	r3, r2
 8003eb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003eb8:	697b      	ldr	r3, [r7, #20]
 8003eba:	2202      	movs	r2, #2
 8003ebc:	4393      	bics	r3, r2
 8003ebe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	689b      	ldr	r3, [r3, #8]
 8003ec4:	697a      	ldr	r2, [r7, #20]
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	4a28      	ldr	r2, [pc, #160]	@ (8003f70 <TIM_OC1_SetConfig+0xfc>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d00b      	beq.n	8003eea <TIM_OC1_SetConfig+0x76>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	4a27      	ldr	r2, [pc, #156]	@ (8003f74 <TIM_OC1_SetConfig+0x100>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d007      	beq.n	8003eea <TIM_OC1_SetConfig+0x76>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	4a26      	ldr	r2, [pc, #152]	@ (8003f78 <TIM_OC1_SetConfig+0x104>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d003      	beq.n	8003eea <TIM_OC1_SetConfig+0x76>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	4a25      	ldr	r2, [pc, #148]	@ (8003f7c <TIM_OC1_SetConfig+0x108>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d10c      	bne.n	8003f04 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003eea:	697b      	ldr	r3, [r7, #20]
 8003eec:	2208      	movs	r2, #8
 8003eee:	4393      	bics	r3, r2
 8003ef0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	68db      	ldr	r3, [r3, #12]
 8003ef6:	697a      	ldr	r2, [r7, #20]
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003efc:	697b      	ldr	r3, [r7, #20]
 8003efe:	2204      	movs	r2, #4
 8003f00:	4393      	bics	r3, r2
 8003f02:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	4a1a      	ldr	r2, [pc, #104]	@ (8003f70 <TIM_OC1_SetConfig+0xfc>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d00b      	beq.n	8003f24 <TIM_OC1_SetConfig+0xb0>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	4a19      	ldr	r2, [pc, #100]	@ (8003f74 <TIM_OC1_SetConfig+0x100>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d007      	beq.n	8003f24 <TIM_OC1_SetConfig+0xb0>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	4a18      	ldr	r2, [pc, #96]	@ (8003f78 <TIM_OC1_SetConfig+0x104>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d003      	beq.n	8003f24 <TIM_OC1_SetConfig+0xb0>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	4a17      	ldr	r2, [pc, #92]	@ (8003f7c <TIM_OC1_SetConfig+0x108>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d111      	bne.n	8003f48 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003f24:	693b      	ldr	r3, [r7, #16]
 8003f26:	4a16      	ldr	r2, [pc, #88]	@ (8003f80 <TIM_OC1_SetConfig+0x10c>)
 8003f28:	4013      	ands	r3, r2
 8003f2a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003f2c:	693b      	ldr	r3, [r7, #16]
 8003f2e:	4a15      	ldr	r2, [pc, #84]	@ (8003f84 <TIM_OC1_SetConfig+0x110>)
 8003f30:	4013      	ands	r3, r2
 8003f32:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	695b      	ldr	r3, [r3, #20]
 8003f38:	693a      	ldr	r2, [r7, #16]
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	699b      	ldr	r3, [r3, #24]
 8003f42:	693a      	ldr	r2, [r7, #16]
 8003f44:	4313      	orrs	r3, r2
 8003f46:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	693a      	ldr	r2, [r7, #16]
 8003f4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	68fa      	ldr	r2, [r7, #12]
 8003f52:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	685a      	ldr	r2, [r3, #4]
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	697a      	ldr	r2, [r7, #20]
 8003f60:	621a      	str	r2, [r3, #32]
}
 8003f62:	46c0      	nop			@ (mov r8, r8)
 8003f64:	46bd      	mov	sp, r7
 8003f66:	b006      	add	sp, #24
 8003f68:	bd80      	pop	{r7, pc}
 8003f6a:	46c0      	nop			@ (mov r8, r8)
 8003f6c:	fffeff8f 	.word	0xfffeff8f
 8003f70:	40012c00 	.word	0x40012c00
 8003f74:	40014000 	.word	0x40014000
 8003f78:	40014400 	.word	0x40014400
 8003f7c:	40014800 	.word	0x40014800
 8003f80:	fffffeff 	.word	0xfffffeff
 8003f84:	fffffdff 	.word	0xfffffdff

08003f88 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b086      	sub	sp, #24
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
 8003f90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6a1b      	ldr	r3, [r3, #32]
 8003f96:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6a1b      	ldr	r3, [r3, #32]
 8003f9c:	2210      	movs	r2, #16
 8003f9e:	4393      	bics	r3, r2
 8003fa0:	001a      	movs	r2, r3
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	699b      	ldr	r3, [r3, #24]
 8003fb0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	4a2e      	ldr	r2, [pc, #184]	@ (8004070 <TIM_OC2_SetConfig+0xe8>)
 8003fb6:	4013      	ands	r3, r2
 8003fb8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	4a2d      	ldr	r2, [pc, #180]	@ (8004074 <TIM_OC2_SetConfig+0xec>)
 8003fbe:	4013      	ands	r3, r2
 8003fc0:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	021b      	lsls	r3, r3, #8
 8003fc8:	68fa      	ldr	r2, [r7, #12]
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003fce:	697b      	ldr	r3, [r7, #20]
 8003fd0:	2220      	movs	r2, #32
 8003fd2:	4393      	bics	r3, r2
 8003fd4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	689b      	ldr	r3, [r3, #8]
 8003fda:	011b      	lsls	r3, r3, #4
 8003fdc:	697a      	ldr	r2, [r7, #20]
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	4a24      	ldr	r2, [pc, #144]	@ (8004078 <TIM_OC2_SetConfig+0xf0>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d10d      	bne.n	8004006 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003fea:	697b      	ldr	r3, [r7, #20]
 8003fec:	2280      	movs	r2, #128	@ 0x80
 8003fee:	4393      	bics	r3, r2
 8003ff0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	68db      	ldr	r3, [r3, #12]
 8003ff6:	011b      	lsls	r3, r3, #4
 8003ff8:	697a      	ldr	r2, [r7, #20]
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	2240      	movs	r2, #64	@ 0x40
 8004002:	4393      	bics	r3, r2
 8004004:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	4a1b      	ldr	r2, [pc, #108]	@ (8004078 <TIM_OC2_SetConfig+0xf0>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d00b      	beq.n	8004026 <TIM_OC2_SetConfig+0x9e>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	4a1a      	ldr	r2, [pc, #104]	@ (800407c <TIM_OC2_SetConfig+0xf4>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d007      	beq.n	8004026 <TIM_OC2_SetConfig+0x9e>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	4a19      	ldr	r2, [pc, #100]	@ (8004080 <TIM_OC2_SetConfig+0xf8>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d003      	beq.n	8004026 <TIM_OC2_SetConfig+0x9e>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	4a18      	ldr	r2, [pc, #96]	@ (8004084 <TIM_OC2_SetConfig+0xfc>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d113      	bne.n	800404e <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004026:	693b      	ldr	r3, [r7, #16]
 8004028:	4a17      	ldr	r2, [pc, #92]	@ (8004088 <TIM_OC2_SetConfig+0x100>)
 800402a:	4013      	ands	r3, r2
 800402c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800402e:	693b      	ldr	r3, [r7, #16]
 8004030:	4a16      	ldr	r2, [pc, #88]	@ (800408c <TIM_OC2_SetConfig+0x104>)
 8004032:	4013      	ands	r3, r2
 8004034:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	695b      	ldr	r3, [r3, #20]
 800403a:	009b      	lsls	r3, r3, #2
 800403c:	693a      	ldr	r2, [r7, #16]
 800403e:	4313      	orrs	r3, r2
 8004040:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	699b      	ldr	r3, [r3, #24]
 8004046:	009b      	lsls	r3, r3, #2
 8004048:	693a      	ldr	r2, [r7, #16]
 800404a:	4313      	orrs	r3, r2
 800404c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	693a      	ldr	r2, [r7, #16]
 8004052:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	68fa      	ldr	r2, [r7, #12]
 8004058:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	685a      	ldr	r2, [r3, #4]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	697a      	ldr	r2, [r7, #20]
 8004066:	621a      	str	r2, [r3, #32]
}
 8004068:	46c0      	nop			@ (mov r8, r8)
 800406a:	46bd      	mov	sp, r7
 800406c:	b006      	add	sp, #24
 800406e:	bd80      	pop	{r7, pc}
 8004070:	feff8fff 	.word	0xfeff8fff
 8004074:	fffffcff 	.word	0xfffffcff
 8004078:	40012c00 	.word	0x40012c00
 800407c:	40014000 	.word	0x40014000
 8004080:	40014400 	.word	0x40014400
 8004084:	40014800 	.word	0x40014800
 8004088:	fffffbff 	.word	0xfffffbff
 800408c:	fffff7ff 	.word	0xfffff7ff

08004090 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b086      	sub	sp, #24
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
 8004098:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6a1b      	ldr	r3, [r3, #32]
 800409e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6a1b      	ldr	r3, [r3, #32]
 80040a4:	4a33      	ldr	r2, [pc, #204]	@ (8004174 <TIM_OC3_SetConfig+0xe4>)
 80040a6:	401a      	ands	r2, r3
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	69db      	ldr	r3, [r3, #28]
 80040b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	4a2f      	ldr	r2, [pc, #188]	@ (8004178 <TIM_OC3_SetConfig+0xe8>)
 80040bc:	4013      	ands	r3, r2
 80040be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	2203      	movs	r2, #3
 80040c4:	4393      	bics	r3, r2
 80040c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	68fa      	ldr	r2, [r7, #12]
 80040ce:	4313      	orrs	r3, r2
 80040d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80040d2:	697b      	ldr	r3, [r7, #20]
 80040d4:	4a29      	ldr	r2, [pc, #164]	@ (800417c <TIM_OC3_SetConfig+0xec>)
 80040d6:	4013      	ands	r3, r2
 80040d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	689b      	ldr	r3, [r3, #8]
 80040de:	021b      	lsls	r3, r3, #8
 80040e0:	697a      	ldr	r2, [r7, #20]
 80040e2:	4313      	orrs	r3, r2
 80040e4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	4a25      	ldr	r2, [pc, #148]	@ (8004180 <TIM_OC3_SetConfig+0xf0>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d10d      	bne.n	800410a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80040ee:	697b      	ldr	r3, [r7, #20]
 80040f0:	4a24      	ldr	r2, [pc, #144]	@ (8004184 <TIM_OC3_SetConfig+0xf4>)
 80040f2:	4013      	ands	r3, r2
 80040f4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	68db      	ldr	r3, [r3, #12]
 80040fa:	021b      	lsls	r3, r3, #8
 80040fc:	697a      	ldr	r2, [r7, #20]
 80040fe:	4313      	orrs	r3, r2
 8004100:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004102:	697b      	ldr	r3, [r7, #20]
 8004104:	4a20      	ldr	r2, [pc, #128]	@ (8004188 <TIM_OC3_SetConfig+0xf8>)
 8004106:	4013      	ands	r3, r2
 8004108:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	4a1c      	ldr	r2, [pc, #112]	@ (8004180 <TIM_OC3_SetConfig+0xf0>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d00b      	beq.n	800412a <TIM_OC3_SetConfig+0x9a>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	4a1d      	ldr	r2, [pc, #116]	@ (800418c <TIM_OC3_SetConfig+0xfc>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d007      	beq.n	800412a <TIM_OC3_SetConfig+0x9a>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	4a1c      	ldr	r2, [pc, #112]	@ (8004190 <TIM_OC3_SetConfig+0x100>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d003      	beq.n	800412a <TIM_OC3_SetConfig+0x9a>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	4a1b      	ldr	r2, [pc, #108]	@ (8004194 <TIM_OC3_SetConfig+0x104>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d113      	bne.n	8004152 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800412a:	693b      	ldr	r3, [r7, #16]
 800412c:	4a1a      	ldr	r2, [pc, #104]	@ (8004198 <TIM_OC3_SetConfig+0x108>)
 800412e:	4013      	ands	r3, r2
 8004130:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004132:	693b      	ldr	r3, [r7, #16]
 8004134:	4a19      	ldr	r2, [pc, #100]	@ (800419c <TIM_OC3_SetConfig+0x10c>)
 8004136:	4013      	ands	r3, r2
 8004138:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	695b      	ldr	r3, [r3, #20]
 800413e:	011b      	lsls	r3, r3, #4
 8004140:	693a      	ldr	r2, [r7, #16]
 8004142:	4313      	orrs	r3, r2
 8004144:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	699b      	ldr	r3, [r3, #24]
 800414a:	011b      	lsls	r3, r3, #4
 800414c:	693a      	ldr	r2, [r7, #16]
 800414e:	4313      	orrs	r3, r2
 8004150:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	693a      	ldr	r2, [r7, #16]
 8004156:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	68fa      	ldr	r2, [r7, #12]
 800415c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	685a      	ldr	r2, [r3, #4]
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	697a      	ldr	r2, [r7, #20]
 800416a:	621a      	str	r2, [r3, #32]
}
 800416c:	46c0      	nop			@ (mov r8, r8)
 800416e:	46bd      	mov	sp, r7
 8004170:	b006      	add	sp, #24
 8004172:	bd80      	pop	{r7, pc}
 8004174:	fffffeff 	.word	0xfffffeff
 8004178:	fffeff8f 	.word	0xfffeff8f
 800417c:	fffffdff 	.word	0xfffffdff
 8004180:	40012c00 	.word	0x40012c00
 8004184:	fffff7ff 	.word	0xfffff7ff
 8004188:	fffffbff 	.word	0xfffffbff
 800418c:	40014000 	.word	0x40014000
 8004190:	40014400 	.word	0x40014400
 8004194:	40014800 	.word	0x40014800
 8004198:	ffffefff 	.word	0xffffefff
 800419c:	ffffdfff 	.word	0xffffdfff

080041a0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b086      	sub	sp, #24
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
 80041a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6a1b      	ldr	r3, [r3, #32]
 80041ae:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6a1b      	ldr	r3, [r3, #32]
 80041b4:	4a26      	ldr	r2, [pc, #152]	@ (8004250 <TIM_OC4_SetConfig+0xb0>)
 80041b6:	401a      	ands	r2, r3
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	69db      	ldr	r3, [r3, #28]
 80041c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	4a22      	ldr	r2, [pc, #136]	@ (8004254 <TIM_OC4_SetConfig+0xb4>)
 80041cc:	4013      	ands	r3, r2
 80041ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	4a21      	ldr	r2, [pc, #132]	@ (8004258 <TIM_OC4_SetConfig+0xb8>)
 80041d4:	4013      	ands	r3, r2
 80041d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	021b      	lsls	r3, r3, #8
 80041de:	68fa      	ldr	r2, [r7, #12]
 80041e0:	4313      	orrs	r3, r2
 80041e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80041e4:	693b      	ldr	r3, [r7, #16]
 80041e6:	4a1d      	ldr	r2, [pc, #116]	@ (800425c <TIM_OC4_SetConfig+0xbc>)
 80041e8:	4013      	ands	r3, r2
 80041ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	689b      	ldr	r3, [r3, #8]
 80041f0:	031b      	lsls	r3, r3, #12
 80041f2:	693a      	ldr	r2, [r7, #16]
 80041f4:	4313      	orrs	r3, r2
 80041f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	4a19      	ldr	r2, [pc, #100]	@ (8004260 <TIM_OC4_SetConfig+0xc0>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d00b      	beq.n	8004218 <TIM_OC4_SetConfig+0x78>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	4a18      	ldr	r2, [pc, #96]	@ (8004264 <TIM_OC4_SetConfig+0xc4>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d007      	beq.n	8004218 <TIM_OC4_SetConfig+0x78>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	4a17      	ldr	r2, [pc, #92]	@ (8004268 <TIM_OC4_SetConfig+0xc8>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d003      	beq.n	8004218 <TIM_OC4_SetConfig+0x78>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	4a16      	ldr	r2, [pc, #88]	@ (800426c <TIM_OC4_SetConfig+0xcc>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d109      	bne.n	800422c <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004218:	697b      	ldr	r3, [r7, #20]
 800421a:	4a15      	ldr	r2, [pc, #84]	@ (8004270 <TIM_OC4_SetConfig+0xd0>)
 800421c:	4013      	ands	r3, r2
 800421e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	695b      	ldr	r3, [r3, #20]
 8004224:	019b      	lsls	r3, r3, #6
 8004226:	697a      	ldr	r2, [r7, #20]
 8004228:	4313      	orrs	r3, r2
 800422a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	697a      	ldr	r2, [r7, #20]
 8004230:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	68fa      	ldr	r2, [r7, #12]
 8004236:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	685a      	ldr	r2, [r3, #4]
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	693a      	ldr	r2, [r7, #16]
 8004244:	621a      	str	r2, [r3, #32]
}
 8004246:	46c0      	nop			@ (mov r8, r8)
 8004248:	46bd      	mov	sp, r7
 800424a:	b006      	add	sp, #24
 800424c:	bd80      	pop	{r7, pc}
 800424e:	46c0      	nop			@ (mov r8, r8)
 8004250:	ffffefff 	.word	0xffffefff
 8004254:	feff8fff 	.word	0xfeff8fff
 8004258:	fffffcff 	.word	0xfffffcff
 800425c:	ffffdfff 	.word	0xffffdfff
 8004260:	40012c00 	.word	0x40012c00
 8004264:	40014000 	.word	0x40014000
 8004268:	40014400 	.word	0x40014400
 800426c:	40014800 	.word	0x40014800
 8004270:	ffffbfff 	.word	0xffffbfff

08004274 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b086      	sub	sp, #24
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
 800427c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6a1b      	ldr	r3, [r3, #32]
 8004282:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6a1b      	ldr	r3, [r3, #32]
 8004288:	4a23      	ldr	r2, [pc, #140]	@ (8004318 <TIM_OC5_SetConfig+0xa4>)
 800428a:	401a      	ands	r2, r3
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800429a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	4a1f      	ldr	r2, [pc, #124]	@ (800431c <TIM_OC5_SetConfig+0xa8>)
 80042a0:	4013      	ands	r3, r2
 80042a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	68fa      	ldr	r2, [r7, #12]
 80042aa:	4313      	orrs	r3, r2
 80042ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80042ae:	693b      	ldr	r3, [r7, #16]
 80042b0:	4a1b      	ldr	r2, [pc, #108]	@ (8004320 <TIM_OC5_SetConfig+0xac>)
 80042b2:	4013      	ands	r3, r2
 80042b4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	689b      	ldr	r3, [r3, #8]
 80042ba:	041b      	lsls	r3, r3, #16
 80042bc:	693a      	ldr	r2, [r7, #16]
 80042be:	4313      	orrs	r3, r2
 80042c0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	4a17      	ldr	r2, [pc, #92]	@ (8004324 <TIM_OC5_SetConfig+0xb0>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d00b      	beq.n	80042e2 <TIM_OC5_SetConfig+0x6e>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	4a16      	ldr	r2, [pc, #88]	@ (8004328 <TIM_OC5_SetConfig+0xb4>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d007      	beq.n	80042e2 <TIM_OC5_SetConfig+0x6e>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	4a15      	ldr	r2, [pc, #84]	@ (800432c <TIM_OC5_SetConfig+0xb8>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d003      	beq.n	80042e2 <TIM_OC5_SetConfig+0x6e>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	4a14      	ldr	r2, [pc, #80]	@ (8004330 <TIM_OC5_SetConfig+0xbc>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d109      	bne.n	80042f6 <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80042e2:	697b      	ldr	r3, [r7, #20]
 80042e4:	4a0c      	ldr	r2, [pc, #48]	@ (8004318 <TIM_OC5_SetConfig+0xa4>)
 80042e6:	4013      	ands	r3, r2
 80042e8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	695b      	ldr	r3, [r3, #20]
 80042ee:	021b      	lsls	r3, r3, #8
 80042f0:	697a      	ldr	r2, [r7, #20]
 80042f2:	4313      	orrs	r3, r2
 80042f4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	697a      	ldr	r2, [r7, #20]
 80042fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	68fa      	ldr	r2, [r7, #12]
 8004300:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	685a      	ldr	r2, [r3, #4]
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	693a      	ldr	r2, [r7, #16]
 800430e:	621a      	str	r2, [r3, #32]
}
 8004310:	46c0      	nop			@ (mov r8, r8)
 8004312:	46bd      	mov	sp, r7
 8004314:	b006      	add	sp, #24
 8004316:	bd80      	pop	{r7, pc}
 8004318:	fffeffff 	.word	0xfffeffff
 800431c:	fffeff8f 	.word	0xfffeff8f
 8004320:	fffdffff 	.word	0xfffdffff
 8004324:	40012c00 	.word	0x40012c00
 8004328:	40014000 	.word	0x40014000
 800432c:	40014400 	.word	0x40014400
 8004330:	40014800 	.word	0x40014800

08004334 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b086      	sub	sp, #24
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
 800433c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6a1b      	ldr	r3, [r3, #32]
 8004342:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6a1b      	ldr	r3, [r3, #32]
 8004348:	4a24      	ldr	r2, [pc, #144]	@ (80043dc <TIM_OC6_SetConfig+0xa8>)
 800434a:	401a      	ands	r2, r3
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800435a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	4a20      	ldr	r2, [pc, #128]	@ (80043e0 <TIM_OC6_SetConfig+0xac>)
 8004360:	4013      	ands	r3, r2
 8004362:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	021b      	lsls	r3, r3, #8
 800436a:	68fa      	ldr	r2, [r7, #12]
 800436c:	4313      	orrs	r3, r2
 800436e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004370:	693b      	ldr	r3, [r7, #16]
 8004372:	4a1c      	ldr	r2, [pc, #112]	@ (80043e4 <TIM_OC6_SetConfig+0xb0>)
 8004374:	4013      	ands	r3, r2
 8004376:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	689b      	ldr	r3, [r3, #8]
 800437c:	051b      	lsls	r3, r3, #20
 800437e:	693a      	ldr	r2, [r7, #16]
 8004380:	4313      	orrs	r3, r2
 8004382:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	4a18      	ldr	r2, [pc, #96]	@ (80043e8 <TIM_OC6_SetConfig+0xb4>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d00b      	beq.n	80043a4 <TIM_OC6_SetConfig+0x70>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	4a17      	ldr	r2, [pc, #92]	@ (80043ec <TIM_OC6_SetConfig+0xb8>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d007      	beq.n	80043a4 <TIM_OC6_SetConfig+0x70>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	4a16      	ldr	r2, [pc, #88]	@ (80043f0 <TIM_OC6_SetConfig+0xbc>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d003      	beq.n	80043a4 <TIM_OC6_SetConfig+0x70>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	4a15      	ldr	r2, [pc, #84]	@ (80043f4 <TIM_OC6_SetConfig+0xc0>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d109      	bne.n	80043b8 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80043a4:	697b      	ldr	r3, [r7, #20]
 80043a6:	4a14      	ldr	r2, [pc, #80]	@ (80043f8 <TIM_OC6_SetConfig+0xc4>)
 80043a8:	4013      	ands	r3, r2
 80043aa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	695b      	ldr	r3, [r3, #20]
 80043b0:	029b      	lsls	r3, r3, #10
 80043b2:	697a      	ldr	r2, [r7, #20]
 80043b4:	4313      	orrs	r3, r2
 80043b6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	697a      	ldr	r2, [r7, #20]
 80043bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	68fa      	ldr	r2, [r7, #12]
 80043c2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	685a      	ldr	r2, [r3, #4]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	693a      	ldr	r2, [r7, #16]
 80043d0:	621a      	str	r2, [r3, #32]
}
 80043d2:	46c0      	nop			@ (mov r8, r8)
 80043d4:	46bd      	mov	sp, r7
 80043d6:	b006      	add	sp, #24
 80043d8:	bd80      	pop	{r7, pc}
 80043da:	46c0      	nop			@ (mov r8, r8)
 80043dc:	ffefffff 	.word	0xffefffff
 80043e0:	feff8fff 	.word	0xfeff8fff
 80043e4:	ffdfffff 	.word	0xffdfffff
 80043e8:	40012c00 	.word	0x40012c00
 80043ec:	40014000 	.word	0x40014000
 80043f0:	40014400 	.word	0x40014400
 80043f4:	40014800 	.word	0x40014800
 80043f8:	fffbffff 	.word	0xfffbffff

080043fc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b086      	sub	sp, #24
 8004400:	af00      	add	r7, sp, #0
 8004402:	60f8      	str	r0, [r7, #12]
 8004404:	60b9      	str	r1, [r7, #8]
 8004406:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	6a1b      	ldr	r3, [r3, #32]
 800440c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	6a1b      	ldr	r3, [r3, #32]
 8004412:	2201      	movs	r2, #1
 8004414:	4393      	bics	r3, r2
 8004416:	001a      	movs	r2, r3
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	699b      	ldr	r3, [r3, #24]
 8004420:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004422:	693b      	ldr	r3, [r7, #16]
 8004424:	22f0      	movs	r2, #240	@ 0xf0
 8004426:	4393      	bics	r3, r2
 8004428:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	011b      	lsls	r3, r3, #4
 800442e:	693a      	ldr	r2, [r7, #16]
 8004430:	4313      	orrs	r3, r2
 8004432:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004434:	697b      	ldr	r3, [r7, #20]
 8004436:	220a      	movs	r2, #10
 8004438:	4393      	bics	r3, r2
 800443a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800443c:	697a      	ldr	r2, [r7, #20]
 800443e:	68bb      	ldr	r3, [r7, #8]
 8004440:	4313      	orrs	r3, r2
 8004442:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	693a      	ldr	r2, [r7, #16]
 8004448:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	697a      	ldr	r2, [r7, #20]
 800444e:	621a      	str	r2, [r3, #32]
}
 8004450:	46c0      	nop			@ (mov r8, r8)
 8004452:	46bd      	mov	sp, r7
 8004454:	b006      	add	sp, #24
 8004456:	bd80      	pop	{r7, pc}

08004458 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b086      	sub	sp, #24
 800445c:	af00      	add	r7, sp, #0
 800445e:	60f8      	str	r0, [r7, #12]
 8004460:	60b9      	str	r1, [r7, #8]
 8004462:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	6a1b      	ldr	r3, [r3, #32]
 8004468:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	6a1b      	ldr	r3, [r3, #32]
 800446e:	2210      	movs	r2, #16
 8004470:	4393      	bics	r3, r2
 8004472:	001a      	movs	r2, r3
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	699b      	ldr	r3, [r3, #24]
 800447c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800447e:	693b      	ldr	r3, [r7, #16]
 8004480:	4a0d      	ldr	r2, [pc, #52]	@ (80044b8 <TIM_TI2_ConfigInputStage+0x60>)
 8004482:	4013      	ands	r3, r2
 8004484:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	031b      	lsls	r3, r3, #12
 800448a:	693a      	ldr	r2, [r7, #16]
 800448c:	4313      	orrs	r3, r2
 800448e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004490:	697b      	ldr	r3, [r7, #20]
 8004492:	22a0      	movs	r2, #160	@ 0xa0
 8004494:	4393      	bics	r3, r2
 8004496:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	011b      	lsls	r3, r3, #4
 800449c:	697a      	ldr	r2, [r7, #20]
 800449e:	4313      	orrs	r3, r2
 80044a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	693a      	ldr	r2, [r7, #16]
 80044a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	697a      	ldr	r2, [r7, #20]
 80044ac:	621a      	str	r2, [r3, #32]
}
 80044ae:	46c0      	nop			@ (mov r8, r8)
 80044b0:	46bd      	mov	sp, r7
 80044b2:	b006      	add	sp, #24
 80044b4:	bd80      	pop	{r7, pc}
 80044b6:	46c0      	nop			@ (mov r8, r8)
 80044b8:	ffff0fff 	.word	0xffff0fff

080044bc <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b084      	sub	sp, #16
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
 80044c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	689b      	ldr	r3, [r3, #8]
 80044ca:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	4a08      	ldr	r2, [pc, #32]	@ (80044f0 <TIM_ITRx_SetConfig+0x34>)
 80044d0:	4013      	ands	r3, r2
 80044d2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80044d4:	683a      	ldr	r2, [r7, #0]
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	4313      	orrs	r3, r2
 80044da:	2207      	movs	r2, #7
 80044dc:	4313      	orrs	r3, r2
 80044de:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	68fa      	ldr	r2, [r7, #12]
 80044e4:	609a      	str	r2, [r3, #8]
}
 80044e6:	46c0      	nop			@ (mov r8, r8)
 80044e8:	46bd      	mov	sp, r7
 80044ea:	b004      	add	sp, #16
 80044ec:	bd80      	pop	{r7, pc}
 80044ee:	46c0      	nop			@ (mov r8, r8)
 80044f0:	ffcfff8f 	.word	0xffcfff8f

080044f4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b086      	sub	sp, #24
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	60f8      	str	r0, [r7, #12]
 80044fc:	60b9      	str	r1, [r7, #8]
 80044fe:	607a      	str	r2, [r7, #4]
 8004500:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	689b      	ldr	r3, [r3, #8]
 8004506:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004508:	697b      	ldr	r3, [r7, #20]
 800450a:	4a09      	ldr	r2, [pc, #36]	@ (8004530 <TIM_ETR_SetConfig+0x3c>)
 800450c:	4013      	ands	r3, r2
 800450e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	021a      	lsls	r2, r3, #8
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	431a      	orrs	r2, r3
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	4313      	orrs	r3, r2
 800451c:	697a      	ldr	r2, [r7, #20]
 800451e:	4313      	orrs	r3, r2
 8004520:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	697a      	ldr	r2, [r7, #20]
 8004526:	609a      	str	r2, [r3, #8]
}
 8004528:	46c0      	nop			@ (mov r8, r8)
 800452a:	46bd      	mov	sp, r7
 800452c:	b006      	add	sp, #24
 800452e:	bd80      	pop	{r7, pc}
 8004530:	ffff00ff 	.word	0xffff00ff

08004534 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b084      	sub	sp, #16
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
 800453c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	223c      	movs	r2, #60	@ 0x3c
 8004542:	5c9b      	ldrb	r3, [r3, r2]
 8004544:	2b01      	cmp	r3, #1
 8004546:	d101      	bne.n	800454c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004548:	2302      	movs	r3, #2
 800454a:	e04f      	b.n	80045ec <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	223c      	movs	r2, #60	@ 0x3c
 8004550:	2101      	movs	r1, #1
 8004552:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	223d      	movs	r2, #61	@ 0x3d
 8004558:	2102      	movs	r1, #2
 800455a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	689b      	ldr	r3, [r3, #8]
 800456a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a20      	ldr	r2, [pc, #128]	@ (80045f4 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d108      	bne.n	8004588 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	4a1f      	ldr	r2, [pc, #124]	@ (80045f8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800457a:	4013      	ands	r3, r2
 800457c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	68fa      	ldr	r2, [r7, #12]
 8004584:	4313      	orrs	r3, r2
 8004586:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	2270      	movs	r2, #112	@ 0x70
 800458c:	4393      	bics	r3, r2
 800458e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	68fa      	ldr	r2, [r7, #12]
 8004596:	4313      	orrs	r3, r2
 8004598:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	68fa      	ldr	r2, [r7, #12]
 80045a0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4a13      	ldr	r2, [pc, #76]	@ (80045f4 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d009      	beq.n	80045c0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4a12      	ldr	r2, [pc, #72]	@ (80045fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d004      	beq.n	80045c0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4a11      	ldr	r2, [pc, #68]	@ (8004600 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d10c      	bne.n	80045da <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	2280      	movs	r2, #128	@ 0x80
 80045c4:	4393      	bics	r3, r2
 80045c6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	689b      	ldr	r3, [r3, #8]
 80045cc:	68ba      	ldr	r2, [r7, #8]
 80045ce:	4313      	orrs	r3, r2
 80045d0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	68ba      	ldr	r2, [r7, #8]
 80045d8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	223d      	movs	r2, #61	@ 0x3d
 80045de:	2101      	movs	r1, #1
 80045e0:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	223c      	movs	r2, #60	@ 0x3c
 80045e6:	2100      	movs	r1, #0
 80045e8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80045ea:	2300      	movs	r3, #0
}
 80045ec:	0018      	movs	r0, r3
 80045ee:	46bd      	mov	sp, r7
 80045f0:	b004      	add	sp, #16
 80045f2:	bd80      	pop	{r7, pc}
 80045f4:	40012c00 	.word	0x40012c00
 80045f8:	ff0fffff 	.word	0xff0fffff
 80045fc:	40000400 	.word	0x40000400
 8004600:	40014000 	.word	0x40014000

08004604 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b084      	sub	sp, #16
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
 800460c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800460e:	2300      	movs	r3, #0
 8004610:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	223c      	movs	r2, #60	@ 0x3c
 8004616:	5c9b      	ldrb	r3, [r3, r2]
 8004618:	2b01      	cmp	r3, #1
 800461a:	d101      	bne.n	8004620 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800461c:	2302      	movs	r3, #2
 800461e:	e06f      	b.n	8004700 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	223c      	movs	r2, #60	@ 0x3c
 8004624:	2101      	movs	r1, #1
 8004626:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	22ff      	movs	r2, #255	@ 0xff
 800462c:	4393      	bics	r3, r2
 800462e:	001a      	movs	r2, r3
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	68db      	ldr	r3, [r3, #12]
 8004634:	4313      	orrs	r3, r2
 8004636:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	4a33      	ldr	r2, [pc, #204]	@ (8004708 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 800463c:	401a      	ands	r2, r3
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	689b      	ldr	r3, [r3, #8]
 8004642:	4313      	orrs	r3, r2
 8004644:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	4a30      	ldr	r2, [pc, #192]	@ (800470c <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 800464a:	401a      	ands	r2, r3
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	4313      	orrs	r3, r2
 8004652:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	4a2e      	ldr	r2, [pc, #184]	@ (8004710 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>)
 8004658:	401a      	ands	r2, r3
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4313      	orrs	r3, r2
 8004660:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	4a2b      	ldr	r2, [pc, #172]	@ (8004714 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8004666:	401a      	ands	r2, r3
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	691b      	ldr	r3, [r3, #16]
 800466c:	4313      	orrs	r3, r2
 800466e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	4a29      	ldr	r2, [pc, #164]	@ (8004718 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8004674:	401a      	ands	r2, r3
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	695b      	ldr	r3, [r3, #20]
 800467a:	4313      	orrs	r3, r2
 800467c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	4a26      	ldr	r2, [pc, #152]	@ (800471c <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8004682:	401a      	ands	r2, r3
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004688:	4313      	orrs	r3, r2
 800468a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	4a24      	ldr	r2, [pc, #144]	@ (8004720 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8004690:	401a      	ands	r2, r3
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	699b      	ldr	r3, [r3, #24]
 8004696:	041b      	lsls	r3, r3, #16
 8004698:	4313      	orrs	r3, r2
 800469a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	4a21      	ldr	r2, [pc, #132]	@ (8004724 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 80046a0:	401a      	ands	r2, r3
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	69db      	ldr	r3, [r3, #28]
 80046a6:	4313      	orrs	r3, r2
 80046a8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4a1e      	ldr	r2, [pc, #120]	@ (8004728 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d11c      	bne.n	80046ee <HAL_TIMEx_ConfigBreakDeadTime+0xea>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	4a1d      	ldr	r2, [pc, #116]	@ (800472c <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 80046b8:	401a      	ands	r2, r3
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046be:	051b      	lsls	r3, r3, #20
 80046c0:	4313      	orrs	r3, r2
 80046c2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	4a1a      	ldr	r2, [pc, #104]	@ (8004730 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 80046c8:	401a      	ands	r2, r3
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	6a1b      	ldr	r3, [r3, #32]
 80046ce:	4313      	orrs	r3, r2
 80046d0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	4a17      	ldr	r2, [pc, #92]	@ (8004734 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 80046d6:	401a      	ands	r2, r3
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046dc:	4313      	orrs	r3, r2
 80046de:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	4a15      	ldr	r2, [pc, #84]	@ (8004738 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 80046e4:	401a      	ands	r2, r3
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046ea:	4313      	orrs	r3, r2
 80046ec:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	68fa      	ldr	r2, [r7, #12]
 80046f4:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	223c      	movs	r2, #60	@ 0x3c
 80046fa:	2100      	movs	r1, #0
 80046fc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80046fe:	2300      	movs	r3, #0
}
 8004700:	0018      	movs	r0, r3
 8004702:	46bd      	mov	sp, r7
 8004704:	b004      	add	sp, #16
 8004706:	bd80      	pop	{r7, pc}
 8004708:	fffffcff 	.word	0xfffffcff
 800470c:	fffffbff 	.word	0xfffffbff
 8004710:	fffff7ff 	.word	0xfffff7ff
 8004714:	ffffefff 	.word	0xffffefff
 8004718:	ffffdfff 	.word	0xffffdfff
 800471c:	ffffbfff 	.word	0xffffbfff
 8004720:	fff0ffff 	.word	0xfff0ffff
 8004724:	efffffff 	.word	0xefffffff
 8004728:	40012c00 	.word	0x40012c00
 800472c:	ff0fffff 	.word	0xff0fffff
 8004730:	feffffff 	.word	0xfeffffff
 8004734:	fdffffff 	.word	0xfdffffff
 8004738:	dfffffff 	.word	0xdfffffff

0800473c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b082      	sub	sp, #8
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d101      	bne.n	800474e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800474a:	2301      	movs	r3, #1
 800474c:	e046      	b.n	80047dc <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2288      	movs	r2, #136	@ 0x88
 8004752:	589b      	ldr	r3, [r3, r2]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d107      	bne.n	8004768 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2284      	movs	r2, #132	@ 0x84
 800475c:	2100      	movs	r1, #0
 800475e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	0018      	movs	r0, r3
 8004764:	f7fc fda8 	bl	80012b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2288      	movs	r2, #136	@ 0x88
 800476c:	2124      	movs	r1, #36	@ 0x24
 800476e:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	681a      	ldr	r2, [r3, #0]
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	2101      	movs	r1, #1
 800477c:	438a      	bics	r2, r1
 800477e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004784:	2b00      	cmp	r3, #0
 8004786:	d003      	beq.n	8004790 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	0018      	movs	r0, r3
 800478c:	f000 f9d0 	bl	8004b30 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	0018      	movs	r0, r3
 8004794:	f000 f828 	bl	80047e8 <UART_SetConfig>
 8004798:	0003      	movs	r3, r0
 800479a:	2b01      	cmp	r3, #1
 800479c:	d101      	bne.n	80047a2 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 800479e:	2301      	movs	r3, #1
 80047a0:	e01c      	b.n	80047dc <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	685a      	ldr	r2, [r3, #4]
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	490d      	ldr	r1, [pc, #52]	@ (80047e4 <HAL_UART_Init+0xa8>)
 80047ae:	400a      	ands	r2, r1
 80047b0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	689a      	ldr	r2, [r3, #8]
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	212a      	movs	r1, #42	@ 0x2a
 80047be:	438a      	bics	r2, r1
 80047c0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	681a      	ldr	r2, [r3, #0]
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	2101      	movs	r1, #1
 80047ce:	430a      	orrs	r2, r1
 80047d0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	0018      	movs	r0, r3
 80047d6:	f000 fa5f 	bl	8004c98 <UART_CheckIdleState>
 80047da:	0003      	movs	r3, r0
}
 80047dc:	0018      	movs	r0, r3
 80047de:	46bd      	mov	sp, r7
 80047e0:	b002      	add	sp, #8
 80047e2:	bd80      	pop	{r7, pc}
 80047e4:	ffffb7ff 	.word	0xffffb7ff

080047e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b088      	sub	sp, #32
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80047f0:	231a      	movs	r3, #26
 80047f2:	18fb      	adds	r3, r7, r3
 80047f4:	2200      	movs	r2, #0
 80047f6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	689a      	ldr	r2, [r3, #8]
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	691b      	ldr	r3, [r3, #16]
 8004800:	431a      	orrs	r2, r3
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	695b      	ldr	r3, [r3, #20]
 8004806:	431a      	orrs	r2, r3
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	69db      	ldr	r3, [r3, #28]
 800480c:	4313      	orrs	r3, r2
 800480e:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4abc      	ldr	r2, [pc, #752]	@ (8004b08 <UART_SetConfig+0x320>)
 8004818:	4013      	ands	r3, r2
 800481a:	0019      	movs	r1, r3
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	69fa      	ldr	r2, [r7, #28]
 8004822:	430a      	orrs	r2, r1
 8004824:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	4ab7      	ldr	r2, [pc, #732]	@ (8004b0c <UART_SetConfig+0x324>)
 800482e:	4013      	ands	r3, r2
 8004830:	0019      	movs	r1, r3
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	68da      	ldr	r2, [r3, #12]
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	430a      	orrs	r2, r1
 800483c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	699b      	ldr	r3, [r3, #24]
 8004842:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6a1b      	ldr	r3, [r3, #32]
 8004848:	69fa      	ldr	r2, [r7, #28]
 800484a:	4313      	orrs	r3, r2
 800484c:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	689b      	ldr	r3, [r3, #8]
 8004854:	4aae      	ldr	r2, [pc, #696]	@ (8004b10 <UART_SetConfig+0x328>)
 8004856:	4013      	ands	r3, r2
 8004858:	0019      	movs	r1, r3
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	69fa      	ldr	r2, [r7, #28]
 8004860:	430a      	orrs	r2, r1
 8004862:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800486a:	220f      	movs	r2, #15
 800486c:	4393      	bics	r3, r2
 800486e:	0019      	movs	r1, r3
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	430a      	orrs	r2, r1
 800487a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	4aa4      	ldr	r2, [pc, #656]	@ (8004b14 <UART_SetConfig+0x32c>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d127      	bne.n	80048d6 <UART_SetConfig+0xee>
 8004886:	4ba4      	ldr	r3, [pc, #656]	@ (8004b18 <UART_SetConfig+0x330>)
 8004888:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800488a:	2203      	movs	r2, #3
 800488c:	4013      	ands	r3, r2
 800488e:	2b03      	cmp	r3, #3
 8004890:	d017      	beq.n	80048c2 <UART_SetConfig+0xda>
 8004892:	d81b      	bhi.n	80048cc <UART_SetConfig+0xe4>
 8004894:	2b02      	cmp	r3, #2
 8004896:	d00a      	beq.n	80048ae <UART_SetConfig+0xc6>
 8004898:	d818      	bhi.n	80048cc <UART_SetConfig+0xe4>
 800489a:	2b00      	cmp	r3, #0
 800489c:	d002      	beq.n	80048a4 <UART_SetConfig+0xbc>
 800489e:	2b01      	cmp	r3, #1
 80048a0:	d00a      	beq.n	80048b8 <UART_SetConfig+0xd0>
 80048a2:	e013      	b.n	80048cc <UART_SetConfig+0xe4>
 80048a4:	231b      	movs	r3, #27
 80048a6:	18fb      	adds	r3, r7, r3
 80048a8:	2200      	movs	r2, #0
 80048aa:	701a      	strb	r2, [r3, #0]
 80048ac:	e058      	b.n	8004960 <UART_SetConfig+0x178>
 80048ae:	231b      	movs	r3, #27
 80048b0:	18fb      	adds	r3, r7, r3
 80048b2:	2202      	movs	r2, #2
 80048b4:	701a      	strb	r2, [r3, #0]
 80048b6:	e053      	b.n	8004960 <UART_SetConfig+0x178>
 80048b8:	231b      	movs	r3, #27
 80048ba:	18fb      	adds	r3, r7, r3
 80048bc:	2204      	movs	r2, #4
 80048be:	701a      	strb	r2, [r3, #0]
 80048c0:	e04e      	b.n	8004960 <UART_SetConfig+0x178>
 80048c2:	231b      	movs	r3, #27
 80048c4:	18fb      	adds	r3, r7, r3
 80048c6:	2208      	movs	r2, #8
 80048c8:	701a      	strb	r2, [r3, #0]
 80048ca:	e049      	b.n	8004960 <UART_SetConfig+0x178>
 80048cc:	231b      	movs	r3, #27
 80048ce:	18fb      	adds	r3, r7, r3
 80048d0:	2210      	movs	r2, #16
 80048d2:	701a      	strb	r2, [r3, #0]
 80048d4:	e044      	b.n	8004960 <UART_SetConfig+0x178>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4a90      	ldr	r2, [pc, #576]	@ (8004b1c <UART_SetConfig+0x334>)
 80048dc:	4293      	cmp	r3, r2
 80048de:	d127      	bne.n	8004930 <UART_SetConfig+0x148>
 80048e0:	4b8d      	ldr	r3, [pc, #564]	@ (8004b18 <UART_SetConfig+0x330>)
 80048e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048e4:	220c      	movs	r2, #12
 80048e6:	4013      	ands	r3, r2
 80048e8:	2b0c      	cmp	r3, #12
 80048ea:	d017      	beq.n	800491c <UART_SetConfig+0x134>
 80048ec:	d81b      	bhi.n	8004926 <UART_SetConfig+0x13e>
 80048ee:	2b08      	cmp	r3, #8
 80048f0:	d00a      	beq.n	8004908 <UART_SetConfig+0x120>
 80048f2:	d818      	bhi.n	8004926 <UART_SetConfig+0x13e>
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d002      	beq.n	80048fe <UART_SetConfig+0x116>
 80048f8:	2b04      	cmp	r3, #4
 80048fa:	d00a      	beq.n	8004912 <UART_SetConfig+0x12a>
 80048fc:	e013      	b.n	8004926 <UART_SetConfig+0x13e>
 80048fe:	231b      	movs	r3, #27
 8004900:	18fb      	adds	r3, r7, r3
 8004902:	2200      	movs	r2, #0
 8004904:	701a      	strb	r2, [r3, #0]
 8004906:	e02b      	b.n	8004960 <UART_SetConfig+0x178>
 8004908:	231b      	movs	r3, #27
 800490a:	18fb      	adds	r3, r7, r3
 800490c:	2202      	movs	r2, #2
 800490e:	701a      	strb	r2, [r3, #0]
 8004910:	e026      	b.n	8004960 <UART_SetConfig+0x178>
 8004912:	231b      	movs	r3, #27
 8004914:	18fb      	adds	r3, r7, r3
 8004916:	2204      	movs	r2, #4
 8004918:	701a      	strb	r2, [r3, #0]
 800491a:	e021      	b.n	8004960 <UART_SetConfig+0x178>
 800491c:	231b      	movs	r3, #27
 800491e:	18fb      	adds	r3, r7, r3
 8004920:	2208      	movs	r2, #8
 8004922:	701a      	strb	r2, [r3, #0]
 8004924:	e01c      	b.n	8004960 <UART_SetConfig+0x178>
 8004926:	231b      	movs	r3, #27
 8004928:	18fb      	adds	r3, r7, r3
 800492a:	2210      	movs	r2, #16
 800492c:	701a      	strb	r2, [r3, #0]
 800492e:	e017      	b.n	8004960 <UART_SetConfig+0x178>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4a7a      	ldr	r2, [pc, #488]	@ (8004b20 <UART_SetConfig+0x338>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d104      	bne.n	8004944 <UART_SetConfig+0x15c>
 800493a:	231b      	movs	r3, #27
 800493c:	18fb      	adds	r3, r7, r3
 800493e:	2200      	movs	r2, #0
 8004940:	701a      	strb	r2, [r3, #0]
 8004942:	e00d      	b.n	8004960 <UART_SetConfig+0x178>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4a76      	ldr	r2, [pc, #472]	@ (8004b24 <UART_SetConfig+0x33c>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d104      	bne.n	8004958 <UART_SetConfig+0x170>
 800494e:	231b      	movs	r3, #27
 8004950:	18fb      	adds	r3, r7, r3
 8004952:	2200      	movs	r2, #0
 8004954:	701a      	strb	r2, [r3, #0]
 8004956:	e003      	b.n	8004960 <UART_SetConfig+0x178>
 8004958:	231b      	movs	r3, #27
 800495a:	18fb      	adds	r3, r7, r3
 800495c:	2210      	movs	r2, #16
 800495e:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	69da      	ldr	r2, [r3, #28]
 8004964:	2380      	movs	r3, #128	@ 0x80
 8004966:	021b      	lsls	r3, r3, #8
 8004968:	429a      	cmp	r2, r3
 800496a:	d000      	beq.n	800496e <UART_SetConfig+0x186>
 800496c:	e065      	b.n	8004a3a <UART_SetConfig+0x252>
  {
    switch (clocksource)
 800496e:	231b      	movs	r3, #27
 8004970:	18fb      	adds	r3, r7, r3
 8004972:	781b      	ldrb	r3, [r3, #0]
 8004974:	2b08      	cmp	r3, #8
 8004976:	d015      	beq.n	80049a4 <UART_SetConfig+0x1bc>
 8004978:	dc18      	bgt.n	80049ac <UART_SetConfig+0x1c4>
 800497a:	2b04      	cmp	r3, #4
 800497c:	d00d      	beq.n	800499a <UART_SetConfig+0x1b2>
 800497e:	dc15      	bgt.n	80049ac <UART_SetConfig+0x1c4>
 8004980:	2b00      	cmp	r3, #0
 8004982:	d002      	beq.n	800498a <UART_SetConfig+0x1a2>
 8004984:	2b02      	cmp	r3, #2
 8004986:	d005      	beq.n	8004994 <UART_SetConfig+0x1ac>
 8004988:	e010      	b.n	80049ac <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800498a:	f7fe fcd1 	bl	8003330 <HAL_RCC_GetPCLK1Freq>
 800498e:	0003      	movs	r3, r0
 8004990:	617b      	str	r3, [r7, #20]
        break;
 8004992:	e012      	b.n	80049ba <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004994:	4b64      	ldr	r3, [pc, #400]	@ (8004b28 <UART_SetConfig+0x340>)
 8004996:	617b      	str	r3, [r7, #20]
        break;
 8004998:	e00f      	b.n	80049ba <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800499a:	f7fe fc3d 	bl	8003218 <HAL_RCC_GetSysClockFreq>
 800499e:	0003      	movs	r3, r0
 80049a0:	617b      	str	r3, [r7, #20]
        break;
 80049a2:	e00a      	b.n	80049ba <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80049a4:	2380      	movs	r3, #128	@ 0x80
 80049a6:	021b      	lsls	r3, r3, #8
 80049a8:	617b      	str	r3, [r7, #20]
        break;
 80049aa:	e006      	b.n	80049ba <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 80049ac:	2300      	movs	r3, #0
 80049ae:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80049b0:	231a      	movs	r3, #26
 80049b2:	18fb      	adds	r3, r7, r3
 80049b4:	2201      	movs	r2, #1
 80049b6:	701a      	strb	r2, [r3, #0]
        break;
 80049b8:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80049ba:	697b      	ldr	r3, [r7, #20]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d100      	bne.n	80049c2 <UART_SetConfig+0x1da>
 80049c0:	e08d      	b.n	8004ade <UART_SetConfig+0x2f6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80049c6:	4b59      	ldr	r3, [pc, #356]	@ (8004b2c <UART_SetConfig+0x344>)
 80049c8:	0052      	lsls	r2, r2, #1
 80049ca:	5ad3      	ldrh	r3, [r2, r3]
 80049cc:	0019      	movs	r1, r3
 80049ce:	6978      	ldr	r0, [r7, #20]
 80049d0:	f7fb fbf2 	bl	80001b8 <__udivsi3>
 80049d4:	0003      	movs	r3, r0
 80049d6:	005a      	lsls	r2, r3, #1
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	685b      	ldr	r3, [r3, #4]
 80049dc:	085b      	lsrs	r3, r3, #1
 80049de:	18d2      	adds	r2, r2, r3
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	0019      	movs	r1, r3
 80049e6:	0010      	movs	r0, r2
 80049e8:	f7fb fbe6 	bl	80001b8 <__udivsi3>
 80049ec:	0003      	movs	r3, r0
 80049ee:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80049f0:	693b      	ldr	r3, [r7, #16]
 80049f2:	2b0f      	cmp	r3, #15
 80049f4:	d91c      	bls.n	8004a30 <UART_SetConfig+0x248>
 80049f6:	693a      	ldr	r2, [r7, #16]
 80049f8:	2380      	movs	r3, #128	@ 0x80
 80049fa:	025b      	lsls	r3, r3, #9
 80049fc:	429a      	cmp	r2, r3
 80049fe:	d217      	bcs.n	8004a30 <UART_SetConfig+0x248>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004a00:	693b      	ldr	r3, [r7, #16]
 8004a02:	b29a      	uxth	r2, r3
 8004a04:	200e      	movs	r0, #14
 8004a06:	183b      	adds	r3, r7, r0
 8004a08:	210f      	movs	r1, #15
 8004a0a:	438a      	bics	r2, r1
 8004a0c:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004a0e:	693b      	ldr	r3, [r7, #16]
 8004a10:	085b      	lsrs	r3, r3, #1
 8004a12:	b29b      	uxth	r3, r3
 8004a14:	2207      	movs	r2, #7
 8004a16:	4013      	ands	r3, r2
 8004a18:	b299      	uxth	r1, r3
 8004a1a:	183b      	adds	r3, r7, r0
 8004a1c:	183a      	adds	r2, r7, r0
 8004a1e:	8812      	ldrh	r2, [r2, #0]
 8004a20:	430a      	orrs	r2, r1
 8004a22:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	183a      	adds	r2, r7, r0
 8004a2a:	8812      	ldrh	r2, [r2, #0]
 8004a2c:	60da      	str	r2, [r3, #12]
 8004a2e:	e056      	b.n	8004ade <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 8004a30:	231a      	movs	r3, #26
 8004a32:	18fb      	adds	r3, r7, r3
 8004a34:	2201      	movs	r2, #1
 8004a36:	701a      	strb	r2, [r3, #0]
 8004a38:	e051      	b.n	8004ade <UART_SetConfig+0x2f6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004a3a:	231b      	movs	r3, #27
 8004a3c:	18fb      	adds	r3, r7, r3
 8004a3e:	781b      	ldrb	r3, [r3, #0]
 8004a40:	2b08      	cmp	r3, #8
 8004a42:	d015      	beq.n	8004a70 <UART_SetConfig+0x288>
 8004a44:	dc18      	bgt.n	8004a78 <UART_SetConfig+0x290>
 8004a46:	2b04      	cmp	r3, #4
 8004a48:	d00d      	beq.n	8004a66 <UART_SetConfig+0x27e>
 8004a4a:	dc15      	bgt.n	8004a78 <UART_SetConfig+0x290>
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d002      	beq.n	8004a56 <UART_SetConfig+0x26e>
 8004a50:	2b02      	cmp	r3, #2
 8004a52:	d005      	beq.n	8004a60 <UART_SetConfig+0x278>
 8004a54:	e010      	b.n	8004a78 <UART_SetConfig+0x290>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a56:	f7fe fc6b 	bl	8003330 <HAL_RCC_GetPCLK1Freq>
 8004a5a:	0003      	movs	r3, r0
 8004a5c:	617b      	str	r3, [r7, #20]
        break;
 8004a5e:	e012      	b.n	8004a86 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a60:	4b31      	ldr	r3, [pc, #196]	@ (8004b28 <UART_SetConfig+0x340>)
 8004a62:	617b      	str	r3, [r7, #20]
        break;
 8004a64:	e00f      	b.n	8004a86 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a66:	f7fe fbd7 	bl	8003218 <HAL_RCC_GetSysClockFreq>
 8004a6a:	0003      	movs	r3, r0
 8004a6c:	617b      	str	r3, [r7, #20]
        break;
 8004a6e:	e00a      	b.n	8004a86 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a70:	2380      	movs	r3, #128	@ 0x80
 8004a72:	021b      	lsls	r3, r3, #8
 8004a74:	617b      	str	r3, [r7, #20]
        break;
 8004a76:	e006      	b.n	8004a86 <UART_SetConfig+0x29e>
      default:
        pclk = 0U;
 8004a78:	2300      	movs	r3, #0
 8004a7a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004a7c:	231a      	movs	r3, #26
 8004a7e:	18fb      	adds	r3, r7, r3
 8004a80:	2201      	movs	r2, #1
 8004a82:	701a      	strb	r2, [r3, #0]
        break;
 8004a84:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8004a86:	697b      	ldr	r3, [r7, #20]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d028      	beq.n	8004ade <UART_SetConfig+0x2f6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004a90:	4b26      	ldr	r3, [pc, #152]	@ (8004b2c <UART_SetConfig+0x344>)
 8004a92:	0052      	lsls	r2, r2, #1
 8004a94:	5ad3      	ldrh	r3, [r2, r3]
 8004a96:	0019      	movs	r1, r3
 8004a98:	6978      	ldr	r0, [r7, #20]
 8004a9a:	f7fb fb8d 	bl	80001b8 <__udivsi3>
 8004a9e:	0003      	movs	r3, r0
 8004aa0:	001a      	movs	r2, r3
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	085b      	lsrs	r3, r3, #1
 8004aa8:	18d2      	adds	r2, r2, r3
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	685b      	ldr	r3, [r3, #4]
 8004aae:	0019      	movs	r1, r3
 8004ab0:	0010      	movs	r0, r2
 8004ab2:	f7fb fb81 	bl	80001b8 <__udivsi3>
 8004ab6:	0003      	movs	r3, r0
 8004ab8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004aba:	693b      	ldr	r3, [r7, #16]
 8004abc:	2b0f      	cmp	r3, #15
 8004abe:	d90a      	bls.n	8004ad6 <UART_SetConfig+0x2ee>
 8004ac0:	693a      	ldr	r2, [r7, #16]
 8004ac2:	2380      	movs	r3, #128	@ 0x80
 8004ac4:	025b      	lsls	r3, r3, #9
 8004ac6:	429a      	cmp	r2, r3
 8004ac8:	d205      	bcs.n	8004ad6 <UART_SetConfig+0x2ee>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004aca:	693b      	ldr	r3, [r7, #16]
 8004acc:	b29a      	uxth	r2, r3
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	60da      	str	r2, [r3, #12]
 8004ad4:	e003      	b.n	8004ade <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 8004ad6:	231a      	movs	r3, #26
 8004ad8:	18fb      	adds	r3, r7, r3
 8004ada:	2201      	movs	r2, #1
 8004adc:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	226a      	movs	r2, #106	@ 0x6a
 8004ae2:	2101      	movs	r1, #1
 8004ae4:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2268      	movs	r2, #104	@ 0x68
 8004aea:	2101      	movs	r1, #1
 8004aec:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2200      	movs	r2, #0
 8004af2:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2200      	movs	r2, #0
 8004af8:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8004afa:	231a      	movs	r3, #26
 8004afc:	18fb      	adds	r3, r7, r3
 8004afe:	781b      	ldrb	r3, [r3, #0]
}
 8004b00:	0018      	movs	r0, r3
 8004b02:	46bd      	mov	sp, r7
 8004b04:	b008      	add	sp, #32
 8004b06:	bd80      	pop	{r7, pc}
 8004b08:	cfff69f3 	.word	0xcfff69f3
 8004b0c:	ffffcfff 	.word	0xffffcfff
 8004b10:	11fff4ff 	.word	0x11fff4ff
 8004b14:	40013800 	.word	0x40013800
 8004b18:	40021000 	.word	0x40021000
 8004b1c:	40004400 	.word	0x40004400
 8004b20:	40004800 	.word	0x40004800
 8004b24:	40004c00 	.word	0x40004c00
 8004b28:	00f42400 	.word	0x00f42400
 8004b2c:	08005650 	.word	0x08005650

08004b30 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b082      	sub	sp, #8
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b3c:	2208      	movs	r2, #8
 8004b3e:	4013      	ands	r3, r2
 8004b40:	d00b      	beq.n	8004b5a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	685b      	ldr	r3, [r3, #4]
 8004b48:	4a4a      	ldr	r2, [pc, #296]	@ (8004c74 <UART_AdvFeatureConfig+0x144>)
 8004b4a:	4013      	ands	r3, r2
 8004b4c:	0019      	movs	r1, r3
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	430a      	orrs	r2, r1
 8004b58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b5e:	2201      	movs	r2, #1
 8004b60:	4013      	ands	r3, r2
 8004b62:	d00b      	beq.n	8004b7c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	685b      	ldr	r3, [r3, #4]
 8004b6a:	4a43      	ldr	r2, [pc, #268]	@ (8004c78 <UART_AdvFeatureConfig+0x148>)
 8004b6c:	4013      	ands	r3, r2
 8004b6e:	0019      	movs	r1, r3
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	430a      	orrs	r2, r1
 8004b7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b80:	2202      	movs	r2, #2
 8004b82:	4013      	ands	r3, r2
 8004b84:	d00b      	beq.n	8004b9e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	685b      	ldr	r3, [r3, #4]
 8004b8c:	4a3b      	ldr	r2, [pc, #236]	@ (8004c7c <UART_AdvFeatureConfig+0x14c>)
 8004b8e:	4013      	ands	r3, r2
 8004b90:	0019      	movs	r1, r3
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	430a      	orrs	r2, r1
 8004b9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ba2:	2204      	movs	r2, #4
 8004ba4:	4013      	ands	r3, r2
 8004ba6:	d00b      	beq.n	8004bc0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	685b      	ldr	r3, [r3, #4]
 8004bae:	4a34      	ldr	r2, [pc, #208]	@ (8004c80 <UART_AdvFeatureConfig+0x150>)
 8004bb0:	4013      	ands	r3, r2
 8004bb2:	0019      	movs	r1, r3
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	430a      	orrs	r2, r1
 8004bbe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bc4:	2210      	movs	r2, #16
 8004bc6:	4013      	ands	r3, r2
 8004bc8:	d00b      	beq.n	8004be2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	689b      	ldr	r3, [r3, #8]
 8004bd0:	4a2c      	ldr	r2, [pc, #176]	@ (8004c84 <UART_AdvFeatureConfig+0x154>)
 8004bd2:	4013      	ands	r3, r2
 8004bd4:	0019      	movs	r1, r3
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	430a      	orrs	r2, r1
 8004be0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004be6:	2220      	movs	r2, #32
 8004be8:	4013      	ands	r3, r2
 8004bea:	d00b      	beq.n	8004c04 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	689b      	ldr	r3, [r3, #8]
 8004bf2:	4a25      	ldr	r2, [pc, #148]	@ (8004c88 <UART_AdvFeatureConfig+0x158>)
 8004bf4:	4013      	ands	r3, r2
 8004bf6:	0019      	movs	r1, r3
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	430a      	orrs	r2, r1
 8004c02:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c08:	2240      	movs	r2, #64	@ 0x40
 8004c0a:	4013      	ands	r3, r2
 8004c0c:	d01d      	beq.n	8004c4a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	685b      	ldr	r3, [r3, #4]
 8004c14:	4a1d      	ldr	r2, [pc, #116]	@ (8004c8c <UART_AdvFeatureConfig+0x15c>)
 8004c16:	4013      	ands	r3, r2
 8004c18:	0019      	movs	r1, r3
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	430a      	orrs	r2, r1
 8004c24:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004c2a:	2380      	movs	r3, #128	@ 0x80
 8004c2c:	035b      	lsls	r3, r3, #13
 8004c2e:	429a      	cmp	r2, r3
 8004c30:	d10b      	bne.n	8004c4a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	4a15      	ldr	r2, [pc, #84]	@ (8004c90 <UART_AdvFeatureConfig+0x160>)
 8004c3a:	4013      	ands	r3, r2
 8004c3c:	0019      	movs	r1, r3
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	430a      	orrs	r2, r1
 8004c48:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c4e:	2280      	movs	r2, #128	@ 0x80
 8004c50:	4013      	ands	r3, r2
 8004c52:	d00b      	beq.n	8004c6c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	685b      	ldr	r3, [r3, #4]
 8004c5a:	4a0e      	ldr	r2, [pc, #56]	@ (8004c94 <UART_AdvFeatureConfig+0x164>)
 8004c5c:	4013      	ands	r3, r2
 8004c5e:	0019      	movs	r1, r3
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	430a      	orrs	r2, r1
 8004c6a:	605a      	str	r2, [r3, #4]
  }
}
 8004c6c:	46c0      	nop			@ (mov r8, r8)
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	b002      	add	sp, #8
 8004c72:	bd80      	pop	{r7, pc}
 8004c74:	ffff7fff 	.word	0xffff7fff
 8004c78:	fffdffff 	.word	0xfffdffff
 8004c7c:	fffeffff 	.word	0xfffeffff
 8004c80:	fffbffff 	.word	0xfffbffff
 8004c84:	ffffefff 	.word	0xffffefff
 8004c88:	ffffdfff 	.word	0xffffdfff
 8004c8c:	ffefffff 	.word	0xffefffff
 8004c90:	ff9fffff 	.word	0xff9fffff
 8004c94:	fff7ffff 	.word	0xfff7ffff

08004c98 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b092      	sub	sp, #72	@ 0x48
 8004c9c:	af02      	add	r7, sp, #8
 8004c9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2290      	movs	r2, #144	@ 0x90
 8004ca4:	2100      	movs	r1, #0
 8004ca6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004ca8:	f7fc fbee 	bl	8001488 <HAL_GetTick>
 8004cac:	0003      	movs	r3, r0
 8004cae:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	2208      	movs	r2, #8
 8004cb8:	4013      	ands	r3, r2
 8004cba:	2b08      	cmp	r3, #8
 8004cbc:	d12d      	bne.n	8004d1a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004cbe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004cc0:	2280      	movs	r2, #128	@ 0x80
 8004cc2:	0391      	lsls	r1, r2, #14
 8004cc4:	6878      	ldr	r0, [r7, #4]
 8004cc6:	4a47      	ldr	r2, [pc, #284]	@ (8004de4 <UART_CheckIdleState+0x14c>)
 8004cc8:	9200      	str	r2, [sp, #0]
 8004cca:	2200      	movs	r2, #0
 8004ccc:	f000 f88e 	bl	8004dec <UART_WaitOnFlagUntilTimeout>
 8004cd0:	1e03      	subs	r3, r0, #0
 8004cd2:	d022      	beq.n	8004d1a <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004cd4:	f3ef 8310 	mrs	r3, PRIMASK
 8004cd8:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8004cda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004cdc:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004cde:	2301      	movs	r3, #1
 8004ce0:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ce2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ce4:	f383 8810 	msr	PRIMASK, r3
}
 8004ce8:	46c0      	nop			@ (mov r8, r8)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	681a      	ldr	r2, [r3, #0]
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	2180      	movs	r1, #128	@ 0x80
 8004cf6:	438a      	bics	r2, r1
 8004cf8:	601a      	str	r2, [r3, #0]
 8004cfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d00:	f383 8810 	msr	PRIMASK, r3
}
 8004d04:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2288      	movs	r2, #136	@ 0x88
 8004d0a:	2120      	movs	r1, #32
 8004d0c:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2284      	movs	r2, #132	@ 0x84
 8004d12:	2100      	movs	r1, #0
 8004d14:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004d16:	2303      	movs	r3, #3
 8004d18:	e060      	b.n	8004ddc <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	2204      	movs	r2, #4
 8004d22:	4013      	ands	r3, r2
 8004d24:	2b04      	cmp	r3, #4
 8004d26:	d146      	bne.n	8004db6 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004d28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d2a:	2280      	movs	r2, #128	@ 0x80
 8004d2c:	03d1      	lsls	r1, r2, #15
 8004d2e:	6878      	ldr	r0, [r7, #4]
 8004d30:	4a2c      	ldr	r2, [pc, #176]	@ (8004de4 <UART_CheckIdleState+0x14c>)
 8004d32:	9200      	str	r2, [sp, #0]
 8004d34:	2200      	movs	r2, #0
 8004d36:	f000 f859 	bl	8004dec <UART_WaitOnFlagUntilTimeout>
 8004d3a:	1e03      	subs	r3, r0, #0
 8004d3c:	d03b      	beq.n	8004db6 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d3e:	f3ef 8310 	mrs	r3, PRIMASK
 8004d42:	60fb      	str	r3, [r7, #12]
  return(result);
 8004d44:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004d46:	637b      	str	r3, [r7, #52]	@ 0x34
 8004d48:	2301      	movs	r3, #1
 8004d4a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d4c:	693b      	ldr	r3, [r7, #16]
 8004d4e:	f383 8810 	msr	PRIMASK, r3
}
 8004d52:	46c0      	nop			@ (mov r8, r8)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	681a      	ldr	r2, [r3, #0]
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4922      	ldr	r1, [pc, #136]	@ (8004de8 <UART_CheckIdleState+0x150>)
 8004d60:	400a      	ands	r2, r1
 8004d62:	601a      	str	r2, [r3, #0]
 8004d64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d66:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d68:	697b      	ldr	r3, [r7, #20]
 8004d6a:	f383 8810 	msr	PRIMASK, r3
}
 8004d6e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d70:	f3ef 8310 	mrs	r3, PRIMASK
 8004d74:	61bb      	str	r3, [r7, #24]
  return(result);
 8004d76:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d78:	633b      	str	r3, [r7, #48]	@ 0x30
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d7e:	69fb      	ldr	r3, [r7, #28]
 8004d80:	f383 8810 	msr	PRIMASK, r3
}
 8004d84:	46c0      	nop			@ (mov r8, r8)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	689a      	ldr	r2, [r3, #8]
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	2101      	movs	r1, #1
 8004d92:	438a      	bics	r2, r1
 8004d94:	609a      	str	r2, [r3, #8]
 8004d96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d98:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d9a:	6a3b      	ldr	r3, [r7, #32]
 8004d9c:	f383 8810 	msr	PRIMASK, r3
}
 8004da0:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	228c      	movs	r2, #140	@ 0x8c
 8004da6:	2120      	movs	r1, #32
 8004da8:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2284      	movs	r2, #132	@ 0x84
 8004dae:	2100      	movs	r1, #0
 8004db0:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004db2:	2303      	movs	r3, #3
 8004db4:	e012      	b.n	8004ddc <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2288      	movs	r2, #136	@ 0x88
 8004dba:	2120      	movs	r1, #32
 8004dbc:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	228c      	movs	r2, #140	@ 0x8c
 8004dc2:	2120      	movs	r1, #32
 8004dc4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2200      	movs	r2, #0
 8004dd0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2284      	movs	r2, #132	@ 0x84
 8004dd6:	2100      	movs	r1, #0
 8004dd8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004dda:	2300      	movs	r3, #0
}
 8004ddc:	0018      	movs	r0, r3
 8004dde:	46bd      	mov	sp, r7
 8004de0:	b010      	add	sp, #64	@ 0x40
 8004de2:	bd80      	pop	{r7, pc}
 8004de4:	01ffffff 	.word	0x01ffffff
 8004de8:	fffffedf 	.word	0xfffffedf

08004dec <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b084      	sub	sp, #16
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	60f8      	str	r0, [r7, #12]
 8004df4:	60b9      	str	r1, [r7, #8]
 8004df6:	603b      	str	r3, [r7, #0]
 8004df8:	1dfb      	adds	r3, r7, #7
 8004dfa:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004dfc:	e051      	b.n	8004ea2 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004dfe:	69bb      	ldr	r3, [r7, #24]
 8004e00:	3301      	adds	r3, #1
 8004e02:	d04e      	beq.n	8004ea2 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e04:	f7fc fb40 	bl	8001488 <HAL_GetTick>
 8004e08:	0002      	movs	r2, r0
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	1ad3      	subs	r3, r2, r3
 8004e0e:	69ba      	ldr	r2, [r7, #24]
 8004e10:	429a      	cmp	r2, r3
 8004e12:	d302      	bcc.n	8004e1a <UART_WaitOnFlagUntilTimeout+0x2e>
 8004e14:	69bb      	ldr	r3, [r7, #24]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d101      	bne.n	8004e1e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8004e1a:	2303      	movs	r3, #3
 8004e1c:	e051      	b.n	8004ec2 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	2204      	movs	r2, #4
 8004e26:	4013      	ands	r3, r2
 8004e28:	d03b      	beq.n	8004ea2 <UART_WaitOnFlagUntilTimeout+0xb6>
 8004e2a:	68bb      	ldr	r3, [r7, #8]
 8004e2c:	2b80      	cmp	r3, #128	@ 0x80
 8004e2e:	d038      	beq.n	8004ea2 <UART_WaitOnFlagUntilTimeout+0xb6>
 8004e30:	68bb      	ldr	r3, [r7, #8]
 8004e32:	2b40      	cmp	r3, #64	@ 0x40
 8004e34:	d035      	beq.n	8004ea2 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	69db      	ldr	r3, [r3, #28]
 8004e3c:	2208      	movs	r2, #8
 8004e3e:	4013      	ands	r3, r2
 8004e40:	2b08      	cmp	r3, #8
 8004e42:	d111      	bne.n	8004e68 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	2208      	movs	r2, #8
 8004e4a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	0018      	movs	r0, r3
 8004e50:	f000 f83c 	bl	8004ecc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	2290      	movs	r2, #144	@ 0x90
 8004e58:	2108      	movs	r1, #8
 8004e5a:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	2284      	movs	r2, #132	@ 0x84
 8004e60:	2100      	movs	r1, #0
 8004e62:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004e64:	2301      	movs	r3, #1
 8004e66:	e02c      	b.n	8004ec2 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	69da      	ldr	r2, [r3, #28]
 8004e6e:	2380      	movs	r3, #128	@ 0x80
 8004e70:	011b      	lsls	r3, r3, #4
 8004e72:	401a      	ands	r2, r3
 8004e74:	2380      	movs	r3, #128	@ 0x80
 8004e76:	011b      	lsls	r3, r3, #4
 8004e78:	429a      	cmp	r2, r3
 8004e7a:	d112      	bne.n	8004ea2 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	2280      	movs	r2, #128	@ 0x80
 8004e82:	0112      	lsls	r2, r2, #4
 8004e84:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	0018      	movs	r0, r3
 8004e8a:	f000 f81f 	bl	8004ecc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	2290      	movs	r2, #144	@ 0x90
 8004e92:	2120      	movs	r1, #32
 8004e94:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	2284      	movs	r2, #132	@ 0x84
 8004e9a:	2100      	movs	r1, #0
 8004e9c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004e9e:	2303      	movs	r3, #3
 8004ea0:	e00f      	b.n	8004ec2 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	69db      	ldr	r3, [r3, #28]
 8004ea8:	68ba      	ldr	r2, [r7, #8]
 8004eaa:	4013      	ands	r3, r2
 8004eac:	68ba      	ldr	r2, [r7, #8]
 8004eae:	1ad3      	subs	r3, r2, r3
 8004eb0:	425a      	negs	r2, r3
 8004eb2:	4153      	adcs	r3, r2
 8004eb4:	b2db      	uxtb	r3, r3
 8004eb6:	001a      	movs	r2, r3
 8004eb8:	1dfb      	adds	r3, r7, #7
 8004eba:	781b      	ldrb	r3, [r3, #0]
 8004ebc:	429a      	cmp	r2, r3
 8004ebe:	d09e      	beq.n	8004dfe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004ec0:	2300      	movs	r3, #0
}
 8004ec2:	0018      	movs	r0, r3
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	b004      	add	sp, #16
 8004ec8:	bd80      	pop	{r7, pc}
	...

08004ecc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b08e      	sub	sp, #56	@ 0x38
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ed4:	f3ef 8310 	mrs	r3, PRIMASK
 8004ed8:	617b      	str	r3, [r7, #20]
  return(result);
 8004eda:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004edc:	637b      	str	r3, [r7, #52]	@ 0x34
 8004ede:	2301      	movs	r3, #1
 8004ee0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ee2:	69bb      	ldr	r3, [r7, #24]
 8004ee4:	f383 8810 	msr	PRIMASK, r3
}
 8004ee8:	46c0      	nop			@ (mov r8, r8)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	681a      	ldr	r2, [r3, #0]
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4926      	ldr	r1, [pc, #152]	@ (8004f90 <UART_EndRxTransfer+0xc4>)
 8004ef6:	400a      	ands	r2, r1
 8004ef8:	601a      	str	r2, [r3, #0]
 8004efa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004efc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004efe:	69fb      	ldr	r3, [r7, #28]
 8004f00:	f383 8810 	msr	PRIMASK, r3
}
 8004f04:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f06:	f3ef 8310 	mrs	r3, PRIMASK
 8004f0a:	623b      	str	r3, [r7, #32]
  return(result);
 8004f0c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004f0e:	633b      	str	r3, [r7, #48]	@ 0x30
 8004f10:	2301      	movs	r3, #1
 8004f12:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f16:	f383 8810 	msr	PRIMASK, r3
}
 8004f1a:	46c0      	nop			@ (mov r8, r8)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	689a      	ldr	r2, [r3, #8]
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	491b      	ldr	r1, [pc, #108]	@ (8004f94 <UART_EndRxTransfer+0xc8>)
 8004f28:	400a      	ands	r2, r1
 8004f2a:	609a      	str	r2, [r3, #8]
 8004f2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f2e:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f32:	f383 8810 	msr	PRIMASK, r3
}
 8004f36:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004f3c:	2b01      	cmp	r3, #1
 8004f3e:	d118      	bne.n	8004f72 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f40:	f3ef 8310 	mrs	r3, PRIMASK
 8004f44:	60bb      	str	r3, [r7, #8]
  return(result);
 8004f46:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f48:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	f383 8810 	msr	PRIMASK, r3
}
 8004f54:	46c0      	nop			@ (mov r8, r8)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	681a      	ldr	r2, [r3, #0]
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	2110      	movs	r1, #16
 8004f62:	438a      	bics	r2, r1
 8004f64:	601a      	str	r2, [r3, #0]
 8004f66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f68:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f6a:	693b      	ldr	r3, [r7, #16]
 8004f6c:	f383 8810 	msr	PRIMASK, r3
}
 8004f70:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	228c      	movs	r2, #140	@ 0x8c
 8004f76:	2120      	movs	r1, #32
 8004f78:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2200      	movs	r2, #0
 8004f84:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8004f86:	46c0      	nop			@ (mov r8, r8)
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	b00e      	add	sp, #56	@ 0x38
 8004f8c:	bd80      	pop	{r7, pc}
 8004f8e:	46c0      	nop			@ (mov r8, r8)
 8004f90:	fffffedf 	.word	0xfffffedf
 8004f94:	effffffe 	.word	0xeffffffe

08004f98 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b084      	sub	sp, #16
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2284      	movs	r2, #132	@ 0x84
 8004fa4:	5c9b      	ldrb	r3, [r3, r2]
 8004fa6:	2b01      	cmp	r3, #1
 8004fa8:	d101      	bne.n	8004fae <HAL_UARTEx_DisableFifoMode+0x16>
 8004faa:	2302      	movs	r3, #2
 8004fac:	e027      	b.n	8004ffe <HAL_UARTEx_DisableFifoMode+0x66>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2284      	movs	r2, #132	@ 0x84
 8004fb2:	2101      	movs	r1, #1
 8004fb4:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2288      	movs	r2, #136	@ 0x88
 8004fba:	2124      	movs	r1, #36	@ 0x24
 8004fbc:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	681a      	ldr	r2, [r3, #0]
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	2101      	movs	r1, #1
 8004fd2:	438a      	bics	r2, r1
 8004fd4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	4a0b      	ldr	r2, [pc, #44]	@ (8005008 <HAL_UARTEx_DisableFifoMode+0x70>)
 8004fda:	4013      	ands	r3, r2
 8004fdc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	68fa      	ldr	r2, [r7, #12]
 8004fea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2288      	movs	r2, #136	@ 0x88
 8004ff0:	2120      	movs	r1, #32
 8004ff2:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2284      	movs	r2, #132	@ 0x84
 8004ff8:	2100      	movs	r1, #0
 8004ffa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004ffc:	2300      	movs	r3, #0
}
 8004ffe:	0018      	movs	r0, r3
 8005000:	46bd      	mov	sp, r7
 8005002:	b004      	add	sp, #16
 8005004:	bd80      	pop	{r7, pc}
 8005006:	46c0      	nop			@ (mov r8, r8)
 8005008:	dfffffff 	.word	0xdfffffff

0800500c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b084      	sub	sp, #16
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
 8005014:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2284      	movs	r2, #132	@ 0x84
 800501a:	5c9b      	ldrb	r3, [r3, r2]
 800501c:	2b01      	cmp	r3, #1
 800501e:	d101      	bne.n	8005024 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005020:	2302      	movs	r3, #2
 8005022:	e02e      	b.n	8005082 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2284      	movs	r2, #132	@ 0x84
 8005028:	2101      	movs	r1, #1
 800502a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2288      	movs	r2, #136	@ 0x88
 8005030:	2124      	movs	r1, #36	@ 0x24
 8005032:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	681a      	ldr	r2, [r3, #0]
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	2101      	movs	r1, #1
 8005048:	438a      	bics	r2, r1
 800504a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	689b      	ldr	r3, [r3, #8]
 8005052:	00db      	lsls	r3, r3, #3
 8005054:	08d9      	lsrs	r1, r3, #3
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	683a      	ldr	r2, [r7, #0]
 800505c:	430a      	orrs	r2, r1
 800505e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	0018      	movs	r0, r3
 8005064:	f000 f854 	bl	8005110 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	68fa      	ldr	r2, [r7, #12]
 800506e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2288      	movs	r2, #136	@ 0x88
 8005074:	2120      	movs	r1, #32
 8005076:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2284      	movs	r2, #132	@ 0x84
 800507c:	2100      	movs	r1, #0
 800507e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005080:	2300      	movs	r3, #0
}
 8005082:	0018      	movs	r0, r3
 8005084:	46bd      	mov	sp, r7
 8005086:	b004      	add	sp, #16
 8005088:	bd80      	pop	{r7, pc}
	...

0800508c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b084      	sub	sp, #16
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
 8005094:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2284      	movs	r2, #132	@ 0x84
 800509a:	5c9b      	ldrb	r3, [r3, r2]
 800509c:	2b01      	cmp	r3, #1
 800509e:	d101      	bne.n	80050a4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80050a0:	2302      	movs	r3, #2
 80050a2:	e02f      	b.n	8005104 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2284      	movs	r2, #132	@ 0x84
 80050a8:	2101      	movs	r1, #1
 80050aa:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2288      	movs	r2, #136	@ 0x88
 80050b0:	2124      	movs	r1, #36	@ 0x24
 80050b2:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	681a      	ldr	r2, [r3, #0]
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	2101      	movs	r1, #1
 80050c8:	438a      	bics	r2, r1
 80050ca:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	689b      	ldr	r3, [r3, #8]
 80050d2:	4a0e      	ldr	r2, [pc, #56]	@ (800510c <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 80050d4:	4013      	ands	r3, r2
 80050d6:	0019      	movs	r1, r3
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	683a      	ldr	r2, [r7, #0]
 80050de:	430a      	orrs	r2, r1
 80050e0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	0018      	movs	r0, r3
 80050e6:	f000 f813 	bl	8005110 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	68fa      	ldr	r2, [r7, #12]
 80050f0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2288      	movs	r2, #136	@ 0x88
 80050f6:	2120      	movs	r1, #32
 80050f8:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2284      	movs	r2, #132	@ 0x84
 80050fe:	2100      	movs	r1, #0
 8005100:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005102:	2300      	movs	r3, #0
}
 8005104:	0018      	movs	r0, r3
 8005106:	46bd      	mov	sp, r7
 8005108:	b004      	add	sp, #16
 800510a:	bd80      	pop	{r7, pc}
 800510c:	f1ffffff 	.word	0xf1ffffff

08005110 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005110:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005112:	b085      	sub	sp, #20
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800511c:	2b00      	cmp	r3, #0
 800511e:	d108      	bne.n	8005132 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	226a      	movs	r2, #106	@ 0x6a
 8005124:	2101      	movs	r1, #1
 8005126:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2268      	movs	r2, #104	@ 0x68
 800512c:	2101      	movs	r1, #1
 800512e:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005130:	e043      	b.n	80051ba <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005132:	260f      	movs	r6, #15
 8005134:	19bb      	adds	r3, r7, r6
 8005136:	2208      	movs	r2, #8
 8005138:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800513a:	200e      	movs	r0, #14
 800513c:	183b      	adds	r3, r7, r0
 800513e:	2208      	movs	r2, #8
 8005140:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	689b      	ldr	r3, [r3, #8]
 8005148:	0e5b      	lsrs	r3, r3, #25
 800514a:	b2da      	uxtb	r2, r3
 800514c:	240d      	movs	r4, #13
 800514e:	193b      	adds	r3, r7, r4
 8005150:	2107      	movs	r1, #7
 8005152:	400a      	ands	r2, r1
 8005154:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	689b      	ldr	r3, [r3, #8]
 800515c:	0f5b      	lsrs	r3, r3, #29
 800515e:	b2da      	uxtb	r2, r3
 8005160:	250c      	movs	r5, #12
 8005162:	197b      	adds	r3, r7, r5
 8005164:	2107      	movs	r1, #7
 8005166:	400a      	ands	r2, r1
 8005168:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800516a:	183b      	adds	r3, r7, r0
 800516c:	781b      	ldrb	r3, [r3, #0]
 800516e:	197a      	adds	r2, r7, r5
 8005170:	7812      	ldrb	r2, [r2, #0]
 8005172:	4914      	ldr	r1, [pc, #80]	@ (80051c4 <UARTEx_SetNbDataToProcess+0xb4>)
 8005174:	5c8a      	ldrb	r2, [r1, r2]
 8005176:	435a      	muls	r2, r3
 8005178:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800517a:	197b      	adds	r3, r7, r5
 800517c:	781b      	ldrb	r3, [r3, #0]
 800517e:	4a12      	ldr	r2, [pc, #72]	@ (80051c8 <UARTEx_SetNbDataToProcess+0xb8>)
 8005180:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005182:	0019      	movs	r1, r3
 8005184:	f7fb f8a2 	bl	80002cc <__divsi3>
 8005188:	0003      	movs	r3, r0
 800518a:	b299      	uxth	r1, r3
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	226a      	movs	r2, #106	@ 0x6a
 8005190:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005192:	19bb      	adds	r3, r7, r6
 8005194:	781b      	ldrb	r3, [r3, #0]
 8005196:	193a      	adds	r2, r7, r4
 8005198:	7812      	ldrb	r2, [r2, #0]
 800519a:	490a      	ldr	r1, [pc, #40]	@ (80051c4 <UARTEx_SetNbDataToProcess+0xb4>)
 800519c:	5c8a      	ldrb	r2, [r1, r2]
 800519e:	435a      	muls	r2, r3
 80051a0:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 80051a2:	193b      	adds	r3, r7, r4
 80051a4:	781b      	ldrb	r3, [r3, #0]
 80051a6:	4a08      	ldr	r2, [pc, #32]	@ (80051c8 <UARTEx_SetNbDataToProcess+0xb8>)
 80051a8:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80051aa:	0019      	movs	r1, r3
 80051ac:	f7fb f88e 	bl	80002cc <__divsi3>
 80051b0:	0003      	movs	r3, r0
 80051b2:	b299      	uxth	r1, r3
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2268      	movs	r2, #104	@ 0x68
 80051b8:	5299      	strh	r1, [r3, r2]
}
 80051ba:	46c0      	nop			@ (mov r8, r8)
 80051bc:	46bd      	mov	sp, r7
 80051be:	b005      	add	sp, #20
 80051c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80051c2:	46c0      	nop			@ (mov r8, r8)
 80051c4:	08005668 	.word	0x08005668
 80051c8:	08005670 	.word	0x08005670

080051cc <Reset_Handler>:



extern void Reset_Handler(void) __attribute__((__interrupt__));
void Reset_Handler(void)
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b082      	sub	sp, #8
 80051d0:	af00      	add	r7, sp, #0
    unsigned int *src, *dst;

    // Copy .data segment from Flash to RAM
    src = &_sidata;
 80051d2:	4b13      	ldr	r3, [pc, #76]	@ (8005220 <Reset_Handler+0x54>)
 80051d4:	607b      	str	r3, [r7, #4]
    dst = &_sdata;
 80051d6:	4b13      	ldr	r3, [pc, #76]	@ (8005224 <Reset_Handler+0x58>)
 80051d8:	603b      	str	r3, [r7, #0]
    while (dst < &_edata)
 80051da:	e007      	b.n	80051ec <Reset_Handler+0x20>
        *dst++ = *src++;
 80051dc:	687a      	ldr	r2, [r7, #4]
 80051de:	1d13      	adds	r3, r2, #4
 80051e0:	607b      	str	r3, [r7, #4]
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	1d19      	adds	r1, r3, #4
 80051e6:	6039      	str	r1, [r7, #0]
 80051e8:	6812      	ldr	r2, [r2, #0]
 80051ea:	601a      	str	r2, [r3, #0]
    while (dst < &_edata)
 80051ec:	683a      	ldr	r2, [r7, #0]
 80051ee:	4b0e      	ldr	r3, [pc, #56]	@ (8005228 <Reset_Handler+0x5c>)
 80051f0:	429a      	cmp	r2, r3
 80051f2:	d3f3      	bcc.n	80051dc <Reset_Handler+0x10>

    // Zero out the .bss segment
    dst = &_sbss;
 80051f4:	4b0d      	ldr	r3, [pc, #52]	@ (800522c <Reset_Handler+0x60>)
 80051f6:	603b      	str	r3, [r7, #0]
    while (dst < &_ebss)
 80051f8:	e004      	b.n	8005204 <Reset_Handler+0x38>
        *dst++ = 0;
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	1d1a      	adds	r2, r3, #4
 80051fe:	603a      	str	r2, [r7, #0]
 8005200:	2200      	movs	r2, #0
 8005202:	601a      	str	r2, [r3, #0]
    while (dst < &_ebss)
 8005204:	683a      	ldr	r2, [r7, #0]
 8005206:	4b0a      	ldr	r3, [pc, #40]	@ (8005230 <Reset_Handler+0x64>)
 8005208:	429a      	cmp	r2, r3
 800520a:	d3f6      	bcc.n	80051fa <Reset_Handler+0x2e>

    VTOR_REG = (uint32_t)vectors;
 800520c:	4b09      	ldr	r3, [pc, #36]	@ (8005234 <Reset_Handler+0x68>)
 800520e:	4a0a      	ldr	r2, [pc, #40]	@ (8005238 <Reset_Handler+0x6c>)
 8005210:	601a      	str	r2, [r3, #0]

    //__libc_init_array();

    main();
 8005212:	f7fb fbdd 	bl	80009d0 <main>
}
 8005216:	46c0      	nop			@ (mov r8, r8)
 8005218:	46bd      	mov	sp, r7
 800521a:	b002      	add	sp, #8
 800521c:	bd80      	pop	{r7, pc}
 800521e:	46c0      	nop			@ (mov r8, r8)
 8005220:	080056e8 	.word	0x080056e8
 8005224:	20000000 	.word	0x20000000
 8005228:	2000000c 	.word	0x2000000c
 800522c:	2000000c 	.word	0x2000000c
 8005230:	200002cc 	.word	0x200002cc
 8005234:	e000ed08 	.word	0xe000ed08
 8005238:	080000b8 	.word	0x080000b8

0800523c <hal_gpio_init>:
#include "stm32g0xx_ll_gpio.h"
#include "main.h"
#include "gpio.h"

void hal_gpio_init(void)
{
 800523c:	b580      	push	{r7, lr}
 800523e:	af00      	add	r7, sp, #0
	// Call the GPIO initialization function setup by the STM32CubeIDE Device Configuration Tool:
	MX_GPIO_Init();
 8005240:	f7fb fa02 	bl	8000648 <MX_GPIO_Init>
}
 8005244:	46c0      	nop			@ (mov r8, r8)
 8005246:	46bd      	mov	sp, r7
 8005248:	bd80      	pop	{r7, pc}
	...

0800524c <hal_gpio_toggle_output>:
{
  HAL_GPIO_WritePin(port_defs[id], pin_defs[id].Pin, (GPIO_PinState)(value != false));
}

void hal_gpio_toggle_output(enum pin_id id)
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b082      	sub	sp, #8
 8005250:	af00      	add	r7, sp, #0
 8005252:	0002      	movs	r2, r0
 8005254:	1dfb      	adds	r3, r7, #7
 8005256:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_TogglePin(port_defs[id], pin_defs[id].Pin);
 8005258:	1dfb      	adds	r3, r7, #7
 800525a:	781a      	ldrb	r2, [r3, #0]
 800525c:	4b07      	ldr	r3, [pc, #28]	@ (800527c <hal_gpio_toggle_output+0x30>)
 800525e:	0092      	lsls	r2, r2, #2
 8005260:	58d0      	ldr	r0, [r2, r3]
 8005262:	1dfb      	adds	r3, r7, #7
 8005264:	781a      	ldrb	r2, [r3, #0]
 8005266:	4b06      	ldr	r3, [pc, #24]	@ (8005280 <hal_gpio_toggle_output+0x34>)
 8005268:	0092      	lsls	r2, r2, #2
 800526a:	58d3      	ldr	r3, [r2, r3]
 800526c:	b29b      	uxth	r3, r3
 800526e:	0019      	movs	r1, r3
 8005270:	f7fd f975 	bl	800255e <HAL_GPIO_TogglePin>
}
 8005274:	46c0      	nop			@ (mov r8, r8)
 8005276:	46bd      	mov	sp, r7
 8005278:	b002      	add	sp, #8
 800527a:	bd80      	pop	{r7, pc}
 800527c:	080056ac 	.word	0x080056ac
 8005280:	08005678 	.word	0x08005678

08005284 <hal_timer_get_systick>:
*
*  return values:  The current 1 millisecond systick count
*  remarks:
*********************************************************************************/
uint32_t hal_timer_get_systick(void)
{
 8005284:	b580      	push	{r7, lr}
 8005286:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8005288:	f7fc f8fe 	bl	8001488 <HAL_GetTick>
 800528c:	0003      	movs	r3, r0
}
 800528e:	0018      	movs	r0, r3
 8005290:	46bd      	mov	sp, r7
 8005292:	bd80      	pop	{r7, pc}

08005294 <hal_timer_get_ticks_since_count>:
*
*  remarks:
*********************************************************************************/

uint32_t hal_timer_get_ticks_since_count(uint32_t lastCount)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	b084      	sub	sp, #16
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
    uint32_t result;
    uint32_t currentCount = hal_timer_get_systick();
 800529c:	f7ff fff2 	bl	8005284 <hal_timer_get_systick>
 80052a0:	0003      	movs	r3, r0
 80052a2:	60bb      	str	r3, [r7, #8]

    // Check if the counter rolled over:
    if (currentCount >= lastCount)
 80052a4:	68ba      	ldr	r2, [r7, #8]
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	429a      	cmp	r2, r3
 80052aa:	d304      	bcc.n	80052b6 <hal_timer_get_ticks_since_count+0x22>
    {
        //Counter has not rolled over.
        result = currentCount - lastCount;
 80052ac:	68ba      	ldr	r2, [r7, #8]
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	1ad3      	subs	r3, r2, r3
 80052b2:	60fb      	str	r3, [r7, #12]
 80052b4:	e004      	b.n	80052c0 <hal_timer_get_ticks_since_count+0x2c>
    }
    else
    {
        // The counter rolled over / overflowed. Deal with it:
        result = UINT32_MAX - lastCount + currentCount;
 80052b6:	68ba      	ldr	r2, [r7, #8]
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	1ad3      	subs	r3, r2, r3
 80052bc:	3b01      	subs	r3, #1
 80052be:	60fb      	str	r3, [r7, #12]
    }

    return result;
 80052c0:	68fb      	ldr	r3, [r7, #12]
}
 80052c2:	0018      	movs	r0, r3
 80052c4:	46bd      	mov	sp, r7
 80052c6:	b004      	add	sp, #16
 80052c8:	bd80      	pop	{r7, pc}

080052ca <hal_timer_init>:
{
	SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk; /* disable systick */
}

void hal_timer_init(void)
{
 80052ca:	b580      	push	{r7, lr}
 80052cc:	af00      	add	r7, sp, #0

#if defined(HAL_RTC_MODULE_ENABLED)

	  MX_RTC_Init();
 80052ce:	f7fb fc15 	bl	8000afc <MX_RTC_Init>
#endif

	  // Note that the following "USING" macros are defined in perphdefs.h
#if defined  USING_TIM1
	  MX_TIM1_Init();
 80052d2:	f7fb fcd5 	bl	8000c80 <MX_TIM1_Init>
#endif
#if defined  USING_TIM3
	  MX_TIM3_Init();
 80052d6:	f7fb fd9f 	bl	8000e18 <MX_TIM3_Init>
#endif
#if defined  USING_TIM14
	  MX_TIM14_Init();
#endif
#if defined  USING_TIM15
	  MX_TIM15_Init();
 80052da:	f7fb fe1d 	bl	8000f18 <MX_TIM15_Init>
	  MX_TIM17_Init();
#endif



}
 80052de:	46c0      	nop			@ (mov r8, r8)
 80052e0:	46bd      	mov	sp, r7
 80052e2:	bd80      	pop	{r7, pc}

080052e4 <uart_irq_handler>:
{
	return ((uart_hal->uart_module->CR1 & USART_CR1_TCIE) != 0);
}

static void uart_irq_handler(USART_TypeDef* uart_module)
{
 80052e4:	b590      	push	{r4, r7, lr}
 80052e6:	b085      	sub	sp, #20
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
	uint8_t byte_to_tx;

    /* if there are any error flags AND if in RX mode rather than Tx mode */
	if (uart_module->ISR & (USART_ISR_ORE /*| USART_ISR_NE | USART_ISR_FE*/) && (uart_module->CR2 & USART_CR2_SWAP))
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	69db      	ldr	r3, [r3, #28]
 80052f0:	2208      	movs	r2, #8
 80052f2:	4013      	ands	r3, r2
 80052f4:	d018      	beq.n	8005328 <uart_irq_handler+0x44>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	685a      	ldr	r2, [r3, #4]
 80052fa:	2380      	movs	r3, #128	@ 0x80
 80052fc:	021b      	lsls	r3, r3, #8
 80052fe:	4013      	ands	r3, r2
 8005300:	d012      	beq.n	8005328 <uart_irq_handler+0x44>
	{
		if (uart_module->ISR & USART_ISR_RXNE_RXFNE)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	69db      	ldr	r3, [r3, #28]
 8005306:	2220      	movs	r2, #32
 8005308:	4013      	ands	r3, r2
 800530a:	d00d      	beq.n	8005328 <uart_irq_handler+0x44>
			 * TWICE here because there's an overrun error which means we have TWO bytes 
			 * received, one in the RDR register, and then as soon as we read that once,
			 * there's a byte that gets shifted into the RDR register from the
			 * non-memory-mapped shift register.
			 */
			usart1_byte_received_callback(uart_module->RDR);
 800530c:	4b72      	ldr	r3, [pc, #456]	@ (80054d8 <uart_irq_handler+0x1f4>)
 800530e:	681a      	ldr	r2, [r3, #0]
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005314:	b2db      	uxtb	r3, r3
 8005316:	0018      	movs	r0, r3
 8005318:	4790      	blx	r2
			usart1_byte_received_callback(uart_module->RDR);
 800531a:	4b6f      	ldr	r3, [pc, #444]	@ (80054d8 <uart_irq_handler+0x1f4>)
 800531c:	681a      	ldr	r2, [r3, #0]
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005322:	b2db      	uxtb	r3, r3
 8005324:	0018      	movs	r0, r3
 8005326:	4790      	blx	r2
		}
	}
		uart_module->ICR |= (USART_ICR_ORECF | USART_ICR_NECF | USART_ICR_FECF);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6a1b      	ldr	r3, [r3, #32]
 800532c:	220e      	movs	r2, #14
 800532e:	431a      	orrs	r2, r3
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	621a      	str	r2, [r3, #32]

    /* if a byte has been received AND if in Rx mode rather than Tx mode */
	if ((uart_module->ISR & USART_ISR_RXNE_RXFNE) && (uart_module->CR2 & USART_CR2_SWAP))
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	69db      	ldr	r3, [r3, #28]
 8005338:	2220      	movs	r2, #32
 800533a:	4013      	ands	r3, r2
 800533c:	d01c      	beq.n	8005378 <uart_irq_handler+0x94>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	685a      	ldr	r2, [r3, #4]
 8005342:	2380      	movs	r3, #128	@ 0x80
 8005344:	021b      	lsls	r3, r3, #8
 8005346:	4013      	ands	r3, r2
 8005348:	d016      	beq.n	8005378 <uart_irq_handler+0x94>
	{
		/* Note that reading the RDR register clears the RXNE flag. */

		if (USART1 == uart_module)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	4a63      	ldr	r2, [pc, #396]	@ (80054dc <uart_irq_handler+0x1f8>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d107      	bne.n	8005362 <uart_irq_handler+0x7e>
		{
			/* call the USART1 received callback, passing it the received data */
			usart1_byte_received_callback(uart_module->RDR);
 8005352:	4b61      	ldr	r3, [pc, #388]	@ (80054d8 <uart_irq_handler+0x1f4>)
 8005354:	681a      	ldr	r2, [r3, #0]
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800535a:	b2db      	uxtb	r3, r3
 800535c:	0018      	movs	r0, r3
 800535e:	4790      	blx	r2
 8005360:	e00a      	b.n	8005378 <uart_irq_handler+0x94>
		}
		else if (USART2 == uart_module)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	4a5e      	ldr	r2, [pc, #376]	@ (80054e0 <uart_irq_handler+0x1fc>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d106      	bne.n	8005378 <uart_irq_handler+0x94>
		{
			/* call the USART2 received callback, passing it the received data */
			usart2_byte_received_callback(uart_module->RDR);
 800536a:	4b5e      	ldr	r3, [pc, #376]	@ (80054e4 <uart_irq_handler+0x200>)
 800536c:	681a      	ldr	r2, [r3, #0]
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005372:	b2db      	uxtb	r3, r3
 8005374:	0018      	movs	r0, r3
 8005376:	4790      	blx	r2
		uart_module->ICR |= USART_ICR_WUCF;
	}
#endif

    /* if the transmit buffer is empty AND we're set to Tx rather than Rx */
	if ((uart_module->ISR & USART_ISR_TXE_TXFNF) && !(uart_module->CR2 & USART_CR2_SWAP))
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	69db      	ldr	r3, [r3, #28]
 800537c:	2280      	movs	r2, #128	@ 0x80
 800537e:	4013      	ands	r3, r2
 8005380:	d038      	beq.n	80053f4 <uart_irq_handler+0x110>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	685a      	ldr	r2, [r3, #4]
 8005386:	2380      	movs	r3, #128	@ 0x80
 8005388:	021b      	lsls	r3, r3, #8
 800538a:	4013      	ands	r3, r2
 800538c:	d132      	bne.n	80053f4 <uart_irq_handler+0x110>
	{
		if (USART1 == uart_module)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	4a52      	ldr	r2, [pc, #328]	@ (80054dc <uart_irq_handler+0x1f8>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d115      	bne.n	80053c2 <uart_irq_handler+0xde>
		{
			/* call the USART1 transmit callback to get the byte to Tx */
			if (usart1_transmit_ready_callback(&byte_to_tx))
 8005396:	4b54      	ldr	r3, [pc, #336]	@ (80054e8 <uart_irq_handler+0x204>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	240e      	movs	r4, #14
 800539c:	193a      	adds	r2, r7, r4
 800539e:	0010      	movs	r0, r2
 80053a0:	4798      	blx	r3
 80053a2:	1e03      	subs	r3, r0, #0
 80053a4:	d005      	beq.n	80053b2 <uart_irq_handler+0xce>
			{
				/* transmit the byte */
				uart_module->TDR = byte_to_tx;
 80053a6:	193b      	adds	r3, r7, r4
 80053a8:	781b      	ldrb	r3, [r3, #0]
 80053aa:	001a      	movs	r2, r3
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	629a      	str	r2, [r3, #40]	@ 0x28
 80053b0:	e020      	b.n	80053f4 <uart_irq_handler+0x110>
			}
			else
			{
				/* disable the 'Tx buffer empty' interrupt */
				uart_module->CR1 &= ~USART_CR1_TXEIE_TXFNFIE;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	2280      	movs	r2, #128	@ 0x80
 80053b8:	4393      	bics	r3, r2
 80053ba:	001a      	movs	r2, r3
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	601a      	str	r2, [r3, #0]
 80053c0:	e018      	b.n	80053f4 <uart_irq_handler+0x110>
			}
		}
		else if (USART2 == uart_module)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	4a46      	ldr	r2, [pc, #280]	@ (80054e0 <uart_irq_handler+0x1fc>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d114      	bne.n	80053f4 <uart_irq_handler+0x110>
		{
			/* call the USART2 transmit callback to get the byte to Tx */
			if (usart2_transmit_ready_callback(&byte_to_tx))
 80053ca:	4b48      	ldr	r3, [pc, #288]	@ (80054ec <uart_irq_handler+0x208>)
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	240e      	movs	r4, #14
 80053d0:	193a      	adds	r2, r7, r4
 80053d2:	0010      	movs	r0, r2
 80053d4:	4798      	blx	r3
 80053d6:	1e03      	subs	r3, r0, #0
 80053d8:	d005      	beq.n	80053e6 <uart_irq_handler+0x102>
			{
				/* transmit the byte */
				uart_module->TDR = byte_to_tx;
 80053da:	193b      	adds	r3, r7, r4
 80053dc:	781b      	ldrb	r3, [r3, #0]
 80053de:	001a      	movs	r2, r3
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	629a      	str	r2, [r3, #40]	@ 0x28
 80053e4:	e006      	b.n	80053f4 <uart_irq_handler+0x110>
			}
			else
			{
				/* disable the 'Tx buffer empty' interrupt */
				uart_module->CR1 &= ~USART_CR1_TXEIE_TXFNFIE;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	2280      	movs	r2, #128	@ 0x80
 80053ec:	4393      	bics	r3, r2
 80053ee:	001a      	movs	r2, r3
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	601a      	str	r2, [r3, #0]
		}
	}

/* TODO - need a callback in the UART driver for the 152 usec delay */
    /* if the transmission complete flag is set AND we're set to Tx rather than Rx */
	if ((uart_module->ISR & USART_ISR_TC) && !(uart_module->CR2 & USART_CR2_SWAP))
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	69db      	ldr	r3, [r3, #28]
 80053f8:	2240      	movs	r2, #64	@ 0x40
 80053fa:	4013      	ands	r3, r2
 80053fc:	d100      	bne.n	8005400 <uart_irq_handler+0x11c>
 80053fe:	e067      	b.n	80054d0 <uart_irq_handler+0x1ec>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	685a      	ldr	r2, [r3, #4]
 8005404:	2380      	movs	r3, #128	@ 0x80
 8005406:	021b      	lsls	r3, r3, #8
 8005408:	4013      	ands	r3, r2
 800540a:	d161      	bne.n	80054d0 <uart_irq_handler+0x1ec>
	{
		if (USART1 == uart_module)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	4a33      	ldr	r2, [pc, #204]	@ (80054dc <uart_irq_handler+0x1f8>)
 8005410:	4293      	cmp	r3, r2
 8005412:	d107      	bne.n	8005424 <uart_irq_handler+0x140>
		{
			if (usart1_blocking_delay)
 8005414:	4b36      	ldr	r3, [pc, #216]	@ (80054f0 <uart_irq_handler+0x20c>)
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d00e      	beq.n	800543a <uart_irq_handler+0x156>
			{
				/* delay to ride through the IR1 key glitch */
				usart1_blocking_delay();
 800541c:	4b34      	ldr	r3, [pc, #208]	@ (80054f0 <uart_irq_handler+0x20c>)
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4798      	blx	r3
 8005422:	e00a      	b.n	800543a <uart_irq_handler+0x156>
			}
		}
		else if (USART2 == uart_module)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	4a2e      	ldr	r2, [pc, #184]	@ (80054e0 <uart_irq_handler+0x1fc>)
 8005428:	4293      	cmp	r3, r2
 800542a:	d106      	bne.n	800543a <uart_irq_handler+0x156>
		{
			if (usart2_blocking_delay)
 800542c:	4b31      	ldr	r3, [pc, #196]	@ (80054f4 <uart_irq_handler+0x210>)
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d002      	beq.n	800543a <uart_irq_handler+0x156>
			{
				/* delay to ride through the IR1 key glitch */
				usart2_blocking_delay();
 8005434:	4b2f      	ldr	r3, [pc, #188]	@ (80054f4 <uart_irq_handler+0x210>)
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4798      	blx	r3

		/* switch tx/rx pin to rx if needed */
		{
			uart_mode_t uart_mode;

			if (USART1 == uart_module)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	4a27      	ldr	r2, [pc, #156]	@ (80054dc <uart_irq_handler+0x1f8>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d105      	bne.n	800544e <uart_irq_handler+0x16a>
			{
				uart_mode = usart1_mode;
 8005442:	230f      	movs	r3, #15
 8005444:	18fb      	adds	r3, r7, r3
 8005446:	4a2c      	ldr	r2, [pc, #176]	@ (80054f8 <uart_irq_handler+0x214>)
 8005448:	7812      	ldrb	r2, [r2, #0]
 800544a:	701a      	strb	r2, [r3, #0]
 800544c:	e00d      	b.n	800546a <uart_irq_handler+0x186>
			}
			else if (USART2 == uart_module)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	4a23      	ldr	r2, [pc, #140]	@ (80054e0 <uart_irq_handler+0x1fc>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d105      	bne.n	8005462 <uart_irq_handler+0x17e>
			{
				uart_mode = usart2_mode;
 8005456:	230f      	movs	r3, #15
 8005458:	18fb      	adds	r3, r7, r3
 800545a:	4a28      	ldr	r2, [pc, #160]	@ (80054fc <uart_irq_handler+0x218>)
 800545c:	7812      	ldrb	r2, [r2, #0]
 800545e:	701a      	strb	r2, [r3, #0]
 8005460:	e003      	b.n	800546a <uart_irq_handler+0x186>
				uart_mode = lpuart1_mode;
			}
#endif
			else
			{
				uart_mode = 0; /* Should never get here!  This line is just to ensure consistency on failure. */
 8005462:	230f      	movs	r3, #15
 8005464:	18fb      	adds	r3, r7, r3
 8005466:	2200      	movs	r2, #0
 8005468:	701a      	strb	r2, [r3, #0]
			}

			if ((ONE_WIRE_NO_EXTERNAL_PULLUP == uart_mode) || (ONE_WIRE == uart_mode))
 800546a:	220f      	movs	r2, #15
 800546c:	18bb      	adds	r3, r7, r2
 800546e:	781b      	ldrb	r3, [r3, #0]
 8005470:	2b03      	cmp	r3, #3
 8005472:	d003      	beq.n	800547c <uart_irq_handler+0x198>
 8005474:	18bb      	adds	r3, r7, r2
 8005476:	781b      	ldrb	r3, [r3, #0]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d119      	bne.n	80054b0 <uart_irq_handler+0x1cc>
			{
				/* if tx/rx pin is set to tx... */
				if (!(uart_module->CR2 & USART_CR2_SWAP))
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	685a      	ldr	r2, [r3, #4]
 8005480:	2380      	movs	r3, #128	@ 0x80
 8005482:	021b      	lsls	r3, r3, #8
 8005484:	4013      	ands	r3, r2
 8005486:	d113      	bne.n	80054b0 <uart_irq_handler+0x1cc>
				{
					/* ...then set pin to rx */
					uart_module->CR1 &= ~USART_CR1_UE;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	2201      	movs	r2, #1
 800548e:	4393      	bics	r3, r2
 8005490:	001a      	movs	r2, r3
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	601a      	str	r2, [r3, #0]
					uart_module->CR2 |=  USART_CR2_SWAP; /* can only modify CR2 when UE is 0 */
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	685b      	ldr	r3, [r3, #4]
 800549a:	2280      	movs	r2, #128	@ 0x80
 800549c:	0212      	lsls	r2, r2, #8
 800549e:	431a      	orrs	r2, r3
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	605a      	str	r2, [r3, #4]
					uart_module->CR1 |=  USART_CR1_UE;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	2201      	movs	r2, #1
 80054aa:	431a      	orrs	r2, r3
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	601a      	str	r2, [r3, #0]
				}
			}
		}

		/* re-enable the receiver and receive interrupt */
		uart_module->CR1 |= (USART_CR1_RE | USART_CR1_RXNEIE_RXFNEIE);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	2224      	movs	r2, #36	@ 0x24
 80054b6:	431a      	orrs	r2, r3
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	601a      	str	r2, [r3, #0]

		/* disable the 'Tx complete' interrupt */
		uart_module->CR1 &= ~USART_CR1_TCIE;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	2240      	movs	r2, #64	@ 0x40
 80054c2:	4393      	bics	r3, r2
 80054c4:	001a      	movs	r2, r3
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	601a      	str	r2, [r3, #0]

		/* clear the TC bit */
		uart_module->ICR = USART_ICR_TCCF;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2240      	movs	r2, #64	@ 0x40
 80054ce:	621a      	str	r2, [r3, #32]
	}
}
 80054d0:	46c0      	nop			@ (mov r8, r8)
 80054d2:	46bd      	mov	sp, r7
 80054d4:	b005      	add	sp, #20
 80054d6:	bd90      	pop	{r4, r7, pc}
 80054d8:	200002a4 	.word	0x200002a4
 80054dc:	40013800 	.word	0x40013800
 80054e0:	40004400 	.word	0x40004400
 80054e4:	200002ac 	.word	0x200002ac
 80054e8:	200002a0 	.word	0x200002a0
 80054ec:	200002a8 	.word	0x200002a8
 80054f0:	200002b0 	.word	0x200002b0
 80054f4:	200002b4 	.word	0x200002b4
 80054f8:	200002b8 	.word	0x200002b8
 80054fc:	200002b9 	.word	0x200002b9

08005500 <USART1_IRQHandler>:


void USART1_IRQHandler(void)
{
 8005500:	b580      	push	{r7, lr}
 8005502:	af00      	add	r7, sp, #0
	uart_irq_handler(USART1);
 8005504:	4b03      	ldr	r3, [pc, #12]	@ (8005514 <USART1_IRQHandler+0x14>)
 8005506:	0018      	movs	r0, r3
 8005508:	f7ff feec 	bl	80052e4 <uart_irq_handler>
}
 800550c:	46c0      	nop			@ (mov r8, r8)
 800550e:	46bd      	mov	sp, r7
 8005510:	bd80      	pop	{r7, pc}
 8005512:	46c0      	nop			@ (mov r8, r8)
 8005514:	40013800 	.word	0x40013800

08005518 <USART2_IRQHandler>:


void USART2_IRQHandler(void)
{
 8005518:	b580      	push	{r7, lr}
 800551a:	af00      	add	r7, sp, #0
	uart_irq_handler(USART2);
 800551c:	4b03      	ldr	r3, [pc, #12]	@ (800552c <USART2_IRQHandler+0x14>)
 800551e:	0018      	movs	r0, r3
 8005520:	f7ff fee0 	bl	80052e4 <uart_irq_handler>
}
 8005524:	46c0      	nop			@ (mov r8, r8)
 8005526:	46bd      	mov	sp, r7
 8005528:	bd80      	pop	{r7, pc}
 800552a:	46c0      	nop			@ (mov r8, r8)
 800552c:	40004400 	.word	0x40004400

08005530 <hal_watchdog_init>:


static IWDG_HandleTypeDef wdg_hdl = {0};

void hal_watchdog_init(void)
{
 8005530:	b5b0      	push	{r4, r5, r7, lr}
 8005532:	af00      	add	r7, sp, #0
    // Call the watch dog initialization function that was created by the hardware configuration tool.
	MX_IWDG_Init();
 8005534:	f7fb fa2c 	bl	8000990 <MX_IWDG_Init>

	wdg_hdl = hiwdg; // Use the watch dog handle created by the STM32 Hardware Configuration Tool.
 8005538:	4b04      	ldr	r3, [pc, #16]	@ (800554c <hal_watchdog_init+0x1c>)
 800553a:	4a05      	ldr	r2, [pc, #20]	@ (8005550 <hal_watchdog_init+0x20>)
 800553c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800553e:	c313      	stmia	r3!, {r0, r1, r4}
 8005540:	6812      	ldr	r2, [r2, #0]
 8005542:	601a      	str	r2, [r3, #0]

}
 8005544:	46c0      	nop			@ (mov r8, r8)
 8005546:	46bd      	mov	sp, r7
 8005548:	bdb0      	pop	{r4, r5, r7, pc}
 800554a:	46c0      	nop			@ (mov r8, r8)
 800554c:	200002bc 	.word	0x200002bc
 8005550:	200000e0 	.word	0x200000e0

08005554 <hal_watchdog_reset>:
{

}

void hal_watchdog_reset(void)
{
 8005554:	b580      	push	{r7, lr}
 8005556:	af00      	add	r7, sp, #0
	if( wdg_hdl.Instance != NULL )			// Bootloader was resetting wdt but it was never initialized. This resulted in a null pointer access in HAL functions which impacted FLASH-SR CFGBSY Flag
 8005558:	4b05      	ldr	r3, [pc, #20]	@ (8005570 <hal_watchdog_reset+0x1c>)
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d003      	beq.n	8005568 <hal_watchdog_reset+0x14>
	{
		/* reload the WDT */
		HAL_IWDG_Refresh(&wdg_hdl);
 8005560:	4b03      	ldr	r3, [pc, #12]	@ (8005570 <hal_watchdog_reset+0x1c>)
 8005562:	0018      	movs	r0, r3
 8005564:	f7fd f9e4 	bl	8002930 <HAL_IWDG_Refresh>
	}
}
 8005568:	46c0      	nop			@ (mov r8, r8)
 800556a:	46bd      	mov	sp, r7
 800556c:	bd80      	pop	{r7, pc}
 800556e:	46c0      	nop			@ (mov r8, r8)
 8005570:	200002bc 	.word	0x200002bc

08005574 <memset>:
 8005574:	0003      	movs	r3, r0
 8005576:	1882      	adds	r2, r0, r2
 8005578:	4293      	cmp	r3, r2
 800557a:	d100      	bne.n	800557e <memset+0xa>
 800557c:	4770      	bx	lr
 800557e:	7019      	strb	r1, [r3, #0]
 8005580:	3301      	adds	r3, #1
 8005582:	e7f9      	b.n	8005578 <memset+0x4>

08005584 <_init>:
 8005584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005586:	46c0      	nop			@ (mov r8, r8)
 8005588:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800558a:	bc08      	pop	{r3}
 800558c:	469e      	mov	lr, r3
 800558e:	4770      	bx	lr

08005590 <_fini>:
 8005590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005592:	46c0      	nop			@ (mov r8, r8)
 8005594:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005596:	bc08      	pop	{r3}
 8005598:	469e      	mov	lr, r3
 800559a:	4770      	bx	lr
