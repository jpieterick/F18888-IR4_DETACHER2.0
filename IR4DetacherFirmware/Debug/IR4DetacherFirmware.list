
IR4DetacherFirmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000170  08000000  08000000  00001000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000050b4  08000170  08000170  00001170  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000144  08005224  08005224  00006224  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005368  08005368  0000700c  2**0
                  CONTENTS
  4 .ARM          00000000  08005368  08005368  0000700c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005368  08005368  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005368  08005368  00006368  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800536c  0800536c  0000636c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08005370  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000294  2000000c  0800537c  0000700c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002a0  0800537c  000072a0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000185dc  00000000  00000000  00007034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004153  00000000  00000000  0001f610  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015b0  00000000  00000000  00023768  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000010c3  00000000  00000000  00024d18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a19a  00000000  00000000  00025ddb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ff32  00000000  00000000  0003ff75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009fc20  00000000  00000000  0005fea7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ffac7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c44  00000000  00000000  000ffb0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000009e  00000000  00000000  00104750  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000170 <__do_global_dtors_aux>:
 8000170:	b510      	push	{r4, lr}
 8000172:	4c06      	ldr	r4, [pc, #24]	@ (800018c <__do_global_dtors_aux+0x1c>)
 8000174:	7823      	ldrb	r3, [r4, #0]
 8000176:	2b00      	cmp	r3, #0
 8000178:	d107      	bne.n	800018a <__do_global_dtors_aux+0x1a>
 800017a:	4b05      	ldr	r3, [pc, #20]	@ (8000190 <__do_global_dtors_aux+0x20>)
 800017c:	2b00      	cmp	r3, #0
 800017e:	d002      	beq.n	8000186 <__do_global_dtors_aux+0x16>
 8000180:	4804      	ldr	r0, [pc, #16]	@ (8000194 <__do_global_dtors_aux+0x24>)
 8000182:	e000      	b.n	8000186 <__do_global_dtors_aux+0x16>
 8000184:	bf00      	nop
 8000186:	2301      	movs	r3, #1
 8000188:	7023      	strb	r3, [r4, #0]
 800018a:	bd10      	pop	{r4, pc}
 800018c:	2000000c 	.word	0x2000000c
 8000190:	00000000 	.word	0x00000000
 8000194:	0800520c 	.word	0x0800520c

08000198 <frame_dummy>:
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <frame_dummy+0x14>)
 800019a:	b510      	push	{r4, lr}
 800019c:	2b00      	cmp	r3, #0
 800019e:	d003      	beq.n	80001a8 <frame_dummy+0x10>
 80001a0:	4903      	ldr	r1, [pc, #12]	@ (80001b0 <frame_dummy+0x18>)
 80001a2:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <frame_dummy+0x1c>)
 80001a4:	e000      	b.n	80001a8 <frame_dummy+0x10>
 80001a6:	bf00      	nop
 80001a8:	bd10      	pop	{r4, pc}
 80001aa:	46c0      	nop			@ (mov r8, r8)
 80001ac:	00000000 	.word	0x00000000
 80001b0:	20000010 	.word	0x20000010
 80001b4:	0800520c 	.word	0x0800520c

080001b8 <__udivsi3>:
 80001b8:	2200      	movs	r2, #0
 80001ba:	0843      	lsrs	r3, r0, #1
 80001bc:	428b      	cmp	r3, r1
 80001be:	d374      	bcc.n	80002aa <__udivsi3+0xf2>
 80001c0:	0903      	lsrs	r3, r0, #4
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d35f      	bcc.n	8000286 <__udivsi3+0xce>
 80001c6:	0a03      	lsrs	r3, r0, #8
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d344      	bcc.n	8000256 <__udivsi3+0x9e>
 80001cc:	0b03      	lsrs	r3, r0, #12
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d328      	bcc.n	8000224 <__udivsi3+0x6c>
 80001d2:	0c03      	lsrs	r3, r0, #16
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d30d      	bcc.n	80001f4 <__udivsi3+0x3c>
 80001d8:	22ff      	movs	r2, #255	@ 0xff
 80001da:	0209      	lsls	r1, r1, #8
 80001dc:	ba12      	rev	r2, r2
 80001de:	0c03      	lsrs	r3, r0, #16
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d302      	bcc.n	80001ea <__udivsi3+0x32>
 80001e4:	1212      	asrs	r2, r2, #8
 80001e6:	0209      	lsls	r1, r1, #8
 80001e8:	d065      	beq.n	80002b6 <__udivsi3+0xfe>
 80001ea:	0b03      	lsrs	r3, r0, #12
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d319      	bcc.n	8000224 <__udivsi3+0x6c>
 80001f0:	e000      	b.n	80001f4 <__udivsi3+0x3c>
 80001f2:	0a09      	lsrs	r1, r1, #8
 80001f4:	0bc3      	lsrs	r3, r0, #15
 80001f6:	428b      	cmp	r3, r1
 80001f8:	d301      	bcc.n	80001fe <__udivsi3+0x46>
 80001fa:	03cb      	lsls	r3, r1, #15
 80001fc:	1ac0      	subs	r0, r0, r3
 80001fe:	4152      	adcs	r2, r2
 8000200:	0b83      	lsrs	r3, r0, #14
 8000202:	428b      	cmp	r3, r1
 8000204:	d301      	bcc.n	800020a <__udivsi3+0x52>
 8000206:	038b      	lsls	r3, r1, #14
 8000208:	1ac0      	subs	r0, r0, r3
 800020a:	4152      	adcs	r2, r2
 800020c:	0b43      	lsrs	r3, r0, #13
 800020e:	428b      	cmp	r3, r1
 8000210:	d301      	bcc.n	8000216 <__udivsi3+0x5e>
 8000212:	034b      	lsls	r3, r1, #13
 8000214:	1ac0      	subs	r0, r0, r3
 8000216:	4152      	adcs	r2, r2
 8000218:	0b03      	lsrs	r3, r0, #12
 800021a:	428b      	cmp	r3, r1
 800021c:	d301      	bcc.n	8000222 <__udivsi3+0x6a>
 800021e:	030b      	lsls	r3, r1, #12
 8000220:	1ac0      	subs	r0, r0, r3
 8000222:	4152      	adcs	r2, r2
 8000224:	0ac3      	lsrs	r3, r0, #11
 8000226:	428b      	cmp	r3, r1
 8000228:	d301      	bcc.n	800022e <__udivsi3+0x76>
 800022a:	02cb      	lsls	r3, r1, #11
 800022c:	1ac0      	subs	r0, r0, r3
 800022e:	4152      	adcs	r2, r2
 8000230:	0a83      	lsrs	r3, r0, #10
 8000232:	428b      	cmp	r3, r1
 8000234:	d301      	bcc.n	800023a <__udivsi3+0x82>
 8000236:	028b      	lsls	r3, r1, #10
 8000238:	1ac0      	subs	r0, r0, r3
 800023a:	4152      	adcs	r2, r2
 800023c:	0a43      	lsrs	r3, r0, #9
 800023e:	428b      	cmp	r3, r1
 8000240:	d301      	bcc.n	8000246 <__udivsi3+0x8e>
 8000242:	024b      	lsls	r3, r1, #9
 8000244:	1ac0      	subs	r0, r0, r3
 8000246:	4152      	adcs	r2, r2
 8000248:	0a03      	lsrs	r3, r0, #8
 800024a:	428b      	cmp	r3, r1
 800024c:	d301      	bcc.n	8000252 <__udivsi3+0x9a>
 800024e:	020b      	lsls	r3, r1, #8
 8000250:	1ac0      	subs	r0, r0, r3
 8000252:	4152      	adcs	r2, r2
 8000254:	d2cd      	bcs.n	80001f2 <__udivsi3+0x3a>
 8000256:	09c3      	lsrs	r3, r0, #7
 8000258:	428b      	cmp	r3, r1
 800025a:	d301      	bcc.n	8000260 <__udivsi3+0xa8>
 800025c:	01cb      	lsls	r3, r1, #7
 800025e:	1ac0      	subs	r0, r0, r3
 8000260:	4152      	adcs	r2, r2
 8000262:	0983      	lsrs	r3, r0, #6
 8000264:	428b      	cmp	r3, r1
 8000266:	d301      	bcc.n	800026c <__udivsi3+0xb4>
 8000268:	018b      	lsls	r3, r1, #6
 800026a:	1ac0      	subs	r0, r0, r3
 800026c:	4152      	adcs	r2, r2
 800026e:	0943      	lsrs	r3, r0, #5
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__udivsi3+0xc0>
 8000274:	014b      	lsls	r3, r1, #5
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0903      	lsrs	r3, r0, #4
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__udivsi3+0xcc>
 8000280:	010b      	lsls	r3, r1, #4
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	08c3      	lsrs	r3, r0, #3
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__udivsi3+0xd8>
 800028c:	00cb      	lsls	r3, r1, #3
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0883      	lsrs	r3, r0, #2
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__udivsi3+0xe4>
 8000298:	008b      	lsls	r3, r1, #2
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0843      	lsrs	r3, r0, #1
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__udivsi3+0xf0>
 80002a4:	004b      	lsls	r3, r1, #1
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	1a41      	subs	r1, r0, r1
 80002ac:	d200      	bcs.n	80002b0 <__udivsi3+0xf8>
 80002ae:	4601      	mov	r1, r0
 80002b0:	4152      	adcs	r2, r2
 80002b2:	4610      	mov	r0, r2
 80002b4:	4770      	bx	lr
 80002b6:	e7ff      	b.n	80002b8 <__udivsi3+0x100>
 80002b8:	b501      	push	{r0, lr}
 80002ba:	2000      	movs	r0, #0
 80002bc:	f000 f8f0 	bl	80004a0 <__aeabi_idiv0>
 80002c0:	bd02      	pop	{r1, pc}
 80002c2:	46c0      	nop			@ (mov r8, r8)

080002c4 <__aeabi_uidivmod>:
 80002c4:	2900      	cmp	r1, #0
 80002c6:	d0f7      	beq.n	80002b8 <__udivsi3+0x100>
 80002c8:	e776      	b.n	80001b8 <__udivsi3>
 80002ca:	4770      	bx	lr

080002cc <__divsi3>:
 80002cc:	4603      	mov	r3, r0
 80002ce:	430b      	orrs	r3, r1
 80002d0:	d47f      	bmi.n	80003d2 <__divsi3+0x106>
 80002d2:	2200      	movs	r2, #0
 80002d4:	0843      	lsrs	r3, r0, #1
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d374      	bcc.n	80003c4 <__divsi3+0xf8>
 80002da:	0903      	lsrs	r3, r0, #4
 80002dc:	428b      	cmp	r3, r1
 80002de:	d35f      	bcc.n	80003a0 <__divsi3+0xd4>
 80002e0:	0a03      	lsrs	r3, r0, #8
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d344      	bcc.n	8000370 <__divsi3+0xa4>
 80002e6:	0b03      	lsrs	r3, r0, #12
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d328      	bcc.n	800033e <__divsi3+0x72>
 80002ec:	0c03      	lsrs	r3, r0, #16
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d30d      	bcc.n	800030e <__divsi3+0x42>
 80002f2:	22ff      	movs	r2, #255	@ 0xff
 80002f4:	0209      	lsls	r1, r1, #8
 80002f6:	ba12      	rev	r2, r2
 80002f8:	0c03      	lsrs	r3, r0, #16
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d302      	bcc.n	8000304 <__divsi3+0x38>
 80002fe:	1212      	asrs	r2, r2, #8
 8000300:	0209      	lsls	r1, r1, #8
 8000302:	d065      	beq.n	80003d0 <__divsi3+0x104>
 8000304:	0b03      	lsrs	r3, r0, #12
 8000306:	428b      	cmp	r3, r1
 8000308:	d319      	bcc.n	800033e <__divsi3+0x72>
 800030a:	e000      	b.n	800030e <__divsi3+0x42>
 800030c:	0a09      	lsrs	r1, r1, #8
 800030e:	0bc3      	lsrs	r3, r0, #15
 8000310:	428b      	cmp	r3, r1
 8000312:	d301      	bcc.n	8000318 <__divsi3+0x4c>
 8000314:	03cb      	lsls	r3, r1, #15
 8000316:	1ac0      	subs	r0, r0, r3
 8000318:	4152      	adcs	r2, r2
 800031a:	0b83      	lsrs	r3, r0, #14
 800031c:	428b      	cmp	r3, r1
 800031e:	d301      	bcc.n	8000324 <__divsi3+0x58>
 8000320:	038b      	lsls	r3, r1, #14
 8000322:	1ac0      	subs	r0, r0, r3
 8000324:	4152      	adcs	r2, r2
 8000326:	0b43      	lsrs	r3, r0, #13
 8000328:	428b      	cmp	r3, r1
 800032a:	d301      	bcc.n	8000330 <__divsi3+0x64>
 800032c:	034b      	lsls	r3, r1, #13
 800032e:	1ac0      	subs	r0, r0, r3
 8000330:	4152      	adcs	r2, r2
 8000332:	0b03      	lsrs	r3, r0, #12
 8000334:	428b      	cmp	r3, r1
 8000336:	d301      	bcc.n	800033c <__divsi3+0x70>
 8000338:	030b      	lsls	r3, r1, #12
 800033a:	1ac0      	subs	r0, r0, r3
 800033c:	4152      	adcs	r2, r2
 800033e:	0ac3      	lsrs	r3, r0, #11
 8000340:	428b      	cmp	r3, r1
 8000342:	d301      	bcc.n	8000348 <__divsi3+0x7c>
 8000344:	02cb      	lsls	r3, r1, #11
 8000346:	1ac0      	subs	r0, r0, r3
 8000348:	4152      	adcs	r2, r2
 800034a:	0a83      	lsrs	r3, r0, #10
 800034c:	428b      	cmp	r3, r1
 800034e:	d301      	bcc.n	8000354 <__divsi3+0x88>
 8000350:	028b      	lsls	r3, r1, #10
 8000352:	1ac0      	subs	r0, r0, r3
 8000354:	4152      	adcs	r2, r2
 8000356:	0a43      	lsrs	r3, r0, #9
 8000358:	428b      	cmp	r3, r1
 800035a:	d301      	bcc.n	8000360 <__divsi3+0x94>
 800035c:	024b      	lsls	r3, r1, #9
 800035e:	1ac0      	subs	r0, r0, r3
 8000360:	4152      	adcs	r2, r2
 8000362:	0a03      	lsrs	r3, r0, #8
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0xa0>
 8000368:	020b      	lsls	r3, r1, #8
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	d2cd      	bcs.n	800030c <__divsi3+0x40>
 8000370:	09c3      	lsrs	r3, r0, #7
 8000372:	428b      	cmp	r3, r1
 8000374:	d301      	bcc.n	800037a <__divsi3+0xae>
 8000376:	01cb      	lsls	r3, r1, #7
 8000378:	1ac0      	subs	r0, r0, r3
 800037a:	4152      	adcs	r2, r2
 800037c:	0983      	lsrs	r3, r0, #6
 800037e:	428b      	cmp	r3, r1
 8000380:	d301      	bcc.n	8000386 <__divsi3+0xba>
 8000382:	018b      	lsls	r3, r1, #6
 8000384:	1ac0      	subs	r0, r0, r3
 8000386:	4152      	adcs	r2, r2
 8000388:	0943      	lsrs	r3, r0, #5
 800038a:	428b      	cmp	r3, r1
 800038c:	d301      	bcc.n	8000392 <__divsi3+0xc6>
 800038e:	014b      	lsls	r3, r1, #5
 8000390:	1ac0      	subs	r0, r0, r3
 8000392:	4152      	adcs	r2, r2
 8000394:	0903      	lsrs	r3, r0, #4
 8000396:	428b      	cmp	r3, r1
 8000398:	d301      	bcc.n	800039e <__divsi3+0xd2>
 800039a:	010b      	lsls	r3, r1, #4
 800039c:	1ac0      	subs	r0, r0, r3
 800039e:	4152      	adcs	r2, r2
 80003a0:	08c3      	lsrs	r3, r0, #3
 80003a2:	428b      	cmp	r3, r1
 80003a4:	d301      	bcc.n	80003aa <__divsi3+0xde>
 80003a6:	00cb      	lsls	r3, r1, #3
 80003a8:	1ac0      	subs	r0, r0, r3
 80003aa:	4152      	adcs	r2, r2
 80003ac:	0883      	lsrs	r3, r0, #2
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0xea>
 80003b2:	008b      	lsls	r3, r1, #2
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	0843      	lsrs	r3, r0, #1
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d301      	bcc.n	80003c2 <__divsi3+0xf6>
 80003be:	004b      	lsls	r3, r1, #1
 80003c0:	1ac0      	subs	r0, r0, r3
 80003c2:	4152      	adcs	r2, r2
 80003c4:	1a41      	subs	r1, r0, r1
 80003c6:	d200      	bcs.n	80003ca <__divsi3+0xfe>
 80003c8:	4601      	mov	r1, r0
 80003ca:	4152      	adcs	r2, r2
 80003cc:	4610      	mov	r0, r2
 80003ce:	4770      	bx	lr
 80003d0:	e05d      	b.n	800048e <__divsi3+0x1c2>
 80003d2:	0fca      	lsrs	r2, r1, #31
 80003d4:	d000      	beq.n	80003d8 <__divsi3+0x10c>
 80003d6:	4249      	negs	r1, r1
 80003d8:	1003      	asrs	r3, r0, #32
 80003da:	d300      	bcc.n	80003de <__divsi3+0x112>
 80003dc:	4240      	negs	r0, r0
 80003de:	4053      	eors	r3, r2
 80003e0:	2200      	movs	r2, #0
 80003e2:	469c      	mov	ip, r3
 80003e4:	0903      	lsrs	r3, r0, #4
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d32d      	bcc.n	8000446 <__divsi3+0x17a>
 80003ea:	0a03      	lsrs	r3, r0, #8
 80003ec:	428b      	cmp	r3, r1
 80003ee:	d312      	bcc.n	8000416 <__divsi3+0x14a>
 80003f0:	22fc      	movs	r2, #252	@ 0xfc
 80003f2:	0189      	lsls	r1, r1, #6
 80003f4:	ba12      	rev	r2, r2
 80003f6:	0a03      	lsrs	r3, r0, #8
 80003f8:	428b      	cmp	r3, r1
 80003fa:	d30c      	bcc.n	8000416 <__divsi3+0x14a>
 80003fc:	0189      	lsls	r1, r1, #6
 80003fe:	1192      	asrs	r2, r2, #6
 8000400:	428b      	cmp	r3, r1
 8000402:	d308      	bcc.n	8000416 <__divsi3+0x14a>
 8000404:	0189      	lsls	r1, r1, #6
 8000406:	1192      	asrs	r2, r2, #6
 8000408:	428b      	cmp	r3, r1
 800040a:	d304      	bcc.n	8000416 <__divsi3+0x14a>
 800040c:	0189      	lsls	r1, r1, #6
 800040e:	d03a      	beq.n	8000486 <__divsi3+0x1ba>
 8000410:	1192      	asrs	r2, r2, #6
 8000412:	e000      	b.n	8000416 <__divsi3+0x14a>
 8000414:	0989      	lsrs	r1, r1, #6
 8000416:	09c3      	lsrs	r3, r0, #7
 8000418:	428b      	cmp	r3, r1
 800041a:	d301      	bcc.n	8000420 <__divsi3+0x154>
 800041c:	01cb      	lsls	r3, r1, #7
 800041e:	1ac0      	subs	r0, r0, r3
 8000420:	4152      	adcs	r2, r2
 8000422:	0983      	lsrs	r3, r0, #6
 8000424:	428b      	cmp	r3, r1
 8000426:	d301      	bcc.n	800042c <__divsi3+0x160>
 8000428:	018b      	lsls	r3, r1, #6
 800042a:	1ac0      	subs	r0, r0, r3
 800042c:	4152      	adcs	r2, r2
 800042e:	0943      	lsrs	r3, r0, #5
 8000430:	428b      	cmp	r3, r1
 8000432:	d301      	bcc.n	8000438 <__divsi3+0x16c>
 8000434:	014b      	lsls	r3, r1, #5
 8000436:	1ac0      	subs	r0, r0, r3
 8000438:	4152      	adcs	r2, r2
 800043a:	0903      	lsrs	r3, r0, #4
 800043c:	428b      	cmp	r3, r1
 800043e:	d301      	bcc.n	8000444 <__divsi3+0x178>
 8000440:	010b      	lsls	r3, r1, #4
 8000442:	1ac0      	subs	r0, r0, r3
 8000444:	4152      	adcs	r2, r2
 8000446:	08c3      	lsrs	r3, r0, #3
 8000448:	428b      	cmp	r3, r1
 800044a:	d301      	bcc.n	8000450 <__divsi3+0x184>
 800044c:	00cb      	lsls	r3, r1, #3
 800044e:	1ac0      	subs	r0, r0, r3
 8000450:	4152      	adcs	r2, r2
 8000452:	0883      	lsrs	r3, r0, #2
 8000454:	428b      	cmp	r3, r1
 8000456:	d301      	bcc.n	800045c <__divsi3+0x190>
 8000458:	008b      	lsls	r3, r1, #2
 800045a:	1ac0      	subs	r0, r0, r3
 800045c:	4152      	adcs	r2, r2
 800045e:	d2d9      	bcs.n	8000414 <__divsi3+0x148>
 8000460:	0843      	lsrs	r3, r0, #1
 8000462:	428b      	cmp	r3, r1
 8000464:	d301      	bcc.n	800046a <__divsi3+0x19e>
 8000466:	004b      	lsls	r3, r1, #1
 8000468:	1ac0      	subs	r0, r0, r3
 800046a:	4152      	adcs	r2, r2
 800046c:	1a41      	subs	r1, r0, r1
 800046e:	d200      	bcs.n	8000472 <__divsi3+0x1a6>
 8000470:	4601      	mov	r1, r0
 8000472:	4663      	mov	r3, ip
 8000474:	4152      	adcs	r2, r2
 8000476:	105b      	asrs	r3, r3, #1
 8000478:	4610      	mov	r0, r2
 800047a:	d301      	bcc.n	8000480 <__divsi3+0x1b4>
 800047c:	4240      	negs	r0, r0
 800047e:	2b00      	cmp	r3, #0
 8000480:	d500      	bpl.n	8000484 <__divsi3+0x1b8>
 8000482:	4249      	negs	r1, r1
 8000484:	4770      	bx	lr
 8000486:	4663      	mov	r3, ip
 8000488:	105b      	asrs	r3, r3, #1
 800048a:	d300      	bcc.n	800048e <__divsi3+0x1c2>
 800048c:	4240      	negs	r0, r0
 800048e:	b501      	push	{r0, lr}
 8000490:	2000      	movs	r0, #0
 8000492:	f000 f805 	bl	80004a0 <__aeabi_idiv0>
 8000496:	bd02      	pop	{r1, pc}

08000498 <__aeabi_idivmod>:
 8000498:	2900      	cmp	r1, #0
 800049a:	d0f8      	beq.n	800048e <__divsi3+0x1c2>
 800049c:	e716      	b.n	80002cc <__divsi3>
 800049e:	4770      	bx	lr

080004a0 <__aeabi_idiv0>:
 80004a0:	4770      	bx	lr
 80004a2:	46c0      	nop			@ (mov r8, r8)

080004a4 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80004a4:	b580      	push	{r7, lr}
 80004a6:	b084      	sub	sp, #16
 80004a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80004aa:	1d3b      	adds	r3, r7, #4
 80004ac:	0018      	movs	r0, r3
 80004ae:	230c      	movs	r3, #12
 80004b0:	001a      	movs	r2, r3
 80004b2:	2100      	movs	r1, #0
 80004b4:	f004 fea2 	bl	80051fc <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80004b8:	4b2d      	ldr	r3, [pc, #180]	@ (8000570 <MX_ADC1_Init+0xcc>)
 80004ba:	4a2e      	ldr	r2, [pc, #184]	@ (8000574 <MX_ADC1_Init+0xd0>)
 80004bc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80004be:	4b2c      	ldr	r3, [pc, #176]	@ (8000570 <MX_ADC1_Init+0xcc>)
 80004c0:	2280      	movs	r2, #128	@ 0x80
 80004c2:	05d2      	lsls	r2, r2, #23
 80004c4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80004c6:	4b2a      	ldr	r3, [pc, #168]	@ (8000570 <MX_ADC1_Init+0xcc>)
 80004c8:	2200      	movs	r2, #0
 80004ca:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80004cc:	4b28      	ldr	r3, [pc, #160]	@ (8000570 <MX_ADC1_Init+0xcc>)
 80004ce:	2200      	movs	r2, #0
 80004d0:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80004d2:	4b27      	ldr	r3, [pc, #156]	@ (8000570 <MX_ADC1_Init+0xcc>)
 80004d4:	2200      	movs	r2, #0
 80004d6:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80004d8:	4b25      	ldr	r3, [pc, #148]	@ (8000570 <MX_ADC1_Init+0xcc>)
 80004da:	2204      	movs	r2, #4
 80004dc:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80004de:	4b24      	ldr	r3, [pc, #144]	@ (8000570 <MX_ADC1_Init+0xcc>)
 80004e0:	2200      	movs	r2, #0
 80004e2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 80004e4:	4b22      	ldr	r3, [pc, #136]	@ (8000570 <MX_ADC1_Init+0xcc>)
 80004e6:	2200      	movs	r2, #0
 80004e8:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80004ea:	4b21      	ldr	r3, [pc, #132]	@ (8000570 <MX_ADC1_Init+0xcc>)
 80004ec:	2200      	movs	r2, #0
 80004ee:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 80004f0:	4b1f      	ldr	r3, [pc, #124]	@ (8000570 <MX_ADC1_Init+0xcc>)
 80004f2:	2201      	movs	r2, #1
 80004f4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80004f6:	4b1e      	ldr	r3, [pc, #120]	@ (8000570 <MX_ADC1_Init+0xcc>)
 80004f8:	2220      	movs	r2, #32
 80004fa:	2100      	movs	r1, #0
 80004fc:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80004fe:	4b1c      	ldr	r3, [pc, #112]	@ (8000570 <MX_ADC1_Init+0xcc>)
 8000500:	2200      	movs	r2, #0
 8000502:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000504:	4b1a      	ldr	r3, [pc, #104]	@ (8000570 <MX_ADC1_Init+0xcc>)
 8000506:	2200      	movs	r2, #0
 8000508:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800050a:	4b19      	ldr	r3, [pc, #100]	@ (8000570 <MX_ADC1_Init+0xcc>)
 800050c:	222c      	movs	r2, #44	@ 0x2c
 800050e:	2100      	movs	r1, #0
 8000510:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000512:	4b17      	ldr	r3, [pc, #92]	@ (8000570 <MX_ADC1_Init+0xcc>)
 8000514:	2200      	movs	r2, #0
 8000516:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8000518:	4b15      	ldr	r3, [pc, #84]	@ (8000570 <MX_ADC1_Init+0xcc>)
 800051a:	2200      	movs	r2, #0
 800051c:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 800051e:	4b14      	ldr	r3, [pc, #80]	@ (8000570 <MX_ADC1_Init+0xcc>)
 8000520:	2200      	movs	r2, #0
 8000522:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8000524:	4b12      	ldr	r3, [pc, #72]	@ (8000570 <MX_ADC1_Init+0xcc>)
 8000526:	223c      	movs	r2, #60	@ 0x3c
 8000528:	2100      	movs	r1, #0
 800052a:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 800052c:	4b10      	ldr	r3, [pc, #64]	@ (8000570 <MX_ADC1_Init+0xcc>)
 800052e:	2200      	movs	r2, #0
 8000530:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000532:	4b0f      	ldr	r3, [pc, #60]	@ (8000570 <MX_ADC1_Init+0xcc>)
 8000534:	0018      	movs	r0, r3
 8000536:	f001 f877 	bl	8001628 <HAL_ADC_Init>
 800053a:	1e03      	subs	r3, r0, #0
 800053c:	d001      	beq.n	8000542 <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 800053e:	f000 fad6 	bl	8000aee <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000542:	1d3b      	adds	r3, r7, #4
 8000544:	2201      	movs	r2, #1
 8000546:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000548:	1d3b      	adds	r3, r7, #4
 800054a:	2200      	movs	r2, #0
 800054c:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 800054e:	1d3b      	adds	r3, r7, #4
 8000550:	2200      	movs	r2, #0
 8000552:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000554:	1d3a      	adds	r2, r7, #4
 8000556:	4b06      	ldr	r3, [pc, #24]	@ (8000570 <MX_ADC1_Init+0xcc>)
 8000558:	0011      	movs	r1, r2
 800055a:	0018      	movs	r0, r3
 800055c:	f001 fb3c 	bl	8001bd8 <HAL_ADC_ConfigChannel>
 8000560:	1e03      	subs	r3, r0, #0
 8000562:	d001      	beq.n	8000568 <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 8000564:	f000 fac3 	bl	8000aee <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000568:	46c0      	nop			@ (mov r8, r8)
 800056a:	46bd      	mov	sp, r7
 800056c:	b004      	add	sp, #16
 800056e:	bd80      	pop	{r7, pc}
 8000570:	20000028 	.word	0x20000028
 8000574:	40012400 	.word	0x40012400

08000578 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000578:	b590      	push	{r4, r7, lr}
 800057a:	b08b      	sub	sp, #44	@ 0x2c
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000580:	2414      	movs	r4, #20
 8000582:	193b      	adds	r3, r7, r4
 8000584:	0018      	movs	r0, r3
 8000586:	2314      	movs	r3, #20
 8000588:	001a      	movs	r2, r3
 800058a:	2100      	movs	r1, #0
 800058c:	f004 fe36 	bl	80051fc <memset>
  if(adcHandle->Instance==ADC1)
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	4a29      	ldr	r2, [pc, #164]	@ (800063c <HAL_ADC_MspInit+0xc4>)
 8000596:	4293      	cmp	r3, r2
 8000598:	d14c      	bne.n	8000634 <HAL_ADC_MspInit+0xbc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800059a:	4b29      	ldr	r3, [pc, #164]	@ (8000640 <HAL_ADC_MspInit+0xc8>)
 800059c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800059e:	4b28      	ldr	r3, [pc, #160]	@ (8000640 <HAL_ADC_MspInit+0xc8>)
 80005a0:	2180      	movs	r1, #128	@ 0x80
 80005a2:	0349      	lsls	r1, r1, #13
 80005a4:	430a      	orrs	r2, r1
 80005a6:	641a      	str	r2, [r3, #64]	@ 0x40
 80005a8:	4b25      	ldr	r3, [pc, #148]	@ (8000640 <HAL_ADC_MspInit+0xc8>)
 80005aa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80005ac:	2380      	movs	r3, #128	@ 0x80
 80005ae:	035b      	lsls	r3, r3, #13
 80005b0:	4013      	ands	r3, r2
 80005b2:	613b      	str	r3, [r7, #16]
 80005b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005b6:	4b22      	ldr	r3, [pc, #136]	@ (8000640 <HAL_ADC_MspInit+0xc8>)
 80005b8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80005ba:	4b21      	ldr	r3, [pc, #132]	@ (8000640 <HAL_ADC_MspInit+0xc8>)
 80005bc:	2101      	movs	r1, #1
 80005be:	430a      	orrs	r2, r1
 80005c0:	635a      	str	r2, [r3, #52]	@ 0x34
 80005c2:	4b1f      	ldr	r3, [pc, #124]	@ (8000640 <HAL_ADC_MspInit+0xc8>)
 80005c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80005c6:	2201      	movs	r2, #1
 80005c8:	4013      	ands	r3, r2
 80005ca:	60fb      	str	r3, [r7, #12]
 80005cc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80005ce:	4b1c      	ldr	r3, [pc, #112]	@ (8000640 <HAL_ADC_MspInit+0xc8>)
 80005d0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80005d2:	4b1b      	ldr	r3, [pc, #108]	@ (8000640 <HAL_ADC_MspInit+0xc8>)
 80005d4:	2102      	movs	r1, #2
 80005d6:	430a      	orrs	r2, r1
 80005d8:	635a      	str	r2, [r3, #52]	@ 0x34
 80005da:	4b19      	ldr	r3, [pc, #100]	@ (8000640 <HAL_ADC_MspInit+0xc8>)
 80005dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80005de:	2202      	movs	r2, #2
 80005e0:	4013      	ands	r3, r2
 80005e2:	60bb      	str	r3, [r7, #8]
 80005e4:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN0
    PB2     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = VBOOST_FDBK_Pin;
 80005e6:	193b      	adds	r3, r7, r4
 80005e8:	2201      	movs	r2, #1
 80005ea:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005ec:	193b      	adds	r3, r7, r4
 80005ee:	2203      	movs	r2, #3
 80005f0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f2:	193b      	adds	r3, r7, r4
 80005f4:	2200      	movs	r2, #0
 80005f6:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(VBOOST_FDBK_GPIO_Port, &GPIO_InitStruct);
 80005f8:	193a      	adds	r2, r7, r4
 80005fa:	23a0      	movs	r3, #160	@ 0xa0
 80005fc:	05db      	lsls	r3, r3, #23
 80005fe:	0011      	movs	r1, r2
 8000600:	0018      	movs	r0, r3
 8000602:	f001 fdbf 	bl	8002184 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = NFC_VOUT_SENSE_Pin;
 8000606:	193b      	adds	r3, r7, r4
 8000608:	2204      	movs	r2, #4
 800060a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800060c:	193b      	adds	r3, r7, r4
 800060e:	2203      	movs	r2, #3
 8000610:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000612:	193b      	adds	r3, r7, r4
 8000614:	2200      	movs	r2, #0
 8000616:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(NFC_VOUT_SENSE_GPIO_Port, &GPIO_InitStruct);
 8000618:	193b      	adds	r3, r7, r4
 800061a:	4a0a      	ldr	r2, [pc, #40]	@ (8000644 <HAL_ADC_MspInit+0xcc>)
 800061c:	0019      	movs	r1, r3
 800061e:	0010      	movs	r0, r2
 8000620:	f001 fdb0 	bl	8002184 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 8000624:	2200      	movs	r2, #0
 8000626:	2100      	movs	r1, #0
 8000628:	200c      	movs	r0, #12
 800062a:	f001 fd79 	bl	8002120 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 800062e:	200c      	movs	r0, #12
 8000630:	f001 fd8b 	bl	800214a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000634:	46c0      	nop			@ (mov r8, r8)
 8000636:	46bd      	mov	sp, r7
 8000638:	b00b      	add	sp, #44	@ 0x2c
 800063a:	bd90      	pop	{r4, r7, pc}
 800063c:	40012400 	.word	0x40012400
 8000640:	40021000 	.word	0x40021000
 8000644:	50000400 	.word	0x50000400

08000648 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8000648:	b590      	push	{r4, r7, lr}
 800064a:	b08b      	sub	sp, #44	@ 0x2c
 800064c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800064e:	2414      	movs	r4, #20
 8000650:	193b      	adds	r3, r7, r4
 8000652:	0018      	movs	r0, r3
 8000654:	2314      	movs	r3, #20
 8000656:	001a      	movs	r2, r3
 8000658:	2100      	movs	r1, #0
 800065a:	f004 fdcf 	bl	80051fc <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800065e:	4b73      	ldr	r3, [pc, #460]	@ (800082c <MX_GPIO_Init+0x1e4>)
 8000660:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000662:	4b72      	ldr	r3, [pc, #456]	@ (800082c <MX_GPIO_Init+0x1e4>)
 8000664:	2104      	movs	r1, #4
 8000666:	430a      	orrs	r2, r1
 8000668:	635a      	str	r2, [r3, #52]	@ 0x34
 800066a:	4b70      	ldr	r3, [pc, #448]	@ (800082c <MX_GPIO_Init+0x1e4>)
 800066c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800066e:	2204      	movs	r2, #4
 8000670:	4013      	ands	r3, r2
 8000672:	613b      	str	r3, [r7, #16]
 8000674:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000676:	4b6d      	ldr	r3, [pc, #436]	@ (800082c <MX_GPIO_Init+0x1e4>)
 8000678:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800067a:	4b6c      	ldr	r3, [pc, #432]	@ (800082c <MX_GPIO_Init+0x1e4>)
 800067c:	2120      	movs	r1, #32
 800067e:	430a      	orrs	r2, r1
 8000680:	635a      	str	r2, [r3, #52]	@ 0x34
 8000682:	4b6a      	ldr	r3, [pc, #424]	@ (800082c <MX_GPIO_Init+0x1e4>)
 8000684:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000686:	2220      	movs	r2, #32
 8000688:	4013      	ands	r3, r2
 800068a:	60fb      	str	r3, [r7, #12]
 800068c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800068e:	4b67      	ldr	r3, [pc, #412]	@ (800082c <MX_GPIO_Init+0x1e4>)
 8000690:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000692:	4b66      	ldr	r3, [pc, #408]	@ (800082c <MX_GPIO_Init+0x1e4>)
 8000694:	2101      	movs	r1, #1
 8000696:	430a      	orrs	r2, r1
 8000698:	635a      	str	r2, [r3, #52]	@ 0x34
 800069a:	4b64      	ldr	r3, [pc, #400]	@ (800082c <MX_GPIO_Init+0x1e4>)
 800069c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800069e:	2201      	movs	r2, #1
 80006a0:	4013      	ands	r3, r2
 80006a2:	60bb      	str	r3, [r7, #8]
 80006a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006a6:	4b61      	ldr	r3, [pc, #388]	@ (800082c <MX_GPIO_Init+0x1e4>)
 80006a8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80006aa:	4b60      	ldr	r3, [pc, #384]	@ (800082c <MX_GPIO_Init+0x1e4>)
 80006ac:	2102      	movs	r1, #2
 80006ae:	430a      	orrs	r2, r1
 80006b0:	635a      	str	r2, [r3, #52]	@ 0x34
 80006b2:	4b5e      	ldr	r3, [pc, #376]	@ (800082c <MX_GPIO_Init+0x1e4>)
 80006b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80006b6:	2202      	movs	r2, #2
 80006b8:	4013      	ands	r3, r2
 80006ba:	607b      	str	r3, [r7, #4]
 80006bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006be:	4b5b      	ldr	r3, [pc, #364]	@ (800082c <MX_GPIO_Init+0x1e4>)
 80006c0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80006c2:	4b5a      	ldr	r3, [pc, #360]	@ (800082c <MX_GPIO_Init+0x1e4>)
 80006c4:	2108      	movs	r1, #8
 80006c6:	430a      	orrs	r2, r1
 80006c8:	635a      	str	r2, [r3, #52]	@ 0x34
 80006ca:	4b58      	ldr	r3, [pc, #352]	@ (800082c <MX_GPIO_Init+0x1e4>)
 80006cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80006ce:	2208      	movs	r2, #8
 80006d0:	4013      	ands	r3, r2
 80006d2:	603b      	str	r3, [r7, #0]
 80006d4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, VBOOST_ENABLE_Pin|LED_RED_Pin|LED_YELLOW_Pin|LED_GREEN_Pin, GPIO_PIN_RESET);
 80006d6:	23a0      	movs	r3, #160	@ 0xa0
 80006d8:	05db      	lsls	r3, r3, #23
 80006da:	2200      	movs	r2, #0
 80006dc:	213c      	movs	r1, #60	@ 0x3c
 80006de:	0018      	movs	r0, r3
 80006e0:	f001 feb4 	bl	800244c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NFC_POWER_ENABLE_GPIO_Port, NFC_POWER_ENABLE_Pin, GPIO_PIN_RESET);
 80006e4:	4b52      	ldr	r3, [pc, #328]	@ (8000830 <MX_GPIO_Init+0x1e8>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	2140      	movs	r1, #64	@ 0x40
 80006ea:	0018      	movs	r0, r3
 80006ec:	f001 feae 	bl	800244c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BASE_BUTTON_Pin;
 80006f0:	193b      	adds	r3, r7, r4
 80006f2:	2280      	movs	r2, #128	@ 0x80
 80006f4:	0192      	lsls	r2, r2, #6
 80006f6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006f8:	193b      	adds	r3, r7, r4
 80006fa:	2200      	movs	r2, #0
 80006fc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fe:	193b      	adds	r3, r7, r4
 8000700:	2200      	movs	r2, #0
 8000702:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BASE_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000704:	193b      	adds	r3, r7, r4
 8000706:	4a4b      	ldr	r2, [pc, #300]	@ (8000834 <MX_GPIO_Init+0x1ec>)
 8000708:	0019      	movs	r1, r3
 800070a:	0010      	movs	r0, r2
 800070c:	f001 fd3a 	bl	8002184 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 PC6 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_6|GPIO_PIN_7;
 8000710:	193b      	adds	r3, r7, r4
 8000712:	4a49      	ldr	r2, [pc, #292]	@ (8000838 <MX_GPIO_Init+0x1f0>)
 8000714:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000716:	193b      	adds	r3, r7, r4
 8000718:	2203      	movs	r2, #3
 800071a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071c:	193b      	adds	r3, r7, r4
 800071e:	2200      	movs	r2, #0
 8000720:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000722:	193b      	adds	r3, r7, r4
 8000724:	4a43      	ldr	r2, [pc, #268]	@ (8000834 <MX_GPIO_Init+0x1ec>)
 8000726:	0019      	movs	r1, r3
 8000728:	0010      	movs	r0, r2
 800072a:	f001 fd2b 	bl	8002184 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800072e:	193b      	adds	r3, r7, r4
 8000730:	2203      	movs	r2, #3
 8000732:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000734:	193b      	adds	r3, r7, r4
 8000736:	2203      	movs	r2, #3
 8000738:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073a:	193b      	adds	r3, r7, r4
 800073c:	2200      	movs	r2, #0
 800073e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000740:	193b      	adds	r3, r7, r4
 8000742:	4a3e      	ldr	r2, [pc, #248]	@ (800083c <MX_GPIO_Init+0x1f4>)
 8000744:	0019      	movs	r1, r3
 8000746:	0010      	movs	r0, r2
 8000748:	f001 fd1c 	bl	8002184 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = VBOOST_ENABLE_Pin|LED_RED_Pin|LED_YELLOW_Pin|LED_GREEN_Pin;
 800074c:	193b      	adds	r3, r7, r4
 800074e:	223c      	movs	r2, #60	@ 0x3c
 8000750:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000752:	193b      	adds	r3, r7, r4
 8000754:	2201      	movs	r2, #1
 8000756:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000758:	193b      	adds	r3, r7, r4
 800075a:	2200      	movs	r2, #0
 800075c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800075e:	193b      	adds	r3, r7, r4
 8000760:	2200      	movs	r2, #0
 8000762:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000764:	193a      	adds	r2, r7, r4
 8000766:	23a0      	movs	r3, #160	@ 0xa0
 8000768:	05db      	lsls	r3, r3, #23
 800076a:	0011      	movs	r1, r2
 800076c:	0018      	movs	r0, r3
 800076e:	f001 fd09 	bl	8002184 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA7 PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
 8000772:	193b      	adds	r3, r7, r4
 8000774:	4a32      	ldr	r2, [pc, #200]	@ (8000840 <MX_GPIO_Init+0x1f8>)
 8000776:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000778:	193b      	adds	r3, r7, r4
 800077a:	2203      	movs	r2, #3
 800077c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077e:	193b      	adds	r3, r7, r4
 8000780:	2200      	movs	r2, #0
 8000782:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000784:	193a      	adds	r2, r7, r4
 8000786:	23a0      	movs	r3, #160	@ 0xa0
 8000788:	05db      	lsls	r3, r3, #23
 800078a:	0011      	movs	r1, r2
 800078c:	0018      	movs	r0, r3
 800078e:	f001 fcf9 	bl	8002184 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB10 PB11
                           PB12 PB13 PB14 PB15
                           PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11
 8000792:	193b      	adds	r3, r7, r4
 8000794:	4a2b      	ldr	r2, [pc, #172]	@ (8000844 <MX_GPIO_Init+0x1fc>)
 8000796:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000798:	193b      	adds	r3, r7, r4
 800079a:	2203      	movs	r2, #3
 800079c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079e:	193b      	adds	r3, r7, r4
 80007a0:	2200      	movs	r2, #0
 80007a2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007a4:	193b      	adds	r3, r7, r4
 80007a6:	4a22      	ldr	r2, [pc, #136]	@ (8000830 <MX_GPIO_Init+0x1e8>)
 80007a8:	0019      	movs	r1, r3
 80007aa:	0010      	movs	r0, r2
 80007ac:	f001 fcea 	bl	8002184 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD2 PD3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80007b0:	193b      	adds	r3, r7, r4
 80007b2:	220f      	movs	r2, #15
 80007b4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007b6:	193b      	adds	r3, r7, r4
 80007b8:	2203      	movs	r2, #3
 80007ba:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007bc:	193b      	adds	r3, r7, r4
 80007be:	2200      	movs	r2, #0
 80007c0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007c2:	193b      	adds	r3, r7, r4
 80007c4:	4a20      	ldr	r2, [pc, #128]	@ (8000848 <MX_GPIO_Init+0x200>)
 80007c6:	0019      	movs	r1, r3
 80007c8:	0010      	movs	r0, r2
 80007ca:	f001 fcdb 	bl	8002184 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NFC_POWER_ENABLE_Pin;
 80007ce:	193b      	adds	r3, r7, r4
 80007d0:	2240      	movs	r2, #64	@ 0x40
 80007d2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007d4:	193b      	adds	r3, r7, r4
 80007d6:	2201      	movs	r2, #1
 80007d8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007da:	193b      	adds	r3, r7, r4
 80007dc:	2200      	movs	r2, #0
 80007de:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e0:	193b      	adds	r3, r7, r4
 80007e2:	2200      	movs	r2, #0
 80007e4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(NFC_POWER_ENABLE_GPIO_Port, &GPIO_InitStruct);
 80007e6:	193b      	adds	r3, r7, r4
 80007e8:	4a11      	ldr	r2, [pc, #68]	@ (8000830 <MX_GPIO_Init+0x1e8>)
 80007ea:	0019      	movs	r1, r3
 80007ec:	0010      	movs	r0, r2
 80007ee:	f001 fcc9 	bl	8002184 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NFC_FD_INT_Pin;
 80007f2:	0021      	movs	r1, r4
 80007f4:	187b      	adds	r3, r7, r1
 80007f6:	2280      	movs	r2, #128	@ 0x80
 80007f8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007fa:	187b      	adds	r3, r7, r1
 80007fc:	2288      	movs	r2, #136	@ 0x88
 80007fe:	0352      	lsls	r2, r2, #13
 8000800:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000802:	187b      	adds	r3, r7, r1
 8000804:	2200      	movs	r2, #0
 8000806:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(NFC_FD_INT_GPIO_Port, &GPIO_InitStruct);
 8000808:	187b      	adds	r3, r7, r1
 800080a:	4a09      	ldr	r2, [pc, #36]	@ (8000830 <MX_GPIO_Init+0x1e8>)
 800080c:	0019      	movs	r1, r3
 800080e:	0010      	movs	r0, r2
 8000810:	f001 fcb8 	bl	8002184 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8000814:	2200      	movs	r2, #0
 8000816:	2100      	movs	r1, #0
 8000818:	2007      	movs	r0, #7
 800081a:	f001 fc81 	bl	8002120 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 800081e:	2007      	movs	r0, #7
 8000820:	f001 fc93 	bl	800214a <HAL_NVIC_EnableIRQ>

}
 8000824:	46c0      	nop			@ (mov r8, r8)
 8000826:	46bd      	mov	sp, r7
 8000828:	b00b      	add	sp, #44	@ 0x2c
 800082a:	bd90      	pop	{r4, r7, pc}
 800082c:	40021000 	.word	0x40021000
 8000830:	50000400 	.word	0x50000400
 8000834:	50000800 	.word	0x50000800
 8000838:	0000c0c0 	.word	0x0000c0c0
 800083c:	50001400 	.word	0x50001400
 8000840:	00009880 	.word	0x00009880
 8000844:	0000fc3b 	.word	0x0000fc3b
 8000848:	50000c00 	.word	0x50000c00

0800084c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000850:	4b1b      	ldr	r3, [pc, #108]	@ (80008c0 <MX_I2C1_Init+0x74>)
 8000852:	4a1c      	ldr	r2, [pc, #112]	@ (80008c4 <MX_I2C1_Init+0x78>)
 8000854:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10707DBC;
 8000856:	4b1a      	ldr	r3, [pc, #104]	@ (80008c0 <MX_I2C1_Init+0x74>)
 8000858:	4a1b      	ldr	r2, [pc, #108]	@ (80008c8 <MX_I2C1_Init+0x7c>)
 800085a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800085c:	4b18      	ldr	r3, [pc, #96]	@ (80008c0 <MX_I2C1_Init+0x74>)
 800085e:	2200      	movs	r2, #0
 8000860:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000862:	4b17      	ldr	r3, [pc, #92]	@ (80008c0 <MX_I2C1_Init+0x74>)
 8000864:	2201      	movs	r2, #1
 8000866:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000868:	4b15      	ldr	r3, [pc, #84]	@ (80008c0 <MX_I2C1_Init+0x74>)
 800086a:	2200      	movs	r2, #0
 800086c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800086e:	4b14      	ldr	r3, [pc, #80]	@ (80008c0 <MX_I2C1_Init+0x74>)
 8000870:	2200      	movs	r2, #0
 8000872:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000874:	4b12      	ldr	r3, [pc, #72]	@ (80008c0 <MX_I2C1_Init+0x74>)
 8000876:	2200      	movs	r2, #0
 8000878:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800087a:	4b11      	ldr	r3, [pc, #68]	@ (80008c0 <MX_I2C1_Init+0x74>)
 800087c:	2200      	movs	r2, #0
 800087e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000880:	4b0f      	ldr	r3, [pc, #60]	@ (80008c0 <MX_I2C1_Init+0x74>)
 8000882:	2200      	movs	r2, #0
 8000884:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000886:	4b0e      	ldr	r3, [pc, #56]	@ (80008c0 <MX_I2C1_Init+0x74>)
 8000888:	0018      	movs	r0, r3
 800088a:	f001 fe55 	bl	8002538 <HAL_I2C_Init>
 800088e:	1e03      	subs	r3, r0, #0
 8000890:	d001      	beq.n	8000896 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000892:	f000 f92c 	bl	8000aee <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000896:	4b0a      	ldr	r3, [pc, #40]	@ (80008c0 <MX_I2C1_Init+0x74>)
 8000898:	2100      	movs	r1, #0
 800089a:	0018      	movs	r0, r3
 800089c:	f001 fef2 	bl	8002684 <HAL_I2CEx_ConfigAnalogFilter>
 80008a0:	1e03      	subs	r3, r0, #0
 80008a2:	d001      	beq.n	80008a8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80008a4:	f000 f923 	bl	8000aee <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80008a8:	4b05      	ldr	r3, [pc, #20]	@ (80008c0 <MX_I2C1_Init+0x74>)
 80008aa:	2100      	movs	r1, #0
 80008ac:	0018      	movs	r0, r3
 80008ae:	f001 ff35 	bl	800271c <HAL_I2CEx_ConfigDigitalFilter>
 80008b2:	1e03      	subs	r3, r0, #0
 80008b4:	d001      	beq.n	80008ba <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80008b6:	f000 f91a 	bl	8000aee <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008ba:	46c0      	nop			@ (mov r8, r8)
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	2000008c 	.word	0x2000008c
 80008c4:	40005400 	.word	0x40005400
 80008c8:	10707dbc 	.word	0x10707dbc

080008cc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80008cc:	b590      	push	{r4, r7, lr}
 80008ce:	b091      	sub	sp, #68	@ 0x44
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d4:	232c      	movs	r3, #44	@ 0x2c
 80008d6:	18fb      	adds	r3, r7, r3
 80008d8:	0018      	movs	r0, r3
 80008da:	2314      	movs	r3, #20
 80008dc:	001a      	movs	r2, r3
 80008de:	2100      	movs	r1, #0
 80008e0:	f004 fc8c 	bl	80051fc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008e4:	2410      	movs	r4, #16
 80008e6:	193b      	adds	r3, r7, r4
 80008e8:	0018      	movs	r0, r3
 80008ea:	231c      	movs	r3, #28
 80008ec:	001a      	movs	r2, r3
 80008ee:	2100      	movs	r1, #0
 80008f0:	f004 fc84 	bl	80051fc <memset>
  if(i2cHandle->Instance==I2C1)
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	4a22      	ldr	r2, [pc, #136]	@ (8000984 <HAL_I2C_MspInit+0xb8>)
 80008fa:	4293      	cmp	r3, r2
 80008fc:	d13e      	bne.n	800097c <HAL_I2C_MspInit+0xb0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80008fe:	193b      	adds	r3, r7, r4
 8000900:	2220      	movs	r2, #32
 8000902:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000904:	193b      	adds	r3, r7, r4
 8000906:	2200      	movs	r2, #0
 8000908:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800090a:	193b      	adds	r3, r7, r4
 800090c:	0018      	movs	r0, r3
 800090e:	f002 fcb9 	bl	8003284 <HAL_RCCEx_PeriphCLKConfig>
 8000912:	1e03      	subs	r3, r0, #0
 8000914:	d001      	beq.n	800091a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000916:	f000 f8ea 	bl	8000aee <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800091a:	4b1b      	ldr	r3, [pc, #108]	@ (8000988 <HAL_I2C_MspInit+0xbc>)
 800091c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800091e:	4b1a      	ldr	r3, [pc, #104]	@ (8000988 <HAL_I2C_MspInit+0xbc>)
 8000920:	2102      	movs	r1, #2
 8000922:	430a      	orrs	r2, r1
 8000924:	635a      	str	r2, [r3, #52]	@ 0x34
 8000926:	4b18      	ldr	r3, [pc, #96]	@ (8000988 <HAL_I2C_MspInit+0xbc>)
 8000928:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800092a:	2202      	movs	r2, #2
 800092c:	4013      	ands	r3, r2
 800092e:	60fb      	str	r3, [r7, #12]
 8000930:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = NFC_I2C_SCL_Pin|NFC_I2C_SDA_Pin;
 8000932:	212c      	movs	r1, #44	@ 0x2c
 8000934:	187b      	adds	r3, r7, r1
 8000936:	22c0      	movs	r2, #192	@ 0xc0
 8000938:	0092      	lsls	r2, r2, #2
 800093a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800093c:	187b      	adds	r3, r7, r1
 800093e:	2212      	movs	r2, #18
 8000940:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000942:	187b      	adds	r3, r7, r1
 8000944:	2200      	movs	r2, #0
 8000946:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000948:	187b      	adds	r3, r7, r1
 800094a:	2200      	movs	r2, #0
 800094c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 800094e:	187b      	adds	r3, r7, r1
 8000950:	2206      	movs	r2, #6
 8000952:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000954:	187b      	adds	r3, r7, r1
 8000956:	4a0d      	ldr	r2, [pc, #52]	@ (800098c <HAL_I2C_MspInit+0xc0>)
 8000958:	0019      	movs	r1, r3
 800095a:	0010      	movs	r0, r2
 800095c:	f001 fc12 	bl	8002184 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000960:	4b09      	ldr	r3, [pc, #36]	@ (8000988 <HAL_I2C_MspInit+0xbc>)
 8000962:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000964:	4b08      	ldr	r3, [pc, #32]	@ (8000988 <HAL_I2C_MspInit+0xbc>)
 8000966:	2180      	movs	r1, #128	@ 0x80
 8000968:	0389      	lsls	r1, r1, #14
 800096a:	430a      	orrs	r2, r1
 800096c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800096e:	4b06      	ldr	r3, [pc, #24]	@ (8000988 <HAL_I2C_MspInit+0xbc>)
 8000970:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000972:	2380      	movs	r3, #128	@ 0x80
 8000974:	039b      	lsls	r3, r3, #14
 8000976:	4013      	ands	r3, r2
 8000978:	60bb      	str	r3, [r7, #8]
 800097a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800097c:	46c0      	nop			@ (mov r8, r8)
 800097e:	46bd      	mov	sp, r7
 8000980:	b011      	add	sp, #68	@ 0x44
 8000982:	bd90      	pop	{r4, r7, pc}
 8000984:	40005400 	.word	0x40005400
 8000988:	40021000 	.word	0x40021000
 800098c:	50000400 	.word	0x50000400

08000990 <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8000994:	4b0b      	ldr	r3, [pc, #44]	@ (80009c4 <MX_IWDG_Init+0x34>)
 8000996:	4a0c      	ldr	r2, [pc, #48]	@ (80009c8 <MX_IWDG_Init+0x38>)
 8000998:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
 800099a:	4b0a      	ldr	r3, [pc, #40]	@ (80009c4 <MX_IWDG_Init+0x34>)
 800099c:	2200      	movs	r2, #0
 800099e:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 80009a0:	4b08      	ldr	r3, [pc, #32]	@ (80009c4 <MX_IWDG_Init+0x34>)
 80009a2:	4a0a      	ldr	r2, [pc, #40]	@ (80009cc <MX_IWDG_Init+0x3c>)
 80009a4:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 4095;
 80009a6:	4b07      	ldr	r3, [pc, #28]	@ (80009c4 <MX_IWDG_Init+0x34>)
 80009a8:	4a08      	ldr	r2, [pc, #32]	@ (80009cc <MX_IWDG_Init+0x3c>)
 80009aa:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 80009ac:	4b05      	ldr	r3, [pc, #20]	@ (80009c4 <MX_IWDG_Init+0x34>)
 80009ae:	0018      	movs	r0, r3
 80009b0:	f001 ff00 	bl	80027b4 <HAL_IWDG_Init>
 80009b4:	1e03      	subs	r3, r0, #0
 80009b6:	d001      	beq.n	80009bc <MX_IWDG_Init+0x2c>
  {
    Error_Handler();
 80009b8:	f000 f899 	bl	8000aee <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 80009bc:	46c0      	nop			@ (mov r8, r8)
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	46c0      	nop			@ (mov r8, r8)
 80009c4:	200000e0 	.word	0x200000e0
 80009c8:	40003000 	.word	0x40003000
 80009cc:	00000fff 	.word	0x00000fff

080009d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009d4:	f000 fc70 	bl	80012b8 <HAL_Init>
 #endif

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009d8:	f000 f82c 	bl	8000a34 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  hal_gpio_init();
 80009dc:	f004 fa74 	bl	8004ec8 <hal_gpio_init>
  MX_I2C1_Init();
 80009e0:	f7ff ff34 	bl	800084c <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80009e4:	f000 fbae 	bl	8001144 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 80009e8:	f7ff fd5c 	bl	80004a4 <MX_ADC1_Init>

	hal_timer_init();
 80009ec:	f004 fab3 	bl	8004f56 <hal_timer_init>
  MX_IWDG_Init();
  MX_RTC_Init();
  MX_TIM15_Init();
  /* USER CODE BEGIN 2 */
#endif
  hal_watchdog_init(); // Initialize the the watch dog handle in submod-hal_generic
 80009f0:	f004 fbe2 	bl	80051b8 <hal_watchdog_init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  /* reset the WDT */
	  hal_watchdog_reset();
 80009f4:	f004 fbf2 	bl	80051dc <hal_watchdog_reset>

      TickSinceLastExecution = hal_timer_get_ticks_since_count(LastExecutionCount);
 80009f8:	4b0c      	ldr	r3, [pc, #48]	@ (8000a2c <main+0x5c>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	0018      	movs	r0, r3
 80009fe:	f004 fa8f 	bl	8004f20 <hal_timer_get_ticks_since_count>
 8000a02:	0002      	movs	r2, r0
 8000a04:	4b0a      	ldr	r3, [pc, #40]	@ (8000a30 <main+0x60>)
 8000a06:	601a      	str	r2, [r3, #0]

	  if (LED_TIMEOUT_INTERVAL <= TickSinceLastExecution)
 8000a08:	4b09      	ldr	r3, [pc, #36]	@ (8000a30 <main+0x60>)
 8000a0a:	681a      	ldr	r2, [r3, #0]
 8000a0c:	23fa      	movs	r3, #250	@ 0xfa
 8000a0e:	005b      	lsls	r3, r3, #1
 8000a10:	429a      	cmp	r2, r3
 8000a12:	d307      	bcc.n	8000a24 <main+0x54>
	  {
		  // Toggle the LED
		  LastExecutionCount = hal_timer_get_systick();
 8000a14:	f004 fa7c 	bl	8004f10 <hal_timer_get_systick>
 8000a18:	0002      	movs	r2, r0
 8000a1a:	4b04      	ldr	r3, [pc, #16]	@ (8000a2c <main+0x5c>)
 8000a1c:	601a      	str	r2, [r3, #0]
		  hal_gpio_toggle_output(LED_GREEN);
 8000a1e:	2003      	movs	r0, #3
 8000a20:	f004 fa5a 	bl	8004ed8 <hal_gpio_toggle_output>
	  }

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  hal_watchdog_reset();
 8000a24:	f004 fbda 	bl	80051dc <hal_watchdog_reset>
	  hal_watchdog_reset();
 8000a28:	e7e4      	b.n	80009f4 <main+0x24>
 8000a2a:	46c0      	nop			@ (mov r8, r8)
 8000a2c:	200000f0 	.word	0x200000f0
 8000a30:	200000f4 	.word	0x200000f4

08000a34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a34:	b590      	push	{r4, r7, lr}
 8000a36:	b093      	sub	sp, #76	@ 0x4c
 8000a38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a3a:	2414      	movs	r4, #20
 8000a3c:	193b      	adds	r3, r7, r4
 8000a3e:	0018      	movs	r0, r3
 8000a40:	2334      	movs	r3, #52	@ 0x34
 8000a42:	001a      	movs	r2, r3
 8000a44:	2100      	movs	r1, #0
 8000a46:	f004 fbd9 	bl	80051fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a4a:	1d3b      	adds	r3, r7, #4
 8000a4c:	0018      	movs	r0, r3
 8000a4e:	2310      	movs	r3, #16
 8000a50:	001a      	movs	r2, r3
 8000a52:	2100      	movs	r1, #0
 8000a54:	f004 fbd2 	bl	80051fc <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a58:	2380      	movs	r3, #128	@ 0x80
 8000a5a:	009b      	lsls	r3, r3, #2
 8000a5c:	0018      	movs	r0, r3
 8000a5e:	f001 ff0b 	bl	8002878 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000a62:	193b      	adds	r3, r7, r4
 8000a64:	220a      	movs	r2, #10
 8000a66:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a68:	193b      	adds	r3, r7, r4
 8000a6a:	2280      	movs	r2, #128	@ 0x80
 8000a6c:	0052      	lsls	r2, r2, #1
 8000a6e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000a70:	0021      	movs	r1, r4
 8000a72:	187b      	adds	r3, r7, r1
 8000a74:	2200      	movs	r2, #0
 8000a76:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a78:	187b      	adds	r3, r7, r1
 8000a7a:	2240      	movs	r2, #64	@ 0x40
 8000a7c:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000a7e:	187b      	adds	r3, r7, r1
 8000a80:	2201      	movs	r2, #1
 8000a82:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a84:	187b      	adds	r3, r7, r1
 8000a86:	2202      	movs	r2, #2
 8000a88:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a8a:	187b      	adds	r3, r7, r1
 8000a8c:	2202      	movs	r2, #2
 8000a8e:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000a90:	187b      	adds	r3, r7, r1
 8000a92:	2200      	movs	r2, #0
 8000a94:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000a96:	187b      	adds	r3, r7, r1
 8000a98:	2208      	movs	r2, #8
 8000a9a:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a9c:	187b      	adds	r3, r7, r1
 8000a9e:	2280      	movs	r2, #128	@ 0x80
 8000aa0:	0292      	lsls	r2, r2, #10
 8000aa2:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000aa4:	187b      	adds	r3, r7, r1
 8000aa6:	2280      	movs	r2, #128	@ 0x80
 8000aa8:	0592      	lsls	r2, r2, #22
 8000aaa:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000aac:	187b      	adds	r3, r7, r1
 8000aae:	0018      	movs	r0, r3
 8000ab0:	f001 ff2e 	bl	8002910 <HAL_RCC_OscConfig>
 8000ab4:	1e03      	subs	r3, r0, #0
 8000ab6:	d001      	beq.n	8000abc <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000ab8:	f000 f819 	bl	8000aee <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000abc:	1d3b      	adds	r3, r7, #4
 8000abe:	2207      	movs	r2, #7
 8000ac0:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ac2:	1d3b      	adds	r3, r7, #4
 8000ac4:	2202      	movs	r2, #2
 8000ac6:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ac8:	1d3b      	adds	r3, r7, #4
 8000aca:	2200      	movs	r2, #0
 8000acc:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ace:	1d3b      	adds	r3, r7, #4
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ad4:	1d3b      	adds	r3, r7, #4
 8000ad6:	2102      	movs	r1, #2
 8000ad8:	0018      	movs	r0, r3
 8000ada:	f002 fa29 	bl	8002f30 <HAL_RCC_ClockConfig>
 8000ade:	1e03      	subs	r3, r0, #0
 8000ae0:	d001      	beq.n	8000ae6 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000ae2:	f000 f804 	bl	8000aee <Error_Handler>
  }
}
 8000ae6:	46c0      	nop			@ (mov r8, r8)
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	b013      	add	sp, #76	@ 0x4c
 8000aec:	bd90      	pop	{r4, r7, pc}

08000aee <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aee:	b580      	push	{r7, lr}
 8000af0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000af2:	b672      	cpsid	i
}
 8000af4:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000af6:	46c0      	nop			@ (mov r8, r8)
 8000af8:	e7fd      	b.n	8000af6 <Error_Handler+0x8>
	...

08000afc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b082      	sub	sp, #8
 8000b00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b02:	4b11      	ldr	r3, [pc, #68]	@ (8000b48 <HAL_MspInit+0x4c>)
 8000b04:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000b06:	4b10      	ldr	r3, [pc, #64]	@ (8000b48 <HAL_MspInit+0x4c>)
 8000b08:	2101      	movs	r1, #1
 8000b0a:	430a      	orrs	r2, r1
 8000b0c:	641a      	str	r2, [r3, #64]	@ 0x40
 8000b0e:	4b0e      	ldr	r3, [pc, #56]	@ (8000b48 <HAL_MspInit+0x4c>)
 8000b10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b12:	2201      	movs	r2, #1
 8000b14:	4013      	ands	r3, r2
 8000b16:	607b      	str	r3, [r7, #4]
 8000b18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b1a:	4b0b      	ldr	r3, [pc, #44]	@ (8000b48 <HAL_MspInit+0x4c>)
 8000b1c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000b1e:	4b0a      	ldr	r3, [pc, #40]	@ (8000b48 <HAL_MspInit+0x4c>)
 8000b20:	2180      	movs	r1, #128	@ 0x80
 8000b22:	0549      	lsls	r1, r1, #21
 8000b24:	430a      	orrs	r2, r1
 8000b26:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000b28:	4b07      	ldr	r3, [pc, #28]	@ (8000b48 <HAL_MspInit+0x4c>)
 8000b2a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000b2c:	2380      	movs	r3, #128	@ 0x80
 8000b2e:	055b      	lsls	r3, r3, #21
 8000b30:	4013      	ands	r3, r2
 8000b32:	603b      	str	r3, [r7, #0]
 8000b34:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8000b36:	23c0      	movs	r3, #192	@ 0xc0
 8000b38:	00db      	lsls	r3, r3, #3
 8000b3a:	0018      	movs	r0, r3
 8000b3c:	f000 fc42 	bl	80013c4 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b40:	46c0      	nop			@ (mov r8, r8)
 8000b42:	46bd      	mov	sp, r7
 8000b44:	b002      	add	sp, #8
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	40021000 	.word	0x40021000

08000b4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b50:	46c0      	nop			@ (mov r8, r8)
 8000b52:	e7fd      	b.n	8000b50 <NMI_Handler+0x4>

08000b54 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b58:	46c0      	nop			@ (mov r8, r8)
 8000b5a:	e7fd      	b.n	8000b58 <HardFault_Handler+0x4>

08000b5c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000b60:	46c0      	nop			@ (mov r8, r8)
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}

08000b66 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b66:	b580      	push	{r7, lr}
 8000b68:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b6a:	46c0      	nop			@ (mov r8, r8)
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}

08000b70 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b74:	f000 fc0a 	bl	800138c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b78:	46c0      	nop			@ (mov r8, r8)
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}

08000b7e <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8000b7e:	b580      	push	{r7, lr}
 8000b80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(NFC_FD_INT_Pin);
 8000b82:	2080      	movs	r0, #128	@ 0x80
 8000b84:	f001 fc9a 	bl	80024bc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8000b88:	46c0      	nop			@ (mov r8, r8)
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
	...

08000b90 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 interrupt.
  */
void ADC1_IRQHandler(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000b94:	4b03      	ldr	r3, [pc, #12]	@ (8000ba4 <ADC1_IRQHandler+0x14>)
 8000b96:	0018      	movs	r0, r3
 8000b98:	f000 feee 	bl	8001978 <HAL_ADC_IRQHandler>
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
  /* USER CODE BEGIN USART1_IRQn 1 */
#endif
  /* USER CODE END USART1_IRQn 1 */
}
 8000b9c:	46c0      	nop			@ (mov r8, r8)
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	46c0      	nop			@ (mov r8, r8)
 8000ba4:	20000028 	.word	0x20000028

08000ba8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim15;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b09c      	sub	sp, #112	@ 0x70
 8000bac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bae:	2360      	movs	r3, #96	@ 0x60
 8000bb0:	18fb      	adds	r3, r7, r3
 8000bb2:	0018      	movs	r0, r3
 8000bb4:	2310      	movs	r3, #16
 8000bb6:	001a      	movs	r2, r3
 8000bb8:	2100      	movs	r1, #0
 8000bba:	f004 fb1f 	bl	80051fc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bbe:	2354      	movs	r3, #84	@ 0x54
 8000bc0:	18fb      	adds	r3, r7, r3
 8000bc2:	0018      	movs	r0, r3
 8000bc4:	230c      	movs	r3, #12
 8000bc6:	001a      	movs	r2, r3
 8000bc8:	2100      	movs	r1, #0
 8000bca:	f004 fb17 	bl	80051fc <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000bce:	2338      	movs	r3, #56	@ 0x38
 8000bd0:	18fb      	adds	r3, r7, r3
 8000bd2:	0018      	movs	r0, r3
 8000bd4:	231c      	movs	r3, #28
 8000bd6:	001a      	movs	r2, r3
 8000bd8:	2100      	movs	r1, #0
 8000bda:	f004 fb0f 	bl	80051fc <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000bde:	1d3b      	adds	r3, r7, #4
 8000be0:	0018      	movs	r0, r3
 8000be2:	2334      	movs	r3, #52	@ 0x34
 8000be4:	001a      	movs	r2, r3
 8000be6:	2100      	movs	r1, #0
 8000be8:	f004 fb08 	bl	80051fc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000bec:	4b51      	ldr	r3, [pc, #324]	@ (8000d34 <MX_TIM1_Init+0x18c>)
 8000bee:	4a52      	ldr	r2, [pc, #328]	@ (8000d38 <MX_TIM1_Init+0x190>)
 8000bf0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000bf2:	4b50      	ldr	r3, [pc, #320]	@ (8000d34 <MX_TIM1_Init+0x18c>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bf8:	4b4e      	ldr	r3, [pc, #312]	@ (8000d34 <MX_TIM1_Init+0x18c>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000bfe:	4b4d      	ldr	r3, [pc, #308]	@ (8000d34 <MX_TIM1_Init+0x18c>)
 8000c00:	4a4e      	ldr	r2, [pc, #312]	@ (8000d3c <MX_TIM1_Init+0x194>)
 8000c02:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c04:	4b4b      	ldr	r3, [pc, #300]	@ (8000d34 <MX_TIM1_Init+0x18c>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000c0a:	4b4a      	ldr	r3, [pc, #296]	@ (8000d34 <MX_TIM1_Init+0x18c>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c10:	4b48      	ldr	r3, [pc, #288]	@ (8000d34 <MX_TIM1_Init+0x18c>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000c16:	4b47      	ldr	r3, [pc, #284]	@ (8000d34 <MX_TIM1_Init+0x18c>)
 8000c18:	0018      	movs	r0, r3
 8000c1a:	f002 fc67 	bl	80034ec <HAL_TIM_Base_Init>
 8000c1e:	1e03      	subs	r3, r0, #0
 8000c20:	d001      	beq.n	8000c26 <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 8000c22:	f7ff ff64 	bl	8000aee <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c26:	2160      	movs	r1, #96	@ 0x60
 8000c28:	187b      	adds	r3, r7, r1
 8000c2a:	2280      	movs	r2, #128	@ 0x80
 8000c2c:	0152      	lsls	r2, r2, #5
 8000c2e:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000c30:	187a      	adds	r2, r7, r1
 8000c32:	4b40      	ldr	r3, [pc, #256]	@ (8000d34 <MX_TIM1_Init+0x18c>)
 8000c34:	0011      	movs	r1, r2
 8000c36:	0018      	movs	r0, r3
 8000c38:	f002 fe08 	bl	800384c <HAL_TIM_ConfigClockSource>
 8000c3c:	1e03      	subs	r3, r0, #0
 8000c3e:	d001      	beq.n	8000c44 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8000c40:	f7ff ff55 	bl	8000aee <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000c44:	4b3b      	ldr	r3, [pc, #236]	@ (8000d34 <MX_TIM1_Init+0x18c>)
 8000c46:	0018      	movs	r0, r3
 8000c48:	f002 fca8 	bl	800359c <HAL_TIM_PWM_Init>
 8000c4c:	1e03      	subs	r3, r0, #0
 8000c4e:	d001      	beq.n	8000c54 <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 8000c50:	f7ff ff4d 	bl	8000aee <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c54:	2154      	movs	r1, #84	@ 0x54
 8000c56:	187b      	adds	r3, r7, r1
 8000c58:	2200      	movs	r2, #0
 8000c5a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000c5c:	187b      	adds	r3, r7, r1
 8000c5e:	2200      	movs	r2, #0
 8000c60:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c62:	187b      	adds	r3, r7, r1
 8000c64:	2200      	movs	r2, #0
 8000c66:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000c68:	187a      	adds	r2, r7, r1
 8000c6a:	4b32      	ldr	r3, [pc, #200]	@ (8000d34 <MX_TIM1_Init+0x18c>)
 8000c6c:	0011      	movs	r1, r2
 8000c6e:	0018      	movs	r0, r3
 8000c70:	f003 faa6 	bl	80041c0 <HAL_TIMEx_MasterConfigSynchronization>
 8000c74:	1e03      	subs	r3, r0, #0
 8000c76:	d001      	beq.n	8000c7c <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 8000c78:	f7ff ff39 	bl	8000aee <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c7c:	2138      	movs	r1, #56	@ 0x38
 8000c7e:	187b      	adds	r3, r7, r1
 8000c80:	2260      	movs	r2, #96	@ 0x60
 8000c82:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000c84:	187b      	adds	r3, r7, r1
 8000c86:	2200      	movs	r2, #0
 8000c88:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c8a:	187b      	adds	r3, r7, r1
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000c90:	187b      	adds	r3, r7, r1
 8000c92:	2200      	movs	r2, #0
 8000c94:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c96:	187b      	adds	r3, r7, r1
 8000c98:	2200      	movs	r2, #0
 8000c9a:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000c9c:	187b      	adds	r3, r7, r1
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000ca2:	187b      	adds	r3, r7, r1
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ca8:	1879      	adds	r1, r7, r1
 8000caa:	4b22      	ldr	r3, [pc, #136]	@ (8000d34 <MX_TIM1_Init+0x18c>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	0018      	movs	r0, r3
 8000cb0:	f002 fccc 	bl	800364c <HAL_TIM_PWM_ConfigChannel>
 8000cb4:	1e03      	subs	r3, r0, #0
 8000cb6:	d001      	beq.n	8000cbc <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 8000cb8:	f7ff ff19 	bl	8000aee <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000cbc:	1d3b      	adds	r3, r7, #4
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000cc2:	1d3b      	adds	r3, r7, #4
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000cc8:	1d3b      	adds	r3, r7, #4
 8000cca:	2200      	movs	r2, #0
 8000ccc:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000cce:	1d3b      	adds	r3, r7, #4
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000cd4:	1d3b      	adds	r3, r7, #4
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000cda:	1d3b      	adds	r3, r7, #4
 8000cdc:	2280      	movs	r2, #128	@ 0x80
 8000cde:	0192      	lsls	r2, r2, #6
 8000ce0:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000ce2:	1d3b      	adds	r3, r7, #4
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000ce8:	1d3b      	adds	r3, r7, #4
 8000cea:	2200      	movs	r2, #0
 8000cec:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000cee:	1d3b      	adds	r3, r7, #4
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000cf4:	1d3b      	adds	r3, r7, #4
 8000cf6:	2280      	movs	r2, #128	@ 0x80
 8000cf8:	0492      	lsls	r2, r2, #18
 8000cfa:	625a      	str	r2, [r3, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000cfc:	1d3b      	adds	r3, r7, #4
 8000cfe:	2200      	movs	r2, #0
 8000d00:	629a      	str	r2, [r3, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000d02:	1d3b      	adds	r3, r7, #4
 8000d04:	2200      	movs	r2, #0
 8000d06:	62da      	str	r2, [r3, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000d08:	1d3b      	adds	r3, r7, #4
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000d0e:	1d3a      	adds	r2, r7, #4
 8000d10:	4b08      	ldr	r3, [pc, #32]	@ (8000d34 <MX_TIM1_Init+0x18c>)
 8000d12:	0011      	movs	r1, r2
 8000d14:	0018      	movs	r0, r3
 8000d16:	f003 fabb 	bl	8004290 <HAL_TIMEx_ConfigBreakDeadTime>
 8000d1a:	1e03      	subs	r3, r0, #0
 8000d1c:	d001      	beq.n	8000d22 <MX_TIM1_Init+0x17a>
  {
    Error_Handler();
 8000d1e:	f7ff fee6 	bl	8000aee <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000d22:	4b04      	ldr	r3, [pc, #16]	@ (8000d34 <MX_TIM1_Init+0x18c>)
 8000d24:	0018      	movs	r0, r3
 8000d26:	f000 f979 	bl	800101c <HAL_TIM_MspPostInit>

}
 8000d2a:	46c0      	nop			@ (mov r8, r8)
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	b01c      	add	sp, #112	@ 0x70
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	46c0      	nop			@ (mov r8, r8)
 8000d34:	200000f8 	.word	0x200000f8
 8000d38:	40012c00 	.word	0x40012c00
 8000d3c:	0000ffff 	.word	0x0000ffff

08000d40 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b08e      	sub	sp, #56	@ 0x38
 8000d44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d46:	2328      	movs	r3, #40	@ 0x28
 8000d48:	18fb      	adds	r3, r7, r3
 8000d4a:	0018      	movs	r0, r3
 8000d4c:	2310      	movs	r3, #16
 8000d4e:	001a      	movs	r2, r3
 8000d50:	2100      	movs	r1, #0
 8000d52:	f004 fa53 	bl	80051fc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d56:	231c      	movs	r3, #28
 8000d58:	18fb      	adds	r3, r7, r3
 8000d5a:	0018      	movs	r0, r3
 8000d5c:	230c      	movs	r3, #12
 8000d5e:	001a      	movs	r2, r3
 8000d60:	2100      	movs	r1, #0
 8000d62:	f004 fa4b 	bl	80051fc <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d66:	003b      	movs	r3, r7
 8000d68:	0018      	movs	r0, r3
 8000d6a:	231c      	movs	r3, #28
 8000d6c:	001a      	movs	r2, r3
 8000d6e:	2100      	movs	r1, #0
 8000d70:	f004 fa44 	bl	80051fc <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000d74:	4b2f      	ldr	r3, [pc, #188]	@ (8000e34 <MX_TIM3_Init+0xf4>)
 8000d76:	4a30      	ldr	r2, [pc, #192]	@ (8000e38 <MX_TIM3_Init+0xf8>)
 8000d78:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000d7a:	4b2e      	ldr	r3, [pc, #184]	@ (8000e34 <MX_TIM3_Init+0xf4>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d80:	4b2c      	ldr	r3, [pc, #176]	@ (8000e34 <MX_TIM3_Init+0xf4>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000d86:	4b2b      	ldr	r3, [pc, #172]	@ (8000e34 <MX_TIM3_Init+0xf4>)
 8000d88:	4a2c      	ldr	r2, [pc, #176]	@ (8000e3c <MX_TIM3_Init+0xfc>)
 8000d8a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d8c:	4b29      	ldr	r3, [pc, #164]	@ (8000e34 <MX_TIM3_Init+0xf4>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d92:	4b28      	ldr	r3, [pc, #160]	@ (8000e34 <MX_TIM3_Init+0xf4>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000d98:	4b26      	ldr	r3, [pc, #152]	@ (8000e34 <MX_TIM3_Init+0xf4>)
 8000d9a:	0018      	movs	r0, r3
 8000d9c:	f002 fba6 	bl	80034ec <HAL_TIM_Base_Init>
 8000da0:	1e03      	subs	r3, r0, #0
 8000da2:	d001      	beq.n	8000da8 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000da4:	f7ff fea3 	bl	8000aee <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000da8:	2128      	movs	r1, #40	@ 0x28
 8000daa:	187b      	adds	r3, r7, r1
 8000dac:	2280      	movs	r2, #128	@ 0x80
 8000dae:	0152      	lsls	r2, r2, #5
 8000db0:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000db2:	187a      	adds	r2, r7, r1
 8000db4:	4b1f      	ldr	r3, [pc, #124]	@ (8000e34 <MX_TIM3_Init+0xf4>)
 8000db6:	0011      	movs	r1, r2
 8000db8:	0018      	movs	r0, r3
 8000dba:	f002 fd47 	bl	800384c <HAL_TIM_ConfigClockSource>
 8000dbe:	1e03      	subs	r3, r0, #0
 8000dc0:	d001      	beq.n	8000dc6 <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8000dc2:	f7ff fe94 	bl	8000aee <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000dc6:	4b1b      	ldr	r3, [pc, #108]	@ (8000e34 <MX_TIM3_Init+0xf4>)
 8000dc8:	0018      	movs	r0, r3
 8000dca:	f002 fbe7 	bl	800359c <HAL_TIM_PWM_Init>
 8000dce:	1e03      	subs	r3, r0, #0
 8000dd0:	d001      	beq.n	8000dd6 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8000dd2:	f7ff fe8c 	bl	8000aee <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dd6:	211c      	movs	r1, #28
 8000dd8:	187b      	adds	r3, r7, r1
 8000dda:	2200      	movs	r2, #0
 8000ddc:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dde:	187b      	adds	r3, r7, r1
 8000de0:	2200      	movs	r2, #0
 8000de2:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000de4:	187a      	adds	r2, r7, r1
 8000de6:	4b13      	ldr	r3, [pc, #76]	@ (8000e34 <MX_TIM3_Init+0xf4>)
 8000de8:	0011      	movs	r1, r2
 8000dea:	0018      	movs	r0, r3
 8000dec:	f003 f9e8 	bl	80041c0 <HAL_TIMEx_MasterConfigSynchronization>
 8000df0:	1e03      	subs	r3, r0, #0
 8000df2:	d001      	beq.n	8000df8 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 8000df4:	f7ff fe7b 	bl	8000aee <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000df8:	003b      	movs	r3, r7
 8000dfa:	2260      	movs	r2, #96	@ 0x60
 8000dfc:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000dfe:	003b      	movs	r3, r7
 8000e00:	2200      	movs	r2, #0
 8000e02:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e04:	003b      	movs	r3, r7
 8000e06:	2200      	movs	r2, #0
 8000e08:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e0a:	003b      	movs	r3, r7
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e10:	0039      	movs	r1, r7
 8000e12:	4b08      	ldr	r3, [pc, #32]	@ (8000e34 <MX_TIM3_Init+0xf4>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	0018      	movs	r0, r3
 8000e18:	f002 fc18 	bl	800364c <HAL_TIM_PWM_ConfigChannel>
 8000e1c:	1e03      	subs	r3, r0, #0
 8000e1e:	d001      	beq.n	8000e24 <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 8000e20:	f7ff fe65 	bl	8000aee <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000e24:	4b03      	ldr	r3, [pc, #12]	@ (8000e34 <MX_TIM3_Init+0xf4>)
 8000e26:	0018      	movs	r0, r3
 8000e28:	f000 f8f8 	bl	800101c <HAL_TIM_MspPostInit>

}
 8000e2c:	46c0      	nop			@ (mov r8, r8)
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	b00e      	add	sp, #56	@ 0x38
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	20000144 	.word	0x20000144
 8000e38:	40000400 	.word	0x40000400
 8000e3c:	0000ffff 	.word	0x0000ffff

08000e40 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b098      	sub	sp, #96	@ 0x60
 8000e44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e46:	2354      	movs	r3, #84	@ 0x54
 8000e48:	18fb      	adds	r3, r7, r3
 8000e4a:	0018      	movs	r0, r3
 8000e4c:	230c      	movs	r3, #12
 8000e4e:	001a      	movs	r2, r3
 8000e50:	2100      	movs	r1, #0
 8000e52:	f004 f9d3 	bl	80051fc <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e56:	2338      	movs	r3, #56	@ 0x38
 8000e58:	18fb      	adds	r3, r7, r3
 8000e5a:	0018      	movs	r0, r3
 8000e5c:	231c      	movs	r3, #28
 8000e5e:	001a      	movs	r2, r3
 8000e60:	2100      	movs	r1, #0
 8000e62:	f004 f9cb 	bl	80051fc <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000e66:	1d3b      	adds	r3, r7, #4
 8000e68:	0018      	movs	r0, r3
 8000e6a:	2334      	movs	r3, #52	@ 0x34
 8000e6c:	001a      	movs	r2, r3
 8000e6e:	2100      	movs	r1, #0
 8000e70:	f004 f9c4 	bl	80051fc <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8000e74:	4b3c      	ldr	r3, [pc, #240]	@ (8000f68 <MX_TIM15_Init+0x128>)
 8000e76:	4a3d      	ldr	r2, [pc, #244]	@ (8000f6c <MX_TIM15_Init+0x12c>)
 8000e78:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8000e7a:	4b3b      	ldr	r3, [pc, #236]	@ (8000f68 <MX_TIM15_Init+0x128>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e80:	4b39      	ldr	r3, [pc, #228]	@ (8000f68 <MX_TIM15_Init+0x128>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8000e86:	4b38      	ldr	r3, [pc, #224]	@ (8000f68 <MX_TIM15_Init+0x128>)
 8000e88:	4a39      	ldr	r2, [pc, #228]	@ (8000f70 <MX_TIM15_Init+0x130>)
 8000e8a:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e8c:	4b36      	ldr	r3, [pc, #216]	@ (8000f68 <MX_TIM15_Init+0x128>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8000e92:	4b35      	ldr	r3, [pc, #212]	@ (8000f68 <MX_TIM15_Init+0x128>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e98:	4b33      	ldr	r3, [pc, #204]	@ (8000f68 <MX_TIM15_Init+0x128>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8000e9e:	4b32      	ldr	r3, [pc, #200]	@ (8000f68 <MX_TIM15_Init+0x128>)
 8000ea0:	0018      	movs	r0, r3
 8000ea2:	f002 fb7b 	bl	800359c <HAL_TIM_PWM_Init>
 8000ea6:	1e03      	subs	r3, r0, #0
 8000ea8:	d001      	beq.n	8000eae <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 8000eaa:	f7ff fe20 	bl	8000aee <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000eae:	2154      	movs	r1, #84	@ 0x54
 8000eb0:	187b      	adds	r3, r7, r1
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000eb6:	187b      	adds	r3, r7, r1
 8000eb8:	2200      	movs	r2, #0
 8000eba:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8000ebc:	187a      	adds	r2, r7, r1
 8000ebe:	4b2a      	ldr	r3, [pc, #168]	@ (8000f68 <MX_TIM15_Init+0x128>)
 8000ec0:	0011      	movs	r1, r2
 8000ec2:	0018      	movs	r0, r3
 8000ec4:	f003 f97c 	bl	80041c0 <HAL_TIMEx_MasterConfigSynchronization>
 8000ec8:	1e03      	subs	r3, r0, #0
 8000eca:	d001      	beq.n	8000ed0 <MX_TIM15_Init+0x90>
  {
    Error_Handler();
 8000ecc:	f7ff fe0f 	bl	8000aee <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ed0:	2138      	movs	r1, #56	@ 0x38
 8000ed2:	187b      	adds	r3, r7, r1
 8000ed4:	2260      	movs	r2, #96	@ 0x60
 8000ed6:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000ed8:	187b      	adds	r3, r7, r1
 8000eda:	2200      	movs	r2, #0
 8000edc:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ede:	187b      	adds	r3, r7, r1
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000ee4:	187b      	adds	r3, r7, r1
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000eea:	187b      	adds	r3, r7, r1
 8000eec:	2200      	movs	r2, #0
 8000eee:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000ef0:	187b      	adds	r3, r7, r1
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000ef6:	187b      	adds	r3, r7, r1
 8000ef8:	2200      	movs	r2, #0
 8000efa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000efc:	1879      	adds	r1, r7, r1
 8000efe:	4b1a      	ldr	r3, [pc, #104]	@ (8000f68 <MX_TIM15_Init+0x128>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	0018      	movs	r0, r3
 8000f04:	f002 fba2 	bl	800364c <HAL_TIM_PWM_ConfigChannel>
 8000f08:	1e03      	subs	r3, r0, #0
 8000f0a:	d001      	beq.n	8000f10 <MX_TIM15_Init+0xd0>
  {
    Error_Handler();
 8000f0c:	f7ff fdef 	bl	8000aee <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000f10:	1d3b      	adds	r3, r7, #4
 8000f12:	2200      	movs	r2, #0
 8000f14:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000f16:	1d3b      	adds	r3, r7, #4
 8000f18:	2200      	movs	r2, #0
 8000f1a:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000f1c:	1d3b      	adds	r3, r7, #4
 8000f1e:	2200      	movs	r2, #0
 8000f20:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000f22:	1d3b      	adds	r3, r7, #4
 8000f24:	2200      	movs	r2, #0
 8000f26:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000f28:	1d3b      	adds	r3, r7, #4
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000f2e:	1d3b      	adds	r3, r7, #4
 8000f30:	2280      	movs	r2, #128	@ 0x80
 8000f32:	0192      	lsls	r2, r2, #6
 8000f34:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000f36:	1d3b      	adds	r3, r7, #4
 8000f38:	2200      	movs	r2, #0
 8000f3a:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000f3c:	1d3b      	adds	r3, r7, #4
 8000f3e:	2200      	movs	r2, #0
 8000f40:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8000f42:	1d3a      	adds	r2, r7, #4
 8000f44:	4b08      	ldr	r3, [pc, #32]	@ (8000f68 <MX_TIM15_Init+0x128>)
 8000f46:	0011      	movs	r1, r2
 8000f48:	0018      	movs	r0, r3
 8000f4a:	f003 f9a1 	bl	8004290 <HAL_TIMEx_ConfigBreakDeadTime>
 8000f4e:	1e03      	subs	r3, r0, #0
 8000f50:	d001      	beq.n	8000f56 <MX_TIM15_Init+0x116>
  {
    Error_Handler();
 8000f52:	f7ff fdcc 	bl	8000aee <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8000f56:	4b04      	ldr	r3, [pc, #16]	@ (8000f68 <MX_TIM15_Init+0x128>)
 8000f58:	0018      	movs	r0, r3
 8000f5a:	f000 f85f 	bl	800101c <HAL_TIM_MspPostInit>

}
 8000f5e:	46c0      	nop			@ (mov r8, r8)
 8000f60:	46bd      	mov	sp, r7
 8000f62:	b018      	add	sp, #96	@ 0x60
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	46c0      	nop			@ (mov r8, r8)
 8000f68:	20000190 	.word	0x20000190
 8000f6c:	40014000 	.word	0x40014000
 8000f70:	0000ffff 	.word	0x0000ffff

08000f74 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b084      	sub	sp, #16
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	4a13      	ldr	r2, [pc, #76]	@ (8000fd0 <HAL_TIM_Base_MspInit+0x5c>)
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d10e      	bne.n	8000fa4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000f86:	4b13      	ldr	r3, [pc, #76]	@ (8000fd4 <HAL_TIM_Base_MspInit+0x60>)
 8000f88:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000f8a:	4b12      	ldr	r3, [pc, #72]	@ (8000fd4 <HAL_TIM_Base_MspInit+0x60>)
 8000f8c:	2180      	movs	r1, #128	@ 0x80
 8000f8e:	0109      	lsls	r1, r1, #4
 8000f90:	430a      	orrs	r2, r1
 8000f92:	641a      	str	r2, [r3, #64]	@ 0x40
 8000f94:	4b0f      	ldr	r3, [pc, #60]	@ (8000fd4 <HAL_TIM_Base_MspInit+0x60>)
 8000f96:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000f98:	2380      	movs	r3, #128	@ 0x80
 8000f9a:	011b      	lsls	r3, r3, #4
 8000f9c:	4013      	ands	r3, r2
 8000f9e:	60fb      	str	r3, [r7, #12]
 8000fa0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000fa2:	e010      	b.n	8000fc6 <HAL_TIM_Base_MspInit+0x52>
  else if(tim_baseHandle->Instance==TIM3)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4a0b      	ldr	r2, [pc, #44]	@ (8000fd8 <HAL_TIM_Base_MspInit+0x64>)
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d10b      	bne.n	8000fc6 <HAL_TIM_Base_MspInit+0x52>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000fae:	4b09      	ldr	r3, [pc, #36]	@ (8000fd4 <HAL_TIM_Base_MspInit+0x60>)
 8000fb0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000fb2:	4b08      	ldr	r3, [pc, #32]	@ (8000fd4 <HAL_TIM_Base_MspInit+0x60>)
 8000fb4:	2102      	movs	r1, #2
 8000fb6:	430a      	orrs	r2, r1
 8000fb8:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000fba:	4b06      	ldr	r3, [pc, #24]	@ (8000fd4 <HAL_TIM_Base_MspInit+0x60>)
 8000fbc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000fbe:	2202      	movs	r2, #2
 8000fc0:	4013      	ands	r3, r2
 8000fc2:	60bb      	str	r3, [r7, #8]
 8000fc4:	68bb      	ldr	r3, [r7, #8]
}
 8000fc6:	46c0      	nop			@ (mov r8, r8)
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	b004      	add	sp, #16
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	46c0      	nop			@ (mov r8, r8)
 8000fd0:	40012c00 	.word	0x40012c00
 8000fd4:	40021000 	.word	0x40021000
 8000fd8:	40000400 	.word	0x40000400

08000fdc <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b084      	sub	sp, #16
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM15)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4a0a      	ldr	r2, [pc, #40]	@ (8001014 <HAL_TIM_PWM_MspInit+0x38>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d10d      	bne.n	800100a <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* TIM15 clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 8000fee:	4b0a      	ldr	r3, [pc, #40]	@ (8001018 <HAL_TIM_PWM_MspInit+0x3c>)
 8000ff0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000ff2:	4b09      	ldr	r3, [pc, #36]	@ (8001018 <HAL_TIM_PWM_MspInit+0x3c>)
 8000ff4:	2180      	movs	r1, #128	@ 0x80
 8000ff6:	0249      	lsls	r1, r1, #9
 8000ff8:	430a      	orrs	r2, r1
 8000ffa:	641a      	str	r2, [r3, #64]	@ 0x40
 8000ffc:	4b06      	ldr	r3, [pc, #24]	@ (8001018 <HAL_TIM_PWM_MspInit+0x3c>)
 8000ffe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001000:	2380      	movs	r3, #128	@ 0x80
 8001002:	025b      	lsls	r3, r3, #9
 8001004:	4013      	ands	r3, r2
 8001006:	60fb      	str	r3, [r7, #12]
 8001008:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 800100a:	46c0      	nop			@ (mov r8, r8)
 800100c:	46bd      	mov	sp, r7
 800100e:	b004      	add	sp, #16
 8001010:	bd80      	pop	{r7, pc}
 8001012:	46c0      	nop			@ (mov r8, r8)
 8001014:	40014000 	.word	0x40014000
 8001018:	40021000 	.word	0x40021000

0800101c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800101c:	b590      	push	{r4, r7, lr}
 800101e:	b08b      	sub	sp, #44	@ 0x2c
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001024:	2414      	movs	r4, #20
 8001026:	193b      	adds	r3, r7, r4
 8001028:	0018      	movs	r0, r3
 800102a:	2314      	movs	r3, #20
 800102c:	001a      	movs	r2, r3
 800102e:	2100      	movs	r1, #0
 8001030:	f004 f8e4 	bl	80051fc <memset>
  if(timHandle->Instance==TIM1)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4a3e      	ldr	r2, [pc, #248]	@ (8001134 <HAL_TIM_MspPostInit+0x118>)
 800103a:	4293      	cmp	r3, r2
 800103c:	d124      	bne.n	8001088 <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800103e:	4b3e      	ldr	r3, [pc, #248]	@ (8001138 <HAL_TIM_MspPostInit+0x11c>)
 8001040:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001042:	4b3d      	ldr	r3, [pc, #244]	@ (8001138 <HAL_TIM_MspPostInit+0x11c>)
 8001044:	2101      	movs	r1, #1
 8001046:	430a      	orrs	r2, r1
 8001048:	635a      	str	r2, [r3, #52]	@ 0x34
 800104a:	4b3b      	ldr	r3, [pc, #236]	@ (8001138 <HAL_TIM_MspPostInit+0x11c>)
 800104c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800104e:	2201      	movs	r2, #1
 8001050:	4013      	ands	r3, r2
 8001052:	613b      	str	r3, [r7, #16]
 8001054:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = PIEZO_PWM_Pin;
 8001056:	193b      	adds	r3, r7, r4
 8001058:	2280      	movs	r2, #128	@ 0x80
 800105a:	0052      	lsls	r2, r2, #1
 800105c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800105e:	0021      	movs	r1, r4
 8001060:	187b      	adds	r3, r7, r1
 8001062:	2202      	movs	r2, #2
 8001064:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001066:	187b      	adds	r3, r7, r1
 8001068:	2200      	movs	r2, #0
 800106a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800106c:	187b      	adds	r3, r7, r1
 800106e:	2200      	movs	r2, #0
 8001070:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001072:	187b      	adds	r3, r7, r1
 8001074:	2202      	movs	r2, #2
 8001076:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(PIEZO_PWM_GPIO_Port, &GPIO_InitStruct);
 8001078:	187a      	adds	r2, r7, r1
 800107a:	23a0      	movs	r3, #160	@ 0xa0
 800107c:	05db      	lsls	r3, r3, #23
 800107e:	0011      	movs	r1, r2
 8001080:	0018      	movs	r0, r3
 8001082:	f001 f87f 	bl	8002184 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8001086:	e050      	b.n	800112a <HAL_TIM_MspPostInit+0x10e>
  else if(timHandle->Instance==TIM3)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	4a2b      	ldr	r2, [pc, #172]	@ (800113c <HAL_TIM_MspPostInit+0x120>)
 800108e:	4293      	cmp	r3, r2
 8001090:	d123      	bne.n	80010da <HAL_TIM_MspPostInit+0xbe>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001092:	4b29      	ldr	r3, [pc, #164]	@ (8001138 <HAL_TIM_MspPostInit+0x11c>)
 8001094:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001096:	4b28      	ldr	r3, [pc, #160]	@ (8001138 <HAL_TIM_MspPostInit+0x11c>)
 8001098:	2101      	movs	r1, #1
 800109a:	430a      	orrs	r2, r1
 800109c:	635a      	str	r2, [r3, #52]	@ 0x34
 800109e:	4b26      	ldr	r3, [pc, #152]	@ (8001138 <HAL_TIM_MspPostInit+0x11c>)
 80010a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80010a2:	2201      	movs	r2, #1
 80010a4:	4013      	ands	r3, r2
 80010a6:	60fb      	str	r3, [r7, #12]
 80010a8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = WPT_PWM_Pin;
 80010aa:	2114      	movs	r1, #20
 80010ac:	187b      	adds	r3, r7, r1
 80010ae:	2240      	movs	r2, #64	@ 0x40
 80010b0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b2:	187b      	adds	r3, r7, r1
 80010b4:	2202      	movs	r2, #2
 80010b6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b8:	187b      	adds	r3, r7, r1
 80010ba:	2200      	movs	r2, #0
 80010bc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010be:	187b      	adds	r3, r7, r1
 80010c0:	2200      	movs	r2, #0
 80010c2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 80010c4:	187b      	adds	r3, r7, r1
 80010c6:	2201      	movs	r2, #1
 80010c8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(WPT_PWM_GPIO_Port, &GPIO_InitStruct);
 80010ca:	187a      	adds	r2, r7, r1
 80010cc:	23a0      	movs	r3, #160	@ 0xa0
 80010ce:	05db      	lsls	r3, r3, #23
 80010d0:	0011      	movs	r1, r2
 80010d2:	0018      	movs	r0, r3
 80010d4:	f001 f856 	bl	8002184 <HAL_GPIO_Init>
}
 80010d8:	e027      	b.n	800112a <HAL_TIM_MspPostInit+0x10e>
  else if(timHandle->Instance==TIM15)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	4a18      	ldr	r2, [pc, #96]	@ (8001140 <HAL_TIM_MspPostInit+0x124>)
 80010e0:	4293      	cmp	r3, r2
 80010e2:	d122      	bne.n	800112a <HAL_TIM_MspPostInit+0x10e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010e4:	4b14      	ldr	r3, [pc, #80]	@ (8001138 <HAL_TIM_MspPostInit+0x11c>)
 80010e6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80010e8:	4b13      	ldr	r3, [pc, #76]	@ (8001138 <HAL_TIM_MspPostInit+0x11c>)
 80010ea:	2101      	movs	r1, #1
 80010ec:	430a      	orrs	r2, r1
 80010ee:	635a      	str	r2, [r3, #52]	@ 0x34
 80010f0:	4b11      	ldr	r3, [pc, #68]	@ (8001138 <HAL_TIM_MspPostInit+0x11c>)
 80010f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80010f4:	2201      	movs	r2, #1
 80010f6:	4013      	ands	r3, r2
 80010f8:	60bb      	str	r3, [r7, #8]
 80010fa:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = VBOOST_CAL_PWM_Pin;
 80010fc:	2114      	movs	r1, #20
 80010fe:	187b      	adds	r3, r7, r1
 8001100:	2202      	movs	r2, #2
 8001102:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001104:	187b      	adds	r3, r7, r1
 8001106:	2202      	movs	r2, #2
 8001108:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110a:	187b      	adds	r3, r7, r1
 800110c:	2200      	movs	r2, #0
 800110e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001110:	187b      	adds	r3, r7, r1
 8001112:	2200      	movs	r2, #0
 8001114:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM15;
 8001116:	187b      	adds	r3, r7, r1
 8001118:	2205      	movs	r2, #5
 800111a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(VBOOST_CAL_PWM_GPIO_Port, &GPIO_InitStruct);
 800111c:	187a      	adds	r2, r7, r1
 800111e:	23a0      	movs	r3, #160	@ 0xa0
 8001120:	05db      	lsls	r3, r3, #23
 8001122:	0011      	movs	r1, r2
 8001124:	0018      	movs	r0, r3
 8001126:	f001 f82d 	bl	8002184 <HAL_GPIO_Init>
}
 800112a:	46c0      	nop			@ (mov r8, r8)
 800112c:	46bd      	mov	sp, r7
 800112e:	b00b      	add	sp, #44	@ 0x2c
 8001130:	bd90      	pop	{r4, r7, pc}
 8001132:	46c0      	nop			@ (mov r8, r8)
 8001134:	40012c00 	.word	0x40012c00
 8001138:	40021000 	.word	0x40021000
 800113c:	40000400 	.word	0x40000400
 8001140:	40014000 	.word	0x40014000

08001144 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001148:	4b22      	ldr	r3, [pc, #136]	@ (80011d4 <MX_USART1_UART_Init+0x90>)
 800114a:	4a23      	ldr	r2, [pc, #140]	@ (80011d8 <MX_USART1_UART_Init+0x94>)
 800114c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 6553;
 800114e:	4b21      	ldr	r3, [pc, #132]	@ (80011d4 <MX_USART1_UART_Init+0x90>)
 8001150:	4a22      	ldr	r2, [pc, #136]	@ (80011dc <MX_USART1_UART_Init+0x98>)
 8001152:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001154:	4b1f      	ldr	r3, [pc, #124]	@ (80011d4 <MX_USART1_UART_Init+0x90>)
 8001156:	2200      	movs	r2, #0
 8001158:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800115a:	4b1e      	ldr	r3, [pc, #120]	@ (80011d4 <MX_USART1_UART_Init+0x90>)
 800115c:	2200      	movs	r2, #0
 800115e:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001160:	4b1c      	ldr	r3, [pc, #112]	@ (80011d4 <MX_USART1_UART_Init+0x90>)
 8001162:	2200      	movs	r2, #0
 8001164:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001166:	4b1b      	ldr	r3, [pc, #108]	@ (80011d4 <MX_USART1_UART_Init+0x90>)
 8001168:	220c      	movs	r2, #12
 800116a:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800116c:	4b19      	ldr	r3, [pc, #100]	@ (80011d4 <MX_USART1_UART_Init+0x90>)
 800116e:	2200      	movs	r2, #0
 8001170:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001172:	4b18      	ldr	r3, [pc, #96]	@ (80011d4 <MX_USART1_UART_Init+0x90>)
 8001174:	2200      	movs	r2, #0
 8001176:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001178:	4b16      	ldr	r3, [pc, #88]	@ (80011d4 <MX_USART1_UART_Init+0x90>)
 800117a:	2200      	movs	r2, #0
 800117c:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800117e:	4b15      	ldr	r3, [pc, #84]	@ (80011d4 <MX_USART1_UART_Init+0x90>)
 8001180:	2200      	movs	r2, #0
 8001182:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001184:	4b13      	ldr	r3, [pc, #76]	@ (80011d4 <MX_USART1_UART_Init+0x90>)
 8001186:	2200      	movs	r2, #0
 8001188:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800118a:	4b12      	ldr	r3, [pc, #72]	@ (80011d4 <MX_USART1_UART_Init+0x90>)
 800118c:	0018      	movs	r0, r3
 800118e:	f003 f91b 	bl	80043c8 <HAL_UART_Init>
 8001192:	1e03      	subs	r3, r0, #0
 8001194:	d001      	beq.n	800119a <MX_USART1_UART_Init+0x56>
  {
    Error_Handler();
 8001196:	f7ff fcaa 	bl	8000aee <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800119a:	4b0e      	ldr	r3, [pc, #56]	@ (80011d4 <MX_USART1_UART_Init+0x90>)
 800119c:	2100      	movs	r1, #0
 800119e:	0018      	movs	r0, r3
 80011a0:	f003 fd7a 	bl	8004c98 <HAL_UARTEx_SetTxFifoThreshold>
 80011a4:	1e03      	subs	r3, r0, #0
 80011a6:	d001      	beq.n	80011ac <MX_USART1_UART_Init+0x68>
  {
    Error_Handler();
 80011a8:	f7ff fca1 	bl	8000aee <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011ac:	4b09      	ldr	r3, [pc, #36]	@ (80011d4 <MX_USART1_UART_Init+0x90>)
 80011ae:	2100      	movs	r1, #0
 80011b0:	0018      	movs	r0, r3
 80011b2:	f003 fdb1 	bl	8004d18 <HAL_UARTEx_SetRxFifoThreshold>
 80011b6:	1e03      	subs	r3, r0, #0
 80011b8:	d001      	beq.n	80011be <MX_USART1_UART_Init+0x7a>
  {
    Error_Handler();
 80011ba:	f7ff fc98 	bl	8000aee <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80011be:	4b05      	ldr	r3, [pc, #20]	@ (80011d4 <MX_USART1_UART_Init+0x90>)
 80011c0:	0018      	movs	r0, r3
 80011c2:	f003 fd2f 	bl	8004c24 <HAL_UARTEx_DisableFifoMode>
 80011c6:	1e03      	subs	r3, r0, #0
 80011c8:	d001      	beq.n	80011ce <MX_USART1_UART_Init+0x8a>
  {
    Error_Handler();
 80011ca:	f7ff fc90 	bl	8000aee <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80011ce:	46c0      	nop			@ (mov r8, r8)
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	200001dc 	.word	0x200001dc
 80011d8:	40013800 	.word	0x40013800
 80011dc:	00001999 	.word	0x00001999

080011e0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80011e0:	b590      	push	{r4, r7, lr}
 80011e2:	b091      	sub	sp, #68	@ 0x44
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011e8:	232c      	movs	r3, #44	@ 0x2c
 80011ea:	18fb      	adds	r3, r7, r3
 80011ec:	0018      	movs	r0, r3
 80011ee:	2314      	movs	r3, #20
 80011f0:	001a      	movs	r2, r3
 80011f2:	2100      	movs	r1, #0
 80011f4:	f004 f802 	bl	80051fc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011f8:	2410      	movs	r4, #16
 80011fa:	193b      	adds	r3, r7, r4
 80011fc:	0018      	movs	r0, r3
 80011fe:	231c      	movs	r3, #28
 8001200:	001a      	movs	r2, r3
 8001202:	2100      	movs	r1, #0
 8001204:	f003 fffa 	bl	80051fc <memset>
  if(uartHandle->Instance==USART1)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4a27      	ldr	r2, [pc, #156]	@ (80012ac <HAL_UART_MspInit+0xcc>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d147      	bne.n	80012a2 <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001212:	193b      	adds	r3, r7, r4
 8001214:	2201      	movs	r2, #1
 8001216:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8001218:	193b      	adds	r3, r7, r4
 800121a:	2200      	movs	r2, #0
 800121c:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800121e:	193b      	adds	r3, r7, r4
 8001220:	0018      	movs	r0, r3
 8001222:	f002 f82f 	bl	8003284 <HAL_RCCEx_PeriphCLKConfig>
 8001226:	1e03      	subs	r3, r0, #0
 8001228:	d001      	beq.n	800122e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800122a:	f7ff fc60 	bl	8000aee <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800122e:	4b20      	ldr	r3, [pc, #128]	@ (80012b0 <HAL_UART_MspInit+0xd0>)
 8001230:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001232:	4b1f      	ldr	r3, [pc, #124]	@ (80012b0 <HAL_UART_MspInit+0xd0>)
 8001234:	2180      	movs	r1, #128	@ 0x80
 8001236:	01c9      	lsls	r1, r1, #7
 8001238:	430a      	orrs	r2, r1
 800123a:	641a      	str	r2, [r3, #64]	@ 0x40
 800123c:	4b1c      	ldr	r3, [pc, #112]	@ (80012b0 <HAL_UART_MspInit+0xd0>)
 800123e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001240:	2380      	movs	r3, #128	@ 0x80
 8001242:	01db      	lsls	r3, r3, #7
 8001244:	4013      	ands	r3, r2
 8001246:	60fb      	str	r3, [r7, #12]
 8001248:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800124a:	4b19      	ldr	r3, [pc, #100]	@ (80012b0 <HAL_UART_MspInit+0xd0>)
 800124c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800124e:	4b18      	ldr	r3, [pc, #96]	@ (80012b0 <HAL_UART_MspInit+0xd0>)
 8001250:	2101      	movs	r1, #1
 8001252:	430a      	orrs	r2, r1
 8001254:	635a      	str	r2, [r3, #52]	@ 0x34
 8001256:	4b16      	ldr	r3, [pc, #88]	@ (80012b0 <HAL_UART_MspInit+0xd0>)
 8001258:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800125a:	2201      	movs	r2, #1
 800125c:	4013      	ands	r3, r2
 800125e:	60bb      	str	r3, [r7, #8]
 8001260:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = IR_UART_TX_Pin|IR_UART_RX_Pin;
 8001262:	212c      	movs	r1, #44	@ 0x2c
 8001264:	187b      	adds	r3, r7, r1
 8001266:	22c0      	movs	r2, #192	@ 0xc0
 8001268:	00d2      	lsls	r2, r2, #3
 800126a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800126c:	187b      	adds	r3, r7, r1
 800126e:	2202      	movs	r2, #2
 8001270:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001272:	187b      	adds	r3, r7, r1
 8001274:	2200      	movs	r2, #0
 8001276:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001278:	187b      	adds	r3, r7, r1
 800127a:	2200      	movs	r2, #0
 800127c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 800127e:	187b      	adds	r3, r7, r1
 8001280:	2201      	movs	r2, #1
 8001282:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001284:	187a      	adds	r2, r7, r1
 8001286:	23a0      	movs	r3, #160	@ 0xa0
 8001288:	05db      	lsls	r3, r3, #23
 800128a:	0011      	movs	r1, r2
 800128c:	0018      	movs	r0, r3
 800128e:	f000 ff79 	bl	8002184 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 8001292:	2200      	movs	r2, #0
 8001294:	2101      	movs	r1, #1
 8001296:	201b      	movs	r0, #27
 8001298:	f000 ff42 	bl	8002120 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800129c:	201b      	movs	r0, #27
 800129e:	f000 ff54 	bl	800214a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80012a2:	46c0      	nop			@ (mov r8, r8)
 80012a4:	46bd      	mov	sp, r7
 80012a6:	b011      	add	sp, #68	@ 0x44
 80012a8:	bd90      	pop	{r4, r7, pc}
 80012aa:	46c0      	nop			@ (mov r8, r8)
 80012ac:	40013800 	.word	0x40013800
 80012b0:	40021000 	.word	0x40021000

080012b4 <DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80012b4:	e7fe      	b.n	80012b4 <DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler>
	...

080012b8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80012be:	1dfb      	adds	r3, r7, #7
 80012c0:	2200      	movs	r2, #0
 80012c2:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012c4:	4b0b      	ldr	r3, [pc, #44]	@ (80012f4 <HAL_Init+0x3c>)
 80012c6:	681a      	ldr	r2, [r3, #0]
 80012c8:	4b0a      	ldr	r3, [pc, #40]	@ (80012f4 <HAL_Init+0x3c>)
 80012ca:	2180      	movs	r1, #128	@ 0x80
 80012cc:	0049      	lsls	r1, r1, #1
 80012ce:	430a      	orrs	r2, r1
 80012d0:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80012d2:	2003      	movs	r0, #3
 80012d4:	f000 f810 	bl	80012f8 <HAL_InitTick>
 80012d8:	1e03      	subs	r3, r0, #0
 80012da:	d003      	beq.n	80012e4 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80012dc:	1dfb      	adds	r3, r7, #7
 80012de:	2201      	movs	r2, #1
 80012e0:	701a      	strb	r2, [r3, #0]
 80012e2:	e001      	b.n	80012e8 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80012e4:	f7ff fc0a 	bl	8000afc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80012e8:	1dfb      	adds	r3, r7, #7
 80012ea:	781b      	ldrb	r3, [r3, #0]
}
 80012ec:	0018      	movs	r0, r3
 80012ee:	46bd      	mov	sp, r7
 80012f0:	b002      	add	sp, #8
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	40022000 	.word	0x40022000

080012f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012f8:	b590      	push	{r4, r7, lr}
 80012fa:	b085      	sub	sp, #20
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001300:	230f      	movs	r3, #15
 8001302:	18fb      	adds	r3, r7, r3
 8001304:	2200      	movs	r2, #0
 8001306:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001308:	4b1d      	ldr	r3, [pc, #116]	@ (8001380 <HAL_InitTick+0x88>)
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d02b      	beq.n	8001368 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001310:	4b1c      	ldr	r3, [pc, #112]	@ (8001384 <HAL_InitTick+0x8c>)
 8001312:	681c      	ldr	r4, [r3, #0]
 8001314:	4b1a      	ldr	r3, [pc, #104]	@ (8001380 <HAL_InitTick+0x88>)
 8001316:	781b      	ldrb	r3, [r3, #0]
 8001318:	0019      	movs	r1, r3
 800131a:	23fa      	movs	r3, #250	@ 0xfa
 800131c:	0098      	lsls	r0, r3, #2
 800131e:	f7fe ff4b 	bl	80001b8 <__udivsi3>
 8001322:	0003      	movs	r3, r0
 8001324:	0019      	movs	r1, r3
 8001326:	0020      	movs	r0, r4
 8001328:	f7fe ff46 	bl	80001b8 <__udivsi3>
 800132c:	0003      	movs	r3, r0
 800132e:	0018      	movs	r0, r3
 8001330:	f000 ff1b 	bl	800216a <HAL_SYSTICK_Config>
 8001334:	1e03      	subs	r3, r0, #0
 8001336:	d112      	bne.n	800135e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	2b03      	cmp	r3, #3
 800133c:	d80a      	bhi.n	8001354 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800133e:	6879      	ldr	r1, [r7, #4]
 8001340:	2301      	movs	r3, #1
 8001342:	425b      	negs	r3, r3
 8001344:	2200      	movs	r2, #0
 8001346:	0018      	movs	r0, r3
 8001348:	f000 feea 	bl	8002120 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800134c:	4b0e      	ldr	r3, [pc, #56]	@ (8001388 <HAL_InitTick+0x90>)
 800134e:	687a      	ldr	r2, [r7, #4]
 8001350:	601a      	str	r2, [r3, #0]
 8001352:	e00d      	b.n	8001370 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001354:	230f      	movs	r3, #15
 8001356:	18fb      	adds	r3, r7, r3
 8001358:	2201      	movs	r2, #1
 800135a:	701a      	strb	r2, [r3, #0]
 800135c:	e008      	b.n	8001370 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800135e:	230f      	movs	r3, #15
 8001360:	18fb      	adds	r3, r7, r3
 8001362:	2201      	movs	r2, #1
 8001364:	701a      	strb	r2, [r3, #0]
 8001366:	e003      	b.n	8001370 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001368:	230f      	movs	r3, #15
 800136a:	18fb      	adds	r3, r7, r3
 800136c:	2201      	movs	r2, #1
 800136e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001370:	230f      	movs	r3, #15
 8001372:	18fb      	adds	r3, r7, r3
 8001374:	781b      	ldrb	r3, [r3, #0]
}
 8001376:	0018      	movs	r0, r3
 8001378:	46bd      	mov	sp, r7
 800137a:	b005      	add	sp, #20
 800137c:	bd90      	pop	{r4, r7, pc}
 800137e:	46c0      	nop			@ (mov r8, r8)
 8001380:	20000008 	.word	0x20000008
 8001384:	20000000 	.word	0x20000000
 8001388:	20000004 	.word	0x20000004

0800138c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001390:	4b05      	ldr	r3, [pc, #20]	@ (80013a8 <HAL_IncTick+0x1c>)
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	001a      	movs	r2, r3
 8001396:	4b05      	ldr	r3, [pc, #20]	@ (80013ac <HAL_IncTick+0x20>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	18d2      	adds	r2, r2, r3
 800139c:	4b03      	ldr	r3, [pc, #12]	@ (80013ac <HAL_IncTick+0x20>)
 800139e:	601a      	str	r2, [r3, #0]
}
 80013a0:	46c0      	nop			@ (mov r8, r8)
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	46c0      	nop			@ (mov r8, r8)
 80013a8:	20000008 	.word	0x20000008
 80013ac:	20000270 	.word	0x20000270

080013b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	af00      	add	r7, sp, #0
  return uwTick;
 80013b4:	4b02      	ldr	r3, [pc, #8]	@ (80013c0 <HAL_GetTick+0x10>)
 80013b6:	681b      	ldr	r3, [r3, #0]
}
 80013b8:	0018      	movs	r0, r3
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	46c0      	nop			@ (mov r8, r8)
 80013c0:	20000270 	.word	0x20000270

080013c4 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b082      	sub	sp, #8
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 80013cc:	4b06      	ldr	r3, [pc, #24]	@ (80013e8 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a06      	ldr	r2, [pc, #24]	@ (80013ec <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 80013d2:	4013      	ands	r3, r2
 80013d4:	0019      	movs	r1, r3
 80013d6:	4b04      	ldr	r3, [pc, #16]	@ (80013e8 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80013d8:	687a      	ldr	r2, [r7, #4]
 80013da:	430a      	orrs	r2, r1
 80013dc:	601a      	str	r2, [r3, #0]
}
 80013de:	46c0      	nop			@ (mov r8, r8)
 80013e0:	46bd      	mov	sp, r7
 80013e2:	b002      	add	sp, #8
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	46c0      	nop			@ (mov r8, r8)
 80013e8:	40010000 	.word	0x40010000
 80013ec:	fffff9ff 	.word	0xfffff9ff

080013f0 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
 80013f8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4a05      	ldr	r2, [pc, #20]	@ (8001414 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8001400:	401a      	ands	r2, r3
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	431a      	orrs	r2, r3
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	601a      	str	r2, [r3, #0]
}
 800140a:	46c0      	nop			@ (mov r8, r8)
 800140c:	46bd      	mov	sp, r7
 800140e:	b002      	add	sp, #8
 8001410:	bd80      	pop	{r7, pc}
 8001412:	46c0      	nop			@ (mov r8, r8)
 8001414:	fe3fffff 	.word	0xfe3fffff

08001418 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b082      	sub	sp, #8
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681a      	ldr	r2, [r3, #0]
 8001424:	23e0      	movs	r3, #224	@ 0xe0
 8001426:	045b      	lsls	r3, r3, #17
 8001428:	4013      	ands	r3, r2
}
 800142a:	0018      	movs	r0, r3
 800142c:	46bd      	mov	sp, r7
 800142e:	b002      	add	sp, #8
 8001430:	bd80      	pop	{r7, pc}

08001432 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8001432:	b580      	push	{r7, lr}
 8001434:	b084      	sub	sp, #16
 8001436:	af00      	add	r7, sp, #0
 8001438:	60f8      	str	r0, [r7, #12]
 800143a:	60b9      	str	r1, [r7, #8]
 800143c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	695b      	ldr	r3, [r3, #20]
 8001442:	68ba      	ldr	r2, [r7, #8]
 8001444:	2104      	movs	r1, #4
 8001446:	400a      	ands	r2, r1
 8001448:	2107      	movs	r1, #7
 800144a:	4091      	lsls	r1, r2
 800144c:	000a      	movs	r2, r1
 800144e:	43d2      	mvns	r2, r2
 8001450:	401a      	ands	r2, r3
 8001452:	68bb      	ldr	r3, [r7, #8]
 8001454:	2104      	movs	r1, #4
 8001456:	400b      	ands	r3, r1
 8001458:	6879      	ldr	r1, [r7, #4]
 800145a:	4099      	lsls	r1, r3
 800145c:	000b      	movs	r3, r1
 800145e:	431a      	orrs	r2, r3
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8001464:	46c0      	nop			@ (mov r8, r8)
 8001466:	46bd      	mov	sp, r7
 8001468:	b004      	add	sp, #16
 800146a:	bd80      	pop	{r7, pc}

0800146c <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b082      	sub	sp, #8
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
 8001474:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	695b      	ldr	r3, [r3, #20]
 800147a:	683a      	ldr	r2, [r7, #0]
 800147c:	2104      	movs	r1, #4
 800147e:	400a      	ands	r2, r1
 8001480:	2107      	movs	r1, #7
 8001482:	4091      	lsls	r1, r2
 8001484:	000a      	movs	r2, r1
 8001486:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	2104      	movs	r1, #4
 800148c:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800148e:	40da      	lsrs	r2, r3
 8001490:	0013      	movs	r3, r2
}
 8001492:	0018      	movs	r0, r3
 8001494:	46bd      	mov	sp, r7
 8001496:	b002      	add	sp, #8
 8001498:	bd80      	pop	{r7, pc}

0800149a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800149a:	b580      	push	{r7, lr}
 800149c:	b082      	sub	sp, #8
 800149e:	af00      	add	r7, sp, #0
 80014a0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	68da      	ldr	r2, [r3, #12]
 80014a6:	23c0      	movs	r3, #192	@ 0xc0
 80014a8:	011b      	lsls	r3, r3, #4
 80014aa:	4013      	ands	r3, r2
 80014ac:	d101      	bne.n	80014b2 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80014ae:	2301      	movs	r3, #1
 80014b0:	e000      	b.n	80014b4 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80014b2:	2300      	movs	r3, #0
}
 80014b4:	0018      	movs	r0, r3
 80014b6:	46bd      	mov	sp, r7
 80014b8:	b002      	add	sp, #8
 80014ba:	bd80      	pop	{r7, pc}

080014bc <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b084      	sub	sp, #16
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	60f8      	str	r0, [r7, #12]
 80014c4:	60b9      	str	r1, [r7, #8]
 80014c6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014cc:	68ba      	ldr	r2, [r7, #8]
 80014ce:	211f      	movs	r1, #31
 80014d0:	400a      	ands	r2, r1
 80014d2:	210f      	movs	r1, #15
 80014d4:	4091      	lsls	r1, r2
 80014d6:	000a      	movs	r2, r1
 80014d8:	43d2      	mvns	r2, r2
 80014da:	401a      	ands	r2, r3
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	0e9b      	lsrs	r3, r3, #26
 80014e0:	210f      	movs	r1, #15
 80014e2:	4019      	ands	r1, r3
 80014e4:	68bb      	ldr	r3, [r7, #8]
 80014e6:	201f      	movs	r0, #31
 80014e8:	4003      	ands	r3, r0
 80014ea:	4099      	lsls	r1, r3
 80014ec:	000b      	movs	r3, r1
 80014ee:	431a      	orrs	r2, r3
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80014f4:	46c0      	nop			@ (mov r8, r8)
 80014f6:	46bd      	mov	sp, r7
 80014f8:	b004      	add	sp, #16
 80014fa:	bd80      	pop	{r7, pc}

080014fc <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b082      	sub	sp, #8
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
 8001504:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	035b      	lsls	r3, r3, #13
 800150e:	0b5b      	lsrs	r3, r3, #13
 8001510:	431a      	orrs	r2, r3
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001516:	46c0      	nop			@ (mov r8, r8)
 8001518:	46bd      	mov	sp, r7
 800151a:	b002      	add	sp, #8
 800151c:	bd80      	pop	{r7, pc}

0800151e <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 800151e:	b580      	push	{r7, lr}
 8001520:	b082      	sub	sp, #8
 8001522:	af00      	add	r7, sp, #0
 8001524:	6078      	str	r0, [r7, #4]
 8001526:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800152c:	683a      	ldr	r2, [r7, #0]
 800152e:	0352      	lsls	r2, r2, #13
 8001530:	0b52      	lsrs	r2, r2, #13
 8001532:	43d2      	mvns	r2, r2
 8001534:	401a      	ands	r2, r3
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800153a:	46c0      	nop			@ (mov r8, r8)
 800153c:	46bd      	mov	sp, r7
 800153e:	b002      	add	sp, #8
 8001540:	bd80      	pop	{r7, pc}

08001542 <LL_ADC_REG_GetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  */
__STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(const ADC_TypeDef *ADCx)
{
 8001542:	b580      	push	{r7, lr}
 8001544:	b082      	sub	sp, #8
 8001546:	af00      	add	r7, sp, #0
 8001548:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG));
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	68db      	ldr	r3, [r3, #12]
 800154e:	2203      	movs	r2, #3
 8001550:	4013      	ands	r3, r2
}
 8001552:	0018      	movs	r0, r3
 8001554:	46bd      	mov	sp, r7
 8001556:	b002      	add	sp, #8
 8001558:	bd80      	pop	{r7, pc}
	...

0800155c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b084      	sub	sp, #16
 8001560:	af00      	add	r7, sp, #0
 8001562:	60f8      	str	r0, [r7, #12]
 8001564:	60b9      	str	r1, [r7, #8]
 8001566:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	695b      	ldr	r3, [r3, #20]
 800156c:	68ba      	ldr	r2, [r7, #8]
 800156e:	0212      	lsls	r2, r2, #8
 8001570:	43d2      	mvns	r2, r2
 8001572:	401a      	ands	r2, r3
 8001574:	68bb      	ldr	r3, [r7, #8]
 8001576:	021b      	lsls	r3, r3, #8
 8001578:	6879      	ldr	r1, [r7, #4]
 800157a:	400b      	ands	r3, r1
 800157c:	4904      	ldr	r1, [pc, #16]	@ (8001590 <LL_ADC_SetChannelSamplingTime+0x34>)
 800157e:	400b      	ands	r3, r1
 8001580:	431a      	orrs	r2, r3
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8001586:	46c0      	nop			@ (mov r8, r8)
 8001588:	46bd      	mov	sp, r7
 800158a:	b004      	add	sp, #16
 800158c:	bd80      	pop	{r7, pc}
 800158e:	46c0      	nop			@ (mov r8, r8)
 8001590:	07ffff00 	.word	0x07ffff00

08001594 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b082      	sub	sp, #8
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	689b      	ldr	r3, [r3, #8]
 80015a0:	4a05      	ldr	r2, [pc, #20]	@ (80015b8 <LL_ADC_EnableInternalRegulator+0x24>)
 80015a2:	4013      	ands	r3, r2
 80015a4:	2280      	movs	r2, #128	@ 0x80
 80015a6:	0552      	lsls	r2, r2, #21
 80015a8:	431a      	orrs	r2, r3
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80015ae:	46c0      	nop			@ (mov r8, r8)
 80015b0:	46bd      	mov	sp, r7
 80015b2:	b002      	add	sp, #8
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	46c0      	nop			@ (mov r8, r8)
 80015b8:	6fffffe8 	.word	0x6fffffe8

080015bc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b082      	sub	sp, #8
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	689a      	ldr	r2, [r3, #8]
 80015c8:	2380      	movs	r3, #128	@ 0x80
 80015ca:	055b      	lsls	r3, r3, #21
 80015cc:	401a      	ands	r2, r3
 80015ce:	2380      	movs	r3, #128	@ 0x80
 80015d0:	055b      	lsls	r3, r3, #21
 80015d2:	429a      	cmp	r2, r3
 80015d4:	d101      	bne.n	80015da <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 80015d6:	2301      	movs	r3, #1
 80015d8:	e000      	b.n	80015dc <LL_ADC_IsInternalRegulatorEnabled+0x20>
 80015da:	2300      	movs	r3, #0
}
 80015dc:	0018      	movs	r0, r3
 80015de:	46bd      	mov	sp, r7
 80015e0:	b002      	add	sp, #8
 80015e2:	bd80      	pop	{r7, pc}

080015e4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b082      	sub	sp, #8
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	689b      	ldr	r3, [r3, #8]
 80015f0:	2201      	movs	r2, #1
 80015f2:	4013      	ands	r3, r2
 80015f4:	2b01      	cmp	r3, #1
 80015f6:	d101      	bne.n	80015fc <LL_ADC_IsEnabled+0x18>
 80015f8:	2301      	movs	r3, #1
 80015fa:	e000      	b.n	80015fe <LL_ADC_IsEnabled+0x1a>
 80015fc:	2300      	movs	r3, #0
}
 80015fe:	0018      	movs	r0, r3
 8001600:	46bd      	mov	sp, r7
 8001602:	b002      	add	sp, #8
 8001604:	bd80      	pop	{r7, pc}

08001606 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001606:	b580      	push	{r7, lr}
 8001608:	b082      	sub	sp, #8
 800160a:	af00      	add	r7, sp, #0
 800160c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	689b      	ldr	r3, [r3, #8]
 8001612:	2204      	movs	r2, #4
 8001614:	4013      	ands	r3, r2
 8001616:	2b04      	cmp	r3, #4
 8001618:	d101      	bne.n	800161e <LL_ADC_REG_IsConversionOngoing+0x18>
 800161a:	2301      	movs	r3, #1
 800161c:	e000      	b.n	8001620 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800161e:	2300      	movs	r3, #0
}
 8001620:	0018      	movs	r0, r3
 8001622:	46bd      	mov	sp, r7
 8001624:	b002      	add	sp, #8
 8001626:	bd80      	pop	{r7, pc}

08001628 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b088      	sub	sp, #32
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001630:	231f      	movs	r3, #31
 8001632:	18fb      	adds	r3, r7, r3
 8001634:	2200      	movs	r2, #0
 8001636:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 8001638:	2300      	movs	r3, #0
 800163a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 800163c:	2300      	movs	r3, #0
 800163e:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001640:	2300      	movs	r3, #0
 8001642:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d101      	bne.n	800164e <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 800164a:	2301      	movs	r3, #1
 800164c:	e17f      	b.n	800194e <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001652:	2b00      	cmp	r3, #0
 8001654:	d10a      	bne.n	800166c <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	0018      	movs	r0, r3
 800165a:	f7fe ff8d 	bl	8000578 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	2200      	movs	r2, #0
 8001662:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2254      	movs	r2, #84	@ 0x54
 8001668:	2100      	movs	r1, #0
 800166a:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	0018      	movs	r0, r3
 8001672:	f7ff ffa3 	bl	80015bc <LL_ADC_IsInternalRegulatorEnabled>
 8001676:	1e03      	subs	r3, r0, #0
 8001678:	d115      	bne.n	80016a6 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	0018      	movs	r0, r3
 8001680:	f7ff ff88 	bl	8001594 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001684:	4bb4      	ldr	r3, [pc, #720]	@ (8001958 <HAL_ADC_Init+0x330>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	49b4      	ldr	r1, [pc, #720]	@ (800195c <HAL_ADC_Init+0x334>)
 800168a:	0018      	movs	r0, r3
 800168c:	f7fe fd94 	bl	80001b8 <__udivsi3>
 8001690:	0003      	movs	r3, r0
 8001692:	3301      	adds	r3, #1
 8001694:	005b      	lsls	r3, r3, #1
 8001696:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001698:	e002      	b.n	80016a0 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	3b01      	subs	r3, #1
 800169e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d1f9      	bne.n	800169a <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	0018      	movs	r0, r3
 80016ac:	f7ff ff86 	bl	80015bc <LL_ADC_IsInternalRegulatorEnabled>
 80016b0:	1e03      	subs	r3, r0, #0
 80016b2:	d10f      	bne.n	80016d4 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016b8:	2210      	movs	r2, #16
 80016ba:	431a      	orrs	r2, r3
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016c4:	2201      	movs	r2, #1
 80016c6:	431a      	orrs	r2, r3
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80016cc:	231f      	movs	r3, #31
 80016ce:	18fb      	adds	r3, r7, r3
 80016d0:	2201      	movs	r2, #1
 80016d2:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	0018      	movs	r0, r3
 80016da:	f7ff ff94 	bl	8001606 <LL_ADC_REG_IsConversionOngoing>
 80016de:	0003      	movs	r3, r0
 80016e0:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016e6:	2210      	movs	r2, #16
 80016e8:	4013      	ands	r3, r2
 80016ea:	d000      	beq.n	80016ee <HAL_ADC_Init+0xc6>
 80016ec:	e122      	b.n	8001934 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80016ee:	693b      	ldr	r3, [r7, #16]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d000      	beq.n	80016f6 <HAL_ADC_Init+0xce>
 80016f4:	e11e      	b.n	8001934 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016fa:	4a99      	ldr	r2, [pc, #612]	@ (8001960 <HAL_ADC_Init+0x338>)
 80016fc:	4013      	ands	r3, r2
 80016fe:	2202      	movs	r2, #2
 8001700:	431a      	orrs	r2, r3
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	0018      	movs	r0, r3
 800170c:	f7ff ff6a 	bl	80015e4 <LL_ADC_IsEnabled>
 8001710:	1e03      	subs	r3, r0, #0
 8001712:	d000      	beq.n	8001716 <HAL_ADC_Init+0xee>
 8001714:	e0ad      	b.n	8001872 <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	7e1b      	ldrb	r3, [r3, #24]
 800171e:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8001720:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	7e5b      	ldrb	r3, [r3, #25]
 8001726:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001728:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	7e9b      	ldrb	r3, [r3, #26]
 800172e:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001730:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001736:	2b00      	cmp	r3, #0
 8001738:	d002      	beq.n	8001740 <HAL_ADC_Init+0x118>
 800173a:	2380      	movs	r3, #128	@ 0x80
 800173c:	015b      	lsls	r3, r3, #5
 800173e:	e000      	b.n	8001742 <HAL_ADC_Init+0x11a>
 8001740:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001742:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001748:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	691b      	ldr	r3, [r3, #16]
 800174e:	2b00      	cmp	r3, #0
 8001750:	da04      	bge.n	800175c <HAL_ADC_Init+0x134>
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	691b      	ldr	r3, [r3, #16]
 8001756:	005b      	lsls	r3, r3, #1
 8001758:	085b      	lsrs	r3, r3, #1
 800175a:	e001      	b.n	8001760 <HAL_ADC_Init+0x138>
 800175c:	2380      	movs	r3, #128	@ 0x80
 800175e:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 8001760:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	212c      	movs	r1, #44	@ 0x2c
 8001766:	5c5b      	ldrb	r3, [r3, r1]
 8001768:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800176a:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 800176c:	69ba      	ldr	r2, [r7, #24]
 800176e:	4313      	orrs	r3, r2
 8001770:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	2220      	movs	r2, #32
 8001776:	5c9b      	ldrb	r3, [r3, r2]
 8001778:	2b01      	cmp	r3, #1
 800177a:	d115      	bne.n	80017a8 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	7e9b      	ldrb	r3, [r3, #26]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d105      	bne.n	8001790 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 8001784:	69bb      	ldr	r3, [r7, #24]
 8001786:	2280      	movs	r2, #128	@ 0x80
 8001788:	0252      	lsls	r2, r2, #9
 800178a:	4313      	orrs	r3, r2
 800178c:	61bb      	str	r3, [r7, #24]
 800178e:	e00b      	b.n	80017a8 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001794:	2220      	movs	r2, #32
 8001796:	431a      	orrs	r2, r3
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017a0:	2201      	movs	r2, #1
 80017a2:	431a      	orrs	r2, r3
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d00a      	beq.n	80017c6 <HAL_ADC_Init+0x19e>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80017b4:	23e0      	movs	r3, #224	@ 0xe0
 80017b6:	005b      	lsls	r3, r3, #1
 80017b8:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80017be:	4313      	orrs	r3, r2
 80017c0:	69ba      	ldr	r2, [r7, #24]
 80017c2:	4313      	orrs	r3, r2
 80017c4:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	68db      	ldr	r3, [r3, #12]
 80017cc:	4a65      	ldr	r2, [pc, #404]	@ (8001964 <HAL_ADC_Init+0x33c>)
 80017ce:	4013      	ands	r3, r2
 80017d0:	0019      	movs	r1, r3
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	69ba      	ldr	r2, [r7, #24]
 80017d8:	430a      	orrs	r2, r1
 80017da:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	0f9b      	lsrs	r3, r3, #30
 80017e2:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80017e8:	4313      	orrs	r3, r2
 80017ea:	697a      	ldr	r2, [r7, #20]
 80017ec:	4313      	orrs	r3, r2
 80017ee:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	223c      	movs	r2, #60	@ 0x3c
 80017f4:	5c9b      	ldrb	r3, [r3, r2]
 80017f6:	2b01      	cmp	r3, #1
 80017f8:	d111      	bne.n	800181e <HAL_ADC_Init+0x1f6>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	0f9b      	lsrs	r3, r3, #30
 8001800:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001806:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                      hadc->Init.Oversampling.Ratio         |
 800180c:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                      hadc->Init.Oversampling.RightBitShift |
 8001812:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	4313      	orrs	r3, r2
 8001818:	2201      	movs	r2, #1
 800181a:	4313      	orrs	r3, r2
 800181c:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	691b      	ldr	r3, [r3, #16]
 8001824:	4a50      	ldr	r2, [pc, #320]	@ (8001968 <HAL_ADC_Init+0x340>)
 8001826:	4013      	ands	r3, r2
 8001828:	0019      	movs	r1, r3
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	697a      	ldr	r2, [r7, #20]
 8001830:	430a      	orrs	r2, r1
 8001832:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	685a      	ldr	r2, [r3, #4]
 8001838:	23c0      	movs	r3, #192	@ 0xc0
 800183a:	061b      	lsls	r3, r3, #24
 800183c:	429a      	cmp	r2, r3
 800183e:	d018      	beq.n	8001872 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001844:	2380      	movs	r3, #128	@ 0x80
 8001846:	05db      	lsls	r3, r3, #23
 8001848:	429a      	cmp	r2, r3
 800184a:	d012      	beq.n	8001872 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001850:	2380      	movs	r3, #128	@ 0x80
 8001852:	061b      	lsls	r3, r3, #24
 8001854:	429a      	cmp	r2, r3
 8001856:	d00c      	beq.n	8001872 <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8001858:	4b44      	ldr	r3, [pc, #272]	@ (800196c <HAL_ADC_Init+0x344>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a44      	ldr	r2, [pc, #272]	@ (8001970 <HAL_ADC_Init+0x348>)
 800185e:	4013      	ands	r3, r2
 8001860:	0019      	movs	r1, r3
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	685a      	ldr	r2, [r3, #4]
 8001866:	23f0      	movs	r3, #240	@ 0xf0
 8001868:	039b      	lsls	r3, r3, #14
 800186a:	401a      	ands	r2, r3
 800186c:	4b3f      	ldr	r3, [pc, #252]	@ (800196c <HAL_ADC_Init+0x344>)
 800186e:	430a      	orrs	r2, r1
 8001870:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6818      	ldr	r0, [r3, #0]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800187a:	001a      	movs	r2, r3
 800187c:	2100      	movs	r1, #0
 800187e:	f7ff fdd8 	bl	8001432 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6818      	ldr	r0, [r3, #0]
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800188a:	493a      	ldr	r1, [pc, #232]	@ (8001974 <HAL_ADC_Init+0x34c>)
 800188c:	001a      	movs	r2, r3
 800188e:	f7ff fdd0 	bl	8001432 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	691b      	ldr	r3, [r3, #16]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d109      	bne.n	80018ae <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	2110      	movs	r1, #16
 80018a6:	4249      	negs	r1, r1
 80018a8:	430a      	orrs	r2, r1
 80018aa:	629a      	str	r2, [r3, #40]	@ 0x28
 80018ac:	e018      	b.n	80018e0 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	691a      	ldr	r2, [r3, #16]
 80018b2:	2380      	movs	r3, #128	@ 0x80
 80018b4:	039b      	lsls	r3, r3, #14
 80018b6:	429a      	cmp	r2, r3
 80018b8:	d112      	bne.n	80018e0 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	69db      	ldr	r3, [r3, #28]
 80018c4:	3b01      	subs	r3, #1
 80018c6:	009b      	lsls	r3, r3, #2
 80018c8:	221c      	movs	r2, #28
 80018ca:	4013      	ands	r3, r2
 80018cc:	2210      	movs	r2, #16
 80018ce:	4252      	negs	r2, r2
 80018d0:	409a      	lsls	r2, r3
 80018d2:	0011      	movs	r1, r2
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	430a      	orrs	r2, r1
 80018de:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	2100      	movs	r1, #0
 80018e6:	0018      	movs	r0, r3
 80018e8:	f7ff fdc0 	bl	800146c <LL_ADC_GetSamplingTimeCommonChannels>
 80018ec:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80018f2:	429a      	cmp	r2, r3
 80018f4:	d10b      	bne.n	800190e <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	2200      	movs	r2, #0
 80018fa:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001900:	2203      	movs	r2, #3
 8001902:	4393      	bics	r3, r2
 8001904:	2201      	movs	r2, #1
 8001906:	431a      	orrs	r2, r3
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800190c:	e01c      	b.n	8001948 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001912:	2212      	movs	r2, #18
 8001914:	4393      	bics	r3, r2
 8001916:	2210      	movs	r2, #16
 8001918:	431a      	orrs	r2, r3
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001922:	2201      	movs	r2, #1
 8001924:	431a      	orrs	r2, r3
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 800192a:	231f      	movs	r3, #31
 800192c:	18fb      	adds	r3, r7, r3
 800192e:	2201      	movs	r2, #1
 8001930:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001932:	e009      	b.n	8001948 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001938:	2210      	movs	r2, #16
 800193a:	431a      	orrs	r2, r3
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001940:	231f      	movs	r3, #31
 8001942:	18fb      	adds	r3, r7, r3
 8001944:	2201      	movs	r2, #1
 8001946:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8001948:	231f      	movs	r3, #31
 800194a:	18fb      	adds	r3, r7, r3
 800194c:	781b      	ldrb	r3, [r3, #0]
}
 800194e:	0018      	movs	r0, r3
 8001950:	46bd      	mov	sp, r7
 8001952:	b008      	add	sp, #32
 8001954:	bd80      	pop	{r7, pc}
 8001956:	46c0      	nop			@ (mov r8, r8)
 8001958:	20000000 	.word	0x20000000
 800195c:	00030d40 	.word	0x00030d40
 8001960:	fffffefd 	.word	0xfffffefd
 8001964:	ffde0201 	.word	0xffde0201
 8001968:	1ffffc02 	.word	0x1ffffc02
 800196c:	40012708 	.word	0x40012708
 8001970:	ffc3ffff 	.word	0xffc3ffff
 8001974:	07ffff04 	.word	0x07ffff04

08001978 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b086      	sub	sp, #24
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8001980:	2300      	movs	r3, #0
 8001982:	617b      	str	r3, [r7, #20]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_ier = hadc->Instance->IER;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8001994:	693b      	ldr	r3, [r7, #16]
 8001996:	2202      	movs	r2, #2
 8001998:	4013      	ands	r3, r2
 800199a:	d017      	beq.n	80019cc <HAL_ADC_IRQHandler+0x54>
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	2202      	movs	r2, #2
 80019a0:	4013      	ands	r3, r2
 80019a2:	d013      	beq.n	80019cc <HAL_ADC_IRQHandler+0x54>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019a8:	2210      	movs	r2, #16
 80019aa:	4013      	ands	r3, r2
 80019ac:	d106      	bne.n	80019bc <HAL_ADC_IRQHandler+0x44>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019b2:	2280      	movs	r2, #128	@ 0x80
 80019b4:	0112      	lsls	r2, r2, #4
 80019b6:	431a      	orrs	r2, r3
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	659a      	str	r2, [r3, #88]	@ 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	0018      	movs	r0, r3
 80019c0:	f000 faf2 	bl	8001fa8 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	2202      	movs	r2, #2
 80019ca:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80019cc:	693b      	ldr	r3, [r7, #16]
 80019ce:	2204      	movs	r2, #4
 80019d0:	4013      	ands	r3, r2
 80019d2:	d003      	beq.n	80019dc <HAL_ADC_IRQHandler+0x64>
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	2204      	movs	r2, #4
 80019d8:	4013      	ands	r3, r2
 80019da:	d107      	bne.n	80019ec <HAL_ADC_IRQHandler+0x74>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80019dc:	693b      	ldr	r3, [r7, #16]
 80019de:	2208      	movs	r2, #8
 80019e0:	4013      	ands	r3, r2
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80019e2:	d04d      	beq.n	8001a80 <HAL_ADC_IRQHandler+0x108>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	2208      	movs	r2, #8
 80019e8:	4013      	ands	r3, r2
 80019ea:	d049      	beq.n	8001a80 <HAL_ADC_IRQHandler+0x108>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019f0:	2210      	movs	r2, #16
 80019f2:	4013      	ands	r3, r2
 80019f4:	d106      	bne.n	8001a04 <HAL_ADC_IRQHandler+0x8c>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019fa:	2280      	movs	r2, #128	@ 0x80
 80019fc:	0092      	lsls	r2, r2, #2
 80019fe:	431a      	orrs	r2, r3
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	0018      	movs	r0, r3
 8001a0a:	f7ff fd46 	bl	800149a <LL_ADC_REG_IsTriggerSourceSWStart>
 8001a0e:	1e03      	subs	r3, r0, #0
 8001a10:	d02e      	beq.n	8001a70 <HAL_ADC_IRQHandler+0xf8>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	7e9b      	ldrb	r3, [r3, #26]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d12a      	bne.n	8001a70 <HAL_ADC_IRQHandler+0xf8>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	2208      	movs	r2, #8
 8001a22:	4013      	ands	r3, r2
 8001a24:	2b08      	cmp	r3, #8
 8001a26:	d123      	bne.n	8001a70 <HAL_ADC_IRQHandler+0xf8>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	0018      	movs	r0, r3
 8001a2e:	f7ff fdea 	bl	8001606 <LL_ADC_REG_IsConversionOngoing>
 8001a32:	1e03      	subs	r3, r0, #0
 8001a34:	d110      	bne.n	8001a58 <HAL_ADC_IRQHandler+0xe0>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	685a      	ldr	r2, [r3, #4]
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	210c      	movs	r1, #12
 8001a42:	438a      	bics	r2, r1
 8001a44:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a4a:	4a56      	ldr	r2, [pc, #344]	@ (8001ba4 <HAL_ADC_IRQHandler+0x22c>)
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	2201      	movs	r2, #1
 8001a50:	431a      	orrs	r2, r3
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	659a      	str	r2, [r3, #88]	@ 0x58
 8001a56:	e00b      	b.n	8001a70 <HAL_ADC_IRQHandler+0xf8>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a5c:	2220      	movs	r2, #32
 8001a5e:	431a      	orrs	r2, r3
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a68:	2201      	movs	r2, #1
 8001a6a:	431a      	orrs	r2, r3
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	65da      	str	r2, [r3, #92]	@ 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	0018      	movs	r0, r3
 8001a74:	f000 f898 	bl	8001ba8 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	220c      	movs	r2, #12
 8001a7e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8001a80:	693b      	ldr	r3, [r7, #16]
 8001a82:	2280      	movs	r2, #128	@ 0x80
 8001a84:	4013      	ands	r3, r2
 8001a86:	d012      	beq.n	8001aae <HAL_ADC_IRQHandler+0x136>
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	2280      	movs	r2, #128	@ 0x80
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	d00e      	beq.n	8001aae <HAL_ADC_IRQHandler+0x136>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a94:	2280      	movs	r2, #128	@ 0x80
 8001a96:	0252      	lsls	r2, r2, #9
 8001a98:	431a      	orrs	r2, r3
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	0018      	movs	r0, r3
 8001aa2:	f000 f889 	bl	8001bb8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	2280      	movs	r2, #128	@ 0x80
 8001aac:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8001aae:	693a      	ldr	r2, [r7, #16]
 8001ab0:	2380      	movs	r3, #128	@ 0x80
 8001ab2:	005b      	lsls	r3, r3, #1
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	d014      	beq.n	8001ae2 <HAL_ADC_IRQHandler+0x16a>
 8001ab8:	68fa      	ldr	r2, [r7, #12]
 8001aba:	2380      	movs	r3, #128	@ 0x80
 8001abc:	005b      	lsls	r3, r3, #1
 8001abe:	4013      	ands	r3, r2
 8001ac0:	d00f      	beq.n	8001ae2 <HAL_ADC_IRQHandler+0x16a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ac6:	2280      	movs	r2, #128	@ 0x80
 8001ac8:	0292      	lsls	r2, r2, #10
 8001aca:	431a      	orrs	r2, r3
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	0018      	movs	r0, r3
 8001ad4:	f000 fa58 	bl	8001f88 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	2280      	movs	r2, #128	@ 0x80
 8001ade:	0052      	lsls	r2, r2, #1
 8001ae0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8001ae2:	693a      	ldr	r2, [r7, #16]
 8001ae4:	2380      	movs	r3, #128	@ 0x80
 8001ae6:	009b      	lsls	r3, r3, #2
 8001ae8:	4013      	ands	r3, r2
 8001aea:	d014      	beq.n	8001b16 <HAL_ADC_IRQHandler+0x19e>
 8001aec:	68fa      	ldr	r2, [r7, #12]
 8001aee:	2380      	movs	r3, #128	@ 0x80
 8001af0:	009b      	lsls	r3, r3, #2
 8001af2:	4013      	ands	r3, r2
 8001af4:	d00f      	beq.n	8001b16 <HAL_ADC_IRQHandler+0x19e>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001afa:	2280      	movs	r2, #128	@ 0x80
 8001afc:	02d2      	lsls	r2, r2, #11
 8001afe:	431a      	orrs	r2, r3
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	0018      	movs	r0, r3
 8001b08:	f000 fa46 	bl	8001f98 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	2280      	movs	r2, #128	@ 0x80
 8001b12:	0092      	lsls	r2, r2, #2
 8001b14:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8001b16:	693b      	ldr	r3, [r7, #16]
 8001b18:	2210      	movs	r2, #16
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	d02b      	beq.n	8001b76 <HAL_ADC_IRQHandler+0x1fe>
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	2210      	movs	r2, #16
 8001b22:	4013      	ands	r3, r2
 8001b24:	d027      	beq.n	8001b76 <HAL_ADC_IRQHandler+0x1fe>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d102      	bne.n	8001b34 <HAL_ADC_IRQHandler+0x1bc>
    {
      overrun_error = 1UL;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	617b      	str	r3, [r7, #20]
 8001b32:	e008      	b.n	8001b46 <HAL_ADC_IRQHandler+0x1ce>
    }
    else
    {
      /* Check DMA configuration */
      if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	0018      	movs	r0, r3
 8001b3a:	f7ff fd02 	bl	8001542 <LL_ADC_REG_GetDMATransfer>
 8001b3e:	1e03      	subs	r3, r0, #0
 8001b40:	d001      	beq.n	8001b46 <HAL_ADC_IRQHandler+0x1ce>
      {
        overrun_error = 1UL;
 8001b42:	2301      	movs	r3, #1
 8001b44:	617b      	str	r3, [r7, #20]
      }
    }

    if (overrun_error == 1UL)
 8001b46:	697b      	ldr	r3, [r7, #20]
 8001b48:	2b01      	cmp	r3, #1
 8001b4a:	d110      	bne.n	8001b6e <HAL_ADC_IRQHandler+0x1f6>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b50:	2280      	movs	r2, #128	@ 0x80
 8001b52:	00d2      	lsls	r2, r2, #3
 8001b54:	431a      	orrs	r2, r3
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b5e:	2202      	movs	r2, #2
 8001b60:	431a      	orrs	r2, r3
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	65da      	str	r2, [r3, #92]	@ 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	0018      	movs	r0, r3
 8001b6a:	f000 f82d 	bl	8001bc8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	2210      	movs	r2, #16
 8001b74:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check channel configuration ready flag ========== */
  if (((tmp_isr & ADC_FLAG_CCRDY) == ADC_FLAG_CCRDY) && ((tmp_ier & ADC_IT_CCRDY) == ADC_IT_CCRDY))
 8001b76:	693a      	ldr	r2, [r7, #16]
 8001b78:	2380      	movs	r3, #128	@ 0x80
 8001b7a:	019b      	lsls	r3, r3, #6
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	d00d      	beq.n	8001b9c <HAL_ADC_IRQHandler+0x224>
 8001b80:	68fa      	ldr	r2, [r7, #12]
 8001b82:	2380      	movs	r3, #128	@ 0x80
 8001b84:	019b      	lsls	r3, r3, #6
 8001b86:	4013      	ands	r3, r2
 8001b88:	d008      	beq.n	8001b9c <HAL_ADC_IRQHandler+0x224>
  {
    /* Channel configuration ready callback */
    HAL_ADCEx_ChannelConfigReadyCallback(hadc);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	0018      	movs	r0, r3
 8001b8e:	f000 fa13 	bl	8001fb8 <HAL_ADCEx_ChannelConfigReadyCallback>

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_CCRDY);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	2280      	movs	r2, #128	@ 0x80
 8001b98:	0192      	lsls	r2, r2, #6
 8001b9a:	601a      	str	r2, [r3, #0]
  }
}
 8001b9c:	46c0      	nop			@ (mov r8, r8)
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	b006      	add	sp, #24
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	fffffefe 	.word	0xfffffefe

08001ba8 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b082      	sub	sp, #8
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001bb0:	46c0      	nop			@ (mov r8, r8)
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	b002      	add	sp, #8
 8001bb6:	bd80      	pop	{r7, pc}

08001bb8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b082      	sub	sp, #8
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001bc0:	46c0      	nop			@ (mov r8, r8)
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	b002      	add	sp, #8
 8001bc6:	bd80      	pop	{r7, pc}

08001bc8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b082      	sub	sp, #8
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001bd0:	46c0      	nop			@ (mov r8, r8)
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	b002      	add	sp, #8
 8001bd6:	bd80      	pop	{r7, pc}

08001bd8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b086      	sub	sp, #24
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
 8001be0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001be2:	2317      	movs	r3, #23
 8001be4:	18fb      	adds	r3, r7, r3
 8001be6:	2200      	movs	r2, #0
 8001be8:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001bea:	2300      	movs	r3, #0
 8001bec:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2254      	movs	r2, #84	@ 0x54
 8001bf2:	5c9b      	ldrb	r3, [r3, r2]
 8001bf4:	2b01      	cmp	r3, #1
 8001bf6:	d101      	bne.n	8001bfc <HAL_ADC_ConfigChannel+0x24>
 8001bf8:	2302      	movs	r3, #2
 8001bfa:	e1c0      	b.n	8001f7e <HAL_ADC_ConfigChannel+0x3a6>
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2254      	movs	r2, #84	@ 0x54
 8001c00:	2101      	movs	r1, #1
 8001c02:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	0018      	movs	r0, r3
 8001c0a:	f7ff fcfc 	bl	8001606 <LL_ADC_REG_IsConversionOngoing>
 8001c0e:	1e03      	subs	r3, r0, #0
 8001c10:	d000      	beq.n	8001c14 <HAL_ADC_ConfigChannel+0x3c>
 8001c12:	e1a3      	b.n	8001f5c <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	2b02      	cmp	r3, #2
 8001c1a:	d100      	bne.n	8001c1e <HAL_ADC_ConfigChannel+0x46>
 8001c1c:	e143      	b.n	8001ea6 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	691a      	ldr	r2, [r3, #16]
 8001c22:	2380      	movs	r3, #128	@ 0x80
 8001c24:	061b      	lsls	r3, r3, #24
 8001c26:	429a      	cmp	r2, r3
 8001c28:	d004      	beq.n	8001c34 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001c2e:	4ac1      	ldr	r2, [pc, #772]	@ (8001f34 <HAL_ADC_ConfigChannel+0x35c>)
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d108      	bne.n	8001c46 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681a      	ldr	r2, [r3, #0]
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	0019      	movs	r1, r3
 8001c3e:	0010      	movs	r0, r2
 8001c40:	f7ff fc5c 	bl	80014fc <LL_ADC_REG_SetSequencerChAdd>
 8001c44:	e0c9      	b.n	8001dda <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	211f      	movs	r1, #31
 8001c50:	400b      	ands	r3, r1
 8001c52:	210f      	movs	r1, #15
 8001c54:	4099      	lsls	r1, r3
 8001c56:	000b      	movs	r3, r1
 8001c58:	43db      	mvns	r3, r3
 8001c5a:	4013      	ands	r3, r2
 8001c5c:	0019      	movs	r1, r3
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	035b      	lsls	r3, r3, #13
 8001c64:	0b5b      	lsrs	r3, r3, #13
 8001c66:	d105      	bne.n	8001c74 <HAL_ADC_ConfigChannel+0x9c>
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	0e9b      	lsrs	r3, r3, #26
 8001c6e:	221f      	movs	r2, #31
 8001c70:	4013      	ands	r3, r2
 8001c72:	e098      	b.n	8001da6 <HAL_ADC_ConfigChannel+0x1ce>
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	2201      	movs	r2, #1
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	d000      	beq.n	8001c80 <HAL_ADC_ConfigChannel+0xa8>
 8001c7e:	e091      	b.n	8001da4 <HAL_ADC_ConfigChannel+0x1cc>
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	2202      	movs	r2, #2
 8001c86:	4013      	ands	r3, r2
 8001c88:	d000      	beq.n	8001c8c <HAL_ADC_ConfigChannel+0xb4>
 8001c8a:	e089      	b.n	8001da0 <HAL_ADC_ConfigChannel+0x1c8>
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	2204      	movs	r2, #4
 8001c92:	4013      	ands	r3, r2
 8001c94:	d000      	beq.n	8001c98 <HAL_ADC_ConfigChannel+0xc0>
 8001c96:	e081      	b.n	8001d9c <HAL_ADC_ConfigChannel+0x1c4>
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	2208      	movs	r2, #8
 8001c9e:	4013      	ands	r3, r2
 8001ca0:	d000      	beq.n	8001ca4 <HAL_ADC_ConfigChannel+0xcc>
 8001ca2:	e079      	b.n	8001d98 <HAL_ADC_ConfigChannel+0x1c0>
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	2210      	movs	r2, #16
 8001caa:	4013      	ands	r3, r2
 8001cac:	d000      	beq.n	8001cb0 <HAL_ADC_ConfigChannel+0xd8>
 8001cae:	e071      	b.n	8001d94 <HAL_ADC_ConfigChannel+0x1bc>
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	2220      	movs	r2, #32
 8001cb6:	4013      	ands	r3, r2
 8001cb8:	d000      	beq.n	8001cbc <HAL_ADC_ConfigChannel+0xe4>
 8001cba:	e069      	b.n	8001d90 <HAL_ADC_ConfigChannel+0x1b8>
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	2240      	movs	r2, #64	@ 0x40
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	d000      	beq.n	8001cc8 <HAL_ADC_ConfigChannel+0xf0>
 8001cc6:	e061      	b.n	8001d8c <HAL_ADC_ConfigChannel+0x1b4>
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	2280      	movs	r2, #128	@ 0x80
 8001cce:	4013      	ands	r3, r2
 8001cd0:	d000      	beq.n	8001cd4 <HAL_ADC_ConfigChannel+0xfc>
 8001cd2:	e059      	b.n	8001d88 <HAL_ADC_ConfigChannel+0x1b0>
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	681a      	ldr	r2, [r3, #0]
 8001cd8:	2380      	movs	r3, #128	@ 0x80
 8001cda:	005b      	lsls	r3, r3, #1
 8001cdc:	4013      	ands	r3, r2
 8001cde:	d151      	bne.n	8001d84 <HAL_ADC_ConfigChannel+0x1ac>
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	681a      	ldr	r2, [r3, #0]
 8001ce4:	2380      	movs	r3, #128	@ 0x80
 8001ce6:	009b      	lsls	r3, r3, #2
 8001ce8:	4013      	ands	r3, r2
 8001cea:	d149      	bne.n	8001d80 <HAL_ADC_ConfigChannel+0x1a8>
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	681a      	ldr	r2, [r3, #0]
 8001cf0:	2380      	movs	r3, #128	@ 0x80
 8001cf2:	00db      	lsls	r3, r3, #3
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	d141      	bne.n	8001d7c <HAL_ADC_ConfigChannel+0x1a4>
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	681a      	ldr	r2, [r3, #0]
 8001cfc:	2380      	movs	r3, #128	@ 0x80
 8001cfe:	011b      	lsls	r3, r3, #4
 8001d00:	4013      	ands	r3, r2
 8001d02:	d139      	bne.n	8001d78 <HAL_ADC_ConfigChannel+0x1a0>
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	681a      	ldr	r2, [r3, #0]
 8001d08:	2380      	movs	r3, #128	@ 0x80
 8001d0a:	015b      	lsls	r3, r3, #5
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	d131      	bne.n	8001d74 <HAL_ADC_ConfigChannel+0x19c>
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	681a      	ldr	r2, [r3, #0]
 8001d14:	2380      	movs	r3, #128	@ 0x80
 8001d16:	019b      	lsls	r3, r3, #6
 8001d18:	4013      	ands	r3, r2
 8001d1a:	d129      	bne.n	8001d70 <HAL_ADC_ConfigChannel+0x198>
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	681a      	ldr	r2, [r3, #0]
 8001d20:	2380      	movs	r3, #128	@ 0x80
 8001d22:	01db      	lsls	r3, r3, #7
 8001d24:	4013      	ands	r3, r2
 8001d26:	d121      	bne.n	8001d6c <HAL_ADC_ConfigChannel+0x194>
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	681a      	ldr	r2, [r3, #0]
 8001d2c:	2380      	movs	r3, #128	@ 0x80
 8001d2e:	021b      	lsls	r3, r3, #8
 8001d30:	4013      	ands	r3, r2
 8001d32:	d119      	bne.n	8001d68 <HAL_ADC_ConfigChannel+0x190>
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	681a      	ldr	r2, [r3, #0]
 8001d38:	2380      	movs	r3, #128	@ 0x80
 8001d3a:	025b      	lsls	r3, r3, #9
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	d111      	bne.n	8001d64 <HAL_ADC_ConfigChannel+0x18c>
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	681a      	ldr	r2, [r3, #0]
 8001d44:	2380      	movs	r3, #128	@ 0x80
 8001d46:	029b      	lsls	r3, r3, #10
 8001d48:	4013      	ands	r3, r2
 8001d4a:	d109      	bne.n	8001d60 <HAL_ADC_ConfigChannel+0x188>
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	681a      	ldr	r2, [r3, #0]
 8001d50:	2380      	movs	r3, #128	@ 0x80
 8001d52:	02db      	lsls	r3, r3, #11
 8001d54:	4013      	ands	r3, r2
 8001d56:	d001      	beq.n	8001d5c <HAL_ADC_ConfigChannel+0x184>
 8001d58:	2312      	movs	r3, #18
 8001d5a:	e024      	b.n	8001da6 <HAL_ADC_ConfigChannel+0x1ce>
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	e022      	b.n	8001da6 <HAL_ADC_ConfigChannel+0x1ce>
 8001d60:	2311      	movs	r3, #17
 8001d62:	e020      	b.n	8001da6 <HAL_ADC_ConfigChannel+0x1ce>
 8001d64:	2310      	movs	r3, #16
 8001d66:	e01e      	b.n	8001da6 <HAL_ADC_ConfigChannel+0x1ce>
 8001d68:	230f      	movs	r3, #15
 8001d6a:	e01c      	b.n	8001da6 <HAL_ADC_ConfigChannel+0x1ce>
 8001d6c:	230e      	movs	r3, #14
 8001d6e:	e01a      	b.n	8001da6 <HAL_ADC_ConfigChannel+0x1ce>
 8001d70:	230d      	movs	r3, #13
 8001d72:	e018      	b.n	8001da6 <HAL_ADC_ConfigChannel+0x1ce>
 8001d74:	230c      	movs	r3, #12
 8001d76:	e016      	b.n	8001da6 <HAL_ADC_ConfigChannel+0x1ce>
 8001d78:	230b      	movs	r3, #11
 8001d7a:	e014      	b.n	8001da6 <HAL_ADC_ConfigChannel+0x1ce>
 8001d7c:	230a      	movs	r3, #10
 8001d7e:	e012      	b.n	8001da6 <HAL_ADC_ConfigChannel+0x1ce>
 8001d80:	2309      	movs	r3, #9
 8001d82:	e010      	b.n	8001da6 <HAL_ADC_ConfigChannel+0x1ce>
 8001d84:	2308      	movs	r3, #8
 8001d86:	e00e      	b.n	8001da6 <HAL_ADC_ConfigChannel+0x1ce>
 8001d88:	2307      	movs	r3, #7
 8001d8a:	e00c      	b.n	8001da6 <HAL_ADC_ConfigChannel+0x1ce>
 8001d8c:	2306      	movs	r3, #6
 8001d8e:	e00a      	b.n	8001da6 <HAL_ADC_ConfigChannel+0x1ce>
 8001d90:	2305      	movs	r3, #5
 8001d92:	e008      	b.n	8001da6 <HAL_ADC_ConfigChannel+0x1ce>
 8001d94:	2304      	movs	r3, #4
 8001d96:	e006      	b.n	8001da6 <HAL_ADC_ConfigChannel+0x1ce>
 8001d98:	2303      	movs	r3, #3
 8001d9a:	e004      	b.n	8001da6 <HAL_ADC_ConfigChannel+0x1ce>
 8001d9c:	2302      	movs	r3, #2
 8001d9e:	e002      	b.n	8001da6 <HAL_ADC_ConfigChannel+0x1ce>
 8001da0:	2301      	movs	r3, #1
 8001da2:	e000      	b.n	8001da6 <HAL_ADC_ConfigChannel+0x1ce>
 8001da4:	2300      	movs	r3, #0
 8001da6:	683a      	ldr	r2, [r7, #0]
 8001da8:	6852      	ldr	r2, [r2, #4]
 8001daa:	201f      	movs	r0, #31
 8001dac:	4002      	ands	r2, r0
 8001dae:	4093      	lsls	r3, r2
 8001db0:	000a      	movs	r2, r1
 8001db2:	431a      	orrs	r2, r3
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	089b      	lsrs	r3, r3, #2
 8001dbe:	1c5a      	adds	r2, r3, #1
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	69db      	ldr	r3, [r3, #28]
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	d808      	bhi.n	8001dda <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6818      	ldr	r0, [r3, #0]
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	6859      	ldr	r1, [r3, #4]
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	001a      	movs	r2, r3
 8001dd6:	f7ff fb71 	bl	80014bc <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6818      	ldr	r0, [r3, #0]
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	6819      	ldr	r1, [r3, #0]
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	689b      	ldr	r3, [r3, #8]
 8001de6:	001a      	movs	r2, r3
 8001de8:	f7ff fbb8 	bl	800155c <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	db00      	blt.n	8001df6 <HAL_ADC_ConfigChannel+0x21e>
 8001df4:	e0bc      	b.n	8001f70 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001df6:	4b50      	ldr	r3, [pc, #320]	@ (8001f38 <HAL_ADC_ConfigChannel+0x360>)
 8001df8:	0018      	movs	r0, r3
 8001dfa:	f7ff fb0d 	bl	8001418 <LL_ADC_GetCommonPathInternalCh>
 8001dfe:	0003      	movs	r3, r0
 8001e00:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4a4d      	ldr	r2, [pc, #308]	@ (8001f3c <HAL_ADC_ConfigChannel+0x364>)
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d122      	bne.n	8001e52 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001e0c:	693a      	ldr	r2, [r7, #16]
 8001e0e:	2380      	movs	r3, #128	@ 0x80
 8001e10:	041b      	lsls	r3, r3, #16
 8001e12:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001e14:	d11d      	bne.n	8001e52 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001e16:	693b      	ldr	r3, [r7, #16]
 8001e18:	2280      	movs	r2, #128	@ 0x80
 8001e1a:	0412      	lsls	r2, r2, #16
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	4a46      	ldr	r2, [pc, #280]	@ (8001f38 <HAL_ADC_ConfigChannel+0x360>)
 8001e20:	0019      	movs	r1, r3
 8001e22:	0010      	movs	r0, r2
 8001e24:	f7ff fae4 	bl	80013f0 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001e28:	4b45      	ldr	r3, [pc, #276]	@ (8001f40 <HAL_ADC_ConfigChannel+0x368>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4945      	ldr	r1, [pc, #276]	@ (8001f44 <HAL_ADC_ConfigChannel+0x36c>)
 8001e2e:	0018      	movs	r0, r3
 8001e30:	f7fe f9c2 	bl	80001b8 <__udivsi3>
 8001e34:	0003      	movs	r3, r0
 8001e36:	1c5a      	adds	r2, r3, #1
 8001e38:	0013      	movs	r3, r2
 8001e3a:	005b      	lsls	r3, r3, #1
 8001e3c:	189b      	adds	r3, r3, r2
 8001e3e:	009b      	lsls	r3, r3, #2
 8001e40:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001e42:	e002      	b.n	8001e4a <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	3b01      	subs	r3, #1
 8001e48:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d1f9      	bne.n	8001e44 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001e50:	e08e      	b.n	8001f70 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4a3c      	ldr	r2, [pc, #240]	@ (8001f48 <HAL_ADC_ConfigChannel+0x370>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d10e      	bne.n	8001e7a <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001e5c:	693a      	ldr	r2, [r7, #16]
 8001e5e:	2380      	movs	r3, #128	@ 0x80
 8001e60:	045b      	lsls	r3, r3, #17
 8001e62:	4013      	ands	r3, r2
 8001e64:	d109      	bne.n	8001e7a <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001e66:	693b      	ldr	r3, [r7, #16]
 8001e68:	2280      	movs	r2, #128	@ 0x80
 8001e6a:	0452      	lsls	r2, r2, #17
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	4a32      	ldr	r2, [pc, #200]	@ (8001f38 <HAL_ADC_ConfigChannel+0x360>)
 8001e70:	0019      	movs	r1, r3
 8001e72:	0010      	movs	r0, r2
 8001e74:	f7ff fabc 	bl	80013f0 <LL_ADC_SetCommonPathInternalCh>
 8001e78:	e07a      	b.n	8001f70 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4a33      	ldr	r2, [pc, #204]	@ (8001f4c <HAL_ADC_ConfigChannel+0x374>)
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d000      	beq.n	8001e86 <HAL_ADC_ConfigChannel+0x2ae>
 8001e84:	e074      	b.n	8001f70 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001e86:	693a      	ldr	r2, [r7, #16]
 8001e88:	2380      	movs	r3, #128	@ 0x80
 8001e8a:	03db      	lsls	r3, r3, #15
 8001e8c:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001e8e:	d000      	beq.n	8001e92 <HAL_ADC_ConfigChannel+0x2ba>
 8001e90:	e06e      	b.n	8001f70 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	2280      	movs	r2, #128	@ 0x80
 8001e96:	03d2      	lsls	r2, r2, #15
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	4a27      	ldr	r2, [pc, #156]	@ (8001f38 <HAL_ADC_ConfigChannel+0x360>)
 8001e9c:	0019      	movs	r1, r3
 8001e9e:	0010      	movs	r0, r2
 8001ea0:	f7ff faa6 	bl	80013f0 <LL_ADC_SetCommonPathInternalCh>
 8001ea4:	e064      	b.n	8001f70 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	691a      	ldr	r2, [r3, #16]
 8001eaa:	2380      	movs	r3, #128	@ 0x80
 8001eac:	061b      	lsls	r3, r3, #24
 8001eae:	429a      	cmp	r2, r3
 8001eb0:	d004      	beq.n	8001ebc <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001eb6:	4a1f      	ldr	r2, [pc, #124]	@ (8001f34 <HAL_ADC_ConfigChannel+0x35c>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d107      	bne.n	8001ecc <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681a      	ldr	r2, [r3, #0]
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	0019      	movs	r1, r3
 8001ec6:	0010      	movs	r0, r2
 8001ec8:	f7ff fb29 	bl	800151e <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	da4d      	bge.n	8001f70 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001ed4:	4b18      	ldr	r3, [pc, #96]	@ (8001f38 <HAL_ADC_ConfigChannel+0x360>)
 8001ed6:	0018      	movs	r0, r3
 8001ed8:	f7ff fa9e 	bl	8001418 <LL_ADC_GetCommonPathInternalCh>
 8001edc:	0003      	movs	r3, r0
 8001ede:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a15      	ldr	r2, [pc, #84]	@ (8001f3c <HAL_ADC_ConfigChannel+0x364>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d108      	bne.n	8001efc <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	4a18      	ldr	r2, [pc, #96]	@ (8001f50 <HAL_ADC_ConfigChannel+0x378>)
 8001eee:	4013      	ands	r3, r2
 8001ef0:	4a11      	ldr	r2, [pc, #68]	@ (8001f38 <HAL_ADC_ConfigChannel+0x360>)
 8001ef2:	0019      	movs	r1, r3
 8001ef4:	0010      	movs	r0, r2
 8001ef6:	f7ff fa7b 	bl	80013f0 <LL_ADC_SetCommonPathInternalCh>
 8001efa:	e039      	b.n	8001f70 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a11      	ldr	r2, [pc, #68]	@ (8001f48 <HAL_ADC_ConfigChannel+0x370>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d108      	bne.n	8001f18 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	4a12      	ldr	r2, [pc, #72]	@ (8001f54 <HAL_ADC_ConfigChannel+0x37c>)
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	4a0a      	ldr	r2, [pc, #40]	@ (8001f38 <HAL_ADC_ConfigChannel+0x360>)
 8001f0e:	0019      	movs	r1, r3
 8001f10:	0010      	movs	r0, r2
 8001f12:	f7ff fa6d 	bl	80013f0 <LL_ADC_SetCommonPathInternalCh>
 8001f16:	e02b      	b.n	8001f70 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a0b      	ldr	r2, [pc, #44]	@ (8001f4c <HAL_ADC_ConfigChannel+0x374>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d126      	bne.n	8001f70 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001f22:	693b      	ldr	r3, [r7, #16]
 8001f24:	4a0c      	ldr	r2, [pc, #48]	@ (8001f58 <HAL_ADC_ConfigChannel+0x380>)
 8001f26:	4013      	ands	r3, r2
 8001f28:	4a03      	ldr	r2, [pc, #12]	@ (8001f38 <HAL_ADC_ConfigChannel+0x360>)
 8001f2a:	0019      	movs	r1, r3
 8001f2c:	0010      	movs	r0, r2
 8001f2e:	f7ff fa5f 	bl	80013f0 <LL_ADC_SetCommonPathInternalCh>
 8001f32:	e01d      	b.n	8001f70 <HAL_ADC_ConfigChannel+0x398>
 8001f34:	80000004 	.word	0x80000004
 8001f38:	40012708 	.word	0x40012708
 8001f3c:	b0001000 	.word	0xb0001000
 8001f40:	20000000 	.word	0x20000000
 8001f44:	00030d40 	.word	0x00030d40
 8001f48:	b8004000 	.word	0xb8004000
 8001f4c:	b4002000 	.word	0xb4002000
 8001f50:	ff7fffff 	.word	0xff7fffff
 8001f54:	feffffff 	.word	0xfeffffff
 8001f58:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f60:	2220      	movs	r2, #32
 8001f62:	431a      	orrs	r2, r3
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001f68:	2317      	movs	r3, #23
 8001f6a:	18fb      	adds	r3, r7, r3
 8001f6c:	2201      	movs	r2, #1
 8001f6e:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2254      	movs	r2, #84	@ 0x54
 8001f74:	2100      	movs	r1, #0
 8001f76:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8001f78:	2317      	movs	r3, #23
 8001f7a:	18fb      	adds	r3, r7, r3
 8001f7c:	781b      	ldrb	r3, [r3, #0]
}
 8001f7e:	0018      	movs	r0, r3
 8001f80:	46bd      	mov	sp, r7
 8001f82:	b006      	add	sp, #24
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	46c0      	nop			@ (mov r8, r8)

08001f88 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b082      	sub	sp, #8
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8001f90:	46c0      	nop			@ (mov r8, r8)
 8001f92:	46bd      	mov	sp, r7
 8001f94:	b002      	add	sp, #8
 8001f96:	bd80      	pop	{r7, pc}

08001f98 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b082      	sub	sp, #8
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8001fa0:	46c0      	nop			@ (mov r8, r8)
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	b002      	add	sp, #8
 8001fa6:	bd80      	pop	{r7, pc}

08001fa8 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b082      	sub	sp, #8
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8001fb0:	46c0      	nop			@ (mov r8, r8)
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	b002      	add	sp, #8
 8001fb6:	bd80      	pop	{r7, pc}

08001fb8 <HAL_ADCEx_ChannelConfigReadyCallback>:
  * @brief  ADC channel configuration ready callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_ChannelConfigReadyCallback(ADC_HandleTypeDef *hadc)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b082      	sub	sp, #8
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_ChannelConfigReadyCallback must be implemented in the user file.
  */
}
 8001fc0:	46c0      	nop			@ (mov r8, r8)
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	b002      	add	sp, #8
 8001fc6:	bd80      	pop	{r7, pc}

08001fc8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b082      	sub	sp, #8
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	0002      	movs	r2, r0
 8001fd0:	1dfb      	adds	r3, r7, #7
 8001fd2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001fd4:	1dfb      	adds	r3, r7, #7
 8001fd6:	781b      	ldrb	r3, [r3, #0]
 8001fd8:	2b7f      	cmp	r3, #127	@ 0x7f
 8001fda:	d809      	bhi.n	8001ff0 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fdc:	1dfb      	adds	r3, r7, #7
 8001fde:	781b      	ldrb	r3, [r3, #0]
 8001fe0:	001a      	movs	r2, r3
 8001fe2:	231f      	movs	r3, #31
 8001fe4:	401a      	ands	r2, r3
 8001fe6:	4b04      	ldr	r3, [pc, #16]	@ (8001ff8 <__NVIC_EnableIRQ+0x30>)
 8001fe8:	2101      	movs	r1, #1
 8001fea:	4091      	lsls	r1, r2
 8001fec:	000a      	movs	r2, r1
 8001fee:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8001ff0:	46c0      	nop			@ (mov r8, r8)
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	b002      	add	sp, #8
 8001ff6:	bd80      	pop	{r7, pc}
 8001ff8:	e000e100 	.word	0xe000e100

08001ffc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ffc:	b590      	push	{r4, r7, lr}
 8001ffe:	b083      	sub	sp, #12
 8002000:	af00      	add	r7, sp, #0
 8002002:	0002      	movs	r2, r0
 8002004:	6039      	str	r1, [r7, #0]
 8002006:	1dfb      	adds	r3, r7, #7
 8002008:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800200a:	1dfb      	adds	r3, r7, #7
 800200c:	781b      	ldrb	r3, [r3, #0]
 800200e:	2b7f      	cmp	r3, #127	@ 0x7f
 8002010:	d828      	bhi.n	8002064 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002012:	4a2f      	ldr	r2, [pc, #188]	@ (80020d0 <__NVIC_SetPriority+0xd4>)
 8002014:	1dfb      	adds	r3, r7, #7
 8002016:	781b      	ldrb	r3, [r3, #0]
 8002018:	b25b      	sxtb	r3, r3
 800201a:	089b      	lsrs	r3, r3, #2
 800201c:	33c0      	adds	r3, #192	@ 0xc0
 800201e:	009b      	lsls	r3, r3, #2
 8002020:	589b      	ldr	r3, [r3, r2]
 8002022:	1dfa      	adds	r2, r7, #7
 8002024:	7812      	ldrb	r2, [r2, #0]
 8002026:	0011      	movs	r1, r2
 8002028:	2203      	movs	r2, #3
 800202a:	400a      	ands	r2, r1
 800202c:	00d2      	lsls	r2, r2, #3
 800202e:	21ff      	movs	r1, #255	@ 0xff
 8002030:	4091      	lsls	r1, r2
 8002032:	000a      	movs	r2, r1
 8002034:	43d2      	mvns	r2, r2
 8002036:	401a      	ands	r2, r3
 8002038:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	019b      	lsls	r3, r3, #6
 800203e:	22ff      	movs	r2, #255	@ 0xff
 8002040:	401a      	ands	r2, r3
 8002042:	1dfb      	adds	r3, r7, #7
 8002044:	781b      	ldrb	r3, [r3, #0]
 8002046:	0018      	movs	r0, r3
 8002048:	2303      	movs	r3, #3
 800204a:	4003      	ands	r3, r0
 800204c:	00db      	lsls	r3, r3, #3
 800204e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002050:	481f      	ldr	r0, [pc, #124]	@ (80020d0 <__NVIC_SetPriority+0xd4>)
 8002052:	1dfb      	adds	r3, r7, #7
 8002054:	781b      	ldrb	r3, [r3, #0]
 8002056:	b25b      	sxtb	r3, r3
 8002058:	089b      	lsrs	r3, r3, #2
 800205a:	430a      	orrs	r2, r1
 800205c:	33c0      	adds	r3, #192	@ 0xc0
 800205e:	009b      	lsls	r3, r3, #2
 8002060:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002062:	e031      	b.n	80020c8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002064:	4a1b      	ldr	r2, [pc, #108]	@ (80020d4 <__NVIC_SetPriority+0xd8>)
 8002066:	1dfb      	adds	r3, r7, #7
 8002068:	781b      	ldrb	r3, [r3, #0]
 800206a:	0019      	movs	r1, r3
 800206c:	230f      	movs	r3, #15
 800206e:	400b      	ands	r3, r1
 8002070:	3b08      	subs	r3, #8
 8002072:	089b      	lsrs	r3, r3, #2
 8002074:	3306      	adds	r3, #6
 8002076:	009b      	lsls	r3, r3, #2
 8002078:	18d3      	adds	r3, r2, r3
 800207a:	3304      	adds	r3, #4
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	1dfa      	adds	r2, r7, #7
 8002080:	7812      	ldrb	r2, [r2, #0]
 8002082:	0011      	movs	r1, r2
 8002084:	2203      	movs	r2, #3
 8002086:	400a      	ands	r2, r1
 8002088:	00d2      	lsls	r2, r2, #3
 800208a:	21ff      	movs	r1, #255	@ 0xff
 800208c:	4091      	lsls	r1, r2
 800208e:	000a      	movs	r2, r1
 8002090:	43d2      	mvns	r2, r2
 8002092:	401a      	ands	r2, r3
 8002094:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	019b      	lsls	r3, r3, #6
 800209a:	22ff      	movs	r2, #255	@ 0xff
 800209c:	401a      	ands	r2, r3
 800209e:	1dfb      	adds	r3, r7, #7
 80020a0:	781b      	ldrb	r3, [r3, #0]
 80020a2:	0018      	movs	r0, r3
 80020a4:	2303      	movs	r3, #3
 80020a6:	4003      	ands	r3, r0
 80020a8:	00db      	lsls	r3, r3, #3
 80020aa:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80020ac:	4809      	ldr	r0, [pc, #36]	@ (80020d4 <__NVIC_SetPriority+0xd8>)
 80020ae:	1dfb      	adds	r3, r7, #7
 80020b0:	781b      	ldrb	r3, [r3, #0]
 80020b2:	001c      	movs	r4, r3
 80020b4:	230f      	movs	r3, #15
 80020b6:	4023      	ands	r3, r4
 80020b8:	3b08      	subs	r3, #8
 80020ba:	089b      	lsrs	r3, r3, #2
 80020bc:	430a      	orrs	r2, r1
 80020be:	3306      	adds	r3, #6
 80020c0:	009b      	lsls	r3, r3, #2
 80020c2:	18c3      	adds	r3, r0, r3
 80020c4:	3304      	adds	r3, #4
 80020c6:	601a      	str	r2, [r3, #0]
}
 80020c8:	46c0      	nop			@ (mov r8, r8)
 80020ca:	46bd      	mov	sp, r7
 80020cc:	b003      	add	sp, #12
 80020ce:	bd90      	pop	{r4, r7, pc}
 80020d0:	e000e100 	.word	0xe000e100
 80020d4:	e000ed00 	.word	0xe000ed00

080020d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b082      	sub	sp, #8
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	1e5a      	subs	r2, r3, #1
 80020e4:	2380      	movs	r3, #128	@ 0x80
 80020e6:	045b      	lsls	r3, r3, #17
 80020e8:	429a      	cmp	r2, r3
 80020ea:	d301      	bcc.n	80020f0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020ec:	2301      	movs	r3, #1
 80020ee:	e010      	b.n	8002112 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020f0:	4b0a      	ldr	r3, [pc, #40]	@ (800211c <SysTick_Config+0x44>)
 80020f2:	687a      	ldr	r2, [r7, #4]
 80020f4:	3a01      	subs	r2, #1
 80020f6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020f8:	2301      	movs	r3, #1
 80020fa:	425b      	negs	r3, r3
 80020fc:	2103      	movs	r1, #3
 80020fe:	0018      	movs	r0, r3
 8002100:	f7ff ff7c 	bl	8001ffc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002104:	4b05      	ldr	r3, [pc, #20]	@ (800211c <SysTick_Config+0x44>)
 8002106:	2200      	movs	r2, #0
 8002108:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800210a:	4b04      	ldr	r3, [pc, #16]	@ (800211c <SysTick_Config+0x44>)
 800210c:	2207      	movs	r2, #7
 800210e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002110:	2300      	movs	r3, #0
}
 8002112:	0018      	movs	r0, r3
 8002114:	46bd      	mov	sp, r7
 8002116:	b002      	add	sp, #8
 8002118:	bd80      	pop	{r7, pc}
 800211a:	46c0      	nop			@ (mov r8, r8)
 800211c:	e000e010 	.word	0xe000e010

08002120 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b084      	sub	sp, #16
 8002124:	af00      	add	r7, sp, #0
 8002126:	60b9      	str	r1, [r7, #8]
 8002128:	607a      	str	r2, [r7, #4]
 800212a:	210f      	movs	r1, #15
 800212c:	187b      	adds	r3, r7, r1
 800212e:	1c02      	adds	r2, r0, #0
 8002130:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8002132:	68ba      	ldr	r2, [r7, #8]
 8002134:	187b      	adds	r3, r7, r1
 8002136:	781b      	ldrb	r3, [r3, #0]
 8002138:	b25b      	sxtb	r3, r3
 800213a:	0011      	movs	r1, r2
 800213c:	0018      	movs	r0, r3
 800213e:	f7ff ff5d 	bl	8001ffc <__NVIC_SetPriority>
}
 8002142:	46c0      	nop			@ (mov r8, r8)
 8002144:	46bd      	mov	sp, r7
 8002146:	b004      	add	sp, #16
 8002148:	bd80      	pop	{r7, pc}

0800214a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800214a:	b580      	push	{r7, lr}
 800214c:	b082      	sub	sp, #8
 800214e:	af00      	add	r7, sp, #0
 8002150:	0002      	movs	r2, r0
 8002152:	1dfb      	adds	r3, r7, #7
 8002154:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002156:	1dfb      	adds	r3, r7, #7
 8002158:	781b      	ldrb	r3, [r3, #0]
 800215a:	b25b      	sxtb	r3, r3
 800215c:	0018      	movs	r0, r3
 800215e:	f7ff ff33 	bl	8001fc8 <__NVIC_EnableIRQ>
}
 8002162:	46c0      	nop			@ (mov r8, r8)
 8002164:	46bd      	mov	sp, r7
 8002166:	b002      	add	sp, #8
 8002168:	bd80      	pop	{r7, pc}

0800216a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800216a:	b580      	push	{r7, lr}
 800216c:	b082      	sub	sp, #8
 800216e:	af00      	add	r7, sp, #0
 8002170:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	0018      	movs	r0, r3
 8002176:	f7ff ffaf 	bl	80020d8 <SysTick_Config>
 800217a:	0003      	movs	r3, r0
}
 800217c:	0018      	movs	r0, r3
 800217e:	46bd      	mov	sp, r7
 8002180:	b002      	add	sp, #8
 8002182:	bd80      	pop	{r7, pc}

08002184 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b086      	sub	sp, #24
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
 800218c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800218e:	2300      	movs	r3, #0
 8002190:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002192:	e147      	b.n	8002424 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	2101      	movs	r1, #1
 800219a:	697a      	ldr	r2, [r7, #20]
 800219c:	4091      	lsls	r1, r2
 800219e:	000a      	movs	r2, r1
 80021a0:	4013      	ands	r3, r2
 80021a2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d100      	bne.n	80021ac <HAL_GPIO_Init+0x28>
 80021aa:	e138      	b.n	800241e <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	2203      	movs	r2, #3
 80021b2:	4013      	ands	r3, r2
 80021b4:	2b01      	cmp	r3, #1
 80021b6:	d005      	beq.n	80021c4 <HAL_GPIO_Init+0x40>
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	2203      	movs	r2, #3
 80021be:	4013      	ands	r3, r2
 80021c0:	2b02      	cmp	r3, #2
 80021c2:	d130      	bne.n	8002226 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	689b      	ldr	r3, [r3, #8]
 80021c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	005b      	lsls	r3, r3, #1
 80021ce:	2203      	movs	r2, #3
 80021d0:	409a      	lsls	r2, r3
 80021d2:	0013      	movs	r3, r2
 80021d4:	43da      	mvns	r2, r3
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	4013      	ands	r3, r2
 80021da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	68da      	ldr	r2, [r3, #12]
 80021e0:	697b      	ldr	r3, [r7, #20]
 80021e2:	005b      	lsls	r3, r3, #1
 80021e4:	409a      	lsls	r2, r3
 80021e6:	0013      	movs	r3, r2
 80021e8:	693a      	ldr	r2, [r7, #16]
 80021ea:	4313      	orrs	r3, r2
 80021ec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	693a      	ldr	r2, [r7, #16]
 80021f2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80021fa:	2201      	movs	r2, #1
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	409a      	lsls	r2, r3
 8002200:	0013      	movs	r3, r2
 8002202:	43da      	mvns	r2, r3
 8002204:	693b      	ldr	r3, [r7, #16]
 8002206:	4013      	ands	r3, r2
 8002208:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	091b      	lsrs	r3, r3, #4
 8002210:	2201      	movs	r2, #1
 8002212:	401a      	ands	r2, r3
 8002214:	697b      	ldr	r3, [r7, #20]
 8002216:	409a      	lsls	r2, r3
 8002218:	0013      	movs	r3, r2
 800221a:	693a      	ldr	r2, [r7, #16]
 800221c:	4313      	orrs	r3, r2
 800221e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	693a      	ldr	r2, [r7, #16]
 8002224:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	2203      	movs	r2, #3
 800222c:	4013      	ands	r3, r2
 800222e:	2b03      	cmp	r3, #3
 8002230:	d017      	beq.n	8002262 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	68db      	ldr	r3, [r3, #12]
 8002236:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	005b      	lsls	r3, r3, #1
 800223c:	2203      	movs	r2, #3
 800223e:	409a      	lsls	r2, r3
 8002240:	0013      	movs	r3, r2
 8002242:	43da      	mvns	r2, r3
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	4013      	ands	r3, r2
 8002248:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	689a      	ldr	r2, [r3, #8]
 800224e:	697b      	ldr	r3, [r7, #20]
 8002250:	005b      	lsls	r3, r3, #1
 8002252:	409a      	lsls	r2, r3
 8002254:	0013      	movs	r3, r2
 8002256:	693a      	ldr	r2, [r7, #16]
 8002258:	4313      	orrs	r3, r2
 800225a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	693a      	ldr	r2, [r7, #16]
 8002260:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	2203      	movs	r2, #3
 8002268:	4013      	ands	r3, r2
 800226a:	2b02      	cmp	r3, #2
 800226c:	d123      	bne.n	80022b6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800226e:	697b      	ldr	r3, [r7, #20]
 8002270:	08da      	lsrs	r2, r3, #3
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	3208      	adds	r2, #8
 8002276:	0092      	lsls	r2, r2, #2
 8002278:	58d3      	ldr	r3, [r2, r3]
 800227a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	2207      	movs	r2, #7
 8002280:	4013      	ands	r3, r2
 8002282:	009b      	lsls	r3, r3, #2
 8002284:	220f      	movs	r2, #15
 8002286:	409a      	lsls	r2, r3
 8002288:	0013      	movs	r3, r2
 800228a:	43da      	mvns	r2, r3
 800228c:	693b      	ldr	r3, [r7, #16]
 800228e:	4013      	ands	r3, r2
 8002290:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	691a      	ldr	r2, [r3, #16]
 8002296:	697b      	ldr	r3, [r7, #20]
 8002298:	2107      	movs	r1, #7
 800229a:	400b      	ands	r3, r1
 800229c:	009b      	lsls	r3, r3, #2
 800229e:	409a      	lsls	r2, r3
 80022a0:	0013      	movs	r3, r2
 80022a2:	693a      	ldr	r2, [r7, #16]
 80022a4:	4313      	orrs	r3, r2
 80022a6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	08da      	lsrs	r2, r3, #3
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	3208      	adds	r2, #8
 80022b0:	0092      	lsls	r2, r2, #2
 80022b2:	6939      	ldr	r1, [r7, #16]
 80022b4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80022bc:	697b      	ldr	r3, [r7, #20]
 80022be:	005b      	lsls	r3, r3, #1
 80022c0:	2203      	movs	r2, #3
 80022c2:	409a      	lsls	r2, r3
 80022c4:	0013      	movs	r3, r2
 80022c6:	43da      	mvns	r2, r3
 80022c8:	693b      	ldr	r3, [r7, #16]
 80022ca:	4013      	ands	r3, r2
 80022cc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	2203      	movs	r2, #3
 80022d4:	401a      	ands	r2, r3
 80022d6:	697b      	ldr	r3, [r7, #20]
 80022d8:	005b      	lsls	r3, r3, #1
 80022da:	409a      	lsls	r2, r3
 80022dc:	0013      	movs	r3, r2
 80022de:	693a      	ldr	r2, [r7, #16]
 80022e0:	4313      	orrs	r3, r2
 80022e2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	693a      	ldr	r2, [r7, #16]
 80022e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	685a      	ldr	r2, [r3, #4]
 80022ee:	23c0      	movs	r3, #192	@ 0xc0
 80022f0:	029b      	lsls	r3, r3, #10
 80022f2:	4013      	ands	r3, r2
 80022f4:	d100      	bne.n	80022f8 <HAL_GPIO_Init+0x174>
 80022f6:	e092      	b.n	800241e <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80022f8:	4a50      	ldr	r2, [pc, #320]	@ (800243c <HAL_GPIO_Init+0x2b8>)
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	089b      	lsrs	r3, r3, #2
 80022fe:	3318      	adds	r3, #24
 8002300:	009b      	lsls	r3, r3, #2
 8002302:	589b      	ldr	r3, [r3, r2]
 8002304:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	2203      	movs	r2, #3
 800230a:	4013      	ands	r3, r2
 800230c:	00db      	lsls	r3, r3, #3
 800230e:	220f      	movs	r2, #15
 8002310:	409a      	lsls	r2, r3
 8002312:	0013      	movs	r3, r2
 8002314:	43da      	mvns	r2, r3
 8002316:	693b      	ldr	r3, [r7, #16]
 8002318:	4013      	ands	r3, r2
 800231a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800231c:	687a      	ldr	r2, [r7, #4]
 800231e:	23a0      	movs	r3, #160	@ 0xa0
 8002320:	05db      	lsls	r3, r3, #23
 8002322:	429a      	cmp	r2, r3
 8002324:	d013      	beq.n	800234e <HAL_GPIO_Init+0x1ca>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	4a45      	ldr	r2, [pc, #276]	@ (8002440 <HAL_GPIO_Init+0x2bc>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d00d      	beq.n	800234a <HAL_GPIO_Init+0x1c6>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	4a44      	ldr	r2, [pc, #272]	@ (8002444 <HAL_GPIO_Init+0x2c0>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d007      	beq.n	8002346 <HAL_GPIO_Init+0x1c2>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	4a43      	ldr	r2, [pc, #268]	@ (8002448 <HAL_GPIO_Init+0x2c4>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d101      	bne.n	8002342 <HAL_GPIO_Init+0x1be>
 800233e:	2303      	movs	r3, #3
 8002340:	e006      	b.n	8002350 <HAL_GPIO_Init+0x1cc>
 8002342:	2305      	movs	r3, #5
 8002344:	e004      	b.n	8002350 <HAL_GPIO_Init+0x1cc>
 8002346:	2302      	movs	r3, #2
 8002348:	e002      	b.n	8002350 <HAL_GPIO_Init+0x1cc>
 800234a:	2301      	movs	r3, #1
 800234c:	e000      	b.n	8002350 <HAL_GPIO_Init+0x1cc>
 800234e:	2300      	movs	r3, #0
 8002350:	697a      	ldr	r2, [r7, #20]
 8002352:	2103      	movs	r1, #3
 8002354:	400a      	ands	r2, r1
 8002356:	00d2      	lsls	r2, r2, #3
 8002358:	4093      	lsls	r3, r2
 800235a:	693a      	ldr	r2, [r7, #16]
 800235c:	4313      	orrs	r3, r2
 800235e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8002360:	4936      	ldr	r1, [pc, #216]	@ (800243c <HAL_GPIO_Init+0x2b8>)
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	089b      	lsrs	r3, r3, #2
 8002366:	3318      	adds	r3, #24
 8002368:	009b      	lsls	r3, r3, #2
 800236a:	693a      	ldr	r2, [r7, #16]
 800236c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800236e:	4b33      	ldr	r3, [pc, #204]	@ (800243c <HAL_GPIO_Init+0x2b8>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	43da      	mvns	r2, r3
 8002378:	693b      	ldr	r3, [r7, #16]
 800237a:	4013      	ands	r3, r2
 800237c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	685a      	ldr	r2, [r3, #4]
 8002382:	2380      	movs	r3, #128	@ 0x80
 8002384:	035b      	lsls	r3, r3, #13
 8002386:	4013      	ands	r3, r2
 8002388:	d003      	beq.n	8002392 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 800238a:	693a      	ldr	r2, [r7, #16]
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	4313      	orrs	r3, r2
 8002390:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002392:	4b2a      	ldr	r3, [pc, #168]	@ (800243c <HAL_GPIO_Init+0x2b8>)
 8002394:	693a      	ldr	r2, [r7, #16]
 8002396:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8002398:	4b28      	ldr	r3, [pc, #160]	@ (800243c <HAL_GPIO_Init+0x2b8>)
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	43da      	mvns	r2, r3
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	4013      	ands	r3, r2
 80023a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	685a      	ldr	r2, [r3, #4]
 80023ac:	2380      	movs	r3, #128	@ 0x80
 80023ae:	039b      	lsls	r3, r3, #14
 80023b0:	4013      	ands	r3, r2
 80023b2:	d003      	beq.n	80023bc <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80023b4:	693a      	ldr	r2, [r7, #16]
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	4313      	orrs	r3, r2
 80023ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80023bc:	4b1f      	ldr	r3, [pc, #124]	@ (800243c <HAL_GPIO_Init+0x2b8>)
 80023be:	693a      	ldr	r2, [r7, #16]
 80023c0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80023c2:	4a1e      	ldr	r2, [pc, #120]	@ (800243c <HAL_GPIO_Init+0x2b8>)
 80023c4:	2384      	movs	r3, #132	@ 0x84
 80023c6:	58d3      	ldr	r3, [r2, r3]
 80023c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	43da      	mvns	r2, r3
 80023ce:	693b      	ldr	r3, [r7, #16]
 80023d0:	4013      	ands	r3, r2
 80023d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	685a      	ldr	r2, [r3, #4]
 80023d8:	2380      	movs	r3, #128	@ 0x80
 80023da:	029b      	lsls	r3, r3, #10
 80023dc:	4013      	ands	r3, r2
 80023de:	d003      	beq.n	80023e8 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80023e0:	693a      	ldr	r2, [r7, #16]
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	4313      	orrs	r3, r2
 80023e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80023e8:	4914      	ldr	r1, [pc, #80]	@ (800243c <HAL_GPIO_Init+0x2b8>)
 80023ea:	2284      	movs	r2, #132	@ 0x84
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80023f0:	4a12      	ldr	r2, [pc, #72]	@ (800243c <HAL_GPIO_Init+0x2b8>)
 80023f2:	2380      	movs	r3, #128	@ 0x80
 80023f4:	58d3      	ldr	r3, [r2, r3]
 80023f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	43da      	mvns	r2, r3
 80023fc:	693b      	ldr	r3, [r7, #16]
 80023fe:	4013      	ands	r3, r2
 8002400:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	685a      	ldr	r2, [r3, #4]
 8002406:	2380      	movs	r3, #128	@ 0x80
 8002408:	025b      	lsls	r3, r3, #9
 800240a:	4013      	ands	r3, r2
 800240c:	d003      	beq.n	8002416 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800240e:	693a      	ldr	r2, [r7, #16]
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	4313      	orrs	r3, r2
 8002414:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002416:	4909      	ldr	r1, [pc, #36]	@ (800243c <HAL_GPIO_Init+0x2b8>)
 8002418:	2280      	movs	r2, #128	@ 0x80
 800241a:	693b      	ldr	r3, [r7, #16]
 800241c:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800241e:	697b      	ldr	r3, [r7, #20]
 8002420:	3301      	adds	r3, #1
 8002422:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	681a      	ldr	r2, [r3, #0]
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	40da      	lsrs	r2, r3
 800242c:	1e13      	subs	r3, r2, #0
 800242e:	d000      	beq.n	8002432 <HAL_GPIO_Init+0x2ae>
 8002430:	e6b0      	b.n	8002194 <HAL_GPIO_Init+0x10>
  }
}
 8002432:	46c0      	nop			@ (mov r8, r8)
 8002434:	46c0      	nop			@ (mov r8, r8)
 8002436:	46bd      	mov	sp, r7
 8002438:	b006      	add	sp, #24
 800243a:	bd80      	pop	{r7, pc}
 800243c:	40021800 	.word	0x40021800
 8002440:	50000400 	.word	0x50000400
 8002444:	50000800 	.word	0x50000800
 8002448:	50000c00 	.word	0x50000c00

0800244c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b082      	sub	sp, #8
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
 8002454:	0008      	movs	r0, r1
 8002456:	0011      	movs	r1, r2
 8002458:	1cbb      	adds	r3, r7, #2
 800245a:	1c02      	adds	r2, r0, #0
 800245c:	801a      	strh	r2, [r3, #0]
 800245e:	1c7b      	adds	r3, r7, #1
 8002460:	1c0a      	adds	r2, r1, #0
 8002462:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002464:	1c7b      	adds	r3, r7, #1
 8002466:	781b      	ldrb	r3, [r3, #0]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d004      	beq.n	8002476 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800246c:	1cbb      	adds	r3, r7, #2
 800246e:	881a      	ldrh	r2, [r3, #0]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002474:	e003      	b.n	800247e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002476:	1cbb      	adds	r3, r7, #2
 8002478:	881a      	ldrh	r2, [r3, #0]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800247e:	46c0      	nop			@ (mov r8, r8)
 8002480:	46bd      	mov	sp, r7
 8002482:	b002      	add	sp, #8
 8002484:	bd80      	pop	{r7, pc}

08002486 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002486:	b580      	push	{r7, lr}
 8002488:	b084      	sub	sp, #16
 800248a:	af00      	add	r7, sp, #0
 800248c:	6078      	str	r0, [r7, #4]
 800248e:	000a      	movs	r2, r1
 8002490:	1cbb      	adds	r3, r7, #2
 8002492:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	695b      	ldr	r3, [r3, #20]
 8002498:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800249a:	1cbb      	adds	r3, r7, #2
 800249c:	881b      	ldrh	r3, [r3, #0]
 800249e:	68fa      	ldr	r2, [r7, #12]
 80024a0:	4013      	ands	r3, r2
 80024a2:	041a      	lsls	r2, r3, #16
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	43db      	mvns	r3, r3
 80024a8:	1cb9      	adds	r1, r7, #2
 80024aa:	8809      	ldrh	r1, [r1, #0]
 80024ac:	400b      	ands	r3, r1
 80024ae:	431a      	orrs	r2, r3
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	619a      	str	r2, [r3, #24]
}
 80024b4:	46c0      	nop			@ (mov r8, r8)
 80024b6:	46bd      	mov	sp, r7
 80024b8:	b004      	add	sp, #16
 80024ba:	bd80      	pop	{r7, pc}

080024bc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b082      	sub	sp, #8
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	0002      	movs	r2, r0
 80024c4:	1dbb      	adds	r3, r7, #6
 80024c6:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 80024c8:	4b10      	ldr	r3, [pc, #64]	@ (800250c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80024ca:	68db      	ldr	r3, [r3, #12]
 80024cc:	1dba      	adds	r2, r7, #6
 80024ce:	8812      	ldrh	r2, [r2, #0]
 80024d0:	4013      	ands	r3, r2
 80024d2:	d008      	beq.n	80024e6 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 80024d4:	4b0d      	ldr	r3, [pc, #52]	@ (800250c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80024d6:	1dba      	adds	r2, r7, #6
 80024d8:	8812      	ldrh	r2, [r2, #0]
 80024da:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 80024dc:	1dbb      	adds	r3, r7, #6
 80024de:	881b      	ldrh	r3, [r3, #0]
 80024e0:	0018      	movs	r0, r3
 80024e2:	f000 f815 	bl	8002510 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 80024e6:	4b09      	ldr	r3, [pc, #36]	@ (800250c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80024e8:	691b      	ldr	r3, [r3, #16]
 80024ea:	1dba      	adds	r2, r7, #6
 80024ec:	8812      	ldrh	r2, [r2, #0]
 80024ee:	4013      	ands	r3, r2
 80024f0:	d008      	beq.n	8002504 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 80024f2:	4b06      	ldr	r3, [pc, #24]	@ (800250c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80024f4:	1dba      	adds	r2, r7, #6
 80024f6:	8812      	ldrh	r2, [r2, #0]
 80024f8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 80024fa:	1dbb      	adds	r3, r7, #6
 80024fc:	881b      	ldrh	r3, [r3, #0]
 80024fe:	0018      	movs	r0, r3
 8002500:	f000 f810 	bl	8002524 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8002504:	46c0      	nop			@ (mov r8, r8)
 8002506:	46bd      	mov	sp, r7
 8002508:	b002      	add	sp, #8
 800250a:	bd80      	pop	{r7, pc}
 800250c:	40021800 	.word	0x40021800

08002510 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b082      	sub	sp, #8
 8002514:	af00      	add	r7, sp, #0
 8002516:	0002      	movs	r2, r0
 8002518:	1dbb      	adds	r3, r7, #6
 800251a:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 800251c:	46c0      	nop			@ (mov r8, r8)
 800251e:	46bd      	mov	sp, r7
 8002520:	b002      	add	sp, #8
 8002522:	bd80      	pop	{r7, pc}

08002524 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b082      	sub	sp, #8
 8002528:	af00      	add	r7, sp, #0
 800252a:	0002      	movs	r2, r0
 800252c:	1dbb      	adds	r3, r7, #6
 800252e:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8002530:	46c0      	nop			@ (mov r8, r8)
 8002532:	46bd      	mov	sp, r7
 8002534:	b002      	add	sp, #8
 8002536:	bd80      	pop	{r7, pc}

08002538 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b082      	sub	sp, #8
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d101      	bne.n	800254a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	e08f      	b.n	800266a <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2241      	movs	r2, #65	@ 0x41
 800254e:	5c9b      	ldrb	r3, [r3, r2]
 8002550:	b2db      	uxtb	r3, r3
 8002552:	2b00      	cmp	r3, #0
 8002554:	d107      	bne.n	8002566 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2240      	movs	r2, #64	@ 0x40
 800255a:	2100      	movs	r1, #0
 800255c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	0018      	movs	r0, r3
 8002562:	f7fe f9b3 	bl	80008cc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2241      	movs	r2, #65	@ 0x41
 800256a:	2124      	movs	r1, #36	@ 0x24
 800256c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	681a      	ldr	r2, [r3, #0]
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	2101      	movs	r1, #1
 800257a:	438a      	bics	r2, r1
 800257c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	685a      	ldr	r2, [r3, #4]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	493b      	ldr	r1, [pc, #236]	@ (8002674 <HAL_I2C_Init+0x13c>)
 8002588:	400a      	ands	r2, r1
 800258a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	689a      	ldr	r2, [r3, #8]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4938      	ldr	r1, [pc, #224]	@ (8002678 <HAL_I2C_Init+0x140>)
 8002598:	400a      	ands	r2, r1
 800259a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	68db      	ldr	r3, [r3, #12]
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	d108      	bne.n	80025b6 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	689a      	ldr	r2, [r3, #8]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	2180      	movs	r1, #128	@ 0x80
 80025ae:	0209      	lsls	r1, r1, #8
 80025b0:	430a      	orrs	r2, r1
 80025b2:	609a      	str	r2, [r3, #8]
 80025b4:	e007      	b.n	80025c6 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	689a      	ldr	r2, [r3, #8]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	2184      	movs	r1, #132	@ 0x84
 80025c0:	0209      	lsls	r1, r1, #8
 80025c2:	430a      	orrs	r2, r1
 80025c4:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	68db      	ldr	r3, [r3, #12]
 80025ca:	2b02      	cmp	r3, #2
 80025cc:	d109      	bne.n	80025e2 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	685a      	ldr	r2, [r3, #4]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	2180      	movs	r1, #128	@ 0x80
 80025da:	0109      	lsls	r1, r1, #4
 80025dc:	430a      	orrs	r2, r1
 80025de:	605a      	str	r2, [r3, #4]
 80025e0:	e007      	b.n	80025f2 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	685a      	ldr	r2, [r3, #4]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4923      	ldr	r1, [pc, #140]	@ (800267c <HAL_I2C_Init+0x144>)
 80025ee:	400a      	ands	r2, r1
 80025f0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	685a      	ldr	r2, [r3, #4]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4920      	ldr	r1, [pc, #128]	@ (8002680 <HAL_I2C_Init+0x148>)
 80025fe:	430a      	orrs	r2, r1
 8002600:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	68da      	ldr	r2, [r3, #12]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	491a      	ldr	r1, [pc, #104]	@ (8002678 <HAL_I2C_Init+0x140>)
 800260e:	400a      	ands	r2, r1
 8002610:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	691a      	ldr	r2, [r3, #16]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	695b      	ldr	r3, [r3, #20]
 800261a:	431a      	orrs	r2, r3
 800261c:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	699b      	ldr	r3, [r3, #24]
 8002622:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	430a      	orrs	r2, r1
 800262a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	69d9      	ldr	r1, [r3, #28]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6a1a      	ldr	r2, [r3, #32]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	430a      	orrs	r2, r1
 800263a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	681a      	ldr	r2, [r3, #0]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	2101      	movs	r1, #1
 8002648:	430a      	orrs	r2, r1
 800264a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2200      	movs	r2, #0
 8002650:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2241      	movs	r2, #65	@ 0x41
 8002656:	2120      	movs	r1, #32
 8002658:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2200      	movs	r2, #0
 800265e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2242      	movs	r2, #66	@ 0x42
 8002664:	2100      	movs	r1, #0
 8002666:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002668:	2300      	movs	r3, #0
}
 800266a:	0018      	movs	r0, r3
 800266c:	46bd      	mov	sp, r7
 800266e:	b002      	add	sp, #8
 8002670:	bd80      	pop	{r7, pc}
 8002672:	46c0      	nop			@ (mov r8, r8)
 8002674:	f0ffffff 	.word	0xf0ffffff
 8002678:	ffff7fff 	.word	0xffff7fff
 800267c:	fffff7ff 	.word	0xfffff7ff
 8002680:	02008000 	.word	0x02008000

08002684 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b082      	sub	sp, #8
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
 800268c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2241      	movs	r2, #65	@ 0x41
 8002692:	5c9b      	ldrb	r3, [r3, r2]
 8002694:	b2db      	uxtb	r3, r3
 8002696:	2b20      	cmp	r3, #32
 8002698:	d138      	bne.n	800270c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2240      	movs	r2, #64	@ 0x40
 800269e:	5c9b      	ldrb	r3, [r3, r2]
 80026a0:	2b01      	cmp	r3, #1
 80026a2:	d101      	bne.n	80026a8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80026a4:	2302      	movs	r3, #2
 80026a6:	e032      	b.n	800270e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2240      	movs	r2, #64	@ 0x40
 80026ac:	2101      	movs	r1, #1
 80026ae:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2241      	movs	r2, #65	@ 0x41
 80026b4:	2124      	movs	r1, #36	@ 0x24
 80026b6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	681a      	ldr	r2, [r3, #0]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	2101      	movs	r1, #1
 80026c4:	438a      	bics	r2, r1
 80026c6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	681a      	ldr	r2, [r3, #0]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4911      	ldr	r1, [pc, #68]	@ (8002718 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80026d4:	400a      	ands	r2, r1
 80026d6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	6819      	ldr	r1, [r3, #0]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	683a      	ldr	r2, [r7, #0]
 80026e4:	430a      	orrs	r2, r1
 80026e6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	681a      	ldr	r2, [r3, #0]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	2101      	movs	r1, #1
 80026f4:	430a      	orrs	r2, r1
 80026f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2241      	movs	r2, #65	@ 0x41
 80026fc:	2120      	movs	r1, #32
 80026fe:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2240      	movs	r2, #64	@ 0x40
 8002704:	2100      	movs	r1, #0
 8002706:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002708:	2300      	movs	r3, #0
 800270a:	e000      	b.n	800270e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800270c:	2302      	movs	r3, #2
  }
}
 800270e:	0018      	movs	r0, r3
 8002710:	46bd      	mov	sp, r7
 8002712:	b002      	add	sp, #8
 8002714:	bd80      	pop	{r7, pc}
 8002716:	46c0      	nop			@ (mov r8, r8)
 8002718:	ffffefff 	.word	0xffffefff

0800271c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b084      	sub	sp, #16
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
 8002724:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2241      	movs	r2, #65	@ 0x41
 800272a:	5c9b      	ldrb	r3, [r3, r2]
 800272c:	b2db      	uxtb	r3, r3
 800272e:	2b20      	cmp	r3, #32
 8002730:	d139      	bne.n	80027a6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2240      	movs	r2, #64	@ 0x40
 8002736:	5c9b      	ldrb	r3, [r3, r2]
 8002738:	2b01      	cmp	r3, #1
 800273a:	d101      	bne.n	8002740 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800273c:	2302      	movs	r3, #2
 800273e:	e033      	b.n	80027a8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2240      	movs	r2, #64	@ 0x40
 8002744:	2101      	movs	r1, #1
 8002746:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2241      	movs	r2, #65	@ 0x41
 800274c:	2124      	movs	r1, #36	@ 0x24
 800274e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	681a      	ldr	r2, [r3, #0]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	2101      	movs	r1, #1
 800275c:	438a      	bics	r2, r1
 800275e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	4a11      	ldr	r2, [pc, #68]	@ (80027b0 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 800276c:	4013      	ands	r3, r2
 800276e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	021b      	lsls	r3, r3, #8
 8002774:	68fa      	ldr	r2, [r7, #12]
 8002776:	4313      	orrs	r3, r2
 8002778:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	68fa      	ldr	r2, [r7, #12]
 8002780:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	681a      	ldr	r2, [r3, #0]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	2101      	movs	r1, #1
 800278e:	430a      	orrs	r2, r1
 8002790:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2241      	movs	r2, #65	@ 0x41
 8002796:	2120      	movs	r1, #32
 8002798:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2240      	movs	r2, #64	@ 0x40
 800279e:	2100      	movs	r1, #0
 80027a0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80027a2:	2300      	movs	r3, #0
 80027a4:	e000      	b.n	80027a8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80027a6:	2302      	movs	r3, #2
  }
}
 80027a8:	0018      	movs	r0, r3
 80027aa:	46bd      	mov	sp, r7
 80027ac:	b004      	add	sp, #16
 80027ae:	bd80      	pop	{r7, pc}
 80027b0:	fffff0ff 	.word	0xfffff0ff

080027b4 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b084      	sub	sp, #16
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d101      	bne.n	80027c6 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 80027c2:	2301      	movs	r3, #1
 80027c4:	e03d      	b.n	8002842 <HAL_IWDG_Init+0x8e>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a20      	ldr	r2, [pc, #128]	@ (800284c <HAL_IWDG_Init+0x98>)
 80027cc:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a1f      	ldr	r2, [pc, #124]	@ (8002850 <HAL_IWDG_Init+0x9c>)
 80027d4:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	687a      	ldr	r2, [r7, #4]
 80027dc:	6852      	ldr	r2, [r2, #4]
 80027de:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	687a      	ldr	r2, [r7, #4]
 80027e6:	6892      	ldr	r2, [r2, #8]
 80027e8:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 80027ea:	f7fe fde1 	bl	80013b0 <HAL_GetTick>
 80027ee:	0003      	movs	r3, r0
 80027f0:	60fb      	str	r3, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80027f2:	e00e      	b.n	8002812 <HAL_IWDG_Init+0x5e>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 80027f4:	f7fe fddc 	bl	80013b0 <HAL_GetTick>
 80027f8:	0002      	movs	r2, r0
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	1ad3      	subs	r3, r2, r3
 80027fe:	2b31      	cmp	r3, #49	@ 0x31
 8002800:	d907      	bls.n	8002812 <HAL_IWDG_Init+0x5e>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	68db      	ldr	r3, [r3, #12]
 8002808:	2207      	movs	r2, #7
 800280a:	4013      	ands	r3, r2
 800280c:	d001      	beq.n	8002812 <HAL_IWDG_Init+0x5e>
      {
        return HAL_TIMEOUT;
 800280e:	2303      	movs	r3, #3
 8002810:	e017      	b.n	8002842 <HAL_IWDG_Init+0x8e>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	68db      	ldr	r3, [r3, #12]
 8002818:	2207      	movs	r2, #7
 800281a:	4013      	ands	r3, r2
 800281c:	d1ea      	bne.n	80027f4 <HAL_IWDG_Init+0x40>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	691a      	ldr	r2, [r3, #16]
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	68db      	ldr	r3, [r3, #12]
 8002828:	429a      	cmp	r2, r3
 800282a:	d005      	beq.n	8002838 <HAL_IWDG_Init+0x84>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	687a      	ldr	r2, [r7, #4]
 8002832:	68d2      	ldr	r2, [r2, #12]
 8002834:	611a      	str	r2, [r3, #16]
 8002836:	e003      	b.n	8002840 <HAL_IWDG_Init+0x8c>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a05      	ldr	r2, [pc, #20]	@ (8002854 <HAL_IWDG_Init+0xa0>)
 800283e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002840:	2300      	movs	r3, #0
}
 8002842:	0018      	movs	r0, r3
 8002844:	46bd      	mov	sp, r7
 8002846:	b004      	add	sp, #16
 8002848:	bd80      	pop	{r7, pc}
 800284a:	46c0      	nop			@ (mov r8, r8)
 800284c:	0000cccc 	.word	0x0000cccc
 8002850:	00005555 	.word	0x00005555
 8002854:	0000aaaa 	.word	0x0000aaaa

08002858 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b082      	sub	sp, #8
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a03      	ldr	r2, [pc, #12]	@ (8002874 <HAL_IWDG_Refresh+0x1c>)
 8002866:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002868:	2300      	movs	r3, #0
}
 800286a:	0018      	movs	r0, r3
 800286c:	46bd      	mov	sp, r7
 800286e:	b002      	add	sp, #8
 8002870:	bd80      	pop	{r7, pc}
 8002872:	46c0      	nop			@ (mov r8, r8)
 8002874:	0000aaaa 	.word	0x0000aaaa

08002878 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b084      	sub	sp, #16
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002880:	4b19      	ldr	r3, [pc, #100]	@ (80028e8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a19      	ldr	r2, [pc, #100]	@ (80028ec <HAL_PWREx_ControlVoltageScaling+0x74>)
 8002886:	4013      	ands	r3, r2
 8002888:	0019      	movs	r1, r3
 800288a:	4b17      	ldr	r3, [pc, #92]	@ (80028e8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800288c:	687a      	ldr	r2, [r7, #4]
 800288e:	430a      	orrs	r2, r1
 8002890:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002892:	687a      	ldr	r2, [r7, #4]
 8002894:	2380      	movs	r3, #128	@ 0x80
 8002896:	009b      	lsls	r3, r3, #2
 8002898:	429a      	cmp	r2, r3
 800289a:	d11f      	bne.n	80028dc <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 800289c:	4b14      	ldr	r3, [pc, #80]	@ (80028f0 <HAL_PWREx_ControlVoltageScaling+0x78>)
 800289e:	681a      	ldr	r2, [r3, #0]
 80028a0:	0013      	movs	r3, r2
 80028a2:	005b      	lsls	r3, r3, #1
 80028a4:	189b      	adds	r3, r3, r2
 80028a6:	005b      	lsls	r3, r3, #1
 80028a8:	4912      	ldr	r1, [pc, #72]	@ (80028f4 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80028aa:	0018      	movs	r0, r3
 80028ac:	f7fd fc84 	bl	80001b8 <__udivsi3>
 80028b0:	0003      	movs	r3, r0
 80028b2:	3301      	adds	r3, #1
 80028b4:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80028b6:	e008      	b.n	80028ca <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d003      	beq.n	80028c6 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	3b01      	subs	r3, #1
 80028c2:	60fb      	str	r3, [r7, #12]
 80028c4:	e001      	b.n	80028ca <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80028c6:	2303      	movs	r3, #3
 80028c8:	e009      	b.n	80028de <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80028ca:	4b07      	ldr	r3, [pc, #28]	@ (80028e8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80028cc:	695a      	ldr	r2, [r3, #20]
 80028ce:	2380      	movs	r3, #128	@ 0x80
 80028d0:	00db      	lsls	r3, r3, #3
 80028d2:	401a      	ands	r2, r3
 80028d4:	2380      	movs	r3, #128	@ 0x80
 80028d6:	00db      	lsls	r3, r3, #3
 80028d8:	429a      	cmp	r2, r3
 80028da:	d0ed      	beq.n	80028b8 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80028dc:	2300      	movs	r3, #0
}
 80028de:	0018      	movs	r0, r3
 80028e0:	46bd      	mov	sp, r7
 80028e2:	b004      	add	sp, #16
 80028e4:	bd80      	pop	{r7, pc}
 80028e6:	46c0      	nop			@ (mov r8, r8)
 80028e8:	40007000 	.word	0x40007000
 80028ec:	fffff9ff 	.word	0xfffff9ff
 80028f0:	20000000 	.word	0x20000000
 80028f4:	000f4240 	.word	0x000f4240

080028f8 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80028fc:	4b03      	ldr	r3, [pc, #12]	@ (800290c <LL_RCC_GetAPB1Prescaler+0x14>)
 80028fe:	689a      	ldr	r2, [r3, #8]
 8002900:	23e0      	movs	r3, #224	@ 0xe0
 8002902:	01db      	lsls	r3, r3, #7
 8002904:	4013      	ands	r3, r2
}
 8002906:	0018      	movs	r0, r3
 8002908:	46bd      	mov	sp, r7
 800290a:	bd80      	pop	{r7, pc}
 800290c:	40021000 	.word	0x40021000

08002910 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b088      	sub	sp, #32
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d101      	bne.n	8002922 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800291e:	2301      	movs	r3, #1
 8002920:	e2f3      	b.n	8002f0a <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	2201      	movs	r2, #1
 8002928:	4013      	ands	r3, r2
 800292a:	d100      	bne.n	800292e <HAL_RCC_OscConfig+0x1e>
 800292c:	e07c      	b.n	8002a28 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800292e:	4bc3      	ldr	r3, [pc, #780]	@ (8002c3c <HAL_RCC_OscConfig+0x32c>)
 8002930:	689b      	ldr	r3, [r3, #8]
 8002932:	2238      	movs	r2, #56	@ 0x38
 8002934:	4013      	ands	r3, r2
 8002936:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002938:	4bc0      	ldr	r3, [pc, #768]	@ (8002c3c <HAL_RCC_OscConfig+0x32c>)
 800293a:	68db      	ldr	r3, [r3, #12]
 800293c:	2203      	movs	r2, #3
 800293e:	4013      	ands	r3, r2
 8002940:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8002942:	69bb      	ldr	r3, [r7, #24]
 8002944:	2b10      	cmp	r3, #16
 8002946:	d102      	bne.n	800294e <HAL_RCC_OscConfig+0x3e>
 8002948:	697b      	ldr	r3, [r7, #20]
 800294a:	2b03      	cmp	r3, #3
 800294c:	d002      	beq.n	8002954 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800294e:	69bb      	ldr	r3, [r7, #24]
 8002950:	2b08      	cmp	r3, #8
 8002952:	d10b      	bne.n	800296c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002954:	4bb9      	ldr	r3, [pc, #740]	@ (8002c3c <HAL_RCC_OscConfig+0x32c>)
 8002956:	681a      	ldr	r2, [r3, #0]
 8002958:	2380      	movs	r3, #128	@ 0x80
 800295a:	029b      	lsls	r3, r3, #10
 800295c:	4013      	ands	r3, r2
 800295e:	d062      	beq.n	8002a26 <HAL_RCC_OscConfig+0x116>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d15e      	bne.n	8002a26 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8002968:	2301      	movs	r3, #1
 800296a:	e2ce      	b.n	8002f0a <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	685a      	ldr	r2, [r3, #4]
 8002970:	2380      	movs	r3, #128	@ 0x80
 8002972:	025b      	lsls	r3, r3, #9
 8002974:	429a      	cmp	r2, r3
 8002976:	d107      	bne.n	8002988 <HAL_RCC_OscConfig+0x78>
 8002978:	4bb0      	ldr	r3, [pc, #704]	@ (8002c3c <HAL_RCC_OscConfig+0x32c>)
 800297a:	681a      	ldr	r2, [r3, #0]
 800297c:	4baf      	ldr	r3, [pc, #700]	@ (8002c3c <HAL_RCC_OscConfig+0x32c>)
 800297e:	2180      	movs	r1, #128	@ 0x80
 8002980:	0249      	lsls	r1, r1, #9
 8002982:	430a      	orrs	r2, r1
 8002984:	601a      	str	r2, [r3, #0]
 8002986:	e020      	b.n	80029ca <HAL_RCC_OscConfig+0xba>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	685a      	ldr	r2, [r3, #4]
 800298c:	23a0      	movs	r3, #160	@ 0xa0
 800298e:	02db      	lsls	r3, r3, #11
 8002990:	429a      	cmp	r2, r3
 8002992:	d10e      	bne.n	80029b2 <HAL_RCC_OscConfig+0xa2>
 8002994:	4ba9      	ldr	r3, [pc, #676]	@ (8002c3c <HAL_RCC_OscConfig+0x32c>)
 8002996:	681a      	ldr	r2, [r3, #0]
 8002998:	4ba8      	ldr	r3, [pc, #672]	@ (8002c3c <HAL_RCC_OscConfig+0x32c>)
 800299a:	2180      	movs	r1, #128	@ 0x80
 800299c:	02c9      	lsls	r1, r1, #11
 800299e:	430a      	orrs	r2, r1
 80029a0:	601a      	str	r2, [r3, #0]
 80029a2:	4ba6      	ldr	r3, [pc, #664]	@ (8002c3c <HAL_RCC_OscConfig+0x32c>)
 80029a4:	681a      	ldr	r2, [r3, #0]
 80029a6:	4ba5      	ldr	r3, [pc, #660]	@ (8002c3c <HAL_RCC_OscConfig+0x32c>)
 80029a8:	2180      	movs	r1, #128	@ 0x80
 80029aa:	0249      	lsls	r1, r1, #9
 80029ac:	430a      	orrs	r2, r1
 80029ae:	601a      	str	r2, [r3, #0]
 80029b0:	e00b      	b.n	80029ca <HAL_RCC_OscConfig+0xba>
 80029b2:	4ba2      	ldr	r3, [pc, #648]	@ (8002c3c <HAL_RCC_OscConfig+0x32c>)
 80029b4:	681a      	ldr	r2, [r3, #0]
 80029b6:	4ba1      	ldr	r3, [pc, #644]	@ (8002c3c <HAL_RCC_OscConfig+0x32c>)
 80029b8:	49a1      	ldr	r1, [pc, #644]	@ (8002c40 <HAL_RCC_OscConfig+0x330>)
 80029ba:	400a      	ands	r2, r1
 80029bc:	601a      	str	r2, [r3, #0]
 80029be:	4b9f      	ldr	r3, [pc, #636]	@ (8002c3c <HAL_RCC_OscConfig+0x32c>)
 80029c0:	681a      	ldr	r2, [r3, #0]
 80029c2:	4b9e      	ldr	r3, [pc, #632]	@ (8002c3c <HAL_RCC_OscConfig+0x32c>)
 80029c4:	499f      	ldr	r1, [pc, #636]	@ (8002c44 <HAL_RCC_OscConfig+0x334>)
 80029c6:	400a      	ands	r2, r1
 80029c8:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d014      	beq.n	80029fc <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029d2:	f7fe fced 	bl	80013b0 <HAL_GetTick>
 80029d6:	0003      	movs	r3, r0
 80029d8:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80029da:	e008      	b.n	80029ee <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029dc:	f7fe fce8 	bl	80013b0 <HAL_GetTick>
 80029e0:	0002      	movs	r2, r0
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	1ad3      	subs	r3, r2, r3
 80029e6:	2b64      	cmp	r3, #100	@ 0x64
 80029e8:	d901      	bls.n	80029ee <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80029ea:	2303      	movs	r3, #3
 80029ec:	e28d      	b.n	8002f0a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80029ee:	4b93      	ldr	r3, [pc, #588]	@ (8002c3c <HAL_RCC_OscConfig+0x32c>)
 80029f0:	681a      	ldr	r2, [r3, #0]
 80029f2:	2380      	movs	r3, #128	@ 0x80
 80029f4:	029b      	lsls	r3, r3, #10
 80029f6:	4013      	ands	r3, r2
 80029f8:	d0f0      	beq.n	80029dc <HAL_RCC_OscConfig+0xcc>
 80029fa:	e015      	b.n	8002a28 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029fc:	f7fe fcd8 	bl	80013b0 <HAL_GetTick>
 8002a00:	0003      	movs	r3, r0
 8002a02:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002a04:	e008      	b.n	8002a18 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a06:	f7fe fcd3 	bl	80013b0 <HAL_GetTick>
 8002a0a:	0002      	movs	r2, r0
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	1ad3      	subs	r3, r2, r3
 8002a10:	2b64      	cmp	r3, #100	@ 0x64
 8002a12:	d901      	bls.n	8002a18 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002a14:	2303      	movs	r3, #3
 8002a16:	e278      	b.n	8002f0a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002a18:	4b88      	ldr	r3, [pc, #544]	@ (8002c3c <HAL_RCC_OscConfig+0x32c>)
 8002a1a:	681a      	ldr	r2, [r3, #0]
 8002a1c:	2380      	movs	r3, #128	@ 0x80
 8002a1e:	029b      	lsls	r3, r3, #10
 8002a20:	4013      	ands	r3, r2
 8002a22:	d1f0      	bne.n	8002a06 <HAL_RCC_OscConfig+0xf6>
 8002a24:	e000      	b.n	8002a28 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a26:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	2202      	movs	r2, #2
 8002a2e:	4013      	ands	r3, r2
 8002a30:	d100      	bne.n	8002a34 <HAL_RCC_OscConfig+0x124>
 8002a32:	e099      	b.n	8002b68 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a34:	4b81      	ldr	r3, [pc, #516]	@ (8002c3c <HAL_RCC_OscConfig+0x32c>)
 8002a36:	689b      	ldr	r3, [r3, #8]
 8002a38:	2238      	movs	r2, #56	@ 0x38
 8002a3a:	4013      	ands	r3, r2
 8002a3c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a3e:	4b7f      	ldr	r3, [pc, #508]	@ (8002c3c <HAL_RCC_OscConfig+0x32c>)
 8002a40:	68db      	ldr	r3, [r3, #12]
 8002a42:	2203      	movs	r2, #3
 8002a44:	4013      	ands	r3, r2
 8002a46:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8002a48:	69bb      	ldr	r3, [r7, #24]
 8002a4a:	2b10      	cmp	r3, #16
 8002a4c:	d102      	bne.n	8002a54 <HAL_RCC_OscConfig+0x144>
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	2b02      	cmp	r3, #2
 8002a52:	d002      	beq.n	8002a5a <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8002a54:	69bb      	ldr	r3, [r7, #24]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d135      	bne.n	8002ac6 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a5a:	4b78      	ldr	r3, [pc, #480]	@ (8002c3c <HAL_RCC_OscConfig+0x32c>)
 8002a5c:	681a      	ldr	r2, [r3, #0]
 8002a5e:	2380      	movs	r3, #128	@ 0x80
 8002a60:	00db      	lsls	r3, r3, #3
 8002a62:	4013      	ands	r3, r2
 8002a64:	d005      	beq.n	8002a72 <HAL_RCC_OscConfig+0x162>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	68db      	ldr	r3, [r3, #12]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d101      	bne.n	8002a72 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e24b      	b.n	8002f0a <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a72:	4b72      	ldr	r3, [pc, #456]	@ (8002c3c <HAL_RCC_OscConfig+0x32c>)
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	4a74      	ldr	r2, [pc, #464]	@ (8002c48 <HAL_RCC_OscConfig+0x338>)
 8002a78:	4013      	ands	r3, r2
 8002a7a:	0019      	movs	r1, r3
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	695b      	ldr	r3, [r3, #20]
 8002a80:	021a      	lsls	r2, r3, #8
 8002a82:	4b6e      	ldr	r3, [pc, #440]	@ (8002c3c <HAL_RCC_OscConfig+0x32c>)
 8002a84:	430a      	orrs	r2, r1
 8002a86:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a88:	69bb      	ldr	r3, [r7, #24]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d112      	bne.n	8002ab4 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002a8e:	4b6b      	ldr	r3, [pc, #428]	@ (8002c3c <HAL_RCC_OscConfig+0x32c>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a6e      	ldr	r2, [pc, #440]	@ (8002c4c <HAL_RCC_OscConfig+0x33c>)
 8002a94:	4013      	ands	r3, r2
 8002a96:	0019      	movs	r1, r3
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	691a      	ldr	r2, [r3, #16]
 8002a9c:	4b67      	ldr	r3, [pc, #412]	@ (8002c3c <HAL_RCC_OscConfig+0x32c>)
 8002a9e:	430a      	orrs	r2, r1
 8002aa0:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8002aa2:	4b66      	ldr	r3, [pc, #408]	@ (8002c3c <HAL_RCC_OscConfig+0x32c>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	0adb      	lsrs	r3, r3, #11
 8002aa8:	2207      	movs	r2, #7
 8002aaa:	4013      	ands	r3, r2
 8002aac:	4a68      	ldr	r2, [pc, #416]	@ (8002c50 <HAL_RCC_OscConfig+0x340>)
 8002aae:	40da      	lsrs	r2, r3
 8002ab0:	4b68      	ldr	r3, [pc, #416]	@ (8002c54 <HAL_RCC_OscConfig+0x344>)
 8002ab2:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002ab4:	4b68      	ldr	r3, [pc, #416]	@ (8002c58 <HAL_RCC_OscConfig+0x348>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	0018      	movs	r0, r3
 8002aba:	f7fe fc1d 	bl	80012f8 <HAL_InitTick>
 8002abe:	1e03      	subs	r3, r0, #0
 8002ac0:	d051      	beq.n	8002b66 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e221      	b.n	8002f0a <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	68db      	ldr	r3, [r3, #12]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d030      	beq.n	8002b30 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002ace:	4b5b      	ldr	r3, [pc, #364]	@ (8002c3c <HAL_RCC_OscConfig+0x32c>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a5e      	ldr	r2, [pc, #376]	@ (8002c4c <HAL_RCC_OscConfig+0x33c>)
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	0019      	movs	r1, r3
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	691a      	ldr	r2, [r3, #16]
 8002adc:	4b57      	ldr	r3, [pc, #348]	@ (8002c3c <HAL_RCC_OscConfig+0x32c>)
 8002ade:	430a      	orrs	r2, r1
 8002ae0:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8002ae2:	4b56      	ldr	r3, [pc, #344]	@ (8002c3c <HAL_RCC_OscConfig+0x32c>)
 8002ae4:	681a      	ldr	r2, [r3, #0]
 8002ae6:	4b55      	ldr	r3, [pc, #340]	@ (8002c3c <HAL_RCC_OscConfig+0x32c>)
 8002ae8:	2180      	movs	r1, #128	@ 0x80
 8002aea:	0049      	lsls	r1, r1, #1
 8002aec:	430a      	orrs	r2, r1
 8002aee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002af0:	f7fe fc5e 	bl	80013b0 <HAL_GetTick>
 8002af4:	0003      	movs	r3, r0
 8002af6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002af8:	e008      	b.n	8002b0c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002afa:	f7fe fc59 	bl	80013b0 <HAL_GetTick>
 8002afe:	0002      	movs	r2, r0
 8002b00:	693b      	ldr	r3, [r7, #16]
 8002b02:	1ad3      	subs	r3, r2, r3
 8002b04:	2b02      	cmp	r3, #2
 8002b06:	d901      	bls.n	8002b0c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002b08:	2303      	movs	r3, #3
 8002b0a:	e1fe      	b.n	8002f0a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b0c:	4b4b      	ldr	r3, [pc, #300]	@ (8002c3c <HAL_RCC_OscConfig+0x32c>)
 8002b0e:	681a      	ldr	r2, [r3, #0]
 8002b10:	2380      	movs	r3, #128	@ 0x80
 8002b12:	00db      	lsls	r3, r3, #3
 8002b14:	4013      	ands	r3, r2
 8002b16:	d0f0      	beq.n	8002afa <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b18:	4b48      	ldr	r3, [pc, #288]	@ (8002c3c <HAL_RCC_OscConfig+0x32c>)
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	4a4a      	ldr	r2, [pc, #296]	@ (8002c48 <HAL_RCC_OscConfig+0x338>)
 8002b1e:	4013      	ands	r3, r2
 8002b20:	0019      	movs	r1, r3
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	695b      	ldr	r3, [r3, #20]
 8002b26:	021a      	lsls	r2, r3, #8
 8002b28:	4b44      	ldr	r3, [pc, #272]	@ (8002c3c <HAL_RCC_OscConfig+0x32c>)
 8002b2a:	430a      	orrs	r2, r1
 8002b2c:	605a      	str	r2, [r3, #4]
 8002b2e:	e01b      	b.n	8002b68 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8002b30:	4b42      	ldr	r3, [pc, #264]	@ (8002c3c <HAL_RCC_OscConfig+0x32c>)
 8002b32:	681a      	ldr	r2, [r3, #0]
 8002b34:	4b41      	ldr	r3, [pc, #260]	@ (8002c3c <HAL_RCC_OscConfig+0x32c>)
 8002b36:	4949      	ldr	r1, [pc, #292]	@ (8002c5c <HAL_RCC_OscConfig+0x34c>)
 8002b38:	400a      	ands	r2, r1
 8002b3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b3c:	f7fe fc38 	bl	80013b0 <HAL_GetTick>
 8002b40:	0003      	movs	r3, r0
 8002b42:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002b44:	e008      	b.n	8002b58 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b46:	f7fe fc33 	bl	80013b0 <HAL_GetTick>
 8002b4a:	0002      	movs	r2, r0
 8002b4c:	693b      	ldr	r3, [r7, #16]
 8002b4e:	1ad3      	subs	r3, r2, r3
 8002b50:	2b02      	cmp	r3, #2
 8002b52:	d901      	bls.n	8002b58 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002b54:	2303      	movs	r3, #3
 8002b56:	e1d8      	b.n	8002f0a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002b58:	4b38      	ldr	r3, [pc, #224]	@ (8002c3c <HAL_RCC_OscConfig+0x32c>)
 8002b5a:	681a      	ldr	r2, [r3, #0]
 8002b5c:	2380      	movs	r3, #128	@ 0x80
 8002b5e:	00db      	lsls	r3, r3, #3
 8002b60:	4013      	ands	r3, r2
 8002b62:	d1f0      	bne.n	8002b46 <HAL_RCC_OscConfig+0x236>
 8002b64:	e000      	b.n	8002b68 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b66:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	2208      	movs	r2, #8
 8002b6e:	4013      	ands	r3, r2
 8002b70:	d047      	beq.n	8002c02 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002b72:	4b32      	ldr	r3, [pc, #200]	@ (8002c3c <HAL_RCC_OscConfig+0x32c>)
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	2238      	movs	r2, #56	@ 0x38
 8002b78:	4013      	ands	r3, r2
 8002b7a:	2b18      	cmp	r3, #24
 8002b7c:	d10a      	bne.n	8002b94 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8002b7e:	4b2f      	ldr	r3, [pc, #188]	@ (8002c3c <HAL_RCC_OscConfig+0x32c>)
 8002b80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b82:	2202      	movs	r2, #2
 8002b84:	4013      	ands	r3, r2
 8002b86:	d03c      	beq.n	8002c02 <HAL_RCC_OscConfig+0x2f2>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	699b      	ldr	r3, [r3, #24]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d138      	bne.n	8002c02 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8002b90:	2301      	movs	r3, #1
 8002b92:	e1ba      	b.n	8002f0a <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	699b      	ldr	r3, [r3, #24]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d019      	beq.n	8002bd0 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8002b9c:	4b27      	ldr	r3, [pc, #156]	@ (8002c3c <HAL_RCC_OscConfig+0x32c>)
 8002b9e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002ba0:	4b26      	ldr	r3, [pc, #152]	@ (8002c3c <HAL_RCC_OscConfig+0x32c>)
 8002ba2:	2101      	movs	r1, #1
 8002ba4:	430a      	orrs	r2, r1
 8002ba6:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ba8:	f7fe fc02 	bl	80013b0 <HAL_GetTick>
 8002bac:	0003      	movs	r3, r0
 8002bae:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002bb0:	e008      	b.n	8002bc4 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bb2:	f7fe fbfd 	bl	80013b0 <HAL_GetTick>
 8002bb6:	0002      	movs	r2, r0
 8002bb8:	693b      	ldr	r3, [r7, #16]
 8002bba:	1ad3      	subs	r3, r2, r3
 8002bbc:	2b02      	cmp	r3, #2
 8002bbe:	d901      	bls.n	8002bc4 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8002bc0:	2303      	movs	r3, #3
 8002bc2:	e1a2      	b.n	8002f0a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002bc4:	4b1d      	ldr	r3, [pc, #116]	@ (8002c3c <HAL_RCC_OscConfig+0x32c>)
 8002bc6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002bc8:	2202      	movs	r2, #2
 8002bca:	4013      	ands	r3, r2
 8002bcc:	d0f1      	beq.n	8002bb2 <HAL_RCC_OscConfig+0x2a2>
 8002bce:	e018      	b.n	8002c02 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8002bd0:	4b1a      	ldr	r3, [pc, #104]	@ (8002c3c <HAL_RCC_OscConfig+0x32c>)
 8002bd2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002bd4:	4b19      	ldr	r3, [pc, #100]	@ (8002c3c <HAL_RCC_OscConfig+0x32c>)
 8002bd6:	2101      	movs	r1, #1
 8002bd8:	438a      	bics	r2, r1
 8002bda:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bdc:	f7fe fbe8 	bl	80013b0 <HAL_GetTick>
 8002be0:	0003      	movs	r3, r0
 8002be2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002be4:	e008      	b.n	8002bf8 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002be6:	f7fe fbe3 	bl	80013b0 <HAL_GetTick>
 8002bea:	0002      	movs	r2, r0
 8002bec:	693b      	ldr	r3, [r7, #16]
 8002bee:	1ad3      	subs	r3, r2, r3
 8002bf0:	2b02      	cmp	r3, #2
 8002bf2:	d901      	bls.n	8002bf8 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8002bf4:	2303      	movs	r3, #3
 8002bf6:	e188      	b.n	8002f0a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002bf8:	4b10      	ldr	r3, [pc, #64]	@ (8002c3c <HAL_RCC_OscConfig+0x32c>)
 8002bfa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002bfc:	2202      	movs	r2, #2
 8002bfe:	4013      	ands	r3, r2
 8002c00:	d1f1      	bne.n	8002be6 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	2204      	movs	r2, #4
 8002c08:	4013      	ands	r3, r2
 8002c0a:	d100      	bne.n	8002c0e <HAL_RCC_OscConfig+0x2fe>
 8002c0c:	e0c6      	b.n	8002d9c <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c0e:	231f      	movs	r3, #31
 8002c10:	18fb      	adds	r3, r7, r3
 8002c12:	2200      	movs	r2, #0
 8002c14:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002c16:	4b09      	ldr	r3, [pc, #36]	@ (8002c3c <HAL_RCC_OscConfig+0x32c>)
 8002c18:	689b      	ldr	r3, [r3, #8]
 8002c1a:	2238      	movs	r2, #56	@ 0x38
 8002c1c:	4013      	ands	r3, r2
 8002c1e:	2b20      	cmp	r3, #32
 8002c20:	d11e      	bne.n	8002c60 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8002c22:	4b06      	ldr	r3, [pc, #24]	@ (8002c3c <HAL_RCC_OscConfig+0x32c>)
 8002c24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c26:	2202      	movs	r2, #2
 8002c28:	4013      	ands	r3, r2
 8002c2a:	d100      	bne.n	8002c2e <HAL_RCC_OscConfig+0x31e>
 8002c2c:	e0b6      	b.n	8002d9c <HAL_RCC_OscConfig+0x48c>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	689b      	ldr	r3, [r3, #8]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d000      	beq.n	8002c38 <HAL_RCC_OscConfig+0x328>
 8002c36:	e0b1      	b.n	8002d9c <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	e166      	b.n	8002f0a <HAL_RCC_OscConfig+0x5fa>
 8002c3c:	40021000 	.word	0x40021000
 8002c40:	fffeffff 	.word	0xfffeffff
 8002c44:	fffbffff 	.word	0xfffbffff
 8002c48:	ffff80ff 	.word	0xffff80ff
 8002c4c:	ffffc7ff 	.word	0xffffc7ff
 8002c50:	00f42400 	.word	0x00f42400
 8002c54:	20000000 	.word	0x20000000
 8002c58:	20000004 	.word	0x20000004
 8002c5c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002c60:	4bac      	ldr	r3, [pc, #688]	@ (8002f14 <HAL_RCC_OscConfig+0x604>)
 8002c62:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002c64:	2380      	movs	r3, #128	@ 0x80
 8002c66:	055b      	lsls	r3, r3, #21
 8002c68:	4013      	ands	r3, r2
 8002c6a:	d101      	bne.n	8002c70 <HAL_RCC_OscConfig+0x360>
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	e000      	b.n	8002c72 <HAL_RCC_OscConfig+0x362>
 8002c70:	2300      	movs	r3, #0
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d011      	beq.n	8002c9a <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8002c76:	4ba7      	ldr	r3, [pc, #668]	@ (8002f14 <HAL_RCC_OscConfig+0x604>)
 8002c78:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002c7a:	4ba6      	ldr	r3, [pc, #664]	@ (8002f14 <HAL_RCC_OscConfig+0x604>)
 8002c7c:	2180      	movs	r1, #128	@ 0x80
 8002c7e:	0549      	lsls	r1, r1, #21
 8002c80:	430a      	orrs	r2, r1
 8002c82:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002c84:	4ba3      	ldr	r3, [pc, #652]	@ (8002f14 <HAL_RCC_OscConfig+0x604>)
 8002c86:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002c88:	2380      	movs	r3, #128	@ 0x80
 8002c8a:	055b      	lsls	r3, r3, #21
 8002c8c:	4013      	ands	r3, r2
 8002c8e:	60fb      	str	r3, [r7, #12]
 8002c90:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8002c92:	231f      	movs	r3, #31
 8002c94:	18fb      	adds	r3, r7, r3
 8002c96:	2201      	movs	r2, #1
 8002c98:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c9a:	4b9f      	ldr	r3, [pc, #636]	@ (8002f18 <HAL_RCC_OscConfig+0x608>)
 8002c9c:	681a      	ldr	r2, [r3, #0]
 8002c9e:	2380      	movs	r3, #128	@ 0x80
 8002ca0:	005b      	lsls	r3, r3, #1
 8002ca2:	4013      	ands	r3, r2
 8002ca4:	d11a      	bne.n	8002cdc <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ca6:	4b9c      	ldr	r3, [pc, #624]	@ (8002f18 <HAL_RCC_OscConfig+0x608>)
 8002ca8:	681a      	ldr	r2, [r3, #0]
 8002caa:	4b9b      	ldr	r3, [pc, #620]	@ (8002f18 <HAL_RCC_OscConfig+0x608>)
 8002cac:	2180      	movs	r1, #128	@ 0x80
 8002cae:	0049      	lsls	r1, r1, #1
 8002cb0:	430a      	orrs	r2, r1
 8002cb2:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8002cb4:	f7fe fb7c 	bl	80013b0 <HAL_GetTick>
 8002cb8:	0003      	movs	r3, r0
 8002cba:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002cbc:	e008      	b.n	8002cd0 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cbe:	f7fe fb77 	bl	80013b0 <HAL_GetTick>
 8002cc2:	0002      	movs	r2, r0
 8002cc4:	693b      	ldr	r3, [r7, #16]
 8002cc6:	1ad3      	subs	r3, r2, r3
 8002cc8:	2b02      	cmp	r3, #2
 8002cca:	d901      	bls.n	8002cd0 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8002ccc:	2303      	movs	r3, #3
 8002cce:	e11c      	b.n	8002f0a <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002cd0:	4b91      	ldr	r3, [pc, #580]	@ (8002f18 <HAL_RCC_OscConfig+0x608>)
 8002cd2:	681a      	ldr	r2, [r3, #0]
 8002cd4:	2380      	movs	r3, #128	@ 0x80
 8002cd6:	005b      	lsls	r3, r3, #1
 8002cd8:	4013      	ands	r3, r2
 8002cda:	d0f0      	beq.n	8002cbe <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	689b      	ldr	r3, [r3, #8]
 8002ce0:	2b01      	cmp	r3, #1
 8002ce2:	d106      	bne.n	8002cf2 <HAL_RCC_OscConfig+0x3e2>
 8002ce4:	4b8b      	ldr	r3, [pc, #556]	@ (8002f14 <HAL_RCC_OscConfig+0x604>)
 8002ce6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002ce8:	4b8a      	ldr	r3, [pc, #552]	@ (8002f14 <HAL_RCC_OscConfig+0x604>)
 8002cea:	2101      	movs	r1, #1
 8002cec:	430a      	orrs	r2, r1
 8002cee:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002cf0:	e01c      	b.n	8002d2c <HAL_RCC_OscConfig+0x41c>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	689b      	ldr	r3, [r3, #8]
 8002cf6:	2b05      	cmp	r3, #5
 8002cf8:	d10c      	bne.n	8002d14 <HAL_RCC_OscConfig+0x404>
 8002cfa:	4b86      	ldr	r3, [pc, #536]	@ (8002f14 <HAL_RCC_OscConfig+0x604>)
 8002cfc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002cfe:	4b85      	ldr	r3, [pc, #532]	@ (8002f14 <HAL_RCC_OscConfig+0x604>)
 8002d00:	2104      	movs	r1, #4
 8002d02:	430a      	orrs	r2, r1
 8002d04:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002d06:	4b83      	ldr	r3, [pc, #524]	@ (8002f14 <HAL_RCC_OscConfig+0x604>)
 8002d08:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002d0a:	4b82      	ldr	r3, [pc, #520]	@ (8002f14 <HAL_RCC_OscConfig+0x604>)
 8002d0c:	2101      	movs	r1, #1
 8002d0e:	430a      	orrs	r2, r1
 8002d10:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002d12:	e00b      	b.n	8002d2c <HAL_RCC_OscConfig+0x41c>
 8002d14:	4b7f      	ldr	r3, [pc, #508]	@ (8002f14 <HAL_RCC_OscConfig+0x604>)
 8002d16:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002d18:	4b7e      	ldr	r3, [pc, #504]	@ (8002f14 <HAL_RCC_OscConfig+0x604>)
 8002d1a:	2101      	movs	r1, #1
 8002d1c:	438a      	bics	r2, r1
 8002d1e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002d20:	4b7c      	ldr	r3, [pc, #496]	@ (8002f14 <HAL_RCC_OscConfig+0x604>)
 8002d22:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002d24:	4b7b      	ldr	r3, [pc, #492]	@ (8002f14 <HAL_RCC_OscConfig+0x604>)
 8002d26:	2104      	movs	r1, #4
 8002d28:	438a      	bics	r2, r1
 8002d2a:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	689b      	ldr	r3, [r3, #8]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d014      	beq.n	8002d5e <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d34:	f7fe fb3c 	bl	80013b0 <HAL_GetTick>
 8002d38:	0003      	movs	r3, r0
 8002d3a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d3c:	e009      	b.n	8002d52 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d3e:	f7fe fb37 	bl	80013b0 <HAL_GetTick>
 8002d42:	0002      	movs	r2, r0
 8002d44:	693b      	ldr	r3, [r7, #16]
 8002d46:	1ad3      	subs	r3, r2, r3
 8002d48:	4a74      	ldr	r2, [pc, #464]	@ (8002f1c <HAL_RCC_OscConfig+0x60c>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d901      	bls.n	8002d52 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8002d4e:	2303      	movs	r3, #3
 8002d50:	e0db      	b.n	8002f0a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d52:	4b70      	ldr	r3, [pc, #448]	@ (8002f14 <HAL_RCC_OscConfig+0x604>)
 8002d54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d56:	2202      	movs	r2, #2
 8002d58:	4013      	ands	r3, r2
 8002d5a:	d0f0      	beq.n	8002d3e <HAL_RCC_OscConfig+0x42e>
 8002d5c:	e013      	b.n	8002d86 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d5e:	f7fe fb27 	bl	80013b0 <HAL_GetTick>
 8002d62:	0003      	movs	r3, r0
 8002d64:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002d66:	e009      	b.n	8002d7c <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d68:	f7fe fb22 	bl	80013b0 <HAL_GetTick>
 8002d6c:	0002      	movs	r2, r0
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	1ad3      	subs	r3, r2, r3
 8002d72:	4a6a      	ldr	r2, [pc, #424]	@ (8002f1c <HAL_RCC_OscConfig+0x60c>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d901      	bls.n	8002d7c <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8002d78:	2303      	movs	r3, #3
 8002d7a:	e0c6      	b.n	8002f0a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002d7c:	4b65      	ldr	r3, [pc, #404]	@ (8002f14 <HAL_RCC_OscConfig+0x604>)
 8002d7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d80:	2202      	movs	r2, #2
 8002d82:	4013      	ands	r3, r2
 8002d84:	d1f0      	bne.n	8002d68 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002d86:	231f      	movs	r3, #31
 8002d88:	18fb      	adds	r3, r7, r3
 8002d8a:	781b      	ldrb	r3, [r3, #0]
 8002d8c:	2b01      	cmp	r3, #1
 8002d8e:	d105      	bne.n	8002d9c <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002d90:	4b60      	ldr	r3, [pc, #384]	@ (8002f14 <HAL_RCC_OscConfig+0x604>)
 8002d92:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002d94:	4b5f      	ldr	r3, [pc, #380]	@ (8002f14 <HAL_RCC_OscConfig+0x604>)
 8002d96:	4962      	ldr	r1, [pc, #392]	@ (8002f20 <HAL_RCC_OscConfig+0x610>)
 8002d98:	400a      	ands	r2, r1
 8002d9a:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	69db      	ldr	r3, [r3, #28]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d100      	bne.n	8002da6 <HAL_RCC_OscConfig+0x496>
 8002da4:	e0b0      	b.n	8002f08 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002da6:	4b5b      	ldr	r3, [pc, #364]	@ (8002f14 <HAL_RCC_OscConfig+0x604>)
 8002da8:	689b      	ldr	r3, [r3, #8]
 8002daa:	2238      	movs	r2, #56	@ 0x38
 8002dac:	4013      	ands	r3, r2
 8002dae:	2b10      	cmp	r3, #16
 8002db0:	d100      	bne.n	8002db4 <HAL_RCC_OscConfig+0x4a4>
 8002db2:	e078      	b.n	8002ea6 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	69db      	ldr	r3, [r3, #28]
 8002db8:	2b02      	cmp	r3, #2
 8002dba:	d153      	bne.n	8002e64 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dbc:	4b55      	ldr	r3, [pc, #340]	@ (8002f14 <HAL_RCC_OscConfig+0x604>)
 8002dbe:	681a      	ldr	r2, [r3, #0]
 8002dc0:	4b54      	ldr	r3, [pc, #336]	@ (8002f14 <HAL_RCC_OscConfig+0x604>)
 8002dc2:	4958      	ldr	r1, [pc, #352]	@ (8002f24 <HAL_RCC_OscConfig+0x614>)
 8002dc4:	400a      	ands	r2, r1
 8002dc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dc8:	f7fe faf2 	bl	80013b0 <HAL_GetTick>
 8002dcc:	0003      	movs	r3, r0
 8002dce:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002dd0:	e008      	b.n	8002de4 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dd2:	f7fe faed 	bl	80013b0 <HAL_GetTick>
 8002dd6:	0002      	movs	r2, r0
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	1ad3      	subs	r3, r2, r3
 8002ddc:	2b02      	cmp	r3, #2
 8002dde:	d901      	bls.n	8002de4 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8002de0:	2303      	movs	r3, #3
 8002de2:	e092      	b.n	8002f0a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002de4:	4b4b      	ldr	r3, [pc, #300]	@ (8002f14 <HAL_RCC_OscConfig+0x604>)
 8002de6:	681a      	ldr	r2, [r3, #0]
 8002de8:	2380      	movs	r3, #128	@ 0x80
 8002dea:	049b      	lsls	r3, r3, #18
 8002dec:	4013      	ands	r3, r2
 8002dee:	d1f0      	bne.n	8002dd2 <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002df0:	4b48      	ldr	r3, [pc, #288]	@ (8002f14 <HAL_RCC_OscConfig+0x604>)
 8002df2:	68db      	ldr	r3, [r3, #12]
 8002df4:	4a4c      	ldr	r2, [pc, #304]	@ (8002f28 <HAL_RCC_OscConfig+0x618>)
 8002df6:	4013      	ands	r3, r2
 8002df8:	0019      	movs	r1, r3
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6a1a      	ldr	r2, [r3, #32]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e02:	431a      	orrs	r2, r3
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e08:	021b      	lsls	r3, r3, #8
 8002e0a:	431a      	orrs	r2, r3
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e10:	431a      	orrs	r2, r3
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e16:	431a      	orrs	r2, r3
 8002e18:	4b3e      	ldr	r3, [pc, #248]	@ (8002f14 <HAL_RCC_OscConfig+0x604>)
 8002e1a:	430a      	orrs	r2, r1
 8002e1c:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e1e:	4b3d      	ldr	r3, [pc, #244]	@ (8002f14 <HAL_RCC_OscConfig+0x604>)
 8002e20:	681a      	ldr	r2, [r3, #0]
 8002e22:	4b3c      	ldr	r3, [pc, #240]	@ (8002f14 <HAL_RCC_OscConfig+0x604>)
 8002e24:	2180      	movs	r1, #128	@ 0x80
 8002e26:	0449      	lsls	r1, r1, #17
 8002e28:	430a      	orrs	r2, r1
 8002e2a:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002e2c:	4b39      	ldr	r3, [pc, #228]	@ (8002f14 <HAL_RCC_OscConfig+0x604>)
 8002e2e:	68da      	ldr	r2, [r3, #12]
 8002e30:	4b38      	ldr	r3, [pc, #224]	@ (8002f14 <HAL_RCC_OscConfig+0x604>)
 8002e32:	2180      	movs	r1, #128	@ 0x80
 8002e34:	0549      	lsls	r1, r1, #21
 8002e36:	430a      	orrs	r2, r1
 8002e38:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e3a:	f7fe fab9 	bl	80013b0 <HAL_GetTick>
 8002e3e:	0003      	movs	r3, r0
 8002e40:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e42:	e008      	b.n	8002e56 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e44:	f7fe fab4 	bl	80013b0 <HAL_GetTick>
 8002e48:	0002      	movs	r2, r0
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	1ad3      	subs	r3, r2, r3
 8002e4e:	2b02      	cmp	r3, #2
 8002e50:	d901      	bls.n	8002e56 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8002e52:	2303      	movs	r3, #3
 8002e54:	e059      	b.n	8002f0a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e56:	4b2f      	ldr	r3, [pc, #188]	@ (8002f14 <HAL_RCC_OscConfig+0x604>)
 8002e58:	681a      	ldr	r2, [r3, #0]
 8002e5a:	2380      	movs	r3, #128	@ 0x80
 8002e5c:	049b      	lsls	r3, r3, #18
 8002e5e:	4013      	ands	r3, r2
 8002e60:	d0f0      	beq.n	8002e44 <HAL_RCC_OscConfig+0x534>
 8002e62:	e051      	b.n	8002f08 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e64:	4b2b      	ldr	r3, [pc, #172]	@ (8002f14 <HAL_RCC_OscConfig+0x604>)
 8002e66:	681a      	ldr	r2, [r3, #0]
 8002e68:	4b2a      	ldr	r3, [pc, #168]	@ (8002f14 <HAL_RCC_OscConfig+0x604>)
 8002e6a:	492e      	ldr	r1, [pc, #184]	@ (8002f24 <HAL_RCC_OscConfig+0x614>)
 8002e6c:	400a      	ands	r2, r1
 8002e6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e70:	f7fe fa9e 	bl	80013b0 <HAL_GetTick>
 8002e74:	0003      	movs	r3, r0
 8002e76:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e78:	e008      	b.n	8002e8c <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e7a:	f7fe fa99 	bl	80013b0 <HAL_GetTick>
 8002e7e:	0002      	movs	r2, r0
 8002e80:	693b      	ldr	r3, [r7, #16]
 8002e82:	1ad3      	subs	r3, r2, r3
 8002e84:	2b02      	cmp	r3, #2
 8002e86:	d901      	bls.n	8002e8c <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8002e88:	2303      	movs	r3, #3
 8002e8a:	e03e      	b.n	8002f0a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e8c:	4b21      	ldr	r3, [pc, #132]	@ (8002f14 <HAL_RCC_OscConfig+0x604>)
 8002e8e:	681a      	ldr	r2, [r3, #0]
 8002e90:	2380      	movs	r3, #128	@ 0x80
 8002e92:	049b      	lsls	r3, r3, #18
 8002e94:	4013      	ands	r3, r2
 8002e96:	d1f0      	bne.n	8002e7a <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8002e98:	4b1e      	ldr	r3, [pc, #120]	@ (8002f14 <HAL_RCC_OscConfig+0x604>)
 8002e9a:	68da      	ldr	r2, [r3, #12]
 8002e9c:	4b1d      	ldr	r3, [pc, #116]	@ (8002f14 <HAL_RCC_OscConfig+0x604>)
 8002e9e:	4923      	ldr	r1, [pc, #140]	@ (8002f2c <HAL_RCC_OscConfig+0x61c>)
 8002ea0:	400a      	ands	r2, r1
 8002ea2:	60da      	str	r2, [r3, #12]
 8002ea4:	e030      	b.n	8002f08 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	69db      	ldr	r3, [r3, #28]
 8002eaa:	2b01      	cmp	r3, #1
 8002eac:	d101      	bne.n	8002eb2 <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	e02b      	b.n	8002f0a <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8002eb2:	4b18      	ldr	r3, [pc, #96]	@ (8002f14 <HAL_RCC_OscConfig+0x604>)
 8002eb4:	68db      	ldr	r3, [r3, #12]
 8002eb6:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	2203      	movs	r2, #3
 8002ebc:	401a      	ands	r2, r3
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6a1b      	ldr	r3, [r3, #32]
 8002ec2:	429a      	cmp	r2, r3
 8002ec4:	d11e      	bne.n	8002f04 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002ec6:	697b      	ldr	r3, [r7, #20]
 8002ec8:	2270      	movs	r2, #112	@ 0x70
 8002eca:	401a      	ands	r2, r3
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ed0:	429a      	cmp	r2, r3
 8002ed2:	d117      	bne.n	8002f04 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ed4:	697a      	ldr	r2, [r7, #20]
 8002ed6:	23fe      	movs	r3, #254	@ 0xfe
 8002ed8:	01db      	lsls	r3, r3, #7
 8002eda:	401a      	ands	r2, r3
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ee0:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002ee2:	429a      	cmp	r2, r3
 8002ee4:	d10e      	bne.n	8002f04 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002ee6:	697a      	ldr	r2, [r7, #20]
 8002ee8:	23f8      	movs	r3, #248	@ 0xf8
 8002eea:	039b      	lsls	r3, r3, #14
 8002eec:	401a      	ands	r2, r3
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ef2:	429a      	cmp	r2, r3
 8002ef4:	d106      	bne.n	8002f04 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002ef6:	697b      	ldr	r3, [r7, #20]
 8002ef8:	0f5b      	lsrs	r3, r3, #29
 8002efa:	075a      	lsls	r2, r3, #29
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002f00:	429a      	cmp	r2, r3
 8002f02:	d001      	beq.n	8002f08 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	e000      	b.n	8002f0a <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8002f08:	2300      	movs	r3, #0
}
 8002f0a:	0018      	movs	r0, r3
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	b008      	add	sp, #32
 8002f10:	bd80      	pop	{r7, pc}
 8002f12:	46c0      	nop			@ (mov r8, r8)
 8002f14:	40021000 	.word	0x40021000
 8002f18:	40007000 	.word	0x40007000
 8002f1c:	00001388 	.word	0x00001388
 8002f20:	efffffff 	.word	0xefffffff
 8002f24:	feffffff 	.word	0xfeffffff
 8002f28:	1fc1808c 	.word	0x1fc1808c
 8002f2c:	effefffc 	.word	0xeffefffc

08002f30 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b084      	sub	sp, #16
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
 8002f38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d101      	bne.n	8002f44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f40:	2301      	movs	r3, #1
 8002f42:	e0e9      	b.n	8003118 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f44:	4b76      	ldr	r3, [pc, #472]	@ (8003120 <HAL_RCC_ClockConfig+0x1f0>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	2207      	movs	r2, #7
 8002f4a:	4013      	ands	r3, r2
 8002f4c:	683a      	ldr	r2, [r7, #0]
 8002f4e:	429a      	cmp	r2, r3
 8002f50:	d91e      	bls.n	8002f90 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f52:	4b73      	ldr	r3, [pc, #460]	@ (8003120 <HAL_RCC_ClockConfig+0x1f0>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	2207      	movs	r2, #7
 8002f58:	4393      	bics	r3, r2
 8002f5a:	0019      	movs	r1, r3
 8002f5c:	4b70      	ldr	r3, [pc, #448]	@ (8003120 <HAL_RCC_ClockConfig+0x1f0>)
 8002f5e:	683a      	ldr	r2, [r7, #0]
 8002f60:	430a      	orrs	r2, r1
 8002f62:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002f64:	f7fe fa24 	bl	80013b0 <HAL_GetTick>
 8002f68:	0003      	movs	r3, r0
 8002f6a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002f6c:	e009      	b.n	8002f82 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f6e:	f7fe fa1f 	bl	80013b0 <HAL_GetTick>
 8002f72:	0002      	movs	r2, r0
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	1ad3      	subs	r3, r2, r3
 8002f78:	4a6a      	ldr	r2, [pc, #424]	@ (8003124 <HAL_RCC_ClockConfig+0x1f4>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d901      	bls.n	8002f82 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002f7e:	2303      	movs	r3, #3
 8002f80:	e0ca      	b.n	8003118 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002f82:	4b67      	ldr	r3, [pc, #412]	@ (8003120 <HAL_RCC_ClockConfig+0x1f0>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	2207      	movs	r2, #7
 8002f88:	4013      	ands	r3, r2
 8002f8a:	683a      	ldr	r2, [r7, #0]
 8002f8c:	429a      	cmp	r2, r3
 8002f8e:	d1ee      	bne.n	8002f6e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	2202      	movs	r2, #2
 8002f96:	4013      	ands	r3, r2
 8002f98:	d015      	beq.n	8002fc6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	2204      	movs	r2, #4
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	d006      	beq.n	8002fb2 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002fa4:	4b60      	ldr	r3, [pc, #384]	@ (8003128 <HAL_RCC_ClockConfig+0x1f8>)
 8002fa6:	689a      	ldr	r2, [r3, #8]
 8002fa8:	4b5f      	ldr	r3, [pc, #380]	@ (8003128 <HAL_RCC_ClockConfig+0x1f8>)
 8002faa:	21e0      	movs	r1, #224	@ 0xe0
 8002fac:	01c9      	lsls	r1, r1, #7
 8002fae:	430a      	orrs	r2, r1
 8002fb0:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fb2:	4b5d      	ldr	r3, [pc, #372]	@ (8003128 <HAL_RCC_ClockConfig+0x1f8>)
 8002fb4:	689b      	ldr	r3, [r3, #8]
 8002fb6:	4a5d      	ldr	r2, [pc, #372]	@ (800312c <HAL_RCC_ClockConfig+0x1fc>)
 8002fb8:	4013      	ands	r3, r2
 8002fba:	0019      	movs	r1, r3
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	689a      	ldr	r2, [r3, #8]
 8002fc0:	4b59      	ldr	r3, [pc, #356]	@ (8003128 <HAL_RCC_ClockConfig+0x1f8>)
 8002fc2:	430a      	orrs	r2, r1
 8002fc4:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	2201      	movs	r2, #1
 8002fcc:	4013      	ands	r3, r2
 8002fce:	d057      	beq.n	8003080 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	2b01      	cmp	r3, #1
 8002fd6:	d107      	bne.n	8002fe8 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002fd8:	4b53      	ldr	r3, [pc, #332]	@ (8003128 <HAL_RCC_ClockConfig+0x1f8>)
 8002fda:	681a      	ldr	r2, [r3, #0]
 8002fdc:	2380      	movs	r3, #128	@ 0x80
 8002fde:	029b      	lsls	r3, r3, #10
 8002fe0:	4013      	ands	r3, r2
 8002fe2:	d12b      	bne.n	800303c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	e097      	b.n	8003118 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	2b02      	cmp	r3, #2
 8002fee:	d107      	bne.n	8003000 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ff0:	4b4d      	ldr	r3, [pc, #308]	@ (8003128 <HAL_RCC_ClockConfig+0x1f8>)
 8002ff2:	681a      	ldr	r2, [r3, #0]
 8002ff4:	2380      	movs	r3, #128	@ 0x80
 8002ff6:	049b      	lsls	r3, r3, #18
 8002ff8:	4013      	ands	r3, r2
 8002ffa:	d11f      	bne.n	800303c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	e08b      	b.n	8003118 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d107      	bne.n	8003018 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003008:	4b47      	ldr	r3, [pc, #284]	@ (8003128 <HAL_RCC_ClockConfig+0x1f8>)
 800300a:	681a      	ldr	r2, [r3, #0]
 800300c:	2380      	movs	r3, #128	@ 0x80
 800300e:	00db      	lsls	r3, r3, #3
 8003010:	4013      	ands	r3, r2
 8003012:	d113      	bne.n	800303c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003014:	2301      	movs	r3, #1
 8003016:	e07f      	b.n	8003118 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	2b03      	cmp	r3, #3
 800301e:	d106      	bne.n	800302e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003020:	4b41      	ldr	r3, [pc, #260]	@ (8003128 <HAL_RCC_ClockConfig+0x1f8>)
 8003022:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003024:	2202      	movs	r2, #2
 8003026:	4013      	ands	r3, r2
 8003028:	d108      	bne.n	800303c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800302a:	2301      	movs	r3, #1
 800302c:	e074      	b.n	8003118 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800302e:	4b3e      	ldr	r3, [pc, #248]	@ (8003128 <HAL_RCC_ClockConfig+0x1f8>)
 8003030:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003032:	2202      	movs	r2, #2
 8003034:	4013      	ands	r3, r2
 8003036:	d101      	bne.n	800303c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003038:	2301      	movs	r3, #1
 800303a:	e06d      	b.n	8003118 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800303c:	4b3a      	ldr	r3, [pc, #232]	@ (8003128 <HAL_RCC_ClockConfig+0x1f8>)
 800303e:	689b      	ldr	r3, [r3, #8]
 8003040:	2207      	movs	r2, #7
 8003042:	4393      	bics	r3, r2
 8003044:	0019      	movs	r1, r3
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	685a      	ldr	r2, [r3, #4]
 800304a:	4b37      	ldr	r3, [pc, #220]	@ (8003128 <HAL_RCC_ClockConfig+0x1f8>)
 800304c:	430a      	orrs	r2, r1
 800304e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003050:	f7fe f9ae 	bl	80013b0 <HAL_GetTick>
 8003054:	0003      	movs	r3, r0
 8003056:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003058:	e009      	b.n	800306e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800305a:	f7fe f9a9 	bl	80013b0 <HAL_GetTick>
 800305e:	0002      	movs	r2, r0
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	1ad3      	subs	r3, r2, r3
 8003064:	4a2f      	ldr	r2, [pc, #188]	@ (8003124 <HAL_RCC_ClockConfig+0x1f4>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d901      	bls.n	800306e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800306a:	2303      	movs	r3, #3
 800306c:	e054      	b.n	8003118 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800306e:	4b2e      	ldr	r3, [pc, #184]	@ (8003128 <HAL_RCC_ClockConfig+0x1f8>)
 8003070:	689b      	ldr	r3, [r3, #8]
 8003072:	2238      	movs	r2, #56	@ 0x38
 8003074:	401a      	ands	r2, r3
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	00db      	lsls	r3, r3, #3
 800307c:	429a      	cmp	r2, r3
 800307e:	d1ec      	bne.n	800305a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003080:	4b27      	ldr	r3, [pc, #156]	@ (8003120 <HAL_RCC_ClockConfig+0x1f0>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	2207      	movs	r2, #7
 8003086:	4013      	ands	r3, r2
 8003088:	683a      	ldr	r2, [r7, #0]
 800308a:	429a      	cmp	r2, r3
 800308c:	d21e      	bcs.n	80030cc <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800308e:	4b24      	ldr	r3, [pc, #144]	@ (8003120 <HAL_RCC_ClockConfig+0x1f0>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	2207      	movs	r2, #7
 8003094:	4393      	bics	r3, r2
 8003096:	0019      	movs	r1, r3
 8003098:	4b21      	ldr	r3, [pc, #132]	@ (8003120 <HAL_RCC_ClockConfig+0x1f0>)
 800309a:	683a      	ldr	r2, [r7, #0]
 800309c:	430a      	orrs	r2, r1
 800309e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80030a0:	f7fe f986 	bl	80013b0 <HAL_GetTick>
 80030a4:	0003      	movs	r3, r0
 80030a6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80030a8:	e009      	b.n	80030be <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030aa:	f7fe f981 	bl	80013b0 <HAL_GetTick>
 80030ae:	0002      	movs	r2, r0
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	1ad3      	subs	r3, r2, r3
 80030b4:	4a1b      	ldr	r2, [pc, #108]	@ (8003124 <HAL_RCC_ClockConfig+0x1f4>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d901      	bls.n	80030be <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80030ba:	2303      	movs	r3, #3
 80030bc:	e02c      	b.n	8003118 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80030be:	4b18      	ldr	r3, [pc, #96]	@ (8003120 <HAL_RCC_ClockConfig+0x1f0>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	2207      	movs	r2, #7
 80030c4:	4013      	ands	r3, r2
 80030c6:	683a      	ldr	r2, [r7, #0]
 80030c8:	429a      	cmp	r2, r3
 80030ca:	d1ee      	bne.n	80030aa <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	2204      	movs	r2, #4
 80030d2:	4013      	ands	r3, r2
 80030d4:	d009      	beq.n	80030ea <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80030d6:	4b14      	ldr	r3, [pc, #80]	@ (8003128 <HAL_RCC_ClockConfig+0x1f8>)
 80030d8:	689b      	ldr	r3, [r3, #8]
 80030da:	4a15      	ldr	r2, [pc, #84]	@ (8003130 <HAL_RCC_ClockConfig+0x200>)
 80030dc:	4013      	ands	r3, r2
 80030de:	0019      	movs	r1, r3
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	68da      	ldr	r2, [r3, #12]
 80030e4:	4b10      	ldr	r3, [pc, #64]	@ (8003128 <HAL_RCC_ClockConfig+0x1f8>)
 80030e6:	430a      	orrs	r2, r1
 80030e8:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80030ea:	f000 f829 	bl	8003140 <HAL_RCC_GetSysClockFreq>
 80030ee:	0001      	movs	r1, r0
 80030f0:	4b0d      	ldr	r3, [pc, #52]	@ (8003128 <HAL_RCC_ClockConfig+0x1f8>)
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	0a1b      	lsrs	r3, r3, #8
 80030f6:	220f      	movs	r2, #15
 80030f8:	401a      	ands	r2, r3
 80030fa:	4b0e      	ldr	r3, [pc, #56]	@ (8003134 <HAL_RCC_ClockConfig+0x204>)
 80030fc:	0092      	lsls	r2, r2, #2
 80030fe:	58d3      	ldr	r3, [r2, r3]
 8003100:	221f      	movs	r2, #31
 8003102:	4013      	ands	r3, r2
 8003104:	000a      	movs	r2, r1
 8003106:	40da      	lsrs	r2, r3
 8003108:	4b0b      	ldr	r3, [pc, #44]	@ (8003138 <HAL_RCC_ClockConfig+0x208>)
 800310a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800310c:	4b0b      	ldr	r3, [pc, #44]	@ (800313c <HAL_RCC_ClockConfig+0x20c>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	0018      	movs	r0, r3
 8003112:	f7fe f8f1 	bl	80012f8 <HAL_InitTick>
 8003116:	0003      	movs	r3, r0
}
 8003118:	0018      	movs	r0, r3
 800311a:	46bd      	mov	sp, r7
 800311c:	b004      	add	sp, #16
 800311e:	bd80      	pop	{r7, pc}
 8003120:	40022000 	.word	0x40022000
 8003124:	00001388 	.word	0x00001388
 8003128:	40021000 	.word	0x40021000
 800312c:	fffff0ff 	.word	0xfffff0ff
 8003130:	ffff8fff 	.word	0xffff8fff
 8003134:	08005224 	.word	0x08005224
 8003138:	20000000 	.word	0x20000000
 800313c:	20000004 	.word	0x20000004

08003140 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b086      	sub	sp, #24
 8003144:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003146:	4b3c      	ldr	r3, [pc, #240]	@ (8003238 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003148:	689b      	ldr	r3, [r3, #8]
 800314a:	2238      	movs	r2, #56	@ 0x38
 800314c:	4013      	ands	r3, r2
 800314e:	d10f      	bne.n	8003170 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8003150:	4b39      	ldr	r3, [pc, #228]	@ (8003238 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	0adb      	lsrs	r3, r3, #11
 8003156:	2207      	movs	r2, #7
 8003158:	4013      	ands	r3, r2
 800315a:	2201      	movs	r2, #1
 800315c:	409a      	lsls	r2, r3
 800315e:	0013      	movs	r3, r2
 8003160:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8003162:	6839      	ldr	r1, [r7, #0]
 8003164:	4835      	ldr	r0, [pc, #212]	@ (800323c <HAL_RCC_GetSysClockFreq+0xfc>)
 8003166:	f7fd f827 	bl	80001b8 <__udivsi3>
 800316a:	0003      	movs	r3, r0
 800316c:	613b      	str	r3, [r7, #16]
 800316e:	e05d      	b.n	800322c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003170:	4b31      	ldr	r3, [pc, #196]	@ (8003238 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	2238      	movs	r2, #56	@ 0x38
 8003176:	4013      	ands	r3, r2
 8003178:	2b08      	cmp	r3, #8
 800317a:	d102      	bne.n	8003182 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800317c:	4b30      	ldr	r3, [pc, #192]	@ (8003240 <HAL_RCC_GetSysClockFreq+0x100>)
 800317e:	613b      	str	r3, [r7, #16]
 8003180:	e054      	b.n	800322c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003182:	4b2d      	ldr	r3, [pc, #180]	@ (8003238 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003184:	689b      	ldr	r3, [r3, #8]
 8003186:	2238      	movs	r2, #56	@ 0x38
 8003188:	4013      	ands	r3, r2
 800318a:	2b10      	cmp	r3, #16
 800318c:	d138      	bne.n	8003200 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800318e:	4b2a      	ldr	r3, [pc, #168]	@ (8003238 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003190:	68db      	ldr	r3, [r3, #12]
 8003192:	2203      	movs	r2, #3
 8003194:	4013      	ands	r3, r2
 8003196:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003198:	4b27      	ldr	r3, [pc, #156]	@ (8003238 <HAL_RCC_GetSysClockFreq+0xf8>)
 800319a:	68db      	ldr	r3, [r3, #12]
 800319c:	091b      	lsrs	r3, r3, #4
 800319e:	2207      	movs	r2, #7
 80031a0:	4013      	ands	r3, r2
 80031a2:	3301      	adds	r3, #1
 80031a4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	2b03      	cmp	r3, #3
 80031aa:	d10d      	bne.n	80031c8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80031ac:	68b9      	ldr	r1, [r7, #8]
 80031ae:	4824      	ldr	r0, [pc, #144]	@ (8003240 <HAL_RCC_GetSysClockFreq+0x100>)
 80031b0:	f7fd f802 	bl	80001b8 <__udivsi3>
 80031b4:	0003      	movs	r3, r0
 80031b6:	0019      	movs	r1, r3
 80031b8:	4b1f      	ldr	r3, [pc, #124]	@ (8003238 <HAL_RCC_GetSysClockFreq+0xf8>)
 80031ba:	68db      	ldr	r3, [r3, #12]
 80031bc:	0a1b      	lsrs	r3, r3, #8
 80031be:	227f      	movs	r2, #127	@ 0x7f
 80031c0:	4013      	ands	r3, r2
 80031c2:	434b      	muls	r3, r1
 80031c4:	617b      	str	r3, [r7, #20]
        break;
 80031c6:	e00d      	b.n	80031e4 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80031c8:	68b9      	ldr	r1, [r7, #8]
 80031ca:	481c      	ldr	r0, [pc, #112]	@ (800323c <HAL_RCC_GetSysClockFreq+0xfc>)
 80031cc:	f7fc fff4 	bl	80001b8 <__udivsi3>
 80031d0:	0003      	movs	r3, r0
 80031d2:	0019      	movs	r1, r3
 80031d4:	4b18      	ldr	r3, [pc, #96]	@ (8003238 <HAL_RCC_GetSysClockFreq+0xf8>)
 80031d6:	68db      	ldr	r3, [r3, #12]
 80031d8:	0a1b      	lsrs	r3, r3, #8
 80031da:	227f      	movs	r2, #127	@ 0x7f
 80031dc:	4013      	ands	r3, r2
 80031de:	434b      	muls	r3, r1
 80031e0:	617b      	str	r3, [r7, #20]
        break;
 80031e2:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80031e4:	4b14      	ldr	r3, [pc, #80]	@ (8003238 <HAL_RCC_GetSysClockFreq+0xf8>)
 80031e6:	68db      	ldr	r3, [r3, #12]
 80031e8:	0f5b      	lsrs	r3, r3, #29
 80031ea:	2207      	movs	r2, #7
 80031ec:	4013      	ands	r3, r2
 80031ee:	3301      	adds	r3, #1
 80031f0:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80031f2:	6879      	ldr	r1, [r7, #4]
 80031f4:	6978      	ldr	r0, [r7, #20]
 80031f6:	f7fc ffdf 	bl	80001b8 <__udivsi3>
 80031fa:	0003      	movs	r3, r0
 80031fc:	613b      	str	r3, [r7, #16]
 80031fe:	e015      	b.n	800322c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003200:	4b0d      	ldr	r3, [pc, #52]	@ (8003238 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003202:	689b      	ldr	r3, [r3, #8]
 8003204:	2238      	movs	r2, #56	@ 0x38
 8003206:	4013      	ands	r3, r2
 8003208:	2b20      	cmp	r3, #32
 800320a:	d103      	bne.n	8003214 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800320c:	2380      	movs	r3, #128	@ 0x80
 800320e:	021b      	lsls	r3, r3, #8
 8003210:	613b      	str	r3, [r7, #16]
 8003212:	e00b      	b.n	800322c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003214:	4b08      	ldr	r3, [pc, #32]	@ (8003238 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003216:	689b      	ldr	r3, [r3, #8]
 8003218:	2238      	movs	r2, #56	@ 0x38
 800321a:	4013      	ands	r3, r2
 800321c:	2b18      	cmp	r3, #24
 800321e:	d103      	bne.n	8003228 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8003220:	23fa      	movs	r3, #250	@ 0xfa
 8003222:	01db      	lsls	r3, r3, #7
 8003224:	613b      	str	r3, [r7, #16]
 8003226:	e001      	b.n	800322c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8003228:	2300      	movs	r3, #0
 800322a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800322c:	693b      	ldr	r3, [r7, #16]
}
 800322e:	0018      	movs	r0, r3
 8003230:	46bd      	mov	sp, r7
 8003232:	b006      	add	sp, #24
 8003234:	bd80      	pop	{r7, pc}
 8003236:	46c0      	nop			@ (mov r8, r8)
 8003238:	40021000 	.word	0x40021000
 800323c:	00f42400 	.word	0x00f42400
 8003240:	007a1200 	.word	0x007a1200

08003244 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003248:	4b02      	ldr	r3, [pc, #8]	@ (8003254 <HAL_RCC_GetHCLKFreq+0x10>)
 800324a:	681b      	ldr	r3, [r3, #0]
}
 800324c:	0018      	movs	r0, r3
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}
 8003252:	46c0      	nop			@ (mov r8, r8)
 8003254:	20000000 	.word	0x20000000

08003258 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003258:	b5b0      	push	{r4, r5, r7, lr}
 800325a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800325c:	f7ff fff2 	bl	8003244 <HAL_RCC_GetHCLKFreq>
 8003260:	0004      	movs	r4, r0
 8003262:	f7ff fb49 	bl	80028f8 <LL_RCC_GetAPB1Prescaler>
 8003266:	0003      	movs	r3, r0
 8003268:	0b1a      	lsrs	r2, r3, #12
 800326a:	4b05      	ldr	r3, [pc, #20]	@ (8003280 <HAL_RCC_GetPCLK1Freq+0x28>)
 800326c:	0092      	lsls	r2, r2, #2
 800326e:	58d3      	ldr	r3, [r2, r3]
 8003270:	221f      	movs	r2, #31
 8003272:	4013      	ands	r3, r2
 8003274:	40dc      	lsrs	r4, r3
 8003276:	0023      	movs	r3, r4
}
 8003278:	0018      	movs	r0, r3
 800327a:	46bd      	mov	sp, r7
 800327c:	bdb0      	pop	{r4, r5, r7, pc}
 800327e:	46c0      	nop			@ (mov r8, r8)
 8003280:	08005264 	.word	0x08005264

08003284 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b086      	sub	sp, #24
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 800328c:	2313      	movs	r3, #19
 800328e:	18fb      	adds	r3, r7, r3
 8003290:	2200      	movs	r2, #0
 8003292:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003294:	2312      	movs	r3, #18
 8003296:	18fb      	adds	r3, r7, r3
 8003298:	2200      	movs	r2, #0
 800329a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681a      	ldr	r2, [r3, #0]
 80032a0:	2380      	movs	r3, #128	@ 0x80
 80032a2:	029b      	lsls	r3, r3, #10
 80032a4:	4013      	ands	r3, r2
 80032a6:	d100      	bne.n	80032aa <HAL_RCCEx_PeriphCLKConfig+0x26>
 80032a8:	e0a3      	b.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032aa:	2011      	movs	r0, #17
 80032ac:	183b      	adds	r3, r7, r0
 80032ae:	2200      	movs	r2, #0
 80032b0:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032b2:	4b86      	ldr	r3, [pc, #536]	@ (80034cc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80032b4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80032b6:	2380      	movs	r3, #128	@ 0x80
 80032b8:	055b      	lsls	r3, r3, #21
 80032ba:	4013      	ands	r3, r2
 80032bc:	d110      	bne.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032be:	4b83      	ldr	r3, [pc, #524]	@ (80034cc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80032c0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80032c2:	4b82      	ldr	r3, [pc, #520]	@ (80034cc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80032c4:	2180      	movs	r1, #128	@ 0x80
 80032c6:	0549      	lsls	r1, r1, #21
 80032c8:	430a      	orrs	r2, r1
 80032ca:	63da      	str	r2, [r3, #60]	@ 0x3c
 80032cc:	4b7f      	ldr	r3, [pc, #508]	@ (80034cc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80032ce:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80032d0:	2380      	movs	r3, #128	@ 0x80
 80032d2:	055b      	lsls	r3, r3, #21
 80032d4:	4013      	ands	r3, r2
 80032d6:	60bb      	str	r3, [r7, #8]
 80032d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032da:	183b      	adds	r3, r7, r0
 80032dc:	2201      	movs	r2, #1
 80032de:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80032e0:	4b7b      	ldr	r3, [pc, #492]	@ (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80032e2:	681a      	ldr	r2, [r3, #0]
 80032e4:	4b7a      	ldr	r3, [pc, #488]	@ (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80032e6:	2180      	movs	r1, #128	@ 0x80
 80032e8:	0049      	lsls	r1, r1, #1
 80032ea:	430a      	orrs	r2, r1
 80032ec:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80032ee:	f7fe f85f 	bl	80013b0 <HAL_GetTick>
 80032f2:	0003      	movs	r3, r0
 80032f4:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80032f6:	e00b      	b.n	8003310 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032f8:	f7fe f85a 	bl	80013b0 <HAL_GetTick>
 80032fc:	0002      	movs	r2, r0
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	1ad3      	subs	r3, r2, r3
 8003302:	2b02      	cmp	r3, #2
 8003304:	d904      	bls.n	8003310 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8003306:	2313      	movs	r3, #19
 8003308:	18fb      	adds	r3, r7, r3
 800330a:	2203      	movs	r2, #3
 800330c:	701a      	strb	r2, [r3, #0]
        break;
 800330e:	e005      	b.n	800331c <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003310:	4b6f      	ldr	r3, [pc, #444]	@ (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8003312:	681a      	ldr	r2, [r3, #0]
 8003314:	2380      	movs	r3, #128	@ 0x80
 8003316:	005b      	lsls	r3, r3, #1
 8003318:	4013      	ands	r3, r2
 800331a:	d0ed      	beq.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 800331c:	2313      	movs	r3, #19
 800331e:	18fb      	adds	r3, r7, r3
 8003320:	781b      	ldrb	r3, [r3, #0]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d154      	bne.n	80033d0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003326:	4b69      	ldr	r3, [pc, #420]	@ (80034cc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003328:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800332a:	23c0      	movs	r3, #192	@ 0xc0
 800332c:	009b      	lsls	r3, r3, #2
 800332e:	4013      	ands	r3, r2
 8003330:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d019      	beq.n	800336c <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	699b      	ldr	r3, [r3, #24]
 800333c:	697a      	ldr	r2, [r7, #20]
 800333e:	429a      	cmp	r2, r3
 8003340:	d014      	beq.n	800336c <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003342:	4b62      	ldr	r3, [pc, #392]	@ (80034cc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003344:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003346:	4a63      	ldr	r2, [pc, #396]	@ (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8003348:	4013      	ands	r3, r2
 800334a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800334c:	4b5f      	ldr	r3, [pc, #380]	@ (80034cc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800334e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003350:	4b5e      	ldr	r3, [pc, #376]	@ (80034cc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003352:	2180      	movs	r1, #128	@ 0x80
 8003354:	0249      	lsls	r1, r1, #9
 8003356:	430a      	orrs	r2, r1
 8003358:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800335a:	4b5c      	ldr	r3, [pc, #368]	@ (80034cc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800335c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800335e:	4b5b      	ldr	r3, [pc, #364]	@ (80034cc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003360:	495d      	ldr	r1, [pc, #372]	@ (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003362:	400a      	ands	r2, r1
 8003364:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003366:	4b59      	ldr	r3, [pc, #356]	@ (80034cc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003368:	697a      	ldr	r2, [r7, #20]
 800336a:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800336c:	697b      	ldr	r3, [r7, #20]
 800336e:	2201      	movs	r2, #1
 8003370:	4013      	ands	r3, r2
 8003372:	d016      	beq.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003374:	f7fe f81c 	bl	80013b0 <HAL_GetTick>
 8003378:	0003      	movs	r3, r0
 800337a:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800337c:	e00c      	b.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800337e:	f7fe f817 	bl	80013b0 <HAL_GetTick>
 8003382:	0002      	movs	r2, r0
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	1ad3      	subs	r3, r2, r3
 8003388:	4a54      	ldr	r2, [pc, #336]	@ (80034dc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d904      	bls.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800338e:	2313      	movs	r3, #19
 8003390:	18fb      	adds	r3, r7, r3
 8003392:	2203      	movs	r2, #3
 8003394:	701a      	strb	r2, [r3, #0]
            break;
 8003396:	e004      	b.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003398:	4b4c      	ldr	r3, [pc, #304]	@ (80034cc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800339a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800339c:	2202      	movs	r2, #2
 800339e:	4013      	ands	r3, r2
 80033a0:	d0ed      	beq.n	800337e <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80033a2:	2313      	movs	r3, #19
 80033a4:	18fb      	adds	r3, r7, r3
 80033a6:	781b      	ldrb	r3, [r3, #0]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d10a      	bne.n	80033c2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80033ac:	4b47      	ldr	r3, [pc, #284]	@ (80034cc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80033ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033b0:	4a48      	ldr	r2, [pc, #288]	@ (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80033b2:	4013      	ands	r3, r2
 80033b4:	0019      	movs	r1, r3
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	699a      	ldr	r2, [r3, #24]
 80033ba:	4b44      	ldr	r3, [pc, #272]	@ (80034cc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80033bc:	430a      	orrs	r2, r1
 80033be:	65da      	str	r2, [r3, #92]	@ 0x5c
 80033c0:	e00c      	b.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80033c2:	2312      	movs	r3, #18
 80033c4:	18fb      	adds	r3, r7, r3
 80033c6:	2213      	movs	r2, #19
 80033c8:	18ba      	adds	r2, r7, r2
 80033ca:	7812      	ldrb	r2, [r2, #0]
 80033cc:	701a      	strb	r2, [r3, #0]
 80033ce:	e005      	b.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033d0:	2312      	movs	r3, #18
 80033d2:	18fb      	adds	r3, r7, r3
 80033d4:	2213      	movs	r2, #19
 80033d6:	18ba      	adds	r2, r7, r2
 80033d8:	7812      	ldrb	r2, [r2, #0]
 80033da:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80033dc:	2311      	movs	r3, #17
 80033de:	18fb      	adds	r3, r7, r3
 80033e0:	781b      	ldrb	r3, [r3, #0]
 80033e2:	2b01      	cmp	r3, #1
 80033e4:	d105      	bne.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033e6:	4b39      	ldr	r3, [pc, #228]	@ (80034cc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80033e8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80033ea:	4b38      	ldr	r3, [pc, #224]	@ (80034cc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80033ec:	493c      	ldr	r1, [pc, #240]	@ (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80033ee:	400a      	ands	r2, r1
 80033f0:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	2201      	movs	r2, #1
 80033f8:	4013      	ands	r3, r2
 80033fa:	d009      	beq.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80033fc:	4b33      	ldr	r3, [pc, #204]	@ (80034cc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80033fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003400:	2203      	movs	r2, #3
 8003402:	4393      	bics	r3, r2
 8003404:	0019      	movs	r1, r3
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	685a      	ldr	r2, [r3, #4]
 800340a:	4b30      	ldr	r3, [pc, #192]	@ (80034cc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800340c:	430a      	orrs	r2, r1
 800340e:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	2202      	movs	r2, #2
 8003416:	4013      	ands	r3, r2
 8003418:	d009      	beq.n	800342e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800341a:	4b2c      	ldr	r3, [pc, #176]	@ (80034cc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800341c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800341e:	220c      	movs	r2, #12
 8003420:	4393      	bics	r3, r2
 8003422:	0019      	movs	r1, r3
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	689a      	ldr	r2, [r3, #8]
 8003428:	4b28      	ldr	r3, [pc, #160]	@ (80034cc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800342a:	430a      	orrs	r2, r1
 800342c:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	2220      	movs	r2, #32
 8003434:	4013      	ands	r3, r2
 8003436:	d009      	beq.n	800344c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003438:	4b24      	ldr	r3, [pc, #144]	@ (80034cc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800343a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800343c:	4a29      	ldr	r2, [pc, #164]	@ (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800343e:	4013      	ands	r3, r2
 8003440:	0019      	movs	r1, r3
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	68da      	ldr	r2, [r3, #12]
 8003446:	4b21      	ldr	r3, [pc, #132]	@ (80034cc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003448:	430a      	orrs	r2, r1
 800344a:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681a      	ldr	r2, [r3, #0]
 8003450:	2380      	movs	r3, #128	@ 0x80
 8003452:	01db      	lsls	r3, r3, #7
 8003454:	4013      	ands	r3, r2
 8003456:	d015      	beq.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003458:	4b1c      	ldr	r3, [pc, #112]	@ (80034cc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800345a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800345c:	009b      	lsls	r3, r3, #2
 800345e:	0899      	lsrs	r1, r3, #2
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	695a      	ldr	r2, [r3, #20]
 8003464:	4b19      	ldr	r3, [pc, #100]	@ (80034cc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003466:	430a      	orrs	r2, r1
 8003468:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	695a      	ldr	r2, [r3, #20]
 800346e:	2380      	movs	r3, #128	@ 0x80
 8003470:	05db      	lsls	r3, r3, #23
 8003472:	429a      	cmp	r2, r3
 8003474:	d106      	bne.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003476:	4b15      	ldr	r3, [pc, #84]	@ (80034cc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003478:	68da      	ldr	r2, [r3, #12]
 800347a:	4b14      	ldr	r3, [pc, #80]	@ (80034cc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800347c:	2180      	movs	r1, #128	@ 0x80
 800347e:	0249      	lsls	r1, r1, #9
 8003480:	430a      	orrs	r2, r1
 8003482:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681a      	ldr	r2, [r3, #0]
 8003488:	2380      	movs	r3, #128	@ 0x80
 800348a:	011b      	lsls	r3, r3, #4
 800348c:	4013      	ands	r3, r2
 800348e:	d016      	beq.n	80034be <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8003490:	4b0e      	ldr	r3, [pc, #56]	@ (80034cc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003492:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003494:	4a14      	ldr	r2, [pc, #80]	@ (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003496:	4013      	ands	r3, r2
 8003498:	0019      	movs	r1, r3
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	691a      	ldr	r2, [r3, #16]
 800349e:	4b0b      	ldr	r3, [pc, #44]	@ (80034cc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80034a0:	430a      	orrs	r2, r1
 80034a2:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	691a      	ldr	r2, [r3, #16]
 80034a8:	2380      	movs	r3, #128	@ 0x80
 80034aa:	01db      	lsls	r3, r3, #7
 80034ac:	429a      	cmp	r2, r3
 80034ae:	d106      	bne.n	80034be <HAL_RCCEx_PeriphCLKConfig+0x23a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80034b0:	4b06      	ldr	r3, [pc, #24]	@ (80034cc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80034b2:	68da      	ldr	r2, [r3, #12]
 80034b4:	4b05      	ldr	r3, [pc, #20]	@ (80034cc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80034b6:	2180      	movs	r1, #128	@ 0x80
 80034b8:	0249      	lsls	r1, r1, #9
 80034ba:	430a      	orrs	r2, r1
 80034bc:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80034be:	2312      	movs	r3, #18
 80034c0:	18fb      	adds	r3, r7, r3
 80034c2:	781b      	ldrb	r3, [r3, #0]
}
 80034c4:	0018      	movs	r0, r3
 80034c6:	46bd      	mov	sp, r7
 80034c8:	b006      	add	sp, #24
 80034ca:	bd80      	pop	{r7, pc}
 80034cc:	40021000 	.word	0x40021000
 80034d0:	40007000 	.word	0x40007000
 80034d4:	fffffcff 	.word	0xfffffcff
 80034d8:	fffeffff 	.word	0xfffeffff
 80034dc:	00001388 	.word	0x00001388
 80034e0:	efffffff 	.word	0xefffffff
 80034e4:	ffffcfff 	.word	0xffffcfff
 80034e8:	ffff3fff 	.word	0xffff3fff

080034ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b082      	sub	sp, #8
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d101      	bne.n	80034fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80034fa:	2301      	movs	r3, #1
 80034fc:	e04a      	b.n	8003594 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	223d      	movs	r2, #61	@ 0x3d
 8003502:	5c9b      	ldrb	r3, [r3, r2]
 8003504:	b2db      	uxtb	r3, r3
 8003506:	2b00      	cmp	r3, #0
 8003508:	d107      	bne.n	800351a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	223c      	movs	r2, #60	@ 0x3c
 800350e:	2100      	movs	r1, #0
 8003510:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	0018      	movs	r0, r3
 8003516:	f7fd fd2d 	bl	8000f74 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	223d      	movs	r2, #61	@ 0x3d
 800351e:	2102      	movs	r1, #2
 8003520:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681a      	ldr	r2, [r3, #0]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	3304      	adds	r3, #4
 800352a:	0019      	movs	r1, r3
 800352c:	0010      	movs	r0, r2
 800352e:	f000 fa63 	bl	80039f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2248      	movs	r2, #72	@ 0x48
 8003536:	2101      	movs	r1, #1
 8003538:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	223e      	movs	r2, #62	@ 0x3e
 800353e:	2101      	movs	r1, #1
 8003540:	5499      	strb	r1, [r3, r2]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	223f      	movs	r2, #63	@ 0x3f
 8003546:	2101      	movs	r1, #1
 8003548:	5499      	strb	r1, [r3, r2]
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2240      	movs	r2, #64	@ 0x40
 800354e:	2101      	movs	r1, #1
 8003550:	5499      	strb	r1, [r3, r2]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2241      	movs	r2, #65	@ 0x41
 8003556:	2101      	movs	r1, #1
 8003558:	5499      	strb	r1, [r3, r2]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2242      	movs	r2, #66	@ 0x42
 800355e:	2101      	movs	r1, #1
 8003560:	5499      	strb	r1, [r3, r2]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2243      	movs	r2, #67	@ 0x43
 8003566:	2101      	movs	r1, #1
 8003568:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2244      	movs	r2, #68	@ 0x44
 800356e:	2101      	movs	r1, #1
 8003570:	5499      	strb	r1, [r3, r2]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2245      	movs	r2, #69	@ 0x45
 8003576:	2101      	movs	r1, #1
 8003578:	5499      	strb	r1, [r3, r2]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2246      	movs	r2, #70	@ 0x46
 800357e:	2101      	movs	r1, #1
 8003580:	5499      	strb	r1, [r3, r2]
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2247      	movs	r2, #71	@ 0x47
 8003586:	2101      	movs	r1, #1
 8003588:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	223d      	movs	r2, #61	@ 0x3d
 800358e:	2101      	movs	r1, #1
 8003590:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003592:	2300      	movs	r3, #0
}
 8003594:	0018      	movs	r0, r3
 8003596:	46bd      	mov	sp, r7
 8003598:	b002      	add	sp, #8
 800359a:	bd80      	pop	{r7, pc}

0800359c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b082      	sub	sp, #8
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d101      	bne.n	80035ae <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80035aa:	2301      	movs	r3, #1
 80035ac:	e04a      	b.n	8003644 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	223d      	movs	r2, #61	@ 0x3d
 80035b2:	5c9b      	ldrb	r3, [r3, r2]
 80035b4:	b2db      	uxtb	r3, r3
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d107      	bne.n	80035ca <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	223c      	movs	r2, #60	@ 0x3c
 80035be:	2100      	movs	r1, #0
 80035c0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	0018      	movs	r0, r3
 80035c6:	f7fd fd09 	bl	8000fdc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	223d      	movs	r2, #61	@ 0x3d
 80035ce:	2102      	movs	r1, #2
 80035d0:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681a      	ldr	r2, [r3, #0]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	3304      	adds	r3, #4
 80035da:	0019      	movs	r1, r3
 80035dc:	0010      	movs	r0, r2
 80035de:	f000 fa0b 	bl	80039f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2248      	movs	r2, #72	@ 0x48
 80035e6:	2101      	movs	r1, #1
 80035e8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	223e      	movs	r2, #62	@ 0x3e
 80035ee:	2101      	movs	r1, #1
 80035f0:	5499      	strb	r1, [r3, r2]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	223f      	movs	r2, #63	@ 0x3f
 80035f6:	2101      	movs	r1, #1
 80035f8:	5499      	strb	r1, [r3, r2]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2240      	movs	r2, #64	@ 0x40
 80035fe:	2101      	movs	r1, #1
 8003600:	5499      	strb	r1, [r3, r2]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2241      	movs	r2, #65	@ 0x41
 8003606:	2101      	movs	r1, #1
 8003608:	5499      	strb	r1, [r3, r2]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2242      	movs	r2, #66	@ 0x42
 800360e:	2101      	movs	r1, #1
 8003610:	5499      	strb	r1, [r3, r2]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2243      	movs	r2, #67	@ 0x43
 8003616:	2101      	movs	r1, #1
 8003618:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2244      	movs	r2, #68	@ 0x44
 800361e:	2101      	movs	r1, #1
 8003620:	5499      	strb	r1, [r3, r2]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2245      	movs	r2, #69	@ 0x45
 8003626:	2101      	movs	r1, #1
 8003628:	5499      	strb	r1, [r3, r2]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2246      	movs	r2, #70	@ 0x46
 800362e:	2101      	movs	r1, #1
 8003630:	5499      	strb	r1, [r3, r2]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2247      	movs	r2, #71	@ 0x47
 8003636:	2101      	movs	r1, #1
 8003638:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	223d      	movs	r2, #61	@ 0x3d
 800363e:	2101      	movs	r1, #1
 8003640:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003642:	2300      	movs	r3, #0
}
 8003644:	0018      	movs	r0, r3
 8003646:	46bd      	mov	sp, r7
 8003648:	b002      	add	sp, #8
 800364a:	bd80      	pop	{r7, pc}

0800364c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b086      	sub	sp, #24
 8003650:	af00      	add	r7, sp, #0
 8003652:	60f8      	str	r0, [r7, #12]
 8003654:	60b9      	str	r1, [r7, #8]
 8003656:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003658:	2317      	movs	r3, #23
 800365a:	18fb      	adds	r3, r7, r3
 800365c:	2200      	movs	r2, #0
 800365e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	223c      	movs	r2, #60	@ 0x3c
 8003664:	5c9b      	ldrb	r3, [r3, r2]
 8003666:	2b01      	cmp	r3, #1
 8003668:	d101      	bne.n	800366e <HAL_TIM_PWM_ConfigChannel+0x22>
 800366a:	2302      	movs	r3, #2
 800366c:	e0e5      	b.n	800383a <HAL_TIM_PWM_ConfigChannel+0x1ee>
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	223c      	movs	r2, #60	@ 0x3c
 8003672:	2101      	movs	r1, #1
 8003674:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2b14      	cmp	r3, #20
 800367a:	d900      	bls.n	800367e <HAL_TIM_PWM_ConfigChannel+0x32>
 800367c:	e0d1      	b.n	8003822 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	009a      	lsls	r2, r3, #2
 8003682:	4b70      	ldr	r3, [pc, #448]	@ (8003844 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8003684:	18d3      	adds	r3, r2, r3
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	68ba      	ldr	r2, [r7, #8]
 8003690:	0011      	movs	r1, r2
 8003692:	0018      	movs	r0, r3
 8003694:	f000 fa34 	bl	8003b00 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	699a      	ldr	r2, [r3, #24]
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	2108      	movs	r1, #8
 80036a4:	430a      	orrs	r2, r1
 80036a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	699a      	ldr	r2, [r3, #24]
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	2104      	movs	r1, #4
 80036b4:	438a      	bics	r2, r1
 80036b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	6999      	ldr	r1, [r3, #24]
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	691a      	ldr	r2, [r3, #16]
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	430a      	orrs	r2, r1
 80036c8:	619a      	str	r2, [r3, #24]
      break;
 80036ca:	e0af      	b.n	800382c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	68ba      	ldr	r2, [r7, #8]
 80036d2:	0011      	movs	r1, r2
 80036d4:	0018      	movs	r0, r3
 80036d6:	f000 fa9d 	bl	8003c14 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	699a      	ldr	r2, [r3, #24]
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	2180      	movs	r1, #128	@ 0x80
 80036e6:	0109      	lsls	r1, r1, #4
 80036e8:	430a      	orrs	r2, r1
 80036ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	699a      	ldr	r2, [r3, #24]
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4954      	ldr	r1, [pc, #336]	@ (8003848 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80036f8:	400a      	ands	r2, r1
 80036fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	6999      	ldr	r1, [r3, #24]
 8003702:	68bb      	ldr	r3, [r7, #8]
 8003704:	691b      	ldr	r3, [r3, #16]
 8003706:	021a      	lsls	r2, r3, #8
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	430a      	orrs	r2, r1
 800370e:	619a      	str	r2, [r3, #24]
      break;
 8003710:	e08c      	b.n	800382c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	68ba      	ldr	r2, [r7, #8]
 8003718:	0011      	movs	r1, r2
 800371a:	0018      	movs	r0, r3
 800371c:	f000 fafe 	bl	8003d1c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	69da      	ldr	r2, [r3, #28]
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	2108      	movs	r1, #8
 800372c:	430a      	orrs	r2, r1
 800372e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	69da      	ldr	r2, [r3, #28]
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	2104      	movs	r1, #4
 800373c:	438a      	bics	r2, r1
 800373e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	69d9      	ldr	r1, [r3, #28]
 8003746:	68bb      	ldr	r3, [r7, #8]
 8003748:	691a      	ldr	r2, [r3, #16]
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	430a      	orrs	r2, r1
 8003750:	61da      	str	r2, [r3, #28]
      break;
 8003752:	e06b      	b.n	800382c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	68ba      	ldr	r2, [r7, #8]
 800375a:	0011      	movs	r1, r2
 800375c:	0018      	movs	r0, r3
 800375e:	f000 fb65 	bl	8003e2c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	69da      	ldr	r2, [r3, #28]
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	2180      	movs	r1, #128	@ 0x80
 800376e:	0109      	lsls	r1, r1, #4
 8003770:	430a      	orrs	r2, r1
 8003772:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	69da      	ldr	r2, [r3, #28]
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4932      	ldr	r1, [pc, #200]	@ (8003848 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003780:	400a      	ands	r2, r1
 8003782:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	69d9      	ldr	r1, [r3, #28]
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	691b      	ldr	r3, [r3, #16]
 800378e:	021a      	lsls	r2, r3, #8
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	430a      	orrs	r2, r1
 8003796:	61da      	str	r2, [r3, #28]
      break;
 8003798:	e048      	b.n	800382c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	68ba      	ldr	r2, [r7, #8]
 80037a0:	0011      	movs	r1, r2
 80037a2:	0018      	movs	r0, r3
 80037a4:	f000 fbac 	bl	8003f00 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	2108      	movs	r1, #8
 80037b4:	430a      	orrs	r2, r1
 80037b6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	2104      	movs	r1, #4
 80037c4:	438a      	bics	r2, r1
 80037c6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80037ce:	68bb      	ldr	r3, [r7, #8]
 80037d0:	691a      	ldr	r2, [r3, #16]
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	430a      	orrs	r2, r1
 80037d8:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80037da:	e027      	b.n	800382c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	68ba      	ldr	r2, [r7, #8]
 80037e2:	0011      	movs	r1, r2
 80037e4:	0018      	movs	r0, r3
 80037e6:	f000 fbeb 	bl	8003fc0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	2180      	movs	r1, #128	@ 0x80
 80037f6:	0109      	lsls	r1, r1, #4
 80037f8:	430a      	orrs	r2, r1
 80037fa:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4910      	ldr	r1, [pc, #64]	@ (8003848 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003808:	400a      	ands	r2, r1
 800380a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	691b      	ldr	r3, [r3, #16]
 8003816:	021a      	lsls	r2, r3, #8
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	430a      	orrs	r2, r1
 800381e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003820:	e004      	b.n	800382c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8003822:	2317      	movs	r3, #23
 8003824:	18fb      	adds	r3, r7, r3
 8003826:	2201      	movs	r2, #1
 8003828:	701a      	strb	r2, [r3, #0]
      break;
 800382a:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	223c      	movs	r2, #60	@ 0x3c
 8003830:	2100      	movs	r1, #0
 8003832:	5499      	strb	r1, [r3, r2]

  return status;
 8003834:	2317      	movs	r3, #23
 8003836:	18fb      	adds	r3, r7, r3
 8003838:	781b      	ldrb	r3, [r3, #0]
}
 800383a:	0018      	movs	r0, r3
 800383c:	46bd      	mov	sp, r7
 800383e:	b006      	add	sp, #24
 8003840:	bd80      	pop	{r7, pc}
 8003842:	46c0      	nop			@ (mov r8, r8)
 8003844:	08005284 	.word	0x08005284
 8003848:	fffffbff 	.word	0xfffffbff

0800384c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b084      	sub	sp, #16
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
 8003854:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003856:	230f      	movs	r3, #15
 8003858:	18fb      	adds	r3, r7, r3
 800385a:	2200      	movs	r2, #0
 800385c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	223c      	movs	r2, #60	@ 0x3c
 8003862:	5c9b      	ldrb	r3, [r3, r2]
 8003864:	2b01      	cmp	r3, #1
 8003866:	d101      	bne.n	800386c <HAL_TIM_ConfigClockSource+0x20>
 8003868:	2302      	movs	r3, #2
 800386a:	e0bc      	b.n	80039e6 <HAL_TIM_ConfigClockSource+0x19a>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	223c      	movs	r2, #60	@ 0x3c
 8003870:	2101      	movs	r1, #1
 8003872:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	223d      	movs	r2, #61	@ 0x3d
 8003878:	2102      	movs	r1, #2
 800387a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	689b      	ldr	r3, [r3, #8]
 8003882:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	4a5a      	ldr	r2, [pc, #360]	@ (80039f0 <HAL_TIM_ConfigClockSource+0x1a4>)
 8003888:	4013      	ands	r3, r2
 800388a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	4a59      	ldr	r2, [pc, #356]	@ (80039f4 <HAL_TIM_ConfigClockSource+0x1a8>)
 8003890:	4013      	ands	r3, r2
 8003892:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	68ba      	ldr	r2, [r7, #8]
 800389a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	2280      	movs	r2, #128	@ 0x80
 80038a2:	0192      	lsls	r2, r2, #6
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d040      	beq.n	800392a <HAL_TIM_ConfigClockSource+0xde>
 80038a8:	2280      	movs	r2, #128	@ 0x80
 80038aa:	0192      	lsls	r2, r2, #6
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d900      	bls.n	80038b2 <HAL_TIM_ConfigClockSource+0x66>
 80038b0:	e088      	b.n	80039c4 <HAL_TIM_ConfigClockSource+0x178>
 80038b2:	2280      	movs	r2, #128	@ 0x80
 80038b4:	0152      	lsls	r2, r2, #5
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d100      	bne.n	80038bc <HAL_TIM_ConfigClockSource+0x70>
 80038ba:	e088      	b.n	80039ce <HAL_TIM_ConfigClockSource+0x182>
 80038bc:	2280      	movs	r2, #128	@ 0x80
 80038be:	0152      	lsls	r2, r2, #5
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d900      	bls.n	80038c6 <HAL_TIM_ConfigClockSource+0x7a>
 80038c4:	e07e      	b.n	80039c4 <HAL_TIM_ConfigClockSource+0x178>
 80038c6:	2b70      	cmp	r3, #112	@ 0x70
 80038c8:	d018      	beq.n	80038fc <HAL_TIM_ConfigClockSource+0xb0>
 80038ca:	d900      	bls.n	80038ce <HAL_TIM_ConfigClockSource+0x82>
 80038cc:	e07a      	b.n	80039c4 <HAL_TIM_ConfigClockSource+0x178>
 80038ce:	2b60      	cmp	r3, #96	@ 0x60
 80038d0:	d04f      	beq.n	8003972 <HAL_TIM_ConfigClockSource+0x126>
 80038d2:	d900      	bls.n	80038d6 <HAL_TIM_ConfigClockSource+0x8a>
 80038d4:	e076      	b.n	80039c4 <HAL_TIM_ConfigClockSource+0x178>
 80038d6:	2b50      	cmp	r3, #80	@ 0x50
 80038d8:	d03b      	beq.n	8003952 <HAL_TIM_ConfigClockSource+0x106>
 80038da:	d900      	bls.n	80038de <HAL_TIM_ConfigClockSource+0x92>
 80038dc:	e072      	b.n	80039c4 <HAL_TIM_ConfigClockSource+0x178>
 80038de:	2b40      	cmp	r3, #64	@ 0x40
 80038e0:	d057      	beq.n	8003992 <HAL_TIM_ConfigClockSource+0x146>
 80038e2:	d900      	bls.n	80038e6 <HAL_TIM_ConfigClockSource+0x9a>
 80038e4:	e06e      	b.n	80039c4 <HAL_TIM_ConfigClockSource+0x178>
 80038e6:	2b30      	cmp	r3, #48	@ 0x30
 80038e8:	d063      	beq.n	80039b2 <HAL_TIM_ConfigClockSource+0x166>
 80038ea:	d86b      	bhi.n	80039c4 <HAL_TIM_ConfigClockSource+0x178>
 80038ec:	2b20      	cmp	r3, #32
 80038ee:	d060      	beq.n	80039b2 <HAL_TIM_ConfigClockSource+0x166>
 80038f0:	d868      	bhi.n	80039c4 <HAL_TIM_ConfigClockSource+0x178>
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d05d      	beq.n	80039b2 <HAL_TIM_ConfigClockSource+0x166>
 80038f6:	2b10      	cmp	r3, #16
 80038f8:	d05b      	beq.n	80039b2 <HAL_TIM_ConfigClockSource+0x166>
 80038fa:	e063      	b.n	80039c4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800390c:	f000 fc38 	bl	8004180 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	689b      	ldr	r3, [r3, #8]
 8003916:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	2277      	movs	r2, #119	@ 0x77
 800391c:	4313      	orrs	r3, r2
 800391e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	68ba      	ldr	r2, [r7, #8]
 8003926:	609a      	str	r2, [r3, #8]
      break;
 8003928:	e052      	b.n	80039d0 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800393a:	f000 fc21 	bl	8004180 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	689a      	ldr	r2, [r3, #8]
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	2180      	movs	r1, #128	@ 0x80
 800394a:	01c9      	lsls	r1, r1, #7
 800394c:	430a      	orrs	r2, r1
 800394e:	609a      	str	r2, [r3, #8]
      break;
 8003950:	e03e      	b.n	80039d0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800395e:	001a      	movs	r2, r3
 8003960:	f000 fb92 	bl	8004088 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	2150      	movs	r1, #80	@ 0x50
 800396a:	0018      	movs	r0, r3
 800396c:	f000 fbec 	bl	8004148 <TIM_ITRx_SetConfig>
      break;
 8003970:	e02e      	b.n	80039d0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800397e:	001a      	movs	r2, r3
 8003980:	f000 fbb0 	bl	80040e4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	2160      	movs	r1, #96	@ 0x60
 800398a:	0018      	movs	r0, r3
 800398c:	f000 fbdc 	bl	8004148 <TIM_ITRx_SetConfig>
      break;
 8003990:	e01e      	b.n	80039d0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800399e:	001a      	movs	r2, r3
 80039a0:	f000 fb72 	bl	8004088 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	2140      	movs	r1, #64	@ 0x40
 80039aa:	0018      	movs	r0, r3
 80039ac:	f000 fbcc 	bl	8004148 <TIM_ITRx_SetConfig>
      break;
 80039b0:	e00e      	b.n	80039d0 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681a      	ldr	r2, [r3, #0]
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	0019      	movs	r1, r3
 80039bc:	0010      	movs	r0, r2
 80039be:	f000 fbc3 	bl	8004148 <TIM_ITRx_SetConfig>
      break;
 80039c2:	e005      	b.n	80039d0 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80039c4:	230f      	movs	r3, #15
 80039c6:	18fb      	adds	r3, r7, r3
 80039c8:	2201      	movs	r2, #1
 80039ca:	701a      	strb	r2, [r3, #0]
      break;
 80039cc:	e000      	b.n	80039d0 <HAL_TIM_ConfigClockSource+0x184>
      break;
 80039ce:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	223d      	movs	r2, #61	@ 0x3d
 80039d4:	2101      	movs	r1, #1
 80039d6:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	223c      	movs	r2, #60	@ 0x3c
 80039dc:	2100      	movs	r1, #0
 80039de:	5499      	strb	r1, [r3, r2]

  return status;
 80039e0:	230f      	movs	r3, #15
 80039e2:	18fb      	adds	r3, r7, r3
 80039e4:	781b      	ldrb	r3, [r3, #0]
}
 80039e6:	0018      	movs	r0, r3
 80039e8:	46bd      	mov	sp, r7
 80039ea:	b004      	add	sp, #16
 80039ec:	bd80      	pop	{r7, pc}
 80039ee:	46c0      	nop			@ (mov r8, r8)
 80039f0:	ffceff88 	.word	0xffceff88
 80039f4:	ffff00ff 	.word	0xffff00ff

080039f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b084      	sub	sp, #16
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
 8003a00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	4a36      	ldr	r2, [pc, #216]	@ (8003ae4 <TIM_Base_SetConfig+0xec>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d003      	beq.n	8003a18 <TIM_Base_SetConfig+0x20>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	4a35      	ldr	r2, [pc, #212]	@ (8003ae8 <TIM_Base_SetConfig+0xf0>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d108      	bne.n	8003a2a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	2270      	movs	r2, #112	@ 0x70
 8003a1c:	4393      	bics	r3, r2
 8003a1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	68fa      	ldr	r2, [r7, #12]
 8003a26:	4313      	orrs	r3, r2
 8003a28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	4a2d      	ldr	r2, [pc, #180]	@ (8003ae4 <TIM_Base_SetConfig+0xec>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d013      	beq.n	8003a5a <TIM_Base_SetConfig+0x62>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	4a2c      	ldr	r2, [pc, #176]	@ (8003ae8 <TIM_Base_SetConfig+0xf0>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d00f      	beq.n	8003a5a <TIM_Base_SetConfig+0x62>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	4a2b      	ldr	r2, [pc, #172]	@ (8003aec <TIM_Base_SetConfig+0xf4>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d00b      	beq.n	8003a5a <TIM_Base_SetConfig+0x62>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	4a2a      	ldr	r2, [pc, #168]	@ (8003af0 <TIM_Base_SetConfig+0xf8>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d007      	beq.n	8003a5a <TIM_Base_SetConfig+0x62>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	4a29      	ldr	r2, [pc, #164]	@ (8003af4 <TIM_Base_SetConfig+0xfc>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d003      	beq.n	8003a5a <TIM_Base_SetConfig+0x62>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	4a28      	ldr	r2, [pc, #160]	@ (8003af8 <TIM_Base_SetConfig+0x100>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d108      	bne.n	8003a6c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	4a27      	ldr	r2, [pc, #156]	@ (8003afc <TIM_Base_SetConfig+0x104>)
 8003a5e:	4013      	ands	r3, r2
 8003a60:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	68db      	ldr	r3, [r3, #12]
 8003a66:	68fa      	ldr	r2, [r7, #12]
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	2280      	movs	r2, #128	@ 0x80
 8003a70:	4393      	bics	r3, r2
 8003a72:	001a      	movs	r2, r3
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	695b      	ldr	r3, [r3, #20]
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	68fa      	ldr	r2, [r7, #12]
 8003a80:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	689a      	ldr	r2, [r3, #8]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	681a      	ldr	r2, [r3, #0]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	4a13      	ldr	r2, [pc, #76]	@ (8003ae4 <TIM_Base_SetConfig+0xec>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d00b      	beq.n	8003ab2 <TIM_Base_SetConfig+0xba>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	4a14      	ldr	r2, [pc, #80]	@ (8003af0 <TIM_Base_SetConfig+0xf8>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d007      	beq.n	8003ab2 <TIM_Base_SetConfig+0xba>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	4a13      	ldr	r2, [pc, #76]	@ (8003af4 <TIM_Base_SetConfig+0xfc>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d003      	beq.n	8003ab2 <TIM_Base_SetConfig+0xba>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	4a12      	ldr	r2, [pc, #72]	@ (8003af8 <TIM_Base_SetConfig+0x100>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d103      	bne.n	8003aba <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	691a      	ldr	r2, [r3, #16]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2201      	movs	r2, #1
 8003abe:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	691b      	ldr	r3, [r3, #16]
 8003ac4:	2201      	movs	r2, #1
 8003ac6:	4013      	ands	r3, r2
 8003ac8:	2b01      	cmp	r3, #1
 8003aca:	d106      	bne.n	8003ada <TIM_Base_SetConfig+0xe2>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	691b      	ldr	r3, [r3, #16]
 8003ad0:	2201      	movs	r2, #1
 8003ad2:	4393      	bics	r3, r2
 8003ad4:	001a      	movs	r2, r3
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	611a      	str	r2, [r3, #16]
  }
}
 8003ada:	46c0      	nop			@ (mov r8, r8)
 8003adc:	46bd      	mov	sp, r7
 8003ade:	b004      	add	sp, #16
 8003ae0:	bd80      	pop	{r7, pc}
 8003ae2:	46c0      	nop			@ (mov r8, r8)
 8003ae4:	40012c00 	.word	0x40012c00
 8003ae8:	40000400 	.word	0x40000400
 8003aec:	40002000 	.word	0x40002000
 8003af0:	40014000 	.word	0x40014000
 8003af4:	40014400 	.word	0x40014400
 8003af8:	40014800 	.word	0x40014800
 8003afc:	fffffcff 	.word	0xfffffcff

08003b00 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b086      	sub	sp, #24
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
 8003b08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6a1b      	ldr	r3, [r3, #32]
 8003b0e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6a1b      	ldr	r3, [r3, #32]
 8003b14:	2201      	movs	r2, #1
 8003b16:	4393      	bics	r3, r2
 8003b18:	001a      	movs	r2, r3
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	699b      	ldr	r3, [r3, #24]
 8003b28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	4a32      	ldr	r2, [pc, #200]	@ (8003bf8 <TIM_OC1_SetConfig+0xf8>)
 8003b2e:	4013      	ands	r3, r2
 8003b30:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	2203      	movs	r2, #3
 8003b36:	4393      	bics	r3, r2
 8003b38:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	68fa      	ldr	r2, [r7, #12]
 8003b40:	4313      	orrs	r3, r2
 8003b42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003b44:	697b      	ldr	r3, [r7, #20]
 8003b46:	2202      	movs	r2, #2
 8003b48:	4393      	bics	r3, r2
 8003b4a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	689b      	ldr	r3, [r3, #8]
 8003b50:	697a      	ldr	r2, [r7, #20]
 8003b52:	4313      	orrs	r3, r2
 8003b54:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	4a28      	ldr	r2, [pc, #160]	@ (8003bfc <TIM_OC1_SetConfig+0xfc>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d00b      	beq.n	8003b76 <TIM_OC1_SetConfig+0x76>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	4a27      	ldr	r2, [pc, #156]	@ (8003c00 <TIM_OC1_SetConfig+0x100>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d007      	beq.n	8003b76 <TIM_OC1_SetConfig+0x76>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	4a26      	ldr	r2, [pc, #152]	@ (8003c04 <TIM_OC1_SetConfig+0x104>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d003      	beq.n	8003b76 <TIM_OC1_SetConfig+0x76>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	4a25      	ldr	r2, [pc, #148]	@ (8003c08 <TIM_OC1_SetConfig+0x108>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d10c      	bne.n	8003b90 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003b76:	697b      	ldr	r3, [r7, #20]
 8003b78:	2208      	movs	r2, #8
 8003b7a:	4393      	bics	r3, r2
 8003b7c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	68db      	ldr	r3, [r3, #12]
 8003b82:	697a      	ldr	r2, [r7, #20]
 8003b84:	4313      	orrs	r3, r2
 8003b86:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003b88:	697b      	ldr	r3, [r7, #20]
 8003b8a:	2204      	movs	r2, #4
 8003b8c:	4393      	bics	r3, r2
 8003b8e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	4a1a      	ldr	r2, [pc, #104]	@ (8003bfc <TIM_OC1_SetConfig+0xfc>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d00b      	beq.n	8003bb0 <TIM_OC1_SetConfig+0xb0>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	4a19      	ldr	r2, [pc, #100]	@ (8003c00 <TIM_OC1_SetConfig+0x100>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d007      	beq.n	8003bb0 <TIM_OC1_SetConfig+0xb0>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	4a18      	ldr	r2, [pc, #96]	@ (8003c04 <TIM_OC1_SetConfig+0x104>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d003      	beq.n	8003bb0 <TIM_OC1_SetConfig+0xb0>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	4a17      	ldr	r2, [pc, #92]	@ (8003c08 <TIM_OC1_SetConfig+0x108>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d111      	bne.n	8003bd4 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003bb0:	693b      	ldr	r3, [r7, #16]
 8003bb2:	4a16      	ldr	r2, [pc, #88]	@ (8003c0c <TIM_OC1_SetConfig+0x10c>)
 8003bb4:	4013      	ands	r3, r2
 8003bb6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003bb8:	693b      	ldr	r3, [r7, #16]
 8003bba:	4a15      	ldr	r2, [pc, #84]	@ (8003c10 <TIM_OC1_SetConfig+0x110>)
 8003bbc:	4013      	ands	r3, r2
 8003bbe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	695b      	ldr	r3, [r3, #20]
 8003bc4:	693a      	ldr	r2, [r7, #16]
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	699b      	ldr	r3, [r3, #24]
 8003bce:	693a      	ldr	r2, [r7, #16]
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	693a      	ldr	r2, [r7, #16]
 8003bd8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	68fa      	ldr	r2, [r7, #12]
 8003bde:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	685a      	ldr	r2, [r3, #4]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	697a      	ldr	r2, [r7, #20]
 8003bec:	621a      	str	r2, [r3, #32]
}
 8003bee:	46c0      	nop			@ (mov r8, r8)
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	b006      	add	sp, #24
 8003bf4:	bd80      	pop	{r7, pc}
 8003bf6:	46c0      	nop			@ (mov r8, r8)
 8003bf8:	fffeff8f 	.word	0xfffeff8f
 8003bfc:	40012c00 	.word	0x40012c00
 8003c00:	40014000 	.word	0x40014000
 8003c04:	40014400 	.word	0x40014400
 8003c08:	40014800 	.word	0x40014800
 8003c0c:	fffffeff 	.word	0xfffffeff
 8003c10:	fffffdff 	.word	0xfffffdff

08003c14 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b086      	sub	sp, #24
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
 8003c1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6a1b      	ldr	r3, [r3, #32]
 8003c22:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6a1b      	ldr	r3, [r3, #32]
 8003c28:	2210      	movs	r2, #16
 8003c2a:	4393      	bics	r3, r2
 8003c2c:	001a      	movs	r2, r3
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	699b      	ldr	r3, [r3, #24]
 8003c3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	4a2e      	ldr	r2, [pc, #184]	@ (8003cfc <TIM_OC2_SetConfig+0xe8>)
 8003c42:	4013      	ands	r3, r2
 8003c44:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	4a2d      	ldr	r2, [pc, #180]	@ (8003d00 <TIM_OC2_SetConfig+0xec>)
 8003c4a:	4013      	ands	r3, r2
 8003c4c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	021b      	lsls	r3, r3, #8
 8003c54:	68fa      	ldr	r2, [r7, #12]
 8003c56:	4313      	orrs	r3, r2
 8003c58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003c5a:	697b      	ldr	r3, [r7, #20]
 8003c5c:	2220      	movs	r2, #32
 8003c5e:	4393      	bics	r3, r2
 8003c60:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	689b      	ldr	r3, [r3, #8]
 8003c66:	011b      	lsls	r3, r3, #4
 8003c68:	697a      	ldr	r2, [r7, #20]
 8003c6a:	4313      	orrs	r3, r2
 8003c6c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	4a24      	ldr	r2, [pc, #144]	@ (8003d04 <TIM_OC2_SetConfig+0xf0>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d10d      	bne.n	8003c92 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003c76:	697b      	ldr	r3, [r7, #20]
 8003c78:	2280      	movs	r2, #128	@ 0x80
 8003c7a:	4393      	bics	r3, r2
 8003c7c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	68db      	ldr	r3, [r3, #12]
 8003c82:	011b      	lsls	r3, r3, #4
 8003c84:	697a      	ldr	r2, [r7, #20]
 8003c86:	4313      	orrs	r3, r2
 8003c88:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003c8a:	697b      	ldr	r3, [r7, #20]
 8003c8c:	2240      	movs	r2, #64	@ 0x40
 8003c8e:	4393      	bics	r3, r2
 8003c90:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	4a1b      	ldr	r2, [pc, #108]	@ (8003d04 <TIM_OC2_SetConfig+0xf0>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d00b      	beq.n	8003cb2 <TIM_OC2_SetConfig+0x9e>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	4a1a      	ldr	r2, [pc, #104]	@ (8003d08 <TIM_OC2_SetConfig+0xf4>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d007      	beq.n	8003cb2 <TIM_OC2_SetConfig+0x9e>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	4a19      	ldr	r2, [pc, #100]	@ (8003d0c <TIM_OC2_SetConfig+0xf8>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d003      	beq.n	8003cb2 <TIM_OC2_SetConfig+0x9e>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	4a18      	ldr	r2, [pc, #96]	@ (8003d10 <TIM_OC2_SetConfig+0xfc>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d113      	bne.n	8003cda <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003cb2:	693b      	ldr	r3, [r7, #16]
 8003cb4:	4a17      	ldr	r2, [pc, #92]	@ (8003d14 <TIM_OC2_SetConfig+0x100>)
 8003cb6:	4013      	ands	r3, r2
 8003cb8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	4a16      	ldr	r2, [pc, #88]	@ (8003d18 <TIM_OC2_SetConfig+0x104>)
 8003cbe:	4013      	ands	r3, r2
 8003cc0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	695b      	ldr	r3, [r3, #20]
 8003cc6:	009b      	lsls	r3, r3, #2
 8003cc8:	693a      	ldr	r2, [r7, #16]
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	699b      	ldr	r3, [r3, #24]
 8003cd2:	009b      	lsls	r3, r3, #2
 8003cd4:	693a      	ldr	r2, [r7, #16]
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	693a      	ldr	r2, [r7, #16]
 8003cde:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	68fa      	ldr	r2, [r7, #12]
 8003ce4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	685a      	ldr	r2, [r3, #4]
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	697a      	ldr	r2, [r7, #20]
 8003cf2:	621a      	str	r2, [r3, #32]
}
 8003cf4:	46c0      	nop			@ (mov r8, r8)
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	b006      	add	sp, #24
 8003cfa:	bd80      	pop	{r7, pc}
 8003cfc:	feff8fff 	.word	0xfeff8fff
 8003d00:	fffffcff 	.word	0xfffffcff
 8003d04:	40012c00 	.word	0x40012c00
 8003d08:	40014000 	.word	0x40014000
 8003d0c:	40014400 	.word	0x40014400
 8003d10:	40014800 	.word	0x40014800
 8003d14:	fffffbff 	.word	0xfffffbff
 8003d18:	fffff7ff 	.word	0xfffff7ff

08003d1c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b086      	sub	sp, #24
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
 8003d24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6a1b      	ldr	r3, [r3, #32]
 8003d2a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6a1b      	ldr	r3, [r3, #32]
 8003d30:	4a33      	ldr	r2, [pc, #204]	@ (8003e00 <TIM_OC3_SetConfig+0xe4>)
 8003d32:	401a      	ands	r2, r3
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	69db      	ldr	r3, [r3, #28]
 8003d42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	4a2f      	ldr	r2, [pc, #188]	@ (8003e04 <TIM_OC3_SetConfig+0xe8>)
 8003d48:	4013      	ands	r3, r2
 8003d4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	2203      	movs	r2, #3
 8003d50:	4393      	bics	r3, r2
 8003d52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	68fa      	ldr	r2, [r7, #12]
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	4a29      	ldr	r2, [pc, #164]	@ (8003e08 <TIM_OC3_SetConfig+0xec>)
 8003d62:	4013      	ands	r3, r2
 8003d64:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	689b      	ldr	r3, [r3, #8]
 8003d6a:	021b      	lsls	r3, r3, #8
 8003d6c:	697a      	ldr	r2, [r7, #20]
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	4a25      	ldr	r2, [pc, #148]	@ (8003e0c <TIM_OC3_SetConfig+0xf0>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d10d      	bne.n	8003d96 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003d7a:	697b      	ldr	r3, [r7, #20]
 8003d7c:	4a24      	ldr	r2, [pc, #144]	@ (8003e10 <TIM_OC3_SetConfig+0xf4>)
 8003d7e:	4013      	ands	r3, r2
 8003d80:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	68db      	ldr	r3, [r3, #12]
 8003d86:	021b      	lsls	r3, r3, #8
 8003d88:	697a      	ldr	r2, [r7, #20]
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003d8e:	697b      	ldr	r3, [r7, #20]
 8003d90:	4a20      	ldr	r2, [pc, #128]	@ (8003e14 <TIM_OC3_SetConfig+0xf8>)
 8003d92:	4013      	ands	r3, r2
 8003d94:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	4a1c      	ldr	r2, [pc, #112]	@ (8003e0c <TIM_OC3_SetConfig+0xf0>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d00b      	beq.n	8003db6 <TIM_OC3_SetConfig+0x9a>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	4a1d      	ldr	r2, [pc, #116]	@ (8003e18 <TIM_OC3_SetConfig+0xfc>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d007      	beq.n	8003db6 <TIM_OC3_SetConfig+0x9a>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	4a1c      	ldr	r2, [pc, #112]	@ (8003e1c <TIM_OC3_SetConfig+0x100>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d003      	beq.n	8003db6 <TIM_OC3_SetConfig+0x9a>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	4a1b      	ldr	r2, [pc, #108]	@ (8003e20 <TIM_OC3_SetConfig+0x104>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d113      	bne.n	8003dde <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003db6:	693b      	ldr	r3, [r7, #16]
 8003db8:	4a1a      	ldr	r2, [pc, #104]	@ (8003e24 <TIM_OC3_SetConfig+0x108>)
 8003dba:	4013      	ands	r3, r2
 8003dbc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	4a19      	ldr	r2, [pc, #100]	@ (8003e28 <TIM_OC3_SetConfig+0x10c>)
 8003dc2:	4013      	ands	r3, r2
 8003dc4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	695b      	ldr	r3, [r3, #20]
 8003dca:	011b      	lsls	r3, r3, #4
 8003dcc:	693a      	ldr	r2, [r7, #16]
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	699b      	ldr	r3, [r3, #24]
 8003dd6:	011b      	lsls	r3, r3, #4
 8003dd8:	693a      	ldr	r2, [r7, #16]
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	693a      	ldr	r2, [r7, #16]
 8003de2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	68fa      	ldr	r2, [r7, #12]
 8003de8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	685a      	ldr	r2, [r3, #4]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	697a      	ldr	r2, [r7, #20]
 8003df6:	621a      	str	r2, [r3, #32]
}
 8003df8:	46c0      	nop			@ (mov r8, r8)
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	b006      	add	sp, #24
 8003dfe:	bd80      	pop	{r7, pc}
 8003e00:	fffffeff 	.word	0xfffffeff
 8003e04:	fffeff8f 	.word	0xfffeff8f
 8003e08:	fffffdff 	.word	0xfffffdff
 8003e0c:	40012c00 	.word	0x40012c00
 8003e10:	fffff7ff 	.word	0xfffff7ff
 8003e14:	fffffbff 	.word	0xfffffbff
 8003e18:	40014000 	.word	0x40014000
 8003e1c:	40014400 	.word	0x40014400
 8003e20:	40014800 	.word	0x40014800
 8003e24:	ffffefff 	.word	0xffffefff
 8003e28:	ffffdfff 	.word	0xffffdfff

08003e2c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b086      	sub	sp, #24
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
 8003e34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6a1b      	ldr	r3, [r3, #32]
 8003e3a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6a1b      	ldr	r3, [r3, #32]
 8003e40:	4a26      	ldr	r2, [pc, #152]	@ (8003edc <TIM_OC4_SetConfig+0xb0>)
 8003e42:	401a      	ands	r2, r3
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	69db      	ldr	r3, [r3, #28]
 8003e52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	4a22      	ldr	r2, [pc, #136]	@ (8003ee0 <TIM_OC4_SetConfig+0xb4>)
 8003e58:	4013      	ands	r3, r2
 8003e5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	4a21      	ldr	r2, [pc, #132]	@ (8003ee4 <TIM_OC4_SetConfig+0xb8>)
 8003e60:	4013      	ands	r3, r2
 8003e62:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	021b      	lsls	r3, r3, #8
 8003e6a:	68fa      	ldr	r2, [r7, #12]
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003e70:	693b      	ldr	r3, [r7, #16]
 8003e72:	4a1d      	ldr	r2, [pc, #116]	@ (8003ee8 <TIM_OC4_SetConfig+0xbc>)
 8003e74:	4013      	ands	r3, r2
 8003e76:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	689b      	ldr	r3, [r3, #8]
 8003e7c:	031b      	lsls	r3, r3, #12
 8003e7e:	693a      	ldr	r2, [r7, #16]
 8003e80:	4313      	orrs	r3, r2
 8003e82:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	4a19      	ldr	r2, [pc, #100]	@ (8003eec <TIM_OC4_SetConfig+0xc0>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d00b      	beq.n	8003ea4 <TIM_OC4_SetConfig+0x78>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	4a18      	ldr	r2, [pc, #96]	@ (8003ef0 <TIM_OC4_SetConfig+0xc4>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d007      	beq.n	8003ea4 <TIM_OC4_SetConfig+0x78>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	4a17      	ldr	r2, [pc, #92]	@ (8003ef4 <TIM_OC4_SetConfig+0xc8>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d003      	beq.n	8003ea4 <TIM_OC4_SetConfig+0x78>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	4a16      	ldr	r2, [pc, #88]	@ (8003ef8 <TIM_OC4_SetConfig+0xcc>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d109      	bne.n	8003eb8 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003ea4:	697b      	ldr	r3, [r7, #20]
 8003ea6:	4a15      	ldr	r2, [pc, #84]	@ (8003efc <TIM_OC4_SetConfig+0xd0>)
 8003ea8:	4013      	ands	r3, r2
 8003eaa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	695b      	ldr	r3, [r3, #20]
 8003eb0:	019b      	lsls	r3, r3, #6
 8003eb2:	697a      	ldr	r2, [r7, #20]
 8003eb4:	4313      	orrs	r3, r2
 8003eb6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	697a      	ldr	r2, [r7, #20]
 8003ebc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	68fa      	ldr	r2, [r7, #12]
 8003ec2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	685a      	ldr	r2, [r3, #4]
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	693a      	ldr	r2, [r7, #16]
 8003ed0:	621a      	str	r2, [r3, #32]
}
 8003ed2:	46c0      	nop			@ (mov r8, r8)
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	b006      	add	sp, #24
 8003ed8:	bd80      	pop	{r7, pc}
 8003eda:	46c0      	nop			@ (mov r8, r8)
 8003edc:	ffffefff 	.word	0xffffefff
 8003ee0:	feff8fff 	.word	0xfeff8fff
 8003ee4:	fffffcff 	.word	0xfffffcff
 8003ee8:	ffffdfff 	.word	0xffffdfff
 8003eec:	40012c00 	.word	0x40012c00
 8003ef0:	40014000 	.word	0x40014000
 8003ef4:	40014400 	.word	0x40014400
 8003ef8:	40014800 	.word	0x40014800
 8003efc:	ffffbfff 	.word	0xffffbfff

08003f00 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b086      	sub	sp, #24
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
 8003f08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6a1b      	ldr	r3, [r3, #32]
 8003f0e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6a1b      	ldr	r3, [r3, #32]
 8003f14:	4a23      	ldr	r2, [pc, #140]	@ (8003fa4 <TIM_OC5_SetConfig+0xa4>)
 8003f16:	401a      	ands	r2, r3
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	4a1f      	ldr	r2, [pc, #124]	@ (8003fa8 <TIM_OC5_SetConfig+0xa8>)
 8003f2c:	4013      	ands	r3, r2
 8003f2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	68fa      	ldr	r2, [r7, #12]
 8003f36:	4313      	orrs	r3, r2
 8003f38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003f3a:	693b      	ldr	r3, [r7, #16]
 8003f3c:	4a1b      	ldr	r2, [pc, #108]	@ (8003fac <TIM_OC5_SetConfig+0xac>)
 8003f3e:	4013      	ands	r3, r2
 8003f40:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	689b      	ldr	r3, [r3, #8]
 8003f46:	041b      	lsls	r3, r3, #16
 8003f48:	693a      	ldr	r2, [r7, #16]
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	4a17      	ldr	r2, [pc, #92]	@ (8003fb0 <TIM_OC5_SetConfig+0xb0>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d00b      	beq.n	8003f6e <TIM_OC5_SetConfig+0x6e>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	4a16      	ldr	r2, [pc, #88]	@ (8003fb4 <TIM_OC5_SetConfig+0xb4>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d007      	beq.n	8003f6e <TIM_OC5_SetConfig+0x6e>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	4a15      	ldr	r2, [pc, #84]	@ (8003fb8 <TIM_OC5_SetConfig+0xb8>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d003      	beq.n	8003f6e <TIM_OC5_SetConfig+0x6e>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	4a14      	ldr	r2, [pc, #80]	@ (8003fbc <TIM_OC5_SetConfig+0xbc>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d109      	bne.n	8003f82 <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003f6e:	697b      	ldr	r3, [r7, #20]
 8003f70:	4a0c      	ldr	r2, [pc, #48]	@ (8003fa4 <TIM_OC5_SetConfig+0xa4>)
 8003f72:	4013      	ands	r3, r2
 8003f74:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	695b      	ldr	r3, [r3, #20]
 8003f7a:	021b      	lsls	r3, r3, #8
 8003f7c:	697a      	ldr	r2, [r7, #20]
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	697a      	ldr	r2, [r7, #20]
 8003f86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	68fa      	ldr	r2, [r7, #12]
 8003f8c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	685a      	ldr	r2, [r3, #4]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	693a      	ldr	r2, [r7, #16]
 8003f9a:	621a      	str	r2, [r3, #32]
}
 8003f9c:	46c0      	nop			@ (mov r8, r8)
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	b006      	add	sp, #24
 8003fa2:	bd80      	pop	{r7, pc}
 8003fa4:	fffeffff 	.word	0xfffeffff
 8003fa8:	fffeff8f 	.word	0xfffeff8f
 8003fac:	fffdffff 	.word	0xfffdffff
 8003fb0:	40012c00 	.word	0x40012c00
 8003fb4:	40014000 	.word	0x40014000
 8003fb8:	40014400 	.word	0x40014400
 8003fbc:	40014800 	.word	0x40014800

08003fc0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b086      	sub	sp, #24
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
 8003fc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6a1b      	ldr	r3, [r3, #32]
 8003fce:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6a1b      	ldr	r3, [r3, #32]
 8003fd4:	4a24      	ldr	r2, [pc, #144]	@ (8004068 <TIM_OC6_SetConfig+0xa8>)
 8003fd6:	401a      	ands	r2, r3
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fe6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	4a20      	ldr	r2, [pc, #128]	@ (800406c <TIM_OC6_SetConfig+0xac>)
 8003fec:	4013      	ands	r3, r2
 8003fee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	021b      	lsls	r3, r3, #8
 8003ff6:	68fa      	ldr	r2, [r7, #12]
 8003ff8:	4313      	orrs	r3, r2
 8003ffa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003ffc:	693b      	ldr	r3, [r7, #16]
 8003ffe:	4a1c      	ldr	r2, [pc, #112]	@ (8004070 <TIM_OC6_SetConfig+0xb0>)
 8004000:	4013      	ands	r3, r2
 8004002:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	689b      	ldr	r3, [r3, #8]
 8004008:	051b      	lsls	r3, r3, #20
 800400a:	693a      	ldr	r2, [r7, #16]
 800400c:	4313      	orrs	r3, r2
 800400e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	4a18      	ldr	r2, [pc, #96]	@ (8004074 <TIM_OC6_SetConfig+0xb4>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d00b      	beq.n	8004030 <TIM_OC6_SetConfig+0x70>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	4a17      	ldr	r2, [pc, #92]	@ (8004078 <TIM_OC6_SetConfig+0xb8>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d007      	beq.n	8004030 <TIM_OC6_SetConfig+0x70>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	4a16      	ldr	r2, [pc, #88]	@ (800407c <TIM_OC6_SetConfig+0xbc>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d003      	beq.n	8004030 <TIM_OC6_SetConfig+0x70>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	4a15      	ldr	r2, [pc, #84]	@ (8004080 <TIM_OC6_SetConfig+0xc0>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d109      	bne.n	8004044 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004030:	697b      	ldr	r3, [r7, #20]
 8004032:	4a14      	ldr	r2, [pc, #80]	@ (8004084 <TIM_OC6_SetConfig+0xc4>)
 8004034:	4013      	ands	r3, r2
 8004036:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	695b      	ldr	r3, [r3, #20]
 800403c:	029b      	lsls	r3, r3, #10
 800403e:	697a      	ldr	r2, [r7, #20]
 8004040:	4313      	orrs	r3, r2
 8004042:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	697a      	ldr	r2, [r7, #20]
 8004048:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	68fa      	ldr	r2, [r7, #12]
 800404e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	685a      	ldr	r2, [r3, #4]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	693a      	ldr	r2, [r7, #16]
 800405c:	621a      	str	r2, [r3, #32]
}
 800405e:	46c0      	nop			@ (mov r8, r8)
 8004060:	46bd      	mov	sp, r7
 8004062:	b006      	add	sp, #24
 8004064:	bd80      	pop	{r7, pc}
 8004066:	46c0      	nop			@ (mov r8, r8)
 8004068:	ffefffff 	.word	0xffefffff
 800406c:	feff8fff 	.word	0xfeff8fff
 8004070:	ffdfffff 	.word	0xffdfffff
 8004074:	40012c00 	.word	0x40012c00
 8004078:	40014000 	.word	0x40014000
 800407c:	40014400 	.word	0x40014400
 8004080:	40014800 	.word	0x40014800
 8004084:	fffbffff 	.word	0xfffbffff

08004088 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b086      	sub	sp, #24
 800408c:	af00      	add	r7, sp, #0
 800408e:	60f8      	str	r0, [r7, #12]
 8004090:	60b9      	str	r1, [r7, #8]
 8004092:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	6a1b      	ldr	r3, [r3, #32]
 8004098:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	6a1b      	ldr	r3, [r3, #32]
 800409e:	2201      	movs	r2, #1
 80040a0:	4393      	bics	r3, r2
 80040a2:	001a      	movs	r2, r3
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	699b      	ldr	r3, [r3, #24]
 80040ac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80040ae:	693b      	ldr	r3, [r7, #16]
 80040b0:	22f0      	movs	r2, #240	@ 0xf0
 80040b2:	4393      	bics	r3, r2
 80040b4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	011b      	lsls	r3, r3, #4
 80040ba:	693a      	ldr	r2, [r7, #16]
 80040bc:	4313      	orrs	r3, r2
 80040be:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80040c0:	697b      	ldr	r3, [r7, #20]
 80040c2:	220a      	movs	r2, #10
 80040c4:	4393      	bics	r3, r2
 80040c6:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80040c8:	697a      	ldr	r2, [r7, #20]
 80040ca:	68bb      	ldr	r3, [r7, #8]
 80040cc:	4313      	orrs	r3, r2
 80040ce:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	693a      	ldr	r2, [r7, #16]
 80040d4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	697a      	ldr	r2, [r7, #20]
 80040da:	621a      	str	r2, [r3, #32]
}
 80040dc:	46c0      	nop			@ (mov r8, r8)
 80040de:	46bd      	mov	sp, r7
 80040e0:	b006      	add	sp, #24
 80040e2:	bd80      	pop	{r7, pc}

080040e4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b086      	sub	sp, #24
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	60f8      	str	r0, [r7, #12]
 80040ec:	60b9      	str	r1, [r7, #8]
 80040ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	6a1b      	ldr	r3, [r3, #32]
 80040f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	6a1b      	ldr	r3, [r3, #32]
 80040fa:	2210      	movs	r2, #16
 80040fc:	4393      	bics	r3, r2
 80040fe:	001a      	movs	r2, r3
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	699b      	ldr	r3, [r3, #24]
 8004108:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800410a:	693b      	ldr	r3, [r7, #16]
 800410c:	4a0d      	ldr	r2, [pc, #52]	@ (8004144 <TIM_TI2_ConfigInputStage+0x60>)
 800410e:	4013      	ands	r3, r2
 8004110:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	031b      	lsls	r3, r3, #12
 8004116:	693a      	ldr	r2, [r7, #16]
 8004118:	4313      	orrs	r3, r2
 800411a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800411c:	697b      	ldr	r3, [r7, #20]
 800411e:	22a0      	movs	r2, #160	@ 0xa0
 8004120:	4393      	bics	r3, r2
 8004122:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	011b      	lsls	r3, r3, #4
 8004128:	697a      	ldr	r2, [r7, #20]
 800412a:	4313      	orrs	r3, r2
 800412c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	693a      	ldr	r2, [r7, #16]
 8004132:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	697a      	ldr	r2, [r7, #20]
 8004138:	621a      	str	r2, [r3, #32]
}
 800413a:	46c0      	nop			@ (mov r8, r8)
 800413c:	46bd      	mov	sp, r7
 800413e:	b006      	add	sp, #24
 8004140:	bd80      	pop	{r7, pc}
 8004142:	46c0      	nop			@ (mov r8, r8)
 8004144:	ffff0fff 	.word	0xffff0fff

08004148 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b084      	sub	sp, #16
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
 8004150:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	689b      	ldr	r3, [r3, #8]
 8004156:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	4a08      	ldr	r2, [pc, #32]	@ (800417c <TIM_ITRx_SetConfig+0x34>)
 800415c:	4013      	ands	r3, r2
 800415e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004160:	683a      	ldr	r2, [r7, #0]
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	4313      	orrs	r3, r2
 8004166:	2207      	movs	r2, #7
 8004168:	4313      	orrs	r3, r2
 800416a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	68fa      	ldr	r2, [r7, #12]
 8004170:	609a      	str	r2, [r3, #8]
}
 8004172:	46c0      	nop			@ (mov r8, r8)
 8004174:	46bd      	mov	sp, r7
 8004176:	b004      	add	sp, #16
 8004178:	bd80      	pop	{r7, pc}
 800417a:	46c0      	nop			@ (mov r8, r8)
 800417c:	ffcfff8f 	.word	0xffcfff8f

08004180 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b086      	sub	sp, #24
 8004184:	af00      	add	r7, sp, #0
 8004186:	60f8      	str	r0, [r7, #12]
 8004188:	60b9      	str	r1, [r7, #8]
 800418a:	607a      	str	r2, [r7, #4]
 800418c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	689b      	ldr	r3, [r3, #8]
 8004192:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004194:	697b      	ldr	r3, [r7, #20]
 8004196:	4a09      	ldr	r2, [pc, #36]	@ (80041bc <TIM_ETR_SetConfig+0x3c>)
 8004198:	4013      	ands	r3, r2
 800419a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	021a      	lsls	r2, r3, #8
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	431a      	orrs	r2, r3
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	4313      	orrs	r3, r2
 80041a8:	697a      	ldr	r2, [r7, #20]
 80041aa:	4313      	orrs	r3, r2
 80041ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	697a      	ldr	r2, [r7, #20]
 80041b2:	609a      	str	r2, [r3, #8]
}
 80041b4:	46c0      	nop			@ (mov r8, r8)
 80041b6:	46bd      	mov	sp, r7
 80041b8:	b006      	add	sp, #24
 80041ba:	bd80      	pop	{r7, pc}
 80041bc:	ffff00ff 	.word	0xffff00ff

080041c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b084      	sub	sp, #16
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
 80041c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	223c      	movs	r2, #60	@ 0x3c
 80041ce:	5c9b      	ldrb	r3, [r3, r2]
 80041d0:	2b01      	cmp	r3, #1
 80041d2:	d101      	bne.n	80041d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80041d4:	2302      	movs	r3, #2
 80041d6:	e04f      	b.n	8004278 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	223c      	movs	r2, #60	@ 0x3c
 80041dc:	2101      	movs	r1, #1
 80041de:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	223d      	movs	r2, #61	@ 0x3d
 80041e4:	2102      	movs	r1, #2
 80041e6:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	689b      	ldr	r3, [r3, #8]
 80041f6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4a20      	ldr	r2, [pc, #128]	@ (8004280 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d108      	bne.n	8004214 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	4a1f      	ldr	r2, [pc, #124]	@ (8004284 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004206:	4013      	ands	r3, r2
 8004208:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	68fa      	ldr	r2, [r7, #12]
 8004210:	4313      	orrs	r3, r2
 8004212:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	2270      	movs	r2, #112	@ 0x70
 8004218:	4393      	bics	r3, r2
 800421a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	68fa      	ldr	r2, [r7, #12]
 8004222:	4313      	orrs	r3, r2
 8004224:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	68fa      	ldr	r2, [r7, #12]
 800422c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4a13      	ldr	r2, [pc, #76]	@ (8004280 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d009      	beq.n	800424c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a12      	ldr	r2, [pc, #72]	@ (8004288 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d004      	beq.n	800424c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4a11      	ldr	r2, [pc, #68]	@ (800428c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d10c      	bne.n	8004266 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800424c:	68bb      	ldr	r3, [r7, #8]
 800424e:	2280      	movs	r2, #128	@ 0x80
 8004250:	4393      	bics	r3, r2
 8004252:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	689b      	ldr	r3, [r3, #8]
 8004258:	68ba      	ldr	r2, [r7, #8]
 800425a:	4313      	orrs	r3, r2
 800425c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	68ba      	ldr	r2, [r7, #8]
 8004264:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	223d      	movs	r2, #61	@ 0x3d
 800426a:	2101      	movs	r1, #1
 800426c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	223c      	movs	r2, #60	@ 0x3c
 8004272:	2100      	movs	r1, #0
 8004274:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004276:	2300      	movs	r3, #0
}
 8004278:	0018      	movs	r0, r3
 800427a:	46bd      	mov	sp, r7
 800427c:	b004      	add	sp, #16
 800427e:	bd80      	pop	{r7, pc}
 8004280:	40012c00 	.word	0x40012c00
 8004284:	ff0fffff 	.word	0xff0fffff
 8004288:	40000400 	.word	0x40000400
 800428c:	40014000 	.word	0x40014000

08004290 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b084      	sub	sp, #16
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
 8004298:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800429a:	2300      	movs	r3, #0
 800429c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	223c      	movs	r2, #60	@ 0x3c
 80042a2:	5c9b      	ldrb	r3, [r3, r2]
 80042a4:	2b01      	cmp	r3, #1
 80042a6:	d101      	bne.n	80042ac <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80042a8:	2302      	movs	r3, #2
 80042aa:	e06f      	b.n	800438c <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	223c      	movs	r2, #60	@ 0x3c
 80042b0:	2101      	movs	r1, #1
 80042b2:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	22ff      	movs	r2, #255	@ 0xff
 80042b8:	4393      	bics	r3, r2
 80042ba:	001a      	movs	r2, r3
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	68db      	ldr	r3, [r3, #12]
 80042c0:	4313      	orrs	r3, r2
 80042c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	4a33      	ldr	r2, [pc, #204]	@ (8004394 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 80042c8:	401a      	ands	r2, r3
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	689b      	ldr	r3, [r3, #8]
 80042ce:	4313      	orrs	r3, r2
 80042d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	4a30      	ldr	r2, [pc, #192]	@ (8004398 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 80042d6:	401a      	ands	r2, r3
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	4313      	orrs	r3, r2
 80042de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	4a2e      	ldr	r2, [pc, #184]	@ (800439c <HAL_TIMEx_ConfigBreakDeadTime+0x10c>)
 80042e4:	401a      	ands	r2, r3
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4313      	orrs	r3, r2
 80042ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	4a2b      	ldr	r2, [pc, #172]	@ (80043a0 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 80042f2:	401a      	ands	r2, r3
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	691b      	ldr	r3, [r3, #16]
 80042f8:	4313      	orrs	r3, r2
 80042fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	4a29      	ldr	r2, [pc, #164]	@ (80043a4 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8004300:	401a      	ands	r2, r3
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	695b      	ldr	r3, [r3, #20]
 8004306:	4313      	orrs	r3, r2
 8004308:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	4a26      	ldr	r2, [pc, #152]	@ (80043a8 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 800430e:	401a      	ands	r2, r3
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004314:	4313      	orrs	r3, r2
 8004316:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	4a24      	ldr	r2, [pc, #144]	@ (80043ac <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800431c:	401a      	ands	r2, r3
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	699b      	ldr	r3, [r3, #24]
 8004322:	041b      	lsls	r3, r3, #16
 8004324:	4313      	orrs	r3, r2
 8004326:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	4a21      	ldr	r2, [pc, #132]	@ (80043b0 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800432c:	401a      	ands	r2, r3
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	69db      	ldr	r3, [r3, #28]
 8004332:	4313      	orrs	r3, r2
 8004334:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4a1e      	ldr	r2, [pc, #120]	@ (80043b4 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d11c      	bne.n	800437a <HAL_TIMEx_ConfigBreakDeadTime+0xea>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	4a1d      	ldr	r2, [pc, #116]	@ (80043b8 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8004344:	401a      	ands	r2, r3
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800434a:	051b      	lsls	r3, r3, #20
 800434c:	4313      	orrs	r3, r2
 800434e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	4a1a      	ldr	r2, [pc, #104]	@ (80043bc <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8004354:	401a      	ands	r2, r3
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	6a1b      	ldr	r3, [r3, #32]
 800435a:	4313      	orrs	r3, r2
 800435c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	4a17      	ldr	r2, [pc, #92]	@ (80043c0 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8004362:	401a      	ands	r2, r3
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004368:	4313      	orrs	r3, r2
 800436a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	4a15      	ldr	r2, [pc, #84]	@ (80043c4 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8004370:	401a      	ands	r2, r3
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004376:	4313      	orrs	r3, r2
 8004378:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	68fa      	ldr	r2, [r7, #12]
 8004380:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	223c      	movs	r2, #60	@ 0x3c
 8004386:	2100      	movs	r1, #0
 8004388:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800438a:	2300      	movs	r3, #0
}
 800438c:	0018      	movs	r0, r3
 800438e:	46bd      	mov	sp, r7
 8004390:	b004      	add	sp, #16
 8004392:	bd80      	pop	{r7, pc}
 8004394:	fffffcff 	.word	0xfffffcff
 8004398:	fffffbff 	.word	0xfffffbff
 800439c:	fffff7ff 	.word	0xfffff7ff
 80043a0:	ffffefff 	.word	0xffffefff
 80043a4:	ffffdfff 	.word	0xffffdfff
 80043a8:	ffffbfff 	.word	0xffffbfff
 80043ac:	fff0ffff 	.word	0xfff0ffff
 80043b0:	efffffff 	.word	0xefffffff
 80043b4:	40012c00 	.word	0x40012c00
 80043b8:	ff0fffff 	.word	0xff0fffff
 80043bc:	feffffff 	.word	0xfeffffff
 80043c0:	fdffffff 	.word	0xfdffffff
 80043c4:	dfffffff 	.word	0xdfffffff

080043c8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b082      	sub	sp, #8
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d101      	bne.n	80043da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80043d6:	2301      	movs	r3, #1
 80043d8:	e046      	b.n	8004468 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2288      	movs	r2, #136	@ 0x88
 80043de:	589b      	ldr	r3, [r3, r2]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d107      	bne.n	80043f4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2284      	movs	r2, #132	@ 0x84
 80043e8:	2100      	movs	r1, #0
 80043ea:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	0018      	movs	r0, r3
 80043f0:	f7fc fef6 	bl	80011e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2288      	movs	r2, #136	@ 0x88
 80043f8:	2124      	movs	r1, #36	@ 0x24
 80043fa:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	681a      	ldr	r2, [r3, #0]
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	2101      	movs	r1, #1
 8004408:	438a      	bics	r2, r1
 800440a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004410:	2b00      	cmp	r3, #0
 8004412:	d003      	beq.n	800441c <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	0018      	movs	r0, r3
 8004418:	f000 f9d0 	bl	80047bc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	0018      	movs	r0, r3
 8004420:	f000 f828 	bl	8004474 <UART_SetConfig>
 8004424:	0003      	movs	r3, r0
 8004426:	2b01      	cmp	r3, #1
 8004428:	d101      	bne.n	800442e <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 800442a:	2301      	movs	r3, #1
 800442c:	e01c      	b.n	8004468 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	685a      	ldr	r2, [r3, #4]
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	490d      	ldr	r1, [pc, #52]	@ (8004470 <HAL_UART_Init+0xa8>)
 800443a:	400a      	ands	r2, r1
 800443c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	689a      	ldr	r2, [r3, #8]
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	212a      	movs	r1, #42	@ 0x2a
 800444a:	438a      	bics	r2, r1
 800444c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	681a      	ldr	r2, [r3, #0]
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	2101      	movs	r1, #1
 800445a:	430a      	orrs	r2, r1
 800445c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	0018      	movs	r0, r3
 8004462:	f000 fa5f 	bl	8004924 <UART_CheckIdleState>
 8004466:	0003      	movs	r3, r0
}
 8004468:	0018      	movs	r0, r3
 800446a:	46bd      	mov	sp, r7
 800446c:	b002      	add	sp, #8
 800446e:	bd80      	pop	{r7, pc}
 8004470:	ffffb7ff 	.word	0xffffb7ff

08004474 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b088      	sub	sp, #32
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800447c:	231a      	movs	r3, #26
 800447e:	18fb      	adds	r3, r7, r3
 8004480:	2200      	movs	r2, #0
 8004482:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	689a      	ldr	r2, [r3, #8]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	691b      	ldr	r3, [r3, #16]
 800448c:	431a      	orrs	r2, r3
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	695b      	ldr	r3, [r3, #20]
 8004492:	431a      	orrs	r2, r3
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	69db      	ldr	r3, [r3, #28]
 8004498:	4313      	orrs	r3, r2
 800449a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4abc      	ldr	r2, [pc, #752]	@ (8004794 <UART_SetConfig+0x320>)
 80044a4:	4013      	ands	r3, r2
 80044a6:	0019      	movs	r1, r3
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	69fa      	ldr	r2, [r7, #28]
 80044ae:	430a      	orrs	r2, r1
 80044b0:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	4ab7      	ldr	r2, [pc, #732]	@ (8004798 <UART_SetConfig+0x324>)
 80044ba:	4013      	ands	r3, r2
 80044bc:	0019      	movs	r1, r3
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	68da      	ldr	r2, [r3, #12]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	430a      	orrs	r2, r1
 80044c8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	699b      	ldr	r3, [r3, #24]
 80044ce:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6a1b      	ldr	r3, [r3, #32]
 80044d4:	69fa      	ldr	r2, [r7, #28]
 80044d6:	4313      	orrs	r3, r2
 80044d8:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	689b      	ldr	r3, [r3, #8]
 80044e0:	4aae      	ldr	r2, [pc, #696]	@ (800479c <UART_SetConfig+0x328>)
 80044e2:	4013      	ands	r3, r2
 80044e4:	0019      	movs	r1, r3
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	69fa      	ldr	r2, [r7, #28]
 80044ec:	430a      	orrs	r2, r1
 80044ee:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044f6:	220f      	movs	r2, #15
 80044f8:	4393      	bics	r3, r2
 80044fa:	0019      	movs	r1, r3
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	430a      	orrs	r2, r1
 8004506:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4aa4      	ldr	r2, [pc, #656]	@ (80047a0 <UART_SetConfig+0x32c>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d127      	bne.n	8004562 <UART_SetConfig+0xee>
 8004512:	4ba4      	ldr	r3, [pc, #656]	@ (80047a4 <UART_SetConfig+0x330>)
 8004514:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004516:	2203      	movs	r2, #3
 8004518:	4013      	ands	r3, r2
 800451a:	2b03      	cmp	r3, #3
 800451c:	d017      	beq.n	800454e <UART_SetConfig+0xda>
 800451e:	d81b      	bhi.n	8004558 <UART_SetConfig+0xe4>
 8004520:	2b02      	cmp	r3, #2
 8004522:	d00a      	beq.n	800453a <UART_SetConfig+0xc6>
 8004524:	d818      	bhi.n	8004558 <UART_SetConfig+0xe4>
 8004526:	2b00      	cmp	r3, #0
 8004528:	d002      	beq.n	8004530 <UART_SetConfig+0xbc>
 800452a:	2b01      	cmp	r3, #1
 800452c:	d00a      	beq.n	8004544 <UART_SetConfig+0xd0>
 800452e:	e013      	b.n	8004558 <UART_SetConfig+0xe4>
 8004530:	231b      	movs	r3, #27
 8004532:	18fb      	adds	r3, r7, r3
 8004534:	2200      	movs	r2, #0
 8004536:	701a      	strb	r2, [r3, #0]
 8004538:	e058      	b.n	80045ec <UART_SetConfig+0x178>
 800453a:	231b      	movs	r3, #27
 800453c:	18fb      	adds	r3, r7, r3
 800453e:	2202      	movs	r2, #2
 8004540:	701a      	strb	r2, [r3, #0]
 8004542:	e053      	b.n	80045ec <UART_SetConfig+0x178>
 8004544:	231b      	movs	r3, #27
 8004546:	18fb      	adds	r3, r7, r3
 8004548:	2204      	movs	r2, #4
 800454a:	701a      	strb	r2, [r3, #0]
 800454c:	e04e      	b.n	80045ec <UART_SetConfig+0x178>
 800454e:	231b      	movs	r3, #27
 8004550:	18fb      	adds	r3, r7, r3
 8004552:	2208      	movs	r2, #8
 8004554:	701a      	strb	r2, [r3, #0]
 8004556:	e049      	b.n	80045ec <UART_SetConfig+0x178>
 8004558:	231b      	movs	r3, #27
 800455a:	18fb      	adds	r3, r7, r3
 800455c:	2210      	movs	r2, #16
 800455e:	701a      	strb	r2, [r3, #0]
 8004560:	e044      	b.n	80045ec <UART_SetConfig+0x178>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4a90      	ldr	r2, [pc, #576]	@ (80047a8 <UART_SetConfig+0x334>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d127      	bne.n	80045bc <UART_SetConfig+0x148>
 800456c:	4b8d      	ldr	r3, [pc, #564]	@ (80047a4 <UART_SetConfig+0x330>)
 800456e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004570:	220c      	movs	r2, #12
 8004572:	4013      	ands	r3, r2
 8004574:	2b0c      	cmp	r3, #12
 8004576:	d017      	beq.n	80045a8 <UART_SetConfig+0x134>
 8004578:	d81b      	bhi.n	80045b2 <UART_SetConfig+0x13e>
 800457a:	2b08      	cmp	r3, #8
 800457c:	d00a      	beq.n	8004594 <UART_SetConfig+0x120>
 800457e:	d818      	bhi.n	80045b2 <UART_SetConfig+0x13e>
 8004580:	2b00      	cmp	r3, #0
 8004582:	d002      	beq.n	800458a <UART_SetConfig+0x116>
 8004584:	2b04      	cmp	r3, #4
 8004586:	d00a      	beq.n	800459e <UART_SetConfig+0x12a>
 8004588:	e013      	b.n	80045b2 <UART_SetConfig+0x13e>
 800458a:	231b      	movs	r3, #27
 800458c:	18fb      	adds	r3, r7, r3
 800458e:	2200      	movs	r2, #0
 8004590:	701a      	strb	r2, [r3, #0]
 8004592:	e02b      	b.n	80045ec <UART_SetConfig+0x178>
 8004594:	231b      	movs	r3, #27
 8004596:	18fb      	adds	r3, r7, r3
 8004598:	2202      	movs	r2, #2
 800459a:	701a      	strb	r2, [r3, #0]
 800459c:	e026      	b.n	80045ec <UART_SetConfig+0x178>
 800459e:	231b      	movs	r3, #27
 80045a0:	18fb      	adds	r3, r7, r3
 80045a2:	2204      	movs	r2, #4
 80045a4:	701a      	strb	r2, [r3, #0]
 80045a6:	e021      	b.n	80045ec <UART_SetConfig+0x178>
 80045a8:	231b      	movs	r3, #27
 80045aa:	18fb      	adds	r3, r7, r3
 80045ac:	2208      	movs	r2, #8
 80045ae:	701a      	strb	r2, [r3, #0]
 80045b0:	e01c      	b.n	80045ec <UART_SetConfig+0x178>
 80045b2:	231b      	movs	r3, #27
 80045b4:	18fb      	adds	r3, r7, r3
 80045b6:	2210      	movs	r2, #16
 80045b8:	701a      	strb	r2, [r3, #0]
 80045ba:	e017      	b.n	80045ec <UART_SetConfig+0x178>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a7a      	ldr	r2, [pc, #488]	@ (80047ac <UART_SetConfig+0x338>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d104      	bne.n	80045d0 <UART_SetConfig+0x15c>
 80045c6:	231b      	movs	r3, #27
 80045c8:	18fb      	adds	r3, r7, r3
 80045ca:	2200      	movs	r2, #0
 80045cc:	701a      	strb	r2, [r3, #0]
 80045ce:	e00d      	b.n	80045ec <UART_SetConfig+0x178>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4a76      	ldr	r2, [pc, #472]	@ (80047b0 <UART_SetConfig+0x33c>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d104      	bne.n	80045e4 <UART_SetConfig+0x170>
 80045da:	231b      	movs	r3, #27
 80045dc:	18fb      	adds	r3, r7, r3
 80045de:	2200      	movs	r2, #0
 80045e0:	701a      	strb	r2, [r3, #0]
 80045e2:	e003      	b.n	80045ec <UART_SetConfig+0x178>
 80045e4:	231b      	movs	r3, #27
 80045e6:	18fb      	adds	r3, r7, r3
 80045e8:	2210      	movs	r2, #16
 80045ea:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	69da      	ldr	r2, [r3, #28]
 80045f0:	2380      	movs	r3, #128	@ 0x80
 80045f2:	021b      	lsls	r3, r3, #8
 80045f4:	429a      	cmp	r2, r3
 80045f6:	d000      	beq.n	80045fa <UART_SetConfig+0x186>
 80045f8:	e065      	b.n	80046c6 <UART_SetConfig+0x252>
  {
    switch (clocksource)
 80045fa:	231b      	movs	r3, #27
 80045fc:	18fb      	adds	r3, r7, r3
 80045fe:	781b      	ldrb	r3, [r3, #0]
 8004600:	2b08      	cmp	r3, #8
 8004602:	d015      	beq.n	8004630 <UART_SetConfig+0x1bc>
 8004604:	dc18      	bgt.n	8004638 <UART_SetConfig+0x1c4>
 8004606:	2b04      	cmp	r3, #4
 8004608:	d00d      	beq.n	8004626 <UART_SetConfig+0x1b2>
 800460a:	dc15      	bgt.n	8004638 <UART_SetConfig+0x1c4>
 800460c:	2b00      	cmp	r3, #0
 800460e:	d002      	beq.n	8004616 <UART_SetConfig+0x1a2>
 8004610:	2b02      	cmp	r3, #2
 8004612:	d005      	beq.n	8004620 <UART_SetConfig+0x1ac>
 8004614:	e010      	b.n	8004638 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004616:	f7fe fe1f 	bl	8003258 <HAL_RCC_GetPCLK1Freq>
 800461a:	0003      	movs	r3, r0
 800461c:	617b      	str	r3, [r7, #20]
        break;
 800461e:	e012      	b.n	8004646 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004620:	4b64      	ldr	r3, [pc, #400]	@ (80047b4 <UART_SetConfig+0x340>)
 8004622:	617b      	str	r3, [r7, #20]
        break;
 8004624:	e00f      	b.n	8004646 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004626:	f7fe fd8b 	bl	8003140 <HAL_RCC_GetSysClockFreq>
 800462a:	0003      	movs	r3, r0
 800462c:	617b      	str	r3, [r7, #20]
        break;
 800462e:	e00a      	b.n	8004646 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004630:	2380      	movs	r3, #128	@ 0x80
 8004632:	021b      	lsls	r3, r3, #8
 8004634:	617b      	str	r3, [r7, #20]
        break;
 8004636:	e006      	b.n	8004646 <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8004638:	2300      	movs	r3, #0
 800463a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800463c:	231a      	movs	r3, #26
 800463e:	18fb      	adds	r3, r7, r3
 8004640:	2201      	movs	r2, #1
 8004642:	701a      	strb	r2, [r3, #0]
        break;
 8004644:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004646:	697b      	ldr	r3, [r7, #20]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d100      	bne.n	800464e <UART_SetConfig+0x1da>
 800464c:	e08d      	b.n	800476a <UART_SetConfig+0x2f6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004652:	4b59      	ldr	r3, [pc, #356]	@ (80047b8 <UART_SetConfig+0x344>)
 8004654:	0052      	lsls	r2, r2, #1
 8004656:	5ad3      	ldrh	r3, [r2, r3]
 8004658:	0019      	movs	r1, r3
 800465a:	6978      	ldr	r0, [r7, #20]
 800465c:	f7fb fdac 	bl	80001b8 <__udivsi3>
 8004660:	0003      	movs	r3, r0
 8004662:	005a      	lsls	r2, r3, #1
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	685b      	ldr	r3, [r3, #4]
 8004668:	085b      	lsrs	r3, r3, #1
 800466a:	18d2      	adds	r2, r2, r3
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	0019      	movs	r1, r3
 8004672:	0010      	movs	r0, r2
 8004674:	f7fb fda0 	bl	80001b8 <__udivsi3>
 8004678:	0003      	movs	r3, r0
 800467a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800467c:	693b      	ldr	r3, [r7, #16]
 800467e:	2b0f      	cmp	r3, #15
 8004680:	d91c      	bls.n	80046bc <UART_SetConfig+0x248>
 8004682:	693a      	ldr	r2, [r7, #16]
 8004684:	2380      	movs	r3, #128	@ 0x80
 8004686:	025b      	lsls	r3, r3, #9
 8004688:	429a      	cmp	r2, r3
 800468a:	d217      	bcs.n	80046bc <UART_SetConfig+0x248>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800468c:	693b      	ldr	r3, [r7, #16]
 800468e:	b29a      	uxth	r2, r3
 8004690:	200e      	movs	r0, #14
 8004692:	183b      	adds	r3, r7, r0
 8004694:	210f      	movs	r1, #15
 8004696:	438a      	bics	r2, r1
 8004698:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800469a:	693b      	ldr	r3, [r7, #16]
 800469c:	085b      	lsrs	r3, r3, #1
 800469e:	b29b      	uxth	r3, r3
 80046a0:	2207      	movs	r2, #7
 80046a2:	4013      	ands	r3, r2
 80046a4:	b299      	uxth	r1, r3
 80046a6:	183b      	adds	r3, r7, r0
 80046a8:	183a      	adds	r2, r7, r0
 80046aa:	8812      	ldrh	r2, [r2, #0]
 80046ac:	430a      	orrs	r2, r1
 80046ae:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	183a      	adds	r2, r7, r0
 80046b6:	8812      	ldrh	r2, [r2, #0]
 80046b8:	60da      	str	r2, [r3, #12]
 80046ba:	e056      	b.n	800476a <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 80046bc:	231a      	movs	r3, #26
 80046be:	18fb      	adds	r3, r7, r3
 80046c0:	2201      	movs	r2, #1
 80046c2:	701a      	strb	r2, [r3, #0]
 80046c4:	e051      	b.n	800476a <UART_SetConfig+0x2f6>
      }
    }
  }
  else
  {
    switch (clocksource)
 80046c6:	231b      	movs	r3, #27
 80046c8:	18fb      	adds	r3, r7, r3
 80046ca:	781b      	ldrb	r3, [r3, #0]
 80046cc:	2b08      	cmp	r3, #8
 80046ce:	d015      	beq.n	80046fc <UART_SetConfig+0x288>
 80046d0:	dc18      	bgt.n	8004704 <UART_SetConfig+0x290>
 80046d2:	2b04      	cmp	r3, #4
 80046d4:	d00d      	beq.n	80046f2 <UART_SetConfig+0x27e>
 80046d6:	dc15      	bgt.n	8004704 <UART_SetConfig+0x290>
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d002      	beq.n	80046e2 <UART_SetConfig+0x26e>
 80046dc:	2b02      	cmp	r3, #2
 80046de:	d005      	beq.n	80046ec <UART_SetConfig+0x278>
 80046e0:	e010      	b.n	8004704 <UART_SetConfig+0x290>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80046e2:	f7fe fdb9 	bl	8003258 <HAL_RCC_GetPCLK1Freq>
 80046e6:	0003      	movs	r3, r0
 80046e8:	617b      	str	r3, [r7, #20]
        break;
 80046ea:	e012      	b.n	8004712 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80046ec:	4b31      	ldr	r3, [pc, #196]	@ (80047b4 <UART_SetConfig+0x340>)
 80046ee:	617b      	str	r3, [r7, #20]
        break;
 80046f0:	e00f      	b.n	8004712 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80046f2:	f7fe fd25 	bl	8003140 <HAL_RCC_GetSysClockFreq>
 80046f6:	0003      	movs	r3, r0
 80046f8:	617b      	str	r3, [r7, #20]
        break;
 80046fa:	e00a      	b.n	8004712 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80046fc:	2380      	movs	r3, #128	@ 0x80
 80046fe:	021b      	lsls	r3, r3, #8
 8004700:	617b      	str	r3, [r7, #20]
        break;
 8004702:	e006      	b.n	8004712 <UART_SetConfig+0x29e>
      default:
        pclk = 0U;
 8004704:	2300      	movs	r3, #0
 8004706:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004708:	231a      	movs	r3, #26
 800470a:	18fb      	adds	r3, r7, r3
 800470c:	2201      	movs	r2, #1
 800470e:	701a      	strb	r2, [r3, #0]
        break;
 8004710:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8004712:	697b      	ldr	r3, [r7, #20]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d028      	beq.n	800476a <UART_SetConfig+0x2f6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800471c:	4b26      	ldr	r3, [pc, #152]	@ (80047b8 <UART_SetConfig+0x344>)
 800471e:	0052      	lsls	r2, r2, #1
 8004720:	5ad3      	ldrh	r3, [r2, r3]
 8004722:	0019      	movs	r1, r3
 8004724:	6978      	ldr	r0, [r7, #20]
 8004726:	f7fb fd47 	bl	80001b8 <__udivsi3>
 800472a:	0003      	movs	r3, r0
 800472c:	001a      	movs	r2, r3
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	685b      	ldr	r3, [r3, #4]
 8004732:	085b      	lsrs	r3, r3, #1
 8004734:	18d2      	adds	r2, r2, r3
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	0019      	movs	r1, r3
 800473c:	0010      	movs	r0, r2
 800473e:	f7fb fd3b 	bl	80001b8 <__udivsi3>
 8004742:	0003      	movs	r3, r0
 8004744:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004746:	693b      	ldr	r3, [r7, #16]
 8004748:	2b0f      	cmp	r3, #15
 800474a:	d90a      	bls.n	8004762 <UART_SetConfig+0x2ee>
 800474c:	693a      	ldr	r2, [r7, #16]
 800474e:	2380      	movs	r3, #128	@ 0x80
 8004750:	025b      	lsls	r3, r3, #9
 8004752:	429a      	cmp	r2, r3
 8004754:	d205      	bcs.n	8004762 <UART_SetConfig+0x2ee>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004756:	693b      	ldr	r3, [r7, #16]
 8004758:	b29a      	uxth	r2, r3
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	60da      	str	r2, [r3, #12]
 8004760:	e003      	b.n	800476a <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 8004762:	231a      	movs	r3, #26
 8004764:	18fb      	adds	r3, r7, r3
 8004766:	2201      	movs	r2, #1
 8004768:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	226a      	movs	r2, #106	@ 0x6a
 800476e:	2101      	movs	r1, #1
 8004770:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2268      	movs	r2, #104	@ 0x68
 8004776:	2101      	movs	r1, #1
 8004778:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2200      	movs	r2, #0
 800477e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2200      	movs	r2, #0
 8004784:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8004786:	231a      	movs	r3, #26
 8004788:	18fb      	adds	r3, r7, r3
 800478a:	781b      	ldrb	r3, [r3, #0]
}
 800478c:	0018      	movs	r0, r3
 800478e:	46bd      	mov	sp, r7
 8004790:	b008      	add	sp, #32
 8004792:	bd80      	pop	{r7, pc}
 8004794:	cfff69f3 	.word	0xcfff69f3
 8004798:	ffffcfff 	.word	0xffffcfff
 800479c:	11fff4ff 	.word	0x11fff4ff
 80047a0:	40013800 	.word	0x40013800
 80047a4:	40021000 	.word	0x40021000
 80047a8:	40004400 	.word	0x40004400
 80047ac:	40004800 	.word	0x40004800
 80047b0:	40004c00 	.word	0x40004c00
 80047b4:	00f42400 	.word	0x00f42400
 80047b8:	080052d8 	.word	0x080052d8

080047bc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b082      	sub	sp, #8
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047c8:	2208      	movs	r2, #8
 80047ca:	4013      	ands	r3, r2
 80047cc:	d00b      	beq.n	80047e6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	4a4a      	ldr	r2, [pc, #296]	@ (8004900 <UART_AdvFeatureConfig+0x144>)
 80047d6:	4013      	ands	r3, r2
 80047d8:	0019      	movs	r1, r3
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	430a      	orrs	r2, r1
 80047e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047ea:	2201      	movs	r2, #1
 80047ec:	4013      	ands	r3, r2
 80047ee:	d00b      	beq.n	8004808 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	4a43      	ldr	r2, [pc, #268]	@ (8004904 <UART_AdvFeatureConfig+0x148>)
 80047f8:	4013      	ands	r3, r2
 80047fa:	0019      	movs	r1, r3
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	430a      	orrs	r2, r1
 8004806:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800480c:	2202      	movs	r2, #2
 800480e:	4013      	ands	r3, r2
 8004810:	d00b      	beq.n	800482a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	4a3b      	ldr	r2, [pc, #236]	@ (8004908 <UART_AdvFeatureConfig+0x14c>)
 800481a:	4013      	ands	r3, r2
 800481c:	0019      	movs	r1, r3
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	430a      	orrs	r2, r1
 8004828:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800482e:	2204      	movs	r2, #4
 8004830:	4013      	ands	r3, r2
 8004832:	d00b      	beq.n	800484c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	4a34      	ldr	r2, [pc, #208]	@ (800490c <UART_AdvFeatureConfig+0x150>)
 800483c:	4013      	ands	r3, r2
 800483e:	0019      	movs	r1, r3
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	430a      	orrs	r2, r1
 800484a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004850:	2210      	movs	r2, #16
 8004852:	4013      	ands	r3, r2
 8004854:	d00b      	beq.n	800486e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	689b      	ldr	r3, [r3, #8]
 800485c:	4a2c      	ldr	r2, [pc, #176]	@ (8004910 <UART_AdvFeatureConfig+0x154>)
 800485e:	4013      	ands	r3, r2
 8004860:	0019      	movs	r1, r3
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	430a      	orrs	r2, r1
 800486c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004872:	2220      	movs	r2, #32
 8004874:	4013      	ands	r3, r2
 8004876:	d00b      	beq.n	8004890 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	689b      	ldr	r3, [r3, #8]
 800487e:	4a25      	ldr	r2, [pc, #148]	@ (8004914 <UART_AdvFeatureConfig+0x158>)
 8004880:	4013      	ands	r3, r2
 8004882:	0019      	movs	r1, r3
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	430a      	orrs	r2, r1
 800488e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004894:	2240      	movs	r2, #64	@ 0x40
 8004896:	4013      	ands	r3, r2
 8004898:	d01d      	beq.n	80048d6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	685b      	ldr	r3, [r3, #4]
 80048a0:	4a1d      	ldr	r2, [pc, #116]	@ (8004918 <UART_AdvFeatureConfig+0x15c>)
 80048a2:	4013      	ands	r3, r2
 80048a4:	0019      	movs	r1, r3
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	430a      	orrs	r2, r1
 80048b0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80048b6:	2380      	movs	r3, #128	@ 0x80
 80048b8:	035b      	lsls	r3, r3, #13
 80048ba:	429a      	cmp	r2, r3
 80048bc:	d10b      	bne.n	80048d6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	685b      	ldr	r3, [r3, #4]
 80048c4:	4a15      	ldr	r2, [pc, #84]	@ (800491c <UART_AdvFeatureConfig+0x160>)
 80048c6:	4013      	ands	r3, r2
 80048c8:	0019      	movs	r1, r3
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	430a      	orrs	r2, r1
 80048d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048da:	2280      	movs	r2, #128	@ 0x80
 80048dc:	4013      	ands	r3, r2
 80048de:	d00b      	beq.n	80048f8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	4a0e      	ldr	r2, [pc, #56]	@ (8004920 <UART_AdvFeatureConfig+0x164>)
 80048e8:	4013      	ands	r3, r2
 80048ea:	0019      	movs	r1, r3
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	430a      	orrs	r2, r1
 80048f6:	605a      	str	r2, [r3, #4]
  }
}
 80048f8:	46c0      	nop			@ (mov r8, r8)
 80048fa:	46bd      	mov	sp, r7
 80048fc:	b002      	add	sp, #8
 80048fe:	bd80      	pop	{r7, pc}
 8004900:	ffff7fff 	.word	0xffff7fff
 8004904:	fffdffff 	.word	0xfffdffff
 8004908:	fffeffff 	.word	0xfffeffff
 800490c:	fffbffff 	.word	0xfffbffff
 8004910:	ffffefff 	.word	0xffffefff
 8004914:	ffffdfff 	.word	0xffffdfff
 8004918:	ffefffff 	.word	0xffefffff
 800491c:	ff9fffff 	.word	0xff9fffff
 8004920:	fff7ffff 	.word	0xfff7ffff

08004924 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b092      	sub	sp, #72	@ 0x48
 8004928:	af02      	add	r7, sp, #8
 800492a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2290      	movs	r2, #144	@ 0x90
 8004930:	2100      	movs	r1, #0
 8004932:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004934:	f7fc fd3c 	bl	80013b0 <HAL_GetTick>
 8004938:	0003      	movs	r3, r0
 800493a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	2208      	movs	r2, #8
 8004944:	4013      	ands	r3, r2
 8004946:	2b08      	cmp	r3, #8
 8004948:	d12d      	bne.n	80049a6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800494a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800494c:	2280      	movs	r2, #128	@ 0x80
 800494e:	0391      	lsls	r1, r2, #14
 8004950:	6878      	ldr	r0, [r7, #4]
 8004952:	4a47      	ldr	r2, [pc, #284]	@ (8004a70 <UART_CheckIdleState+0x14c>)
 8004954:	9200      	str	r2, [sp, #0]
 8004956:	2200      	movs	r2, #0
 8004958:	f000 f88e 	bl	8004a78 <UART_WaitOnFlagUntilTimeout>
 800495c:	1e03      	subs	r3, r0, #0
 800495e:	d022      	beq.n	80049a6 <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004960:	f3ef 8310 	mrs	r3, PRIMASK
 8004964:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8004966:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004968:	63bb      	str	r3, [r7, #56]	@ 0x38
 800496a:	2301      	movs	r3, #1
 800496c:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800496e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004970:	f383 8810 	msr	PRIMASK, r3
}
 8004974:	46c0      	nop			@ (mov r8, r8)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	681a      	ldr	r2, [r3, #0]
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	2180      	movs	r1, #128	@ 0x80
 8004982:	438a      	bics	r2, r1
 8004984:	601a      	str	r2, [r3, #0]
 8004986:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004988:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800498a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800498c:	f383 8810 	msr	PRIMASK, r3
}
 8004990:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2288      	movs	r2, #136	@ 0x88
 8004996:	2120      	movs	r1, #32
 8004998:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2284      	movs	r2, #132	@ 0x84
 800499e:	2100      	movs	r1, #0
 80049a0:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80049a2:	2303      	movs	r3, #3
 80049a4:	e060      	b.n	8004a68 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	2204      	movs	r2, #4
 80049ae:	4013      	ands	r3, r2
 80049b0:	2b04      	cmp	r3, #4
 80049b2:	d146      	bne.n	8004a42 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80049b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80049b6:	2280      	movs	r2, #128	@ 0x80
 80049b8:	03d1      	lsls	r1, r2, #15
 80049ba:	6878      	ldr	r0, [r7, #4]
 80049bc:	4a2c      	ldr	r2, [pc, #176]	@ (8004a70 <UART_CheckIdleState+0x14c>)
 80049be:	9200      	str	r2, [sp, #0]
 80049c0:	2200      	movs	r2, #0
 80049c2:	f000 f859 	bl	8004a78 <UART_WaitOnFlagUntilTimeout>
 80049c6:	1e03      	subs	r3, r0, #0
 80049c8:	d03b      	beq.n	8004a42 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80049ca:	f3ef 8310 	mrs	r3, PRIMASK
 80049ce:	60fb      	str	r3, [r7, #12]
  return(result);
 80049d0:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80049d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80049d4:	2301      	movs	r3, #1
 80049d6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049d8:	693b      	ldr	r3, [r7, #16]
 80049da:	f383 8810 	msr	PRIMASK, r3
}
 80049de:	46c0      	nop			@ (mov r8, r8)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	681a      	ldr	r2, [r3, #0]
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4922      	ldr	r1, [pc, #136]	@ (8004a74 <UART_CheckIdleState+0x150>)
 80049ec:	400a      	ands	r2, r1
 80049ee:	601a      	str	r2, [r3, #0]
 80049f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049f2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049f4:	697b      	ldr	r3, [r7, #20]
 80049f6:	f383 8810 	msr	PRIMASK, r3
}
 80049fa:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80049fc:	f3ef 8310 	mrs	r3, PRIMASK
 8004a00:	61bb      	str	r3, [r7, #24]
  return(result);
 8004a02:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a04:	633b      	str	r3, [r7, #48]	@ 0x30
 8004a06:	2301      	movs	r3, #1
 8004a08:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a0a:	69fb      	ldr	r3, [r7, #28]
 8004a0c:	f383 8810 	msr	PRIMASK, r3
}
 8004a10:	46c0      	nop			@ (mov r8, r8)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	689a      	ldr	r2, [r3, #8]
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	2101      	movs	r1, #1
 8004a1e:	438a      	bics	r2, r1
 8004a20:	609a      	str	r2, [r3, #8]
 8004a22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a24:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a26:	6a3b      	ldr	r3, [r7, #32]
 8004a28:	f383 8810 	msr	PRIMASK, r3
}
 8004a2c:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	228c      	movs	r2, #140	@ 0x8c
 8004a32:	2120      	movs	r1, #32
 8004a34:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2284      	movs	r2, #132	@ 0x84
 8004a3a:	2100      	movs	r1, #0
 8004a3c:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004a3e:	2303      	movs	r3, #3
 8004a40:	e012      	b.n	8004a68 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2288      	movs	r2, #136	@ 0x88
 8004a46:	2120      	movs	r1, #32
 8004a48:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	228c      	movs	r2, #140	@ 0x8c
 8004a4e:	2120      	movs	r1, #32
 8004a50:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2200      	movs	r2, #0
 8004a56:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2284      	movs	r2, #132	@ 0x84
 8004a62:	2100      	movs	r1, #0
 8004a64:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004a66:	2300      	movs	r3, #0
}
 8004a68:	0018      	movs	r0, r3
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	b010      	add	sp, #64	@ 0x40
 8004a6e:	bd80      	pop	{r7, pc}
 8004a70:	01ffffff 	.word	0x01ffffff
 8004a74:	fffffedf 	.word	0xfffffedf

08004a78 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b084      	sub	sp, #16
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	60f8      	str	r0, [r7, #12]
 8004a80:	60b9      	str	r1, [r7, #8]
 8004a82:	603b      	str	r3, [r7, #0]
 8004a84:	1dfb      	adds	r3, r7, #7
 8004a86:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a88:	e051      	b.n	8004b2e <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a8a:	69bb      	ldr	r3, [r7, #24]
 8004a8c:	3301      	adds	r3, #1
 8004a8e:	d04e      	beq.n	8004b2e <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a90:	f7fc fc8e 	bl	80013b0 <HAL_GetTick>
 8004a94:	0002      	movs	r2, r0
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	1ad3      	subs	r3, r2, r3
 8004a9a:	69ba      	ldr	r2, [r7, #24]
 8004a9c:	429a      	cmp	r2, r3
 8004a9e:	d302      	bcc.n	8004aa6 <UART_WaitOnFlagUntilTimeout+0x2e>
 8004aa0:	69bb      	ldr	r3, [r7, #24]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d101      	bne.n	8004aaa <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8004aa6:	2303      	movs	r3, #3
 8004aa8:	e051      	b.n	8004b4e <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	2204      	movs	r2, #4
 8004ab2:	4013      	ands	r3, r2
 8004ab4:	d03b      	beq.n	8004b2e <UART_WaitOnFlagUntilTimeout+0xb6>
 8004ab6:	68bb      	ldr	r3, [r7, #8]
 8004ab8:	2b80      	cmp	r3, #128	@ 0x80
 8004aba:	d038      	beq.n	8004b2e <UART_WaitOnFlagUntilTimeout+0xb6>
 8004abc:	68bb      	ldr	r3, [r7, #8]
 8004abe:	2b40      	cmp	r3, #64	@ 0x40
 8004ac0:	d035      	beq.n	8004b2e <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	69db      	ldr	r3, [r3, #28]
 8004ac8:	2208      	movs	r2, #8
 8004aca:	4013      	ands	r3, r2
 8004acc:	2b08      	cmp	r3, #8
 8004ace:	d111      	bne.n	8004af4 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	2208      	movs	r2, #8
 8004ad6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	0018      	movs	r0, r3
 8004adc:	f000 f83c 	bl	8004b58 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	2290      	movs	r2, #144	@ 0x90
 8004ae4:	2108      	movs	r1, #8
 8004ae6:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	2284      	movs	r2, #132	@ 0x84
 8004aec:	2100      	movs	r1, #0
 8004aee:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004af0:	2301      	movs	r3, #1
 8004af2:	e02c      	b.n	8004b4e <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	69da      	ldr	r2, [r3, #28]
 8004afa:	2380      	movs	r3, #128	@ 0x80
 8004afc:	011b      	lsls	r3, r3, #4
 8004afe:	401a      	ands	r2, r3
 8004b00:	2380      	movs	r3, #128	@ 0x80
 8004b02:	011b      	lsls	r3, r3, #4
 8004b04:	429a      	cmp	r2, r3
 8004b06:	d112      	bne.n	8004b2e <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	2280      	movs	r2, #128	@ 0x80
 8004b0e:	0112      	lsls	r2, r2, #4
 8004b10:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	0018      	movs	r0, r3
 8004b16:	f000 f81f 	bl	8004b58 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	2290      	movs	r2, #144	@ 0x90
 8004b1e:	2120      	movs	r1, #32
 8004b20:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	2284      	movs	r2, #132	@ 0x84
 8004b26:	2100      	movs	r1, #0
 8004b28:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004b2a:	2303      	movs	r3, #3
 8004b2c:	e00f      	b.n	8004b4e <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	69db      	ldr	r3, [r3, #28]
 8004b34:	68ba      	ldr	r2, [r7, #8]
 8004b36:	4013      	ands	r3, r2
 8004b38:	68ba      	ldr	r2, [r7, #8]
 8004b3a:	1ad3      	subs	r3, r2, r3
 8004b3c:	425a      	negs	r2, r3
 8004b3e:	4153      	adcs	r3, r2
 8004b40:	b2db      	uxtb	r3, r3
 8004b42:	001a      	movs	r2, r3
 8004b44:	1dfb      	adds	r3, r7, #7
 8004b46:	781b      	ldrb	r3, [r3, #0]
 8004b48:	429a      	cmp	r2, r3
 8004b4a:	d09e      	beq.n	8004a8a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004b4c:	2300      	movs	r3, #0
}
 8004b4e:	0018      	movs	r0, r3
 8004b50:	46bd      	mov	sp, r7
 8004b52:	b004      	add	sp, #16
 8004b54:	bd80      	pop	{r7, pc}
	...

08004b58 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b08e      	sub	sp, #56	@ 0x38
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b60:	f3ef 8310 	mrs	r3, PRIMASK
 8004b64:	617b      	str	r3, [r7, #20]
  return(result);
 8004b66:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004b68:	637b      	str	r3, [r7, #52]	@ 0x34
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b6e:	69bb      	ldr	r3, [r7, #24]
 8004b70:	f383 8810 	msr	PRIMASK, r3
}
 8004b74:	46c0      	nop			@ (mov r8, r8)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	681a      	ldr	r2, [r3, #0]
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4926      	ldr	r1, [pc, #152]	@ (8004c1c <UART_EndRxTransfer+0xc4>)
 8004b82:	400a      	ands	r2, r1
 8004b84:	601a      	str	r2, [r3, #0]
 8004b86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b88:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b8a:	69fb      	ldr	r3, [r7, #28]
 8004b8c:	f383 8810 	msr	PRIMASK, r3
}
 8004b90:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b92:	f3ef 8310 	mrs	r3, PRIMASK
 8004b96:	623b      	str	r3, [r7, #32]
  return(result);
 8004b98:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004b9a:	633b      	str	r3, [r7, #48]	@ 0x30
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ba0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ba2:	f383 8810 	msr	PRIMASK, r3
}
 8004ba6:	46c0      	nop			@ (mov r8, r8)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	689a      	ldr	r2, [r3, #8]
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	491b      	ldr	r1, [pc, #108]	@ (8004c20 <UART_EndRxTransfer+0xc8>)
 8004bb4:	400a      	ands	r2, r1
 8004bb6:	609a      	str	r2, [r3, #8]
 8004bb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bba:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bbe:	f383 8810 	msr	PRIMASK, r3
}
 8004bc2:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004bc8:	2b01      	cmp	r3, #1
 8004bca:	d118      	bne.n	8004bfe <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004bcc:	f3ef 8310 	mrs	r3, PRIMASK
 8004bd0:	60bb      	str	r3, [r7, #8]
  return(result);
 8004bd2:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004bd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	f383 8810 	msr	PRIMASK, r3
}
 8004be0:	46c0      	nop			@ (mov r8, r8)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	681a      	ldr	r2, [r3, #0]
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	2110      	movs	r1, #16
 8004bee:	438a      	bics	r2, r1
 8004bf0:	601a      	str	r2, [r3, #0]
 8004bf2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bf4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bf6:	693b      	ldr	r3, [r7, #16]
 8004bf8:	f383 8810 	msr	PRIMASK, r3
}
 8004bfc:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	228c      	movs	r2, #140	@ 0x8c
 8004c02:	2120      	movs	r1, #32
 8004c04:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2200      	movs	r2, #0
 8004c0a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2200      	movs	r2, #0
 8004c10:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8004c12:	46c0      	nop			@ (mov r8, r8)
 8004c14:	46bd      	mov	sp, r7
 8004c16:	b00e      	add	sp, #56	@ 0x38
 8004c18:	bd80      	pop	{r7, pc}
 8004c1a:	46c0      	nop			@ (mov r8, r8)
 8004c1c:	fffffedf 	.word	0xfffffedf
 8004c20:	effffffe 	.word	0xeffffffe

08004c24 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b084      	sub	sp, #16
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2284      	movs	r2, #132	@ 0x84
 8004c30:	5c9b      	ldrb	r3, [r3, r2]
 8004c32:	2b01      	cmp	r3, #1
 8004c34:	d101      	bne.n	8004c3a <HAL_UARTEx_DisableFifoMode+0x16>
 8004c36:	2302      	movs	r3, #2
 8004c38:	e027      	b.n	8004c8a <HAL_UARTEx_DisableFifoMode+0x66>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2284      	movs	r2, #132	@ 0x84
 8004c3e:	2101      	movs	r1, #1
 8004c40:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2288      	movs	r2, #136	@ 0x88
 8004c46:	2124      	movs	r1, #36	@ 0x24
 8004c48:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	681a      	ldr	r2, [r3, #0]
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	2101      	movs	r1, #1
 8004c5e:	438a      	bics	r2, r1
 8004c60:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	4a0b      	ldr	r2, [pc, #44]	@ (8004c94 <HAL_UARTEx_DisableFifoMode+0x70>)
 8004c66:	4013      	ands	r3, r2
 8004c68:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	68fa      	ldr	r2, [r7, #12]
 8004c76:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2288      	movs	r2, #136	@ 0x88
 8004c7c:	2120      	movs	r1, #32
 8004c7e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2284      	movs	r2, #132	@ 0x84
 8004c84:	2100      	movs	r1, #0
 8004c86:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004c88:	2300      	movs	r3, #0
}
 8004c8a:	0018      	movs	r0, r3
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	b004      	add	sp, #16
 8004c90:	bd80      	pop	{r7, pc}
 8004c92:	46c0      	nop			@ (mov r8, r8)
 8004c94:	dfffffff 	.word	0xdfffffff

08004c98 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b084      	sub	sp, #16
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
 8004ca0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2284      	movs	r2, #132	@ 0x84
 8004ca6:	5c9b      	ldrb	r3, [r3, r2]
 8004ca8:	2b01      	cmp	r3, #1
 8004caa:	d101      	bne.n	8004cb0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004cac:	2302      	movs	r3, #2
 8004cae:	e02e      	b.n	8004d0e <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2284      	movs	r2, #132	@ 0x84
 8004cb4:	2101      	movs	r1, #1
 8004cb6:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2288      	movs	r2, #136	@ 0x88
 8004cbc:	2124      	movs	r1, #36	@ 0x24
 8004cbe:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	681a      	ldr	r2, [r3, #0]
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	2101      	movs	r1, #1
 8004cd4:	438a      	bics	r2, r1
 8004cd6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	689b      	ldr	r3, [r3, #8]
 8004cde:	00db      	lsls	r3, r3, #3
 8004ce0:	08d9      	lsrs	r1, r3, #3
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	683a      	ldr	r2, [r7, #0]
 8004ce8:	430a      	orrs	r2, r1
 8004cea:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	0018      	movs	r0, r3
 8004cf0:	f000 f854 	bl	8004d9c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	68fa      	ldr	r2, [r7, #12]
 8004cfa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2288      	movs	r2, #136	@ 0x88
 8004d00:	2120      	movs	r1, #32
 8004d02:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2284      	movs	r2, #132	@ 0x84
 8004d08:	2100      	movs	r1, #0
 8004d0a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004d0c:	2300      	movs	r3, #0
}
 8004d0e:	0018      	movs	r0, r3
 8004d10:	46bd      	mov	sp, r7
 8004d12:	b004      	add	sp, #16
 8004d14:	bd80      	pop	{r7, pc}
	...

08004d18 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b084      	sub	sp, #16
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
 8004d20:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2284      	movs	r2, #132	@ 0x84
 8004d26:	5c9b      	ldrb	r3, [r3, r2]
 8004d28:	2b01      	cmp	r3, #1
 8004d2a:	d101      	bne.n	8004d30 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004d2c:	2302      	movs	r3, #2
 8004d2e:	e02f      	b.n	8004d90 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2284      	movs	r2, #132	@ 0x84
 8004d34:	2101      	movs	r1, #1
 8004d36:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2288      	movs	r2, #136	@ 0x88
 8004d3c:	2124      	movs	r1, #36	@ 0x24
 8004d3e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	681a      	ldr	r2, [r3, #0]
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	2101      	movs	r1, #1
 8004d54:	438a      	bics	r2, r1
 8004d56:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	689b      	ldr	r3, [r3, #8]
 8004d5e:	4a0e      	ldr	r2, [pc, #56]	@ (8004d98 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8004d60:	4013      	ands	r3, r2
 8004d62:	0019      	movs	r1, r3
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	683a      	ldr	r2, [r7, #0]
 8004d6a:	430a      	orrs	r2, r1
 8004d6c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	0018      	movs	r0, r3
 8004d72:	f000 f813 	bl	8004d9c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	68fa      	ldr	r2, [r7, #12]
 8004d7c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2288      	movs	r2, #136	@ 0x88
 8004d82:	2120      	movs	r1, #32
 8004d84:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2284      	movs	r2, #132	@ 0x84
 8004d8a:	2100      	movs	r1, #0
 8004d8c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004d8e:	2300      	movs	r3, #0
}
 8004d90:	0018      	movs	r0, r3
 8004d92:	46bd      	mov	sp, r7
 8004d94:	b004      	add	sp, #16
 8004d96:	bd80      	pop	{r7, pc}
 8004d98:	f1ffffff 	.word	0xf1ffffff

08004d9c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004d9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d9e:	b085      	sub	sp, #20
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d108      	bne.n	8004dbe <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	226a      	movs	r2, #106	@ 0x6a
 8004db0:	2101      	movs	r1, #1
 8004db2:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2268      	movs	r2, #104	@ 0x68
 8004db8:	2101      	movs	r1, #1
 8004dba:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004dbc:	e043      	b.n	8004e46 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004dbe:	260f      	movs	r6, #15
 8004dc0:	19bb      	adds	r3, r7, r6
 8004dc2:	2208      	movs	r2, #8
 8004dc4:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004dc6:	200e      	movs	r0, #14
 8004dc8:	183b      	adds	r3, r7, r0
 8004dca:	2208      	movs	r2, #8
 8004dcc:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	689b      	ldr	r3, [r3, #8]
 8004dd4:	0e5b      	lsrs	r3, r3, #25
 8004dd6:	b2da      	uxtb	r2, r3
 8004dd8:	240d      	movs	r4, #13
 8004dda:	193b      	adds	r3, r7, r4
 8004ddc:	2107      	movs	r1, #7
 8004dde:	400a      	ands	r2, r1
 8004de0:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	689b      	ldr	r3, [r3, #8]
 8004de8:	0f5b      	lsrs	r3, r3, #29
 8004dea:	b2da      	uxtb	r2, r3
 8004dec:	250c      	movs	r5, #12
 8004dee:	197b      	adds	r3, r7, r5
 8004df0:	2107      	movs	r1, #7
 8004df2:	400a      	ands	r2, r1
 8004df4:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004df6:	183b      	adds	r3, r7, r0
 8004df8:	781b      	ldrb	r3, [r3, #0]
 8004dfa:	197a      	adds	r2, r7, r5
 8004dfc:	7812      	ldrb	r2, [r2, #0]
 8004dfe:	4914      	ldr	r1, [pc, #80]	@ (8004e50 <UARTEx_SetNbDataToProcess+0xb4>)
 8004e00:	5c8a      	ldrb	r2, [r1, r2]
 8004e02:	435a      	muls	r2, r3
 8004e04:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8004e06:	197b      	adds	r3, r7, r5
 8004e08:	781b      	ldrb	r3, [r3, #0]
 8004e0a:	4a12      	ldr	r2, [pc, #72]	@ (8004e54 <UARTEx_SetNbDataToProcess+0xb8>)
 8004e0c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004e0e:	0019      	movs	r1, r3
 8004e10:	f7fb fa5c 	bl	80002cc <__divsi3>
 8004e14:	0003      	movs	r3, r0
 8004e16:	b299      	uxth	r1, r3
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	226a      	movs	r2, #106	@ 0x6a
 8004e1c:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004e1e:	19bb      	adds	r3, r7, r6
 8004e20:	781b      	ldrb	r3, [r3, #0]
 8004e22:	193a      	adds	r2, r7, r4
 8004e24:	7812      	ldrb	r2, [r2, #0]
 8004e26:	490a      	ldr	r1, [pc, #40]	@ (8004e50 <UARTEx_SetNbDataToProcess+0xb4>)
 8004e28:	5c8a      	ldrb	r2, [r1, r2]
 8004e2a:	435a      	muls	r2, r3
 8004e2c:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8004e2e:	193b      	adds	r3, r7, r4
 8004e30:	781b      	ldrb	r3, [r3, #0]
 8004e32:	4a08      	ldr	r2, [pc, #32]	@ (8004e54 <UARTEx_SetNbDataToProcess+0xb8>)
 8004e34:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004e36:	0019      	movs	r1, r3
 8004e38:	f7fb fa48 	bl	80002cc <__divsi3>
 8004e3c:	0003      	movs	r3, r0
 8004e3e:	b299      	uxth	r1, r3
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2268      	movs	r2, #104	@ 0x68
 8004e44:	5299      	strh	r1, [r3, r2]
}
 8004e46:	46c0      	nop			@ (mov r8, r8)
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	b005      	add	sp, #20
 8004e4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e4e:	46c0      	nop			@ (mov r8, r8)
 8004e50:	080052f0 	.word	0x080052f0
 8004e54:	080052f8 	.word	0x080052f8

08004e58 <Reset_Handler>:



extern void Reset_Handler(void) __attribute__((__interrupt__));
void Reset_Handler(void)
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b082      	sub	sp, #8
 8004e5c:	af00      	add	r7, sp, #0
    unsigned int *src, *dst;

    // Copy .data segment from Flash to RAM
    src = &_sidata;
 8004e5e:	4b13      	ldr	r3, [pc, #76]	@ (8004eac <Reset_Handler+0x54>)
 8004e60:	607b      	str	r3, [r7, #4]
    dst = &_sdata;
 8004e62:	4b13      	ldr	r3, [pc, #76]	@ (8004eb0 <Reset_Handler+0x58>)
 8004e64:	603b      	str	r3, [r7, #0]
    while (dst < &_edata)
 8004e66:	e007      	b.n	8004e78 <Reset_Handler+0x20>
        *dst++ = *src++;
 8004e68:	687a      	ldr	r2, [r7, #4]
 8004e6a:	1d13      	adds	r3, r2, #4
 8004e6c:	607b      	str	r3, [r7, #4]
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	1d19      	adds	r1, r3, #4
 8004e72:	6039      	str	r1, [r7, #0]
 8004e74:	6812      	ldr	r2, [r2, #0]
 8004e76:	601a      	str	r2, [r3, #0]
    while (dst < &_edata)
 8004e78:	683a      	ldr	r2, [r7, #0]
 8004e7a:	4b0e      	ldr	r3, [pc, #56]	@ (8004eb4 <Reset_Handler+0x5c>)
 8004e7c:	429a      	cmp	r2, r3
 8004e7e:	d3f3      	bcc.n	8004e68 <Reset_Handler+0x10>

    // Zero out the .bss segment
    dst = &_sbss;
 8004e80:	4b0d      	ldr	r3, [pc, #52]	@ (8004eb8 <Reset_Handler+0x60>)
 8004e82:	603b      	str	r3, [r7, #0]
    while (dst < &_ebss)
 8004e84:	e004      	b.n	8004e90 <Reset_Handler+0x38>
        *dst++ = 0;
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	1d1a      	adds	r2, r3, #4
 8004e8a:	603a      	str	r2, [r7, #0]
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	601a      	str	r2, [r3, #0]
    while (dst < &_ebss)
 8004e90:	683a      	ldr	r2, [r7, #0]
 8004e92:	4b0a      	ldr	r3, [pc, #40]	@ (8004ebc <Reset_Handler+0x64>)
 8004e94:	429a      	cmp	r2, r3
 8004e96:	d3f6      	bcc.n	8004e86 <Reset_Handler+0x2e>

    VTOR_REG = (uint32_t)vectors;
 8004e98:	4b09      	ldr	r3, [pc, #36]	@ (8004ec0 <Reset_Handler+0x68>)
 8004e9a:	4a0a      	ldr	r2, [pc, #40]	@ (8004ec4 <Reset_Handler+0x6c>)
 8004e9c:	601a      	str	r2, [r3, #0]

    //__libc_init_array();

    main();
 8004e9e:	f7fb fd97 	bl	80009d0 <main>
}
 8004ea2:	46c0      	nop			@ (mov r8, r8)
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	b002      	add	sp, #8
 8004ea8:	bd80      	pop	{r7, pc}
 8004eaa:	46c0      	nop			@ (mov r8, r8)
 8004eac:	08005370 	.word	0x08005370
 8004eb0:	20000000 	.word	0x20000000
 8004eb4:	2000000c 	.word	0x2000000c
 8004eb8:	2000000c 	.word	0x2000000c
 8004ebc:	200002a0 	.word	0x200002a0
 8004ec0:	e000ed08 	.word	0xe000ed08
 8004ec4:	080000b8 	.word	0x080000b8

08004ec8 <hal_gpio_init>:
#include "stm32g0xx_ll_gpio.h"
#include "main.h"
#include "gpio.h"

void hal_gpio_init(void)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	af00      	add	r7, sp, #0
	// Call the GPIO initialization function setup by the STM32CubeIDE Device Configuration Tool:
	MX_GPIO_Init();
 8004ecc:	f7fb fbbc 	bl	8000648 <MX_GPIO_Init>
}
 8004ed0:	46c0      	nop			@ (mov r8, r8)
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	bd80      	pop	{r7, pc}
	...

08004ed8 <hal_gpio_toggle_output>:
{
  HAL_GPIO_WritePin(port_defs[id], pin_defs[id].Pin, (GPIO_PinState)(value != false));
}

void hal_gpio_toggle_output(enum pin_id id)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b082      	sub	sp, #8
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	0002      	movs	r2, r0
 8004ee0:	1dfb      	adds	r3, r7, #7
 8004ee2:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_TogglePin(port_defs[id], pin_defs[id].Pin);
 8004ee4:	1dfb      	adds	r3, r7, #7
 8004ee6:	781a      	ldrb	r2, [r3, #0]
 8004ee8:	4b07      	ldr	r3, [pc, #28]	@ (8004f08 <hal_gpio_toggle_output+0x30>)
 8004eea:	0092      	lsls	r2, r2, #2
 8004eec:	58d0      	ldr	r0, [r2, r3]
 8004eee:	1dfb      	adds	r3, r7, #7
 8004ef0:	781a      	ldrb	r2, [r3, #0]
 8004ef2:	4b06      	ldr	r3, [pc, #24]	@ (8004f0c <hal_gpio_toggle_output+0x34>)
 8004ef4:	0092      	lsls	r2, r2, #2
 8004ef6:	58d3      	ldr	r3, [r2, r3]
 8004ef8:	b29b      	uxth	r3, r3
 8004efa:	0019      	movs	r1, r3
 8004efc:	f7fd fac3 	bl	8002486 <HAL_GPIO_TogglePin>
}
 8004f00:	46c0      	nop			@ (mov r8, r8)
 8004f02:	46bd      	mov	sp, r7
 8004f04:	b002      	add	sp, #8
 8004f06:	bd80      	pop	{r7, pc}
 8004f08:	08005334 	.word	0x08005334
 8004f0c:	08005300 	.word	0x08005300

08004f10 <hal_timer_get_systick>:
*
*  return values:  The current 1 millisecond systick count
*  remarks:
*********************************************************************************/
uint32_t hal_timer_get_systick(void)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8004f14:	f7fc fa4c 	bl	80013b0 <HAL_GetTick>
 8004f18:	0003      	movs	r3, r0
}
 8004f1a:	0018      	movs	r0, r3
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	bd80      	pop	{r7, pc}

08004f20 <hal_timer_get_ticks_since_count>:
*
*  remarks:
*********************************************************************************/

uint32_t hal_timer_get_ticks_since_count(uint32_t lastCount)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b084      	sub	sp, #16
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
    uint32_t result;
    uint32_t currentCount = hal_timer_get_systick();
 8004f28:	f7ff fff2 	bl	8004f10 <hal_timer_get_systick>
 8004f2c:	0003      	movs	r3, r0
 8004f2e:	60bb      	str	r3, [r7, #8]

    // Check if the counter rolled over:
    if (currentCount >= lastCount)
 8004f30:	68ba      	ldr	r2, [r7, #8]
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	429a      	cmp	r2, r3
 8004f36:	d304      	bcc.n	8004f42 <hal_timer_get_ticks_since_count+0x22>
    {
        //Counter has not rolled over.
        result = currentCount - lastCount;
 8004f38:	68ba      	ldr	r2, [r7, #8]
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	1ad3      	subs	r3, r2, r3
 8004f3e:	60fb      	str	r3, [r7, #12]
 8004f40:	e004      	b.n	8004f4c <hal_timer_get_ticks_since_count+0x2c>
    }
    else
    {
        // The counter rolled over / overflowed. Deal with it:
        result = UINT32_MAX - lastCount + currentCount;
 8004f42:	68ba      	ldr	r2, [r7, #8]
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	1ad3      	subs	r3, r2, r3
 8004f48:	3b01      	subs	r3, #1
 8004f4a:	60fb      	str	r3, [r7, #12]
    }

    return result;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
}
 8004f4e:	0018      	movs	r0, r3
 8004f50:	46bd      	mov	sp, r7
 8004f52:	b004      	add	sp, #16
 8004f54:	bd80      	pop	{r7, pc}

08004f56 <hal_timer_init>:
{
	SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk; /* disable systick */
}

void hal_timer_init(void)
{
 8004f56:	b580      	push	{r7, lr}
 8004f58:	af00      	add	r7, sp, #0

	  // Note that the following "USING" macros are defined in perphdefs.h
#if defined  USING_TIM1
	  MX_TIM1_Init();
 8004f5a:	f7fb fe25 	bl	8000ba8 <MX_TIM1_Init>
#endif
#if defined  USING_TIM3
	  MX_TIM3_Init();
 8004f5e:	f7fb feef 	bl	8000d40 <MX_TIM3_Init>
#endif
#if defined  USING_TIM14
	  MX_TIM14_Init();
#endif
#if defined  USING_TIM15
	  MX_TIM15_Init();
 8004f62:	f7fb ff6d 	bl	8000e40 <MX_TIM15_Init>
	  MX_TIM17_Init();
#endif



}
 8004f66:	46c0      	nop			@ (mov r8, r8)
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	bd80      	pop	{r7, pc}

08004f6c <uart_irq_handler>:
{
	return ((uart_hal->uart_module->CR1 & USART_CR1_TCIE) != 0);
}

static void uart_irq_handler(USART_TypeDef* uart_module)
{
 8004f6c:	b590      	push	{r4, r7, lr}
 8004f6e:	b085      	sub	sp, #20
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
	uint8_t byte_to_tx;

    /* if there are any error flags AND if in RX mode rather than Tx mode */
	if (uart_module->ISR & (USART_ISR_ORE /*| USART_ISR_NE | USART_ISR_FE*/) && (uart_module->CR2 & USART_CR2_SWAP))
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	69db      	ldr	r3, [r3, #28]
 8004f78:	2208      	movs	r2, #8
 8004f7a:	4013      	ands	r3, r2
 8004f7c:	d018      	beq.n	8004fb0 <uart_irq_handler+0x44>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	685a      	ldr	r2, [r3, #4]
 8004f82:	2380      	movs	r3, #128	@ 0x80
 8004f84:	021b      	lsls	r3, r3, #8
 8004f86:	4013      	ands	r3, r2
 8004f88:	d012      	beq.n	8004fb0 <uart_irq_handler+0x44>
	{
		if (uart_module->ISR & USART_ISR_RXNE_RXFNE)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	69db      	ldr	r3, [r3, #28]
 8004f8e:	2220      	movs	r2, #32
 8004f90:	4013      	ands	r3, r2
 8004f92:	d00d      	beq.n	8004fb0 <uart_irq_handler+0x44>
			 * TWICE here because there's an overrun error which means we have TWO bytes 
			 * received, one in the RDR register, and then as soon as we read that once,
			 * there's a byte that gets shifted into the RDR register from the
			 * non-memory-mapped shift register.
			 */
			usart1_byte_received_callback(uart_module->RDR);
 8004f94:	4b72      	ldr	r3, [pc, #456]	@ (8005160 <uart_irq_handler+0x1f4>)
 8004f96:	681a      	ldr	r2, [r3, #0]
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f9c:	b2db      	uxtb	r3, r3
 8004f9e:	0018      	movs	r0, r3
 8004fa0:	4790      	blx	r2
			usart1_byte_received_callback(uart_module->RDR);
 8004fa2:	4b6f      	ldr	r3, [pc, #444]	@ (8005160 <uart_irq_handler+0x1f4>)
 8004fa4:	681a      	ldr	r2, [r3, #0]
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004faa:	b2db      	uxtb	r3, r3
 8004fac:	0018      	movs	r0, r3
 8004fae:	4790      	blx	r2
		}
	}
		uart_module->ICR |= (USART_ICR_ORECF | USART_ICR_NECF | USART_ICR_FECF);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6a1b      	ldr	r3, [r3, #32]
 8004fb4:	220e      	movs	r2, #14
 8004fb6:	431a      	orrs	r2, r3
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	621a      	str	r2, [r3, #32]

    /* if a byte has been received AND if in Rx mode rather than Tx mode */
	if ((uart_module->ISR & USART_ISR_RXNE_RXFNE) && (uart_module->CR2 & USART_CR2_SWAP))
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	69db      	ldr	r3, [r3, #28]
 8004fc0:	2220      	movs	r2, #32
 8004fc2:	4013      	ands	r3, r2
 8004fc4:	d01c      	beq.n	8005000 <uart_irq_handler+0x94>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	685a      	ldr	r2, [r3, #4]
 8004fca:	2380      	movs	r3, #128	@ 0x80
 8004fcc:	021b      	lsls	r3, r3, #8
 8004fce:	4013      	ands	r3, r2
 8004fd0:	d016      	beq.n	8005000 <uart_irq_handler+0x94>
	{
		/* Note that reading the RDR register clears the RXNE flag. */

		if (USART1 == uart_module)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	4a63      	ldr	r2, [pc, #396]	@ (8005164 <uart_irq_handler+0x1f8>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d107      	bne.n	8004fea <uart_irq_handler+0x7e>
		{
			/* call the USART1 received callback, passing it the received data */
			usart1_byte_received_callback(uart_module->RDR);
 8004fda:	4b61      	ldr	r3, [pc, #388]	@ (8005160 <uart_irq_handler+0x1f4>)
 8004fdc:	681a      	ldr	r2, [r3, #0]
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fe2:	b2db      	uxtb	r3, r3
 8004fe4:	0018      	movs	r0, r3
 8004fe6:	4790      	blx	r2
 8004fe8:	e00a      	b.n	8005000 <uart_irq_handler+0x94>
		}
		else if (USART2 == uart_module)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	4a5e      	ldr	r2, [pc, #376]	@ (8005168 <uart_irq_handler+0x1fc>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d106      	bne.n	8005000 <uart_irq_handler+0x94>
		{
			/* call the USART2 received callback, passing it the received data */
			usart2_byte_received_callback(uart_module->RDR);
 8004ff2:	4b5e      	ldr	r3, [pc, #376]	@ (800516c <uart_irq_handler+0x200>)
 8004ff4:	681a      	ldr	r2, [r3, #0]
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ffa:	b2db      	uxtb	r3, r3
 8004ffc:	0018      	movs	r0, r3
 8004ffe:	4790      	blx	r2
		uart_module->ICR |= USART_ICR_WUCF;
	}
#endif

    /* if the transmit buffer is empty AND we're set to Tx rather than Rx */
	if ((uart_module->ISR & USART_ISR_TXE_TXFNF) && !(uart_module->CR2 & USART_CR2_SWAP))
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	69db      	ldr	r3, [r3, #28]
 8005004:	2280      	movs	r2, #128	@ 0x80
 8005006:	4013      	ands	r3, r2
 8005008:	d038      	beq.n	800507c <uart_irq_handler+0x110>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	685a      	ldr	r2, [r3, #4]
 800500e:	2380      	movs	r3, #128	@ 0x80
 8005010:	021b      	lsls	r3, r3, #8
 8005012:	4013      	ands	r3, r2
 8005014:	d132      	bne.n	800507c <uart_irq_handler+0x110>
	{
		if (USART1 == uart_module)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	4a52      	ldr	r2, [pc, #328]	@ (8005164 <uart_irq_handler+0x1f8>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d115      	bne.n	800504a <uart_irq_handler+0xde>
		{
			/* call the USART1 transmit callback to get the byte to Tx */
			if (usart1_transmit_ready_callback(&byte_to_tx))
 800501e:	4b54      	ldr	r3, [pc, #336]	@ (8005170 <uart_irq_handler+0x204>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	240e      	movs	r4, #14
 8005024:	193a      	adds	r2, r7, r4
 8005026:	0010      	movs	r0, r2
 8005028:	4798      	blx	r3
 800502a:	1e03      	subs	r3, r0, #0
 800502c:	d005      	beq.n	800503a <uart_irq_handler+0xce>
			{
				/* transmit the byte */
				uart_module->TDR = byte_to_tx;
 800502e:	193b      	adds	r3, r7, r4
 8005030:	781b      	ldrb	r3, [r3, #0]
 8005032:	001a      	movs	r2, r3
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	629a      	str	r2, [r3, #40]	@ 0x28
 8005038:	e020      	b.n	800507c <uart_irq_handler+0x110>
			}
			else
			{
				/* disable the 'Tx buffer empty' interrupt */
				uart_module->CR1 &= ~USART_CR1_TXEIE_TXFNFIE;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	2280      	movs	r2, #128	@ 0x80
 8005040:	4393      	bics	r3, r2
 8005042:	001a      	movs	r2, r3
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	601a      	str	r2, [r3, #0]
 8005048:	e018      	b.n	800507c <uart_irq_handler+0x110>
			}
		}
		else if (USART2 == uart_module)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	4a46      	ldr	r2, [pc, #280]	@ (8005168 <uart_irq_handler+0x1fc>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d114      	bne.n	800507c <uart_irq_handler+0x110>
		{
			/* call the USART2 transmit callback to get the byte to Tx */
			if (usart2_transmit_ready_callback(&byte_to_tx))
 8005052:	4b48      	ldr	r3, [pc, #288]	@ (8005174 <uart_irq_handler+0x208>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	240e      	movs	r4, #14
 8005058:	193a      	adds	r2, r7, r4
 800505a:	0010      	movs	r0, r2
 800505c:	4798      	blx	r3
 800505e:	1e03      	subs	r3, r0, #0
 8005060:	d005      	beq.n	800506e <uart_irq_handler+0x102>
			{
				/* transmit the byte */
				uart_module->TDR = byte_to_tx;
 8005062:	193b      	adds	r3, r7, r4
 8005064:	781b      	ldrb	r3, [r3, #0]
 8005066:	001a      	movs	r2, r3
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	629a      	str	r2, [r3, #40]	@ 0x28
 800506c:	e006      	b.n	800507c <uart_irq_handler+0x110>
			}
			else
			{
				/* disable the 'Tx buffer empty' interrupt */
				uart_module->CR1 &= ~USART_CR1_TXEIE_TXFNFIE;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	2280      	movs	r2, #128	@ 0x80
 8005074:	4393      	bics	r3, r2
 8005076:	001a      	movs	r2, r3
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	601a      	str	r2, [r3, #0]
		}
	}

/* TODO - need a callback in the UART driver for the 152 usec delay */
    /* if the transmission complete flag is set AND we're set to Tx rather than Rx */
	if ((uart_module->ISR & USART_ISR_TC) && !(uart_module->CR2 & USART_CR2_SWAP))
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	69db      	ldr	r3, [r3, #28]
 8005080:	2240      	movs	r2, #64	@ 0x40
 8005082:	4013      	ands	r3, r2
 8005084:	d100      	bne.n	8005088 <uart_irq_handler+0x11c>
 8005086:	e067      	b.n	8005158 <uart_irq_handler+0x1ec>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	685a      	ldr	r2, [r3, #4]
 800508c:	2380      	movs	r3, #128	@ 0x80
 800508e:	021b      	lsls	r3, r3, #8
 8005090:	4013      	ands	r3, r2
 8005092:	d161      	bne.n	8005158 <uart_irq_handler+0x1ec>
	{
		if (USART1 == uart_module)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	4a33      	ldr	r2, [pc, #204]	@ (8005164 <uart_irq_handler+0x1f8>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d107      	bne.n	80050ac <uart_irq_handler+0x140>
		{
			if (usart1_blocking_delay)
 800509c:	4b36      	ldr	r3, [pc, #216]	@ (8005178 <uart_irq_handler+0x20c>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d00e      	beq.n	80050c2 <uart_irq_handler+0x156>
			{
				/* delay to ride through the IR1 key glitch */
				usart1_blocking_delay();
 80050a4:	4b34      	ldr	r3, [pc, #208]	@ (8005178 <uart_irq_handler+0x20c>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4798      	blx	r3
 80050aa:	e00a      	b.n	80050c2 <uart_irq_handler+0x156>
			}
		}
		else if (USART2 == uart_module)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	4a2e      	ldr	r2, [pc, #184]	@ (8005168 <uart_irq_handler+0x1fc>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d106      	bne.n	80050c2 <uart_irq_handler+0x156>
		{
			if (usart2_blocking_delay)
 80050b4:	4b31      	ldr	r3, [pc, #196]	@ (800517c <uart_irq_handler+0x210>)
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d002      	beq.n	80050c2 <uart_irq_handler+0x156>
			{
				/* delay to ride through the IR1 key glitch */
				usart2_blocking_delay();
 80050bc:	4b2f      	ldr	r3, [pc, #188]	@ (800517c <uart_irq_handler+0x210>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4798      	blx	r3

		/* switch tx/rx pin to rx if needed */
		{
			uart_mode_t uart_mode;

			if (USART1 == uart_module)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	4a27      	ldr	r2, [pc, #156]	@ (8005164 <uart_irq_handler+0x1f8>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d105      	bne.n	80050d6 <uart_irq_handler+0x16a>
			{
				uart_mode = usart1_mode;
 80050ca:	230f      	movs	r3, #15
 80050cc:	18fb      	adds	r3, r7, r3
 80050ce:	4a2c      	ldr	r2, [pc, #176]	@ (8005180 <uart_irq_handler+0x214>)
 80050d0:	7812      	ldrb	r2, [r2, #0]
 80050d2:	701a      	strb	r2, [r3, #0]
 80050d4:	e00d      	b.n	80050f2 <uart_irq_handler+0x186>
			}
			else if (USART2 == uart_module)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	4a23      	ldr	r2, [pc, #140]	@ (8005168 <uart_irq_handler+0x1fc>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d105      	bne.n	80050ea <uart_irq_handler+0x17e>
			{
				uart_mode = usart2_mode;
 80050de:	230f      	movs	r3, #15
 80050e0:	18fb      	adds	r3, r7, r3
 80050e2:	4a28      	ldr	r2, [pc, #160]	@ (8005184 <uart_irq_handler+0x218>)
 80050e4:	7812      	ldrb	r2, [r2, #0]
 80050e6:	701a      	strb	r2, [r3, #0]
 80050e8:	e003      	b.n	80050f2 <uart_irq_handler+0x186>
				uart_mode = lpuart1_mode;
			}
#endif
			else
			{
				uart_mode = 0; /* Should never get here!  This line is just to ensure consistency on failure. */
 80050ea:	230f      	movs	r3, #15
 80050ec:	18fb      	adds	r3, r7, r3
 80050ee:	2200      	movs	r2, #0
 80050f0:	701a      	strb	r2, [r3, #0]
			}

			if ((ONE_WIRE_NO_EXTERNAL_PULLUP == uart_mode) || (ONE_WIRE == uart_mode))
 80050f2:	220f      	movs	r2, #15
 80050f4:	18bb      	adds	r3, r7, r2
 80050f6:	781b      	ldrb	r3, [r3, #0]
 80050f8:	2b03      	cmp	r3, #3
 80050fa:	d003      	beq.n	8005104 <uart_irq_handler+0x198>
 80050fc:	18bb      	adds	r3, r7, r2
 80050fe:	781b      	ldrb	r3, [r3, #0]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d119      	bne.n	8005138 <uart_irq_handler+0x1cc>
			{
				/* if tx/rx pin is set to tx... */
				if (!(uart_module->CR2 & USART_CR2_SWAP))
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	685a      	ldr	r2, [r3, #4]
 8005108:	2380      	movs	r3, #128	@ 0x80
 800510a:	021b      	lsls	r3, r3, #8
 800510c:	4013      	ands	r3, r2
 800510e:	d113      	bne.n	8005138 <uart_irq_handler+0x1cc>
				{
					/* ...then set pin to rx */
					uart_module->CR1 &= ~USART_CR1_UE;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	2201      	movs	r2, #1
 8005116:	4393      	bics	r3, r2
 8005118:	001a      	movs	r2, r3
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	601a      	str	r2, [r3, #0]
					uart_module->CR2 |=  USART_CR2_SWAP; /* can only modify CR2 when UE is 0 */
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	685b      	ldr	r3, [r3, #4]
 8005122:	2280      	movs	r2, #128	@ 0x80
 8005124:	0212      	lsls	r2, r2, #8
 8005126:	431a      	orrs	r2, r3
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	605a      	str	r2, [r3, #4]
					uart_module->CR1 |=  USART_CR1_UE;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	2201      	movs	r2, #1
 8005132:	431a      	orrs	r2, r3
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	601a      	str	r2, [r3, #0]
				}
			}
		}

		/* re-enable the receiver and receive interrupt */
		uart_module->CR1 |= (USART_CR1_RE | USART_CR1_RXNEIE_RXFNEIE);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	2224      	movs	r2, #36	@ 0x24
 800513e:	431a      	orrs	r2, r3
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	601a      	str	r2, [r3, #0]

		/* disable the 'Tx complete' interrupt */
		uart_module->CR1 &= ~USART_CR1_TCIE;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	2240      	movs	r2, #64	@ 0x40
 800514a:	4393      	bics	r3, r2
 800514c:	001a      	movs	r2, r3
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	601a      	str	r2, [r3, #0]

		/* clear the TC bit */
		uart_module->ICR = USART_ICR_TCCF;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2240      	movs	r2, #64	@ 0x40
 8005156:	621a      	str	r2, [r3, #32]
	}
}
 8005158:	46c0      	nop			@ (mov r8, r8)
 800515a:	46bd      	mov	sp, r7
 800515c:	b005      	add	sp, #20
 800515e:	bd90      	pop	{r4, r7, pc}
 8005160:	20000278 	.word	0x20000278
 8005164:	40013800 	.word	0x40013800
 8005168:	40004400 	.word	0x40004400
 800516c:	20000280 	.word	0x20000280
 8005170:	20000274 	.word	0x20000274
 8005174:	2000027c 	.word	0x2000027c
 8005178:	20000284 	.word	0x20000284
 800517c:	20000288 	.word	0x20000288
 8005180:	2000028c 	.word	0x2000028c
 8005184:	2000028d 	.word	0x2000028d

08005188 <USART1_IRQHandler>:


#ifndef USART1_IRQHandler
void USART1_IRQHandler(void)
{
 8005188:	b580      	push	{r7, lr}
 800518a:	af00      	add	r7, sp, #0
	uart_irq_handler(USART1);
 800518c:	4b03      	ldr	r3, [pc, #12]	@ (800519c <USART1_IRQHandler+0x14>)
 800518e:	0018      	movs	r0, r3
 8005190:	f7ff feec 	bl	8004f6c <uart_irq_handler>
}
 8005194:	46c0      	nop			@ (mov r8, r8)
 8005196:	46bd      	mov	sp, r7
 8005198:	bd80      	pop	{r7, pc}
 800519a:	46c0      	nop			@ (mov r8, r8)
 800519c:	40013800 	.word	0x40013800

080051a0 <USART2_IRQHandler>:
#endif

#ifndef USART2_IRQHandler
void USART2_IRQHandler(void)
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	af00      	add	r7, sp, #0
	uart_irq_handler(USART2);
 80051a4:	4b03      	ldr	r3, [pc, #12]	@ (80051b4 <USART2_IRQHandler+0x14>)
 80051a6:	0018      	movs	r0, r3
 80051a8:	f7ff fee0 	bl	8004f6c <uart_irq_handler>
}
 80051ac:	46c0      	nop			@ (mov r8, r8)
 80051ae:	46bd      	mov	sp, r7
 80051b0:	bd80      	pop	{r7, pc}
 80051b2:	46c0      	nop			@ (mov r8, r8)
 80051b4:	40004400 	.word	0x40004400

080051b8 <hal_watchdog_init>:


static IWDG_HandleTypeDef wdg_hdl = {0};

void hal_watchdog_init(void)
{
 80051b8:	b5b0      	push	{r4, r5, r7, lr}
 80051ba:	af00      	add	r7, sp, #0
    // Call the watch dog initialization function that was created by the hardware configuration tool.
	MX_IWDG_Init();
 80051bc:	f7fb fbe8 	bl	8000990 <MX_IWDG_Init>

	wdg_hdl = hiwdg; // Use the watch dog handle created by the STM32 Hardware Configuration Tool.
 80051c0:	4b04      	ldr	r3, [pc, #16]	@ (80051d4 <hal_watchdog_init+0x1c>)
 80051c2:	4a05      	ldr	r2, [pc, #20]	@ (80051d8 <hal_watchdog_init+0x20>)
 80051c4:	ca13      	ldmia	r2!, {r0, r1, r4}
 80051c6:	c313      	stmia	r3!, {r0, r1, r4}
 80051c8:	6812      	ldr	r2, [r2, #0]
 80051ca:	601a      	str	r2, [r3, #0]

}
 80051cc:	46c0      	nop			@ (mov r8, r8)
 80051ce:	46bd      	mov	sp, r7
 80051d0:	bdb0      	pop	{r4, r5, r7, pc}
 80051d2:	46c0      	nop			@ (mov r8, r8)
 80051d4:	20000290 	.word	0x20000290
 80051d8:	200000e0 	.word	0x200000e0

080051dc <hal_watchdog_reset>:
{

}

void hal_watchdog_reset(void)
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	af00      	add	r7, sp, #0
	if( wdg_hdl.Instance != NULL )			// Bootloader was resetting wdt but it was never initialized. This resulted in a null pointer access in HAL functions which impacted FLASH-SR CFGBSY Flag
 80051e0:	4b05      	ldr	r3, [pc, #20]	@ (80051f8 <hal_watchdog_reset+0x1c>)
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d003      	beq.n	80051f0 <hal_watchdog_reset+0x14>
	{
		/* reload the WDT */
		HAL_IWDG_Refresh(&wdg_hdl);
 80051e8:	4b03      	ldr	r3, [pc, #12]	@ (80051f8 <hal_watchdog_reset+0x1c>)
 80051ea:	0018      	movs	r0, r3
 80051ec:	f7fd fb34 	bl	8002858 <HAL_IWDG_Refresh>
	}
}
 80051f0:	46c0      	nop			@ (mov r8, r8)
 80051f2:	46bd      	mov	sp, r7
 80051f4:	bd80      	pop	{r7, pc}
 80051f6:	46c0      	nop			@ (mov r8, r8)
 80051f8:	20000290 	.word	0x20000290

080051fc <memset>:
 80051fc:	0003      	movs	r3, r0
 80051fe:	1882      	adds	r2, r0, r2
 8005200:	4293      	cmp	r3, r2
 8005202:	d100      	bne.n	8005206 <memset+0xa>
 8005204:	4770      	bx	lr
 8005206:	7019      	strb	r1, [r3, #0]
 8005208:	3301      	adds	r3, #1
 800520a:	e7f9      	b.n	8005200 <memset+0x4>

0800520c <_init>:
 800520c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800520e:	46c0      	nop			@ (mov r8, r8)
 8005210:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005212:	bc08      	pop	{r3}
 8005214:	469e      	mov	lr, r3
 8005216:	4770      	bx	lr

08005218 <_fini>:
 8005218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800521a:	46c0      	nop			@ (mov r8, r8)
 800521c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800521e:	bc08      	pop	{r3}
 8005220:	469e      	mov	lr, r3
 8005222:	4770      	bx	lr
