
IR4DetacherFirmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000170  08000000  08000000  00001000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e0c  08000170  08000170  00001170  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08004f7c  08004f7c  00005f7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005010  08005010  0000704c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08005010  08005010  0000704c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08005010  08005010  0000704c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005010  08005010  00006010  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005014  08005014  00006014  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000004c  20000000  08005018  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e8  2000004c  08005064  0000704c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000334  08005064  00007334  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000704c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a0fa  00000000  00000000  00007074  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000044e8  00000000  00000000  0002116e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016a8  00000000  00000000  00025658  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001181  00000000  00000000  00026d00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004e9d  00000000  00000000  00027e81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00021421  00000000  00000000  0002cd1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009ab35  00000000  00000000  0004e13f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e8c74  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f4c  00000000  00000000  000e8cb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000009e  00000000  00000000  000edc04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000170 <__do_global_dtors_aux>:
 8000170:	b510      	push	{r4, lr}
 8000172:	4c06      	ldr	r4, [pc, #24]	@ (800018c <__do_global_dtors_aux+0x1c>)
 8000174:	7823      	ldrb	r3, [r4, #0]
 8000176:	2b00      	cmp	r3, #0
 8000178:	d107      	bne.n	800018a <__do_global_dtors_aux+0x1a>
 800017a:	4b05      	ldr	r3, [pc, #20]	@ (8000190 <__do_global_dtors_aux+0x20>)
 800017c:	2b00      	cmp	r3, #0
 800017e:	d002      	beq.n	8000186 <__do_global_dtors_aux+0x16>
 8000180:	4804      	ldr	r0, [pc, #16]	@ (8000194 <__do_global_dtors_aux+0x24>)
 8000182:	e000      	b.n	8000186 <__do_global_dtors_aux+0x16>
 8000184:	bf00      	nop
 8000186:	2301      	movs	r3, #1
 8000188:	7023      	strb	r3, [r4, #0]
 800018a:	bd10      	pop	{r4, pc}
 800018c:	2000004c 	.word	0x2000004c
 8000190:	00000000 	.word	0x00000000
 8000194:	08004f64 	.word	0x08004f64

08000198 <frame_dummy>:
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <frame_dummy+0x14>)
 800019a:	b510      	push	{r4, lr}
 800019c:	2b00      	cmp	r3, #0
 800019e:	d003      	beq.n	80001a8 <frame_dummy+0x10>
 80001a0:	4903      	ldr	r1, [pc, #12]	@ (80001b0 <frame_dummy+0x18>)
 80001a2:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <frame_dummy+0x1c>)
 80001a4:	e000      	b.n	80001a8 <frame_dummy+0x10>
 80001a6:	bf00      	nop
 80001a8:	bd10      	pop	{r4, pc}
 80001aa:	46c0      	nop			@ (mov r8, r8)
 80001ac:	00000000 	.word	0x00000000
 80001b0:	20000050 	.word	0x20000050
 80001b4:	08004f64 	.word	0x08004f64

080001b8 <__udivsi3>:
 80001b8:	2200      	movs	r2, #0
 80001ba:	0843      	lsrs	r3, r0, #1
 80001bc:	428b      	cmp	r3, r1
 80001be:	d374      	bcc.n	80002aa <__udivsi3+0xf2>
 80001c0:	0903      	lsrs	r3, r0, #4
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d35f      	bcc.n	8000286 <__udivsi3+0xce>
 80001c6:	0a03      	lsrs	r3, r0, #8
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d344      	bcc.n	8000256 <__udivsi3+0x9e>
 80001cc:	0b03      	lsrs	r3, r0, #12
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d328      	bcc.n	8000224 <__udivsi3+0x6c>
 80001d2:	0c03      	lsrs	r3, r0, #16
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d30d      	bcc.n	80001f4 <__udivsi3+0x3c>
 80001d8:	22ff      	movs	r2, #255	@ 0xff
 80001da:	0209      	lsls	r1, r1, #8
 80001dc:	ba12      	rev	r2, r2
 80001de:	0c03      	lsrs	r3, r0, #16
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d302      	bcc.n	80001ea <__udivsi3+0x32>
 80001e4:	1212      	asrs	r2, r2, #8
 80001e6:	0209      	lsls	r1, r1, #8
 80001e8:	d065      	beq.n	80002b6 <__udivsi3+0xfe>
 80001ea:	0b03      	lsrs	r3, r0, #12
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d319      	bcc.n	8000224 <__udivsi3+0x6c>
 80001f0:	e000      	b.n	80001f4 <__udivsi3+0x3c>
 80001f2:	0a09      	lsrs	r1, r1, #8
 80001f4:	0bc3      	lsrs	r3, r0, #15
 80001f6:	428b      	cmp	r3, r1
 80001f8:	d301      	bcc.n	80001fe <__udivsi3+0x46>
 80001fa:	03cb      	lsls	r3, r1, #15
 80001fc:	1ac0      	subs	r0, r0, r3
 80001fe:	4152      	adcs	r2, r2
 8000200:	0b83      	lsrs	r3, r0, #14
 8000202:	428b      	cmp	r3, r1
 8000204:	d301      	bcc.n	800020a <__udivsi3+0x52>
 8000206:	038b      	lsls	r3, r1, #14
 8000208:	1ac0      	subs	r0, r0, r3
 800020a:	4152      	adcs	r2, r2
 800020c:	0b43      	lsrs	r3, r0, #13
 800020e:	428b      	cmp	r3, r1
 8000210:	d301      	bcc.n	8000216 <__udivsi3+0x5e>
 8000212:	034b      	lsls	r3, r1, #13
 8000214:	1ac0      	subs	r0, r0, r3
 8000216:	4152      	adcs	r2, r2
 8000218:	0b03      	lsrs	r3, r0, #12
 800021a:	428b      	cmp	r3, r1
 800021c:	d301      	bcc.n	8000222 <__udivsi3+0x6a>
 800021e:	030b      	lsls	r3, r1, #12
 8000220:	1ac0      	subs	r0, r0, r3
 8000222:	4152      	adcs	r2, r2
 8000224:	0ac3      	lsrs	r3, r0, #11
 8000226:	428b      	cmp	r3, r1
 8000228:	d301      	bcc.n	800022e <__udivsi3+0x76>
 800022a:	02cb      	lsls	r3, r1, #11
 800022c:	1ac0      	subs	r0, r0, r3
 800022e:	4152      	adcs	r2, r2
 8000230:	0a83      	lsrs	r3, r0, #10
 8000232:	428b      	cmp	r3, r1
 8000234:	d301      	bcc.n	800023a <__udivsi3+0x82>
 8000236:	028b      	lsls	r3, r1, #10
 8000238:	1ac0      	subs	r0, r0, r3
 800023a:	4152      	adcs	r2, r2
 800023c:	0a43      	lsrs	r3, r0, #9
 800023e:	428b      	cmp	r3, r1
 8000240:	d301      	bcc.n	8000246 <__udivsi3+0x8e>
 8000242:	024b      	lsls	r3, r1, #9
 8000244:	1ac0      	subs	r0, r0, r3
 8000246:	4152      	adcs	r2, r2
 8000248:	0a03      	lsrs	r3, r0, #8
 800024a:	428b      	cmp	r3, r1
 800024c:	d301      	bcc.n	8000252 <__udivsi3+0x9a>
 800024e:	020b      	lsls	r3, r1, #8
 8000250:	1ac0      	subs	r0, r0, r3
 8000252:	4152      	adcs	r2, r2
 8000254:	d2cd      	bcs.n	80001f2 <__udivsi3+0x3a>
 8000256:	09c3      	lsrs	r3, r0, #7
 8000258:	428b      	cmp	r3, r1
 800025a:	d301      	bcc.n	8000260 <__udivsi3+0xa8>
 800025c:	01cb      	lsls	r3, r1, #7
 800025e:	1ac0      	subs	r0, r0, r3
 8000260:	4152      	adcs	r2, r2
 8000262:	0983      	lsrs	r3, r0, #6
 8000264:	428b      	cmp	r3, r1
 8000266:	d301      	bcc.n	800026c <__udivsi3+0xb4>
 8000268:	018b      	lsls	r3, r1, #6
 800026a:	1ac0      	subs	r0, r0, r3
 800026c:	4152      	adcs	r2, r2
 800026e:	0943      	lsrs	r3, r0, #5
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__udivsi3+0xc0>
 8000274:	014b      	lsls	r3, r1, #5
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0903      	lsrs	r3, r0, #4
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__udivsi3+0xcc>
 8000280:	010b      	lsls	r3, r1, #4
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	08c3      	lsrs	r3, r0, #3
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__udivsi3+0xd8>
 800028c:	00cb      	lsls	r3, r1, #3
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0883      	lsrs	r3, r0, #2
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__udivsi3+0xe4>
 8000298:	008b      	lsls	r3, r1, #2
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0843      	lsrs	r3, r0, #1
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__udivsi3+0xf0>
 80002a4:	004b      	lsls	r3, r1, #1
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	1a41      	subs	r1, r0, r1
 80002ac:	d200      	bcs.n	80002b0 <__udivsi3+0xf8>
 80002ae:	4601      	mov	r1, r0
 80002b0:	4152      	adcs	r2, r2
 80002b2:	4610      	mov	r0, r2
 80002b4:	4770      	bx	lr
 80002b6:	e7ff      	b.n	80002b8 <__udivsi3+0x100>
 80002b8:	b501      	push	{r0, lr}
 80002ba:	2000      	movs	r0, #0
 80002bc:	f000 f806 	bl	80002cc <__aeabi_idiv0>
 80002c0:	bd02      	pop	{r1, pc}
 80002c2:	46c0      	nop			@ (mov r8, r8)

080002c4 <__aeabi_uidivmod>:
 80002c4:	2900      	cmp	r1, #0
 80002c6:	d0f7      	beq.n	80002b8 <__udivsi3+0x100>
 80002c8:	e776      	b.n	80001b8 <__udivsi3>
 80002ca:	4770      	bx	lr

080002cc <__aeabi_idiv0>:
 80002cc:	4770      	bx	lr
 80002ce:	46c0      	nop			@ (mov r8, r8)

080002d0 <WptControllerInit>:
*
* return values: None
*
* ****************************************************************/
void WptControllerInit(void)
{
 80002d0:	b580      	push	{r7, lr}
 80002d2:	af00      	add	r7, sp, #0

}
 80002d4:	46c0      	nop			@ (mov r8, r8)
 80002d6:	46bd      	mov	sp, r7
 80002d8:	bd80      	pop	{r7, pc}
	...

080002dc <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	b084      	sub	sp, #16
 80002e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80002e2:	1d3b      	adds	r3, r7, #4
 80002e4:	0018      	movs	r0, r3
 80002e6:	230c      	movs	r3, #12
 80002e8:	001a      	movs	r2, r3
 80002ea:	2100      	movs	r1, #0
 80002ec:	f004 fe32 	bl	8004f54 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80002f0:	4b2d      	ldr	r3, [pc, #180]	@ (80003a8 <MX_ADC1_Init+0xcc>)
 80002f2:	4a2e      	ldr	r2, [pc, #184]	@ (80003ac <MX_ADC1_Init+0xd0>)
 80002f4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80002f6:	4b2c      	ldr	r3, [pc, #176]	@ (80003a8 <MX_ADC1_Init+0xcc>)
 80002f8:	2280      	movs	r2, #128	@ 0x80
 80002fa:	05d2      	lsls	r2, r2, #23
 80002fc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80002fe:	4b2a      	ldr	r3, [pc, #168]	@ (80003a8 <MX_ADC1_Init+0xcc>)
 8000300:	2200      	movs	r2, #0
 8000302:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000304:	4b28      	ldr	r3, [pc, #160]	@ (80003a8 <MX_ADC1_Init+0xcc>)
 8000306:	2200      	movs	r2, #0
 8000308:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800030a:	4b27      	ldr	r3, [pc, #156]	@ (80003a8 <MX_ADC1_Init+0xcc>)
 800030c:	2200      	movs	r2, #0
 800030e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000310:	4b25      	ldr	r3, [pc, #148]	@ (80003a8 <MX_ADC1_Init+0xcc>)
 8000312:	2204      	movs	r2, #4
 8000314:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000316:	4b24      	ldr	r3, [pc, #144]	@ (80003a8 <MX_ADC1_Init+0xcc>)
 8000318:	2200      	movs	r2, #0
 800031a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 800031c:	4b22      	ldr	r3, [pc, #136]	@ (80003a8 <MX_ADC1_Init+0xcc>)
 800031e:	2200      	movs	r2, #0
 8000320:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000322:	4b21      	ldr	r3, [pc, #132]	@ (80003a8 <MX_ADC1_Init+0xcc>)
 8000324:	2200      	movs	r2, #0
 8000326:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8000328:	4b1f      	ldr	r3, [pc, #124]	@ (80003a8 <MX_ADC1_Init+0xcc>)
 800032a:	2201      	movs	r2, #1
 800032c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800032e:	4b1e      	ldr	r3, [pc, #120]	@ (80003a8 <MX_ADC1_Init+0xcc>)
 8000330:	2220      	movs	r2, #32
 8000332:	2100      	movs	r1, #0
 8000334:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000336:	4b1c      	ldr	r3, [pc, #112]	@ (80003a8 <MX_ADC1_Init+0xcc>)
 8000338:	2200      	movs	r2, #0
 800033a:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800033c:	4b1a      	ldr	r3, [pc, #104]	@ (80003a8 <MX_ADC1_Init+0xcc>)
 800033e:	2200      	movs	r2, #0
 8000340:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000342:	4b19      	ldr	r3, [pc, #100]	@ (80003a8 <MX_ADC1_Init+0xcc>)
 8000344:	222c      	movs	r2, #44	@ 0x2c
 8000346:	2100      	movs	r1, #0
 8000348:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800034a:	4b17      	ldr	r3, [pc, #92]	@ (80003a8 <MX_ADC1_Init+0xcc>)
 800034c:	2200      	movs	r2, #0
 800034e:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8000350:	4b15      	ldr	r3, [pc, #84]	@ (80003a8 <MX_ADC1_Init+0xcc>)
 8000352:	2200      	movs	r2, #0
 8000354:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8000356:	4b14      	ldr	r3, [pc, #80]	@ (80003a8 <MX_ADC1_Init+0xcc>)
 8000358:	2200      	movs	r2, #0
 800035a:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 800035c:	4b12      	ldr	r3, [pc, #72]	@ (80003a8 <MX_ADC1_Init+0xcc>)
 800035e:	223c      	movs	r2, #60	@ 0x3c
 8000360:	2100      	movs	r1, #0
 8000362:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000364:	4b10      	ldr	r3, [pc, #64]	@ (80003a8 <MX_ADC1_Init+0xcc>)
 8000366:	2200      	movs	r2, #0
 8000368:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800036a:	4b0f      	ldr	r3, [pc, #60]	@ (80003a8 <MX_ADC1_Init+0xcc>)
 800036c:	0018      	movs	r0, r3
 800036e:	f001 f89d 	bl	80014ac <HAL_ADC_Init>
 8000372:	1e03      	subs	r3, r0, #0
 8000374:	d001      	beq.n	800037a <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 8000376:	f000 fac4 	bl	8000902 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800037a:	1d3b      	adds	r3, r7, #4
 800037c:	4a0c      	ldr	r2, [pc, #48]	@ (80003b0 <MX_ADC1_Init+0xd4>)
 800037e:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000380:	1d3b      	adds	r3, r7, #4
 8000382:	2200      	movs	r2, #0
 8000384:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8000386:	1d3b      	adds	r3, r7, #4
 8000388:	2200      	movs	r2, #0
 800038a:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800038c:	1d3a      	adds	r2, r7, #4
 800038e:	4b06      	ldr	r3, [pc, #24]	@ (80003a8 <MX_ADC1_Init+0xcc>)
 8000390:	0011      	movs	r1, r2
 8000392:	0018      	movs	r0, r3
 8000394:	f001 fb62 	bl	8001a5c <HAL_ADC_ConfigChannel>
 8000398:	1e03      	subs	r3, r0, #0
 800039a:	d001      	beq.n	80003a0 <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 800039c:	f000 fab1 	bl	8000902 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80003a0:	46c0      	nop			@ (mov r8, r8)
 80003a2:	46bd      	mov	sp, r7
 80003a4:	b004      	add	sp, #16
 80003a6:	bd80      	pop	{r7, pc}
 80003a8:	20000068 	.word	0x20000068
 80003ac:	40012400 	.word	0x40012400
 80003b0:	28000400 	.word	0x28000400

080003b4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80003b4:	b590      	push	{r4, r7, lr}
 80003b6:	b08b      	sub	sp, #44	@ 0x2c
 80003b8:	af00      	add	r7, sp, #0
 80003ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003bc:	2414      	movs	r4, #20
 80003be:	193b      	adds	r3, r7, r4
 80003c0:	0018      	movs	r0, r3
 80003c2:	2314      	movs	r3, #20
 80003c4:	001a      	movs	r2, r3
 80003c6:	2100      	movs	r1, #0
 80003c8:	f004 fdc4 	bl	8004f54 <memset>
  if(adcHandle->Instance==ADC1)
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	4a29      	ldr	r2, [pc, #164]	@ (8000478 <HAL_ADC_MspInit+0xc4>)
 80003d2:	4293      	cmp	r3, r2
 80003d4:	d14c      	bne.n	8000470 <HAL_ADC_MspInit+0xbc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80003d6:	4b29      	ldr	r3, [pc, #164]	@ (800047c <HAL_ADC_MspInit+0xc8>)
 80003d8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80003da:	4b28      	ldr	r3, [pc, #160]	@ (800047c <HAL_ADC_MspInit+0xc8>)
 80003dc:	2180      	movs	r1, #128	@ 0x80
 80003de:	0349      	lsls	r1, r1, #13
 80003e0:	430a      	orrs	r2, r1
 80003e2:	641a      	str	r2, [r3, #64]	@ 0x40
 80003e4:	4b25      	ldr	r3, [pc, #148]	@ (800047c <HAL_ADC_MspInit+0xc8>)
 80003e6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80003e8:	2380      	movs	r3, #128	@ 0x80
 80003ea:	035b      	lsls	r3, r3, #13
 80003ec:	4013      	ands	r3, r2
 80003ee:	613b      	str	r3, [r7, #16]
 80003f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80003f2:	4b22      	ldr	r3, [pc, #136]	@ (800047c <HAL_ADC_MspInit+0xc8>)
 80003f4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80003f6:	4b21      	ldr	r3, [pc, #132]	@ (800047c <HAL_ADC_MspInit+0xc8>)
 80003f8:	2101      	movs	r1, #1
 80003fa:	430a      	orrs	r2, r1
 80003fc:	635a      	str	r2, [r3, #52]	@ 0x34
 80003fe:	4b1f      	ldr	r3, [pc, #124]	@ (800047c <HAL_ADC_MspInit+0xc8>)
 8000400:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000402:	2201      	movs	r2, #1
 8000404:	4013      	ands	r3, r2
 8000406:	60fb      	str	r3, [r7, #12]
 8000408:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800040a:	4b1c      	ldr	r3, [pc, #112]	@ (800047c <HAL_ADC_MspInit+0xc8>)
 800040c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800040e:	4b1b      	ldr	r3, [pc, #108]	@ (800047c <HAL_ADC_MspInit+0xc8>)
 8000410:	2102      	movs	r1, #2
 8000412:	430a      	orrs	r2, r1
 8000414:	635a      	str	r2, [r3, #52]	@ 0x34
 8000416:	4b19      	ldr	r3, [pc, #100]	@ (800047c <HAL_ADC_MspInit+0xc8>)
 8000418:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800041a:	2202      	movs	r2, #2
 800041c:	4013      	ands	r3, r2
 800041e:	60bb      	str	r3, [r7, #8]
 8000420:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN0
    PA7     ------> ADC1_IN7
    PB2     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = VBOOST_FDBK_Pin|VIN_MONITOR_Pin;
 8000422:	193b      	adds	r3, r7, r4
 8000424:	2281      	movs	r2, #129	@ 0x81
 8000426:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000428:	193b      	adds	r3, r7, r4
 800042a:	2203      	movs	r2, #3
 800042c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800042e:	193b      	adds	r3, r7, r4
 8000430:	2200      	movs	r2, #0
 8000432:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000434:	193a      	adds	r2, r7, r4
 8000436:	23a0      	movs	r3, #160	@ 0xa0
 8000438:	05db      	lsls	r3, r3, #23
 800043a:	0011      	movs	r1, r2
 800043c:	0018      	movs	r0, r3
 800043e:	f001 feaf 	bl	80021a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = NFC_VOUT_SENSE_Pin;
 8000442:	193b      	adds	r3, r7, r4
 8000444:	2204      	movs	r2, #4
 8000446:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000448:	193b      	adds	r3, r7, r4
 800044a:	2203      	movs	r2, #3
 800044c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800044e:	193b      	adds	r3, r7, r4
 8000450:	2200      	movs	r2, #0
 8000452:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(NFC_VOUT_SENSE_GPIO_Port, &GPIO_InitStruct);
 8000454:	193b      	adds	r3, r7, r4
 8000456:	4a0a      	ldr	r2, [pc, #40]	@ (8000480 <HAL_ADC_MspInit+0xcc>)
 8000458:	0019      	movs	r1, r3
 800045a:	0010      	movs	r0, r2
 800045c:	f001 fea0 	bl	80021a0 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 8000460:	2200      	movs	r2, #0
 8000462:	2100      	movs	r1, #0
 8000464:	200c      	movs	r0, #12
 8000466:	f001 fd9d 	bl	8001fa4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 800046a:	200c      	movs	r0, #12
 800046c:	f001 fdaf 	bl	8001fce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000470:	46c0      	nop			@ (mov r8, r8)
 8000472:	46bd      	mov	sp, r7
 8000474:	b00b      	add	sp, #44	@ 0x2c
 8000476:	bd90      	pop	{r4, r7, pc}
 8000478:	40012400 	.word	0x40012400
 800047c:	40021000 	.word	0x40021000
 8000480:	50000400 	.word	0x50000400

08000484 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8000484:	b590      	push	{r4, r7, lr}
 8000486:	b08b      	sub	sp, #44	@ 0x2c
 8000488:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800048a:	2414      	movs	r4, #20
 800048c:	193b      	adds	r3, r7, r4
 800048e:	0018      	movs	r0, r3
 8000490:	2314      	movs	r3, #20
 8000492:	001a      	movs	r2, r3
 8000494:	2100      	movs	r1, #0
 8000496:	f004 fd5d 	bl	8004f54 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800049a:	4b6f      	ldr	r3, [pc, #444]	@ (8000658 <MX_GPIO_Init+0x1d4>)
 800049c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800049e:	4b6e      	ldr	r3, [pc, #440]	@ (8000658 <MX_GPIO_Init+0x1d4>)
 80004a0:	2104      	movs	r1, #4
 80004a2:	430a      	orrs	r2, r1
 80004a4:	635a      	str	r2, [r3, #52]	@ 0x34
 80004a6:	4b6c      	ldr	r3, [pc, #432]	@ (8000658 <MX_GPIO_Init+0x1d4>)
 80004a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80004aa:	2204      	movs	r2, #4
 80004ac:	4013      	ands	r3, r2
 80004ae:	613b      	str	r3, [r7, #16]
 80004b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80004b2:	4b69      	ldr	r3, [pc, #420]	@ (8000658 <MX_GPIO_Init+0x1d4>)
 80004b4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80004b6:	4b68      	ldr	r3, [pc, #416]	@ (8000658 <MX_GPIO_Init+0x1d4>)
 80004b8:	2120      	movs	r1, #32
 80004ba:	430a      	orrs	r2, r1
 80004bc:	635a      	str	r2, [r3, #52]	@ 0x34
 80004be:	4b66      	ldr	r3, [pc, #408]	@ (8000658 <MX_GPIO_Init+0x1d4>)
 80004c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80004c2:	2220      	movs	r2, #32
 80004c4:	4013      	ands	r3, r2
 80004c6:	60fb      	str	r3, [r7, #12]
 80004c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004ca:	4b63      	ldr	r3, [pc, #396]	@ (8000658 <MX_GPIO_Init+0x1d4>)
 80004cc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80004ce:	4b62      	ldr	r3, [pc, #392]	@ (8000658 <MX_GPIO_Init+0x1d4>)
 80004d0:	2101      	movs	r1, #1
 80004d2:	430a      	orrs	r2, r1
 80004d4:	635a      	str	r2, [r3, #52]	@ 0x34
 80004d6:	4b60      	ldr	r3, [pc, #384]	@ (8000658 <MX_GPIO_Init+0x1d4>)
 80004d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80004da:	2201      	movs	r2, #1
 80004dc:	4013      	ands	r3, r2
 80004de:	60bb      	str	r3, [r7, #8]
 80004e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004e2:	4b5d      	ldr	r3, [pc, #372]	@ (8000658 <MX_GPIO_Init+0x1d4>)
 80004e4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80004e6:	4b5c      	ldr	r3, [pc, #368]	@ (8000658 <MX_GPIO_Init+0x1d4>)
 80004e8:	2102      	movs	r1, #2
 80004ea:	430a      	orrs	r2, r1
 80004ec:	635a      	str	r2, [r3, #52]	@ 0x34
 80004ee:	4b5a      	ldr	r3, [pc, #360]	@ (8000658 <MX_GPIO_Init+0x1d4>)
 80004f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80004f2:	2202      	movs	r2, #2
 80004f4:	4013      	ands	r3, r2
 80004f6:	607b      	str	r3, [r7, #4]
 80004f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80004fa:	4b57      	ldr	r3, [pc, #348]	@ (8000658 <MX_GPIO_Init+0x1d4>)
 80004fc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80004fe:	4b56      	ldr	r3, [pc, #344]	@ (8000658 <MX_GPIO_Init+0x1d4>)
 8000500:	2108      	movs	r1, #8
 8000502:	430a      	orrs	r2, r1
 8000504:	635a      	str	r2, [r3, #52]	@ 0x34
 8000506:	4b54      	ldr	r3, [pc, #336]	@ (8000658 <MX_GPIO_Init+0x1d4>)
 8000508:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800050a:	2208      	movs	r2, #8
 800050c:	4013      	ands	r3, r2
 800050e:	603b      	str	r3, [r7, #0]
 8000510:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, VBOOST_ENABLE_Pin|LED_RED_Pin|LED_YELLOW_Pin|LED_GREEN_Pin
 8000512:	4952      	ldr	r1, [pc, #328]	@ (800065c <MX_GPIO_Init+0x1d8>)
 8000514:	23a0      	movs	r3, #160	@ 0xa0
 8000516:	05db      	lsls	r3, r3, #23
 8000518:	2200      	movs	r2, #0
 800051a:	0018      	movs	r0, r3
 800051c:	f001 ffa4 	bl	8002468 <HAL_GPIO_WritePin>
                          |CHARGE_EN_Pin|BATTERY_ENABLE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NFC_POWER_ENABLE_GPIO_Port, NFC_POWER_ENABLE_Pin, GPIO_PIN_RESET);
 8000520:	4b4f      	ldr	r3, [pc, #316]	@ (8000660 <MX_GPIO_Init+0x1dc>)
 8000522:	2200      	movs	r2, #0
 8000524:	2140      	movs	r1, #64	@ 0x40
 8000526:	0018      	movs	r0, r3
 8000528:	f001 ff9e 	bl	8002468 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 800052c:	193b      	adds	r3, r7, r4
 800052e:	2280      	movs	r2, #128	@ 0x80
 8000530:	0192      	lsls	r2, r2, #6
 8000532:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000534:	193b      	adds	r3, r7, r4
 8000536:	2200      	movs	r2, #0
 8000538:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800053a:	193b      	adds	r3, r7, r4
 800053c:	2200      	movs	r2, #0
 800053e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000540:	193b      	adds	r3, r7, r4
 8000542:	4a48      	ldr	r2, [pc, #288]	@ (8000664 <MX_GPIO_Init+0x1e0>)
 8000544:	0019      	movs	r1, r3
 8000546:	0010      	movs	r0, r2
 8000548:	f001 fe2a 	bl	80021a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 PC6 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_6|GPIO_PIN_7;
 800054c:	193b      	adds	r3, r7, r4
 800054e:	4a46      	ldr	r2, [pc, #280]	@ (8000668 <MX_GPIO_Init+0x1e4>)
 8000550:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000552:	193b      	adds	r3, r7, r4
 8000554:	2203      	movs	r2, #3
 8000556:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000558:	193b      	adds	r3, r7, r4
 800055a:	2200      	movs	r2, #0
 800055c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800055e:	193b      	adds	r3, r7, r4
 8000560:	4a40      	ldr	r2, [pc, #256]	@ (8000664 <MX_GPIO_Init+0x1e0>)
 8000562:	0019      	movs	r1, r3
 8000564:	0010      	movs	r0, r2
 8000566:	f001 fe1b 	bl	80021a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800056a:	193b      	adds	r3, r7, r4
 800056c:	2203      	movs	r2, #3
 800056e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000570:	193b      	adds	r3, r7, r4
 8000572:	2203      	movs	r2, #3
 8000574:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000576:	193b      	adds	r3, r7, r4
 8000578:	2200      	movs	r2, #0
 800057a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800057c:	193b      	adds	r3, r7, r4
 800057e:	4a3b      	ldr	r2, [pc, #236]	@ (800066c <MX_GPIO_Init+0x1e8>)
 8000580:	0019      	movs	r1, r3
 8000582:	0010      	movs	r0, r2
 8000584:	f001 fe0c 	bl	80021a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : VBOOST_ENABLE_Pin LED_RED_Pin LED_YELLOW_Pin LED_GREEN_Pin
                           CHARGE_EN_Pin BATTERY_ENABLE_Pin */
  GPIO_InitStruct.Pin = VBOOST_ENABLE_Pin|LED_RED_Pin|LED_YELLOW_Pin|LED_GREEN_Pin
 8000588:	193b      	adds	r3, r7, r4
 800058a:	4a34      	ldr	r2, [pc, #208]	@ (800065c <MX_GPIO_Init+0x1d8>)
 800058c:	601a      	str	r2, [r3, #0]
                          |CHARGE_EN_Pin|BATTERY_ENABLE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800058e:	193b      	adds	r3, r7, r4
 8000590:	2201      	movs	r2, #1
 8000592:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000594:	193b      	adds	r3, r7, r4
 8000596:	2200      	movs	r2, #0
 8000598:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800059a:	193b      	adds	r3, r7, r4
 800059c:	2200      	movs	r2, #0
 800059e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005a0:	193a      	adds	r2, r7, r4
 80005a2:	23a0      	movs	r3, #160	@ 0xa0
 80005a4:	05db      	lsls	r3, r3, #23
 80005a6:	0011      	movs	r1, r2
 80005a8:	0018      	movs	r0, r3
 80005aa:	f001 fdf9 	bl	80021a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB11 PB12 PB13
                           PB14 PB15 PB3 PB4
                           PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 80005ae:	193b      	adds	r3, r7, r4
 80005b0:	4a2f      	ldr	r2, [pc, #188]	@ (8000670 <MX_GPIO_Init+0x1ec>)
 80005b2:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4
                          |GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005b4:	193b      	adds	r3, r7, r4
 80005b6:	2203      	movs	r2, #3
 80005b8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ba:	193b      	adds	r3, r7, r4
 80005bc:	2200      	movs	r2, #0
 80005be:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005c0:	193b      	adds	r3, r7, r4
 80005c2:	4a27      	ldr	r2, [pc, #156]	@ (8000660 <MX_GPIO_Init+0x1dc>)
 80005c4:	0019      	movs	r1, r3
 80005c6:	0010      	movs	r0, r2
 80005c8:	f001 fdea 	bl	80021a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80005cc:	193b      	adds	r3, r7, r4
 80005ce:	2280      	movs	r2, #128	@ 0x80
 80005d0:	0152      	lsls	r2, r2, #5
 80005d2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005d4:	193b      	adds	r3, r7, r4
 80005d6:	2203      	movs	r2, #3
 80005d8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005da:	193b      	adds	r3, r7, r4
 80005dc:	2200      	movs	r2, #0
 80005de:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005e0:	193a      	adds	r2, r7, r4
 80005e2:	23a0      	movs	r3, #160	@ 0xa0
 80005e4:	05db      	lsls	r3, r3, #23
 80005e6:	0011      	movs	r1, r2
 80005e8:	0018      	movs	r0, r3
 80005ea:	f001 fdd9 	bl	80021a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD2 PD3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80005ee:	193b      	adds	r3, r7, r4
 80005f0:	220f      	movs	r2, #15
 80005f2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005f4:	193b      	adds	r3, r7, r4
 80005f6:	2203      	movs	r2, #3
 80005f8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005fa:	193b      	adds	r3, r7, r4
 80005fc:	2200      	movs	r2, #0
 80005fe:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000600:	193b      	adds	r3, r7, r4
 8000602:	4a1c      	ldr	r2, [pc, #112]	@ (8000674 <MX_GPIO_Init+0x1f0>)
 8000604:	0019      	movs	r1, r3
 8000606:	0010      	movs	r0, r2
 8000608:	f001 fdca 	bl	80021a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : NFC_POWER_ENABLE_Pin */
  GPIO_InitStruct.Pin = NFC_POWER_ENABLE_Pin;
 800060c:	193b      	adds	r3, r7, r4
 800060e:	2240      	movs	r2, #64	@ 0x40
 8000610:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000612:	193b      	adds	r3, r7, r4
 8000614:	2201      	movs	r2, #1
 8000616:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000618:	193b      	adds	r3, r7, r4
 800061a:	2200      	movs	r2, #0
 800061c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800061e:	193b      	adds	r3, r7, r4
 8000620:	2200      	movs	r2, #0
 8000622:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(NFC_POWER_ENABLE_GPIO_Port, &GPIO_InitStruct);
 8000624:	193b      	adds	r3, r7, r4
 8000626:	4a0e      	ldr	r2, [pc, #56]	@ (8000660 <MX_GPIO_Init+0x1dc>)
 8000628:	0019      	movs	r1, r3
 800062a:	0010      	movs	r0, r2
 800062c:	f001 fdb8 	bl	80021a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : NFC_FD_INT_Pin */
  GPIO_InitStruct.Pin = NFC_FD_INT_Pin;
 8000630:	0021      	movs	r1, r4
 8000632:	187b      	adds	r3, r7, r1
 8000634:	2280      	movs	r2, #128	@ 0x80
 8000636:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000638:	187b      	adds	r3, r7, r1
 800063a:	2200      	movs	r2, #0
 800063c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800063e:	187b      	adds	r3, r7, r1
 8000640:	2200      	movs	r2, #0
 8000642:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(NFC_FD_INT_GPIO_Port, &GPIO_InitStruct);
 8000644:	187b      	adds	r3, r7, r1
 8000646:	4a06      	ldr	r2, [pc, #24]	@ (8000660 <MX_GPIO_Init+0x1dc>)
 8000648:	0019      	movs	r1, r3
 800064a:	0010      	movs	r0, r2
 800064c:	f001 fda8 	bl	80021a0 <HAL_GPIO_Init>

}
 8000650:	46c0      	nop			@ (mov r8, r8)
 8000652:	46bd      	mov	sp, r7
 8000654:	b00b      	add	sp, #44	@ 0x2c
 8000656:	bd90      	pop	{r4, r7, pc}
 8000658:	40021000 	.word	0x40021000
 800065c:	0000883c 	.word	0x0000883c
 8000660:	50000400 	.word	0x50000400
 8000664:	50000800 	.word	0x50000800
 8000668:	0000c0c0 	.word	0x0000c0c0
 800066c:	50001400 	.word	0x50001400
 8000670:	0000f83a 	.word	0x0000f83a
 8000674:	50000c00 	.word	0x50000c00

08000678 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800067c:	4b1b      	ldr	r3, [pc, #108]	@ (80006ec <MX_I2C1_Init+0x74>)
 800067e:	4a1c      	ldr	r2, [pc, #112]	@ (80006f0 <MX_I2C1_Init+0x78>)
 8000680:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10906999;
 8000682:	4b1a      	ldr	r3, [pc, #104]	@ (80006ec <MX_I2C1_Init+0x74>)
 8000684:	4a1b      	ldr	r2, [pc, #108]	@ (80006f4 <MX_I2C1_Init+0x7c>)
 8000686:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000688:	4b18      	ldr	r3, [pc, #96]	@ (80006ec <MX_I2C1_Init+0x74>)
 800068a:	2200      	movs	r2, #0
 800068c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800068e:	4b17      	ldr	r3, [pc, #92]	@ (80006ec <MX_I2C1_Init+0x74>)
 8000690:	2201      	movs	r2, #1
 8000692:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000694:	4b15      	ldr	r3, [pc, #84]	@ (80006ec <MX_I2C1_Init+0x74>)
 8000696:	2200      	movs	r2, #0
 8000698:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800069a:	4b14      	ldr	r3, [pc, #80]	@ (80006ec <MX_I2C1_Init+0x74>)
 800069c:	2200      	movs	r2, #0
 800069e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80006a0:	4b12      	ldr	r3, [pc, #72]	@ (80006ec <MX_I2C1_Init+0x74>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006a6:	4b11      	ldr	r3, [pc, #68]	@ (80006ec <MX_I2C1_Init+0x74>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006ac:	4b0f      	ldr	r3, [pc, #60]	@ (80006ec <MX_I2C1_Init+0x74>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006b2:	4b0e      	ldr	r3, [pc, #56]	@ (80006ec <MX_I2C1_Init+0x74>)
 80006b4:	0018      	movs	r0, r3
 80006b6:	f001 fef5 	bl	80024a4 <HAL_I2C_Init>
 80006ba:	1e03      	subs	r3, r0, #0
 80006bc:	d001      	beq.n	80006c2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80006be:	f000 f920 	bl	8000902 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80006c2:	4b0a      	ldr	r3, [pc, #40]	@ (80006ec <MX_I2C1_Init+0x74>)
 80006c4:	2100      	movs	r1, #0
 80006c6:	0018      	movs	r0, r3
 80006c8:	f001 ff92 	bl	80025f0 <HAL_I2CEx_ConfigAnalogFilter>
 80006cc:	1e03      	subs	r3, r0, #0
 80006ce:	d001      	beq.n	80006d4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80006d0:	f000 f917 	bl	8000902 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80006d4:	4b05      	ldr	r3, [pc, #20]	@ (80006ec <MX_I2C1_Init+0x74>)
 80006d6:	2100      	movs	r1, #0
 80006d8:	0018      	movs	r0, r3
 80006da:	f001 ffd5 	bl	8002688 <HAL_I2CEx_ConfigDigitalFilter>
 80006de:	1e03      	subs	r3, r0, #0
 80006e0:	d001      	beq.n	80006e6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80006e2:	f000 f90e 	bl	8000902 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006e6:	46c0      	nop			@ (mov r8, r8)
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	200000cc 	.word	0x200000cc
 80006f0:	40005400 	.word	0x40005400
 80006f4:	10906999 	.word	0x10906999

080006f8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80006f8:	b590      	push	{r4, r7, lr}
 80006fa:	b091      	sub	sp, #68	@ 0x44
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000700:	232c      	movs	r3, #44	@ 0x2c
 8000702:	18fb      	adds	r3, r7, r3
 8000704:	0018      	movs	r0, r3
 8000706:	2314      	movs	r3, #20
 8000708:	001a      	movs	r2, r3
 800070a:	2100      	movs	r1, #0
 800070c:	f004 fc22 	bl	8004f54 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000710:	2410      	movs	r4, #16
 8000712:	193b      	adds	r3, r7, r4
 8000714:	0018      	movs	r0, r3
 8000716:	231c      	movs	r3, #28
 8000718:	001a      	movs	r2, r3
 800071a:	2100      	movs	r1, #0
 800071c:	f004 fc1a 	bl	8004f54 <memset>
  if(i2cHandle->Instance==I2C1)
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	4a22      	ldr	r2, [pc, #136]	@ (80007b0 <HAL_I2C_MspInit+0xb8>)
 8000726:	4293      	cmp	r3, r2
 8000728:	d13e      	bne.n	80007a8 <HAL_I2C_MspInit+0xb0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800072a:	193b      	adds	r3, r7, r4
 800072c:	2220      	movs	r2, #32
 800072e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000730:	193b      	adds	r3, r7, r4
 8000732:	2200      	movs	r2, #0
 8000734:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000736:	193b      	adds	r3, r7, r4
 8000738:	0018      	movs	r0, r3
 800073a:	f002 fd2d 	bl	8003198 <HAL_RCCEx_PeriphCLKConfig>
 800073e:	1e03      	subs	r3, r0, #0
 8000740:	d001      	beq.n	8000746 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000742:	f000 f8de 	bl	8000902 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000746:	4b1b      	ldr	r3, [pc, #108]	@ (80007b4 <HAL_I2C_MspInit+0xbc>)
 8000748:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800074a:	4b1a      	ldr	r3, [pc, #104]	@ (80007b4 <HAL_I2C_MspInit+0xbc>)
 800074c:	2102      	movs	r1, #2
 800074e:	430a      	orrs	r2, r1
 8000750:	635a      	str	r2, [r3, #52]	@ 0x34
 8000752:	4b18      	ldr	r3, [pc, #96]	@ (80007b4 <HAL_I2C_MspInit+0xbc>)
 8000754:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000756:	2202      	movs	r2, #2
 8000758:	4013      	ands	r3, r2
 800075a:	60fb      	str	r3, [r7, #12]
 800075c:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = NFC_I2C_SCL_Pin|NFC_I2C_SDA_Pin;
 800075e:	212c      	movs	r1, #44	@ 0x2c
 8000760:	187b      	adds	r3, r7, r1
 8000762:	22c0      	movs	r2, #192	@ 0xc0
 8000764:	0092      	lsls	r2, r2, #2
 8000766:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000768:	187b      	adds	r3, r7, r1
 800076a:	2212      	movs	r2, #18
 800076c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076e:	187b      	adds	r3, r7, r1
 8000770:	2200      	movs	r2, #0
 8000772:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000774:	187b      	adds	r3, r7, r1
 8000776:	2200      	movs	r2, #0
 8000778:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 800077a:	187b      	adds	r3, r7, r1
 800077c:	2206      	movs	r2, #6
 800077e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000780:	187b      	adds	r3, r7, r1
 8000782:	4a0d      	ldr	r2, [pc, #52]	@ (80007b8 <HAL_I2C_MspInit+0xc0>)
 8000784:	0019      	movs	r1, r3
 8000786:	0010      	movs	r0, r2
 8000788:	f001 fd0a 	bl	80021a0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800078c:	4b09      	ldr	r3, [pc, #36]	@ (80007b4 <HAL_I2C_MspInit+0xbc>)
 800078e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000790:	4b08      	ldr	r3, [pc, #32]	@ (80007b4 <HAL_I2C_MspInit+0xbc>)
 8000792:	2180      	movs	r1, #128	@ 0x80
 8000794:	0389      	lsls	r1, r1, #14
 8000796:	430a      	orrs	r2, r1
 8000798:	63da      	str	r2, [r3, #60]	@ 0x3c
 800079a:	4b06      	ldr	r3, [pc, #24]	@ (80007b4 <HAL_I2C_MspInit+0xbc>)
 800079c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800079e:	2380      	movs	r3, #128	@ 0x80
 80007a0:	039b      	lsls	r3, r3, #14
 80007a2:	4013      	ands	r3, r2
 80007a4:	60bb      	str	r3, [r7, #8]
 80007a6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80007a8:	46c0      	nop			@ (mov r8, r8)
 80007aa:	46bd      	mov	sp, r7
 80007ac:	b011      	add	sp, #68	@ 0x44
 80007ae:	bd90      	pop	{r4, r7, pc}
 80007b0:	40005400 	.word	0x40005400
 80007b4:	40021000 	.word	0x40021000
 80007b8:	50000400 	.word	0x50000400

080007bc <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 80007c0:	4b0b      	ldr	r3, [pc, #44]	@ (80007f0 <MX_IWDG_Init+0x34>)
 80007c2:	4a0c      	ldr	r2, [pc, #48]	@ (80007f4 <MX_IWDG_Init+0x38>)
 80007c4:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
 80007c6:	4b0a      	ldr	r3, [pc, #40]	@ (80007f0 <MX_IWDG_Init+0x34>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 80007cc:	4b08      	ldr	r3, [pc, #32]	@ (80007f0 <MX_IWDG_Init+0x34>)
 80007ce:	4a0a      	ldr	r2, [pc, #40]	@ (80007f8 <MX_IWDG_Init+0x3c>)
 80007d0:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 4095;
 80007d2:	4b07      	ldr	r3, [pc, #28]	@ (80007f0 <MX_IWDG_Init+0x34>)
 80007d4:	4a08      	ldr	r2, [pc, #32]	@ (80007f8 <MX_IWDG_Init+0x3c>)
 80007d6:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 80007d8:	4b05      	ldr	r3, [pc, #20]	@ (80007f0 <MX_IWDG_Init+0x34>)
 80007da:	0018      	movs	r0, r3
 80007dc:	f001 ffa0 	bl	8002720 <HAL_IWDG_Init>
 80007e0:	1e03      	subs	r3, r0, #0
 80007e2:	d001      	beq.n	80007e8 <MX_IWDG_Init+0x2c>
  {
    Error_Handler();
 80007e4:	f000 f88d 	bl	8000902 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 80007e8:	46c0      	nop			@ (mov r8, r8)
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	46c0      	nop			@ (mov r8, r8)
 80007f0:	20000120 	.word	0x20000120
 80007f4:	40003000 	.word	0x40003000
 80007f8:	00000fff 	.word	0x00000fff

080007fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000800:	f000 fc9c 	bl	800113c <HAL_Init>
 #endif

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000804:	f000 f820 	bl	8000848 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */

  // Update the SystemCoreClock variable. Note that this function must be called any time that the
  // system clock is changed.
  SystemCoreClockUpdate();
 8000808:	f000 f8dc 	bl	80009c4 <SystemCoreClockUpdate>

  hal_gpio_init();
 800080c:	f004 f9aa 	bl	8004b64 <hal_gpio_init>

  MX_I2C1_Init();
 8000810:	f7ff ff32 	bl	8000678 <MX_I2C1_Init>

  MX_ADC1_Init();
 8000814:	f7ff fd62 	bl	80002dc <MX_ADC1_Init>

  hal_timer_init();
 8000818:	f004 f9ce 	bl	8004bb8 <hal_timer_init>

  WptControllerInit();
 800081c:	f7ff fd58 	bl	80002d0 <WptControllerInit>
  MX_USART3_UART_Init();
  MX_TIM6_Init();
  MX_TIM15_Init();
  /* USER CODE BEGIN 2 */
#endif
  hal_watchdog_init(); // Initialize the the watch dog handle in submod-hal_generic
 8000820:	f004 fb76 	bl	8004f10 <hal_watchdog_init>

  // Turn on the red LED to indicate that we have power but we are not authorized.
  while (1)
  {
	  /* reset the WDT */
	  hal_watchdog_reset();
 8000824:	f004 fb86 	bl	8004f34 <hal_watchdog_reset>

      TickSinceLastExecution = hal_timer_get_ticks_since_count(LastExecutionCount);
 8000828:	4b05      	ldr	r3, [pc, #20]	@ (8000840 <main+0x44>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	0018      	movs	r0, r3
 800082e:	f004 f9a8 	bl	8004b82 <hal_timer_get_ticks_since_count>
 8000832:	0002      	movs	r2, r0
 8000834:	4b03      	ldr	r3, [pc, #12]	@ (8000844 <main+0x48>)
 8000836:	601a      	str	r2, [r3, #0]
	  }

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  hal_watchdog_reset();
 8000838:	f004 fb7c 	bl	8004f34 <hal_watchdog_reset>
	  hal_watchdog_reset();
 800083c:	e7f2      	b.n	8000824 <main+0x28>
 800083e:	46c0      	nop			@ (mov r8, r8)
 8000840:	20000130 	.word	0x20000130
 8000844:	20000134 	.word	0x20000134

08000848 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000848:	b590      	push	{r4, r7, lr}
 800084a:	b093      	sub	sp, #76	@ 0x4c
 800084c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800084e:	2414      	movs	r4, #20
 8000850:	193b      	adds	r3, r7, r4
 8000852:	0018      	movs	r0, r3
 8000854:	2334      	movs	r3, #52	@ 0x34
 8000856:	001a      	movs	r2, r3
 8000858:	2100      	movs	r1, #0
 800085a:	f004 fb7b 	bl	8004f54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800085e:	1d3b      	adds	r3, r7, #4
 8000860:	0018      	movs	r0, r3
 8000862:	2310      	movs	r3, #16
 8000864:	001a      	movs	r2, r3
 8000866:	2100      	movs	r1, #0
 8000868:	f004 fb74 	bl	8004f54 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800086c:	2380      	movs	r3, #128	@ 0x80
 800086e:	009b      	lsls	r3, r3, #2
 8000870:	0018      	movs	r0, r3
 8000872:	f001 ffb7 	bl	80027e4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000876:	193b      	adds	r3, r7, r4
 8000878:	220a      	movs	r2, #10
 800087a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800087c:	193b      	adds	r3, r7, r4
 800087e:	2280      	movs	r2, #128	@ 0x80
 8000880:	0052      	lsls	r2, r2, #1
 8000882:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000884:	0021      	movs	r1, r4
 8000886:	187b      	adds	r3, r7, r1
 8000888:	2200      	movs	r2, #0
 800088a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800088c:	187b      	adds	r3, r7, r1
 800088e:	2240      	movs	r2, #64	@ 0x40
 8000890:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000892:	187b      	adds	r3, r7, r1
 8000894:	2201      	movs	r2, #1
 8000896:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000898:	187b      	adds	r3, r7, r1
 800089a:	2202      	movs	r2, #2
 800089c:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800089e:	187b      	adds	r3, r7, r1
 80008a0:	2202      	movs	r2, #2
 80008a2:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 80008a4:	187b      	adds	r3, r7, r1
 80008a6:	2210      	movs	r2, #16
 80008a8:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 27;
 80008aa:	187b      	adds	r3, r7, r1
 80008ac:	221b      	movs	r2, #27
 80008ae:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008b0:	187b      	adds	r3, r7, r1
 80008b2:	2280      	movs	r2, #128	@ 0x80
 80008b4:	0292      	lsls	r2, r2, #10
 80008b6:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 80008b8:	187b      	adds	r3, r7, r1
 80008ba:	22c0      	movs	r2, #192	@ 0xc0
 80008bc:	05d2      	lsls	r2, r2, #23
 80008be:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008c0:	187b      	adds	r3, r7, r1
 80008c2:	0018      	movs	r0, r3
 80008c4:	f001 ffce 	bl	8002864 <HAL_RCC_OscConfig>
 80008c8:	1e03      	subs	r3, r0, #0
 80008ca:	d001      	beq.n	80008d0 <SystemClock_Config+0x88>
  {
    Error_Handler();
 80008cc:	f000 f819 	bl	8000902 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008d0:	1d3b      	adds	r3, r7, #4
 80008d2:	2207      	movs	r2, #7
 80008d4:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008d6:	1d3b      	adds	r3, r7, #4
 80008d8:	2202      	movs	r2, #2
 80008da:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008dc:	1d3b      	adds	r3, r7, #4
 80008de:	2200      	movs	r2, #0
 80008e0:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008e2:	1d3b      	adds	r3, r7, #4
 80008e4:	2200      	movs	r2, #0
 80008e6:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80008e8:	1d3b      	adds	r3, r7, #4
 80008ea:	2102      	movs	r1, #2
 80008ec:	0018      	movs	r0, r3
 80008ee:	f002 fac9 	bl	8002e84 <HAL_RCC_ClockConfig>
 80008f2:	1e03      	subs	r3, r0, #0
 80008f4:	d001      	beq.n	80008fa <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80008f6:	f000 f804 	bl	8000902 <Error_Handler>
  }
}
 80008fa:	46c0      	nop			@ (mov r8, r8)
 80008fc:	46bd      	mov	sp, r7
 80008fe:	b013      	add	sp, #76	@ 0x4c
 8000900:	bd90      	pop	{r4, r7, pc}

08000902 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000902:	b580      	push	{r7, lr}
 8000904:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000906:	b672      	cpsid	i
}
 8000908:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800090a:	46c0      	nop			@ (mov r8, r8)
 800090c:	e7fd      	b.n	800090a <Error_Handler+0x8>
	...

08000910 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b082      	sub	sp, #8
 8000914:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000916:	4b11      	ldr	r3, [pc, #68]	@ (800095c <HAL_MspInit+0x4c>)
 8000918:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800091a:	4b10      	ldr	r3, [pc, #64]	@ (800095c <HAL_MspInit+0x4c>)
 800091c:	2101      	movs	r1, #1
 800091e:	430a      	orrs	r2, r1
 8000920:	641a      	str	r2, [r3, #64]	@ 0x40
 8000922:	4b0e      	ldr	r3, [pc, #56]	@ (800095c <HAL_MspInit+0x4c>)
 8000924:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000926:	2201      	movs	r2, #1
 8000928:	4013      	ands	r3, r2
 800092a:	607b      	str	r3, [r7, #4]
 800092c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800092e:	4b0b      	ldr	r3, [pc, #44]	@ (800095c <HAL_MspInit+0x4c>)
 8000930:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000932:	4b0a      	ldr	r3, [pc, #40]	@ (800095c <HAL_MspInit+0x4c>)
 8000934:	2180      	movs	r1, #128	@ 0x80
 8000936:	0549      	lsls	r1, r1, #21
 8000938:	430a      	orrs	r2, r1
 800093a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800093c:	4b07      	ldr	r3, [pc, #28]	@ (800095c <HAL_MspInit+0x4c>)
 800093e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000940:	2380      	movs	r3, #128	@ 0x80
 8000942:	055b      	lsls	r3, r3, #21
 8000944:	4013      	ands	r3, r2
 8000946:	603b      	str	r3, [r7, #0]
 8000948:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 800094a:	23c0      	movs	r3, #192	@ 0xc0
 800094c:	00db      	lsls	r3, r3, #3
 800094e:	0018      	movs	r0, r3
 8000950:	f000 fc7a 	bl	8001248 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000954:	46c0      	nop			@ (mov r8, r8)
 8000956:	46bd      	mov	sp, r7
 8000958:	b002      	add	sp, #8
 800095a:	bd80      	pop	{r7, pc}
 800095c:	40021000 	.word	0x40021000

08000960 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000964:	46c0      	nop			@ (mov r8, r8)
 8000966:	e7fd      	b.n	8000964 <NMI_Handler+0x4>

08000968 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800096c:	46c0      	nop			@ (mov r8, r8)
 800096e:	e7fd      	b.n	800096c <HardFault_Handler+0x4>

08000970 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000974:	46c0      	nop			@ (mov r8, r8)
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}

0800097a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800097a:	b580      	push	{r7, lr}
 800097c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800097e:	46c0      	nop			@ (mov r8, r8)
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}

08000984 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000988:	f000 fc42 	bl	8001210 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800098c:	46c0      	nop			@ (mov r8, r8)
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
	...

08000994 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 interrupt.
  */
void ADC1_IRQHandler(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000998:	4b03      	ldr	r3, [pc, #12]	@ (80009a8 <ADC1_IRQHandler+0x14>)
 800099a:	0018      	movs	r0, r3
 800099c:	f000 ff2e 	bl	80017fc <HAL_ADC_IRQHandler>
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
  /* USER CODE BEGIN USART1_IRQn 1 */
#endif
  /* USER CODE END USART1_IRQn 1 */
}
 80009a0:	46c0      	nop			@ (mov r8, r8)
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	46c0      	nop			@ (mov r8, r8)
 80009a8:	20000068 	.word	0x20000068

080009ac <USART3_4_IRQHandler>:

/**
  * @brief This function handles USART3 and USART4 interrupts.
  */
void USART3_4_IRQHandler(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_4_IRQn 0 */

  /* USER CODE END USART3_4_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80009b0:	4b03      	ldr	r3, [pc, #12]	@ (80009c0 <USART3_4_IRQHandler+0x14>)
 80009b2:	0018      	movs	r0, r3
 80009b4:	f003 fc9a 	bl	80042ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_4_IRQn 1 */

  /* USER CODE END USART3_4_IRQn 1 */
}
 80009b8:	46c0      	nop			@ (mov r8, r8)
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	46c0      	nop			@ (mov r8, r8)
 80009c0:	20000268 	.word	0x20000268

080009c4 <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b086      	sub	sp, #24
 80009c8:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t pllm;
  uint32_t hsidiv;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80009ca:	4b3b      	ldr	r3, [pc, #236]	@ (8000ab8 <SystemCoreClockUpdate+0xf4>)
 80009cc:	689b      	ldr	r3, [r3, #8]
 80009ce:	2238      	movs	r2, #56	@ 0x38
 80009d0:	4013      	ands	r3, r2
 80009d2:	2b20      	cmp	r3, #32
 80009d4:	d011      	beq.n	80009fa <SystemCoreClockUpdate+0x36>
 80009d6:	d849      	bhi.n	8000a6c <SystemCoreClockUpdate+0xa8>
 80009d8:	2b18      	cmp	r3, #24
 80009da:	d009      	beq.n	80009f0 <SystemCoreClockUpdate+0x2c>
 80009dc:	d846      	bhi.n	8000a6c <SystemCoreClockUpdate+0xa8>
 80009de:	2b08      	cmp	r3, #8
 80009e0:	d002      	beq.n	80009e8 <SystemCoreClockUpdate+0x24>
 80009e2:	2b10      	cmp	r3, #16
 80009e4:	d00e      	beq.n	8000a04 <SystemCoreClockUpdate+0x40>
 80009e6:	e041      	b.n	8000a6c <SystemCoreClockUpdate+0xa8>
  {
    case RCC_CFGR_SWS_0:                /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
 80009e8:	4b34      	ldr	r3, [pc, #208]	@ (8000abc <SystemCoreClockUpdate+0xf8>)
 80009ea:	4a35      	ldr	r2, [pc, #212]	@ (8000ac0 <SystemCoreClockUpdate+0xfc>)
 80009ec:	601a      	str	r2, [r3, #0]
      break;
 80009ee:	e04f      	b.n	8000a90 <SystemCoreClockUpdate+0xcc>

    case (RCC_CFGR_SWS_1 | RCC_CFGR_SWS_0):  /* LSI used as system clock */
      SystemCoreClock = LSI_VALUE;
 80009f0:	4b32      	ldr	r3, [pc, #200]	@ (8000abc <SystemCoreClockUpdate+0xf8>)
 80009f2:	22fa      	movs	r2, #250	@ 0xfa
 80009f4:	01d2      	lsls	r2, r2, #7
 80009f6:	601a      	str	r2, [r3, #0]
      break;
 80009f8:	e04a      	b.n	8000a90 <SystemCoreClockUpdate+0xcc>

    case RCC_CFGR_SWS_2:                /* LSE used as system clock */
      SystemCoreClock = LSE_VALUE;
 80009fa:	4b30      	ldr	r3, [pc, #192]	@ (8000abc <SystemCoreClockUpdate+0xf8>)
 80009fc:	2280      	movs	r2, #128	@ 0x80
 80009fe:	0212      	lsls	r2, r2, #8
 8000a00:	601a      	str	r2, [r3, #0]
      break;
 8000a02:	e045      	b.n	8000a90 <SystemCoreClockUpdate+0xcc>

    case RCC_CFGR_SWS_1:  /* PLL used as system clock */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8000a04:	4b2c      	ldr	r3, [pc, #176]	@ (8000ab8 <SystemCoreClockUpdate+0xf4>)
 8000a06:	68db      	ldr	r3, [r3, #12]
 8000a08:	2203      	movs	r2, #3
 8000a0a:	4013      	ands	r3, r2
 8000a0c:	613b      	str	r3, [r7, #16]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1UL;
 8000a0e:	4b2a      	ldr	r3, [pc, #168]	@ (8000ab8 <SystemCoreClockUpdate+0xf4>)
 8000a10:	68db      	ldr	r3, [r3, #12]
 8000a12:	091b      	lsrs	r3, r3, #4
 8000a14:	2207      	movs	r2, #7
 8000a16:	4013      	ands	r3, r2
 8000a18:	3301      	adds	r3, #1
 8000a1a:	60fb      	str	r3, [r7, #12]

      if(pllsource == 0x03UL)           /* HSE used as PLL clock source */
 8000a1c:	693b      	ldr	r3, [r7, #16]
 8000a1e:	2b03      	cmp	r3, #3
 8000a20:	d106      	bne.n	8000a30 <SystemCoreClockUpdate+0x6c>
      {
        pllvco = (HSE_VALUE / pllm);
 8000a22:	68f9      	ldr	r1, [r7, #12]
 8000a24:	4826      	ldr	r0, [pc, #152]	@ (8000ac0 <SystemCoreClockUpdate+0xfc>)
 8000a26:	f7ff fbc7 	bl	80001b8 <__udivsi3>
 8000a2a:	0003      	movs	r3, r0
 8000a2c:	617b      	str	r3, [r7, #20]
 8000a2e:	e005      	b.n	8000a3c <SystemCoreClockUpdate+0x78>
      }
      else                              /* HSI used as PLL clock source */
      {
          pllvco = (HSI_VALUE / pllm);
 8000a30:	68f9      	ldr	r1, [r7, #12]
 8000a32:	4824      	ldr	r0, [pc, #144]	@ (8000ac4 <SystemCoreClockUpdate+0x100>)
 8000a34:	f7ff fbc0 	bl	80001b8 <__udivsi3>
 8000a38:	0003      	movs	r3, r0
 8000a3a:	617b      	str	r3, [r7, #20]
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8000a3c:	4b1e      	ldr	r3, [pc, #120]	@ (8000ab8 <SystemCoreClockUpdate+0xf4>)
 8000a3e:	68db      	ldr	r3, [r3, #12]
 8000a40:	0a1b      	lsrs	r3, r3, #8
 8000a42:	227f      	movs	r2, #127	@ 0x7f
 8000a44:	401a      	ands	r2, r3
 8000a46:	697b      	ldr	r3, [r7, #20]
 8000a48:	4353      	muls	r3, r2
 8000a4a:	617b      	str	r3, [r7, #20]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1UL);
 8000a4c:	4b1a      	ldr	r3, [pc, #104]	@ (8000ab8 <SystemCoreClockUpdate+0xf4>)
 8000a4e:	68db      	ldr	r3, [r3, #12]
 8000a50:	0f5b      	lsrs	r3, r3, #29
 8000a52:	2207      	movs	r2, #7
 8000a54:	4013      	ands	r3, r2
 8000a56:	3301      	adds	r3, #1
 8000a58:	60bb      	str	r3, [r7, #8]

      SystemCoreClock = pllvco/pllr;
 8000a5a:	68b9      	ldr	r1, [r7, #8]
 8000a5c:	6978      	ldr	r0, [r7, #20]
 8000a5e:	f7ff fbab 	bl	80001b8 <__udivsi3>
 8000a62:	0003      	movs	r3, r0
 8000a64:	001a      	movs	r2, r3
 8000a66:	4b15      	ldr	r3, [pc, #84]	@ (8000abc <SystemCoreClockUpdate+0xf8>)
 8000a68:	601a      	str	r2, [r3, #0]
      break;
 8000a6a:	e011      	b.n	8000a90 <SystemCoreClockUpdate+0xcc>
      
    case 0x00000000U:                   /* HSI used as system clock */
    default:                            /* HSI used as system clock */
      hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV))>> RCC_CR_HSIDIV_Pos));
 8000a6c:	4b12      	ldr	r3, [pc, #72]	@ (8000ab8 <SystemCoreClockUpdate+0xf4>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	0adb      	lsrs	r3, r3, #11
 8000a72:	2207      	movs	r2, #7
 8000a74:	4013      	ands	r3, r2
 8000a76:	2201      	movs	r2, #1
 8000a78:	409a      	lsls	r2, r3
 8000a7a:	0013      	movs	r3, r2
 8000a7c:	607b      	str	r3, [r7, #4]
      SystemCoreClock = (HSI_VALUE/hsidiv);
 8000a7e:	6879      	ldr	r1, [r7, #4]
 8000a80:	4810      	ldr	r0, [pc, #64]	@ (8000ac4 <SystemCoreClockUpdate+0x100>)
 8000a82:	f7ff fb99 	bl	80001b8 <__udivsi3>
 8000a86:	0003      	movs	r3, r0
 8000a88:	001a      	movs	r2, r3
 8000a8a:	4b0c      	ldr	r3, [pc, #48]	@ (8000abc <SystemCoreClockUpdate+0xf8>)
 8000a8c:	601a      	str	r2, [r3, #0]
      break;
 8000a8e:	46c0      	nop			@ (mov r8, r8)
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8000a90:	4b09      	ldr	r3, [pc, #36]	@ (8000ab8 <SystemCoreClockUpdate+0xf4>)
 8000a92:	689b      	ldr	r3, [r3, #8]
 8000a94:	0a1b      	lsrs	r3, r3, #8
 8000a96:	220f      	movs	r2, #15
 8000a98:	401a      	ands	r2, r3
 8000a9a:	4b0b      	ldr	r3, [pc, #44]	@ (8000ac8 <SystemCoreClockUpdate+0x104>)
 8000a9c:	0092      	lsls	r2, r2, #2
 8000a9e:	58d3      	ldr	r3, [r2, r3]
 8000aa0:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 8000aa2:	4b06      	ldr	r3, [pc, #24]	@ (8000abc <SystemCoreClockUpdate+0xf8>)
 8000aa4:	681a      	ldr	r2, [r3, #0]
 8000aa6:	683b      	ldr	r3, [r7, #0]
 8000aa8:	40da      	lsrs	r2, r3
 8000aaa:	4b04      	ldr	r3, [pc, #16]	@ (8000abc <SystemCoreClockUpdate+0xf8>)
 8000aac:	601a      	str	r2, [r3, #0]
}
 8000aae:	46c0      	nop			@ (mov r8, r8)
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	b006      	add	sp, #24
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	46c0      	nop			@ (mov r8, r8)
 8000ab8:	40021000 	.word	0x40021000
 8000abc:	20000000 	.word	0x20000000
 8000ac0:	007a1200 	.word	0x007a1200
 8000ac4:	00f42400 	.word	0x00f42400
 8000ac8:	08004f7c 	.word	0x08004f7c

08000acc <MX_TIM1_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim15;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b09c      	sub	sp, #112	@ 0x70
 8000ad0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ad2:	2360      	movs	r3, #96	@ 0x60
 8000ad4:	18fb      	adds	r3, r7, r3
 8000ad6:	0018      	movs	r0, r3
 8000ad8:	2310      	movs	r3, #16
 8000ada:	001a      	movs	r2, r3
 8000adc:	2100      	movs	r1, #0
 8000ade:	f004 fa39 	bl	8004f54 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ae2:	2354      	movs	r3, #84	@ 0x54
 8000ae4:	18fb      	adds	r3, r7, r3
 8000ae6:	0018      	movs	r0, r3
 8000ae8:	230c      	movs	r3, #12
 8000aea:	001a      	movs	r2, r3
 8000aec:	2100      	movs	r1, #0
 8000aee:	f004 fa31 	bl	8004f54 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000af2:	2338      	movs	r3, #56	@ 0x38
 8000af4:	18fb      	adds	r3, r7, r3
 8000af6:	0018      	movs	r0, r3
 8000af8:	231c      	movs	r3, #28
 8000afa:	001a      	movs	r2, r3
 8000afc:	2100      	movs	r1, #0
 8000afe:	f004 fa29 	bl	8004f54 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000b02:	1d3b      	adds	r3, r7, #4
 8000b04:	0018      	movs	r0, r3
 8000b06:	2334      	movs	r3, #52	@ 0x34
 8000b08:	001a      	movs	r2, r3
 8000b0a:	2100      	movs	r1, #0
 8000b0c:	f004 fa22 	bl	8004f54 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000b10:	4b51      	ldr	r3, [pc, #324]	@ (8000c58 <MX_TIM1_Init+0x18c>)
 8000b12:	4a52      	ldr	r2, [pc, #328]	@ (8000c5c <MX_TIM1_Init+0x190>)
 8000b14:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 640;
 8000b16:	4b50      	ldr	r3, [pc, #320]	@ (8000c58 <MX_TIM1_Init+0x18c>)
 8000b18:	22a0      	movs	r2, #160	@ 0xa0
 8000b1a:	0092      	lsls	r2, r2, #2
 8000b1c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b1e:	4b4e      	ldr	r3, [pc, #312]	@ (8000c58 <MX_TIM1_Init+0x18c>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100;
 8000b24:	4b4c      	ldr	r3, [pc, #304]	@ (8000c58 <MX_TIM1_Init+0x18c>)
 8000b26:	2264      	movs	r2, #100	@ 0x64
 8000b28:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b2a:	4b4b      	ldr	r3, [pc, #300]	@ (8000c58 <MX_TIM1_Init+0x18c>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000b30:	4b49      	ldr	r3, [pc, #292]	@ (8000c58 <MX_TIM1_Init+0x18c>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b36:	4b48      	ldr	r3, [pc, #288]	@ (8000c58 <MX_TIM1_Init+0x18c>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000b3c:	4b46      	ldr	r3, [pc, #280]	@ (8000c58 <MX_TIM1_Init+0x18c>)
 8000b3e:	0018      	movs	r0, r3
 8000b40:	f002 fc5e 	bl	8003400 <HAL_TIM_Base_Init>
 8000b44:	1e03      	subs	r3, r0, #0
 8000b46:	d001      	beq.n	8000b4c <MX_TIM1_Init+0x80>
  {
    Error_Handler();
 8000b48:	f7ff fedb 	bl	8000902 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b4c:	2160      	movs	r1, #96	@ 0x60
 8000b4e:	187b      	adds	r3, r7, r1
 8000b50:	2280      	movs	r2, #128	@ 0x80
 8000b52:	0152      	lsls	r2, r2, #5
 8000b54:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000b56:	187a      	adds	r2, r7, r1
 8000b58:	4b3f      	ldr	r3, [pc, #252]	@ (8000c58 <MX_TIM1_Init+0x18c>)
 8000b5a:	0011      	movs	r1, r2
 8000b5c:	0018      	movs	r0, r3
 8000b5e:	f002 fe07 	bl	8003770 <HAL_TIM_ConfigClockSource>
 8000b62:	1e03      	subs	r3, r0, #0
 8000b64:	d001      	beq.n	8000b6a <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8000b66:	f7ff fecc 	bl	8000902 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000b6a:	4b3b      	ldr	r3, [pc, #236]	@ (8000c58 <MX_TIM1_Init+0x18c>)
 8000b6c:	0018      	movs	r0, r3
 8000b6e:	f002 fc9f 	bl	80034b0 <HAL_TIM_PWM_Init>
 8000b72:	1e03      	subs	r3, r0, #0
 8000b74:	d001      	beq.n	8000b7a <MX_TIM1_Init+0xae>
  {
    Error_Handler();
 8000b76:	f7ff fec4 	bl	8000902 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b7a:	2154      	movs	r1, #84	@ 0x54
 8000b7c:	187b      	adds	r3, r7, r1
 8000b7e:	2200      	movs	r2, #0
 8000b80:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000b82:	187b      	adds	r3, r7, r1
 8000b84:	2200      	movs	r2, #0
 8000b86:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b88:	187b      	adds	r3, r7, r1
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b8e:	187a      	adds	r2, r7, r1
 8000b90:	4b31      	ldr	r3, [pc, #196]	@ (8000c58 <MX_TIM1_Init+0x18c>)
 8000b92:	0011      	movs	r1, r2
 8000b94:	0018      	movs	r0, r3
 8000b96:	f003 faa5 	bl	80040e4 <HAL_TIMEx_MasterConfigSynchronization>
 8000b9a:	1e03      	subs	r3, r0, #0
 8000b9c:	d001      	beq.n	8000ba2 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8000b9e:	f7ff feb0 	bl	8000902 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ba2:	2138      	movs	r1, #56	@ 0x38
 8000ba4:	187b      	adds	r3, r7, r1
 8000ba6:	2260      	movs	r2, #96	@ 0x60
 8000ba8:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 49;
 8000baa:	187b      	adds	r3, r7, r1
 8000bac:	2231      	movs	r2, #49	@ 0x31
 8000bae:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bb0:	187b      	adds	r3, r7, r1
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000bb6:	187b      	adds	r3, r7, r1
 8000bb8:	2200      	movs	r2, #0
 8000bba:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bbc:	187b      	adds	r3, r7, r1
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000bc2:	187b      	adds	r3, r7, r1
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000bc8:	187b      	adds	r3, r7, r1
 8000bca:	2200      	movs	r2, #0
 8000bcc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000bce:	1879      	adds	r1, r7, r1
 8000bd0:	4b21      	ldr	r3, [pc, #132]	@ (8000c58 <MX_TIM1_Init+0x18c>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	0018      	movs	r0, r3
 8000bd6:	f002 fccb 	bl	8003570 <HAL_TIM_PWM_ConfigChannel>
 8000bda:	1e03      	subs	r3, r0, #0
 8000bdc:	d001      	beq.n	8000be2 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8000bde:	f7ff fe90 	bl	8000902 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000be2:	1d3b      	adds	r3, r7, #4
 8000be4:	2200      	movs	r2, #0
 8000be6:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000be8:	1d3b      	adds	r3, r7, #4
 8000bea:	2200      	movs	r2, #0
 8000bec:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000bee:	1d3b      	adds	r3, r7, #4
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000bf4:	1d3b      	adds	r3, r7, #4
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000bfa:	1d3b      	adds	r3, r7, #4
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000c00:	1d3b      	adds	r3, r7, #4
 8000c02:	2280      	movs	r2, #128	@ 0x80
 8000c04:	0192      	lsls	r2, r2, #6
 8000c06:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000c08:	1d3b      	adds	r3, r7, #4
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000c0e:	1d3b      	adds	r3, r7, #4
 8000c10:	2200      	movs	r2, #0
 8000c12:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000c14:	1d3b      	adds	r3, r7, #4
 8000c16:	2200      	movs	r2, #0
 8000c18:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000c1a:	1d3b      	adds	r3, r7, #4
 8000c1c:	2280      	movs	r2, #128	@ 0x80
 8000c1e:	0492      	lsls	r2, r2, #18
 8000c20:	625a      	str	r2, [r3, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000c22:	1d3b      	adds	r3, r7, #4
 8000c24:	2200      	movs	r2, #0
 8000c26:	629a      	str	r2, [r3, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000c28:	1d3b      	adds	r3, r7, #4
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	62da      	str	r2, [r3, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000c2e:	1d3b      	adds	r3, r7, #4
 8000c30:	2200      	movs	r2, #0
 8000c32:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000c34:	1d3a      	adds	r2, r7, #4
 8000c36:	4b08      	ldr	r3, [pc, #32]	@ (8000c58 <MX_TIM1_Init+0x18c>)
 8000c38:	0011      	movs	r1, r2
 8000c3a:	0018      	movs	r0, r3
 8000c3c:	f003 faba 	bl	80041b4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000c40:	1e03      	subs	r3, r0, #0
 8000c42:	d001      	beq.n	8000c48 <MX_TIM1_Init+0x17c>
  {
    Error_Handler();
 8000c44:	f7ff fe5d 	bl	8000902 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000c48:	4b03      	ldr	r3, [pc, #12]	@ (8000c58 <MX_TIM1_Init+0x18c>)
 8000c4a:	0018      	movs	r0, r3
 8000c4c:	f000 f9e0 	bl	8001010 <HAL_TIM_MspPostInit>

}
 8000c50:	46c0      	nop			@ (mov r8, r8)
 8000c52:	46bd      	mov	sp, r7
 8000c54:	b01c      	add	sp, #112	@ 0x70
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	20000138 	.word	0x20000138
 8000c5c:	40012c00 	.word	0x40012c00

08000c60 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b08e      	sub	sp, #56	@ 0x38
 8000c64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c66:	2328      	movs	r3, #40	@ 0x28
 8000c68:	18fb      	adds	r3, r7, r3
 8000c6a:	0018      	movs	r0, r3
 8000c6c:	2310      	movs	r3, #16
 8000c6e:	001a      	movs	r2, r3
 8000c70:	2100      	movs	r1, #0
 8000c72:	f004 f96f 	bl	8004f54 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c76:	231c      	movs	r3, #28
 8000c78:	18fb      	adds	r3, r7, r3
 8000c7a:	0018      	movs	r0, r3
 8000c7c:	230c      	movs	r3, #12
 8000c7e:	001a      	movs	r2, r3
 8000c80:	2100      	movs	r1, #0
 8000c82:	f004 f967 	bl	8004f54 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c86:	003b      	movs	r3, r7
 8000c88:	0018      	movs	r0, r3
 8000c8a:	231c      	movs	r3, #28
 8000c8c:	001a      	movs	r2, r3
 8000c8e:	2100      	movs	r1, #0
 8000c90:	f004 f960 	bl	8004f54 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000c94:	4b2f      	ldr	r3, [pc, #188]	@ (8000d54 <MX_TIM3_Init+0xf4>)
 8000c96:	4a30      	ldr	r2, [pc, #192]	@ (8000d58 <MX_TIM3_Init+0xf8>)
 8000c98:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000c9a:	4b2e      	ldr	r3, [pc, #184]	@ (8000d54 <MX_TIM3_Init+0xf4>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ca0:	4b2c      	ldr	r3, [pc, #176]	@ (8000d54 <MX_TIM3_Init+0xf4>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000ca6:	4b2b      	ldr	r3, [pc, #172]	@ (8000d54 <MX_TIM3_Init+0xf4>)
 8000ca8:	4a2c      	ldr	r2, [pc, #176]	@ (8000d5c <MX_TIM3_Init+0xfc>)
 8000caa:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cac:	4b29      	ldr	r3, [pc, #164]	@ (8000d54 <MX_TIM3_Init+0xf4>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cb2:	4b28      	ldr	r3, [pc, #160]	@ (8000d54 <MX_TIM3_Init+0xf4>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000cb8:	4b26      	ldr	r3, [pc, #152]	@ (8000d54 <MX_TIM3_Init+0xf4>)
 8000cba:	0018      	movs	r0, r3
 8000cbc:	f002 fba0 	bl	8003400 <HAL_TIM_Base_Init>
 8000cc0:	1e03      	subs	r3, r0, #0
 8000cc2:	d001      	beq.n	8000cc8 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000cc4:	f7ff fe1d 	bl	8000902 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cc8:	2128      	movs	r1, #40	@ 0x28
 8000cca:	187b      	adds	r3, r7, r1
 8000ccc:	2280      	movs	r2, #128	@ 0x80
 8000cce:	0152      	lsls	r2, r2, #5
 8000cd0:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000cd2:	187a      	adds	r2, r7, r1
 8000cd4:	4b1f      	ldr	r3, [pc, #124]	@ (8000d54 <MX_TIM3_Init+0xf4>)
 8000cd6:	0011      	movs	r1, r2
 8000cd8:	0018      	movs	r0, r3
 8000cda:	f002 fd49 	bl	8003770 <HAL_TIM_ConfigClockSource>
 8000cde:	1e03      	subs	r3, r0, #0
 8000ce0:	d001      	beq.n	8000ce6 <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8000ce2:	f7ff fe0e 	bl	8000902 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000ce6:	4b1b      	ldr	r3, [pc, #108]	@ (8000d54 <MX_TIM3_Init+0xf4>)
 8000ce8:	0018      	movs	r0, r3
 8000cea:	f002 fbe1 	bl	80034b0 <HAL_TIM_PWM_Init>
 8000cee:	1e03      	subs	r3, r0, #0
 8000cf0:	d001      	beq.n	8000cf6 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8000cf2:	f7ff fe06 	bl	8000902 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cf6:	211c      	movs	r1, #28
 8000cf8:	187b      	adds	r3, r7, r1
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cfe:	187b      	adds	r3, r7, r1
 8000d00:	2200      	movs	r2, #0
 8000d02:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000d04:	187a      	adds	r2, r7, r1
 8000d06:	4b13      	ldr	r3, [pc, #76]	@ (8000d54 <MX_TIM3_Init+0xf4>)
 8000d08:	0011      	movs	r1, r2
 8000d0a:	0018      	movs	r0, r3
 8000d0c:	f003 f9ea 	bl	80040e4 <HAL_TIMEx_MasterConfigSynchronization>
 8000d10:	1e03      	subs	r3, r0, #0
 8000d12:	d001      	beq.n	8000d18 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 8000d14:	f7ff fdf5 	bl	8000902 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d18:	003b      	movs	r3, r7
 8000d1a:	2260      	movs	r2, #96	@ 0x60
 8000d1c:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000d1e:	003b      	movs	r3, r7
 8000d20:	2200      	movs	r2, #0
 8000d22:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d24:	003b      	movs	r3, r7
 8000d26:	2200      	movs	r2, #0
 8000d28:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d2a:	003b      	movs	r3, r7
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d30:	0039      	movs	r1, r7
 8000d32:	4b08      	ldr	r3, [pc, #32]	@ (8000d54 <MX_TIM3_Init+0xf4>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	0018      	movs	r0, r3
 8000d38:	f002 fc1a 	bl	8003570 <HAL_TIM_PWM_ConfigChannel>
 8000d3c:	1e03      	subs	r3, r0, #0
 8000d3e:	d001      	beq.n	8000d44 <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 8000d40:	f7ff fddf 	bl	8000902 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000d44:	4b03      	ldr	r3, [pc, #12]	@ (8000d54 <MX_TIM3_Init+0xf4>)
 8000d46:	0018      	movs	r0, r3
 8000d48:	f000 f962 	bl	8001010 <HAL_TIM_MspPostInit>

}
 8000d4c:	46c0      	nop			@ (mov r8, r8)
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	b00e      	add	sp, #56	@ 0x38
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	20000184 	.word	0x20000184
 8000d58:	40000400 	.word	0x40000400
 8000d5c:	0000ffff 	.word	0x0000ffff

08000d60 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b084      	sub	sp, #16
 8000d64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d66:	1d3b      	adds	r3, r7, #4
 8000d68:	0018      	movs	r0, r3
 8000d6a:	230c      	movs	r3, #12
 8000d6c:	001a      	movs	r2, r3
 8000d6e:	2100      	movs	r1, #0
 8000d70:	f004 f8f0 	bl	8004f54 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000d74:	4b15      	ldr	r3, [pc, #84]	@ (8000dcc <MX_TIM6_Init+0x6c>)
 8000d76:	4a16      	ldr	r2, [pc, #88]	@ (8000dd0 <MX_TIM6_Init+0x70>)
 8000d78:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = BLOCKING_DELAY_PRESCALER;
 8000d7a:	4b14      	ldr	r3, [pc, #80]	@ (8000dcc <MX_TIM6_Init+0x6c>)
 8000d7c:	2235      	movs	r2, #53	@ 0x35
 8000d7e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d80:	4b12      	ldr	r3, [pc, #72]	@ (8000dcc <MX_TIM6_Init+0x6c>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 0;
 8000d86:	4b11      	ldr	r3, [pc, #68]	@ (8000dcc <MX_TIM6_Init+0x6c>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000d8c:	4b0f      	ldr	r3, [pc, #60]	@ (8000dcc <MX_TIM6_Init+0x6c>)
 8000d8e:	2280      	movs	r2, #128	@ 0x80
 8000d90:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000d92:	4b0e      	ldr	r3, [pc, #56]	@ (8000dcc <MX_TIM6_Init+0x6c>)
 8000d94:	0018      	movs	r0, r3
 8000d96:	f002 fb33 	bl	8003400 <HAL_TIM_Base_Init>
 8000d9a:	1e03      	subs	r3, r0, #0
 8000d9c:	d001      	beq.n	8000da2 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8000d9e:	f7ff fdb0 	bl	8000902 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000da2:	1d3b      	adds	r3, r7, #4
 8000da4:	2200      	movs	r2, #0
 8000da6:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000da8:	1d3b      	adds	r3, r7, #4
 8000daa:	2200      	movs	r2, #0
 8000dac:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000dae:	1d3a      	adds	r2, r7, #4
 8000db0:	4b06      	ldr	r3, [pc, #24]	@ (8000dcc <MX_TIM6_Init+0x6c>)
 8000db2:	0011      	movs	r1, r2
 8000db4:	0018      	movs	r0, r3
 8000db6:	f003 f995 	bl	80040e4 <HAL_TIMEx_MasterConfigSynchronization>
 8000dba:	1e03      	subs	r3, r0, #0
 8000dbc:	d001      	beq.n	8000dc2 <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 8000dbe:	f7ff fda0 	bl	8000902 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000dc2:	46c0      	nop			@ (mov r8, r8)
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	b004      	add	sp, #16
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	46c0      	nop			@ (mov r8, r8)
 8000dcc:	200001d0 	.word	0x200001d0
 8000dd0:	40001000 	.word	0x40001000

08000dd4 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b09c      	sub	sp, #112	@ 0x70
 8000dd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dda:	2360      	movs	r3, #96	@ 0x60
 8000ddc:	18fb      	adds	r3, r7, r3
 8000dde:	0018      	movs	r0, r3
 8000de0:	2310      	movs	r3, #16
 8000de2:	001a      	movs	r2, r3
 8000de4:	2100      	movs	r1, #0
 8000de6:	f004 f8b5 	bl	8004f54 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dea:	2354      	movs	r3, #84	@ 0x54
 8000dec:	18fb      	adds	r3, r7, r3
 8000dee:	0018      	movs	r0, r3
 8000df0:	230c      	movs	r3, #12
 8000df2:	001a      	movs	r2, r3
 8000df4:	2100      	movs	r1, #0
 8000df6:	f004 f8ad 	bl	8004f54 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000dfa:	2338      	movs	r3, #56	@ 0x38
 8000dfc:	18fb      	adds	r3, r7, r3
 8000dfe:	0018      	movs	r0, r3
 8000e00:	231c      	movs	r3, #28
 8000e02:	001a      	movs	r2, r3
 8000e04:	2100      	movs	r1, #0
 8000e06:	f004 f8a5 	bl	8004f54 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000e0a:	1d3b      	adds	r3, r7, #4
 8000e0c:	0018      	movs	r0, r3
 8000e0e:	2334      	movs	r3, #52	@ 0x34
 8000e10:	001a      	movs	r2, r3
 8000e12:	2100      	movs	r1, #0
 8000e14:	f004 f89e 	bl	8004f54 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8000e18:	4b47      	ldr	r3, [pc, #284]	@ (8000f38 <MX_TIM15_Init+0x164>)
 8000e1a:	4a48      	ldr	r2, [pc, #288]	@ (8000f3c <MX_TIM15_Init+0x168>)
 8000e1c:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8000e1e:	4b46      	ldr	r3, [pc, #280]	@ (8000f38 <MX_TIM15_Init+0x164>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e24:	4b44      	ldr	r3, [pc, #272]	@ (8000f38 <MX_TIM15_Init+0x164>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8000e2a:	4b43      	ldr	r3, [pc, #268]	@ (8000f38 <MX_TIM15_Init+0x164>)
 8000e2c:	4a44      	ldr	r2, [pc, #272]	@ (8000f40 <MX_TIM15_Init+0x16c>)
 8000e2e:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e30:	4b41      	ldr	r3, [pc, #260]	@ (8000f38 <MX_TIM15_Init+0x164>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8000e36:	4b40      	ldr	r3, [pc, #256]	@ (8000f38 <MX_TIM15_Init+0x164>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e3c:	4b3e      	ldr	r3, [pc, #248]	@ (8000f38 <MX_TIM15_Init+0x164>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8000e42:	4b3d      	ldr	r3, [pc, #244]	@ (8000f38 <MX_TIM15_Init+0x164>)
 8000e44:	0018      	movs	r0, r3
 8000e46:	f002 fadb 	bl	8003400 <HAL_TIM_Base_Init>
 8000e4a:	1e03      	subs	r3, r0, #0
 8000e4c:	d001      	beq.n	8000e52 <MX_TIM15_Init+0x7e>
  {
    Error_Handler();
 8000e4e:	f7ff fd58 	bl	8000902 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e52:	2160      	movs	r1, #96	@ 0x60
 8000e54:	187b      	adds	r3, r7, r1
 8000e56:	2280      	movs	r2, #128	@ 0x80
 8000e58:	0152      	lsls	r2, r2, #5
 8000e5a:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8000e5c:	187a      	adds	r2, r7, r1
 8000e5e:	4b36      	ldr	r3, [pc, #216]	@ (8000f38 <MX_TIM15_Init+0x164>)
 8000e60:	0011      	movs	r1, r2
 8000e62:	0018      	movs	r0, r3
 8000e64:	f002 fc84 	bl	8003770 <HAL_TIM_ConfigClockSource>
 8000e68:	1e03      	subs	r3, r0, #0
 8000e6a:	d001      	beq.n	8000e70 <MX_TIM15_Init+0x9c>
  {
    Error_Handler();
 8000e6c:	f7ff fd49 	bl	8000902 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8000e70:	4b31      	ldr	r3, [pc, #196]	@ (8000f38 <MX_TIM15_Init+0x164>)
 8000e72:	0018      	movs	r0, r3
 8000e74:	f002 fb1c 	bl	80034b0 <HAL_TIM_PWM_Init>
 8000e78:	1e03      	subs	r3, r0, #0
 8000e7a:	d001      	beq.n	8000e80 <MX_TIM15_Init+0xac>
  {
    Error_Handler();
 8000e7c:	f7ff fd41 	bl	8000902 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e80:	2154      	movs	r1, #84	@ 0x54
 8000e82:	187b      	adds	r3, r7, r1
 8000e84:	2200      	movs	r2, #0
 8000e86:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e88:	187b      	adds	r3, r7, r1
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8000e8e:	187a      	adds	r2, r7, r1
 8000e90:	4b29      	ldr	r3, [pc, #164]	@ (8000f38 <MX_TIM15_Init+0x164>)
 8000e92:	0011      	movs	r1, r2
 8000e94:	0018      	movs	r0, r3
 8000e96:	f003 f925 	bl	80040e4 <HAL_TIMEx_MasterConfigSynchronization>
 8000e9a:	1e03      	subs	r3, r0, #0
 8000e9c:	d001      	beq.n	8000ea2 <MX_TIM15_Init+0xce>
  {
    Error_Handler();
 8000e9e:	f7ff fd30 	bl	8000902 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ea2:	2138      	movs	r1, #56	@ 0x38
 8000ea4:	187b      	adds	r3, r7, r1
 8000ea6:	2260      	movs	r2, #96	@ 0x60
 8000ea8:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000eaa:	187b      	adds	r3, r7, r1
 8000eac:	2200      	movs	r2, #0
 8000eae:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000eb0:	187b      	adds	r3, r7, r1
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000eb6:	187b      	adds	r3, r7, r1
 8000eb8:	2200      	movs	r2, #0
 8000eba:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ebc:	187b      	adds	r3, r7, r1
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000ec2:	187b      	adds	r3, r7, r1
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000ec8:	187b      	adds	r3, r7, r1
 8000eca:	2200      	movs	r2, #0
 8000ecc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ece:	1879      	adds	r1, r7, r1
 8000ed0:	4b19      	ldr	r3, [pc, #100]	@ (8000f38 <MX_TIM15_Init+0x164>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	0018      	movs	r0, r3
 8000ed6:	f002 fb4b 	bl	8003570 <HAL_TIM_PWM_ConfigChannel>
 8000eda:	1e03      	subs	r3, r0, #0
 8000edc:	d001      	beq.n	8000ee2 <MX_TIM15_Init+0x10e>
  {
    Error_Handler();
 8000ede:	f7ff fd10 	bl	8000902 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000ee2:	1d3b      	adds	r3, r7, #4
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000ee8:	1d3b      	adds	r3, r7, #4
 8000eea:	2200      	movs	r2, #0
 8000eec:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000eee:	1d3b      	adds	r3, r7, #4
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000ef4:	1d3b      	adds	r3, r7, #4
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000efa:	1d3b      	adds	r3, r7, #4
 8000efc:	2200      	movs	r2, #0
 8000efe:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000f00:	1d3b      	adds	r3, r7, #4
 8000f02:	2280      	movs	r2, #128	@ 0x80
 8000f04:	0192      	lsls	r2, r2, #6
 8000f06:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000f08:	1d3b      	adds	r3, r7, #4
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000f0e:	1d3b      	adds	r3, r7, #4
 8000f10:	2200      	movs	r2, #0
 8000f12:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8000f14:	1d3a      	adds	r2, r7, #4
 8000f16:	4b08      	ldr	r3, [pc, #32]	@ (8000f38 <MX_TIM15_Init+0x164>)
 8000f18:	0011      	movs	r1, r2
 8000f1a:	0018      	movs	r0, r3
 8000f1c:	f003 f94a 	bl	80041b4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000f20:	1e03      	subs	r3, r0, #0
 8000f22:	d001      	beq.n	8000f28 <MX_TIM15_Init+0x154>
  {
    Error_Handler();
 8000f24:	f7ff fced 	bl	8000902 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8000f28:	4b03      	ldr	r3, [pc, #12]	@ (8000f38 <MX_TIM15_Init+0x164>)
 8000f2a:	0018      	movs	r0, r3
 8000f2c:	f000 f870 	bl	8001010 <HAL_TIM_MspPostInit>

}
 8000f30:	46c0      	nop			@ (mov r8, r8)
 8000f32:	46bd      	mov	sp, r7
 8000f34:	b01c      	add	sp, #112	@ 0x70
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	2000021c 	.word	0x2000021c
 8000f3c:	40014000 	.word	0x40014000
 8000f40:	0000ffff 	.word	0x0000ffff

08000f44 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b086      	sub	sp, #24
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	4a2a      	ldr	r2, [pc, #168]	@ (8000ffc <HAL_TIM_Base_MspInit+0xb8>)
 8000f52:	4293      	cmp	r3, r2
 8000f54:	d10e      	bne.n	8000f74 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000f56:	4b2a      	ldr	r3, [pc, #168]	@ (8001000 <HAL_TIM_Base_MspInit+0xbc>)
 8000f58:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000f5a:	4b29      	ldr	r3, [pc, #164]	@ (8001000 <HAL_TIM_Base_MspInit+0xbc>)
 8000f5c:	2180      	movs	r1, #128	@ 0x80
 8000f5e:	0109      	lsls	r1, r1, #4
 8000f60:	430a      	orrs	r2, r1
 8000f62:	641a      	str	r2, [r3, #64]	@ 0x40
 8000f64:	4b26      	ldr	r3, [pc, #152]	@ (8001000 <HAL_TIM_Base_MspInit+0xbc>)
 8000f66:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000f68:	2380      	movs	r3, #128	@ 0x80
 8000f6a:	011b      	lsls	r3, r3, #4
 8000f6c:	4013      	ands	r3, r2
 8000f6e:	617b      	str	r3, [r7, #20]
 8000f70:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM15_CLK_ENABLE();
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 8000f72:	e03e      	b.n	8000ff2 <HAL_TIM_Base_MspInit+0xae>
  else if(tim_baseHandle->Instance==TIM3)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	4a22      	ldr	r2, [pc, #136]	@ (8001004 <HAL_TIM_Base_MspInit+0xc0>)
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	d10c      	bne.n	8000f98 <HAL_TIM_Base_MspInit+0x54>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000f7e:	4b20      	ldr	r3, [pc, #128]	@ (8001000 <HAL_TIM_Base_MspInit+0xbc>)
 8000f80:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000f82:	4b1f      	ldr	r3, [pc, #124]	@ (8001000 <HAL_TIM_Base_MspInit+0xbc>)
 8000f84:	2102      	movs	r1, #2
 8000f86:	430a      	orrs	r2, r1
 8000f88:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000f8a:	4b1d      	ldr	r3, [pc, #116]	@ (8001000 <HAL_TIM_Base_MspInit+0xbc>)
 8000f8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000f8e:	2202      	movs	r2, #2
 8000f90:	4013      	ands	r3, r2
 8000f92:	613b      	str	r3, [r7, #16]
 8000f94:	693b      	ldr	r3, [r7, #16]
}
 8000f96:	e02c      	b.n	8000ff2 <HAL_TIM_Base_MspInit+0xae>
  else if(tim_baseHandle->Instance==TIM6)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a1a      	ldr	r2, [pc, #104]	@ (8001008 <HAL_TIM_Base_MspInit+0xc4>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d114      	bne.n	8000fcc <HAL_TIM_Base_MspInit+0x88>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000fa2:	4b17      	ldr	r3, [pc, #92]	@ (8001000 <HAL_TIM_Base_MspInit+0xbc>)
 8000fa4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000fa6:	4b16      	ldr	r3, [pc, #88]	@ (8001000 <HAL_TIM_Base_MspInit+0xbc>)
 8000fa8:	2110      	movs	r1, #16
 8000faa:	430a      	orrs	r2, r1
 8000fac:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000fae:	4b14      	ldr	r3, [pc, #80]	@ (8001000 <HAL_TIM_Base_MspInit+0xbc>)
 8000fb0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000fb2:	2210      	movs	r2, #16
 8000fb4:	4013      	ands	r3, r2
 8000fb6:	60fb      	str	r3, [r7, #12]
 8000fb8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 8000fba:	2200      	movs	r2, #0
 8000fbc:	2100      	movs	r1, #0
 8000fbe:	2011      	movs	r0, #17
 8000fc0:	f000 fff0 	bl	8001fa4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8000fc4:	2011      	movs	r0, #17
 8000fc6:	f001 f802 	bl	8001fce <HAL_NVIC_EnableIRQ>
}
 8000fca:	e012      	b.n	8000ff2 <HAL_TIM_Base_MspInit+0xae>
  else if(tim_baseHandle->Instance==TIM15)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4a0e      	ldr	r2, [pc, #56]	@ (800100c <HAL_TIM_Base_MspInit+0xc8>)
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d10d      	bne.n	8000ff2 <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8000fd6:	4b0a      	ldr	r3, [pc, #40]	@ (8001000 <HAL_TIM_Base_MspInit+0xbc>)
 8000fd8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000fda:	4b09      	ldr	r3, [pc, #36]	@ (8001000 <HAL_TIM_Base_MspInit+0xbc>)
 8000fdc:	2180      	movs	r1, #128	@ 0x80
 8000fde:	0249      	lsls	r1, r1, #9
 8000fe0:	430a      	orrs	r2, r1
 8000fe2:	641a      	str	r2, [r3, #64]	@ 0x40
 8000fe4:	4b06      	ldr	r3, [pc, #24]	@ (8001000 <HAL_TIM_Base_MspInit+0xbc>)
 8000fe6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000fe8:	2380      	movs	r3, #128	@ 0x80
 8000fea:	025b      	lsls	r3, r3, #9
 8000fec:	4013      	ands	r3, r2
 8000fee:	60bb      	str	r3, [r7, #8]
 8000ff0:	68bb      	ldr	r3, [r7, #8]
}
 8000ff2:	46c0      	nop			@ (mov r8, r8)
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	b006      	add	sp, #24
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	46c0      	nop			@ (mov r8, r8)
 8000ffc:	40012c00 	.word	0x40012c00
 8001000:	40021000 	.word	0x40021000
 8001004:	40000400 	.word	0x40000400
 8001008:	40001000 	.word	0x40001000
 800100c:	40014000 	.word	0x40014000

08001010 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001010:	b590      	push	{r4, r7, lr}
 8001012:	b08b      	sub	sp, #44	@ 0x2c
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001018:	2414      	movs	r4, #20
 800101a:	193b      	adds	r3, r7, r4
 800101c:	0018      	movs	r0, r3
 800101e:	2314      	movs	r3, #20
 8001020:	001a      	movs	r2, r3
 8001022:	2100      	movs	r1, #0
 8001024:	f003 ff96 	bl	8004f54 <memset>
  if(timHandle->Instance==TIM1)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a3e      	ldr	r2, [pc, #248]	@ (8001128 <HAL_TIM_MspPostInit+0x118>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d124      	bne.n	800107c <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001032:	4b3e      	ldr	r3, [pc, #248]	@ (800112c <HAL_TIM_MspPostInit+0x11c>)
 8001034:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001036:	4b3d      	ldr	r3, [pc, #244]	@ (800112c <HAL_TIM_MspPostInit+0x11c>)
 8001038:	2101      	movs	r1, #1
 800103a:	430a      	orrs	r2, r1
 800103c:	635a      	str	r2, [r3, #52]	@ 0x34
 800103e:	4b3b      	ldr	r3, [pc, #236]	@ (800112c <HAL_TIM_MspPostInit+0x11c>)
 8001040:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001042:	2201      	movs	r2, #1
 8001044:	4013      	ands	r3, r2
 8001046:	613b      	str	r3, [r7, #16]
 8001048:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = PIEZO_PWM_Pin;
 800104a:	193b      	adds	r3, r7, r4
 800104c:	2280      	movs	r2, #128	@ 0x80
 800104e:	0052      	lsls	r2, r2, #1
 8001050:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001052:	0021      	movs	r1, r4
 8001054:	187b      	adds	r3, r7, r1
 8001056:	2202      	movs	r2, #2
 8001058:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105a:	187b      	adds	r3, r7, r1
 800105c:	2200      	movs	r2, #0
 800105e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001060:	187b      	adds	r3, r7, r1
 8001062:	2200      	movs	r2, #0
 8001064:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001066:	187b      	adds	r3, r7, r1
 8001068:	2202      	movs	r2, #2
 800106a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(PIEZO_PWM_GPIO_Port, &GPIO_InitStruct);
 800106c:	187a      	adds	r2, r7, r1
 800106e:	23a0      	movs	r3, #160	@ 0xa0
 8001070:	05db      	lsls	r3, r3, #23
 8001072:	0011      	movs	r1, r2
 8001074:	0018      	movs	r0, r3
 8001076:	f001 f893 	bl	80021a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 800107a:	e050      	b.n	800111e <HAL_TIM_MspPostInit+0x10e>
  else if(timHandle->Instance==TIM3)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4a2b      	ldr	r2, [pc, #172]	@ (8001130 <HAL_TIM_MspPostInit+0x120>)
 8001082:	4293      	cmp	r3, r2
 8001084:	d123      	bne.n	80010ce <HAL_TIM_MspPostInit+0xbe>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001086:	4b29      	ldr	r3, [pc, #164]	@ (800112c <HAL_TIM_MspPostInit+0x11c>)
 8001088:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800108a:	4b28      	ldr	r3, [pc, #160]	@ (800112c <HAL_TIM_MspPostInit+0x11c>)
 800108c:	2101      	movs	r1, #1
 800108e:	430a      	orrs	r2, r1
 8001090:	635a      	str	r2, [r3, #52]	@ 0x34
 8001092:	4b26      	ldr	r3, [pc, #152]	@ (800112c <HAL_TIM_MspPostInit+0x11c>)
 8001094:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001096:	2201      	movs	r2, #1
 8001098:	4013      	ands	r3, r2
 800109a:	60fb      	str	r3, [r7, #12]
 800109c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = WPT_PWM_Pin;
 800109e:	2114      	movs	r1, #20
 80010a0:	187b      	adds	r3, r7, r1
 80010a2:	2240      	movs	r2, #64	@ 0x40
 80010a4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010a6:	187b      	adds	r3, r7, r1
 80010a8:	2202      	movs	r2, #2
 80010aa:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ac:	187b      	adds	r3, r7, r1
 80010ae:	2200      	movs	r2, #0
 80010b0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b2:	187b      	adds	r3, r7, r1
 80010b4:	2200      	movs	r2, #0
 80010b6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 80010b8:	187b      	adds	r3, r7, r1
 80010ba:	2201      	movs	r2, #1
 80010bc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(WPT_PWM_GPIO_Port, &GPIO_InitStruct);
 80010be:	187a      	adds	r2, r7, r1
 80010c0:	23a0      	movs	r3, #160	@ 0xa0
 80010c2:	05db      	lsls	r3, r3, #23
 80010c4:	0011      	movs	r1, r2
 80010c6:	0018      	movs	r0, r3
 80010c8:	f001 f86a 	bl	80021a0 <HAL_GPIO_Init>
}
 80010cc:	e027      	b.n	800111e <HAL_TIM_MspPostInit+0x10e>
  else if(timHandle->Instance==TIM15)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	4a18      	ldr	r2, [pc, #96]	@ (8001134 <HAL_TIM_MspPostInit+0x124>)
 80010d4:	4293      	cmp	r3, r2
 80010d6:	d122      	bne.n	800111e <HAL_TIM_MspPostInit+0x10e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010d8:	4b14      	ldr	r3, [pc, #80]	@ (800112c <HAL_TIM_MspPostInit+0x11c>)
 80010da:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80010dc:	4b13      	ldr	r3, [pc, #76]	@ (800112c <HAL_TIM_MspPostInit+0x11c>)
 80010de:	2101      	movs	r1, #1
 80010e0:	430a      	orrs	r2, r1
 80010e2:	635a      	str	r2, [r3, #52]	@ 0x34
 80010e4:	4b11      	ldr	r3, [pc, #68]	@ (800112c <HAL_TIM_MspPostInit+0x11c>)
 80010e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80010e8:	2201      	movs	r2, #1
 80010ea:	4013      	ands	r3, r2
 80010ec:	60bb      	str	r3, [r7, #8]
 80010ee:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = VBOOST_CAL_PWM_Pin;
 80010f0:	2114      	movs	r1, #20
 80010f2:	187b      	adds	r3, r7, r1
 80010f4:	2202      	movs	r2, #2
 80010f6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f8:	187b      	adds	r3, r7, r1
 80010fa:	2202      	movs	r2, #2
 80010fc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fe:	187b      	adds	r3, r7, r1
 8001100:	2200      	movs	r2, #0
 8001102:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001104:	187b      	adds	r3, r7, r1
 8001106:	2200      	movs	r2, #0
 8001108:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM15;
 800110a:	187b      	adds	r3, r7, r1
 800110c:	2205      	movs	r2, #5
 800110e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(VBOOST_CAL_PWM_GPIO_Port, &GPIO_InitStruct);
 8001110:	187a      	adds	r2, r7, r1
 8001112:	23a0      	movs	r3, #160	@ 0xa0
 8001114:	05db      	lsls	r3, r3, #23
 8001116:	0011      	movs	r1, r2
 8001118:	0018      	movs	r0, r3
 800111a:	f001 f841 	bl	80021a0 <HAL_GPIO_Init>
}
 800111e:	46c0      	nop			@ (mov r8, r8)
 8001120:	46bd      	mov	sp, r7
 8001122:	b00b      	add	sp, #44	@ 0x2c
 8001124:	bd90      	pop	{r4, r7, pc}
 8001126:	46c0      	nop			@ (mov r8, r8)
 8001128:	40012c00 	.word	0x40012c00
 800112c:	40021000 	.word	0x40021000
 8001130:	40000400 	.word	0x40000400
 8001134:	40014000 	.word	0x40014000

08001138 <DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001138:	e7fe      	b.n	8001138 <DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler>
	...

0800113c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001142:	1dfb      	adds	r3, r7, #7
 8001144:	2200      	movs	r2, #0
 8001146:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001148:	4b0b      	ldr	r3, [pc, #44]	@ (8001178 <HAL_Init+0x3c>)
 800114a:	681a      	ldr	r2, [r3, #0]
 800114c:	4b0a      	ldr	r3, [pc, #40]	@ (8001178 <HAL_Init+0x3c>)
 800114e:	2180      	movs	r1, #128	@ 0x80
 8001150:	0049      	lsls	r1, r1, #1
 8001152:	430a      	orrs	r2, r1
 8001154:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001156:	2003      	movs	r0, #3
 8001158:	f000 f810 	bl	800117c <HAL_InitTick>
 800115c:	1e03      	subs	r3, r0, #0
 800115e:	d003      	beq.n	8001168 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001160:	1dfb      	adds	r3, r7, #7
 8001162:	2201      	movs	r2, #1
 8001164:	701a      	strb	r2, [r3, #0]
 8001166:	e001      	b.n	800116c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001168:	f7ff fbd2 	bl	8000910 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800116c:	1dfb      	adds	r3, r7, #7
 800116e:	781b      	ldrb	r3, [r3, #0]
}
 8001170:	0018      	movs	r0, r3
 8001172:	46bd      	mov	sp, r7
 8001174:	b002      	add	sp, #8
 8001176:	bd80      	pop	{r7, pc}
 8001178:	40022000 	.word	0x40022000

0800117c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800117c:	b590      	push	{r4, r7, lr}
 800117e:	b085      	sub	sp, #20
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001184:	230f      	movs	r3, #15
 8001186:	18fb      	adds	r3, r7, r3
 8001188:	2200      	movs	r2, #0
 800118a:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 800118c:	4b1d      	ldr	r3, [pc, #116]	@ (8001204 <HAL_InitTick+0x88>)
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	2b00      	cmp	r3, #0
 8001192:	d02b      	beq.n	80011ec <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001194:	4b1c      	ldr	r3, [pc, #112]	@ (8001208 <HAL_InitTick+0x8c>)
 8001196:	681c      	ldr	r4, [r3, #0]
 8001198:	4b1a      	ldr	r3, [pc, #104]	@ (8001204 <HAL_InitTick+0x88>)
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	0019      	movs	r1, r3
 800119e:	23fa      	movs	r3, #250	@ 0xfa
 80011a0:	0098      	lsls	r0, r3, #2
 80011a2:	f7ff f809 	bl	80001b8 <__udivsi3>
 80011a6:	0003      	movs	r3, r0
 80011a8:	0019      	movs	r1, r3
 80011aa:	0020      	movs	r0, r4
 80011ac:	f7ff f804 	bl	80001b8 <__udivsi3>
 80011b0:	0003      	movs	r3, r0
 80011b2:	0018      	movs	r0, r3
 80011b4:	f000 ff1b 	bl	8001fee <HAL_SYSTICK_Config>
 80011b8:	1e03      	subs	r3, r0, #0
 80011ba:	d112      	bne.n	80011e2 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	2b03      	cmp	r3, #3
 80011c0:	d80a      	bhi.n	80011d8 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011c2:	6879      	ldr	r1, [r7, #4]
 80011c4:	2301      	movs	r3, #1
 80011c6:	425b      	negs	r3, r3
 80011c8:	2200      	movs	r2, #0
 80011ca:	0018      	movs	r0, r3
 80011cc:	f000 feea 	bl	8001fa4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80011d0:	4b0e      	ldr	r3, [pc, #56]	@ (800120c <HAL_InitTick+0x90>)
 80011d2:	687a      	ldr	r2, [r7, #4]
 80011d4:	601a      	str	r2, [r3, #0]
 80011d6:	e00d      	b.n	80011f4 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80011d8:	230f      	movs	r3, #15
 80011da:	18fb      	adds	r3, r7, r3
 80011dc:	2201      	movs	r2, #1
 80011de:	701a      	strb	r2, [r3, #0]
 80011e0:	e008      	b.n	80011f4 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80011e2:	230f      	movs	r3, #15
 80011e4:	18fb      	adds	r3, r7, r3
 80011e6:	2201      	movs	r2, #1
 80011e8:	701a      	strb	r2, [r3, #0]
 80011ea:	e003      	b.n	80011f4 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80011ec:	230f      	movs	r3, #15
 80011ee:	18fb      	adds	r3, r7, r3
 80011f0:	2201      	movs	r2, #1
 80011f2:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80011f4:	230f      	movs	r3, #15
 80011f6:	18fb      	adds	r3, r7, r3
 80011f8:	781b      	ldrb	r3, [r3, #0]
}
 80011fa:	0018      	movs	r0, r3
 80011fc:	46bd      	mov	sp, r7
 80011fe:	b005      	add	sp, #20
 8001200:	bd90      	pop	{r4, r7, pc}
 8001202:	46c0      	nop			@ (mov r8, r8)
 8001204:	20000008 	.word	0x20000008
 8001208:	20000000 	.word	0x20000000
 800120c:	20000004 	.word	0x20000004

08001210 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001214:	4b05      	ldr	r3, [pc, #20]	@ (800122c <HAL_IncTick+0x1c>)
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	001a      	movs	r2, r3
 800121a:	4b05      	ldr	r3, [pc, #20]	@ (8001230 <HAL_IncTick+0x20>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	18d2      	adds	r2, r2, r3
 8001220:	4b03      	ldr	r3, [pc, #12]	@ (8001230 <HAL_IncTick+0x20>)
 8001222:	601a      	str	r2, [r3, #0]
}
 8001224:	46c0      	nop			@ (mov r8, r8)
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	46c0      	nop			@ (mov r8, r8)
 800122c:	20000008 	.word	0x20000008
 8001230:	200002fc 	.word	0x200002fc

08001234 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	af00      	add	r7, sp, #0
  return uwTick;
 8001238:	4b02      	ldr	r3, [pc, #8]	@ (8001244 <HAL_GetTick+0x10>)
 800123a:	681b      	ldr	r3, [r3, #0]
}
 800123c:	0018      	movs	r0, r3
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
 8001242:	46c0      	nop			@ (mov r8, r8)
 8001244:	200002fc 	.word	0x200002fc

08001248 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8001250:	4b06      	ldr	r3, [pc, #24]	@ (800126c <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4a06      	ldr	r2, [pc, #24]	@ (8001270 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8001256:	4013      	ands	r3, r2
 8001258:	0019      	movs	r1, r3
 800125a:	4b04      	ldr	r3, [pc, #16]	@ (800126c <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 800125c:	687a      	ldr	r2, [r7, #4]
 800125e:	430a      	orrs	r2, r1
 8001260:	601a      	str	r2, [r3, #0]
}
 8001262:	46c0      	nop			@ (mov r8, r8)
 8001264:	46bd      	mov	sp, r7
 8001266:	b002      	add	sp, #8
 8001268:	bd80      	pop	{r7, pc}
 800126a:	46c0      	nop			@ (mov r8, r8)
 800126c:	40010000 	.word	0x40010000
 8001270:	fffff9ff 	.word	0xfffff9ff

08001274 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
 800127c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	4a05      	ldr	r2, [pc, #20]	@ (8001298 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8001284:	401a      	ands	r2, r3
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	431a      	orrs	r2, r3
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	601a      	str	r2, [r3, #0]
}
 800128e:	46c0      	nop			@ (mov r8, r8)
 8001290:	46bd      	mov	sp, r7
 8001292:	b002      	add	sp, #8
 8001294:	bd80      	pop	{r7, pc}
 8001296:	46c0      	nop			@ (mov r8, r8)
 8001298:	fe3fffff 	.word	0xfe3fffff

0800129c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b082      	sub	sp, #8
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681a      	ldr	r2, [r3, #0]
 80012a8:	23e0      	movs	r3, #224	@ 0xe0
 80012aa:	045b      	lsls	r3, r3, #17
 80012ac:	4013      	ands	r3, r2
}
 80012ae:	0018      	movs	r0, r3
 80012b0:	46bd      	mov	sp, r7
 80012b2:	b002      	add	sp, #8
 80012b4:	bd80      	pop	{r7, pc}

080012b6 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 80012b6:	b580      	push	{r7, lr}
 80012b8:	b084      	sub	sp, #16
 80012ba:	af00      	add	r7, sp, #0
 80012bc:	60f8      	str	r0, [r7, #12]
 80012be:	60b9      	str	r1, [r7, #8]
 80012c0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	695b      	ldr	r3, [r3, #20]
 80012c6:	68ba      	ldr	r2, [r7, #8]
 80012c8:	2104      	movs	r1, #4
 80012ca:	400a      	ands	r2, r1
 80012cc:	2107      	movs	r1, #7
 80012ce:	4091      	lsls	r1, r2
 80012d0:	000a      	movs	r2, r1
 80012d2:	43d2      	mvns	r2, r2
 80012d4:	401a      	ands	r2, r3
 80012d6:	68bb      	ldr	r3, [r7, #8]
 80012d8:	2104      	movs	r1, #4
 80012da:	400b      	ands	r3, r1
 80012dc:	6879      	ldr	r1, [r7, #4]
 80012de:	4099      	lsls	r1, r3
 80012e0:	000b      	movs	r3, r1
 80012e2:	431a      	orrs	r2, r3
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 80012e8:	46c0      	nop			@ (mov r8, r8)
 80012ea:	46bd      	mov	sp, r7
 80012ec:	b004      	add	sp, #16
 80012ee:	bd80      	pop	{r7, pc}

080012f0 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
 80012f8:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	695b      	ldr	r3, [r3, #20]
 80012fe:	683a      	ldr	r2, [r7, #0]
 8001300:	2104      	movs	r1, #4
 8001302:	400a      	ands	r2, r1
 8001304:	2107      	movs	r1, #7
 8001306:	4091      	lsls	r1, r2
 8001308:	000a      	movs	r2, r1
 800130a:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	2104      	movs	r1, #4
 8001310:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8001312:	40da      	lsrs	r2, r3
 8001314:	0013      	movs	r3, r2
}
 8001316:	0018      	movs	r0, r3
 8001318:	46bd      	mov	sp, r7
 800131a:	b002      	add	sp, #8
 800131c:	bd80      	pop	{r7, pc}

0800131e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800131e:	b580      	push	{r7, lr}
 8001320:	b082      	sub	sp, #8
 8001322:	af00      	add	r7, sp, #0
 8001324:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	68da      	ldr	r2, [r3, #12]
 800132a:	23c0      	movs	r3, #192	@ 0xc0
 800132c:	011b      	lsls	r3, r3, #4
 800132e:	4013      	ands	r3, r2
 8001330:	d101      	bne.n	8001336 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001332:	2301      	movs	r3, #1
 8001334:	e000      	b.n	8001338 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001336:	2300      	movs	r3, #0
}
 8001338:	0018      	movs	r0, r3
 800133a:	46bd      	mov	sp, r7
 800133c:	b002      	add	sp, #8
 800133e:	bd80      	pop	{r7, pc}

08001340 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b084      	sub	sp, #16
 8001344:	af00      	add	r7, sp, #0
 8001346:	60f8      	str	r0, [r7, #12]
 8001348:	60b9      	str	r1, [r7, #8]
 800134a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001350:	68ba      	ldr	r2, [r7, #8]
 8001352:	211f      	movs	r1, #31
 8001354:	400a      	ands	r2, r1
 8001356:	210f      	movs	r1, #15
 8001358:	4091      	lsls	r1, r2
 800135a:	000a      	movs	r2, r1
 800135c:	43d2      	mvns	r2, r2
 800135e:	401a      	ands	r2, r3
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	0e9b      	lsrs	r3, r3, #26
 8001364:	210f      	movs	r1, #15
 8001366:	4019      	ands	r1, r3
 8001368:	68bb      	ldr	r3, [r7, #8]
 800136a:	201f      	movs	r0, #31
 800136c:	4003      	ands	r3, r0
 800136e:	4099      	lsls	r1, r3
 8001370:	000b      	movs	r3, r1
 8001372:	431a      	orrs	r2, r3
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001378:	46c0      	nop			@ (mov r8, r8)
 800137a:	46bd      	mov	sp, r7
 800137c:	b004      	add	sp, #16
 800137e:	bd80      	pop	{r7, pc}

08001380 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b082      	sub	sp, #8
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
 8001388:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	035b      	lsls	r3, r3, #13
 8001392:	0b5b      	lsrs	r3, r3, #13
 8001394:	431a      	orrs	r2, r3
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800139a:	46c0      	nop			@ (mov r8, r8)
 800139c:	46bd      	mov	sp, r7
 800139e:	b002      	add	sp, #8
 80013a0:	bd80      	pop	{r7, pc}

080013a2 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80013a2:	b580      	push	{r7, lr}
 80013a4:	b082      	sub	sp, #8
 80013a6:	af00      	add	r7, sp, #0
 80013a8:	6078      	str	r0, [r7, #4]
 80013aa:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013b0:	683a      	ldr	r2, [r7, #0]
 80013b2:	0352      	lsls	r2, r2, #13
 80013b4:	0b52      	lsrs	r2, r2, #13
 80013b6:	43d2      	mvns	r2, r2
 80013b8:	401a      	ands	r2, r3
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80013be:	46c0      	nop			@ (mov r8, r8)
 80013c0:	46bd      	mov	sp, r7
 80013c2:	b002      	add	sp, #8
 80013c4:	bd80      	pop	{r7, pc}

080013c6 <LL_ADC_REG_GetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  */
__STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(const ADC_TypeDef *ADCx)
{
 80013c6:	b580      	push	{r7, lr}
 80013c8:	b082      	sub	sp, #8
 80013ca:	af00      	add	r7, sp, #0
 80013cc:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG));
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	68db      	ldr	r3, [r3, #12]
 80013d2:	2203      	movs	r2, #3
 80013d4:	4013      	ands	r3, r2
}
 80013d6:	0018      	movs	r0, r3
 80013d8:	46bd      	mov	sp, r7
 80013da:	b002      	add	sp, #8
 80013dc:	bd80      	pop	{r7, pc}
	...

080013e0 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b084      	sub	sp, #16
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	60f8      	str	r0, [r7, #12]
 80013e8:	60b9      	str	r1, [r7, #8]
 80013ea:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	695b      	ldr	r3, [r3, #20]
 80013f0:	68ba      	ldr	r2, [r7, #8]
 80013f2:	0212      	lsls	r2, r2, #8
 80013f4:	43d2      	mvns	r2, r2
 80013f6:	401a      	ands	r2, r3
 80013f8:	68bb      	ldr	r3, [r7, #8]
 80013fa:	021b      	lsls	r3, r3, #8
 80013fc:	6879      	ldr	r1, [r7, #4]
 80013fe:	400b      	ands	r3, r1
 8001400:	4904      	ldr	r1, [pc, #16]	@ (8001414 <LL_ADC_SetChannelSamplingTime+0x34>)
 8001402:	400b      	ands	r3, r1
 8001404:	431a      	orrs	r2, r3
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 800140a:	46c0      	nop			@ (mov r8, r8)
 800140c:	46bd      	mov	sp, r7
 800140e:	b004      	add	sp, #16
 8001410:	bd80      	pop	{r7, pc}
 8001412:	46c0      	nop			@ (mov r8, r8)
 8001414:	07ffff00 	.word	0x07ffff00

08001418 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b082      	sub	sp, #8
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	689b      	ldr	r3, [r3, #8]
 8001424:	4a05      	ldr	r2, [pc, #20]	@ (800143c <LL_ADC_EnableInternalRegulator+0x24>)
 8001426:	4013      	ands	r3, r2
 8001428:	2280      	movs	r2, #128	@ 0x80
 800142a:	0552      	lsls	r2, r2, #21
 800142c:	431a      	orrs	r2, r3
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001432:	46c0      	nop			@ (mov r8, r8)
 8001434:	46bd      	mov	sp, r7
 8001436:	b002      	add	sp, #8
 8001438:	bd80      	pop	{r7, pc}
 800143a:	46c0      	nop			@ (mov r8, r8)
 800143c:	6fffffe8 	.word	0x6fffffe8

08001440 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b082      	sub	sp, #8
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	689a      	ldr	r2, [r3, #8]
 800144c:	2380      	movs	r3, #128	@ 0x80
 800144e:	055b      	lsls	r3, r3, #21
 8001450:	401a      	ands	r2, r3
 8001452:	2380      	movs	r3, #128	@ 0x80
 8001454:	055b      	lsls	r3, r3, #21
 8001456:	429a      	cmp	r2, r3
 8001458:	d101      	bne.n	800145e <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 800145a:	2301      	movs	r3, #1
 800145c:	e000      	b.n	8001460 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 800145e:	2300      	movs	r3, #0
}
 8001460:	0018      	movs	r0, r3
 8001462:	46bd      	mov	sp, r7
 8001464:	b002      	add	sp, #8
 8001466:	bd80      	pop	{r7, pc}

08001468 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b082      	sub	sp, #8
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	689b      	ldr	r3, [r3, #8]
 8001474:	2201      	movs	r2, #1
 8001476:	4013      	ands	r3, r2
 8001478:	2b01      	cmp	r3, #1
 800147a:	d101      	bne.n	8001480 <LL_ADC_IsEnabled+0x18>
 800147c:	2301      	movs	r3, #1
 800147e:	e000      	b.n	8001482 <LL_ADC_IsEnabled+0x1a>
 8001480:	2300      	movs	r3, #0
}
 8001482:	0018      	movs	r0, r3
 8001484:	46bd      	mov	sp, r7
 8001486:	b002      	add	sp, #8
 8001488:	bd80      	pop	{r7, pc}

0800148a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800148a:	b580      	push	{r7, lr}
 800148c:	b082      	sub	sp, #8
 800148e:	af00      	add	r7, sp, #0
 8001490:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	689b      	ldr	r3, [r3, #8]
 8001496:	2204      	movs	r2, #4
 8001498:	4013      	ands	r3, r2
 800149a:	2b04      	cmp	r3, #4
 800149c:	d101      	bne.n	80014a2 <LL_ADC_REG_IsConversionOngoing+0x18>
 800149e:	2301      	movs	r3, #1
 80014a0:	e000      	b.n	80014a4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80014a2:	2300      	movs	r3, #0
}
 80014a4:	0018      	movs	r0, r3
 80014a6:	46bd      	mov	sp, r7
 80014a8:	b002      	add	sp, #8
 80014aa:	bd80      	pop	{r7, pc}

080014ac <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b088      	sub	sp, #32
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014b4:	231f      	movs	r3, #31
 80014b6:	18fb      	adds	r3, r7, r3
 80014b8:	2200      	movs	r2, #0
 80014ba:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 80014bc:	2300      	movs	r3, #0
 80014be:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 80014c0:	2300      	movs	r3, #0
 80014c2:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80014c4:	2300      	movs	r3, #0
 80014c6:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d101      	bne.n	80014d2 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 80014ce:	2301      	movs	r3, #1
 80014d0:	e17f      	b.n	80017d2 <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d10a      	bne.n	80014f0 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	0018      	movs	r0, r3
 80014de:	f7fe ff69 	bl	80003b4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	2200      	movs	r2, #0
 80014e6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	2254      	movs	r2, #84	@ 0x54
 80014ec:	2100      	movs	r1, #0
 80014ee:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	0018      	movs	r0, r3
 80014f6:	f7ff ffa3 	bl	8001440 <LL_ADC_IsInternalRegulatorEnabled>
 80014fa:	1e03      	subs	r3, r0, #0
 80014fc:	d115      	bne.n	800152a <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	0018      	movs	r0, r3
 8001504:	f7ff ff88 	bl	8001418 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001508:	4bb4      	ldr	r3, [pc, #720]	@ (80017dc <HAL_ADC_Init+0x330>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	49b4      	ldr	r1, [pc, #720]	@ (80017e0 <HAL_ADC_Init+0x334>)
 800150e:	0018      	movs	r0, r3
 8001510:	f7fe fe52 	bl	80001b8 <__udivsi3>
 8001514:	0003      	movs	r3, r0
 8001516:	3301      	adds	r3, #1
 8001518:	005b      	lsls	r3, r3, #1
 800151a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800151c:	e002      	b.n	8001524 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	3b01      	subs	r3, #1
 8001522:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d1f9      	bne.n	800151e <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	0018      	movs	r0, r3
 8001530:	f7ff ff86 	bl	8001440 <LL_ADC_IsInternalRegulatorEnabled>
 8001534:	1e03      	subs	r3, r0, #0
 8001536:	d10f      	bne.n	8001558 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800153c:	2210      	movs	r2, #16
 800153e:	431a      	orrs	r2, r3
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001548:	2201      	movs	r2, #1
 800154a:	431a      	orrs	r2, r3
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001550:	231f      	movs	r3, #31
 8001552:	18fb      	adds	r3, r7, r3
 8001554:	2201      	movs	r2, #1
 8001556:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	0018      	movs	r0, r3
 800155e:	f7ff ff94 	bl	800148a <LL_ADC_REG_IsConversionOngoing>
 8001562:	0003      	movs	r3, r0
 8001564:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800156a:	2210      	movs	r2, #16
 800156c:	4013      	ands	r3, r2
 800156e:	d000      	beq.n	8001572 <HAL_ADC_Init+0xc6>
 8001570:	e122      	b.n	80017b8 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001572:	693b      	ldr	r3, [r7, #16]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d000      	beq.n	800157a <HAL_ADC_Init+0xce>
 8001578:	e11e      	b.n	80017b8 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800157e:	4a99      	ldr	r2, [pc, #612]	@ (80017e4 <HAL_ADC_Init+0x338>)
 8001580:	4013      	ands	r3, r2
 8001582:	2202      	movs	r2, #2
 8001584:	431a      	orrs	r2, r3
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	0018      	movs	r0, r3
 8001590:	f7ff ff6a 	bl	8001468 <LL_ADC_IsEnabled>
 8001594:	1e03      	subs	r3, r0, #0
 8001596:	d000      	beq.n	800159a <HAL_ADC_Init+0xee>
 8001598:	e0ad      	b.n	80016f6 <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	7e1b      	ldrb	r3, [r3, #24]
 80015a2:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 80015a4:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	7e5b      	ldrb	r3, [r3, #25]
 80015aa:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80015ac:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	7e9b      	ldrb	r3, [r3, #26]
 80015b2:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80015b4:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d002      	beq.n	80015c4 <HAL_ADC_Init+0x118>
 80015be:	2380      	movs	r3, #128	@ 0x80
 80015c0:	015b      	lsls	r3, r3, #5
 80015c2:	e000      	b.n	80015c6 <HAL_ADC_Init+0x11a>
 80015c4:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80015c6:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80015cc:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	691b      	ldr	r3, [r3, #16]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	da04      	bge.n	80015e0 <HAL_ADC_Init+0x134>
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	691b      	ldr	r3, [r3, #16]
 80015da:	005b      	lsls	r3, r3, #1
 80015dc:	085b      	lsrs	r3, r3, #1
 80015de:	e001      	b.n	80015e4 <HAL_ADC_Init+0x138>
 80015e0:	2380      	movs	r3, #128	@ 0x80
 80015e2:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 80015e4:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	212c      	movs	r1, #44	@ 0x2c
 80015ea:	5c5b      	ldrb	r3, [r3, r1]
 80015ec:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80015ee:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 80015f0:	69ba      	ldr	r2, [r7, #24]
 80015f2:	4313      	orrs	r3, r2
 80015f4:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	2220      	movs	r2, #32
 80015fa:	5c9b      	ldrb	r3, [r3, r2]
 80015fc:	2b01      	cmp	r3, #1
 80015fe:	d115      	bne.n	800162c <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	7e9b      	ldrb	r3, [r3, #26]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d105      	bne.n	8001614 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 8001608:	69bb      	ldr	r3, [r7, #24]
 800160a:	2280      	movs	r2, #128	@ 0x80
 800160c:	0252      	lsls	r2, r2, #9
 800160e:	4313      	orrs	r3, r2
 8001610:	61bb      	str	r3, [r7, #24]
 8001612:	e00b      	b.n	800162c <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001618:	2220      	movs	r2, #32
 800161a:	431a      	orrs	r2, r3
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001624:	2201      	movs	r2, #1
 8001626:	431a      	orrs	r2, r3
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001630:	2b00      	cmp	r3, #0
 8001632:	d00a      	beq.n	800164a <HAL_ADC_Init+0x19e>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001638:	23e0      	movs	r3, #224	@ 0xe0
 800163a:	005b      	lsls	r3, r3, #1
 800163c:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001642:	4313      	orrs	r3, r2
 8001644:	69ba      	ldr	r2, [r7, #24]
 8001646:	4313      	orrs	r3, r2
 8001648:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	68db      	ldr	r3, [r3, #12]
 8001650:	4a65      	ldr	r2, [pc, #404]	@ (80017e8 <HAL_ADC_Init+0x33c>)
 8001652:	4013      	ands	r3, r2
 8001654:	0019      	movs	r1, r3
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	69ba      	ldr	r2, [r7, #24]
 800165c:	430a      	orrs	r2, r1
 800165e:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	0f9b      	lsrs	r3, r3, #30
 8001666:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800166c:	4313      	orrs	r3, r2
 800166e:	697a      	ldr	r2, [r7, #20]
 8001670:	4313      	orrs	r3, r2
 8001672:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	223c      	movs	r2, #60	@ 0x3c
 8001678:	5c9b      	ldrb	r3, [r3, r2]
 800167a:	2b01      	cmp	r3, #1
 800167c:	d111      	bne.n	80016a2 <HAL_ADC_Init+0x1f6>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	0f9b      	lsrs	r3, r3, #30
 8001684:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800168a:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                      hadc->Init.Oversampling.Ratio         |
 8001690:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                      hadc->Init.Oversampling.RightBitShift |
 8001696:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 8001698:	697b      	ldr	r3, [r7, #20]
 800169a:	4313      	orrs	r3, r2
 800169c:	2201      	movs	r2, #1
 800169e:	4313      	orrs	r3, r2
 80016a0:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	691b      	ldr	r3, [r3, #16]
 80016a8:	4a50      	ldr	r2, [pc, #320]	@ (80017ec <HAL_ADC_Init+0x340>)
 80016aa:	4013      	ands	r3, r2
 80016ac:	0019      	movs	r1, r3
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	697a      	ldr	r2, [r7, #20]
 80016b4:	430a      	orrs	r2, r1
 80016b6:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	685a      	ldr	r2, [r3, #4]
 80016bc:	23c0      	movs	r3, #192	@ 0xc0
 80016be:	061b      	lsls	r3, r3, #24
 80016c0:	429a      	cmp	r2, r3
 80016c2:	d018      	beq.n	80016f6 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80016c8:	2380      	movs	r3, #128	@ 0x80
 80016ca:	05db      	lsls	r3, r3, #23
 80016cc:	429a      	cmp	r2, r3
 80016ce:	d012      	beq.n	80016f6 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80016d4:	2380      	movs	r3, #128	@ 0x80
 80016d6:	061b      	lsls	r3, r3, #24
 80016d8:	429a      	cmp	r2, r3
 80016da:	d00c      	beq.n	80016f6 <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 80016dc:	4b44      	ldr	r3, [pc, #272]	@ (80017f0 <HAL_ADC_Init+0x344>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a44      	ldr	r2, [pc, #272]	@ (80017f4 <HAL_ADC_Init+0x348>)
 80016e2:	4013      	ands	r3, r2
 80016e4:	0019      	movs	r1, r3
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	685a      	ldr	r2, [r3, #4]
 80016ea:	23f0      	movs	r3, #240	@ 0xf0
 80016ec:	039b      	lsls	r3, r3, #14
 80016ee:	401a      	ands	r2, r3
 80016f0:	4b3f      	ldr	r3, [pc, #252]	@ (80017f0 <HAL_ADC_Init+0x344>)
 80016f2:	430a      	orrs	r2, r1
 80016f4:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6818      	ldr	r0, [r3, #0]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80016fe:	001a      	movs	r2, r3
 8001700:	2100      	movs	r1, #0
 8001702:	f7ff fdd8 	bl	80012b6 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6818      	ldr	r0, [r3, #0]
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800170e:	493a      	ldr	r1, [pc, #232]	@ (80017f8 <HAL_ADC_Init+0x34c>)
 8001710:	001a      	movs	r2, r3
 8001712:	f7ff fdd0 	bl	80012b6 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	691b      	ldr	r3, [r3, #16]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d109      	bne.n	8001732 <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	2110      	movs	r1, #16
 800172a:	4249      	negs	r1, r1
 800172c:	430a      	orrs	r2, r1
 800172e:	629a      	str	r2, [r3, #40]	@ 0x28
 8001730:	e018      	b.n	8001764 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	691a      	ldr	r2, [r3, #16]
 8001736:	2380      	movs	r3, #128	@ 0x80
 8001738:	039b      	lsls	r3, r3, #14
 800173a:	429a      	cmp	r2, r3
 800173c:	d112      	bne.n	8001764 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	69db      	ldr	r3, [r3, #28]
 8001748:	3b01      	subs	r3, #1
 800174a:	009b      	lsls	r3, r3, #2
 800174c:	221c      	movs	r2, #28
 800174e:	4013      	ands	r3, r2
 8001750:	2210      	movs	r2, #16
 8001752:	4252      	negs	r2, r2
 8001754:	409a      	lsls	r2, r3
 8001756:	0011      	movs	r1, r2
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	430a      	orrs	r2, r1
 8001762:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	2100      	movs	r1, #0
 800176a:	0018      	movs	r0, r3
 800176c:	f7ff fdc0 	bl	80012f0 <LL_ADC_GetSamplingTimeCommonChannels>
 8001770:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001776:	429a      	cmp	r2, r3
 8001778:	d10b      	bne.n	8001792 <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	2200      	movs	r2, #0
 800177e:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001784:	2203      	movs	r2, #3
 8001786:	4393      	bics	r3, r2
 8001788:	2201      	movs	r2, #1
 800178a:	431a      	orrs	r2, r3
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001790:	e01c      	b.n	80017cc <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001796:	2212      	movs	r2, #18
 8001798:	4393      	bics	r3, r2
 800179a:	2210      	movs	r2, #16
 800179c:	431a      	orrs	r2, r3
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017a6:	2201      	movs	r2, #1
 80017a8:	431a      	orrs	r2, r3
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 80017ae:	231f      	movs	r3, #31
 80017b0:	18fb      	adds	r3, r7, r3
 80017b2:	2201      	movs	r2, #1
 80017b4:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80017b6:	e009      	b.n	80017cc <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017bc:	2210      	movs	r2, #16
 80017be:	431a      	orrs	r2, r3
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80017c4:	231f      	movs	r3, #31
 80017c6:	18fb      	adds	r3, r7, r3
 80017c8:	2201      	movs	r2, #1
 80017ca:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 80017cc:	231f      	movs	r3, #31
 80017ce:	18fb      	adds	r3, r7, r3
 80017d0:	781b      	ldrb	r3, [r3, #0]
}
 80017d2:	0018      	movs	r0, r3
 80017d4:	46bd      	mov	sp, r7
 80017d6:	b008      	add	sp, #32
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	46c0      	nop			@ (mov r8, r8)
 80017dc:	20000000 	.word	0x20000000
 80017e0:	00030d40 	.word	0x00030d40
 80017e4:	fffffefd 	.word	0xfffffefd
 80017e8:	ffde0201 	.word	0xffde0201
 80017ec:	1ffffc02 	.word	0x1ffffc02
 80017f0:	40012708 	.word	0x40012708
 80017f4:	ffc3ffff 	.word	0xffc3ffff
 80017f8:	07ffff04 	.word	0x07ffff04

080017fc <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b086      	sub	sp, #24
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8001804:	2300      	movs	r3, #0
 8001806:	617b      	str	r3, [r7, #20]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8001818:	693b      	ldr	r3, [r7, #16]
 800181a:	2202      	movs	r2, #2
 800181c:	4013      	ands	r3, r2
 800181e:	d017      	beq.n	8001850 <HAL_ADC_IRQHandler+0x54>
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	2202      	movs	r2, #2
 8001824:	4013      	ands	r3, r2
 8001826:	d013      	beq.n	8001850 <HAL_ADC_IRQHandler+0x54>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800182c:	2210      	movs	r2, #16
 800182e:	4013      	ands	r3, r2
 8001830:	d106      	bne.n	8001840 <HAL_ADC_IRQHandler+0x44>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001836:	2280      	movs	r2, #128	@ 0x80
 8001838:	0112      	lsls	r2, r2, #4
 800183a:	431a      	orrs	r2, r3
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	0018      	movs	r0, r3
 8001844:	f000 faf2 	bl	8001e2c <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	2202      	movs	r2, #2
 800184e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001850:	693b      	ldr	r3, [r7, #16]
 8001852:	2204      	movs	r2, #4
 8001854:	4013      	ands	r3, r2
 8001856:	d003      	beq.n	8001860 <HAL_ADC_IRQHandler+0x64>
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	2204      	movs	r2, #4
 800185c:	4013      	ands	r3, r2
 800185e:	d107      	bne.n	8001870 <HAL_ADC_IRQHandler+0x74>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001860:	693b      	ldr	r3, [r7, #16]
 8001862:	2208      	movs	r2, #8
 8001864:	4013      	ands	r3, r2
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001866:	d04d      	beq.n	8001904 <HAL_ADC_IRQHandler+0x108>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	2208      	movs	r2, #8
 800186c:	4013      	ands	r3, r2
 800186e:	d049      	beq.n	8001904 <HAL_ADC_IRQHandler+0x108>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001874:	2210      	movs	r2, #16
 8001876:	4013      	ands	r3, r2
 8001878:	d106      	bne.n	8001888 <HAL_ADC_IRQHandler+0x8c>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800187e:	2280      	movs	r2, #128	@ 0x80
 8001880:	0092      	lsls	r2, r2, #2
 8001882:	431a      	orrs	r2, r3
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	0018      	movs	r0, r3
 800188e:	f7ff fd46 	bl	800131e <LL_ADC_REG_IsTriggerSourceSWStart>
 8001892:	1e03      	subs	r3, r0, #0
 8001894:	d02e      	beq.n	80018f4 <HAL_ADC_IRQHandler+0xf8>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	7e9b      	ldrb	r3, [r3, #26]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d12a      	bne.n	80018f4 <HAL_ADC_IRQHandler+0xf8>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	2208      	movs	r2, #8
 80018a6:	4013      	ands	r3, r2
 80018a8:	2b08      	cmp	r3, #8
 80018aa:	d123      	bne.n	80018f4 <HAL_ADC_IRQHandler+0xf8>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	0018      	movs	r0, r3
 80018b2:	f7ff fdea 	bl	800148a <LL_ADC_REG_IsConversionOngoing>
 80018b6:	1e03      	subs	r3, r0, #0
 80018b8:	d110      	bne.n	80018dc <HAL_ADC_IRQHandler+0xe0>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	685a      	ldr	r2, [r3, #4]
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	210c      	movs	r1, #12
 80018c6:	438a      	bics	r2, r1
 80018c8:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018ce:	4a56      	ldr	r2, [pc, #344]	@ (8001a28 <HAL_ADC_IRQHandler+0x22c>)
 80018d0:	4013      	ands	r3, r2
 80018d2:	2201      	movs	r2, #1
 80018d4:	431a      	orrs	r2, r3
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	659a      	str	r2, [r3, #88]	@ 0x58
 80018da:	e00b      	b.n	80018f4 <HAL_ADC_IRQHandler+0xf8>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018e0:	2220      	movs	r2, #32
 80018e2:	431a      	orrs	r2, r3
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018ec:	2201      	movs	r2, #1
 80018ee:	431a      	orrs	r2, r3
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	65da      	str	r2, [r3, #92]	@ 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	0018      	movs	r0, r3
 80018f8:	f000 f898 	bl	8001a2c <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	220c      	movs	r2, #12
 8001902:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8001904:	693b      	ldr	r3, [r7, #16]
 8001906:	2280      	movs	r2, #128	@ 0x80
 8001908:	4013      	ands	r3, r2
 800190a:	d012      	beq.n	8001932 <HAL_ADC_IRQHandler+0x136>
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	2280      	movs	r2, #128	@ 0x80
 8001910:	4013      	ands	r3, r2
 8001912:	d00e      	beq.n	8001932 <HAL_ADC_IRQHandler+0x136>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001918:	2280      	movs	r2, #128	@ 0x80
 800191a:	0252      	lsls	r2, r2, #9
 800191c:	431a      	orrs	r2, r3
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	0018      	movs	r0, r3
 8001926:	f000 f889 	bl	8001a3c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	2280      	movs	r2, #128	@ 0x80
 8001930:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8001932:	693a      	ldr	r2, [r7, #16]
 8001934:	2380      	movs	r3, #128	@ 0x80
 8001936:	005b      	lsls	r3, r3, #1
 8001938:	4013      	ands	r3, r2
 800193a:	d014      	beq.n	8001966 <HAL_ADC_IRQHandler+0x16a>
 800193c:	68fa      	ldr	r2, [r7, #12]
 800193e:	2380      	movs	r3, #128	@ 0x80
 8001940:	005b      	lsls	r3, r3, #1
 8001942:	4013      	ands	r3, r2
 8001944:	d00f      	beq.n	8001966 <HAL_ADC_IRQHandler+0x16a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800194a:	2280      	movs	r2, #128	@ 0x80
 800194c:	0292      	lsls	r2, r2, #10
 800194e:	431a      	orrs	r2, r3
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	0018      	movs	r0, r3
 8001958:	f000 fa58 	bl	8001e0c <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	2280      	movs	r2, #128	@ 0x80
 8001962:	0052      	lsls	r2, r2, #1
 8001964:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8001966:	693a      	ldr	r2, [r7, #16]
 8001968:	2380      	movs	r3, #128	@ 0x80
 800196a:	009b      	lsls	r3, r3, #2
 800196c:	4013      	ands	r3, r2
 800196e:	d014      	beq.n	800199a <HAL_ADC_IRQHandler+0x19e>
 8001970:	68fa      	ldr	r2, [r7, #12]
 8001972:	2380      	movs	r3, #128	@ 0x80
 8001974:	009b      	lsls	r3, r3, #2
 8001976:	4013      	ands	r3, r2
 8001978:	d00f      	beq.n	800199a <HAL_ADC_IRQHandler+0x19e>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800197e:	2280      	movs	r2, #128	@ 0x80
 8001980:	02d2      	lsls	r2, r2, #11
 8001982:	431a      	orrs	r2, r3
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	0018      	movs	r0, r3
 800198c:	f000 fa46 	bl	8001e1c <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	2280      	movs	r2, #128	@ 0x80
 8001996:	0092      	lsls	r2, r2, #2
 8001998:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	2210      	movs	r2, #16
 800199e:	4013      	ands	r3, r2
 80019a0:	d02b      	beq.n	80019fa <HAL_ADC_IRQHandler+0x1fe>
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	2210      	movs	r2, #16
 80019a6:	4013      	ands	r3, r2
 80019a8:	d027      	beq.n	80019fa <HAL_ADC_IRQHandler+0x1fe>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d102      	bne.n	80019b8 <HAL_ADC_IRQHandler+0x1bc>
    {
      overrun_error = 1UL;
 80019b2:	2301      	movs	r3, #1
 80019b4:	617b      	str	r3, [r7, #20]
 80019b6:	e008      	b.n	80019ca <HAL_ADC_IRQHandler+0x1ce>
    }
    else
    {
      /* Check DMA configuration */
      if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	0018      	movs	r0, r3
 80019be:	f7ff fd02 	bl	80013c6 <LL_ADC_REG_GetDMATransfer>
 80019c2:	1e03      	subs	r3, r0, #0
 80019c4:	d001      	beq.n	80019ca <HAL_ADC_IRQHandler+0x1ce>
      {
        overrun_error = 1UL;
 80019c6:	2301      	movs	r3, #1
 80019c8:	617b      	str	r3, [r7, #20]
      }
    }

    if (overrun_error == 1UL)
 80019ca:	697b      	ldr	r3, [r7, #20]
 80019cc:	2b01      	cmp	r3, #1
 80019ce:	d110      	bne.n	80019f2 <HAL_ADC_IRQHandler+0x1f6>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019d4:	2280      	movs	r2, #128	@ 0x80
 80019d6:	00d2      	lsls	r2, r2, #3
 80019d8:	431a      	orrs	r2, r3
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019e2:	2202      	movs	r2, #2
 80019e4:	431a      	orrs	r2, r3
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	65da      	str	r2, [r3, #92]	@ 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	0018      	movs	r0, r3
 80019ee:	f000 f82d 	bl	8001a4c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	2210      	movs	r2, #16
 80019f8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check channel configuration ready flag ========== */
  if (((tmp_isr & ADC_FLAG_CCRDY) == ADC_FLAG_CCRDY) && ((tmp_ier & ADC_IT_CCRDY) == ADC_IT_CCRDY))
 80019fa:	693a      	ldr	r2, [r7, #16]
 80019fc:	2380      	movs	r3, #128	@ 0x80
 80019fe:	019b      	lsls	r3, r3, #6
 8001a00:	4013      	ands	r3, r2
 8001a02:	d00d      	beq.n	8001a20 <HAL_ADC_IRQHandler+0x224>
 8001a04:	68fa      	ldr	r2, [r7, #12]
 8001a06:	2380      	movs	r3, #128	@ 0x80
 8001a08:	019b      	lsls	r3, r3, #6
 8001a0a:	4013      	ands	r3, r2
 8001a0c:	d008      	beq.n	8001a20 <HAL_ADC_IRQHandler+0x224>
  {
    /* Channel configuration ready callback */
    HAL_ADCEx_ChannelConfigReadyCallback(hadc);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	0018      	movs	r0, r3
 8001a12:	f000 fa13 	bl	8001e3c <HAL_ADCEx_ChannelConfigReadyCallback>

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_CCRDY);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	2280      	movs	r2, #128	@ 0x80
 8001a1c:	0192      	lsls	r2, r2, #6
 8001a1e:	601a      	str	r2, [r3, #0]
  }
}
 8001a20:	46c0      	nop			@ (mov r8, r8)
 8001a22:	46bd      	mov	sp, r7
 8001a24:	b006      	add	sp, #24
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	fffffefe 	.word	0xfffffefe

08001a2c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b082      	sub	sp, #8
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001a34:	46c0      	nop			@ (mov r8, r8)
 8001a36:	46bd      	mov	sp, r7
 8001a38:	b002      	add	sp, #8
 8001a3a:	bd80      	pop	{r7, pc}

08001a3c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b082      	sub	sp, #8
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001a44:	46c0      	nop			@ (mov r8, r8)
 8001a46:	46bd      	mov	sp, r7
 8001a48:	b002      	add	sp, #8
 8001a4a:	bd80      	pop	{r7, pc}

08001a4c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b082      	sub	sp, #8
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001a54:	46c0      	nop			@ (mov r8, r8)
 8001a56:	46bd      	mov	sp, r7
 8001a58:	b002      	add	sp, #8
 8001a5a:	bd80      	pop	{r7, pc}

08001a5c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b086      	sub	sp, #24
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
 8001a64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a66:	2317      	movs	r3, #23
 8001a68:	18fb      	adds	r3, r7, r3
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2254      	movs	r2, #84	@ 0x54
 8001a76:	5c9b      	ldrb	r3, [r3, r2]
 8001a78:	2b01      	cmp	r3, #1
 8001a7a:	d101      	bne.n	8001a80 <HAL_ADC_ConfigChannel+0x24>
 8001a7c:	2302      	movs	r3, #2
 8001a7e:	e1c0      	b.n	8001e02 <HAL_ADC_ConfigChannel+0x3a6>
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2254      	movs	r2, #84	@ 0x54
 8001a84:	2101      	movs	r1, #1
 8001a86:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	0018      	movs	r0, r3
 8001a8e:	f7ff fcfc 	bl	800148a <LL_ADC_REG_IsConversionOngoing>
 8001a92:	1e03      	subs	r3, r0, #0
 8001a94:	d000      	beq.n	8001a98 <HAL_ADC_ConfigChannel+0x3c>
 8001a96:	e1a3      	b.n	8001de0 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	2b02      	cmp	r3, #2
 8001a9e:	d100      	bne.n	8001aa2 <HAL_ADC_ConfigChannel+0x46>
 8001aa0:	e143      	b.n	8001d2a <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	691a      	ldr	r2, [r3, #16]
 8001aa6:	2380      	movs	r3, #128	@ 0x80
 8001aa8:	061b      	lsls	r3, r3, #24
 8001aaa:	429a      	cmp	r2, r3
 8001aac:	d004      	beq.n	8001ab8 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001ab2:	4ac1      	ldr	r2, [pc, #772]	@ (8001db8 <HAL_ADC_ConfigChannel+0x35c>)
 8001ab4:	4293      	cmp	r3, r2
 8001ab6:	d108      	bne.n	8001aca <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681a      	ldr	r2, [r3, #0]
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	0019      	movs	r1, r3
 8001ac2:	0010      	movs	r0, r2
 8001ac4:	f7ff fc5c 	bl	8001380 <LL_ADC_REG_SetSequencerChAdd>
 8001ac8:	e0c9      	b.n	8001c5e <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	211f      	movs	r1, #31
 8001ad4:	400b      	ands	r3, r1
 8001ad6:	210f      	movs	r1, #15
 8001ad8:	4099      	lsls	r1, r3
 8001ada:	000b      	movs	r3, r1
 8001adc:	43db      	mvns	r3, r3
 8001ade:	4013      	ands	r3, r2
 8001ae0:	0019      	movs	r1, r3
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	035b      	lsls	r3, r3, #13
 8001ae8:	0b5b      	lsrs	r3, r3, #13
 8001aea:	d105      	bne.n	8001af8 <HAL_ADC_ConfigChannel+0x9c>
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	0e9b      	lsrs	r3, r3, #26
 8001af2:	221f      	movs	r2, #31
 8001af4:	4013      	ands	r3, r2
 8001af6:	e098      	b.n	8001c2a <HAL_ADC_ConfigChannel+0x1ce>
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	2201      	movs	r2, #1
 8001afe:	4013      	ands	r3, r2
 8001b00:	d000      	beq.n	8001b04 <HAL_ADC_ConfigChannel+0xa8>
 8001b02:	e091      	b.n	8001c28 <HAL_ADC_ConfigChannel+0x1cc>
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	2202      	movs	r2, #2
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	d000      	beq.n	8001b10 <HAL_ADC_ConfigChannel+0xb4>
 8001b0e:	e089      	b.n	8001c24 <HAL_ADC_ConfigChannel+0x1c8>
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	2204      	movs	r2, #4
 8001b16:	4013      	ands	r3, r2
 8001b18:	d000      	beq.n	8001b1c <HAL_ADC_ConfigChannel+0xc0>
 8001b1a:	e081      	b.n	8001c20 <HAL_ADC_ConfigChannel+0x1c4>
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	2208      	movs	r2, #8
 8001b22:	4013      	ands	r3, r2
 8001b24:	d000      	beq.n	8001b28 <HAL_ADC_ConfigChannel+0xcc>
 8001b26:	e079      	b.n	8001c1c <HAL_ADC_ConfigChannel+0x1c0>
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	2210      	movs	r2, #16
 8001b2e:	4013      	ands	r3, r2
 8001b30:	d000      	beq.n	8001b34 <HAL_ADC_ConfigChannel+0xd8>
 8001b32:	e071      	b.n	8001c18 <HAL_ADC_ConfigChannel+0x1bc>
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	2220      	movs	r2, #32
 8001b3a:	4013      	ands	r3, r2
 8001b3c:	d000      	beq.n	8001b40 <HAL_ADC_ConfigChannel+0xe4>
 8001b3e:	e069      	b.n	8001c14 <HAL_ADC_ConfigChannel+0x1b8>
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	2240      	movs	r2, #64	@ 0x40
 8001b46:	4013      	ands	r3, r2
 8001b48:	d000      	beq.n	8001b4c <HAL_ADC_ConfigChannel+0xf0>
 8001b4a:	e061      	b.n	8001c10 <HAL_ADC_ConfigChannel+0x1b4>
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	2280      	movs	r2, #128	@ 0x80
 8001b52:	4013      	ands	r3, r2
 8001b54:	d000      	beq.n	8001b58 <HAL_ADC_ConfigChannel+0xfc>
 8001b56:	e059      	b.n	8001c0c <HAL_ADC_ConfigChannel+0x1b0>
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	681a      	ldr	r2, [r3, #0]
 8001b5c:	2380      	movs	r3, #128	@ 0x80
 8001b5e:	005b      	lsls	r3, r3, #1
 8001b60:	4013      	ands	r3, r2
 8001b62:	d151      	bne.n	8001c08 <HAL_ADC_ConfigChannel+0x1ac>
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	681a      	ldr	r2, [r3, #0]
 8001b68:	2380      	movs	r3, #128	@ 0x80
 8001b6a:	009b      	lsls	r3, r3, #2
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	d149      	bne.n	8001c04 <HAL_ADC_ConfigChannel+0x1a8>
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	681a      	ldr	r2, [r3, #0]
 8001b74:	2380      	movs	r3, #128	@ 0x80
 8001b76:	00db      	lsls	r3, r3, #3
 8001b78:	4013      	ands	r3, r2
 8001b7a:	d141      	bne.n	8001c00 <HAL_ADC_ConfigChannel+0x1a4>
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	681a      	ldr	r2, [r3, #0]
 8001b80:	2380      	movs	r3, #128	@ 0x80
 8001b82:	011b      	lsls	r3, r3, #4
 8001b84:	4013      	ands	r3, r2
 8001b86:	d139      	bne.n	8001bfc <HAL_ADC_ConfigChannel+0x1a0>
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	681a      	ldr	r2, [r3, #0]
 8001b8c:	2380      	movs	r3, #128	@ 0x80
 8001b8e:	015b      	lsls	r3, r3, #5
 8001b90:	4013      	ands	r3, r2
 8001b92:	d131      	bne.n	8001bf8 <HAL_ADC_ConfigChannel+0x19c>
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	681a      	ldr	r2, [r3, #0]
 8001b98:	2380      	movs	r3, #128	@ 0x80
 8001b9a:	019b      	lsls	r3, r3, #6
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	d129      	bne.n	8001bf4 <HAL_ADC_ConfigChannel+0x198>
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	681a      	ldr	r2, [r3, #0]
 8001ba4:	2380      	movs	r3, #128	@ 0x80
 8001ba6:	01db      	lsls	r3, r3, #7
 8001ba8:	4013      	ands	r3, r2
 8001baa:	d121      	bne.n	8001bf0 <HAL_ADC_ConfigChannel+0x194>
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	2380      	movs	r3, #128	@ 0x80
 8001bb2:	021b      	lsls	r3, r3, #8
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	d119      	bne.n	8001bec <HAL_ADC_ConfigChannel+0x190>
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	681a      	ldr	r2, [r3, #0]
 8001bbc:	2380      	movs	r3, #128	@ 0x80
 8001bbe:	025b      	lsls	r3, r3, #9
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	d111      	bne.n	8001be8 <HAL_ADC_ConfigChannel+0x18c>
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	681a      	ldr	r2, [r3, #0]
 8001bc8:	2380      	movs	r3, #128	@ 0x80
 8001bca:	029b      	lsls	r3, r3, #10
 8001bcc:	4013      	ands	r3, r2
 8001bce:	d109      	bne.n	8001be4 <HAL_ADC_ConfigChannel+0x188>
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	681a      	ldr	r2, [r3, #0]
 8001bd4:	2380      	movs	r3, #128	@ 0x80
 8001bd6:	02db      	lsls	r3, r3, #11
 8001bd8:	4013      	ands	r3, r2
 8001bda:	d001      	beq.n	8001be0 <HAL_ADC_ConfigChannel+0x184>
 8001bdc:	2312      	movs	r3, #18
 8001bde:	e024      	b.n	8001c2a <HAL_ADC_ConfigChannel+0x1ce>
 8001be0:	2300      	movs	r3, #0
 8001be2:	e022      	b.n	8001c2a <HAL_ADC_ConfigChannel+0x1ce>
 8001be4:	2311      	movs	r3, #17
 8001be6:	e020      	b.n	8001c2a <HAL_ADC_ConfigChannel+0x1ce>
 8001be8:	2310      	movs	r3, #16
 8001bea:	e01e      	b.n	8001c2a <HAL_ADC_ConfigChannel+0x1ce>
 8001bec:	230f      	movs	r3, #15
 8001bee:	e01c      	b.n	8001c2a <HAL_ADC_ConfigChannel+0x1ce>
 8001bf0:	230e      	movs	r3, #14
 8001bf2:	e01a      	b.n	8001c2a <HAL_ADC_ConfigChannel+0x1ce>
 8001bf4:	230d      	movs	r3, #13
 8001bf6:	e018      	b.n	8001c2a <HAL_ADC_ConfigChannel+0x1ce>
 8001bf8:	230c      	movs	r3, #12
 8001bfa:	e016      	b.n	8001c2a <HAL_ADC_ConfigChannel+0x1ce>
 8001bfc:	230b      	movs	r3, #11
 8001bfe:	e014      	b.n	8001c2a <HAL_ADC_ConfigChannel+0x1ce>
 8001c00:	230a      	movs	r3, #10
 8001c02:	e012      	b.n	8001c2a <HAL_ADC_ConfigChannel+0x1ce>
 8001c04:	2309      	movs	r3, #9
 8001c06:	e010      	b.n	8001c2a <HAL_ADC_ConfigChannel+0x1ce>
 8001c08:	2308      	movs	r3, #8
 8001c0a:	e00e      	b.n	8001c2a <HAL_ADC_ConfigChannel+0x1ce>
 8001c0c:	2307      	movs	r3, #7
 8001c0e:	e00c      	b.n	8001c2a <HAL_ADC_ConfigChannel+0x1ce>
 8001c10:	2306      	movs	r3, #6
 8001c12:	e00a      	b.n	8001c2a <HAL_ADC_ConfigChannel+0x1ce>
 8001c14:	2305      	movs	r3, #5
 8001c16:	e008      	b.n	8001c2a <HAL_ADC_ConfigChannel+0x1ce>
 8001c18:	2304      	movs	r3, #4
 8001c1a:	e006      	b.n	8001c2a <HAL_ADC_ConfigChannel+0x1ce>
 8001c1c:	2303      	movs	r3, #3
 8001c1e:	e004      	b.n	8001c2a <HAL_ADC_ConfigChannel+0x1ce>
 8001c20:	2302      	movs	r3, #2
 8001c22:	e002      	b.n	8001c2a <HAL_ADC_ConfigChannel+0x1ce>
 8001c24:	2301      	movs	r3, #1
 8001c26:	e000      	b.n	8001c2a <HAL_ADC_ConfigChannel+0x1ce>
 8001c28:	2300      	movs	r3, #0
 8001c2a:	683a      	ldr	r2, [r7, #0]
 8001c2c:	6852      	ldr	r2, [r2, #4]
 8001c2e:	201f      	movs	r0, #31
 8001c30:	4002      	ands	r2, r0
 8001c32:	4093      	lsls	r3, r2
 8001c34:	000a      	movs	r2, r1
 8001c36:	431a      	orrs	r2, r3
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	089b      	lsrs	r3, r3, #2
 8001c42:	1c5a      	adds	r2, r3, #1
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	69db      	ldr	r3, [r3, #28]
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	d808      	bhi.n	8001c5e <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6818      	ldr	r0, [r3, #0]
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	6859      	ldr	r1, [r3, #4]
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	001a      	movs	r2, r3
 8001c5a:	f7ff fb71 	bl	8001340 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6818      	ldr	r0, [r3, #0]
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	6819      	ldr	r1, [r3, #0]
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	689b      	ldr	r3, [r3, #8]
 8001c6a:	001a      	movs	r2, r3
 8001c6c:	f7ff fbb8 	bl	80013e0 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	db00      	blt.n	8001c7a <HAL_ADC_ConfigChannel+0x21e>
 8001c78:	e0bc      	b.n	8001df4 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001c7a:	4b50      	ldr	r3, [pc, #320]	@ (8001dbc <HAL_ADC_ConfigChannel+0x360>)
 8001c7c:	0018      	movs	r0, r3
 8001c7e:	f7ff fb0d 	bl	800129c <LL_ADC_GetCommonPathInternalCh>
 8001c82:	0003      	movs	r3, r0
 8001c84:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4a4d      	ldr	r2, [pc, #308]	@ (8001dc0 <HAL_ADC_ConfigChannel+0x364>)
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d122      	bne.n	8001cd6 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001c90:	693a      	ldr	r2, [r7, #16]
 8001c92:	2380      	movs	r3, #128	@ 0x80
 8001c94:	041b      	lsls	r3, r3, #16
 8001c96:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001c98:	d11d      	bne.n	8001cd6 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	2280      	movs	r2, #128	@ 0x80
 8001c9e:	0412      	lsls	r2, r2, #16
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	4a46      	ldr	r2, [pc, #280]	@ (8001dbc <HAL_ADC_ConfigChannel+0x360>)
 8001ca4:	0019      	movs	r1, r3
 8001ca6:	0010      	movs	r0, r2
 8001ca8:	f7ff fae4 	bl	8001274 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001cac:	4b45      	ldr	r3, [pc, #276]	@ (8001dc4 <HAL_ADC_ConfigChannel+0x368>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4945      	ldr	r1, [pc, #276]	@ (8001dc8 <HAL_ADC_ConfigChannel+0x36c>)
 8001cb2:	0018      	movs	r0, r3
 8001cb4:	f7fe fa80 	bl	80001b8 <__udivsi3>
 8001cb8:	0003      	movs	r3, r0
 8001cba:	1c5a      	adds	r2, r3, #1
 8001cbc:	0013      	movs	r3, r2
 8001cbe:	005b      	lsls	r3, r3, #1
 8001cc0:	189b      	adds	r3, r3, r2
 8001cc2:	009b      	lsls	r3, r3, #2
 8001cc4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001cc6:	e002      	b.n	8001cce <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	3b01      	subs	r3, #1
 8001ccc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d1f9      	bne.n	8001cc8 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001cd4:	e08e      	b.n	8001df4 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4a3c      	ldr	r2, [pc, #240]	@ (8001dcc <HAL_ADC_ConfigChannel+0x370>)
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d10e      	bne.n	8001cfe <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001ce0:	693a      	ldr	r2, [r7, #16]
 8001ce2:	2380      	movs	r3, #128	@ 0x80
 8001ce4:	045b      	lsls	r3, r3, #17
 8001ce6:	4013      	ands	r3, r2
 8001ce8:	d109      	bne.n	8001cfe <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	2280      	movs	r2, #128	@ 0x80
 8001cee:	0452      	lsls	r2, r2, #17
 8001cf0:	4313      	orrs	r3, r2
 8001cf2:	4a32      	ldr	r2, [pc, #200]	@ (8001dbc <HAL_ADC_ConfigChannel+0x360>)
 8001cf4:	0019      	movs	r1, r3
 8001cf6:	0010      	movs	r0, r2
 8001cf8:	f7ff fabc 	bl	8001274 <LL_ADC_SetCommonPathInternalCh>
 8001cfc:	e07a      	b.n	8001df4 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4a33      	ldr	r2, [pc, #204]	@ (8001dd0 <HAL_ADC_ConfigChannel+0x374>)
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d000      	beq.n	8001d0a <HAL_ADC_ConfigChannel+0x2ae>
 8001d08:	e074      	b.n	8001df4 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001d0a:	693a      	ldr	r2, [r7, #16]
 8001d0c:	2380      	movs	r3, #128	@ 0x80
 8001d0e:	03db      	lsls	r3, r3, #15
 8001d10:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001d12:	d000      	beq.n	8001d16 <HAL_ADC_ConfigChannel+0x2ba>
 8001d14:	e06e      	b.n	8001df4 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	2280      	movs	r2, #128	@ 0x80
 8001d1a:	03d2      	lsls	r2, r2, #15
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	4a27      	ldr	r2, [pc, #156]	@ (8001dbc <HAL_ADC_ConfigChannel+0x360>)
 8001d20:	0019      	movs	r1, r3
 8001d22:	0010      	movs	r0, r2
 8001d24:	f7ff faa6 	bl	8001274 <LL_ADC_SetCommonPathInternalCh>
 8001d28:	e064      	b.n	8001df4 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	691a      	ldr	r2, [r3, #16]
 8001d2e:	2380      	movs	r3, #128	@ 0x80
 8001d30:	061b      	lsls	r3, r3, #24
 8001d32:	429a      	cmp	r2, r3
 8001d34:	d004      	beq.n	8001d40 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001d3a:	4a1f      	ldr	r2, [pc, #124]	@ (8001db8 <HAL_ADC_ConfigChannel+0x35c>)
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d107      	bne.n	8001d50 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681a      	ldr	r2, [r3, #0]
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	0019      	movs	r1, r3
 8001d4a:	0010      	movs	r0, r2
 8001d4c:	f7ff fb29 	bl	80013a2 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	da4d      	bge.n	8001df4 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001d58:	4b18      	ldr	r3, [pc, #96]	@ (8001dbc <HAL_ADC_ConfigChannel+0x360>)
 8001d5a:	0018      	movs	r0, r3
 8001d5c:	f7ff fa9e 	bl	800129c <LL_ADC_GetCommonPathInternalCh>
 8001d60:	0003      	movs	r3, r0
 8001d62:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a15      	ldr	r2, [pc, #84]	@ (8001dc0 <HAL_ADC_ConfigChannel+0x364>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d108      	bne.n	8001d80 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	4a18      	ldr	r2, [pc, #96]	@ (8001dd4 <HAL_ADC_ConfigChannel+0x378>)
 8001d72:	4013      	ands	r3, r2
 8001d74:	4a11      	ldr	r2, [pc, #68]	@ (8001dbc <HAL_ADC_ConfigChannel+0x360>)
 8001d76:	0019      	movs	r1, r3
 8001d78:	0010      	movs	r0, r2
 8001d7a:	f7ff fa7b 	bl	8001274 <LL_ADC_SetCommonPathInternalCh>
 8001d7e:	e039      	b.n	8001df4 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a11      	ldr	r2, [pc, #68]	@ (8001dcc <HAL_ADC_ConfigChannel+0x370>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d108      	bne.n	8001d9c <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001d8a:	693b      	ldr	r3, [r7, #16]
 8001d8c:	4a12      	ldr	r2, [pc, #72]	@ (8001dd8 <HAL_ADC_ConfigChannel+0x37c>)
 8001d8e:	4013      	ands	r3, r2
 8001d90:	4a0a      	ldr	r2, [pc, #40]	@ (8001dbc <HAL_ADC_ConfigChannel+0x360>)
 8001d92:	0019      	movs	r1, r3
 8001d94:	0010      	movs	r0, r2
 8001d96:	f7ff fa6d 	bl	8001274 <LL_ADC_SetCommonPathInternalCh>
 8001d9a:	e02b      	b.n	8001df4 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a0b      	ldr	r2, [pc, #44]	@ (8001dd0 <HAL_ADC_ConfigChannel+0x374>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d126      	bne.n	8001df4 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	4a0c      	ldr	r2, [pc, #48]	@ (8001ddc <HAL_ADC_ConfigChannel+0x380>)
 8001daa:	4013      	ands	r3, r2
 8001dac:	4a03      	ldr	r2, [pc, #12]	@ (8001dbc <HAL_ADC_ConfigChannel+0x360>)
 8001dae:	0019      	movs	r1, r3
 8001db0:	0010      	movs	r0, r2
 8001db2:	f7ff fa5f 	bl	8001274 <LL_ADC_SetCommonPathInternalCh>
 8001db6:	e01d      	b.n	8001df4 <HAL_ADC_ConfigChannel+0x398>
 8001db8:	80000004 	.word	0x80000004
 8001dbc:	40012708 	.word	0x40012708
 8001dc0:	b0001000 	.word	0xb0001000
 8001dc4:	20000000 	.word	0x20000000
 8001dc8:	00030d40 	.word	0x00030d40
 8001dcc:	b8004000 	.word	0xb8004000
 8001dd0:	b4002000 	.word	0xb4002000
 8001dd4:	ff7fffff 	.word	0xff7fffff
 8001dd8:	feffffff 	.word	0xfeffffff
 8001ddc:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001de4:	2220      	movs	r2, #32
 8001de6:	431a      	orrs	r2, r3
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001dec:	2317      	movs	r3, #23
 8001dee:	18fb      	adds	r3, r7, r3
 8001df0:	2201      	movs	r2, #1
 8001df2:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2254      	movs	r2, #84	@ 0x54
 8001df8:	2100      	movs	r1, #0
 8001dfa:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8001dfc:	2317      	movs	r3, #23
 8001dfe:	18fb      	adds	r3, r7, r3
 8001e00:	781b      	ldrb	r3, [r3, #0]
}
 8001e02:	0018      	movs	r0, r3
 8001e04:	46bd      	mov	sp, r7
 8001e06:	b006      	add	sp, #24
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	46c0      	nop			@ (mov r8, r8)

08001e0c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b082      	sub	sp, #8
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8001e14:	46c0      	nop			@ (mov r8, r8)
 8001e16:	46bd      	mov	sp, r7
 8001e18:	b002      	add	sp, #8
 8001e1a:	bd80      	pop	{r7, pc}

08001e1c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b082      	sub	sp, #8
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8001e24:	46c0      	nop			@ (mov r8, r8)
 8001e26:	46bd      	mov	sp, r7
 8001e28:	b002      	add	sp, #8
 8001e2a:	bd80      	pop	{r7, pc}

08001e2c <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b082      	sub	sp, #8
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8001e34:	46c0      	nop			@ (mov r8, r8)
 8001e36:	46bd      	mov	sp, r7
 8001e38:	b002      	add	sp, #8
 8001e3a:	bd80      	pop	{r7, pc}

08001e3c <HAL_ADCEx_ChannelConfigReadyCallback>:
  * @brief  ADC channel configuration ready callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_ChannelConfigReadyCallback(ADC_HandleTypeDef *hadc)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b082      	sub	sp, #8
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_ChannelConfigReadyCallback must be implemented in the user file.
  */
}
 8001e44:	46c0      	nop			@ (mov r8, r8)
 8001e46:	46bd      	mov	sp, r7
 8001e48:	b002      	add	sp, #8
 8001e4a:	bd80      	pop	{r7, pc}

08001e4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b082      	sub	sp, #8
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	0002      	movs	r2, r0
 8001e54:	1dfb      	adds	r3, r7, #7
 8001e56:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001e58:	1dfb      	adds	r3, r7, #7
 8001e5a:	781b      	ldrb	r3, [r3, #0]
 8001e5c:	2b7f      	cmp	r3, #127	@ 0x7f
 8001e5e:	d809      	bhi.n	8001e74 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e60:	1dfb      	adds	r3, r7, #7
 8001e62:	781b      	ldrb	r3, [r3, #0]
 8001e64:	001a      	movs	r2, r3
 8001e66:	231f      	movs	r3, #31
 8001e68:	401a      	ands	r2, r3
 8001e6a:	4b04      	ldr	r3, [pc, #16]	@ (8001e7c <__NVIC_EnableIRQ+0x30>)
 8001e6c:	2101      	movs	r1, #1
 8001e6e:	4091      	lsls	r1, r2
 8001e70:	000a      	movs	r2, r1
 8001e72:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8001e74:	46c0      	nop			@ (mov r8, r8)
 8001e76:	46bd      	mov	sp, r7
 8001e78:	b002      	add	sp, #8
 8001e7a:	bd80      	pop	{r7, pc}
 8001e7c:	e000e100 	.word	0xe000e100

08001e80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e80:	b590      	push	{r4, r7, lr}
 8001e82:	b083      	sub	sp, #12
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	0002      	movs	r2, r0
 8001e88:	6039      	str	r1, [r7, #0]
 8001e8a:	1dfb      	adds	r3, r7, #7
 8001e8c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001e8e:	1dfb      	adds	r3, r7, #7
 8001e90:	781b      	ldrb	r3, [r3, #0]
 8001e92:	2b7f      	cmp	r3, #127	@ 0x7f
 8001e94:	d828      	bhi.n	8001ee8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001e96:	4a2f      	ldr	r2, [pc, #188]	@ (8001f54 <__NVIC_SetPriority+0xd4>)
 8001e98:	1dfb      	adds	r3, r7, #7
 8001e9a:	781b      	ldrb	r3, [r3, #0]
 8001e9c:	b25b      	sxtb	r3, r3
 8001e9e:	089b      	lsrs	r3, r3, #2
 8001ea0:	33c0      	adds	r3, #192	@ 0xc0
 8001ea2:	009b      	lsls	r3, r3, #2
 8001ea4:	589b      	ldr	r3, [r3, r2]
 8001ea6:	1dfa      	adds	r2, r7, #7
 8001ea8:	7812      	ldrb	r2, [r2, #0]
 8001eaa:	0011      	movs	r1, r2
 8001eac:	2203      	movs	r2, #3
 8001eae:	400a      	ands	r2, r1
 8001eb0:	00d2      	lsls	r2, r2, #3
 8001eb2:	21ff      	movs	r1, #255	@ 0xff
 8001eb4:	4091      	lsls	r1, r2
 8001eb6:	000a      	movs	r2, r1
 8001eb8:	43d2      	mvns	r2, r2
 8001eba:	401a      	ands	r2, r3
 8001ebc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	019b      	lsls	r3, r3, #6
 8001ec2:	22ff      	movs	r2, #255	@ 0xff
 8001ec4:	401a      	ands	r2, r3
 8001ec6:	1dfb      	adds	r3, r7, #7
 8001ec8:	781b      	ldrb	r3, [r3, #0]
 8001eca:	0018      	movs	r0, r3
 8001ecc:	2303      	movs	r3, #3
 8001ece:	4003      	ands	r3, r0
 8001ed0:	00db      	lsls	r3, r3, #3
 8001ed2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001ed4:	481f      	ldr	r0, [pc, #124]	@ (8001f54 <__NVIC_SetPriority+0xd4>)
 8001ed6:	1dfb      	adds	r3, r7, #7
 8001ed8:	781b      	ldrb	r3, [r3, #0]
 8001eda:	b25b      	sxtb	r3, r3
 8001edc:	089b      	lsrs	r3, r3, #2
 8001ede:	430a      	orrs	r2, r1
 8001ee0:	33c0      	adds	r3, #192	@ 0xc0
 8001ee2:	009b      	lsls	r3, r3, #2
 8001ee4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001ee6:	e031      	b.n	8001f4c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001ee8:	4a1b      	ldr	r2, [pc, #108]	@ (8001f58 <__NVIC_SetPriority+0xd8>)
 8001eea:	1dfb      	adds	r3, r7, #7
 8001eec:	781b      	ldrb	r3, [r3, #0]
 8001eee:	0019      	movs	r1, r3
 8001ef0:	230f      	movs	r3, #15
 8001ef2:	400b      	ands	r3, r1
 8001ef4:	3b08      	subs	r3, #8
 8001ef6:	089b      	lsrs	r3, r3, #2
 8001ef8:	3306      	adds	r3, #6
 8001efa:	009b      	lsls	r3, r3, #2
 8001efc:	18d3      	adds	r3, r2, r3
 8001efe:	3304      	adds	r3, #4
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	1dfa      	adds	r2, r7, #7
 8001f04:	7812      	ldrb	r2, [r2, #0]
 8001f06:	0011      	movs	r1, r2
 8001f08:	2203      	movs	r2, #3
 8001f0a:	400a      	ands	r2, r1
 8001f0c:	00d2      	lsls	r2, r2, #3
 8001f0e:	21ff      	movs	r1, #255	@ 0xff
 8001f10:	4091      	lsls	r1, r2
 8001f12:	000a      	movs	r2, r1
 8001f14:	43d2      	mvns	r2, r2
 8001f16:	401a      	ands	r2, r3
 8001f18:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	019b      	lsls	r3, r3, #6
 8001f1e:	22ff      	movs	r2, #255	@ 0xff
 8001f20:	401a      	ands	r2, r3
 8001f22:	1dfb      	adds	r3, r7, #7
 8001f24:	781b      	ldrb	r3, [r3, #0]
 8001f26:	0018      	movs	r0, r3
 8001f28:	2303      	movs	r3, #3
 8001f2a:	4003      	ands	r3, r0
 8001f2c:	00db      	lsls	r3, r3, #3
 8001f2e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001f30:	4809      	ldr	r0, [pc, #36]	@ (8001f58 <__NVIC_SetPriority+0xd8>)
 8001f32:	1dfb      	adds	r3, r7, #7
 8001f34:	781b      	ldrb	r3, [r3, #0]
 8001f36:	001c      	movs	r4, r3
 8001f38:	230f      	movs	r3, #15
 8001f3a:	4023      	ands	r3, r4
 8001f3c:	3b08      	subs	r3, #8
 8001f3e:	089b      	lsrs	r3, r3, #2
 8001f40:	430a      	orrs	r2, r1
 8001f42:	3306      	adds	r3, #6
 8001f44:	009b      	lsls	r3, r3, #2
 8001f46:	18c3      	adds	r3, r0, r3
 8001f48:	3304      	adds	r3, #4
 8001f4a:	601a      	str	r2, [r3, #0]
}
 8001f4c:	46c0      	nop			@ (mov r8, r8)
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	b003      	add	sp, #12
 8001f52:	bd90      	pop	{r4, r7, pc}
 8001f54:	e000e100 	.word	0xe000e100
 8001f58:	e000ed00 	.word	0xe000ed00

08001f5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b082      	sub	sp, #8
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	1e5a      	subs	r2, r3, #1
 8001f68:	2380      	movs	r3, #128	@ 0x80
 8001f6a:	045b      	lsls	r3, r3, #17
 8001f6c:	429a      	cmp	r2, r3
 8001f6e:	d301      	bcc.n	8001f74 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f70:	2301      	movs	r3, #1
 8001f72:	e010      	b.n	8001f96 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f74:	4b0a      	ldr	r3, [pc, #40]	@ (8001fa0 <SysTick_Config+0x44>)
 8001f76:	687a      	ldr	r2, [r7, #4]
 8001f78:	3a01      	subs	r2, #1
 8001f7a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	425b      	negs	r3, r3
 8001f80:	2103      	movs	r1, #3
 8001f82:	0018      	movs	r0, r3
 8001f84:	f7ff ff7c 	bl	8001e80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f88:	4b05      	ldr	r3, [pc, #20]	@ (8001fa0 <SysTick_Config+0x44>)
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f8e:	4b04      	ldr	r3, [pc, #16]	@ (8001fa0 <SysTick_Config+0x44>)
 8001f90:	2207      	movs	r2, #7
 8001f92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f94:	2300      	movs	r3, #0
}
 8001f96:	0018      	movs	r0, r3
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	b002      	add	sp, #8
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	46c0      	nop			@ (mov r8, r8)
 8001fa0:	e000e010 	.word	0xe000e010

08001fa4 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b084      	sub	sp, #16
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	60b9      	str	r1, [r7, #8]
 8001fac:	607a      	str	r2, [r7, #4]
 8001fae:	210f      	movs	r1, #15
 8001fb0:	187b      	adds	r3, r7, r1
 8001fb2:	1c02      	adds	r2, r0, #0
 8001fb4:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001fb6:	68ba      	ldr	r2, [r7, #8]
 8001fb8:	187b      	adds	r3, r7, r1
 8001fba:	781b      	ldrb	r3, [r3, #0]
 8001fbc:	b25b      	sxtb	r3, r3
 8001fbe:	0011      	movs	r1, r2
 8001fc0:	0018      	movs	r0, r3
 8001fc2:	f7ff ff5d 	bl	8001e80 <__NVIC_SetPriority>
}
 8001fc6:	46c0      	nop			@ (mov r8, r8)
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	b004      	add	sp, #16
 8001fcc:	bd80      	pop	{r7, pc}

08001fce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fce:	b580      	push	{r7, lr}
 8001fd0:	b082      	sub	sp, #8
 8001fd2:	af00      	add	r7, sp, #0
 8001fd4:	0002      	movs	r2, r0
 8001fd6:	1dfb      	adds	r3, r7, #7
 8001fd8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fda:	1dfb      	adds	r3, r7, #7
 8001fdc:	781b      	ldrb	r3, [r3, #0]
 8001fde:	b25b      	sxtb	r3, r3
 8001fe0:	0018      	movs	r0, r3
 8001fe2:	f7ff ff33 	bl	8001e4c <__NVIC_EnableIRQ>
}
 8001fe6:	46c0      	nop			@ (mov r8, r8)
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	b002      	add	sp, #8
 8001fec:	bd80      	pop	{r7, pc}

08001fee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001fee:	b580      	push	{r7, lr}
 8001ff0:	b082      	sub	sp, #8
 8001ff2:	af00      	add	r7, sp, #0
 8001ff4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	0018      	movs	r0, r3
 8001ffa:	f7ff ffaf 	bl	8001f5c <SysTick_Config>
 8001ffe:	0003      	movs	r3, r0
}
 8002000:	0018      	movs	r0, r3
 8002002:	46bd      	mov	sp, r7
 8002004:	b002      	add	sp, #8
 8002006:	bd80      	pop	{r7, pc}

08002008 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b082      	sub	sp, #8
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d101      	bne.n	800201a <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8002016:	2301      	movs	r3, #1
 8002018:	e050      	b.n	80020bc <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2225      	movs	r2, #37	@ 0x25
 800201e:	5c9b      	ldrb	r3, [r3, r2]
 8002020:	b2db      	uxtb	r3, r3
 8002022:	2b02      	cmp	r3, #2
 8002024:	d008      	beq.n	8002038 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2204      	movs	r2, #4
 800202a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2224      	movs	r2, #36	@ 0x24
 8002030:	2100      	movs	r1, #0
 8002032:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8002034:	2301      	movs	r3, #1
 8002036:	e041      	b.n	80020bc <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	681a      	ldr	r2, [r3, #0]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	210e      	movs	r1, #14
 8002044:	438a      	bics	r2, r1
 8002046:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800204c:	681a      	ldr	r2, [r3, #0]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002052:	491c      	ldr	r1, [pc, #112]	@ (80020c4 <HAL_DMA_Abort+0xbc>)
 8002054:	400a      	ands	r2, r1
 8002056:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	681a      	ldr	r2, [r3, #0]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	2101      	movs	r1, #1
 8002064:	438a      	bics	r2, r1
 8002066:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 8002068:	4b17      	ldr	r3, [pc, #92]	@ (80020c8 <HAL_DMA_Abort+0xc0>)
 800206a:	6859      	ldr	r1, [r3, #4]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002070:	221c      	movs	r2, #28
 8002072:	4013      	ands	r3, r2
 8002074:	2201      	movs	r2, #1
 8002076:	409a      	lsls	r2, r3
 8002078:	4b13      	ldr	r3, [pc, #76]	@ (80020c8 <HAL_DMA_Abort+0xc0>)
 800207a:	430a      	orrs	r2, r1
 800207c:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002082:	687a      	ldr	r2, [r7, #4]
 8002084:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002086:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800208c:	2b00      	cmp	r3, #0
 800208e:	d00c      	beq.n	80020aa <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002094:	681a      	ldr	r2, [r3, #0]
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800209a:	490a      	ldr	r1, [pc, #40]	@ (80020c4 <HAL_DMA_Abort+0xbc>)
 800209c:	400a      	ands	r2, r1
 800209e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020a4:	687a      	ldr	r2, [r7, #4]
 80020a6:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80020a8:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2225      	movs	r2, #37	@ 0x25
 80020ae:	2101      	movs	r1, #1
 80020b0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2224      	movs	r2, #36	@ 0x24
 80020b6:	2100      	movs	r1, #0
 80020b8:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 80020ba:	2300      	movs	r3, #0
}
 80020bc:	0018      	movs	r0, r3
 80020be:	46bd      	mov	sp, r7
 80020c0:	b002      	add	sp, #8
 80020c2:	bd80      	pop	{r7, pc}
 80020c4:	fffffeff 	.word	0xfffffeff
 80020c8:	40020000 	.word	0x40020000

080020cc <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b084      	sub	sp, #16
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020d4:	210f      	movs	r1, #15
 80020d6:	187b      	adds	r3, r7, r1
 80020d8:	2200      	movs	r2, #0
 80020da:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2225      	movs	r2, #37	@ 0x25
 80020e0:	5c9b      	ldrb	r3, [r3, r2]
 80020e2:	b2db      	uxtb	r3, r3
 80020e4:	2b02      	cmp	r3, #2
 80020e6:	d006      	beq.n	80020f6 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2204      	movs	r2, #4
 80020ec:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80020ee:	187b      	adds	r3, r7, r1
 80020f0:	2201      	movs	r2, #1
 80020f2:	701a      	strb	r2, [r3, #0]
 80020f4:	e049      	b.n	800218a <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	681a      	ldr	r2, [r3, #0]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	210e      	movs	r1, #14
 8002102:	438a      	bics	r2, r1
 8002104:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	681a      	ldr	r2, [r3, #0]
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	2101      	movs	r1, #1
 8002112:	438a      	bics	r2, r1
 8002114:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800211a:	681a      	ldr	r2, [r3, #0]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002120:	491d      	ldr	r1, [pc, #116]	@ (8002198 <HAL_DMA_Abort_IT+0xcc>)
 8002122:	400a      	ands	r2, r1
 8002124:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8002126:	4b1d      	ldr	r3, [pc, #116]	@ (800219c <HAL_DMA_Abort_IT+0xd0>)
 8002128:	6859      	ldr	r1, [r3, #4]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800212e:	221c      	movs	r2, #28
 8002130:	4013      	ands	r3, r2
 8002132:	2201      	movs	r2, #1
 8002134:	409a      	lsls	r2, r3
 8002136:	4b19      	ldr	r3, [pc, #100]	@ (800219c <HAL_DMA_Abort_IT+0xd0>)
 8002138:	430a      	orrs	r2, r1
 800213a:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002140:	687a      	ldr	r2, [r7, #4]
 8002142:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002144:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800214a:	2b00      	cmp	r3, #0
 800214c:	d00c      	beq.n	8002168 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002152:	681a      	ldr	r2, [r3, #0]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002158:	490f      	ldr	r1, [pc, #60]	@ (8002198 <HAL_DMA_Abort_IT+0xcc>)
 800215a:	400a      	ands	r2, r1
 800215c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002162:	687a      	ldr	r2, [r7, #4]
 8002164:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8002166:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2225      	movs	r2, #37	@ 0x25
 800216c:	2101      	movs	r1, #1
 800216e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2224      	movs	r2, #36	@ 0x24
 8002174:	2100      	movs	r1, #0
 8002176:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800217c:	2b00      	cmp	r3, #0
 800217e:	d004      	beq.n	800218a <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002184:	687a      	ldr	r2, [r7, #4]
 8002186:	0010      	movs	r0, r2
 8002188:	4798      	blx	r3
    }
  }
  return status;
 800218a:	230f      	movs	r3, #15
 800218c:	18fb      	adds	r3, r7, r3
 800218e:	781b      	ldrb	r3, [r3, #0]
}
 8002190:	0018      	movs	r0, r3
 8002192:	46bd      	mov	sp, r7
 8002194:	b004      	add	sp, #16
 8002196:	bd80      	pop	{r7, pc}
 8002198:	fffffeff 	.word	0xfffffeff
 800219c:	40020000 	.word	0x40020000

080021a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b086      	sub	sp, #24
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
 80021a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80021aa:	2300      	movs	r3, #0
 80021ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021ae:	e147      	b.n	8002440 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	2101      	movs	r1, #1
 80021b6:	697a      	ldr	r2, [r7, #20]
 80021b8:	4091      	lsls	r1, r2
 80021ba:	000a      	movs	r2, r1
 80021bc:	4013      	ands	r3, r2
 80021be:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d100      	bne.n	80021c8 <HAL_GPIO_Init+0x28>
 80021c6:	e138      	b.n	800243a <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	2203      	movs	r2, #3
 80021ce:	4013      	ands	r3, r2
 80021d0:	2b01      	cmp	r3, #1
 80021d2:	d005      	beq.n	80021e0 <HAL_GPIO_Init+0x40>
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	2203      	movs	r2, #3
 80021da:	4013      	ands	r3, r2
 80021dc:	2b02      	cmp	r3, #2
 80021de:	d130      	bne.n	8002242 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	689b      	ldr	r3, [r3, #8]
 80021e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80021e6:	697b      	ldr	r3, [r7, #20]
 80021e8:	005b      	lsls	r3, r3, #1
 80021ea:	2203      	movs	r2, #3
 80021ec:	409a      	lsls	r2, r3
 80021ee:	0013      	movs	r3, r2
 80021f0:	43da      	mvns	r2, r3
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	4013      	ands	r3, r2
 80021f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	68da      	ldr	r2, [r3, #12]
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	005b      	lsls	r3, r3, #1
 8002200:	409a      	lsls	r2, r3
 8002202:	0013      	movs	r3, r2
 8002204:	693a      	ldr	r2, [r7, #16]
 8002206:	4313      	orrs	r3, r2
 8002208:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	693a      	ldr	r2, [r7, #16]
 800220e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002216:	2201      	movs	r2, #1
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	409a      	lsls	r2, r3
 800221c:	0013      	movs	r3, r2
 800221e:	43da      	mvns	r2, r3
 8002220:	693b      	ldr	r3, [r7, #16]
 8002222:	4013      	ands	r3, r2
 8002224:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	091b      	lsrs	r3, r3, #4
 800222c:	2201      	movs	r2, #1
 800222e:	401a      	ands	r2, r3
 8002230:	697b      	ldr	r3, [r7, #20]
 8002232:	409a      	lsls	r2, r3
 8002234:	0013      	movs	r3, r2
 8002236:	693a      	ldr	r2, [r7, #16]
 8002238:	4313      	orrs	r3, r2
 800223a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	693a      	ldr	r2, [r7, #16]
 8002240:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	2203      	movs	r2, #3
 8002248:	4013      	ands	r3, r2
 800224a:	2b03      	cmp	r3, #3
 800224c:	d017      	beq.n	800227e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	68db      	ldr	r3, [r3, #12]
 8002252:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002254:	697b      	ldr	r3, [r7, #20]
 8002256:	005b      	lsls	r3, r3, #1
 8002258:	2203      	movs	r2, #3
 800225a:	409a      	lsls	r2, r3
 800225c:	0013      	movs	r3, r2
 800225e:	43da      	mvns	r2, r3
 8002260:	693b      	ldr	r3, [r7, #16]
 8002262:	4013      	ands	r3, r2
 8002264:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	689a      	ldr	r2, [r3, #8]
 800226a:	697b      	ldr	r3, [r7, #20]
 800226c:	005b      	lsls	r3, r3, #1
 800226e:	409a      	lsls	r2, r3
 8002270:	0013      	movs	r3, r2
 8002272:	693a      	ldr	r2, [r7, #16]
 8002274:	4313      	orrs	r3, r2
 8002276:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	693a      	ldr	r2, [r7, #16]
 800227c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	2203      	movs	r2, #3
 8002284:	4013      	ands	r3, r2
 8002286:	2b02      	cmp	r3, #2
 8002288:	d123      	bne.n	80022d2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800228a:	697b      	ldr	r3, [r7, #20]
 800228c:	08da      	lsrs	r2, r3, #3
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	3208      	adds	r2, #8
 8002292:	0092      	lsls	r2, r2, #2
 8002294:	58d3      	ldr	r3, [r2, r3]
 8002296:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002298:	697b      	ldr	r3, [r7, #20]
 800229a:	2207      	movs	r2, #7
 800229c:	4013      	ands	r3, r2
 800229e:	009b      	lsls	r3, r3, #2
 80022a0:	220f      	movs	r2, #15
 80022a2:	409a      	lsls	r2, r3
 80022a4:	0013      	movs	r3, r2
 80022a6:	43da      	mvns	r2, r3
 80022a8:	693b      	ldr	r3, [r7, #16]
 80022aa:	4013      	ands	r3, r2
 80022ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	691a      	ldr	r2, [r3, #16]
 80022b2:	697b      	ldr	r3, [r7, #20]
 80022b4:	2107      	movs	r1, #7
 80022b6:	400b      	ands	r3, r1
 80022b8:	009b      	lsls	r3, r3, #2
 80022ba:	409a      	lsls	r2, r3
 80022bc:	0013      	movs	r3, r2
 80022be:	693a      	ldr	r2, [r7, #16]
 80022c0:	4313      	orrs	r3, r2
 80022c2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	08da      	lsrs	r2, r3, #3
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	3208      	adds	r2, #8
 80022cc:	0092      	lsls	r2, r2, #2
 80022ce:	6939      	ldr	r1, [r7, #16]
 80022d0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	005b      	lsls	r3, r3, #1
 80022dc:	2203      	movs	r2, #3
 80022de:	409a      	lsls	r2, r3
 80022e0:	0013      	movs	r3, r2
 80022e2:	43da      	mvns	r2, r3
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	4013      	ands	r3, r2
 80022e8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	2203      	movs	r2, #3
 80022f0:	401a      	ands	r2, r3
 80022f2:	697b      	ldr	r3, [r7, #20]
 80022f4:	005b      	lsls	r3, r3, #1
 80022f6:	409a      	lsls	r2, r3
 80022f8:	0013      	movs	r3, r2
 80022fa:	693a      	ldr	r2, [r7, #16]
 80022fc:	4313      	orrs	r3, r2
 80022fe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	693a      	ldr	r2, [r7, #16]
 8002304:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	685a      	ldr	r2, [r3, #4]
 800230a:	23c0      	movs	r3, #192	@ 0xc0
 800230c:	029b      	lsls	r3, r3, #10
 800230e:	4013      	ands	r3, r2
 8002310:	d100      	bne.n	8002314 <HAL_GPIO_Init+0x174>
 8002312:	e092      	b.n	800243a <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8002314:	4a50      	ldr	r2, [pc, #320]	@ (8002458 <HAL_GPIO_Init+0x2b8>)
 8002316:	697b      	ldr	r3, [r7, #20]
 8002318:	089b      	lsrs	r3, r3, #2
 800231a:	3318      	adds	r3, #24
 800231c:	009b      	lsls	r3, r3, #2
 800231e:	589b      	ldr	r3, [r3, r2]
 8002320:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	2203      	movs	r2, #3
 8002326:	4013      	ands	r3, r2
 8002328:	00db      	lsls	r3, r3, #3
 800232a:	220f      	movs	r2, #15
 800232c:	409a      	lsls	r2, r3
 800232e:	0013      	movs	r3, r2
 8002330:	43da      	mvns	r2, r3
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	4013      	ands	r3, r2
 8002336:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8002338:	687a      	ldr	r2, [r7, #4]
 800233a:	23a0      	movs	r3, #160	@ 0xa0
 800233c:	05db      	lsls	r3, r3, #23
 800233e:	429a      	cmp	r2, r3
 8002340:	d013      	beq.n	800236a <HAL_GPIO_Init+0x1ca>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	4a45      	ldr	r2, [pc, #276]	@ (800245c <HAL_GPIO_Init+0x2bc>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d00d      	beq.n	8002366 <HAL_GPIO_Init+0x1c6>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	4a44      	ldr	r2, [pc, #272]	@ (8002460 <HAL_GPIO_Init+0x2c0>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d007      	beq.n	8002362 <HAL_GPIO_Init+0x1c2>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	4a43      	ldr	r2, [pc, #268]	@ (8002464 <HAL_GPIO_Init+0x2c4>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d101      	bne.n	800235e <HAL_GPIO_Init+0x1be>
 800235a:	2303      	movs	r3, #3
 800235c:	e006      	b.n	800236c <HAL_GPIO_Init+0x1cc>
 800235e:	2305      	movs	r3, #5
 8002360:	e004      	b.n	800236c <HAL_GPIO_Init+0x1cc>
 8002362:	2302      	movs	r3, #2
 8002364:	e002      	b.n	800236c <HAL_GPIO_Init+0x1cc>
 8002366:	2301      	movs	r3, #1
 8002368:	e000      	b.n	800236c <HAL_GPIO_Init+0x1cc>
 800236a:	2300      	movs	r3, #0
 800236c:	697a      	ldr	r2, [r7, #20]
 800236e:	2103      	movs	r1, #3
 8002370:	400a      	ands	r2, r1
 8002372:	00d2      	lsls	r2, r2, #3
 8002374:	4093      	lsls	r3, r2
 8002376:	693a      	ldr	r2, [r7, #16]
 8002378:	4313      	orrs	r3, r2
 800237a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 800237c:	4936      	ldr	r1, [pc, #216]	@ (8002458 <HAL_GPIO_Init+0x2b8>)
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	089b      	lsrs	r3, r3, #2
 8002382:	3318      	adds	r3, #24
 8002384:	009b      	lsls	r3, r3, #2
 8002386:	693a      	ldr	r2, [r7, #16]
 8002388:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800238a:	4b33      	ldr	r3, [pc, #204]	@ (8002458 <HAL_GPIO_Init+0x2b8>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	43da      	mvns	r2, r3
 8002394:	693b      	ldr	r3, [r7, #16]
 8002396:	4013      	ands	r3, r2
 8002398:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	685a      	ldr	r2, [r3, #4]
 800239e:	2380      	movs	r3, #128	@ 0x80
 80023a0:	035b      	lsls	r3, r3, #13
 80023a2:	4013      	ands	r3, r2
 80023a4:	d003      	beq.n	80023ae <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80023a6:	693a      	ldr	r2, [r7, #16]
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	4313      	orrs	r3, r2
 80023ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80023ae:	4b2a      	ldr	r3, [pc, #168]	@ (8002458 <HAL_GPIO_Init+0x2b8>)
 80023b0:	693a      	ldr	r2, [r7, #16]
 80023b2:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80023b4:	4b28      	ldr	r3, [pc, #160]	@ (8002458 <HAL_GPIO_Init+0x2b8>)
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	43da      	mvns	r2, r3
 80023be:	693b      	ldr	r3, [r7, #16]
 80023c0:	4013      	ands	r3, r2
 80023c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	685a      	ldr	r2, [r3, #4]
 80023c8:	2380      	movs	r3, #128	@ 0x80
 80023ca:	039b      	lsls	r3, r3, #14
 80023cc:	4013      	ands	r3, r2
 80023ce:	d003      	beq.n	80023d8 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80023d0:	693a      	ldr	r2, [r7, #16]
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	4313      	orrs	r3, r2
 80023d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80023d8:	4b1f      	ldr	r3, [pc, #124]	@ (8002458 <HAL_GPIO_Init+0x2b8>)
 80023da:	693a      	ldr	r2, [r7, #16]
 80023dc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80023de:	4a1e      	ldr	r2, [pc, #120]	@ (8002458 <HAL_GPIO_Init+0x2b8>)
 80023e0:	2384      	movs	r3, #132	@ 0x84
 80023e2:	58d3      	ldr	r3, [r2, r3]
 80023e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	43da      	mvns	r2, r3
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	4013      	ands	r3, r2
 80023ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	685a      	ldr	r2, [r3, #4]
 80023f4:	2380      	movs	r3, #128	@ 0x80
 80023f6:	029b      	lsls	r3, r3, #10
 80023f8:	4013      	ands	r3, r2
 80023fa:	d003      	beq.n	8002404 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80023fc:	693a      	ldr	r2, [r7, #16]
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	4313      	orrs	r3, r2
 8002402:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002404:	4914      	ldr	r1, [pc, #80]	@ (8002458 <HAL_GPIO_Init+0x2b8>)
 8002406:	2284      	movs	r2, #132	@ 0x84
 8002408:	693b      	ldr	r3, [r7, #16]
 800240a:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 800240c:	4a12      	ldr	r2, [pc, #72]	@ (8002458 <HAL_GPIO_Init+0x2b8>)
 800240e:	2380      	movs	r3, #128	@ 0x80
 8002410:	58d3      	ldr	r3, [r2, r3]
 8002412:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	43da      	mvns	r2, r3
 8002418:	693b      	ldr	r3, [r7, #16]
 800241a:	4013      	ands	r3, r2
 800241c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	685a      	ldr	r2, [r3, #4]
 8002422:	2380      	movs	r3, #128	@ 0x80
 8002424:	025b      	lsls	r3, r3, #9
 8002426:	4013      	ands	r3, r2
 8002428:	d003      	beq.n	8002432 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800242a:	693a      	ldr	r2, [r7, #16]
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	4313      	orrs	r3, r2
 8002430:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002432:	4909      	ldr	r1, [pc, #36]	@ (8002458 <HAL_GPIO_Init+0x2b8>)
 8002434:	2280      	movs	r2, #128	@ 0x80
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800243a:	697b      	ldr	r3, [r7, #20]
 800243c:	3301      	adds	r3, #1
 800243e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	681a      	ldr	r2, [r3, #0]
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	40da      	lsrs	r2, r3
 8002448:	1e13      	subs	r3, r2, #0
 800244a:	d000      	beq.n	800244e <HAL_GPIO_Init+0x2ae>
 800244c:	e6b0      	b.n	80021b0 <HAL_GPIO_Init+0x10>
  }
}
 800244e:	46c0      	nop			@ (mov r8, r8)
 8002450:	46c0      	nop			@ (mov r8, r8)
 8002452:	46bd      	mov	sp, r7
 8002454:	b006      	add	sp, #24
 8002456:	bd80      	pop	{r7, pc}
 8002458:	40021800 	.word	0x40021800
 800245c:	50000400 	.word	0x50000400
 8002460:	50000800 	.word	0x50000800
 8002464:	50000c00 	.word	0x50000c00

08002468 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b082      	sub	sp, #8
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
 8002470:	0008      	movs	r0, r1
 8002472:	0011      	movs	r1, r2
 8002474:	1cbb      	adds	r3, r7, #2
 8002476:	1c02      	adds	r2, r0, #0
 8002478:	801a      	strh	r2, [r3, #0]
 800247a:	1c7b      	adds	r3, r7, #1
 800247c:	1c0a      	adds	r2, r1, #0
 800247e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002480:	1c7b      	adds	r3, r7, #1
 8002482:	781b      	ldrb	r3, [r3, #0]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d004      	beq.n	8002492 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002488:	1cbb      	adds	r3, r7, #2
 800248a:	881a      	ldrh	r2, [r3, #0]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002490:	e003      	b.n	800249a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002492:	1cbb      	adds	r3, r7, #2
 8002494:	881a      	ldrh	r2, [r3, #0]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800249a:	46c0      	nop			@ (mov r8, r8)
 800249c:	46bd      	mov	sp, r7
 800249e:	b002      	add	sp, #8
 80024a0:	bd80      	pop	{r7, pc}
	...

080024a4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b082      	sub	sp, #8
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d101      	bne.n	80024b6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	e08f      	b.n	80025d6 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2241      	movs	r2, #65	@ 0x41
 80024ba:	5c9b      	ldrb	r3, [r3, r2]
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d107      	bne.n	80024d2 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2240      	movs	r2, #64	@ 0x40
 80024c6:	2100      	movs	r1, #0
 80024c8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	0018      	movs	r0, r3
 80024ce:	f7fe f913 	bl	80006f8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2241      	movs	r2, #65	@ 0x41
 80024d6:	2124      	movs	r1, #36	@ 0x24
 80024d8:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	681a      	ldr	r2, [r3, #0]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	2101      	movs	r1, #1
 80024e6:	438a      	bics	r2, r1
 80024e8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	685a      	ldr	r2, [r3, #4]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	493b      	ldr	r1, [pc, #236]	@ (80025e0 <HAL_I2C_Init+0x13c>)
 80024f4:	400a      	ands	r2, r1
 80024f6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	689a      	ldr	r2, [r3, #8]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4938      	ldr	r1, [pc, #224]	@ (80025e4 <HAL_I2C_Init+0x140>)
 8002504:	400a      	ands	r2, r1
 8002506:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	68db      	ldr	r3, [r3, #12]
 800250c:	2b01      	cmp	r3, #1
 800250e:	d108      	bne.n	8002522 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	689a      	ldr	r2, [r3, #8]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	2180      	movs	r1, #128	@ 0x80
 800251a:	0209      	lsls	r1, r1, #8
 800251c:	430a      	orrs	r2, r1
 800251e:	609a      	str	r2, [r3, #8]
 8002520:	e007      	b.n	8002532 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	689a      	ldr	r2, [r3, #8]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	2184      	movs	r1, #132	@ 0x84
 800252c:	0209      	lsls	r1, r1, #8
 800252e:	430a      	orrs	r2, r1
 8002530:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	68db      	ldr	r3, [r3, #12]
 8002536:	2b02      	cmp	r3, #2
 8002538:	d109      	bne.n	800254e <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	685a      	ldr	r2, [r3, #4]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	2180      	movs	r1, #128	@ 0x80
 8002546:	0109      	lsls	r1, r1, #4
 8002548:	430a      	orrs	r2, r1
 800254a:	605a      	str	r2, [r3, #4]
 800254c:	e007      	b.n	800255e <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	685a      	ldr	r2, [r3, #4]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4923      	ldr	r1, [pc, #140]	@ (80025e8 <HAL_I2C_Init+0x144>)
 800255a:	400a      	ands	r2, r1
 800255c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	685a      	ldr	r2, [r3, #4]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4920      	ldr	r1, [pc, #128]	@ (80025ec <HAL_I2C_Init+0x148>)
 800256a:	430a      	orrs	r2, r1
 800256c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	68da      	ldr	r2, [r3, #12]
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	491a      	ldr	r1, [pc, #104]	@ (80025e4 <HAL_I2C_Init+0x140>)
 800257a:	400a      	ands	r2, r1
 800257c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	691a      	ldr	r2, [r3, #16]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	695b      	ldr	r3, [r3, #20]
 8002586:	431a      	orrs	r2, r3
 8002588:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	699b      	ldr	r3, [r3, #24]
 800258e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	430a      	orrs	r2, r1
 8002596:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	69d9      	ldr	r1, [r3, #28]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6a1a      	ldr	r2, [r3, #32]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	430a      	orrs	r2, r1
 80025a6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	681a      	ldr	r2, [r3, #0]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	2101      	movs	r1, #1
 80025b4:	430a      	orrs	r2, r1
 80025b6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2200      	movs	r2, #0
 80025bc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2241      	movs	r2, #65	@ 0x41
 80025c2:	2120      	movs	r1, #32
 80025c4:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2200      	movs	r2, #0
 80025ca:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2242      	movs	r2, #66	@ 0x42
 80025d0:	2100      	movs	r1, #0
 80025d2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80025d4:	2300      	movs	r3, #0
}
 80025d6:	0018      	movs	r0, r3
 80025d8:	46bd      	mov	sp, r7
 80025da:	b002      	add	sp, #8
 80025dc:	bd80      	pop	{r7, pc}
 80025de:	46c0      	nop			@ (mov r8, r8)
 80025e0:	f0ffffff 	.word	0xf0ffffff
 80025e4:	ffff7fff 	.word	0xffff7fff
 80025e8:	fffff7ff 	.word	0xfffff7ff
 80025ec:	02008000 	.word	0x02008000

080025f0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b082      	sub	sp, #8
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
 80025f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2241      	movs	r2, #65	@ 0x41
 80025fe:	5c9b      	ldrb	r3, [r3, r2]
 8002600:	b2db      	uxtb	r3, r3
 8002602:	2b20      	cmp	r3, #32
 8002604:	d138      	bne.n	8002678 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2240      	movs	r2, #64	@ 0x40
 800260a:	5c9b      	ldrb	r3, [r3, r2]
 800260c:	2b01      	cmp	r3, #1
 800260e:	d101      	bne.n	8002614 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002610:	2302      	movs	r3, #2
 8002612:	e032      	b.n	800267a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2240      	movs	r2, #64	@ 0x40
 8002618:	2101      	movs	r1, #1
 800261a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2241      	movs	r2, #65	@ 0x41
 8002620:	2124      	movs	r1, #36	@ 0x24
 8002622:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	681a      	ldr	r2, [r3, #0]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	2101      	movs	r1, #1
 8002630:	438a      	bics	r2, r1
 8002632:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	681a      	ldr	r2, [r3, #0]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4911      	ldr	r1, [pc, #68]	@ (8002684 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8002640:	400a      	ands	r2, r1
 8002642:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	6819      	ldr	r1, [r3, #0]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	683a      	ldr	r2, [r7, #0]
 8002650:	430a      	orrs	r2, r1
 8002652:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	681a      	ldr	r2, [r3, #0]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	2101      	movs	r1, #1
 8002660:	430a      	orrs	r2, r1
 8002662:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2241      	movs	r2, #65	@ 0x41
 8002668:	2120      	movs	r1, #32
 800266a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2240      	movs	r2, #64	@ 0x40
 8002670:	2100      	movs	r1, #0
 8002672:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002674:	2300      	movs	r3, #0
 8002676:	e000      	b.n	800267a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002678:	2302      	movs	r3, #2
  }
}
 800267a:	0018      	movs	r0, r3
 800267c:	46bd      	mov	sp, r7
 800267e:	b002      	add	sp, #8
 8002680:	bd80      	pop	{r7, pc}
 8002682:	46c0      	nop			@ (mov r8, r8)
 8002684:	ffffefff 	.word	0xffffefff

08002688 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b084      	sub	sp, #16
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
 8002690:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2241      	movs	r2, #65	@ 0x41
 8002696:	5c9b      	ldrb	r3, [r3, r2]
 8002698:	b2db      	uxtb	r3, r3
 800269a:	2b20      	cmp	r3, #32
 800269c:	d139      	bne.n	8002712 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2240      	movs	r2, #64	@ 0x40
 80026a2:	5c9b      	ldrb	r3, [r3, r2]
 80026a4:	2b01      	cmp	r3, #1
 80026a6:	d101      	bne.n	80026ac <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80026a8:	2302      	movs	r3, #2
 80026aa:	e033      	b.n	8002714 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2240      	movs	r2, #64	@ 0x40
 80026b0:	2101      	movs	r1, #1
 80026b2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2241      	movs	r2, #65	@ 0x41
 80026b8:	2124      	movs	r1, #36	@ 0x24
 80026ba:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	681a      	ldr	r2, [r3, #0]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	2101      	movs	r1, #1
 80026c8:	438a      	bics	r2, r1
 80026ca:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	4a11      	ldr	r2, [pc, #68]	@ (800271c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80026d8:	4013      	ands	r3, r2
 80026da:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	021b      	lsls	r3, r3, #8
 80026e0:	68fa      	ldr	r2, [r7, #12]
 80026e2:	4313      	orrs	r3, r2
 80026e4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	68fa      	ldr	r2, [r7, #12]
 80026ec:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	681a      	ldr	r2, [r3, #0]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	2101      	movs	r1, #1
 80026fa:	430a      	orrs	r2, r1
 80026fc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2241      	movs	r2, #65	@ 0x41
 8002702:	2120      	movs	r1, #32
 8002704:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2240      	movs	r2, #64	@ 0x40
 800270a:	2100      	movs	r1, #0
 800270c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800270e:	2300      	movs	r3, #0
 8002710:	e000      	b.n	8002714 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002712:	2302      	movs	r3, #2
  }
}
 8002714:	0018      	movs	r0, r3
 8002716:	46bd      	mov	sp, r7
 8002718:	b004      	add	sp, #16
 800271a:	bd80      	pop	{r7, pc}
 800271c:	fffff0ff 	.word	0xfffff0ff

08002720 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b084      	sub	sp, #16
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d101      	bne.n	8002732 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	e03d      	b.n	80027ae <HAL_IWDG_Init+0x8e>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a20      	ldr	r2, [pc, #128]	@ (80027b8 <HAL_IWDG_Init+0x98>)
 8002738:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a1f      	ldr	r2, [pc, #124]	@ (80027bc <HAL_IWDG_Init+0x9c>)
 8002740:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	687a      	ldr	r2, [r7, #4]
 8002748:	6852      	ldr	r2, [r2, #4]
 800274a:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	687a      	ldr	r2, [r7, #4]
 8002752:	6892      	ldr	r2, [r2, #8]
 8002754:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8002756:	f7fe fd6d 	bl	8001234 <HAL_GetTick>
 800275a:	0003      	movs	r3, r0
 800275c:	60fb      	str	r3, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800275e:	e00e      	b.n	800277e <HAL_IWDG_Init+0x5e>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8002760:	f7fe fd68 	bl	8001234 <HAL_GetTick>
 8002764:	0002      	movs	r2, r0
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	1ad3      	subs	r3, r2, r3
 800276a:	2b31      	cmp	r3, #49	@ 0x31
 800276c:	d907      	bls.n	800277e <HAL_IWDG_Init+0x5e>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	68db      	ldr	r3, [r3, #12]
 8002774:	2207      	movs	r2, #7
 8002776:	4013      	ands	r3, r2
 8002778:	d001      	beq.n	800277e <HAL_IWDG_Init+0x5e>
      {
        return HAL_TIMEOUT;
 800277a:	2303      	movs	r3, #3
 800277c:	e017      	b.n	80027ae <HAL_IWDG_Init+0x8e>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	68db      	ldr	r3, [r3, #12]
 8002784:	2207      	movs	r2, #7
 8002786:	4013      	ands	r3, r2
 8002788:	d1ea      	bne.n	8002760 <HAL_IWDG_Init+0x40>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	691a      	ldr	r2, [r3, #16]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	68db      	ldr	r3, [r3, #12]
 8002794:	429a      	cmp	r2, r3
 8002796:	d005      	beq.n	80027a4 <HAL_IWDG_Init+0x84>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	687a      	ldr	r2, [r7, #4]
 800279e:	68d2      	ldr	r2, [r2, #12]
 80027a0:	611a      	str	r2, [r3, #16]
 80027a2:	e003      	b.n	80027ac <HAL_IWDG_Init+0x8c>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a05      	ldr	r2, [pc, #20]	@ (80027c0 <HAL_IWDG_Init+0xa0>)
 80027aa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80027ac:	2300      	movs	r3, #0
}
 80027ae:	0018      	movs	r0, r3
 80027b0:	46bd      	mov	sp, r7
 80027b2:	b004      	add	sp, #16
 80027b4:	bd80      	pop	{r7, pc}
 80027b6:	46c0      	nop			@ (mov r8, r8)
 80027b8:	0000cccc 	.word	0x0000cccc
 80027bc:	00005555 	.word	0x00005555
 80027c0:	0000aaaa 	.word	0x0000aaaa

080027c4 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b082      	sub	sp, #8
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a03      	ldr	r2, [pc, #12]	@ (80027e0 <HAL_IWDG_Refresh+0x1c>)
 80027d2:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80027d4:	2300      	movs	r3, #0
}
 80027d6:	0018      	movs	r0, r3
 80027d8:	46bd      	mov	sp, r7
 80027da:	b002      	add	sp, #8
 80027dc:	bd80      	pop	{r7, pc}
 80027de:	46c0      	nop			@ (mov r8, r8)
 80027e0:	0000aaaa 	.word	0x0000aaaa

080027e4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b084      	sub	sp, #16
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80027ec:	4b19      	ldr	r3, [pc, #100]	@ (8002854 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a19      	ldr	r2, [pc, #100]	@ (8002858 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80027f2:	4013      	ands	r3, r2
 80027f4:	0019      	movs	r1, r3
 80027f6:	4b17      	ldr	r3, [pc, #92]	@ (8002854 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80027f8:	687a      	ldr	r2, [r7, #4]
 80027fa:	430a      	orrs	r2, r1
 80027fc:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80027fe:	687a      	ldr	r2, [r7, #4]
 8002800:	2380      	movs	r3, #128	@ 0x80
 8002802:	009b      	lsls	r3, r3, #2
 8002804:	429a      	cmp	r2, r3
 8002806:	d11f      	bne.n	8002848 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8002808:	4b14      	ldr	r3, [pc, #80]	@ (800285c <HAL_PWREx_ControlVoltageScaling+0x78>)
 800280a:	681a      	ldr	r2, [r3, #0]
 800280c:	0013      	movs	r3, r2
 800280e:	005b      	lsls	r3, r3, #1
 8002810:	189b      	adds	r3, r3, r2
 8002812:	005b      	lsls	r3, r3, #1
 8002814:	4912      	ldr	r1, [pc, #72]	@ (8002860 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8002816:	0018      	movs	r0, r3
 8002818:	f7fd fcce 	bl	80001b8 <__udivsi3>
 800281c:	0003      	movs	r3, r0
 800281e:	3301      	adds	r3, #1
 8002820:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002822:	e008      	b.n	8002836 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d003      	beq.n	8002832 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	3b01      	subs	r3, #1
 800282e:	60fb      	str	r3, [r7, #12]
 8002830:	e001      	b.n	8002836 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8002832:	2303      	movs	r3, #3
 8002834:	e009      	b.n	800284a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002836:	4b07      	ldr	r3, [pc, #28]	@ (8002854 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002838:	695a      	ldr	r2, [r3, #20]
 800283a:	2380      	movs	r3, #128	@ 0x80
 800283c:	00db      	lsls	r3, r3, #3
 800283e:	401a      	ands	r2, r3
 8002840:	2380      	movs	r3, #128	@ 0x80
 8002842:	00db      	lsls	r3, r3, #3
 8002844:	429a      	cmp	r2, r3
 8002846:	d0ed      	beq.n	8002824 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8002848:	2300      	movs	r3, #0
}
 800284a:	0018      	movs	r0, r3
 800284c:	46bd      	mov	sp, r7
 800284e:	b004      	add	sp, #16
 8002850:	bd80      	pop	{r7, pc}
 8002852:	46c0      	nop			@ (mov r8, r8)
 8002854:	40007000 	.word	0x40007000
 8002858:	fffff9ff 	.word	0xfffff9ff
 800285c:	20000000 	.word	0x20000000
 8002860:	000f4240 	.word	0x000f4240

08002864 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b088      	sub	sp, #32
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d101      	bne.n	8002876 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	e2f3      	b.n	8002e5e <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	2201      	movs	r2, #1
 800287c:	4013      	ands	r3, r2
 800287e:	d100      	bne.n	8002882 <HAL_RCC_OscConfig+0x1e>
 8002880:	e07c      	b.n	800297c <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002882:	4bc3      	ldr	r3, [pc, #780]	@ (8002b90 <HAL_RCC_OscConfig+0x32c>)
 8002884:	689b      	ldr	r3, [r3, #8]
 8002886:	2238      	movs	r2, #56	@ 0x38
 8002888:	4013      	ands	r3, r2
 800288a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800288c:	4bc0      	ldr	r3, [pc, #768]	@ (8002b90 <HAL_RCC_OscConfig+0x32c>)
 800288e:	68db      	ldr	r3, [r3, #12]
 8002890:	2203      	movs	r2, #3
 8002892:	4013      	ands	r3, r2
 8002894:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8002896:	69bb      	ldr	r3, [r7, #24]
 8002898:	2b10      	cmp	r3, #16
 800289a:	d102      	bne.n	80028a2 <HAL_RCC_OscConfig+0x3e>
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	2b03      	cmp	r3, #3
 80028a0:	d002      	beq.n	80028a8 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80028a2:	69bb      	ldr	r3, [r7, #24]
 80028a4:	2b08      	cmp	r3, #8
 80028a6:	d10b      	bne.n	80028c0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028a8:	4bb9      	ldr	r3, [pc, #740]	@ (8002b90 <HAL_RCC_OscConfig+0x32c>)
 80028aa:	681a      	ldr	r2, [r3, #0]
 80028ac:	2380      	movs	r3, #128	@ 0x80
 80028ae:	029b      	lsls	r3, r3, #10
 80028b0:	4013      	ands	r3, r2
 80028b2:	d062      	beq.n	800297a <HAL_RCC_OscConfig+0x116>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d15e      	bne.n	800297a <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80028bc:	2301      	movs	r3, #1
 80028be:	e2ce      	b.n	8002e5e <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	685a      	ldr	r2, [r3, #4]
 80028c4:	2380      	movs	r3, #128	@ 0x80
 80028c6:	025b      	lsls	r3, r3, #9
 80028c8:	429a      	cmp	r2, r3
 80028ca:	d107      	bne.n	80028dc <HAL_RCC_OscConfig+0x78>
 80028cc:	4bb0      	ldr	r3, [pc, #704]	@ (8002b90 <HAL_RCC_OscConfig+0x32c>)
 80028ce:	681a      	ldr	r2, [r3, #0]
 80028d0:	4baf      	ldr	r3, [pc, #700]	@ (8002b90 <HAL_RCC_OscConfig+0x32c>)
 80028d2:	2180      	movs	r1, #128	@ 0x80
 80028d4:	0249      	lsls	r1, r1, #9
 80028d6:	430a      	orrs	r2, r1
 80028d8:	601a      	str	r2, [r3, #0]
 80028da:	e020      	b.n	800291e <HAL_RCC_OscConfig+0xba>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	685a      	ldr	r2, [r3, #4]
 80028e0:	23a0      	movs	r3, #160	@ 0xa0
 80028e2:	02db      	lsls	r3, r3, #11
 80028e4:	429a      	cmp	r2, r3
 80028e6:	d10e      	bne.n	8002906 <HAL_RCC_OscConfig+0xa2>
 80028e8:	4ba9      	ldr	r3, [pc, #676]	@ (8002b90 <HAL_RCC_OscConfig+0x32c>)
 80028ea:	681a      	ldr	r2, [r3, #0]
 80028ec:	4ba8      	ldr	r3, [pc, #672]	@ (8002b90 <HAL_RCC_OscConfig+0x32c>)
 80028ee:	2180      	movs	r1, #128	@ 0x80
 80028f0:	02c9      	lsls	r1, r1, #11
 80028f2:	430a      	orrs	r2, r1
 80028f4:	601a      	str	r2, [r3, #0]
 80028f6:	4ba6      	ldr	r3, [pc, #664]	@ (8002b90 <HAL_RCC_OscConfig+0x32c>)
 80028f8:	681a      	ldr	r2, [r3, #0]
 80028fa:	4ba5      	ldr	r3, [pc, #660]	@ (8002b90 <HAL_RCC_OscConfig+0x32c>)
 80028fc:	2180      	movs	r1, #128	@ 0x80
 80028fe:	0249      	lsls	r1, r1, #9
 8002900:	430a      	orrs	r2, r1
 8002902:	601a      	str	r2, [r3, #0]
 8002904:	e00b      	b.n	800291e <HAL_RCC_OscConfig+0xba>
 8002906:	4ba2      	ldr	r3, [pc, #648]	@ (8002b90 <HAL_RCC_OscConfig+0x32c>)
 8002908:	681a      	ldr	r2, [r3, #0]
 800290a:	4ba1      	ldr	r3, [pc, #644]	@ (8002b90 <HAL_RCC_OscConfig+0x32c>)
 800290c:	49a1      	ldr	r1, [pc, #644]	@ (8002b94 <HAL_RCC_OscConfig+0x330>)
 800290e:	400a      	ands	r2, r1
 8002910:	601a      	str	r2, [r3, #0]
 8002912:	4b9f      	ldr	r3, [pc, #636]	@ (8002b90 <HAL_RCC_OscConfig+0x32c>)
 8002914:	681a      	ldr	r2, [r3, #0]
 8002916:	4b9e      	ldr	r3, [pc, #632]	@ (8002b90 <HAL_RCC_OscConfig+0x32c>)
 8002918:	499f      	ldr	r1, [pc, #636]	@ (8002b98 <HAL_RCC_OscConfig+0x334>)
 800291a:	400a      	ands	r2, r1
 800291c:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d014      	beq.n	8002950 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002926:	f7fe fc85 	bl	8001234 <HAL_GetTick>
 800292a:	0003      	movs	r3, r0
 800292c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800292e:	e008      	b.n	8002942 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002930:	f7fe fc80 	bl	8001234 <HAL_GetTick>
 8002934:	0002      	movs	r2, r0
 8002936:	693b      	ldr	r3, [r7, #16]
 8002938:	1ad3      	subs	r3, r2, r3
 800293a:	2b64      	cmp	r3, #100	@ 0x64
 800293c:	d901      	bls.n	8002942 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 800293e:	2303      	movs	r3, #3
 8002940:	e28d      	b.n	8002e5e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002942:	4b93      	ldr	r3, [pc, #588]	@ (8002b90 <HAL_RCC_OscConfig+0x32c>)
 8002944:	681a      	ldr	r2, [r3, #0]
 8002946:	2380      	movs	r3, #128	@ 0x80
 8002948:	029b      	lsls	r3, r3, #10
 800294a:	4013      	ands	r3, r2
 800294c:	d0f0      	beq.n	8002930 <HAL_RCC_OscConfig+0xcc>
 800294e:	e015      	b.n	800297c <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002950:	f7fe fc70 	bl	8001234 <HAL_GetTick>
 8002954:	0003      	movs	r3, r0
 8002956:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002958:	e008      	b.n	800296c <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800295a:	f7fe fc6b 	bl	8001234 <HAL_GetTick>
 800295e:	0002      	movs	r2, r0
 8002960:	693b      	ldr	r3, [r7, #16]
 8002962:	1ad3      	subs	r3, r2, r3
 8002964:	2b64      	cmp	r3, #100	@ 0x64
 8002966:	d901      	bls.n	800296c <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002968:	2303      	movs	r3, #3
 800296a:	e278      	b.n	8002e5e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800296c:	4b88      	ldr	r3, [pc, #544]	@ (8002b90 <HAL_RCC_OscConfig+0x32c>)
 800296e:	681a      	ldr	r2, [r3, #0]
 8002970:	2380      	movs	r3, #128	@ 0x80
 8002972:	029b      	lsls	r3, r3, #10
 8002974:	4013      	ands	r3, r2
 8002976:	d1f0      	bne.n	800295a <HAL_RCC_OscConfig+0xf6>
 8002978:	e000      	b.n	800297c <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800297a:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	2202      	movs	r2, #2
 8002982:	4013      	ands	r3, r2
 8002984:	d100      	bne.n	8002988 <HAL_RCC_OscConfig+0x124>
 8002986:	e099      	b.n	8002abc <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002988:	4b81      	ldr	r3, [pc, #516]	@ (8002b90 <HAL_RCC_OscConfig+0x32c>)
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	2238      	movs	r2, #56	@ 0x38
 800298e:	4013      	ands	r3, r2
 8002990:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002992:	4b7f      	ldr	r3, [pc, #508]	@ (8002b90 <HAL_RCC_OscConfig+0x32c>)
 8002994:	68db      	ldr	r3, [r3, #12]
 8002996:	2203      	movs	r2, #3
 8002998:	4013      	ands	r3, r2
 800299a:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 800299c:	69bb      	ldr	r3, [r7, #24]
 800299e:	2b10      	cmp	r3, #16
 80029a0:	d102      	bne.n	80029a8 <HAL_RCC_OscConfig+0x144>
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	2b02      	cmp	r3, #2
 80029a6:	d002      	beq.n	80029ae <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80029a8:	69bb      	ldr	r3, [r7, #24]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d135      	bne.n	8002a1a <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80029ae:	4b78      	ldr	r3, [pc, #480]	@ (8002b90 <HAL_RCC_OscConfig+0x32c>)
 80029b0:	681a      	ldr	r2, [r3, #0]
 80029b2:	2380      	movs	r3, #128	@ 0x80
 80029b4:	00db      	lsls	r3, r3, #3
 80029b6:	4013      	ands	r3, r2
 80029b8:	d005      	beq.n	80029c6 <HAL_RCC_OscConfig+0x162>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	68db      	ldr	r3, [r3, #12]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d101      	bne.n	80029c6 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	e24b      	b.n	8002e5e <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029c6:	4b72      	ldr	r3, [pc, #456]	@ (8002b90 <HAL_RCC_OscConfig+0x32c>)
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	4a74      	ldr	r2, [pc, #464]	@ (8002b9c <HAL_RCC_OscConfig+0x338>)
 80029cc:	4013      	ands	r3, r2
 80029ce:	0019      	movs	r1, r3
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	695b      	ldr	r3, [r3, #20]
 80029d4:	021a      	lsls	r2, r3, #8
 80029d6:	4b6e      	ldr	r3, [pc, #440]	@ (8002b90 <HAL_RCC_OscConfig+0x32c>)
 80029d8:	430a      	orrs	r2, r1
 80029da:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80029dc:	69bb      	ldr	r3, [r7, #24]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d112      	bne.n	8002a08 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80029e2:	4b6b      	ldr	r3, [pc, #428]	@ (8002b90 <HAL_RCC_OscConfig+0x32c>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a6e      	ldr	r2, [pc, #440]	@ (8002ba0 <HAL_RCC_OscConfig+0x33c>)
 80029e8:	4013      	ands	r3, r2
 80029ea:	0019      	movs	r1, r3
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	691a      	ldr	r2, [r3, #16]
 80029f0:	4b67      	ldr	r3, [pc, #412]	@ (8002b90 <HAL_RCC_OscConfig+0x32c>)
 80029f2:	430a      	orrs	r2, r1
 80029f4:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80029f6:	4b66      	ldr	r3, [pc, #408]	@ (8002b90 <HAL_RCC_OscConfig+0x32c>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	0adb      	lsrs	r3, r3, #11
 80029fc:	2207      	movs	r2, #7
 80029fe:	4013      	ands	r3, r2
 8002a00:	4a68      	ldr	r2, [pc, #416]	@ (8002ba4 <HAL_RCC_OscConfig+0x340>)
 8002a02:	40da      	lsrs	r2, r3
 8002a04:	4b68      	ldr	r3, [pc, #416]	@ (8002ba8 <HAL_RCC_OscConfig+0x344>)
 8002a06:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002a08:	4b68      	ldr	r3, [pc, #416]	@ (8002bac <HAL_RCC_OscConfig+0x348>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	0018      	movs	r0, r3
 8002a0e:	f7fe fbb5 	bl	800117c <HAL_InitTick>
 8002a12:	1e03      	subs	r3, r0, #0
 8002a14:	d051      	beq.n	8002aba <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8002a16:	2301      	movs	r3, #1
 8002a18:	e221      	b.n	8002e5e <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	68db      	ldr	r3, [r3, #12]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d030      	beq.n	8002a84 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002a22:	4b5b      	ldr	r3, [pc, #364]	@ (8002b90 <HAL_RCC_OscConfig+0x32c>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a5e      	ldr	r2, [pc, #376]	@ (8002ba0 <HAL_RCC_OscConfig+0x33c>)
 8002a28:	4013      	ands	r3, r2
 8002a2a:	0019      	movs	r1, r3
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	691a      	ldr	r2, [r3, #16]
 8002a30:	4b57      	ldr	r3, [pc, #348]	@ (8002b90 <HAL_RCC_OscConfig+0x32c>)
 8002a32:	430a      	orrs	r2, r1
 8002a34:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8002a36:	4b56      	ldr	r3, [pc, #344]	@ (8002b90 <HAL_RCC_OscConfig+0x32c>)
 8002a38:	681a      	ldr	r2, [r3, #0]
 8002a3a:	4b55      	ldr	r3, [pc, #340]	@ (8002b90 <HAL_RCC_OscConfig+0x32c>)
 8002a3c:	2180      	movs	r1, #128	@ 0x80
 8002a3e:	0049      	lsls	r1, r1, #1
 8002a40:	430a      	orrs	r2, r1
 8002a42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a44:	f7fe fbf6 	bl	8001234 <HAL_GetTick>
 8002a48:	0003      	movs	r3, r0
 8002a4a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a4c:	e008      	b.n	8002a60 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a4e:	f7fe fbf1 	bl	8001234 <HAL_GetTick>
 8002a52:	0002      	movs	r2, r0
 8002a54:	693b      	ldr	r3, [r7, #16]
 8002a56:	1ad3      	subs	r3, r2, r3
 8002a58:	2b02      	cmp	r3, #2
 8002a5a:	d901      	bls.n	8002a60 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002a5c:	2303      	movs	r3, #3
 8002a5e:	e1fe      	b.n	8002e5e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a60:	4b4b      	ldr	r3, [pc, #300]	@ (8002b90 <HAL_RCC_OscConfig+0x32c>)
 8002a62:	681a      	ldr	r2, [r3, #0]
 8002a64:	2380      	movs	r3, #128	@ 0x80
 8002a66:	00db      	lsls	r3, r3, #3
 8002a68:	4013      	ands	r3, r2
 8002a6a:	d0f0      	beq.n	8002a4e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a6c:	4b48      	ldr	r3, [pc, #288]	@ (8002b90 <HAL_RCC_OscConfig+0x32c>)
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	4a4a      	ldr	r2, [pc, #296]	@ (8002b9c <HAL_RCC_OscConfig+0x338>)
 8002a72:	4013      	ands	r3, r2
 8002a74:	0019      	movs	r1, r3
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	695b      	ldr	r3, [r3, #20]
 8002a7a:	021a      	lsls	r2, r3, #8
 8002a7c:	4b44      	ldr	r3, [pc, #272]	@ (8002b90 <HAL_RCC_OscConfig+0x32c>)
 8002a7e:	430a      	orrs	r2, r1
 8002a80:	605a      	str	r2, [r3, #4]
 8002a82:	e01b      	b.n	8002abc <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8002a84:	4b42      	ldr	r3, [pc, #264]	@ (8002b90 <HAL_RCC_OscConfig+0x32c>)
 8002a86:	681a      	ldr	r2, [r3, #0]
 8002a88:	4b41      	ldr	r3, [pc, #260]	@ (8002b90 <HAL_RCC_OscConfig+0x32c>)
 8002a8a:	4949      	ldr	r1, [pc, #292]	@ (8002bb0 <HAL_RCC_OscConfig+0x34c>)
 8002a8c:	400a      	ands	r2, r1
 8002a8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a90:	f7fe fbd0 	bl	8001234 <HAL_GetTick>
 8002a94:	0003      	movs	r3, r0
 8002a96:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002a98:	e008      	b.n	8002aac <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a9a:	f7fe fbcb 	bl	8001234 <HAL_GetTick>
 8002a9e:	0002      	movs	r2, r0
 8002aa0:	693b      	ldr	r3, [r7, #16]
 8002aa2:	1ad3      	subs	r3, r2, r3
 8002aa4:	2b02      	cmp	r3, #2
 8002aa6:	d901      	bls.n	8002aac <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002aa8:	2303      	movs	r3, #3
 8002aaa:	e1d8      	b.n	8002e5e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002aac:	4b38      	ldr	r3, [pc, #224]	@ (8002b90 <HAL_RCC_OscConfig+0x32c>)
 8002aae:	681a      	ldr	r2, [r3, #0]
 8002ab0:	2380      	movs	r3, #128	@ 0x80
 8002ab2:	00db      	lsls	r3, r3, #3
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	d1f0      	bne.n	8002a9a <HAL_RCC_OscConfig+0x236>
 8002ab8:	e000      	b.n	8002abc <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002aba:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	2208      	movs	r2, #8
 8002ac2:	4013      	ands	r3, r2
 8002ac4:	d047      	beq.n	8002b56 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002ac6:	4b32      	ldr	r3, [pc, #200]	@ (8002b90 <HAL_RCC_OscConfig+0x32c>)
 8002ac8:	689b      	ldr	r3, [r3, #8]
 8002aca:	2238      	movs	r2, #56	@ 0x38
 8002acc:	4013      	ands	r3, r2
 8002ace:	2b18      	cmp	r3, #24
 8002ad0:	d10a      	bne.n	8002ae8 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8002ad2:	4b2f      	ldr	r3, [pc, #188]	@ (8002b90 <HAL_RCC_OscConfig+0x32c>)
 8002ad4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ad6:	2202      	movs	r2, #2
 8002ad8:	4013      	ands	r3, r2
 8002ada:	d03c      	beq.n	8002b56 <HAL_RCC_OscConfig+0x2f2>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	699b      	ldr	r3, [r3, #24]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d138      	bne.n	8002b56 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	e1ba      	b.n	8002e5e <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	699b      	ldr	r3, [r3, #24]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d019      	beq.n	8002b24 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8002af0:	4b27      	ldr	r3, [pc, #156]	@ (8002b90 <HAL_RCC_OscConfig+0x32c>)
 8002af2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002af4:	4b26      	ldr	r3, [pc, #152]	@ (8002b90 <HAL_RCC_OscConfig+0x32c>)
 8002af6:	2101      	movs	r1, #1
 8002af8:	430a      	orrs	r2, r1
 8002afa:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002afc:	f7fe fb9a 	bl	8001234 <HAL_GetTick>
 8002b00:	0003      	movs	r3, r0
 8002b02:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002b04:	e008      	b.n	8002b18 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b06:	f7fe fb95 	bl	8001234 <HAL_GetTick>
 8002b0a:	0002      	movs	r2, r0
 8002b0c:	693b      	ldr	r3, [r7, #16]
 8002b0e:	1ad3      	subs	r3, r2, r3
 8002b10:	2b02      	cmp	r3, #2
 8002b12:	d901      	bls.n	8002b18 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8002b14:	2303      	movs	r3, #3
 8002b16:	e1a2      	b.n	8002e5e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002b18:	4b1d      	ldr	r3, [pc, #116]	@ (8002b90 <HAL_RCC_OscConfig+0x32c>)
 8002b1a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b1c:	2202      	movs	r2, #2
 8002b1e:	4013      	ands	r3, r2
 8002b20:	d0f1      	beq.n	8002b06 <HAL_RCC_OscConfig+0x2a2>
 8002b22:	e018      	b.n	8002b56 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8002b24:	4b1a      	ldr	r3, [pc, #104]	@ (8002b90 <HAL_RCC_OscConfig+0x32c>)
 8002b26:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002b28:	4b19      	ldr	r3, [pc, #100]	@ (8002b90 <HAL_RCC_OscConfig+0x32c>)
 8002b2a:	2101      	movs	r1, #1
 8002b2c:	438a      	bics	r2, r1
 8002b2e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b30:	f7fe fb80 	bl	8001234 <HAL_GetTick>
 8002b34:	0003      	movs	r3, r0
 8002b36:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002b38:	e008      	b.n	8002b4c <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b3a:	f7fe fb7b 	bl	8001234 <HAL_GetTick>
 8002b3e:	0002      	movs	r2, r0
 8002b40:	693b      	ldr	r3, [r7, #16]
 8002b42:	1ad3      	subs	r3, r2, r3
 8002b44:	2b02      	cmp	r3, #2
 8002b46:	d901      	bls.n	8002b4c <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8002b48:	2303      	movs	r3, #3
 8002b4a:	e188      	b.n	8002e5e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002b4c:	4b10      	ldr	r3, [pc, #64]	@ (8002b90 <HAL_RCC_OscConfig+0x32c>)
 8002b4e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b50:	2202      	movs	r2, #2
 8002b52:	4013      	ands	r3, r2
 8002b54:	d1f1      	bne.n	8002b3a <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	2204      	movs	r2, #4
 8002b5c:	4013      	ands	r3, r2
 8002b5e:	d100      	bne.n	8002b62 <HAL_RCC_OscConfig+0x2fe>
 8002b60:	e0c6      	b.n	8002cf0 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b62:	231f      	movs	r3, #31
 8002b64:	18fb      	adds	r3, r7, r3
 8002b66:	2200      	movs	r2, #0
 8002b68:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002b6a:	4b09      	ldr	r3, [pc, #36]	@ (8002b90 <HAL_RCC_OscConfig+0x32c>)
 8002b6c:	689b      	ldr	r3, [r3, #8]
 8002b6e:	2238      	movs	r2, #56	@ 0x38
 8002b70:	4013      	ands	r3, r2
 8002b72:	2b20      	cmp	r3, #32
 8002b74:	d11e      	bne.n	8002bb4 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8002b76:	4b06      	ldr	r3, [pc, #24]	@ (8002b90 <HAL_RCC_OscConfig+0x32c>)
 8002b78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b7a:	2202      	movs	r2, #2
 8002b7c:	4013      	ands	r3, r2
 8002b7e:	d100      	bne.n	8002b82 <HAL_RCC_OscConfig+0x31e>
 8002b80:	e0b6      	b.n	8002cf0 <HAL_RCC_OscConfig+0x48c>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d000      	beq.n	8002b8c <HAL_RCC_OscConfig+0x328>
 8002b8a:	e0b1      	b.n	8002cf0 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	e166      	b.n	8002e5e <HAL_RCC_OscConfig+0x5fa>
 8002b90:	40021000 	.word	0x40021000
 8002b94:	fffeffff 	.word	0xfffeffff
 8002b98:	fffbffff 	.word	0xfffbffff
 8002b9c:	ffff80ff 	.word	0xffff80ff
 8002ba0:	ffffc7ff 	.word	0xffffc7ff
 8002ba4:	00f42400 	.word	0x00f42400
 8002ba8:	20000000 	.word	0x20000000
 8002bac:	20000004 	.word	0x20000004
 8002bb0:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002bb4:	4bac      	ldr	r3, [pc, #688]	@ (8002e68 <HAL_RCC_OscConfig+0x604>)
 8002bb6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002bb8:	2380      	movs	r3, #128	@ 0x80
 8002bba:	055b      	lsls	r3, r3, #21
 8002bbc:	4013      	ands	r3, r2
 8002bbe:	d101      	bne.n	8002bc4 <HAL_RCC_OscConfig+0x360>
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	e000      	b.n	8002bc6 <HAL_RCC_OscConfig+0x362>
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d011      	beq.n	8002bee <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8002bca:	4ba7      	ldr	r3, [pc, #668]	@ (8002e68 <HAL_RCC_OscConfig+0x604>)
 8002bcc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002bce:	4ba6      	ldr	r3, [pc, #664]	@ (8002e68 <HAL_RCC_OscConfig+0x604>)
 8002bd0:	2180      	movs	r1, #128	@ 0x80
 8002bd2:	0549      	lsls	r1, r1, #21
 8002bd4:	430a      	orrs	r2, r1
 8002bd6:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002bd8:	4ba3      	ldr	r3, [pc, #652]	@ (8002e68 <HAL_RCC_OscConfig+0x604>)
 8002bda:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002bdc:	2380      	movs	r3, #128	@ 0x80
 8002bde:	055b      	lsls	r3, r3, #21
 8002be0:	4013      	ands	r3, r2
 8002be2:	60fb      	str	r3, [r7, #12]
 8002be4:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8002be6:	231f      	movs	r3, #31
 8002be8:	18fb      	adds	r3, r7, r3
 8002bea:	2201      	movs	r2, #1
 8002bec:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002bee:	4b9f      	ldr	r3, [pc, #636]	@ (8002e6c <HAL_RCC_OscConfig+0x608>)
 8002bf0:	681a      	ldr	r2, [r3, #0]
 8002bf2:	2380      	movs	r3, #128	@ 0x80
 8002bf4:	005b      	lsls	r3, r3, #1
 8002bf6:	4013      	ands	r3, r2
 8002bf8:	d11a      	bne.n	8002c30 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002bfa:	4b9c      	ldr	r3, [pc, #624]	@ (8002e6c <HAL_RCC_OscConfig+0x608>)
 8002bfc:	681a      	ldr	r2, [r3, #0]
 8002bfe:	4b9b      	ldr	r3, [pc, #620]	@ (8002e6c <HAL_RCC_OscConfig+0x608>)
 8002c00:	2180      	movs	r1, #128	@ 0x80
 8002c02:	0049      	lsls	r1, r1, #1
 8002c04:	430a      	orrs	r2, r1
 8002c06:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8002c08:	f7fe fb14 	bl	8001234 <HAL_GetTick>
 8002c0c:	0003      	movs	r3, r0
 8002c0e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c10:	e008      	b.n	8002c24 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c12:	f7fe fb0f 	bl	8001234 <HAL_GetTick>
 8002c16:	0002      	movs	r2, r0
 8002c18:	693b      	ldr	r3, [r7, #16]
 8002c1a:	1ad3      	subs	r3, r2, r3
 8002c1c:	2b02      	cmp	r3, #2
 8002c1e:	d901      	bls.n	8002c24 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8002c20:	2303      	movs	r3, #3
 8002c22:	e11c      	b.n	8002e5e <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c24:	4b91      	ldr	r3, [pc, #580]	@ (8002e6c <HAL_RCC_OscConfig+0x608>)
 8002c26:	681a      	ldr	r2, [r3, #0]
 8002c28:	2380      	movs	r3, #128	@ 0x80
 8002c2a:	005b      	lsls	r3, r3, #1
 8002c2c:	4013      	ands	r3, r2
 8002c2e:	d0f0      	beq.n	8002c12 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	689b      	ldr	r3, [r3, #8]
 8002c34:	2b01      	cmp	r3, #1
 8002c36:	d106      	bne.n	8002c46 <HAL_RCC_OscConfig+0x3e2>
 8002c38:	4b8b      	ldr	r3, [pc, #556]	@ (8002e68 <HAL_RCC_OscConfig+0x604>)
 8002c3a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002c3c:	4b8a      	ldr	r3, [pc, #552]	@ (8002e68 <HAL_RCC_OscConfig+0x604>)
 8002c3e:	2101      	movs	r1, #1
 8002c40:	430a      	orrs	r2, r1
 8002c42:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002c44:	e01c      	b.n	8002c80 <HAL_RCC_OscConfig+0x41c>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	689b      	ldr	r3, [r3, #8]
 8002c4a:	2b05      	cmp	r3, #5
 8002c4c:	d10c      	bne.n	8002c68 <HAL_RCC_OscConfig+0x404>
 8002c4e:	4b86      	ldr	r3, [pc, #536]	@ (8002e68 <HAL_RCC_OscConfig+0x604>)
 8002c50:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002c52:	4b85      	ldr	r3, [pc, #532]	@ (8002e68 <HAL_RCC_OscConfig+0x604>)
 8002c54:	2104      	movs	r1, #4
 8002c56:	430a      	orrs	r2, r1
 8002c58:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002c5a:	4b83      	ldr	r3, [pc, #524]	@ (8002e68 <HAL_RCC_OscConfig+0x604>)
 8002c5c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002c5e:	4b82      	ldr	r3, [pc, #520]	@ (8002e68 <HAL_RCC_OscConfig+0x604>)
 8002c60:	2101      	movs	r1, #1
 8002c62:	430a      	orrs	r2, r1
 8002c64:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002c66:	e00b      	b.n	8002c80 <HAL_RCC_OscConfig+0x41c>
 8002c68:	4b7f      	ldr	r3, [pc, #508]	@ (8002e68 <HAL_RCC_OscConfig+0x604>)
 8002c6a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002c6c:	4b7e      	ldr	r3, [pc, #504]	@ (8002e68 <HAL_RCC_OscConfig+0x604>)
 8002c6e:	2101      	movs	r1, #1
 8002c70:	438a      	bics	r2, r1
 8002c72:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002c74:	4b7c      	ldr	r3, [pc, #496]	@ (8002e68 <HAL_RCC_OscConfig+0x604>)
 8002c76:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002c78:	4b7b      	ldr	r3, [pc, #492]	@ (8002e68 <HAL_RCC_OscConfig+0x604>)
 8002c7a:	2104      	movs	r1, #4
 8002c7c:	438a      	bics	r2, r1
 8002c7e:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	689b      	ldr	r3, [r3, #8]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d014      	beq.n	8002cb2 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c88:	f7fe fad4 	bl	8001234 <HAL_GetTick>
 8002c8c:	0003      	movs	r3, r0
 8002c8e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c90:	e009      	b.n	8002ca6 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c92:	f7fe facf 	bl	8001234 <HAL_GetTick>
 8002c96:	0002      	movs	r2, r0
 8002c98:	693b      	ldr	r3, [r7, #16]
 8002c9a:	1ad3      	subs	r3, r2, r3
 8002c9c:	4a74      	ldr	r2, [pc, #464]	@ (8002e70 <HAL_RCC_OscConfig+0x60c>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d901      	bls.n	8002ca6 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8002ca2:	2303      	movs	r3, #3
 8002ca4:	e0db      	b.n	8002e5e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ca6:	4b70      	ldr	r3, [pc, #448]	@ (8002e68 <HAL_RCC_OscConfig+0x604>)
 8002ca8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002caa:	2202      	movs	r2, #2
 8002cac:	4013      	ands	r3, r2
 8002cae:	d0f0      	beq.n	8002c92 <HAL_RCC_OscConfig+0x42e>
 8002cb0:	e013      	b.n	8002cda <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cb2:	f7fe fabf 	bl	8001234 <HAL_GetTick>
 8002cb6:	0003      	movs	r3, r0
 8002cb8:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002cba:	e009      	b.n	8002cd0 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cbc:	f7fe faba 	bl	8001234 <HAL_GetTick>
 8002cc0:	0002      	movs	r2, r0
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	1ad3      	subs	r3, r2, r3
 8002cc6:	4a6a      	ldr	r2, [pc, #424]	@ (8002e70 <HAL_RCC_OscConfig+0x60c>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d901      	bls.n	8002cd0 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8002ccc:	2303      	movs	r3, #3
 8002cce:	e0c6      	b.n	8002e5e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002cd0:	4b65      	ldr	r3, [pc, #404]	@ (8002e68 <HAL_RCC_OscConfig+0x604>)
 8002cd2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cd4:	2202      	movs	r2, #2
 8002cd6:	4013      	ands	r3, r2
 8002cd8:	d1f0      	bne.n	8002cbc <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002cda:	231f      	movs	r3, #31
 8002cdc:	18fb      	adds	r3, r7, r3
 8002cde:	781b      	ldrb	r3, [r3, #0]
 8002ce0:	2b01      	cmp	r3, #1
 8002ce2:	d105      	bne.n	8002cf0 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002ce4:	4b60      	ldr	r3, [pc, #384]	@ (8002e68 <HAL_RCC_OscConfig+0x604>)
 8002ce6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002ce8:	4b5f      	ldr	r3, [pc, #380]	@ (8002e68 <HAL_RCC_OscConfig+0x604>)
 8002cea:	4962      	ldr	r1, [pc, #392]	@ (8002e74 <HAL_RCC_OscConfig+0x610>)
 8002cec:	400a      	ands	r2, r1
 8002cee:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	69db      	ldr	r3, [r3, #28]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d100      	bne.n	8002cfa <HAL_RCC_OscConfig+0x496>
 8002cf8:	e0b0      	b.n	8002e5c <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002cfa:	4b5b      	ldr	r3, [pc, #364]	@ (8002e68 <HAL_RCC_OscConfig+0x604>)
 8002cfc:	689b      	ldr	r3, [r3, #8]
 8002cfe:	2238      	movs	r2, #56	@ 0x38
 8002d00:	4013      	ands	r3, r2
 8002d02:	2b10      	cmp	r3, #16
 8002d04:	d100      	bne.n	8002d08 <HAL_RCC_OscConfig+0x4a4>
 8002d06:	e078      	b.n	8002dfa <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	69db      	ldr	r3, [r3, #28]
 8002d0c:	2b02      	cmp	r3, #2
 8002d0e:	d153      	bne.n	8002db8 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d10:	4b55      	ldr	r3, [pc, #340]	@ (8002e68 <HAL_RCC_OscConfig+0x604>)
 8002d12:	681a      	ldr	r2, [r3, #0]
 8002d14:	4b54      	ldr	r3, [pc, #336]	@ (8002e68 <HAL_RCC_OscConfig+0x604>)
 8002d16:	4958      	ldr	r1, [pc, #352]	@ (8002e78 <HAL_RCC_OscConfig+0x614>)
 8002d18:	400a      	ands	r2, r1
 8002d1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d1c:	f7fe fa8a 	bl	8001234 <HAL_GetTick>
 8002d20:	0003      	movs	r3, r0
 8002d22:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d24:	e008      	b.n	8002d38 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d26:	f7fe fa85 	bl	8001234 <HAL_GetTick>
 8002d2a:	0002      	movs	r2, r0
 8002d2c:	693b      	ldr	r3, [r7, #16]
 8002d2e:	1ad3      	subs	r3, r2, r3
 8002d30:	2b02      	cmp	r3, #2
 8002d32:	d901      	bls.n	8002d38 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8002d34:	2303      	movs	r3, #3
 8002d36:	e092      	b.n	8002e5e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d38:	4b4b      	ldr	r3, [pc, #300]	@ (8002e68 <HAL_RCC_OscConfig+0x604>)
 8002d3a:	681a      	ldr	r2, [r3, #0]
 8002d3c:	2380      	movs	r3, #128	@ 0x80
 8002d3e:	049b      	lsls	r3, r3, #18
 8002d40:	4013      	ands	r3, r2
 8002d42:	d1f0      	bne.n	8002d26 <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d44:	4b48      	ldr	r3, [pc, #288]	@ (8002e68 <HAL_RCC_OscConfig+0x604>)
 8002d46:	68db      	ldr	r3, [r3, #12]
 8002d48:	4a4c      	ldr	r2, [pc, #304]	@ (8002e7c <HAL_RCC_OscConfig+0x618>)
 8002d4a:	4013      	ands	r3, r2
 8002d4c:	0019      	movs	r1, r3
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6a1a      	ldr	r2, [r3, #32]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d56:	431a      	orrs	r2, r3
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d5c:	021b      	lsls	r3, r3, #8
 8002d5e:	431a      	orrs	r2, r3
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d64:	431a      	orrs	r2, r3
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d6a:	431a      	orrs	r2, r3
 8002d6c:	4b3e      	ldr	r3, [pc, #248]	@ (8002e68 <HAL_RCC_OscConfig+0x604>)
 8002d6e:	430a      	orrs	r2, r1
 8002d70:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d72:	4b3d      	ldr	r3, [pc, #244]	@ (8002e68 <HAL_RCC_OscConfig+0x604>)
 8002d74:	681a      	ldr	r2, [r3, #0]
 8002d76:	4b3c      	ldr	r3, [pc, #240]	@ (8002e68 <HAL_RCC_OscConfig+0x604>)
 8002d78:	2180      	movs	r1, #128	@ 0x80
 8002d7a:	0449      	lsls	r1, r1, #17
 8002d7c:	430a      	orrs	r2, r1
 8002d7e:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002d80:	4b39      	ldr	r3, [pc, #228]	@ (8002e68 <HAL_RCC_OscConfig+0x604>)
 8002d82:	68da      	ldr	r2, [r3, #12]
 8002d84:	4b38      	ldr	r3, [pc, #224]	@ (8002e68 <HAL_RCC_OscConfig+0x604>)
 8002d86:	2180      	movs	r1, #128	@ 0x80
 8002d88:	0549      	lsls	r1, r1, #21
 8002d8a:	430a      	orrs	r2, r1
 8002d8c:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d8e:	f7fe fa51 	bl	8001234 <HAL_GetTick>
 8002d92:	0003      	movs	r3, r0
 8002d94:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d96:	e008      	b.n	8002daa <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d98:	f7fe fa4c 	bl	8001234 <HAL_GetTick>
 8002d9c:	0002      	movs	r2, r0
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	1ad3      	subs	r3, r2, r3
 8002da2:	2b02      	cmp	r3, #2
 8002da4:	d901      	bls.n	8002daa <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8002da6:	2303      	movs	r3, #3
 8002da8:	e059      	b.n	8002e5e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002daa:	4b2f      	ldr	r3, [pc, #188]	@ (8002e68 <HAL_RCC_OscConfig+0x604>)
 8002dac:	681a      	ldr	r2, [r3, #0]
 8002dae:	2380      	movs	r3, #128	@ 0x80
 8002db0:	049b      	lsls	r3, r3, #18
 8002db2:	4013      	ands	r3, r2
 8002db4:	d0f0      	beq.n	8002d98 <HAL_RCC_OscConfig+0x534>
 8002db6:	e051      	b.n	8002e5c <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002db8:	4b2b      	ldr	r3, [pc, #172]	@ (8002e68 <HAL_RCC_OscConfig+0x604>)
 8002dba:	681a      	ldr	r2, [r3, #0]
 8002dbc:	4b2a      	ldr	r3, [pc, #168]	@ (8002e68 <HAL_RCC_OscConfig+0x604>)
 8002dbe:	492e      	ldr	r1, [pc, #184]	@ (8002e78 <HAL_RCC_OscConfig+0x614>)
 8002dc0:	400a      	ands	r2, r1
 8002dc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dc4:	f7fe fa36 	bl	8001234 <HAL_GetTick>
 8002dc8:	0003      	movs	r3, r0
 8002dca:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002dcc:	e008      	b.n	8002de0 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dce:	f7fe fa31 	bl	8001234 <HAL_GetTick>
 8002dd2:	0002      	movs	r2, r0
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	1ad3      	subs	r3, r2, r3
 8002dd8:	2b02      	cmp	r3, #2
 8002dda:	d901      	bls.n	8002de0 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8002ddc:	2303      	movs	r3, #3
 8002dde:	e03e      	b.n	8002e5e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002de0:	4b21      	ldr	r3, [pc, #132]	@ (8002e68 <HAL_RCC_OscConfig+0x604>)
 8002de2:	681a      	ldr	r2, [r3, #0]
 8002de4:	2380      	movs	r3, #128	@ 0x80
 8002de6:	049b      	lsls	r3, r3, #18
 8002de8:	4013      	ands	r3, r2
 8002dea:	d1f0      	bne.n	8002dce <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8002dec:	4b1e      	ldr	r3, [pc, #120]	@ (8002e68 <HAL_RCC_OscConfig+0x604>)
 8002dee:	68da      	ldr	r2, [r3, #12]
 8002df0:	4b1d      	ldr	r3, [pc, #116]	@ (8002e68 <HAL_RCC_OscConfig+0x604>)
 8002df2:	4923      	ldr	r1, [pc, #140]	@ (8002e80 <HAL_RCC_OscConfig+0x61c>)
 8002df4:	400a      	ands	r2, r1
 8002df6:	60da      	str	r2, [r3, #12]
 8002df8:	e030      	b.n	8002e5c <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	69db      	ldr	r3, [r3, #28]
 8002dfe:	2b01      	cmp	r3, #1
 8002e00:	d101      	bne.n	8002e06 <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	e02b      	b.n	8002e5e <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8002e06:	4b18      	ldr	r3, [pc, #96]	@ (8002e68 <HAL_RCC_OscConfig+0x604>)
 8002e08:	68db      	ldr	r3, [r3, #12]
 8002e0a:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e0c:	697b      	ldr	r3, [r7, #20]
 8002e0e:	2203      	movs	r2, #3
 8002e10:	401a      	ands	r2, r3
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6a1b      	ldr	r3, [r3, #32]
 8002e16:	429a      	cmp	r2, r3
 8002e18:	d11e      	bne.n	8002e58 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e1a:	697b      	ldr	r3, [r7, #20]
 8002e1c:	2270      	movs	r2, #112	@ 0x70
 8002e1e:	401a      	ands	r2, r3
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e24:	429a      	cmp	r2, r3
 8002e26:	d117      	bne.n	8002e58 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e28:	697a      	ldr	r2, [r7, #20]
 8002e2a:	23fe      	movs	r3, #254	@ 0xfe
 8002e2c:	01db      	lsls	r3, r3, #7
 8002e2e:	401a      	ands	r2, r3
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e34:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e36:	429a      	cmp	r2, r3
 8002e38:	d10e      	bne.n	8002e58 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002e3a:	697a      	ldr	r2, [r7, #20]
 8002e3c:	23f8      	movs	r3, #248	@ 0xf8
 8002e3e:	039b      	lsls	r3, r3, #14
 8002e40:	401a      	ands	r2, r3
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e46:	429a      	cmp	r2, r3
 8002e48:	d106      	bne.n	8002e58 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002e4a:	697b      	ldr	r3, [r7, #20]
 8002e4c:	0f5b      	lsrs	r3, r3, #29
 8002e4e:	075a      	lsls	r2, r3, #29
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002e54:	429a      	cmp	r2, r3
 8002e56:	d001      	beq.n	8002e5c <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	e000      	b.n	8002e5e <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8002e5c:	2300      	movs	r3, #0
}
 8002e5e:	0018      	movs	r0, r3
 8002e60:	46bd      	mov	sp, r7
 8002e62:	b008      	add	sp, #32
 8002e64:	bd80      	pop	{r7, pc}
 8002e66:	46c0      	nop			@ (mov r8, r8)
 8002e68:	40021000 	.word	0x40021000
 8002e6c:	40007000 	.word	0x40007000
 8002e70:	00001388 	.word	0x00001388
 8002e74:	efffffff 	.word	0xefffffff
 8002e78:	feffffff 	.word	0xfeffffff
 8002e7c:	1fc1808c 	.word	0x1fc1808c
 8002e80:	effefffc 	.word	0xeffefffc

08002e84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b084      	sub	sp, #16
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
 8002e8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d101      	bne.n	8002e98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e94:	2301      	movs	r3, #1
 8002e96:	e0e9      	b.n	800306c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002e98:	4b76      	ldr	r3, [pc, #472]	@ (8003074 <HAL_RCC_ClockConfig+0x1f0>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	2207      	movs	r2, #7
 8002e9e:	4013      	ands	r3, r2
 8002ea0:	683a      	ldr	r2, [r7, #0]
 8002ea2:	429a      	cmp	r2, r3
 8002ea4:	d91e      	bls.n	8002ee4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ea6:	4b73      	ldr	r3, [pc, #460]	@ (8003074 <HAL_RCC_ClockConfig+0x1f0>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	2207      	movs	r2, #7
 8002eac:	4393      	bics	r3, r2
 8002eae:	0019      	movs	r1, r3
 8002eb0:	4b70      	ldr	r3, [pc, #448]	@ (8003074 <HAL_RCC_ClockConfig+0x1f0>)
 8002eb2:	683a      	ldr	r2, [r7, #0]
 8002eb4:	430a      	orrs	r2, r1
 8002eb6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002eb8:	f7fe f9bc 	bl	8001234 <HAL_GetTick>
 8002ebc:	0003      	movs	r3, r0
 8002ebe:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002ec0:	e009      	b.n	8002ed6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ec2:	f7fe f9b7 	bl	8001234 <HAL_GetTick>
 8002ec6:	0002      	movs	r2, r0
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	1ad3      	subs	r3, r2, r3
 8002ecc:	4a6a      	ldr	r2, [pc, #424]	@ (8003078 <HAL_RCC_ClockConfig+0x1f4>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d901      	bls.n	8002ed6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002ed2:	2303      	movs	r3, #3
 8002ed4:	e0ca      	b.n	800306c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002ed6:	4b67      	ldr	r3, [pc, #412]	@ (8003074 <HAL_RCC_ClockConfig+0x1f0>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	2207      	movs	r2, #7
 8002edc:	4013      	ands	r3, r2
 8002ede:	683a      	ldr	r2, [r7, #0]
 8002ee0:	429a      	cmp	r2, r3
 8002ee2:	d1ee      	bne.n	8002ec2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	2202      	movs	r2, #2
 8002eea:	4013      	ands	r3, r2
 8002eec:	d015      	beq.n	8002f1a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	2204      	movs	r2, #4
 8002ef4:	4013      	ands	r3, r2
 8002ef6:	d006      	beq.n	8002f06 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002ef8:	4b60      	ldr	r3, [pc, #384]	@ (800307c <HAL_RCC_ClockConfig+0x1f8>)
 8002efa:	689a      	ldr	r2, [r3, #8]
 8002efc:	4b5f      	ldr	r3, [pc, #380]	@ (800307c <HAL_RCC_ClockConfig+0x1f8>)
 8002efe:	21e0      	movs	r1, #224	@ 0xe0
 8002f00:	01c9      	lsls	r1, r1, #7
 8002f02:	430a      	orrs	r2, r1
 8002f04:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f06:	4b5d      	ldr	r3, [pc, #372]	@ (800307c <HAL_RCC_ClockConfig+0x1f8>)
 8002f08:	689b      	ldr	r3, [r3, #8]
 8002f0a:	4a5d      	ldr	r2, [pc, #372]	@ (8003080 <HAL_RCC_ClockConfig+0x1fc>)
 8002f0c:	4013      	ands	r3, r2
 8002f0e:	0019      	movs	r1, r3
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	689a      	ldr	r2, [r3, #8]
 8002f14:	4b59      	ldr	r3, [pc, #356]	@ (800307c <HAL_RCC_ClockConfig+0x1f8>)
 8002f16:	430a      	orrs	r2, r1
 8002f18:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	2201      	movs	r2, #1
 8002f20:	4013      	ands	r3, r2
 8002f22:	d057      	beq.n	8002fd4 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	2b01      	cmp	r3, #1
 8002f2a:	d107      	bne.n	8002f3c <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f2c:	4b53      	ldr	r3, [pc, #332]	@ (800307c <HAL_RCC_ClockConfig+0x1f8>)
 8002f2e:	681a      	ldr	r2, [r3, #0]
 8002f30:	2380      	movs	r3, #128	@ 0x80
 8002f32:	029b      	lsls	r3, r3, #10
 8002f34:	4013      	ands	r3, r2
 8002f36:	d12b      	bne.n	8002f90 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	e097      	b.n	800306c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	2b02      	cmp	r3, #2
 8002f42:	d107      	bne.n	8002f54 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f44:	4b4d      	ldr	r3, [pc, #308]	@ (800307c <HAL_RCC_ClockConfig+0x1f8>)
 8002f46:	681a      	ldr	r2, [r3, #0]
 8002f48:	2380      	movs	r3, #128	@ 0x80
 8002f4a:	049b      	lsls	r3, r3, #18
 8002f4c:	4013      	ands	r3, r2
 8002f4e:	d11f      	bne.n	8002f90 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002f50:	2301      	movs	r3, #1
 8002f52:	e08b      	b.n	800306c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d107      	bne.n	8002f6c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f5c:	4b47      	ldr	r3, [pc, #284]	@ (800307c <HAL_RCC_ClockConfig+0x1f8>)
 8002f5e:	681a      	ldr	r2, [r3, #0]
 8002f60:	2380      	movs	r3, #128	@ 0x80
 8002f62:	00db      	lsls	r3, r3, #3
 8002f64:	4013      	ands	r3, r2
 8002f66:	d113      	bne.n	8002f90 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002f68:	2301      	movs	r3, #1
 8002f6a:	e07f      	b.n	800306c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	2b03      	cmp	r3, #3
 8002f72:	d106      	bne.n	8002f82 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002f74:	4b41      	ldr	r3, [pc, #260]	@ (800307c <HAL_RCC_ClockConfig+0x1f8>)
 8002f76:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f78:	2202      	movs	r2, #2
 8002f7a:	4013      	ands	r3, r2
 8002f7c:	d108      	bne.n	8002f90 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	e074      	b.n	800306c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f82:	4b3e      	ldr	r3, [pc, #248]	@ (800307c <HAL_RCC_ClockConfig+0x1f8>)
 8002f84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f86:	2202      	movs	r2, #2
 8002f88:	4013      	ands	r3, r2
 8002f8a:	d101      	bne.n	8002f90 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	e06d      	b.n	800306c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002f90:	4b3a      	ldr	r3, [pc, #232]	@ (800307c <HAL_RCC_ClockConfig+0x1f8>)
 8002f92:	689b      	ldr	r3, [r3, #8]
 8002f94:	2207      	movs	r2, #7
 8002f96:	4393      	bics	r3, r2
 8002f98:	0019      	movs	r1, r3
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	685a      	ldr	r2, [r3, #4]
 8002f9e:	4b37      	ldr	r3, [pc, #220]	@ (800307c <HAL_RCC_ClockConfig+0x1f8>)
 8002fa0:	430a      	orrs	r2, r1
 8002fa2:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002fa4:	f7fe f946 	bl	8001234 <HAL_GetTick>
 8002fa8:	0003      	movs	r3, r0
 8002faa:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fac:	e009      	b.n	8002fc2 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fae:	f7fe f941 	bl	8001234 <HAL_GetTick>
 8002fb2:	0002      	movs	r2, r0
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	1ad3      	subs	r3, r2, r3
 8002fb8:	4a2f      	ldr	r2, [pc, #188]	@ (8003078 <HAL_RCC_ClockConfig+0x1f4>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d901      	bls.n	8002fc2 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8002fbe:	2303      	movs	r3, #3
 8002fc0:	e054      	b.n	800306c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fc2:	4b2e      	ldr	r3, [pc, #184]	@ (800307c <HAL_RCC_ClockConfig+0x1f8>)
 8002fc4:	689b      	ldr	r3, [r3, #8]
 8002fc6:	2238      	movs	r2, #56	@ 0x38
 8002fc8:	401a      	ands	r2, r3
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	00db      	lsls	r3, r3, #3
 8002fd0:	429a      	cmp	r2, r3
 8002fd2:	d1ec      	bne.n	8002fae <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002fd4:	4b27      	ldr	r3, [pc, #156]	@ (8003074 <HAL_RCC_ClockConfig+0x1f0>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	2207      	movs	r2, #7
 8002fda:	4013      	ands	r3, r2
 8002fdc:	683a      	ldr	r2, [r7, #0]
 8002fde:	429a      	cmp	r2, r3
 8002fe0:	d21e      	bcs.n	8003020 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fe2:	4b24      	ldr	r3, [pc, #144]	@ (8003074 <HAL_RCC_ClockConfig+0x1f0>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	2207      	movs	r2, #7
 8002fe8:	4393      	bics	r3, r2
 8002fea:	0019      	movs	r1, r3
 8002fec:	4b21      	ldr	r3, [pc, #132]	@ (8003074 <HAL_RCC_ClockConfig+0x1f0>)
 8002fee:	683a      	ldr	r2, [r7, #0]
 8002ff0:	430a      	orrs	r2, r1
 8002ff2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002ff4:	f7fe f91e 	bl	8001234 <HAL_GetTick>
 8002ff8:	0003      	movs	r3, r0
 8002ffa:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002ffc:	e009      	b.n	8003012 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ffe:	f7fe f919 	bl	8001234 <HAL_GetTick>
 8003002:	0002      	movs	r2, r0
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	1ad3      	subs	r3, r2, r3
 8003008:	4a1b      	ldr	r2, [pc, #108]	@ (8003078 <HAL_RCC_ClockConfig+0x1f4>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d901      	bls.n	8003012 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800300e:	2303      	movs	r3, #3
 8003010:	e02c      	b.n	800306c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003012:	4b18      	ldr	r3, [pc, #96]	@ (8003074 <HAL_RCC_ClockConfig+0x1f0>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	2207      	movs	r2, #7
 8003018:	4013      	ands	r3, r2
 800301a:	683a      	ldr	r2, [r7, #0]
 800301c:	429a      	cmp	r2, r3
 800301e:	d1ee      	bne.n	8002ffe <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	2204      	movs	r2, #4
 8003026:	4013      	ands	r3, r2
 8003028:	d009      	beq.n	800303e <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800302a:	4b14      	ldr	r3, [pc, #80]	@ (800307c <HAL_RCC_ClockConfig+0x1f8>)
 800302c:	689b      	ldr	r3, [r3, #8]
 800302e:	4a15      	ldr	r2, [pc, #84]	@ (8003084 <HAL_RCC_ClockConfig+0x200>)
 8003030:	4013      	ands	r3, r2
 8003032:	0019      	movs	r1, r3
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	68da      	ldr	r2, [r3, #12]
 8003038:	4b10      	ldr	r3, [pc, #64]	@ (800307c <HAL_RCC_ClockConfig+0x1f8>)
 800303a:	430a      	orrs	r2, r1
 800303c:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800303e:	f000 f829 	bl	8003094 <HAL_RCC_GetSysClockFreq>
 8003042:	0001      	movs	r1, r0
 8003044:	4b0d      	ldr	r3, [pc, #52]	@ (800307c <HAL_RCC_ClockConfig+0x1f8>)
 8003046:	689b      	ldr	r3, [r3, #8]
 8003048:	0a1b      	lsrs	r3, r3, #8
 800304a:	220f      	movs	r2, #15
 800304c:	401a      	ands	r2, r3
 800304e:	4b0e      	ldr	r3, [pc, #56]	@ (8003088 <HAL_RCC_ClockConfig+0x204>)
 8003050:	0092      	lsls	r2, r2, #2
 8003052:	58d3      	ldr	r3, [r2, r3]
 8003054:	221f      	movs	r2, #31
 8003056:	4013      	ands	r3, r2
 8003058:	000a      	movs	r2, r1
 800305a:	40da      	lsrs	r2, r3
 800305c:	4b0b      	ldr	r3, [pc, #44]	@ (800308c <HAL_RCC_ClockConfig+0x208>)
 800305e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003060:	4b0b      	ldr	r3, [pc, #44]	@ (8003090 <HAL_RCC_ClockConfig+0x20c>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	0018      	movs	r0, r3
 8003066:	f7fe f889 	bl	800117c <HAL_InitTick>
 800306a:	0003      	movs	r3, r0
}
 800306c:	0018      	movs	r0, r3
 800306e:	46bd      	mov	sp, r7
 8003070:	b004      	add	sp, #16
 8003072:	bd80      	pop	{r7, pc}
 8003074:	40022000 	.word	0x40022000
 8003078:	00001388 	.word	0x00001388
 800307c:	40021000 	.word	0x40021000
 8003080:	fffff0ff 	.word	0xfffff0ff
 8003084:	ffff8fff 	.word	0xffff8fff
 8003088:	08004f7c 	.word	0x08004f7c
 800308c:	20000000 	.word	0x20000000
 8003090:	20000004 	.word	0x20000004

08003094 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b086      	sub	sp, #24
 8003098:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800309a:	4b3c      	ldr	r3, [pc, #240]	@ (800318c <HAL_RCC_GetSysClockFreq+0xf8>)
 800309c:	689b      	ldr	r3, [r3, #8]
 800309e:	2238      	movs	r2, #56	@ 0x38
 80030a0:	4013      	ands	r3, r2
 80030a2:	d10f      	bne.n	80030c4 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80030a4:	4b39      	ldr	r3, [pc, #228]	@ (800318c <HAL_RCC_GetSysClockFreq+0xf8>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	0adb      	lsrs	r3, r3, #11
 80030aa:	2207      	movs	r2, #7
 80030ac:	4013      	ands	r3, r2
 80030ae:	2201      	movs	r2, #1
 80030b0:	409a      	lsls	r2, r3
 80030b2:	0013      	movs	r3, r2
 80030b4:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80030b6:	6839      	ldr	r1, [r7, #0]
 80030b8:	4835      	ldr	r0, [pc, #212]	@ (8003190 <HAL_RCC_GetSysClockFreq+0xfc>)
 80030ba:	f7fd f87d 	bl	80001b8 <__udivsi3>
 80030be:	0003      	movs	r3, r0
 80030c0:	613b      	str	r3, [r7, #16]
 80030c2:	e05d      	b.n	8003180 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80030c4:	4b31      	ldr	r3, [pc, #196]	@ (800318c <HAL_RCC_GetSysClockFreq+0xf8>)
 80030c6:	689b      	ldr	r3, [r3, #8]
 80030c8:	2238      	movs	r2, #56	@ 0x38
 80030ca:	4013      	ands	r3, r2
 80030cc:	2b08      	cmp	r3, #8
 80030ce:	d102      	bne.n	80030d6 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80030d0:	4b30      	ldr	r3, [pc, #192]	@ (8003194 <HAL_RCC_GetSysClockFreq+0x100>)
 80030d2:	613b      	str	r3, [r7, #16]
 80030d4:	e054      	b.n	8003180 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80030d6:	4b2d      	ldr	r3, [pc, #180]	@ (800318c <HAL_RCC_GetSysClockFreq+0xf8>)
 80030d8:	689b      	ldr	r3, [r3, #8]
 80030da:	2238      	movs	r2, #56	@ 0x38
 80030dc:	4013      	ands	r3, r2
 80030de:	2b10      	cmp	r3, #16
 80030e0:	d138      	bne.n	8003154 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80030e2:	4b2a      	ldr	r3, [pc, #168]	@ (800318c <HAL_RCC_GetSysClockFreq+0xf8>)
 80030e4:	68db      	ldr	r3, [r3, #12]
 80030e6:	2203      	movs	r2, #3
 80030e8:	4013      	ands	r3, r2
 80030ea:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80030ec:	4b27      	ldr	r3, [pc, #156]	@ (800318c <HAL_RCC_GetSysClockFreq+0xf8>)
 80030ee:	68db      	ldr	r3, [r3, #12]
 80030f0:	091b      	lsrs	r3, r3, #4
 80030f2:	2207      	movs	r2, #7
 80030f4:	4013      	ands	r3, r2
 80030f6:	3301      	adds	r3, #1
 80030f8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	2b03      	cmp	r3, #3
 80030fe:	d10d      	bne.n	800311c <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003100:	68b9      	ldr	r1, [r7, #8]
 8003102:	4824      	ldr	r0, [pc, #144]	@ (8003194 <HAL_RCC_GetSysClockFreq+0x100>)
 8003104:	f7fd f858 	bl	80001b8 <__udivsi3>
 8003108:	0003      	movs	r3, r0
 800310a:	0019      	movs	r1, r3
 800310c:	4b1f      	ldr	r3, [pc, #124]	@ (800318c <HAL_RCC_GetSysClockFreq+0xf8>)
 800310e:	68db      	ldr	r3, [r3, #12]
 8003110:	0a1b      	lsrs	r3, r3, #8
 8003112:	227f      	movs	r2, #127	@ 0x7f
 8003114:	4013      	ands	r3, r2
 8003116:	434b      	muls	r3, r1
 8003118:	617b      	str	r3, [r7, #20]
        break;
 800311a:	e00d      	b.n	8003138 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 800311c:	68b9      	ldr	r1, [r7, #8]
 800311e:	481c      	ldr	r0, [pc, #112]	@ (8003190 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003120:	f7fd f84a 	bl	80001b8 <__udivsi3>
 8003124:	0003      	movs	r3, r0
 8003126:	0019      	movs	r1, r3
 8003128:	4b18      	ldr	r3, [pc, #96]	@ (800318c <HAL_RCC_GetSysClockFreq+0xf8>)
 800312a:	68db      	ldr	r3, [r3, #12]
 800312c:	0a1b      	lsrs	r3, r3, #8
 800312e:	227f      	movs	r2, #127	@ 0x7f
 8003130:	4013      	ands	r3, r2
 8003132:	434b      	muls	r3, r1
 8003134:	617b      	str	r3, [r7, #20]
        break;
 8003136:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8003138:	4b14      	ldr	r3, [pc, #80]	@ (800318c <HAL_RCC_GetSysClockFreq+0xf8>)
 800313a:	68db      	ldr	r3, [r3, #12]
 800313c:	0f5b      	lsrs	r3, r3, #29
 800313e:	2207      	movs	r2, #7
 8003140:	4013      	ands	r3, r2
 8003142:	3301      	adds	r3, #1
 8003144:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8003146:	6879      	ldr	r1, [r7, #4]
 8003148:	6978      	ldr	r0, [r7, #20]
 800314a:	f7fd f835 	bl	80001b8 <__udivsi3>
 800314e:	0003      	movs	r3, r0
 8003150:	613b      	str	r3, [r7, #16]
 8003152:	e015      	b.n	8003180 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003154:	4b0d      	ldr	r3, [pc, #52]	@ (800318c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003156:	689b      	ldr	r3, [r3, #8]
 8003158:	2238      	movs	r2, #56	@ 0x38
 800315a:	4013      	ands	r3, r2
 800315c:	2b20      	cmp	r3, #32
 800315e:	d103      	bne.n	8003168 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8003160:	2380      	movs	r3, #128	@ 0x80
 8003162:	021b      	lsls	r3, r3, #8
 8003164:	613b      	str	r3, [r7, #16]
 8003166:	e00b      	b.n	8003180 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003168:	4b08      	ldr	r3, [pc, #32]	@ (800318c <HAL_RCC_GetSysClockFreq+0xf8>)
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	2238      	movs	r2, #56	@ 0x38
 800316e:	4013      	ands	r3, r2
 8003170:	2b18      	cmp	r3, #24
 8003172:	d103      	bne.n	800317c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8003174:	23fa      	movs	r3, #250	@ 0xfa
 8003176:	01db      	lsls	r3, r3, #7
 8003178:	613b      	str	r3, [r7, #16]
 800317a:	e001      	b.n	8003180 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 800317c:	2300      	movs	r3, #0
 800317e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003180:	693b      	ldr	r3, [r7, #16]
}
 8003182:	0018      	movs	r0, r3
 8003184:	46bd      	mov	sp, r7
 8003186:	b006      	add	sp, #24
 8003188:	bd80      	pop	{r7, pc}
 800318a:	46c0      	nop			@ (mov r8, r8)
 800318c:	40021000 	.word	0x40021000
 8003190:	00f42400 	.word	0x00f42400
 8003194:	007a1200 	.word	0x007a1200

08003198 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b086      	sub	sp, #24
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80031a0:	2313      	movs	r3, #19
 80031a2:	18fb      	adds	r3, r7, r3
 80031a4:	2200      	movs	r2, #0
 80031a6:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80031a8:	2312      	movs	r3, #18
 80031aa:	18fb      	adds	r3, r7, r3
 80031ac:	2200      	movs	r2, #0
 80031ae:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681a      	ldr	r2, [r3, #0]
 80031b4:	2380      	movs	r3, #128	@ 0x80
 80031b6:	029b      	lsls	r3, r3, #10
 80031b8:	4013      	ands	r3, r2
 80031ba:	d100      	bne.n	80031be <HAL_RCCEx_PeriphCLKConfig+0x26>
 80031bc:	e0a3      	b.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031be:	2011      	movs	r0, #17
 80031c0:	183b      	adds	r3, r7, r0
 80031c2:	2200      	movs	r2, #0
 80031c4:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031c6:	4b86      	ldr	r3, [pc, #536]	@ (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80031c8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80031ca:	2380      	movs	r3, #128	@ 0x80
 80031cc:	055b      	lsls	r3, r3, #21
 80031ce:	4013      	ands	r3, r2
 80031d0:	d110      	bne.n	80031f4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031d2:	4b83      	ldr	r3, [pc, #524]	@ (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80031d4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80031d6:	4b82      	ldr	r3, [pc, #520]	@ (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80031d8:	2180      	movs	r1, #128	@ 0x80
 80031da:	0549      	lsls	r1, r1, #21
 80031dc:	430a      	orrs	r2, r1
 80031de:	63da      	str	r2, [r3, #60]	@ 0x3c
 80031e0:	4b7f      	ldr	r3, [pc, #508]	@ (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80031e2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80031e4:	2380      	movs	r3, #128	@ 0x80
 80031e6:	055b      	lsls	r3, r3, #21
 80031e8:	4013      	ands	r3, r2
 80031ea:	60bb      	str	r3, [r7, #8]
 80031ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031ee:	183b      	adds	r3, r7, r0
 80031f0:	2201      	movs	r2, #1
 80031f2:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80031f4:	4b7b      	ldr	r3, [pc, #492]	@ (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80031f6:	681a      	ldr	r2, [r3, #0]
 80031f8:	4b7a      	ldr	r3, [pc, #488]	@ (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80031fa:	2180      	movs	r1, #128	@ 0x80
 80031fc:	0049      	lsls	r1, r1, #1
 80031fe:	430a      	orrs	r2, r1
 8003200:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003202:	f7fe f817 	bl	8001234 <HAL_GetTick>
 8003206:	0003      	movs	r3, r0
 8003208:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800320a:	e00b      	b.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800320c:	f7fe f812 	bl	8001234 <HAL_GetTick>
 8003210:	0002      	movs	r2, r0
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	1ad3      	subs	r3, r2, r3
 8003216:	2b02      	cmp	r3, #2
 8003218:	d904      	bls.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800321a:	2313      	movs	r3, #19
 800321c:	18fb      	adds	r3, r7, r3
 800321e:	2203      	movs	r2, #3
 8003220:	701a      	strb	r2, [r3, #0]
        break;
 8003222:	e005      	b.n	8003230 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003224:	4b6f      	ldr	r3, [pc, #444]	@ (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8003226:	681a      	ldr	r2, [r3, #0]
 8003228:	2380      	movs	r3, #128	@ 0x80
 800322a:	005b      	lsls	r3, r3, #1
 800322c:	4013      	ands	r3, r2
 800322e:	d0ed      	beq.n	800320c <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8003230:	2313      	movs	r3, #19
 8003232:	18fb      	adds	r3, r7, r3
 8003234:	781b      	ldrb	r3, [r3, #0]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d154      	bne.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800323a:	4b69      	ldr	r3, [pc, #420]	@ (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800323c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800323e:	23c0      	movs	r3, #192	@ 0xc0
 8003240:	009b      	lsls	r3, r3, #2
 8003242:	4013      	ands	r3, r2
 8003244:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003246:	697b      	ldr	r3, [r7, #20]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d019      	beq.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	699b      	ldr	r3, [r3, #24]
 8003250:	697a      	ldr	r2, [r7, #20]
 8003252:	429a      	cmp	r2, r3
 8003254:	d014      	beq.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003256:	4b62      	ldr	r3, [pc, #392]	@ (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003258:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800325a:	4a63      	ldr	r2, [pc, #396]	@ (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800325c:	4013      	ands	r3, r2
 800325e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003260:	4b5f      	ldr	r3, [pc, #380]	@ (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003262:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003264:	4b5e      	ldr	r3, [pc, #376]	@ (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003266:	2180      	movs	r1, #128	@ 0x80
 8003268:	0249      	lsls	r1, r1, #9
 800326a:	430a      	orrs	r2, r1
 800326c:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800326e:	4b5c      	ldr	r3, [pc, #368]	@ (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003270:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003272:	4b5b      	ldr	r3, [pc, #364]	@ (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003274:	495d      	ldr	r1, [pc, #372]	@ (80033ec <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003276:	400a      	ands	r2, r1
 8003278:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800327a:	4b59      	ldr	r3, [pc, #356]	@ (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800327c:	697a      	ldr	r2, [r7, #20]
 800327e:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003280:	697b      	ldr	r3, [r7, #20]
 8003282:	2201      	movs	r2, #1
 8003284:	4013      	ands	r3, r2
 8003286:	d016      	beq.n	80032b6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003288:	f7fd ffd4 	bl	8001234 <HAL_GetTick>
 800328c:	0003      	movs	r3, r0
 800328e:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003290:	e00c      	b.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003292:	f7fd ffcf 	bl	8001234 <HAL_GetTick>
 8003296:	0002      	movs	r2, r0
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	1ad3      	subs	r3, r2, r3
 800329c:	4a54      	ldr	r2, [pc, #336]	@ (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d904      	bls.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80032a2:	2313      	movs	r3, #19
 80032a4:	18fb      	adds	r3, r7, r3
 80032a6:	2203      	movs	r2, #3
 80032a8:	701a      	strb	r2, [r3, #0]
            break;
 80032aa:	e004      	b.n	80032b6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032ac:	4b4c      	ldr	r3, [pc, #304]	@ (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80032ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032b0:	2202      	movs	r2, #2
 80032b2:	4013      	ands	r3, r2
 80032b4:	d0ed      	beq.n	8003292 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80032b6:	2313      	movs	r3, #19
 80032b8:	18fb      	adds	r3, r7, r3
 80032ba:	781b      	ldrb	r3, [r3, #0]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d10a      	bne.n	80032d6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80032c0:	4b47      	ldr	r3, [pc, #284]	@ (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80032c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032c4:	4a48      	ldr	r2, [pc, #288]	@ (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80032c6:	4013      	ands	r3, r2
 80032c8:	0019      	movs	r1, r3
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	699a      	ldr	r2, [r3, #24]
 80032ce:	4b44      	ldr	r3, [pc, #272]	@ (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80032d0:	430a      	orrs	r2, r1
 80032d2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80032d4:	e00c      	b.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80032d6:	2312      	movs	r3, #18
 80032d8:	18fb      	adds	r3, r7, r3
 80032da:	2213      	movs	r2, #19
 80032dc:	18ba      	adds	r2, r7, r2
 80032de:	7812      	ldrb	r2, [r2, #0]
 80032e0:	701a      	strb	r2, [r3, #0]
 80032e2:	e005      	b.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032e4:	2312      	movs	r3, #18
 80032e6:	18fb      	adds	r3, r7, r3
 80032e8:	2213      	movs	r2, #19
 80032ea:	18ba      	adds	r2, r7, r2
 80032ec:	7812      	ldrb	r2, [r2, #0]
 80032ee:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80032f0:	2311      	movs	r3, #17
 80032f2:	18fb      	adds	r3, r7, r3
 80032f4:	781b      	ldrb	r3, [r3, #0]
 80032f6:	2b01      	cmp	r3, #1
 80032f8:	d105      	bne.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032fa:	4b39      	ldr	r3, [pc, #228]	@ (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80032fc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80032fe:	4b38      	ldr	r3, [pc, #224]	@ (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003300:	493c      	ldr	r1, [pc, #240]	@ (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003302:	400a      	ands	r2, r1
 8003304:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	2201      	movs	r2, #1
 800330c:	4013      	ands	r3, r2
 800330e:	d009      	beq.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003310:	4b33      	ldr	r3, [pc, #204]	@ (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003312:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003314:	2203      	movs	r2, #3
 8003316:	4393      	bics	r3, r2
 8003318:	0019      	movs	r1, r3
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	685a      	ldr	r2, [r3, #4]
 800331e:	4b30      	ldr	r3, [pc, #192]	@ (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003320:	430a      	orrs	r2, r1
 8003322:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	2202      	movs	r2, #2
 800332a:	4013      	ands	r3, r2
 800332c:	d009      	beq.n	8003342 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800332e:	4b2c      	ldr	r3, [pc, #176]	@ (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003330:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003332:	220c      	movs	r2, #12
 8003334:	4393      	bics	r3, r2
 8003336:	0019      	movs	r1, r3
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	689a      	ldr	r2, [r3, #8]
 800333c:	4b28      	ldr	r3, [pc, #160]	@ (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800333e:	430a      	orrs	r2, r1
 8003340:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	2220      	movs	r2, #32
 8003348:	4013      	ands	r3, r2
 800334a:	d009      	beq.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800334c:	4b24      	ldr	r3, [pc, #144]	@ (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800334e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003350:	4a29      	ldr	r2, [pc, #164]	@ (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003352:	4013      	ands	r3, r2
 8003354:	0019      	movs	r1, r3
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	68da      	ldr	r2, [r3, #12]
 800335a:	4b21      	ldr	r3, [pc, #132]	@ (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800335c:	430a      	orrs	r2, r1
 800335e:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681a      	ldr	r2, [r3, #0]
 8003364:	2380      	movs	r3, #128	@ 0x80
 8003366:	01db      	lsls	r3, r3, #7
 8003368:	4013      	ands	r3, r2
 800336a:	d015      	beq.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800336c:	4b1c      	ldr	r3, [pc, #112]	@ (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800336e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003370:	009b      	lsls	r3, r3, #2
 8003372:	0899      	lsrs	r1, r3, #2
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	695a      	ldr	r2, [r3, #20]
 8003378:	4b19      	ldr	r3, [pc, #100]	@ (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800337a:	430a      	orrs	r2, r1
 800337c:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	695a      	ldr	r2, [r3, #20]
 8003382:	2380      	movs	r3, #128	@ 0x80
 8003384:	05db      	lsls	r3, r3, #23
 8003386:	429a      	cmp	r2, r3
 8003388:	d106      	bne.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800338a:	4b15      	ldr	r3, [pc, #84]	@ (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800338c:	68da      	ldr	r2, [r3, #12]
 800338e:	4b14      	ldr	r3, [pc, #80]	@ (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003390:	2180      	movs	r1, #128	@ 0x80
 8003392:	0249      	lsls	r1, r1, #9
 8003394:	430a      	orrs	r2, r1
 8003396:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681a      	ldr	r2, [r3, #0]
 800339c:	2380      	movs	r3, #128	@ 0x80
 800339e:	011b      	lsls	r3, r3, #4
 80033a0:	4013      	ands	r3, r2
 80033a2:	d016      	beq.n	80033d2 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80033a4:	4b0e      	ldr	r3, [pc, #56]	@ (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80033a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033a8:	4a14      	ldr	r2, [pc, #80]	@ (80033fc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80033aa:	4013      	ands	r3, r2
 80033ac:	0019      	movs	r1, r3
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	691a      	ldr	r2, [r3, #16]
 80033b2:	4b0b      	ldr	r3, [pc, #44]	@ (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80033b4:	430a      	orrs	r2, r1
 80033b6:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	691a      	ldr	r2, [r3, #16]
 80033bc:	2380      	movs	r3, #128	@ 0x80
 80033be:	01db      	lsls	r3, r3, #7
 80033c0:	429a      	cmp	r2, r3
 80033c2:	d106      	bne.n	80033d2 <HAL_RCCEx_PeriphCLKConfig+0x23a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80033c4:	4b06      	ldr	r3, [pc, #24]	@ (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80033c6:	68da      	ldr	r2, [r3, #12]
 80033c8:	4b05      	ldr	r3, [pc, #20]	@ (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80033ca:	2180      	movs	r1, #128	@ 0x80
 80033cc:	0249      	lsls	r1, r1, #9
 80033ce:	430a      	orrs	r2, r1
 80033d0:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80033d2:	2312      	movs	r3, #18
 80033d4:	18fb      	adds	r3, r7, r3
 80033d6:	781b      	ldrb	r3, [r3, #0]
}
 80033d8:	0018      	movs	r0, r3
 80033da:	46bd      	mov	sp, r7
 80033dc:	b006      	add	sp, #24
 80033de:	bd80      	pop	{r7, pc}
 80033e0:	40021000 	.word	0x40021000
 80033e4:	40007000 	.word	0x40007000
 80033e8:	fffffcff 	.word	0xfffffcff
 80033ec:	fffeffff 	.word	0xfffeffff
 80033f0:	00001388 	.word	0x00001388
 80033f4:	efffffff 	.word	0xefffffff
 80033f8:	ffffcfff 	.word	0xffffcfff
 80033fc:	ffff3fff 	.word	0xffff3fff

08003400 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b082      	sub	sp, #8
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d101      	bne.n	8003412 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800340e:	2301      	movs	r3, #1
 8003410:	e04a      	b.n	80034a8 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	223d      	movs	r2, #61	@ 0x3d
 8003416:	5c9b      	ldrb	r3, [r3, r2]
 8003418:	b2db      	uxtb	r3, r3
 800341a:	2b00      	cmp	r3, #0
 800341c:	d107      	bne.n	800342e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	223c      	movs	r2, #60	@ 0x3c
 8003422:	2100      	movs	r1, #0
 8003424:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	0018      	movs	r0, r3
 800342a:	f7fd fd8b 	bl	8000f44 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	223d      	movs	r2, #61	@ 0x3d
 8003432:	2102      	movs	r1, #2
 8003434:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681a      	ldr	r2, [r3, #0]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	3304      	adds	r3, #4
 800343e:	0019      	movs	r1, r3
 8003440:	0010      	movs	r0, r2
 8003442:	f000 fa6b 	bl	800391c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2248      	movs	r2, #72	@ 0x48
 800344a:	2101      	movs	r1, #1
 800344c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	223e      	movs	r2, #62	@ 0x3e
 8003452:	2101      	movs	r1, #1
 8003454:	5499      	strb	r1, [r3, r2]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	223f      	movs	r2, #63	@ 0x3f
 800345a:	2101      	movs	r1, #1
 800345c:	5499      	strb	r1, [r3, r2]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2240      	movs	r2, #64	@ 0x40
 8003462:	2101      	movs	r1, #1
 8003464:	5499      	strb	r1, [r3, r2]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2241      	movs	r2, #65	@ 0x41
 800346a:	2101      	movs	r1, #1
 800346c:	5499      	strb	r1, [r3, r2]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2242      	movs	r2, #66	@ 0x42
 8003472:	2101      	movs	r1, #1
 8003474:	5499      	strb	r1, [r3, r2]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2243      	movs	r2, #67	@ 0x43
 800347a:	2101      	movs	r1, #1
 800347c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2244      	movs	r2, #68	@ 0x44
 8003482:	2101      	movs	r1, #1
 8003484:	5499      	strb	r1, [r3, r2]
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2245      	movs	r2, #69	@ 0x45
 800348a:	2101      	movs	r1, #1
 800348c:	5499      	strb	r1, [r3, r2]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2246      	movs	r2, #70	@ 0x46
 8003492:	2101      	movs	r1, #1
 8003494:	5499      	strb	r1, [r3, r2]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2247      	movs	r2, #71	@ 0x47
 800349a:	2101      	movs	r1, #1
 800349c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	223d      	movs	r2, #61	@ 0x3d
 80034a2:	2101      	movs	r1, #1
 80034a4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80034a6:	2300      	movs	r3, #0
}
 80034a8:	0018      	movs	r0, r3
 80034aa:	46bd      	mov	sp, r7
 80034ac:	b002      	add	sp, #8
 80034ae:	bd80      	pop	{r7, pc}

080034b0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b082      	sub	sp, #8
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d101      	bne.n	80034c2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80034be:	2301      	movs	r3, #1
 80034c0:	e04a      	b.n	8003558 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	223d      	movs	r2, #61	@ 0x3d
 80034c6:	5c9b      	ldrb	r3, [r3, r2]
 80034c8:	b2db      	uxtb	r3, r3
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d107      	bne.n	80034de <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	223c      	movs	r2, #60	@ 0x3c
 80034d2:	2100      	movs	r1, #0
 80034d4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	0018      	movs	r0, r3
 80034da:	f000 f841 	bl	8003560 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	223d      	movs	r2, #61	@ 0x3d
 80034e2:	2102      	movs	r1, #2
 80034e4:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681a      	ldr	r2, [r3, #0]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	3304      	adds	r3, #4
 80034ee:	0019      	movs	r1, r3
 80034f0:	0010      	movs	r0, r2
 80034f2:	f000 fa13 	bl	800391c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2248      	movs	r2, #72	@ 0x48
 80034fa:	2101      	movs	r1, #1
 80034fc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	223e      	movs	r2, #62	@ 0x3e
 8003502:	2101      	movs	r1, #1
 8003504:	5499      	strb	r1, [r3, r2]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	223f      	movs	r2, #63	@ 0x3f
 800350a:	2101      	movs	r1, #1
 800350c:	5499      	strb	r1, [r3, r2]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2240      	movs	r2, #64	@ 0x40
 8003512:	2101      	movs	r1, #1
 8003514:	5499      	strb	r1, [r3, r2]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2241      	movs	r2, #65	@ 0x41
 800351a:	2101      	movs	r1, #1
 800351c:	5499      	strb	r1, [r3, r2]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2242      	movs	r2, #66	@ 0x42
 8003522:	2101      	movs	r1, #1
 8003524:	5499      	strb	r1, [r3, r2]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2243      	movs	r2, #67	@ 0x43
 800352a:	2101      	movs	r1, #1
 800352c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2244      	movs	r2, #68	@ 0x44
 8003532:	2101      	movs	r1, #1
 8003534:	5499      	strb	r1, [r3, r2]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2245      	movs	r2, #69	@ 0x45
 800353a:	2101      	movs	r1, #1
 800353c:	5499      	strb	r1, [r3, r2]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2246      	movs	r2, #70	@ 0x46
 8003542:	2101      	movs	r1, #1
 8003544:	5499      	strb	r1, [r3, r2]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2247      	movs	r2, #71	@ 0x47
 800354a:	2101      	movs	r1, #1
 800354c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	223d      	movs	r2, #61	@ 0x3d
 8003552:	2101      	movs	r1, #1
 8003554:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003556:	2300      	movs	r3, #0
}
 8003558:	0018      	movs	r0, r3
 800355a:	46bd      	mov	sp, r7
 800355c:	b002      	add	sp, #8
 800355e:	bd80      	pop	{r7, pc}

08003560 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b082      	sub	sp, #8
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003568:	46c0      	nop			@ (mov r8, r8)
 800356a:	46bd      	mov	sp, r7
 800356c:	b002      	add	sp, #8
 800356e:	bd80      	pop	{r7, pc}

08003570 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b086      	sub	sp, #24
 8003574:	af00      	add	r7, sp, #0
 8003576:	60f8      	str	r0, [r7, #12]
 8003578:	60b9      	str	r1, [r7, #8]
 800357a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800357c:	2317      	movs	r3, #23
 800357e:	18fb      	adds	r3, r7, r3
 8003580:	2200      	movs	r2, #0
 8003582:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	223c      	movs	r2, #60	@ 0x3c
 8003588:	5c9b      	ldrb	r3, [r3, r2]
 800358a:	2b01      	cmp	r3, #1
 800358c:	d101      	bne.n	8003592 <HAL_TIM_PWM_ConfigChannel+0x22>
 800358e:	2302      	movs	r3, #2
 8003590:	e0e5      	b.n	800375e <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	223c      	movs	r2, #60	@ 0x3c
 8003596:	2101      	movs	r1, #1
 8003598:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2b14      	cmp	r3, #20
 800359e:	d900      	bls.n	80035a2 <HAL_TIM_PWM_ConfigChannel+0x32>
 80035a0:	e0d1      	b.n	8003746 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	009a      	lsls	r2, r3, #2
 80035a6:	4b70      	ldr	r3, [pc, #448]	@ (8003768 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 80035a8:	18d3      	adds	r3, r2, r3
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	68ba      	ldr	r2, [r7, #8]
 80035b4:	0011      	movs	r1, r2
 80035b6:	0018      	movs	r0, r3
 80035b8:	f000 fa34 	bl	8003a24 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	699a      	ldr	r2, [r3, #24]
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	2108      	movs	r1, #8
 80035c8:	430a      	orrs	r2, r1
 80035ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	699a      	ldr	r2, [r3, #24]
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	2104      	movs	r1, #4
 80035d8:	438a      	bics	r2, r1
 80035da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	6999      	ldr	r1, [r3, #24]
 80035e2:	68bb      	ldr	r3, [r7, #8]
 80035e4:	691a      	ldr	r2, [r3, #16]
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	430a      	orrs	r2, r1
 80035ec:	619a      	str	r2, [r3, #24]
      break;
 80035ee:	e0af      	b.n	8003750 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	68ba      	ldr	r2, [r7, #8]
 80035f6:	0011      	movs	r1, r2
 80035f8:	0018      	movs	r0, r3
 80035fa:	f000 fa9d 	bl	8003b38 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	699a      	ldr	r2, [r3, #24]
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	2180      	movs	r1, #128	@ 0x80
 800360a:	0109      	lsls	r1, r1, #4
 800360c:	430a      	orrs	r2, r1
 800360e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	699a      	ldr	r2, [r3, #24]
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4954      	ldr	r1, [pc, #336]	@ (800376c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800361c:	400a      	ands	r2, r1
 800361e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	6999      	ldr	r1, [r3, #24]
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	691b      	ldr	r3, [r3, #16]
 800362a:	021a      	lsls	r2, r3, #8
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	430a      	orrs	r2, r1
 8003632:	619a      	str	r2, [r3, #24]
      break;
 8003634:	e08c      	b.n	8003750 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	68ba      	ldr	r2, [r7, #8]
 800363c:	0011      	movs	r1, r2
 800363e:	0018      	movs	r0, r3
 8003640:	f000 fafe 	bl	8003c40 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	69da      	ldr	r2, [r3, #28]
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	2108      	movs	r1, #8
 8003650:	430a      	orrs	r2, r1
 8003652:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	69da      	ldr	r2, [r3, #28]
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	2104      	movs	r1, #4
 8003660:	438a      	bics	r2, r1
 8003662:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	69d9      	ldr	r1, [r3, #28]
 800366a:	68bb      	ldr	r3, [r7, #8]
 800366c:	691a      	ldr	r2, [r3, #16]
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	430a      	orrs	r2, r1
 8003674:	61da      	str	r2, [r3, #28]
      break;
 8003676:	e06b      	b.n	8003750 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	68ba      	ldr	r2, [r7, #8]
 800367e:	0011      	movs	r1, r2
 8003680:	0018      	movs	r0, r3
 8003682:	f000 fb65 	bl	8003d50 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	69da      	ldr	r2, [r3, #28]
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	2180      	movs	r1, #128	@ 0x80
 8003692:	0109      	lsls	r1, r1, #4
 8003694:	430a      	orrs	r2, r1
 8003696:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	69da      	ldr	r2, [r3, #28]
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4932      	ldr	r1, [pc, #200]	@ (800376c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80036a4:	400a      	ands	r2, r1
 80036a6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	69d9      	ldr	r1, [r3, #28]
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	691b      	ldr	r3, [r3, #16]
 80036b2:	021a      	lsls	r2, r3, #8
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	430a      	orrs	r2, r1
 80036ba:	61da      	str	r2, [r3, #28]
      break;
 80036bc:	e048      	b.n	8003750 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	68ba      	ldr	r2, [r7, #8]
 80036c4:	0011      	movs	r1, r2
 80036c6:	0018      	movs	r0, r3
 80036c8:	f000 fbac 	bl	8003e24 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	2108      	movs	r1, #8
 80036d8:	430a      	orrs	r2, r1
 80036da:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	2104      	movs	r1, #4
 80036e8:	438a      	bics	r2, r1
 80036ea:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80036f2:	68bb      	ldr	r3, [r7, #8]
 80036f4:	691a      	ldr	r2, [r3, #16]
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	430a      	orrs	r2, r1
 80036fc:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80036fe:	e027      	b.n	8003750 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	68ba      	ldr	r2, [r7, #8]
 8003706:	0011      	movs	r1, r2
 8003708:	0018      	movs	r0, r3
 800370a:	f000 fbeb 	bl	8003ee4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	2180      	movs	r1, #128	@ 0x80
 800371a:	0109      	lsls	r1, r1, #4
 800371c:	430a      	orrs	r2, r1
 800371e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4910      	ldr	r1, [pc, #64]	@ (800376c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800372c:	400a      	ands	r2, r1
 800372e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	691b      	ldr	r3, [r3, #16]
 800373a:	021a      	lsls	r2, r3, #8
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	430a      	orrs	r2, r1
 8003742:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003744:	e004      	b.n	8003750 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8003746:	2317      	movs	r3, #23
 8003748:	18fb      	adds	r3, r7, r3
 800374a:	2201      	movs	r2, #1
 800374c:	701a      	strb	r2, [r3, #0]
      break;
 800374e:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	223c      	movs	r2, #60	@ 0x3c
 8003754:	2100      	movs	r1, #0
 8003756:	5499      	strb	r1, [r3, r2]

  return status;
 8003758:	2317      	movs	r3, #23
 800375a:	18fb      	adds	r3, r7, r3
 800375c:	781b      	ldrb	r3, [r3, #0]
}
 800375e:	0018      	movs	r0, r3
 8003760:	46bd      	mov	sp, r7
 8003762:	b006      	add	sp, #24
 8003764:	bd80      	pop	{r7, pc}
 8003766:	46c0      	nop			@ (mov r8, r8)
 8003768:	08004fbc 	.word	0x08004fbc
 800376c:	fffffbff 	.word	0xfffffbff

08003770 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b084      	sub	sp, #16
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
 8003778:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800377a:	230f      	movs	r3, #15
 800377c:	18fb      	adds	r3, r7, r3
 800377e:	2200      	movs	r2, #0
 8003780:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	223c      	movs	r2, #60	@ 0x3c
 8003786:	5c9b      	ldrb	r3, [r3, r2]
 8003788:	2b01      	cmp	r3, #1
 800378a:	d101      	bne.n	8003790 <HAL_TIM_ConfigClockSource+0x20>
 800378c:	2302      	movs	r3, #2
 800378e:	e0bc      	b.n	800390a <HAL_TIM_ConfigClockSource+0x19a>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	223c      	movs	r2, #60	@ 0x3c
 8003794:	2101      	movs	r1, #1
 8003796:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	223d      	movs	r2, #61	@ 0x3d
 800379c:	2102      	movs	r1, #2
 800379e:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	689b      	ldr	r3, [r3, #8]
 80037a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	4a5a      	ldr	r2, [pc, #360]	@ (8003914 <HAL_TIM_ConfigClockSource+0x1a4>)
 80037ac:	4013      	ands	r3, r2
 80037ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	4a59      	ldr	r2, [pc, #356]	@ (8003918 <HAL_TIM_ConfigClockSource+0x1a8>)
 80037b4:	4013      	ands	r3, r2
 80037b6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	68ba      	ldr	r2, [r7, #8]
 80037be:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	2280      	movs	r2, #128	@ 0x80
 80037c6:	0192      	lsls	r2, r2, #6
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d040      	beq.n	800384e <HAL_TIM_ConfigClockSource+0xde>
 80037cc:	2280      	movs	r2, #128	@ 0x80
 80037ce:	0192      	lsls	r2, r2, #6
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d900      	bls.n	80037d6 <HAL_TIM_ConfigClockSource+0x66>
 80037d4:	e088      	b.n	80038e8 <HAL_TIM_ConfigClockSource+0x178>
 80037d6:	2280      	movs	r2, #128	@ 0x80
 80037d8:	0152      	lsls	r2, r2, #5
 80037da:	4293      	cmp	r3, r2
 80037dc:	d100      	bne.n	80037e0 <HAL_TIM_ConfigClockSource+0x70>
 80037de:	e088      	b.n	80038f2 <HAL_TIM_ConfigClockSource+0x182>
 80037e0:	2280      	movs	r2, #128	@ 0x80
 80037e2:	0152      	lsls	r2, r2, #5
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d900      	bls.n	80037ea <HAL_TIM_ConfigClockSource+0x7a>
 80037e8:	e07e      	b.n	80038e8 <HAL_TIM_ConfigClockSource+0x178>
 80037ea:	2b70      	cmp	r3, #112	@ 0x70
 80037ec:	d018      	beq.n	8003820 <HAL_TIM_ConfigClockSource+0xb0>
 80037ee:	d900      	bls.n	80037f2 <HAL_TIM_ConfigClockSource+0x82>
 80037f0:	e07a      	b.n	80038e8 <HAL_TIM_ConfigClockSource+0x178>
 80037f2:	2b60      	cmp	r3, #96	@ 0x60
 80037f4:	d04f      	beq.n	8003896 <HAL_TIM_ConfigClockSource+0x126>
 80037f6:	d900      	bls.n	80037fa <HAL_TIM_ConfigClockSource+0x8a>
 80037f8:	e076      	b.n	80038e8 <HAL_TIM_ConfigClockSource+0x178>
 80037fa:	2b50      	cmp	r3, #80	@ 0x50
 80037fc:	d03b      	beq.n	8003876 <HAL_TIM_ConfigClockSource+0x106>
 80037fe:	d900      	bls.n	8003802 <HAL_TIM_ConfigClockSource+0x92>
 8003800:	e072      	b.n	80038e8 <HAL_TIM_ConfigClockSource+0x178>
 8003802:	2b40      	cmp	r3, #64	@ 0x40
 8003804:	d057      	beq.n	80038b6 <HAL_TIM_ConfigClockSource+0x146>
 8003806:	d900      	bls.n	800380a <HAL_TIM_ConfigClockSource+0x9a>
 8003808:	e06e      	b.n	80038e8 <HAL_TIM_ConfigClockSource+0x178>
 800380a:	2b30      	cmp	r3, #48	@ 0x30
 800380c:	d063      	beq.n	80038d6 <HAL_TIM_ConfigClockSource+0x166>
 800380e:	d86b      	bhi.n	80038e8 <HAL_TIM_ConfigClockSource+0x178>
 8003810:	2b20      	cmp	r3, #32
 8003812:	d060      	beq.n	80038d6 <HAL_TIM_ConfigClockSource+0x166>
 8003814:	d868      	bhi.n	80038e8 <HAL_TIM_ConfigClockSource+0x178>
 8003816:	2b00      	cmp	r3, #0
 8003818:	d05d      	beq.n	80038d6 <HAL_TIM_ConfigClockSource+0x166>
 800381a:	2b10      	cmp	r3, #16
 800381c:	d05b      	beq.n	80038d6 <HAL_TIM_ConfigClockSource+0x166>
 800381e:	e063      	b.n	80038e8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003830:	f000 fc38 	bl	80040a4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	689b      	ldr	r3, [r3, #8]
 800383a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800383c:	68bb      	ldr	r3, [r7, #8]
 800383e:	2277      	movs	r2, #119	@ 0x77
 8003840:	4313      	orrs	r3, r2
 8003842:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	68ba      	ldr	r2, [r7, #8]
 800384a:	609a      	str	r2, [r3, #8]
      break;
 800384c:	e052      	b.n	80038f4 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800385e:	f000 fc21 	bl	80040a4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	689a      	ldr	r2, [r3, #8]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	2180      	movs	r1, #128	@ 0x80
 800386e:	01c9      	lsls	r1, r1, #7
 8003870:	430a      	orrs	r2, r1
 8003872:	609a      	str	r2, [r3, #8]
      break;
 8003874:	e03e      	b.n	80038f4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003882:	001a      	movs	r2, r3
 8003884:	f000 fb92 	bl	8003fac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	2150      	movs	r1, #80	@ 0x50
 800388e:	0018      	movs	r0, r3
 8003890:	f000 fbec 	bl	800406c <TIM_ITRx_SetConfig>
      break;
 8003894:	e02e      	b.n	80038f4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80038a2:	001a      	movs	r2, r3
 80038a4:	f000 fbb0 	bl	8004008 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	2160      	movs	r1, #96	@ 0x60
 80038ae:	0018      	movs	r0, r3
 80038b0:	f000 fbdc 	bl	800406c <TIM_ITRx_SetConfig>
      break;
 80038b4:	e01e      	b.n	80038f4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80038c2:	001a      	movs	r2, r3
 80038c4:	f000 fb72 	bl	8003fac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	2140      	movs	r1, #64	@ 0x40
 80038ce:	0018      	movs	r0, r3
 80038d0:	f000 fbcc 	bl	800406c <TIM_ITRx_SetConfig>
      break;
 80038d4:	e00e      	b.n	80038f4 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681a      	ldr	r2, [r3, #0]
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	0019      	movs	r1, r3
 80038e0:	0010      	movs	r0, r2
 80038e2:	f000 fbc3 	bl	800406c <TIM_ITRx_SetConfig>
      break;
 80038e6:	e005      	b.n	80038f4 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80038e8:	230f      	movs	r3, #15
 80038ea:	18fb      	adds	r3, r7, r3
 80038ec:	2201      	movs	r2, #1
 80038ee:	701a      	strb	r2, [r3, #0]
      break;
 80038f0:	e000      	b.n	80038f4 <HAL_TIM_ConfigClockSource+0x184>
      break;
 80038f2:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	223d      	movs	r2, #61	@ 0x3d
 80038f8:	2101      	movs	r1, #1
 80038fa:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	223c      	movs	r2, #60	@ 0x3c
 8003900:	2100      	movs	r1, #0
 8003902:	5499      	strb	r1, [r3, r2]

  return status;
 8003904:	230f      	movs	r3, #15
 8003906:	18fb      	adds	r3, r7, r3
 8003908:	781b      	ldrb	r3, [r3, #0]
}
 800390a:	0018      	movs	r0, r3
 800390c:	46bd      	mov	sp, r7
 800390e:	b004      	add	sp, #16
 8003910:	bd80      	pop	{r7, pc}
 8003912:	46c0      	nop			@ (mov r8, r8)
 8003914:	ffceff88 	.word	0xffceff88
 8003918:	ffff00ff 	.word	0xffff00ff

0800391c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b084      	sub	sp, #16
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
 8003924:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	4a36      	ldr	r2, [pc, #216]	@ (8003a08 <TIM_Base_SetConfig+0xec>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d003      	beq.n	800393c <TIM_Base_SetConfig+0x20>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	4a35      	ldr	r2, [pc, #212]	@ (8003a0c <TIM_Base_SetConfig+0xf0>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d108      	bne.n	800394e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	2270      	movs	r2, #112	@ 0x70
 8003940:	4393      	bics	r3, r2
 8003942:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	68fa      	ldr	r2, [r7, #12]
 800394a:	4313      	orrs	r3, r2
 800394c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	4a2d      	ldr	r2, [pc, #180]	@ (8003a08 <TIM_Base_SetConfig+0xec>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d013      	beq.n	800397e <TIM_Base_SetConfig+0x62>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	4a2c      	ldr	r2, [pc, #176]	@ (8003a0c <TIM_Base_SetConfig+0xf0>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d00f      	beq.n	800397e <TIM_Base_SetConfig+0x62>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	4a2b      	ldr	r2, [pc, #172]	@ (8003a10 <TIM_Base_SetConfig+0xf4>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d00b      	beq.n	800397e <TIM_Base_SetConfig+0x62>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	4a2a      	ldr	r2, [pc, #168]	@ (8003a14 <TIM_Base_SetConfig+0xf8>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d007      	beq.n	800397e <TIM_Base_SetConfig+0x62>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	4a29      	ldr	r2, [pc, #164]	@ (8003a18 <TIM_Base_SetConfig+0xfc>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d003      	beq.n	800397e <TIM_Base_SetConfig+0x62>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	4a28      	ldr	r2, [pc, #160]	@ (8003a1c <TIM_Base_SetConfig+0x100>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d108      	bne.n	8003990 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	4a27      	ldr	r2, [pc, #156]	@ (8003a20 <TIM_Base_SetConfig+0x104>)
 8003982:	4013      	ands	r3, r2
 8003984:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	68db      	ldr	r3, [r3, #12]
 800398a:	68fa      	ldr	r2, [r7, #12]
 800398c:	4313      	orrs	r3, r2
 800398e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	2280      	movs	r2, #128	@ 0x80
 8003994:	4393      	bics	r3, r2
 8003996:	001a      	movs	r2, r3
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	695b      	ldr	r3, [r3, #20]
 800399c:	4313      	orrs	r3, r2
 800399e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	68fa      	ldr	r2, [r7, #12]
 80039a4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	689a      	ldr	r2, [r3, #8]
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	681a      	ldr	r2, [r3, #0]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	4a13      	ldr	r2, [pc, #76]	@ (8003a08 <TIM_Base_SetConfig+0xec>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d00b      	beq.n	80039d6 <TIM_Base_SetConfig+0xba>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	4a14      	ldr	r2, [pc, #80]	@ (8003a14 <TIM_Base_SetConfig+0xf8>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d007      	beq.n	80039d6 <TIM_Base_SetConfig+0xba>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	4a13      	ldr	r2, [pc, #76]	@ (8003a18 <TIM_Base_SetConfig+0xfc>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d003      	beq.n	80039d6 <TIM_Base_SetConfig+0xba>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	4a12      	ldr	r2, [pc, #72]	@ (8003a1c <TIM_Base_SetConfig+0x100>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d103      	bne.n	80039de <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	691a      	ldr	r2, [r3, #16]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2201      	movs	r2, #1
 80039e2:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	691b      	ldr	r3, [r3, #16]
 80039e8:	2201      	movs	r2, #1
 80039ea:	4013      	ands	r3, r2
 80039ec:	2b01      	cmp	r3, #1
 80039ee:	d106      	bne.n	80039fe <TIM_Base_SetConfig+0xe2>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	691b      	ldr	r3, [r3, #16]
 80039f4:	2201      	movs	r2, #1
 80039f6:	4393      	bics	r3, r2
 80039f8:	001a      	movs	r2, r3
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	611a      	str	r2, [r3, #16]
  }
}
 80039fe:	46c0      	nop			@ (mov r8, r8)
 8003a00:	46bd      	mov	sp, r7
 8003a02:	b004      	add	sp, #16
 8003a04:	bd80      	pop	{r7, pc}
 8003a06:	46c0      	nop			@ (mov r8, r8)
 8003a08:	40012c00 	.word	0x40012c00
 8003a0c:	40000400 	.word	0x40000400
 8003a10:	40002000 	.word	0x40002000
 8003a14:	40014000 	.word	0x40014000
 8003a18:	40014400 	.word	0x40014400
 8003a1c:	40014800 	.word	0x40014800
 8003a20:	fffffcff 	.word	0xfffffcff

08003a24 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b086      	sub	sp, #24
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
 8003a2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6a1b      	ldr	r3, [r3, #32]
 8003a32:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6a1b      	ldr	r3, [r3, #32]
 8003a38:	2201      	movs	r2, #1
 8003a3a:	4393      	bics	r3, r2
 8003a3c:	001a      	movs	r2, r3
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	699b      	ldr	r3, [r3, #24]
 8003a4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	4a32      	ldr	r2, [pc, #200]	@ (8003b1c <TIM_OC1_SetConfig+0xf8>)
 8003a52:	4013      	ands	r3, r2
 8003a54:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	2203      	movs	r2, #3
 8003a5a:	4393      	bics	r3, r2
 8003a5c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	68fa      	ldr	r2, [r7, #12]
 8003a64:	4313      	orrs	r3, r2
 8003a66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003a68:	697b      	ldr	r3, [r7, #20]
 8003a6a:	2202      	movs	r2, #2
 8003a6c:	4393      	bics	r3, r2
 8003a6e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	689b      	ldr	r3, [r3, #8]
 8003a74:	697a      	ldr	r2, [r7, #20]
 8003a76:	4313      	orrs	r3, r2
 8003a78:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	4a28      	ldr	r2, [pc, #160]	@ (8003b20 <TIM_OC1_SetConfig+0xfc>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d00b      	beq.n	8003a9a <TIM_OC1_SetConfig+0x76>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	4a27      	ldr	r2, [pc, #156]	@ (8003b24 <TIM_OC1_SetConfig+0x100>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d007      	beq.n	8003a9a <TIM_OC1_SetConfig+0x76>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	4a26      	ldr	r2, [pc, #152]	@ (8003b28 <TIM_OC1_SetConfig+0x104>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d003      	beq.n	8003a9a <TIM_OC1_SetConfig+0x76>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	4a25      	ldr	r2, [pc, #148]	@ (8003b2c <TIM_OC1_SetConfig+0x108>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d10c      	bne.n	8003ab4 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003a9a:	697b      	ldr	r3, [r7, #20]
 8003a9c:	2208      	movs	r2, #8
 8003a9e:	4393      	bics	r3, r2
 8003aa0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	68db      	ldr	r3, [r3, #12]
 8003aa6:	697a      	ldr	r2, [r7, #20]
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003aac:	697b      	ldr	r3, [r7, #20]
 8003aae:	2204      	movs	r2, #4
 8003ab0:	4393      	bics	r3, r2
 8003ab2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	4a1a      	ldr	r2, [pc, #104]	@ (8003b20 <TIM_OC1_SetConfig+0xfc>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d00b      	beq.n	8003ad4 <TIM_OC1_SetConfig+0xb0>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	4a19      	ldr	r2, [pc, #100]	@ (8003b24 <TIM_OC1_SetConfig+0x100>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d007      	beq.n	8003ad4 <TIM_OC1_SetConfig+0xb0>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	4a18      	ldr	r2, [pc, #96]	@ (8003b28 <TIM_OC1_SetConfig+0x104>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d003      	beq.n	8003ad4 <TIM_OC1_SetConfig+0xb0>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	4a17      	ldr	r2, [pc, #92]	@ (8003b2c <TIM_OC1_SetConfig+0x108>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d111      	bne.n	8003af8 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003ad4:	693b      	ldr	r3, [r7, #16]
 8003ad6:	4a16      	ldr	r2, [pc, #88]	@ (8003b30 <TIM_OC1_SetConfig+0x10c>)
 8003ad8:	4013      	ands	r3, r2
 8003ada:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003adc:	693b      	ldr	r3, [r7, #16]
 8003ade:	4a15      	ldr	r2, [pc, #84]	@ (8003b34 <TIM_OC1_SetConfig+0x110>)
 8003ae0:	4013      	ands	r3, r2
 8003ae2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	695b      	ldr	r3, [r3, #20]
 8003ae8:	693a      	ldr	r2, [r7, #16]
 8003aea:	4313      	orrs	r3, r2
 8003aec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	699b      	ldr	r3, [r3, #24]
 8003af2:	693a      	ldr	r2, [r7, #16]
 8003af4:	4313      	orrs	r3, r2
 8003af6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	693a      	ldr	r2, [r7, #16]
 8003afc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	68fa      	ldr	r2, [r7, #12]
 8003b02:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	685a      	ldr	r2, [r3, #4]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	697a      	ldr	r2, [r7, #20]
 8003b10:	621a      	str	r2, [r3, #32]
}
 8003b12:	46c0      	nop			@ (mov r8, r8)
 8003b14:	46bd      	mov	sp, r7
 8003b16:	b006      	add	sp, #24
 8003b18:	bd80      	pop	{r7, pc}
 8003b1a:	46c0      	nop			@ (mov r8, r8)
 8003b1c:	fffeff8f 	.word	0xfffeff8f
 8003b20:	40012c00 	.word	0x40012c00
 8003b24:	40014000 	.word	0x40014000
 8003b28:	40014400 	.word	0x40014400
 8003b2c:	40014800 	.word	0x40014800
 8003b30:	fffffeff 	.word	0xfffffeff
 8003b34:	fffffdff 	.word	0xfffffdff

08003b38 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b086      	sub	sp, #24
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
 8003b40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6a1b      	ldr	r3, [r3, #32]
 8003b46:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6a1b      	ldr	r3, [r3, #32]
 8003b4c:	2210      	movs	r2, #16
 8003b4e:	4393      	bics	r3, r2
 8003b50:	001a      	movs	r2, r3
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	699b      	ldr	r3, [r3, #24]
 8003b60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	4a2e      	ldr	r2, [pc, #184]	@ (8003c20 <TIM_OC2_SetConfig+0xe8>)
 8003b66:	4013      	ands	r3, r2
 8003b68:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	4a2d      	ldr	r2, [pc, #180]	@ (8003c24 <TIM_OC2_SetConfig+0xec>)
 8003b6e:	4013      	ands	r3, r2
 8003b70:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	021b      	lsls	r3, r3, #8
 8003b78:	68fa      	ldr	r2, [r7, #12]
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003b7e:	697b      	ldr	r3, [r7, #20]
 8003b80:	2220      	movs	r2, #32
 8003b82:	4393      	bics	r3, r2
 8003b84:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	689b      	ldr	r3, [r3, #8]
 8003b8a:	011b      	lsls	r3, r3, #4
 8003b8c:	697a      	ldr	r2, [r7, #20]
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	4a24      	ldr	r2, [pc, #144]	@ (8003c28 <TIM_OC2_SetConfig+0xf0>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d10d      	bne.n	8003bb6 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003b9a:	697b      	ldr	r3, [r7, #20]
 8003b9c:	2280      	movs	r2, #128	@ 0x80
 8003b9e:	4393      	bics	r3, r2
 8003ba0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	68db      	ldr	r3, [r3, #12]
 8003ba6:	011b      	lsls	r3, r3, #4
 8003ba8:	697a      	ldr	r2, [r7, #20]
 8003baa:	4313      	orrs	r3, r2
 8003bac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003bae:	697b      	ldr	r3, [r7, #20]
 8003bb0:	2240      	movs	r2, #64	@ 0x40
 8003bb2:	4393      	bics	r3, r2
 8003bb4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	4a1b      	ldr	r2, [pc, #108]	@ (8003c28 <TIM_OC2_SetConfig+0xf0>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d00b      	beq.n	8003bd6 <TIM_OC2_SetConfig+0x9e>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	4a1a      	ldr	r2, [pc, #104]	@ (8003c2c <TIM_OC2_SetConfig+0xf4>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d007      	beq.n	8003bd6 <TIM_OC2_SetConfig+0x9e>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	4a19      	ldr	r2, [pc, #100]	@ (8003c30 <TIM_OC2_SetConfig+0xf8>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d003      	beq.n	8003bd6 <TIM_OC2_SetConfig+0x9e>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	4a18      	ldr	r2, [pc, #96]	@ (8003c34 <TIM_OC2_SetConfig+0xfc>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d113      	bne.n	8003bfe <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	4a17      	ldr	r2, [pc, #92]	@ (8003c38 <TIM_OC2_SetConfig+0x100>)
 8003bda:	4013      	ands	r3, r2
 8003bdc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003bde:	693b      	ldr	r3, [r7, #16]
 8003be0:	4a16      	ldr	r2, [pc, #88]	@ (8003c3c <TIM_OC2_SetConfig+0x104>)
 8003be2:	4013      	ands	r3, r2
 8003be4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	695b      	ldr	r3, [r3, #20]
 8003bea:	009b      	lsls	r3, r3, #2
 8003bec:	693a      	ldr	r2, [r7, #16]
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	699b      	ldr	r3, [r3, #24]
 8003bf6:	009b      	lsls	r3, r3, #2
 8003bf8:	693a      	ldr	r2, [r7, #16]
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	693a      	ldr	r2, [r7, #16]
 8003c02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	68fa      	ldr	r2, [r7, #12]
 8003c08:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	685a      	ldr	r2, [r3, #4]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	697a      	ldr	r2, [r7, #20]
 8003c16:	621a      	str	r2, [r3, #32]
}
 8003c18:	46c0      	nop			@ (mov r8, r8)
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	b006      	add	sp, #24
 8003c1e:	bd80      	pop	{r7, pc}
 8003c20:	feff8fff 	.word	0xfeff8fff
 8003c24:	fffffcff 	.word	0xfffffcff
 8003c28:	40012c00 	.word	0x40012c00
 8003c2c:	40014000 	.word	0x40014000
 8003c30:	40014400 	.word	0x40014400
 8003c34:	40014800 	.word	0x40014800
 8003c38:	fffffbff 	.word	0xfffffbff
 8003c3c:	fffff7ff 	.word	0xfffff7ff

08003c40 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b086      	sub	sp, #24
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
 8003c48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6a1b      	ldr	r3, [r3, #32]
 8003c4e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6a1b      	ldr	r3, [r3, #32]
 8003c54:	4a33      	ldr	r2, [pc, #204]	@ (8003d24 <TIM_OC3_SetConfig+0xe4>)
 8003c56:	401a      	ands	r2, r3
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	69db      	ldr	r3, [r3, #28]
 8003c66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	4a2f      	ldr	r2, [pc, #188]	@ (8003d28 <TIM_OC3_SetConfig+0xe8>)
 8003c6c:	4013      	ands	r3, r2
 8003c6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	2203      	movs	r2, #3
 8003c74:	4393      	bics	r3, r2
 8003c76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	68fa      	ldr	r2, [r7, #12]
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003c82:	697b      	ldr	r3, [r7, #20]
 8003c84:	4a29      	ldr	r2, [pc, #164]	@ (8003d2c <TIM_OC3_SetConfig+0xec>)
 8003c86:	4013      	ands	r3, r2
 8003c88:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	689b      	ldr	r3, [r3, #8]
 8003c8e:	021b      	lsls	r3, r3, #8
 8003c90:	697a      	ldr	r2, [r7, #20]
 8003c92:	4313      	orrs	r3, r2
 8003c94:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	4a25      	ldr	r2, [pc, #148]	@ (8003d30 <TIM_OC3_SetConfig+0xf0>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d10d      	bne.n	8003cba <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	4a24      	ldr	r2, [pc, #144]	@ (8003d34 <TIM_OC3_SetConfig+0xf4>)
 8003ca2:	4013      	ands	r3, r2
 8003ca4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	68db      	ldr	r3, [r3, #12]
 8003caa:	021b      	lsls	r3, r3, #8
 8003cac:	697a      	ldr	r2, [r7, #20]
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003cb2:	697b      	ldr	r3, [r7, #20]
 8003cb4:	4a20      	ldr	r2, [pc, #128]	@ (8003d38 <TIM_OC3_SetConfig+0xf8>)
 8003cb6:	4013      	ands	r3, r2
 8003cb8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	4a1c      	ldr	r2, [pc, #112]	@ (8003d30 <TIM_OC3_SetConfig+0xf0>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d00b      	beq.n	8003cda <TIM_OC3_SetConfig+0x9a>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	4a1d      	ldr	r2, [pc, #116]	@ (8003d3c <TIM_OC3_SetConfig+0xfc>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d007      	beq.n	8003cda <TIM_OC3_SetConfig+0x9a>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	4a1c      	ldr	r2, [pc, #112]	@ (8003d40 <TIM_OC3_SetConfig+0x100>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d003      	beq.n	8003cda <TIM_OC3_SetConfig+0x9a>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	4a1b      	ldr	r2, [pc, #108]	@ (8003d44 <TIM_OC3_SetConfig+0x104>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d113      	bne.n	8003d02 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	4a1a      	ldr	r2, [pc, #104]	@ (8003d48 <TIM_OC3_SetConfig+0x108>)
 8003cde:	4013      	ands	r3, r2
 8003ce0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003ce2:	693b      	ldr	r3, [r7, #16]
 8003ce4:	4a19      	ldr	r2, [pc, #100]	@ (8003d4c <TIM_OC3_SetConfig+0x10c>)
 8003ce6:	4013      	ands	r3, r2
 8003ce8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	695b      	ldr	r3, [r3, #20]
 8003cee:	011b      	lsls	r3, r3, #4
 8003cf0:	693a      	ldr	r2, [r7, #16]
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	699b      	ldr	r3, [r3, #24]
 8003cfa:	011b      	lsls	r3, r3, #4
 8003cfc:	693a      	ldr	r2, [r7, #16]
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	693a      	ldr	r2, [r7, #16]
 8003d06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	68fa      	ldr	r2, [r7, #12]
 8003d0c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	685a      	ldr	r2, [r3, #4]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	697a      	ldr	r2, [r7, #20]
 8003d1a:	621a      	str	r2, [r3, #32]
}
 8003d1c:	46c0      	nop			@ (mov r8, r8)
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	b006      	add	sp, #24
 8003d22:	bd80      	pop	{r7, pc}
 8003d24:	fffffeff 	.word	0xfffffeff
 8003d28:	fffeff8f 	.word	0xfffeff8f
 8003d2c:	fffffdff 	.word	0xfffffdff
 8003d30:	40012c00 	.word	0x40012c00
 8003d34:	fffff7ff 	.word	0xfffff7ff
 8003d38:	fffffbff 	.word	0xfffffbff
 8003d3c:	40014000 	.word	0x40014000
 8003d40:	40014400 	.word	0x40014400
 8003d44:	40014800 	.word	0x40014800
 8003d48:	ffffefff 	.word	0xffffefff
 8003d4c:	ffffdfff 	.word	0xffffdfff

08003d50 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b086      	sub	sp, #24
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
 8003d58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6a1b      	ldr	r3, [r3, #32]
 8003d5e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6a1b      	ldr	r3, [r3, #32]
 8003d64:	4a26      	ldr	r2, [pc, #152]	@ (8003e00 <TIM_OC4_SetConfig+0xb0>)
 8003d66:	401a      	ands	r2, r3
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	69db      	ldr	r3, [r3, #28]
 8003d76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	4a22      	ldr	r2, [pc, #136]	@ (8003e04 <TIM_OC4_SetConfig+0xb4>)
 8003d7c:	4013      	ands	r3, r2
 8003d7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	4a21      	ldr	r2, [pc, #132]	@ (8003e08 <TIM_OC4_SetConfig+0xb8>)
 8003d84:	4013      	ands	r3, r2
 8003d86:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	021b      	lsls	r3, r3, #8
 8003d8e:	68fa      	ldr	r2, [r7, #12]
 8003d90:	4313      	orrs	r3, r2
 8003d92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003d94:	693b      	ldr	r3, [r7, #16]
 8003d96:	4a1d      	ldr	r2, [pc, #116]	@ (8003e0c <TIM_OC4_SetConfig+0xbc>)
 8003d98:	4013      	ands	r3, r2
 8003d9a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	689b      	ldr	r3, [r3, #8]
 8003da0:	031b      	lsls	r3, r3, #12
 8003da2:	693a      	ldr	r2, [r7, #16]
 8003da4:	4313      	orrs	r3, r2
 8003da6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	4a19      	ldr	r2, [pc, #100]	@ (8003e10 <TIM_OC4_SetConfig+0xc0>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d00b      	beq.n	8003dc8 <TIM_OC4_SetConfig+0x78>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	4a18      	ldr	r2, [pc, #96]	@ (8003e14 <TIM_OC4_SetConfig+0xc4>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d007      	beq.n	8003dc8 <TIM_OC4_SetConfig+0x78>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	4a17      	ldr	r2, [pc, #92]	@ (8003e18 <TIM_OC4_SetConfig+0xc8>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d003      	beq.n	8003dc8 <TIM_OC4_SetConfig+0x78>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	4a16      	ldr	r2, [pc, #88]	@ (8003e1c <TIM_OC4_SetConfig+0xcc>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d109      	bne.n	8003ddc <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003dc8:	697b      	ldr	r3, [r7, #20]
 8003dca:	4a15      	ldr	r2, [pc, #84]	@ (8003e20 <TIM_OC4_SetConfig+0xd0>)
 8003dcc:	4013      	ands	r3, r2
 8003dce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	695b      	ldr	r3, [r3, #20]
 8003dd4:	019b      	lsls	r3, r3, #6
 8003dd6:	697a      	ldr	r2, [r7, #20]
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	697a      	ldr	r2, [r7, #20]
 8003de0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	68fa      	ldr	r2, [r7, #12]
 8003de6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	685a      	ldr	r2, [r3, #4]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	693a      	ldr	r2, [r7, #16]
 8003df4:	621a      	str	r2, [r3, #32]
}
 8003df6:	46c0      	nop			@ (mov r8, r8)
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	b006      	add	sp, #24
 8003dfc:	bd80      	pop	{r7, pc}
 8003dfe:	46c0      	nop			@ (mov r8, r8)
 8003e00:	ffffefff 	.word	0xffffefff
 8003e04:	feff8fff 	.word	0xfeff8fff
 8003e08:	fffffcff 	.word	0xfffffcff
 8003e0c:	ffffdfff 	.word	0xffffdfff
 8003e10:	40012c00 	.word	0x40012c00
 8003e14:	40014000 	.word	0x40014000
 8003e18:	40014400 	.word	0x40014400
 8003e1c:	40014800 	.word	0x40014800
 8003e20:	ffffbfff 	.word	0xffffbfff

08003e24 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b086      	sub	sp, #24
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
 8003e2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6a1b      	ldr	r3, [r3, #32]
 8003e32:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6a1b      	ldr	r3, [r3, #32]
 8003e38:	4a23      	ldr	r2, [pc, #140]	@ (8003ec8 <TIM_OC5_SetConfig+0xa4>)
 8003e3a:	401a      	ands	r2, r3
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	4a1f      	ldr	r2, [pc, #124]	@ (8003ecc <TIM_OC5_SetConfig+0xa8>)
 8003e50:	4013      	ands	r3, r2
 8003e52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	68fa      	ldr	r2, [r7, #12]
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003e5e:	693b      	ldr	r3, [r7, #16]
 8003e60:	4a1b      	ldr	r2, [pc, #108]	@ (8003ed0 <TIM_OC5_SetConfig+0xac>)
 8003e62:	4013      	ands	r3, r2
 8003e64:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	689b      	ldr	r3, [r3, #8]
 8003e6a:	041b      	lsls	r3, r3, #16
 8003e6c:	693a      	ldr	r2, [r7, #16]
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	4a17      	ldr	r2, [pc, #92]	@ (8003ed4 <TIM_OC5_SetConfig+0xb0>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d00b      	beq.n	8003e92 <TIM_OC5_SetConfig+0x6e>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	4a16      	ldr	r2, [pc, #88]	@ (8003ed8 <TIM_OC5_SetConfig+0xb4>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d007      	beq.n	8003e92 <TIM_OC5_SetConfig+0x6e>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	4a15      	ldr	r2, [pc, #84]	@ (8003edc <TIM_OC5_SetConfig+0xb8>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d003      	beq.n	8003e92 <TIM_OC5_SetConfig+0x6e>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	4a14      	ldr	r2, [pc, #80]	@ (8003ee0 <TIM_OC5_SetConfig+0xbc>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d109      	bne.n	8003ea6 <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003e92:	697b      	ldr	r3, [r7, #20]
 8003e94:	4a0c      	ldr	r2, [pc, #48]	@ (8003ec8 <TIM_OC5_SetConfig+0xa4>)
 8003e96:	4013      	ands	r3, r2
 8003e98:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	695b      	ldr	r3, [r3, #20]
 8003e9e:	021b      	lsls	r3, r3, #8
 8003ea0:	697a      	ldr	r2, [r7, #20]
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	697a      	ldr	r2, [r7, #20]
 8003eaa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	68fa      	ldr	r2, [r7, #12]
 8003eb0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	685a      	ldr	r2, [r3, #4]
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	693a      	ldr	r2, [r7, #16]
 8003ebe:	621a      	str	r2, [r3, #32]
}
 8003ec0:	46c0      	nop			@ (mov r8, r8)
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	b006      	add	sp, #24
 8003ec6:	bd80      	pop	{r7, pc}
 8003ec8:	fffeffff 	.word	0xfffeffff
 8003ecc:	fffeff8f 	.word	0xfffeff8f
 8003ed0:	fffdffff 	.word	0xfffdffff
 8003ed4:	40012c00 	.word	0x40012c00
 8003ed8:	40014000 	.word	0x40014000
 8003edc:	40014400 	.word	0x40014400
 8003ee0:	40014800 	.word	0x40014800

08003ee4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b086      	sub	sp, #24
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
 8003eec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6a1b      	ldr	r3, [r3, #32]
 8003ef2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6a1b      	ldr	r3, [r3, #32]
 8003ef8:	4a24      	ldr	r2, [pc, #144]	@ (8003f8c <TIM_OC6_SetConfig+0xa8>)
 8003efa:	401a      	ands	r2, r3
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	4a20      	ldr	r2, [pc, #128]	@ (8003f90 <TIM_OC6_SetConfig+0xac>)
 8003f10:	4013      	ands	r3, r2
 8003f12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	021b      	lsls	r3, r3, #8
 8003f1a:	68fa      	ldr	r2, [r7, #12]
 8003f1c:	4313      	orrs	r3, r2
 8003f1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003f20:	693b      	ldr	r3, [r7, #16]
 8003f22:	4a1c      	ldr	r2, [pc, #112]	@ (8003f94 <TIM_OC6_SetConfig+0xb0>)
 8003f24:	4013      	ands	r3, r2
 8003f26:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	689b      	ldr	r3, [r3, #8]
 8003f2c:	051b      	lsls	r3, r3, #20
 8003f2e:	693a      	ldr	r2, [r7, #16]
 8003f30:	4313      	orrs	r3, r2
 8003f32:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	4a18      	ldr	r2, [pc, #96]	@ (8003f98 <TIM_OC6_SetConfig+0xb4>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d00b      	beq.n	8003f54 <TIM_OC6_SetConfig+0x70>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	4a17      	ldr	r2, [pc, #92]	@ (8003f9c <TIM_OC6_SetConfig+0xb8>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d007      	beq.n	8003f54 <TIM_OC6_SetConfig+0x70>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	4a16      	ldr	r2, [pc, #88]	@ (8003fa0 <TIM_OC6_SetConfig+0xbc>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d003      	beq.n	8003f54 <TIM_OC6_SetConfig+0x70>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	4a15      	ldr	r2, [pc, #84]	@ (8003fa4 <TIM_OC6_SetConfig+0xc0>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d109      	bne.n	8003f68 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003f54:	697b      	ldr	r3, [r7, #20]
 8003f56:	4a14      	ldr	r2, [pc, #80]	@ (8003fa8 <TIM_OC6_SetConfig+0xc4>)
 8003f58:	4013      	ands	r3, r2
 8003f5a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	695b      	ldr	r3, [r3, #20]
 8003f60:	029b      	lsls	r3, r3, #10
 8003f62:	697a      	ldr	r2, [r7, #20]
 8003f64:	4313      	orrs	r3, r2
 8003f66:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	697a      	ldr	r2, [r7, #20]
 8003f6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	68fa      	ldr	r2, [r7, #12]
 8003f72:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	685a      	ldr	r2, [r3, #4]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	693a      	ldr	r2, [r7, #16]
 8003f80:	621a      	str	r2, [r3, #32]
}
 8003f82:	46c0      	nop			@ (mov r8, r8)
 8003f84:	46bd      	mov	sp, r7
 8003f86:	b006      	add	sp, #24
 8003f88:	bd80      	pop	{r7, pc}
 8003f8a:	46c0      	nop			@ (mov r8, r8)
 8003f8c:	ffefffff 	.word	0xffefffff
 8003f90:	feff8fff 	.word	0xfeff8fff
 8003f94:	ffdfffff 	.word	0xffdfffff
 8003f98:	40012c00 	.word	0x40012c00
 8003f9c:	40014000 	.word	0x40014000
 8003fa0:	40014400 	.word	0x40014400
 8003fa4:	40014800 	.word	0x40014800
 8003fa8:	fffbffff 	.word	0xfffbffff

08003fac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b086      	sub	sp, #24
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	60f8      	str	r0, [r7, #12]
 8003fb4:	60b9      	str	r1, [r7, #8]
 8003fb6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	6a1b      	ldr	r3, [r3, #32]
 8003fbc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	6a1b      	ldr	r3, [r3, #32]
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	4393      	bics	r3, r2
 8003fc6:	001a      	movs	r2, r3
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	699b      	ldr	r3, [r3, #24]
 8003fd0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003fd2:	693b      	ldr	r3, [r7, #16]
 8003fd4:	22f0      	movs	r2, #240	@ 0xf0
 8003fd6:	4393      	bics	r3, r2
 8003fd8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	011b      	lsls	r3, r3, #4
 8003fde:	693a      	ldr	r2, [r7, #16]
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003fe4:	697b      	ldr	r3, [r7, #20]
 8003fe6:	220a      	movs	r2, #10
 8003fe8:	4393      	bics	r3, r2
 8003fea:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003fec:	697a      	ldr	r2, [r7, #20]
 8003fee:	68bb      	ldr	r3, [r7, #8]
 8003ff0:	4313      	orrs	r3, r2
 8003ff2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	693a      	ldr	r2, [r7, #16]
 8003ff8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	697a      	ldr	r2, [r7, #20]
 8003ffe:	621a      	str	r2, [r3, #32]
}
 8004000:	46c0      	nop			@ (mov r8, r8)
 8004002:	46bd      	mov	sp, r7
 8004004:	b006      	add	sp, #24
 8004006:	bd80      	pop	{r7, pc}

08004008 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b086      	sub	sp, #24
 800400c:	af00      	add	r7, sp, #0
 800400e:	60f8      	str	r0, [r7, #12]
 8004010:	60b9      	str	r1, [r7, #8]
 8004012:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	6a1b      	ldr	r3, [r3, #32]
 8004018:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	6a1b      	ldr	r3, [r3, #32]
 800401e:	2210      	movs	r2, #16
 8004020:	4393      	bics	r3, r2
 8004022:	001a      	movs	r2, r3
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	699b      	ldr	r3, [r3, #24]
 800402c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800402e:	693b      	ldr	r3, [r7, #16]
 8004030:	4a0d      	ldr	r2, [pc, #52]	@ (8004068 <TIM_TI2_ConfigInputStage+0x60>)
 8004032:	4013      	ands	r3, r2
 8004034:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	031b      	lsls	r3, r3, #12
 800403a:	693a      	ldr	r2, [r7, #16]
 800403c:	4313      	orrs	r3, r2
 800403e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004040:	697b      	ldr	r3, [r7, #20]
 8004042:	22a0      	movs	r2, #160	@ 0xa0
 8004044:	4393      	bics	r3, r2
 8004046:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	011b      	lsls	r3, r3, #4
 800404c:	697a      	ldr	r2, [r7, #20]
 800404e:	4313      	orrs	r3, r2
 8004050:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	693a      	ldr	r2, [r7, #16]
 8004056:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	697a      	ldr	r2, [r7, #20]
 800405c:	621a      	str	r2, [r3, #32]
}
 800405e:	46c0      	nop			@ (mov r8, r8)
 8004060:	46bd      	mov	sp, r7
 8004062:	b006      	add	sp, #24
 8004064:	bd80      	pop	{r7, pc}
 8004066:	46c0      	nop			@ (mov r8, r8)
 8004068:	ffff0fff 	.word	0xffff0fff

0800406c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b084      	sub	sp, #16
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
 8004074:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	689b      	ldr	r3, [r3, #8]
 800407a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	4a08      	ldr	r2, [pc, #32]	@ (80040a0 <TIM_ITRx_SetConfig+0x34>)
 8004080:	4013      	ands	r3, r2
 8004082:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004084:	683a      	ldr	r2, [r7, #0]
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	4313      	orrs	r3, r2
 800408a:	2207      	movs	r2, #7
 800408c:	4313      	orrs	r3, r2
 800408e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	68fa      	ldr	r2, [r7, #12]
 8004094:	609a      	str	r2, [r3, #8]
}
 8004096:	46c0      	nop			@ (mov r8, r8)
 8004098:	46bd      	mov	sp, r7
 800409a:	b004      	add	sp, #16
 800409c:	bd80      	pop	{r7, pc}
 800409e:	46c0      	nop			@ (mov r8, r8)
 80040a0:	ffcfff8f 	.word	0xffcfff8f

080040a4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b086      	sub	sp, #24
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	60f8      	str	r0, [r7, #12]
 80040ac:	60b9      	str	r1, [r7, #8]
 80040ae:	607a      	str	r2, [r7, #4]
 80040b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	689b      	ldr	r3, [r3, #8]
 80040b6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80040b8:	697b      	ldr	r3, [r7, #20]
 80040ba:	4a09      	ldr	r2, [pc, #36]	@ (80040e0 <TIM_ETR_SetConfig+0x3c>)
 80040bc:	4013      	ands	r3, r2
 80040be:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	021a      	lsls	r2, r3, #8
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	431a      	orrs	r2, r3
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	4313      	orrs	r3, r2
 80040cc:	697a      	ldr	r2, [r7, #20]
 80040ce:	4313      	orrs	r3, r2
 80040d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	697a      	ldr	r2, [r7, #20]
 80040d6:	609a      	str	r2, [r3, #8]
}
 80040d8:	46c0      	nop			@ (mov r8, r8)
 80040da:	46bd      	mov	sp, r7
 80040dc:	b006      	add	sp, #24
 80040de:	bd80      	pop	{r7, pc}
 80040e0:	ffff00ff 	.word	0xffff00ff

080040e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b084      	sub	sp, #16
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
 80040ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	223c      	movs	r2, #60	@ 0x3c
 80040f2:	5c9b      	ldrb	r3, [r3, r2]
 80040f4:	2b01      	cmp	r3, #1
 80040f6:	d101      	bne.n	80040fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80040f8:	2302      	movs	r3, #2
 80040fa:	e04f      	b.n	800419c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	223c      	movs	r2, #60	@ 0x3c
 8004100:	2101      	movs	r1, #1
 8004102:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	223d      	movs	r2, #61	@ 0x3d
 8004108:	2102      	movs	r1, #2
 800410a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	689b      	ldr	r3, [r3, #8]
 800411a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a20      	ldr	r2, [pc, #128]	@ (80041a4 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d108      	bne.n	8004138 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	4a1f      	ldr	r2, [pc, #124]	@ (80041a8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800412a:	4013      	ands	r3, r2
 800412c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	68fa      	ldr	r2, [r7, #12]
 8004134:	4313      	orrs	r3, r2
 8004136:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	2270      	movs	r2, #112	@ 0x70
 800413c:	4393      	bics	r3, r2
 800413e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	68fa      	ldr	r2, [r7, #12]
 8004146:	4313      	orrs	r3, r2
 8004148:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	68fa      	ldr	r2, [r7, #12]
 8004150:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4a13      	ldr	r2, [pc, #76]	@ (80041a4 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d009      	beq.n	8004170 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4a12      	ldr	r2, [pc, #72]	@ (80041ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d004      	beq.n	8004170 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4a11      	ldr	r2, [pc, #68]	@ (80041b0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d10c      	bne.n	800418a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	2280      	movs	r2, #128	@ 0x80
 8004174:	4393      	bics	r3, r2
 8004176:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	689b      	ldr	r3, [r3, #8]
 800417c:	68ba      	ldr	r2, [r7, #8]
 800417e:	4313      	orrs	r3, r2
 8004180:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	68ba      	ldr	r2, [r7, #8]
 8004188:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	223d      	movs	r2, #61	@ 0x3d
 800418e:	2101      	movs	r1, #1
 8004190:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	223c      	movs	r2, #60	@ 0x3c
 8004196:	2100      	movs	r1, #0
 8004198:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800419a:	2300      	movs	r3, #0
}
 800419c:	0018      	movs	r0, r3
 800419e:	46bd      	mov	sp, r7
 80041a0:	b004      	add	sp, #16
 80041a2:	bd80      	pop	{r7, pc}
 80041a4:	40012c00 	.word	0x40012c00
 80041a8:	ff0fffff 	.word	0xff0fffff
 80041ac:	40000400 	.word	0x40000400
 80041b0:	40014000 	.word	0x40014000

080041b4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b084      	sub	sp, #16
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
 80041bc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80041be:	2300      	movs	r3, #0
 80041c0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	223c      	movs	r2, #60	@ 0x3c
 80041c6:	5c9b      	ldrb	r3, [r3, r2]
 80041c8:	2b01      	cmp	r3, #1
 80041ca:	d101      	bne.n	80041d0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80041cc:	2302      	movs	r3, #2
 80041ce:	e06f      	b.n	80042b0 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	223c      	movs	r2, #60	@ 0x3c
 80041d4:	2101      	movs	r1, #1
 80041d6:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	22ff      	movs	r2, #255	@ 0xff
 80041dc:	4393      	bics	r3, r2
 80041de:	001a      	movs	r2, r3
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	68db      	ldr	r3, [r3, #12]
 80041e4:	4313      	orrs	r3, r2
 80041e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	4a33      	ldr	r2, [pc, #204]	@ (80042b8 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 80041ec:	401a      	ands	r2, r3
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	689b      	ldr	r3, [r3, #8]
 80041f2:	4313      	orrs	r3, r2
 80041f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	4a30      	ldr	r2, [pc, #192]	@ (80042bc <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 80041fa:	401a      	ands	r2, r3
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	4313      	orrs	r3, r2
 8004202:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	4a2e      	ldr	r2, [pc, #184]	@ (80042c0 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>)
 8004208:	401a      	ands	r2, r3
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4313      	orrs	r3, r2
 8004210:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	4a2b      	ldr	r2, [pc, #172]	@ (80042c4 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8004216:	401a      	ands	r2, r3
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	691b      	ldr	r3, [r3, #16]
 800421c:	4313      	orrs	r3, r2
 800421e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	4a29      	ldr	r2, [pc, #164]	@ (80042c8 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8004224:	401a      	ands	r2, r3
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	695b      	ldr	r3, [r3, #20]
 800422a:	4313      	orrs	r3, r2
 800422c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	4a26      	ldr	r2, [pc, #152]	@ (80042cc <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8004232:	401a      	ands	r2, r3
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004238:	4313      	orrs	r3, r2
 800423a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	4a24      	ldr	r2, [pc, #144]	@ (80042d0 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8004240:	401a      	ands	r2, r3
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	699b      	ldr	r3, [r3, #24]
 8004246:	041b      	lsls	r3, r3, #16
 8004248:	4313      	orrs	r3, r2
 800424a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	4a21      	ldr	r2, [pc, #132]	@ (80042d4 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8004250:	401a      	ands	r2, r3
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	69db      	ldr	r3, [r3, #28]
 8004256:	4313      	orrs	r3, r2
 8004258:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a1e      	ldr	r2, [pc, #120]	@ (80042d8 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d11c      	bne.n	800429e <HAL_TIMEx_ConfigBreakDeadTime+0xea>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	4a1d      	ldr	r2, [pc, #116]	@ (80042dc <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8004268:	401a      	ands	r2, r3
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800426e:	051b      	lsls	r3, r3, #20
 8004270:	4313      	orrs	r3, r2
 8004272:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	4a1a      	ldr	r2, [pc, #104]	@ (80042e0 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8004278:	401a      	ands	r2, r3
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	6a1b      	ldr	r3, [r3, #32]
 800427e:	4313      	orrs	r3, r2
 8004280:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	4a17      	ldr	r2, [pc, #92]	@ (80042e4 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8004286:	401a      	ands	r2, r3
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800428c:	4313      	orrs	r3, r2
 800428e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	4a15      	ldr	r2, [pc, #84]	@ (80042e8 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8004294:	401a      	ands	r2, r3
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800429a:	4313      	orrs	r3, r2
 800429c:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	68fa      	ldr	r2, [r7, #12]
 80042a4:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	223c      	movs	r2, #60	@ 0x3c
 80042aa:	2100      	movs	r1, #0
 80042ac:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80042ae:	2300      	movs	r3, #0
}
 80042b0:	0018      	movs	r0, r3
 80042b2:	46bd      	mov	sp, r7
 80042b4:	b004      	add	sp, #16
 80042b6:	bd80      	pop	{r7, pc}
 80042b8:	fffffcff 	.word	0xfffffcff
 80042bc:	fffffbff 	.word	0xfffffbff
 80042c0:	fffff7ff 	.word	0xfffff7ff
 80042c4:	ffffefff 	.word	0xffffefff
 80042c8:	ffffdfff 	.word	0xffffdfff
 80042cc:	ffffbfff 	.word	0xffffbfff
 80042d0:	fff0ffff 	.word	0xfff0ffff
 80042d4:	efffffff 	.word	0xefffffff
 80042d8:	40012c00 	.word	0x40012c00
 80042dc:	ff0fffff 	.word	0xff0fffff
 80042e0:	feffffff 	.word	0xfeffffff
 80042e4:	fdffffff 	.word	0xfdffffff
 80042e8:	dfffffff 	.word	0xdfffffff

080042ec <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80042ec:	b5b0      	push	{r4, r5, r7, lr}
 80042ee:	b0aa      	sub	sp, #168	@ 0xa8
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	69db      	ldr	r3, [r3, #28]
 80042fa:	22a4      	movs	r2, #164	@ 0xa4
 80042fc:	18b9      	adds	r1, r7, r2
 80042fe:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	20a0      	movs	r0, #160	@ 0xa0
 8004308:	1839      	adds	r1, r7, r0
 800430a:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	689b      	ldr	r3, [r3, #8]
 8004312:	249c      	movs	r4, #156	@ 0x9c
 8004314:	1939      	adds	r1, r7, r4
 8004316:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004318:	0011      	movs	r1, r2
 800431a:	18bb      	adds	r3, r7, r2
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4aa2      	ldr	r2, [pc, #648]	@ (80045a8 <HAL_UART_IRQHandler+0x2bc>)
 8004320:	4013      	ands	r3, r2
 8004322:	2298      	movs	r2, #152	@ 0x98
 8004324:	18bd      	adds	r5, r7, r2
 8004326:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8004328:	18bb      	adds	r3, r7, r2
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d11a      	bne.n	8004366 <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004330:	187b      	adds	r3, r7, r1
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	2220      	movs	r2, #32
 8004336:	4013      	ands	r3, r2
 8004338:	d015      	beq.n	8004366 <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800433a:	183b      	adds	r3, r7, r0
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	2220      	movs	r2, #32
 8004340:	4013      	ands	r3, r2
 8004342:	d105      	bne.n	8004350 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004344:	193b      	adds	r3, r7, r4
 8004346:	681a      	ldr	r2, [r3, #0]
 8004348:	2380      	movs	r3, #128	@ 0x80
 800434a:	055b      	lsls	r3, r3, #21
 800434c:	4013      	ands	r3, r2
 800434e:	d00a      	beq.n	8004366 <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004354:	2b00      	cmp	r3, #0
 8004356:	d100      	bne.n	800435a <HAL_UART_IRQHandler+0x6e>
 8004358:	e2dc      	b.n	8004914 <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800435e:	687a      	ldr	r2, [r7, #4]
 8004360:	0010      	movs	r0, r2
 8004362:	4798      	blx	r3
      }
      return;
 8004364:	e2d6      	b.n	8004914 <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004366:	2398      	movs	r3, #152	@ 0x98
 8004368:	18fb      	adds	r3, r7, r3
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d100      	bne.n	8004372 <HAL_UART_IRQHandler+0x86>
 8004370:	e122      	b.n	80045b8 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8004372:	239c      	movs	r3, #156	@ 0x9c
 8004374:	18fb      	adds	r3, r7, r3
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a8c      	ldr	r2, [pc, #560]	@ (80045ac <HAL_UART_IRQHandler+0x2c0>)
 800437a:	4013      	ands	r3, r2
 800437c:	d106      	bne.n	800438c <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800437e:	23a0      	movs	r3, #160	@ 0xa0
 8004380:	18fb      	adds	r3, r7, r3
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a8a      	ldr	r2, [pc, #552]	@ (80045b0 <HAL_UART_IRQHandler+0x2c4>)
 8004386:	4013      	ands	r3, r2
 8004388:	d100      	bne.n	800438c <HAL_UART_IRQHandler+0xa0>
 800438a:	e115      	b.n	80045b8 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800438c:	23a4      	movs	r3, #164	@ 0xa4
 800438e:	18fb      	adds	r3, r7, r3
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	2201      	movs	r2, #1
 8004394:	4013      	ands	r3, r2
 8004396:	d012      	beq.n	80043be <HAL_UART_IRQHandler+0xd2>
 8004398:	23a0      	movs	r3, #160	@ 0xa0
 800439a:	18fb      	adds	r3, r7, r3
 800439c:	681a      	ldr	r2, [r3, #0]
 800439e:	2380      	movs	r3, #128	@ 0x80
 80043a0:	005b      	lsls	r3, r3, #1
 80043a2:	4013      	ands	r3, r2
 80043a4:	d00b      	beq.n	80043be <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	2201      	movs	r2, #1
 80043ac:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2290      	movs	r2, #144	@ 0x90
 80043b2:	589b      	ldr	r3, [r3, r2]
 80043b4:	2201      	movs	r2, #1
 80043b6:	431a      	orrs	r2, r3
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2190      	movs	r1, #144	@ 0x90
 80043bc:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80043be:	23a4      	movs	r3, #164	@ 0xa4
 80043c0:	18fb      	adds	r3, r7, r3
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	2202      	movs	r2, #2
 80043c6:	4013      	ands	r3, r2
 80043c8:	d011      	beq.n	80043ee <HAL_UART_IRQHandler+0x102>
 80043ca:	239c      	movs	r3, #156	@ 0x9c
 80043cc:	18fb      	adds	r3, r7, r3
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	2201      	movs	r2, #1
 80043d2:	4013      	ands	r3, r2
 80043d4:	d00b      	beq.n	80043ee <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	2202      	movs	r2, #2
 80043dc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2290      	movs	r2, #144	@ 0x90
 80043e2:	589b      	ldr	r3, [r3, r2]
 80043e4:	2204      	movs	r2, #4
 80043e6:	431a      	orrs	r2, r3
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2190      	movs	r1, #144	@ 0x90
 80043ec:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80043ee:	23a4      	movs	r3, #164	@ 0xa4
 80043f0:	18fb      	adds	r3, r7, r3
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	2204      	movs	r2, #4
 80043f6:	4013      	ands	r3, r2
 80043f8:	d011      	beq.n	800441e <HAL_UART_IRQHandler+0x132>
 80043fa:	239c      	movs	r3, #156	@ 0x9c
 80043fc:	18fb      	adds	r3, r7, r3
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	2201      	movs	r2, #1
 8004402:	4013      	ands	r3, r2
 8004404:	d00b      	beq.n	800441e <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	2204      	movs	r2, #4
 800440c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2290      	movs	r2, #144	@ 0x90
 8004412:	589b      	ldr	r3, [r3, r2]
 8004414:	2202      	movs	r2, #2
 8004416:	431a      	orrs	r2, r3
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2190      	movs	r1, #144	@ 0x90
 800441c:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800441e:	23a4      	movs	r3, #164	@ 0xa4
 8004420:	18fb      	adds	r3, r7, r3
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	2208      	movs	r2, #8
 8004426:	4013      	ands	r3, r2
 8004428:	d017      	beq.n	800445a <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800442a:	23a0      	movs	r3, #160	@ 0xa0
 800442c:	18fb      	adds	r3, r7, r3
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	2220      	movs	r2, #32
 8004432:	4013      	ands	r3, r2
 8004434:	d105      	bne.n	8004442 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8004436:	239c      	movs	r3, #156	@ 0x9c
 8004438:	18fb      	adds	r3, r7, r3
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a5b      	ldr	r2, [pc, #364]	@ (80045ac <HAL_UART_IRQHandler+0x2c0>)
 800443e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004440:	d00b      	beq.n	800445a <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	2208      	movs	r2, #8
 8004448:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2290      	movs	r2, #144	@ 0x90
 800444e:	589b      	ldr	r3, [r3, r2]
 8004450:	2208      	movs	r2, #8
 8004452:	431a      	orrs	r2, r3
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2190      	movs	r1, #144	@ 0x90
 8004458:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800445a:	23a4      	movs	r3, #164	@ 0xa4
 800445c:	18fb      	adds	r3, r7, r3
 800445e:	681a      	ldr	r2, [r3, #0]
 8004460:	2380      	movs	r3, #128	@ 0x80
 8004462:	011b      	lsls	r3, r3, #4
 8004464:	4013      	ands	r3, r2
 8004466:	d013      	beq.n	8004490 <HAL_UART_IRQHandler+0x1a4>
 8004468:	23a0      	movs	r3, #160	@ 0xa0
 800446a:	18fb      	adds	r3, r7, r3
 800446c:	681a      	ldr	r2, [r3, #0]
 800446e:	2380      	movs	r3, #128	@ 0x80
 8004470:	04db      	lsls	r3, r3, #19
 8004472:	4013      	ands	r3, r2
 8004474:	d00c      	beq.n	8004490 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	2280      	movs	r2, #128	@ 0x80
 800447c:	0112      	lsls	r2, r2, #4
 800447e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2290      	movs	r2, #144	@ 0x90
 8004484:	589b      	ldr	r3, [r3, r2]
 8004486:	2220      	movs	r2, #32
 8004488:	431a      	orrs	r2, r3
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2190      	movs	r1, #144	@ 0x90
 800448e:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2290      	movs	r2, #144	@ 0x90
 8004494:	589b      	ldr	r3, [r3, r2]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d100      	bne.n	800449c <HAL_UART_IRQHandler+0x1b0>
 800449a:	e23d      	b.n	8004918 <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800449c:	23a4      	movs	r3, #164	@ 0xa4
 800449e:	18fb      	adds	r3, r7, r3
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	2220      	movs	r2, #32
 80044a4:	4013      	ands	r3, r2
 80044a6:	d015      	beq.n	80044d4 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80044a8:	23a0      	movs	r3, #160	@ 0xa0
 80044aa:	18fb      	adds	r3, r7, r3
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	2220      	movs	r2, #32
 80044b0:	4013      	ands	r3, r2
 80044b2:	d106      	bne.n	80044c2 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80044b4:	239c      	movs	r3, #156	@ 0x9c
 80044b6:	18fb      	adds	r3, r7, r3
 80044b8:	681a      	ldr	r2, [r3, #0]
 80044ba:	2380      	movs	r3, #128	@ 0x80
 80044bc:	055b      	lsls	r3, r3, #21
 80044be:	4013      	ands	r3, r2
 80044c0:	d008      	beq.n	80044d4 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d004      	beq.n	80044d4 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80044ce:	687a      	ldr	r2, [r7, #4]
 80044d0:	0010      	movs	r0, r2
 80044d2:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2290      	movs	r2, #144	@ 0x90
 80044d8:	589b      	ldr	r3, [r3, r2]
 80044da:	2194      	movs	r1, #148	@ 0x94
 80044dc:	187a      	adds	r2, r7, r1
 80044de:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	689b      	ldr	r3, [r3, #8]
 80044e6:	2240      	movs	r2, #64	@ 0x40
 80044e8:	4013      	ands	r3, r2
 80044ea:	2b40      	cmp	r3, #64	@ 0x40
 80044ec:	d004      	beq.n	80044f8 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80044ee:	187b      	adds	r3, r7, r1
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	2228      	movs	r2, #40	@ 0x28
 80044f4:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80044f6:	d04c      	beq.n	8004592 <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	0018      	movs	r0, r3
 80044fc:	f000 fa38 	bl	8004970 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	689b      	ldr	r3, [r3, #8]
 8004506:	2240      	movs	r2, #64	@ 0x40
 8004508:	4013      	ands	r3, r2
 800450a:	2b40      	cmp	r3, #64	@ 0x40
 800450c:	d13c      	bne.n	8004588 <HAL_UART_IRQHandler+0x29c>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800450e:	f3ef 8310 	mrs	r3, PRIMASK
 8004512:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 8004514:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004516:	2090      	movs	r0, #144	@ 0x90
 8004518:	183a      	adds	r2, r7, r0
 800451a:	6013      	str	r3, [r2, #0]
 800451c:	2301      	movs	r3, #1
 800451e:	667b      	str	r3, [r7, #100]	@ 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004520:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004522:	f383 8810 	msr	PRIMASK, r3
}
 8004526:	46c0      	nop			@ (mov r8, r8)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	689a      	ldr	r2, [r3, #8]
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	2140      	movs	r1, #64	@ 0x40
 8004534:	438a      	bics	r2, r1
 8004536:	609a      	str	r2, [r3, #8]
 8004538:	183b      	adds	r3, r7, r0
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800453e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004540:	f383 8810 	msr	PRIMASK, r3
}
 8004544:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2280      	movs	r2, #128	@ 0x80
 800454a:	589b      	ldr	r3, [r3, r2]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d016      	beq.n	800457e <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2280      	movs	r2, #128	@ 0x80
 8004554:	589b      	ldr	r3, [r3, r2]
 8004556:	4a17      	ldr	r2, [pc, #92]	@ (80045b4 <HAL_UART_IRQHandler+0x2c8>)
 8004558:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2280      	movs	r2, #128	@ 0x80
 800455e:	589b      	ldr	r3, [r3, r2]
 8004560:	0018      	movs	r0, r3
 8004562:	f7fd fdb3 	bl	80020cc <HAL_DMA_Abort_IT>
 8004566:	1e03      	subs	r3, r0, #0
 8004568:	d01c      	beq.n	80045a4 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2280      	movs	r2, #128	@ 0x80
 800456e:	589b      	ldr	r3, [r3, r2]
 8004570:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004572:	687a      	ldr	r2, [r7, #4]
 8004574:	2180      	movs	r1, #128	@ 0x80
 8004576:	5852      	ldr	r2, [r2, r1]
 8004578:	0010      	movs	r0, r2
 800457a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800457c:	e012      	b.n	80045a4 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	0018      	movs	r0, r3
 8004582:	f000 f9e1 	bl	8004948 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004586:	e00d      	b.n	80045a4 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	0018      	movs	r0, r3
 800458c:	f000 f9dc 	bl	8004948 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004590:	e008      	b.n	80045a4 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	0018      	movs	r0, r3
 8004596:	f000 f9d7 	bl	8004948 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2290      	movs	r2, #144	@ 0x90
 800459e:	2100      	movs	r1, #0
 80045a0:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80045a2:	e1b9      	b.n	8004918 <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045a4:	46c0      	nop			@ (mov r8, r8)
    return;
 80045a6:	e1b7      	b.n	8004918 <HAL_UART_IRQHandler+0x62c>
 80045a8:	0000080f 	.word	0x0000080f
 80045ac:	10000001 	.word	0x10000001
 80045b0:	04000120 	.word	0x04000120
 80045b4:	08004a3d 	.word	0x08004a3d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80045bc:	2b01      	cmp	r3, #1
 80045be:	d000      	beq.n	80045c2 <HAL_UART_IRQHandler+0x2d6>
 80045c0:	e13e      	b.n	8004840 <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80045c2:	23a4      	movs	r3, #164	@ 0xa4
 80045c4:	18fb      	adds	r3, r7, r3
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	2210      	movs	r2, #16
 80045ca:	4013      	ands	r3, r2
 80045cc:	d100      	bne.n	80045d0 <HAL_UART_IRQHandler+0x2e4>
 80045ce:	e137      	b.n	8004840 <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80045d0:	23a0      	movs	r3, #160	@ 0xa0
 80045d2:	18fb      	adds	r3, r7, r3
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	2210      	movs	r2, #16
 80045d8:	4013      	ands	r3, r2
 80045da:	d100      	bne.n	80045de <HAL_UART_IRQHandler+0x2f2>
 80045dc:	e130      	b.n	8004840 <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	2210      	movs	r2, #16
 80045e4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	689b      	ldr	r3, [r3, #8]
 80045ec:	2240      	movs	r2, #64	@ 0x40
 80045ee:	4013      	ands	r3, r2
 80045f0:	2b40      	cmp	r3, #64	@ 0x40
 80045f2:	d000      	beq.n	80045f6 <HAL_UART_IRQHandler+0x30a>
 80045f4:	e0a4      	b.n	8004740 <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2280      	movs	r2, #128	@ 0x80
 80045fa:	589b      	ldr	r3, [r3, r2]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	685a      	ldr	r2, [r3, #4]
 8004600:	217e      	movs	r1, #126	@ 0x7e
 8004602:	187b      	adds	r3, r7, r1
 8004604:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8004606:	187b      	adds	r3, r7, r1
 8004608:	881b      	ldrh	r3, [r3, #0]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d100      	bne.n	8004610 <HAL_UART_IRQHandler+0x324>
 800460e:	e185      	b.n	800491c <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	225c      	movs	r2, #92	@ 0x5c
 8004614:	5a9b      	ldrh	r3, [r3, r2]
 8004616:	187a      	adds	r2, r7, r1
 8004618:	8812      	ldrh	r2, [r2, #0]
 800461a:	429a      	cmp	r2, r3
 800461c:	d300      	bcc.n	8004620 <HAL_UART_IRQHandler+0x334>
 800461e:	e17d      	b.n	800491c <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	187a      	adds	r2, r7, r1
 8004624:	215e      	movs	r1, #94	@ 0x5e
 8004626:	8812      	ldrh	r2, [r2, #0]
 8004628:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2280      	movs	r2, #128	@ 0x80
 800462e:	589b      	ldr	r3, [r3, r2]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	2220      	movs	r2, #32
 8004636:	4013      	ands	r3, r2
 8004638:	d170      	bne.n	800471c <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800463a:	f3ef 8310 	mrs	r3, PRIMASK
 800463e:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8004640:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004642:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004644:	2301      	movs	r3, #1
 8004646:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004648:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800464a:	f383 8810 	msr	PRIMASK, r3
}
 800464e:	46c0      	nop			@ (mov r8, r8)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	681a      	ldr	r2, [r3, #0]
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	49b4      	ldr	r1, [pc, #720]	@ (800492c <HAL_UART_IRQHandler+0x640>)
 800465c:	400a      	ands	r2, r1
 800465e:	601a      	str	r2, [r3, #0]
 8004660:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004662:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004664:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004666:	f383 8810 	msr	PRIMASK, r3
}
 800466a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800466c:	f3ef 8310 	mrs	r3, PRIMASK
 8004670:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8004672:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004674:	677b      	str	r3, [r7, #116]	@ 0x74
 8004676:	2301      	movs	r3, #1
 8004678:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800467a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800467c:	f383 8810 	msr	PRIMASK, r3
}
 8004680:	46c0      	nop			@ (mov r8, r8)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	689a      	ldr	r2, [r3, #8]
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	2101      	movs	r1, #1
 800468e:	438a      	bics	r2, r1
 8004690:	609a      	str	r2, [r3, #8]
 8004692:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004694:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004696:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004698:	f383 8810 	msr	PRIMASK, r3
}
 800469c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800469e:	f3ef 8310 	mrs	r3, PRIMASK
 80046a2:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 80046a4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80046a6:	673b      	str	r3, [r7, #112]	@ 0x70
 80046a8:	2301      	movs	r3, #1
 80046aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80046ae:	f383 8810 	msr	PRIMASK, r3
}
 80046b2:	46c0      	nop			@ (mov r8, r8)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	689a      	ldr	r2, [r3, #8]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	2140      	movs	r1, #64	@ 0x40
 80046c0:	438a      	bics	r2, r1
 80046c2:	609a      	str	r2, [r3, #8]
 80046c4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80046c6:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046c8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80046ca:	f383 8810 	msr	PRIMASK, r3
}
 80046ce:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	228c      	movs	r2, #140	@ 0x8c
 80046d4:	2120      	movs	r1, #32
 80046d6:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2200      	movs	r2, #0
 80046dc:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80046de:	f3ef 8310 	mrs	r3, PRIMASK
 80046e2:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 80046e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046e6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80046e8:	2301      	movs	r3, #1
 80046ea:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046ec:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80046ee:	f383 8810 	msr	PRIMASK, r3
}
 80046f2:	46c0      	nop			@ (mov r8, r8)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	681a      	ldr	r2, [r3, #0]
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	2110      	movs	r1, #16
 8004700:	438a      	bics	r2, r1
 8004702:	601a      	str	r2, [r3, #0]
 8004704:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004706:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004708:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800470a:	f383 8810 	msr	PRIMASK, r3
}
 800470e:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2280      	movs	r2, #128	@ 0x80
 8004714:	589b      	ldr	r3, [r3, r2]
 8004716:	0018      	movs	r0, r3
 8004718:	f7fd fc76 	bl	8002008 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2202      	movs	r2, #2
 8004720:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	225c      	movs	r2, #92	@ 0x5c
 8004726:	5a9a      	ldrh	r2, [r3, r2]
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	215e      	movs	r1, #94	@ 0x5e
 800472c:	5a5b      	ldrh	r3, [r3, r1]
 800472e:	b29b      	uxth	r3, r3
 8004730:	1ad3      	subs	r3, r2, r3
 8004732:	b29a      	uxth	r2, r3
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	0011      	movs	r1, r2
 8004738:	0018      	movs	r0, r3
 800473a:	f000 f90d 	bl	8004958 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800473e:	e0ed      	b.n	800491c <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	225c      	movs	r2, #92	@ 0x5c
 8004744:	5a99      	ldrh	r1, [r3, r2]
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	225e      	movs	r2, #94	@ 0x5e
 800474a:	5a9b      	ldrh	r3, [r3, r2]
 800474c:	b29a      	uxth	r2, r3
 800474e:	208e      	movs	r0, #142	@ 0x8e
 8004750:	183b      	adds	r3, r7, r0
 8004752:	1a8a      	subs	r2, r1, r2
 8004754:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	225e      	movs	r2, #94	@ 0x5e
 800475a:	5a9b      	ldrh	r3, [r3, r2]
 800475c:	b29b      	uxth	r3, r3
 800475e:	2b00      	cmp	r3, #0
 8004760:	d100      	bne.n	8004764 <HAL_UART_IRQHandler+0x478>
 8004762:	e0dd      	b.n	8004920 <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 8004764:	183b      	adds	r3, r7, r0
 8004766:	881b      	ldrh	r3, [r3, #0]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d100      	bne.n	800476e <HAL_UART_IRQHandler+0x482>
 800476c:	e0d8      	b.n	8004920 <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800476e:	f3ef 8310 	mrs	r3, PRIMASK
 8004772:	60fb      	str	r3, [r7, #12]
  return(result);
 8004774:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004776:	2488      	movs	r4, #136	@ 0x88
 8004778:	193a      	adds	r2, r7, r4
 800477a:	6013      	str	r3, [r2, #0]
 800477c:	2301      	movs	r3, #1
 800477e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004780:	693b      	ldr	r3, [r7, #16]
 8004782:	f383 8810 	msr	PRIMASK, r3
}
 8004786:	46c0      	nop			@ (mov r8, r8)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	681a      	ldr	r2, [r3, #0]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4967      	ldr	r1, [pc, #412]	@ (8004930 <HAL_UART_IRQHandler+0x644>)
 8004794:	400a      	ands	r2, r1
 8004796:	601a      	str	r2, [r3, #0]
 8004798:	193b      	adds	r3, r7, r4
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800479e:	697b      	ldr	r3, [r7, #20]
 80047a0:	f383 8810 	msr	PRIMASK, r3
}
 80047a4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80047a6:	f3ef 8310 	mrs	r3, PRIMASK
 80047aa:	61bb      	str	r3, [r7, #24]
  return(result);
 80047ac:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80047ae:	2484      	movs	r4, #132	@ 0x84
 80047b0:	193a      	adds	r2, r7, r4
 80047b2:	6013      	str	r3, [r2, #0]
 80047b4:	2301      	movs	r3, #1
 80047b6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047b8:	69fb      	ldr	r3, [r7, #28]
 80047ba:	f383 8810 	msr	PRIMASK, r3
}
 80047be:	46c0      	nop			@ (mov r8, r8)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	689a      	ldr	r2, [r3, #8]
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	495a      	ldr	r1, [pc, #360]	@ (8004934 <HAL_UART_IRQHandler+0x648>)
 80047cc:	400a      	ands	r2, r1
 80047ce:	609a      	str	r2, [r3, #8]
 80047d0:	193b      	adds	r3, r7, r4
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047d6:	6a3b      	ldr	r3, [r7, #32]
 80047d8:	f383 8810 	msr	PRIMASK, r3
}
 80047dc:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	228c      	movs	r2, #140	@ 0x8c
 80047e2:	2120      	movs	r1, #32
 80047e4:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2200      	movs	r2, #0
 80047ea:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2200      	movs	r2, #0
 80047f0:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80047f2:	f3ef 8310 	mrs	r3, PRIMASK
 80047f6:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80047f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047fa:	2480      	movs	r4, #128	@ 0x80
 80047fc:	193a      	adds	r2, r7, r4
 80047fe:	6013      	str	r3, [r2, #0]
 8004800:	2301      	movs	r3, #1
 8004802:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004804:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004806:	f383 8810 	msr	PRIMASK, r3
}
 800480a:	46c0      	nop			@ (mov r8, r8)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	681a      	ldr	r2, [r3, #0]
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	2110      	movs	r1, #16
 8004818:	438a      	bics	r2, r1
 800481a:	601a      	str	r2, [r3, #0]
 800481c:	193b      	adds	r3, r7, r4
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004822:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004824:	f383 8810 	msr	PRIMASK, r3
}
 8004828:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2202      	movs	r2, #2
 800482e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004830:	183b      	adds	r3, r7, r0
 8004832:	881a      	ldrh	r2, [r3, #0]
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	0011      	movs	r1, r2
 8004838:	0018      	movs	r0, r3
 800483a:	f000 f88d 	bl	8004958 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800483e:	e06f      	b.n	8004920 <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004840:	23a4      	movs	r3, #164	@ 0xa4
 8004842:	18fb      	adds	r3, r7, r3
 8004844:	681a      	ldr	r2, [r3, #0]
 8004846:	2380      	movs	r3, #128	@ 0x80
 8004848:	035b      	lsls	r3, r3, #13
 800484a:	4013      	ands	r3, r2
 800484c:	d010      	beq.n	8004870 <HAL_UART_IRQHandler+0x584>
 800484e:	239c      	movs	r3, #156	@ 0x9c
 8004850:	18fb      	adds	r3, r7, r3
 8004852:	681a      	ldr	r2, [r3, #0]
 8004854:	2380      	movs	r3, #128	@ 0x80
 8004856:	03db      	lsls	r3, r3, #15
 8004858:	4013      	ands	r3, r2
 800485a:	d009      	beq.n	8004870 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	2280      	movs	r2, #128	@ 0x80
 8004862:	0352      	lsls	r2, r2, #13
 8004864:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	0018      	movs	r0, r3
 800486a:	f000 f92a 	bl	8004ac2 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800486e:	e05a      	b.n	8004926 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8004870:	23a4      	movs	r3, #164	@ 0xa4
 8004872:	18fb      	adds	r3, r7, r3
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	2280      	movs	r2, #128	@ 0x80
 8004878:	4013      	ands	r3, r2
 800487a:	d016      	beq.n	80048aa <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800487c:	23a0      	movs	r3, #160	@ 0xa0
 800487e:	18fb      	adds	r3, r7, r3
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	2280      	movs	r2, #128	@ 0x80
 8004884:	4013      	ands	r3, r2
 8004886:	d106      	bne.n	8004896 <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8004888:	239c      	movs	r3, #156	@ 0x9c
 800488a:	18fb      	adds	r3, r7, r3
 800488c:	681a      	ldr	r2, [r3, #0]
 800488e:	2380      	movs	r3, #128	@ 0x80
 8004890:	041b      	lsls	r3, r3, #16
 8004892:	4013      	ands	r3, r2
 8004894:	d009      	beq.n	80048aa <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800489a:	2b00      	cmp	r3, #0
 800489c:	d042      	beq.n	8004924 <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80048a2:	687a      	ldr	r2, [r7, #4]
 80048a4:	0010      	movs	r0, r2
 80048a6:	4798      	blx	r3
    }
    return;
 80048a8:	e03c      	b.n	8004924 <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80048aa:	23a4      	movs	r3, #164	@ 0xa4
 80048ac:	18fb      	adds	r3, r7, r3
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	2240      	movs	r2, #64	@ 0x40
 80048b2:	4013      	ands	r3, r2
 80048b4:	d00a      	beq.n	80048cc <HAL_UART_IRQHandler+0x5e0>
 80048b6:	23a0      	movs	r3, #160	@ 0xa0
 80048b8:	18fb      	adds	r3, r7, r3
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	2240      	movs	r2, #64	@ 0x40
 80048be:	4013      	ands	r3, r2
 80048c0:	d004      	beq.n	80048cc <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	0018      	movs	r0, r3
 80048c6:	f000 f8d0 	bl	8004a6a <UART_EndTransmit_IT>
    return;
 80048ca:	e02c      	b.n	8004926 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80048cc:	23a4      	movs	r3, #164	@ 0xa4
 80048ce:	18fb      	adds	r3, r7, r3
 80048d0:	681a      	ldr	r2, [r3, #0]
 80048d2:	2380      	movs	r3, #128	@ 0x80
 80048d4:	041b      	lsls	r3, r3, #16
 80048d6:	4013      	ands	r3, r2
 80048d8:	d00b      	beq.n	80048f2 <HAL_UART_IRQHandler+0x606>
 80048da:	23a0      	movs	r3, #160	@ 0xa0
 80048dc:	18fb      	adds	r3, r7, r3
 80048de:	681a      	ldr	r2, [r3, #0]
 80048e0:	2380      	movs	r3, #128	@ 0x80
 80048e2:	05db      	lsls	r3, r3, #23
 80048e4:	4013      	ands	r3, r2
 80048e6:	d004      	beq.n	80048f2 <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	0018      	movs	r0, r3
 80048ec:	f000 f8f9 	bl	8004ae2 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80048f0:	e019      	b.n	8004926 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80048f2:	23a4      	movs	r3, #164	@ 0xa4
 80048f4:	18fb      	adds	r3, r7, r3
 80048f6:	681a      	ldr	r2, [r3, #0]
 80048f8:	2380      	movs	r3, #128	@ 0x80
 80048fa:	045b      	lsls	r3, r3, #17
 80048fc:	4013      	ands	r3, r2
 80048fe:	d012      	beq.n	8004926 <HAL_UART_IRQHandler+0x63a>
 8004900:	23a0      	movs	r3, #160	@ 0xa0
 8004902:	18fb      	adds	r3, r7, r3
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	2b00      	cmp	r3, #0
 8004908:	da0d      	bge.n	8004926 <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	0018      	movs	r0, r3
 800490e:	f000 f8e0 	bl	8004ad2 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004912:	e008      	b.n	8004926 <HAL_UART_IRQHandler+0x63a>
      return;
 8004914:	46c0      	nop			@ (mov r8, r8)
 8004916:	e006      	b.n	8004926 <HAL_UART_IRQHandler+0x63a>
    return;
 8004918:	46c0      	nop			@ (mov r8, r8)
 800491a:	e004      	b.n	8004926 <HAL_UART_IRQHandler+0x63a>
      return;
 800491c:	46c0      	nop			@ (mov r8, r8)
 800491e:	e002      	b.n	8004926 <HAL_UART_IRQHandler+0x63a>
      return;
 8004920:	46c0      	nop			@ (mov r8, r8)
 8004922:	e000      	b.n	8004926 <HAL_UART_IRQHandler+0x63a>
    return;
 8004924:	46c0      	nop			@ (mov r8, r8)
  }
}
 8004926:	46bd      	mov	sp, r7
 8004928:	b02a      	add	sp, #168	@ 0xa8
 800492a:	bdb0      	pop	{r4, r5, r7, pc}
 800492c:	fffffeff 	.word	0xfffffeff
 8004930:	fffffedf 	.word	0xfffffedf
 8004934:	effffffe 	.word	0xeffffffe

08004938 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b082      	sub	sp, #8
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004940:	46c0      	nop			@ (mov r8, r8)
 8004942:	46bd      	mov	sp, r7
 8004944:	b002      	add	sp, #8
 8004946:	bd80      	pop	{r7, pc}

08004948 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b082      	sub	sp, #8
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004950:	46c0      	nop			@ (mov r8, r8)
 8004952:	46bd      	mov	sp, r7
 8004954:	b002      	add	sp, #8
 8004956:	bd80      	pop	{r7, pc}

08004958 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b082      	sub	sp, #8
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
 8004960:	000a      	movs	r2, r1
 8004962:	1cbb      	adds	r3, r7, #2
 8004964:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004966:	46c0      	nop			@ (mov r8, r8)
 8004968:	46bd      	mov	sp, r7
 800496a:	b002      	add	sp, #8
 800496c:	bd80      	pop	{r7, pc}
	...

08004970 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b08e      	sub	sp, #56	@ 0x38
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004978:	f3ef 8310 	mrs	r3, PRIMASK
 800497c:	617b      	str	r3, [r7, #20]
  return(result);
 800497e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004980:	637b      	str	r3, [r7, #52]	@ 0x34
 8004982:	2301      	movs	r3, #1
 8004984:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004986:	69bb      	ldr	r3, [r7, #24]
 8004988:	f383 8810 	msr	PRIMASK, r3
}
 800498c:	46c0      	nop			@ (mov r8, r8)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	681a      	ldr	r2, [r3, #0]
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4926      	ldr	r1, [pc, #152]	@ (8004a34 <UART_EndRxTransfer+0xc4>)
 800499a:	400a      	ands	r2, r1
 800499c:	601a      	str	r2, [r3, #0]
 800499e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049a0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049a2:	69fb      	ldr	r3, [r7, #28]
 80049a4:	f383 8810 	msr	PRIMASK, r3
}
 80049a8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80049aa:	f3ef 8310 	mrs	r3, PRIMASK
 80049ae:	623b      	str	r3, [r7, #32]
  return(result);
 80049b0:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80049b2:	633b      	str	r3, [r7, #48]	@ 0x30
 80049b4:	2301      	movs	r3, #1
 80049b6:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049ba:	f383 8810 	msr	PRIMASK, r3
}
 80049be:	46c0      	nop			@ (mov r8, r8)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	689a      	ldr	r2, [r3, #8]
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	491b      	ldr	r1, [pc, #108]	@ (8004a38 <UART_EndRxTransfer+0xc8>)
 80049cc:	400a      	ands	r2, r1
 80049ce:	609a      	str	r2, [r3, #8]
 80049d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049d6:	f383 8810 	msr	PRIMASK, r3
}
 80049da:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80049e0:	2b01      	cmp	r3, #1
 80049e2:	d118      	bne.n	8004a16 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80049e4:	f3ef 8310 	mrs	r3, PRIMASK
 80049e8:	60bb      	str	r3, [r7, #8]
  return(result);
 80049ea:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80049ee:	2301      	movs	r3, #1
 80049f0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	f383 8810 	msr	PRIMASK, r3
}
 80049f8:	46c0      	nop			@ (mov r8, r8)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	681a      	ldr	r2, [r3, #0]
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	2110      	movs	r1, #16
 8004a06:	438a      	bics	r2, r1
 8004a08:	601a      	str	r2, [r3, #0]
 8004a0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a0c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a0e:	693b      	ldr	r3, [r7, #16]
 8004a10:	f383 8810 	msr	PRIMASK, r3
}
 8004a14:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	228c      	movs	r2, #140	@ 0x8c
 8004a1a:	2120      	movs	r1, #32
 8004a1c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2200      	movs	r2, #0
 8004a22:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2200      	movs	r2, #0
 8004a28:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8004a2a:	46c0      	nop			@ (mov r8, r8)
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	b00e      	add	sp, #56	@ 0x38
 8004a30:	bd80      	pop	{r7, pc}
 8004a32:	46c0      	nop			@ (mov r8, r8)
 8004a34:	fffffedf 	.word	0xfffffedf
 8004a38:	effffffe 	.word	0xeffffffe

08004a3c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b084      	sub	sp, #16
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a48:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	225e      	movs	r2, #94	@ 0x5e
 8004a4e:	2100      	movs	r1, #0
 8004a50:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	2256      	movs	r2, #86	@ 0x56
 8004a56:	2100      	movs	r1, #0
 8004a58:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	0018      	movs	r0, r3
 8004a5e:	f7ff ff73 	bl	8004948 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004a62:	46c0      	nop			@ (mov r8, r8)
 8004a64:	46bd      	mov	sp, r7
 8004a66:	b004      	add	sp, #16
 8004a68:	bd80      	pop	{r7, pc}

08004a6a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004a6a:	b580      	push	{r7, lr}
 8004a6c:	b086      	sub	sp, #24
 8004a6e:	af00      	add	r7, sp, #0
 8004a70:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a72:	f3ef 8310 	mrs	r3, PRIMASK
 8004a76:	60bb      	str	r3, [r7, #8]
  return(result);
 8004a78:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004a7a:	617b      	str	r3, [r7, #20]
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	f383 8810 	msr	PRIMASK, r3
}
 8004a86:	46c0      	nop			@ (mov r8, r8)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	681a      	ldr	r2, [r3, #0]
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	2140      	movs	r1, #64	@ 0x40
 8004a94:	438a      	bics	r2, r1
 8004a96:	601a      	str	r2, [r3, #0]
 8004a98:	697b      	ldr	r3, [r7, #20]
 8004a9a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a9c:	693b      	ldr	r3, [r7, #16]
 8004a9e:	f383 8810 	msr	PRIMASK, r3
}
 8004aa2:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2288      	movs	r2, #136	@ 0x88
 8004aa8:	2120      	movs	r1, #32
 8004aaa:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2200      	movs	r2, #0
 8004ab0:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	0018      	movs	r0, r3
 8004ab6:	f7ff ff3f 	bl	8004938 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004aba:	46c0      	nop			@ (mov r8, r8)
 8004abc:	46bd      	mov	sp, r7
 8004abe:	b006      	add	sp, #24
 8004ac0:	bd80      	pop	{r7, pc}

08004ac2 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004ac2:	b580      	push	{r7, lr}
 8004ac4:	b082      	sub	sp, #8
 8004ac6:	af00      	add	r7, sp, #0
 8004ac8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004aca:	46c0      	nop			@ (mov r8, r8)
 8004acc:	46bd      	mov	sp, r7
 8004ace:	b002      	add	sp, #8
 8004ad0:	bd80      	pop	{r7, pc}

08004ad2 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8004ad2:	b580      	push	{r7, lr}
 8004ad4:	b082      	sub	sp, #8
 8004ad6:	af00      	add	r7, sp, #0
 8004ad8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8004ada:	46c0      	nop			@ (mov r8, r8)
 8004adc:	46bd      	mov	sp, r7
 8004ade:	b002      	add	sp, #8
 8004ae0:	bd80      	pop	{r7, pc}

08004ae2 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8004ae2:	b580      	push	{r7, lr}
 8004ae4:	b082      	sub	sp, #8
 8004ae6:	af00      	add	r7, sp, #0
 8004ae8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8004aea:	46c0      	nop			@ (mov r8, r8)
 8004aec:	46bd      	mov	sp, r7
 8004aee:	b002      	add	sp, #8
 8004af0:	bd80      	pop	{r7, pc}
	...

08004af4 <Reset_Handler>:



extern void Reset_Handler(void) __attribute__((__interrupt__));
void Reset_Handler(void)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b082      	sub	sp, #8
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	4b13      	ldr	r3, [pc, #76]	@ (8004b48 <Reset_Handler+0x54>)
 8004afc:	607b      	str	r3, [r7, #4]
 8004afe:	4b13      	ldr	r3, [pc, #76]	@ (8004b4c <Reset_Handler+0x58>)
 8004b00:	603b      	str	r3, [r7, #0]
 8004b02:	e007      	b.n	8004b14 <Reset_Handler+0x20>
 8004b04:	687a      	ldr	r2, [r7, #4]
 8004b06:	1d13      	adds	r3, r2, #4
 8004b08:	607b      	str	r3, [r7, #4]
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	1d19      	adds	r1, r3, #4
 8004b0e:	6039      	str	r1, [r7, #0]
 8004b10:	6812      	ldr	r2, [r2, #0]
 8004b12:	601a      	str	r2, [r3, #0]
 8004b14:	683a      	ldr	r2, [r7, #0]
 8004b16:	4b0e      	ldr	r3, [pc, #56]	@ (8004b50 <Reset_Handler+0x5c>)
 8004b18:	429a      	cmp	r2, r3
 8004b1a:	d3f3      	bcc.n	8004b04 <Reset_Handler+0x10>
 8004b1c:	4b0d      	ldr	r3, [pc, #52]	@ (8004b54 <Reset_Handler+0x60>)
 8004b1e:	603b      	str	r3, [r7, #0]
 8004b20:	e004      	b.n	8004b2c <Reset_Handler+0x38>
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	1d1a      	adds	r2, r3, #4
 8004b26:	603a      	str	r2, [r7, #0]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	601a      	str	r2, [r3, #0]
 8004b2c:	683a      	ldr	r2, [r7, #0]
    while (dst < &_edata)
        *dst++ = *src++;

    // Zero out the .bss segment
    dst = &_sbss;
    while (dst < &_ebss)
 8004b2e:	4b0a      	ldr	r3, [pc, #40]	@ (8004b58 <Reset_Handler+0x64>)
 8004b30:	429a      	cmp	r2, r3
 8004b32:	d3f6      	bcc.n	8004b22 <Reset_Handler+0x2e>
        *dst++ = 0;

    VTOR_REG = (uint32_t)vectors;
 8004b34:	4b09      	ldr	r3, [pc, #36]	@ (8004b5c <Reset_Handler+0x68>)
 8004b36:	4a0a      	ldr	r2, [pc, #40]	@ (8004b60 <Reset_Handler+0x6c>)
 8004b38:	601a      	str	r2, [r3, #0]

    //__libc_init_array();

    main();
 8004b3a:	f7fb fe5f 	bl	80007fc <main>
}
 8004b3e:	46c0      	nop			@ (mov r8, r8)
 8004b40:	46bd      	mov	sp, r7
 8004b42:	b002      	add	sp, #8
 8004b44:	bd80      	pop	{r7, pc}
 8004b46:	46c0      	nop			@ (mov r8, r8)
 8004b48:	08005018 	.word	0x08005018
 8004b4c:	20000000 	.word	0x20000000
 8004b50:	2000004c 	.word	0x2000004c
 8004b54:	2000004c 	.word	0x2000004c
 8004b58:	20000334 	.word	0x20000334
 8004b5c:	e000ed08 	.word	0xe000ed08
 8004b60:	080000b8 	.word	0x080000b8

08004b64 <hal_gpio_init>:
#include "stm32g0xx_ll_gpio.h"
#include "main.h"
#include "gpio.h"

void hal_gpio_init(void)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	af00      	add	r7, sp, #0
	// Call the GPIO initialization function setup by the STM32CubeIDE Device Configuration Tool:
	MX_GPIO_Init();
 8004b68:	f7fb fc8c 	bl	8000484 <MX_GPIO_Init>
}
 8004b6c:	46c0      	nop			@ (mov r8, r8)
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	bd80      	pop	{r7, pc}

08004b72 <hal_timer_get_systick>:
*
*  return values:  The current 1 millisecond systick count
*  remarks:
*********************************************************************************/
uint32_t hal_timer_get_systick(void)
{
 8004b72:	b580      	push	{r7, lr}
 8004b74:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8004b76:	f7fc fb5d 	bl	8001234 <HAL_GetTick>
 8004b7a:	0003      	movs	r3, r0
}
 8004b7c:	0018      	movs	r0, r3
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	bd80      	pop	{r7, pc}

08004b82 <hal_timer_get_ticks_since_count>:
*
*  remarks:
*********************************************************************************/

uint32_t hal_timer_get_ticks_since_count(uint32_t lastCount)
{
 8004b82:	b580      	push	{r7, lr}
 8004b84:	b084      	sub	sp, #16
 8004b86:	af00      	add	r7, sp, #0
 8004b88:	6078      	str	r0, [r7, #4]
    uint32_t result;
    uint32_t currentCount = hal_timer_get_systick();
 8004b8a:	f7ff fff2 	bl	8004b72 <hal_timer_get_systick>
 8004b8e:	0003      	movs	r3, r0
 8004b90:	60bb      	str	r3, [r7, #8]

    // Check if the counter rolled over:
    if (currentCount >= lastCount)
 8004b92:	68ba      	ldr	r2, [r7, #8]
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	429a      	cmp	r2, r3
 8004b98:	d304      	bcc.n	8004ba4 <hal_timer_get_ticks_since_count+0x22>
    {
        //Counter has not rolled over.
        result = currentCount - lastCount;
 8004b9a:	68ba      	ldr	r2, [r7, #8]
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	1ad3      	subs	r3, r2, r3
 8004ba0:	60fb      	str	r3, [r7, #12]
 8004ba2:	e004      	b.n	8004bae <hal_timer_get_ticks_since_count+0x2c>
    }
    else
    {
        // The counter rolled over / overflowed. Deal with it:
        result = UINT32_MAX - lastCount + currentCount;
 8004ba4:	68ba      	ldr	r2, [r7, #8]
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	1ad3      	subs	r3, r2, r3
 8004baa:	3b01      	subs	r3, #1
 8004bac:	60fb      	str	r3, [r7, #12]
    }

    return result;
 8004bae:	68fb      	ldr	r3, [r7, #12]
}
 8004bb0:	0018      	movs	r0, r3
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	b004      	add	sp, #16
 8004bb6:	bd80      	pop	{r7, pc}

08004bb8 <hal_timer_init>:
{
	SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk; /* disable systick */
}

void hal_timer_init(void)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	af00      	add	r7, sp, #0

	  // Note that the following "USING" macros are defined in perphdefs.h
#if defined  USING_TIM1
	  MX_TIM1_Init();
 8004bbc:	f7fb ff86 	bl	8000acc <MX_TIM1_Init>
#endif
#if defined  USING_TIM3
	  MX_TIM3_Init();
 8004bc0:	f7fc f84e 	bl	8000c60 <MX_TIM3_Init>
#endif
#if defined  USING_TIM6
	  MX_TIM6_Init();
 8004bc4:	f7fc f8cc 	bl	8000d60 <MX_TIM6_Init>
#endif
#if defined  USING_TIM14
	  MX_TIM14_Init();
#endif
#if defined  USING_TIM15
	  MX_TIM15_Init();
 8004bc8:	f7fc f904 	bl	8000dd4 <MX_TIM15_Init>
#endif
#if defined  USING_TIM17
	  MX_TIM17_Init();
#endif

    hal_timer_set_timer_for_blocking_delays(TIMER_BLOCKING_DELAY);
 8004bcc:	2003      	movs	r0, #3
 8004bce:	f000 f803 	bl	8004bd8 <hal_timer_set_timer_for_blocking_delays>

}
 8004bd2:	46c0      	nop			@ (mov r8, r8)
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	bd80      	pop	{r7, pc}

08004bd8 <hal_timer_set_timer_for_blocking_delays>:
const uint16_t counts_per_50usec	= ((50  * (BLOCKING_TIMER_CLK_FREQ / 1000000 )) - 1);
const uint16_t counts_per_100usec	= ((100  * (BLOCKING_TIMER_CLK_FREQ / 1000000 )) - 1);
const uint16_t counts_per_152usec	= ((152 * (BLOCKING_TIMER_CLK_FREQ / 1000000 )) - 1);

void hal_timer_set_timer_for_blocking_delays(enum timer_id timer_for_blocking_delays)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b082      	sub	sp, #8
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	0002      	movs	r2, r0
 8004be0:	1dfb      	adds	r3, r7, #7
 8004be2:	701a      	strb	r2, [r3, #0]
	/* a basic or general timer must be used for blocking delay functions */
	if ((timer_defs[timer_for_blocking_delays].type != TIM_BASIC) &&
 8004be4:	1dfb      	adds	r3, r7, #7
 8004be6:	781b      	ldrb	r3, [r3, #0]
 8004be8:	4a12      	ldr	r2, [pc, #72]	@ (8004c34 <hal_timer_set_timer_for_blocking_delays+0x5c>)
 8004bea:	011b      	lsls	r3, r3, #4
 8004bec:	18d3      	adds	r3, r2, r3
 8004bee:	3304      	adds	r3, #4
 8004bf0:	781b      	ldrb	r3, [r3, #0]
 8004bf2:	2b01      	cmp	r3, #1
 8004bf4:	d008      	beq.n	8004c08 <hal_timer_set_timer_for_blocking_delays+0x30>
		(timer_defs[timer_for_blocking_delays].type != TIM_GEN_PURPOSE))
 8004bf6:	1dfb      	adds	r3, r7, #7
 8004bf8:	781b      	ldrb	r3, [r3, #0]
 8004bfa:	4a0e      	ldr	r2, [pc, #56]	@ (8004c34 <hal_timer_set_timer_for_blocking_delays+0x5c>)
 8004bfc:	011b      	lsls	r3, r3, #4
 8004bfe:	18d3      	adds	r3, r2, r3
 8004c00:	3304      	adds	r3, #4
 8004c02:	781b      	ldrb	r3, [r3, #0]
	if ((timer_defs[timer_for_blocking_delays].type != TIM_BASIC) &&
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d110      	bne.n	8004c2a <hal_timer_set_timer_for_blocking_delays+0x52>
	{
		return;
	}

	blocking_delay_timer_ptr          = (TIM_TypeDef*)timer_defs[timer_for_blocking_delays].timer;
 8004c08:	1dfb      	adds	r3, r7, #7
 8004c0a:	781a      	ldrb	r2, [r3, #0]
 8004c0c:	4b09      	ldr	r3, [pc, #36]	@ (8004c34 <hal_timer_set_timer_for_blocking_delays+0x5c>)
 8004c0e:	0112      	lsls	r2, r2, #4
 8004c10:	58d2      	ldr	r2, [r2, r3]
 8004c12:	4b09      	ldr	r3, [pc, #36]	@ (8004c38 <hal_timer_set_timer_for_blocking_delays+0x60>)
 8004c14:	601a      	str	r2, [r3, #0]

	//blocking_delay_prescaler_pwr_of_2 = timer_defs[timer_for_blocking_delays].prescale_powers_of_2;

	// The STM32G070 uses a 16bit prescaler.
	blocking_delay_prescaler_16b = timer_defs[timer_for_blocking_delays].prescaler_16b;
 8004c16:	1dfb      	adds	r3, r7, #7
 8004c18:	781b      	ldrb	r3, [r3, #0]
 8004c1a:	4a06      	ldr	r2, [pc, #24]	@ (8004c34 <hal_timer_set_timer_for_blocking_delays+0x5c>)
 8004c1c:	011b      	lsls	r3, r3, #4
 8004c1e:	18d3      	adds	r3, r2, r3
 8004c20:	3306      	adds	r3, #6
 8004c22:	881a      	ldrh	r2, [r3, #0]
 8004c24:	4b05      	ldr	r3, [pc, #20]	@ (8004c3c <hal_timer_set_timer_for_blocking_delays+0x64>)
 8004c26:	801a      	strh	r2, [r3, #0]
 8004c28:	e000      	b.n	8004c2c <hal_timer_set_timer_for_blocking_delays+0x54>
		return;
 8004c2a:	46c0      	nop			@ (mov r8, r8)

}
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	b002      	add	sp, #8
 8004c30:	bd80      	pop	{r7, pc}
 8004c32:	46c0      	nop			@ (mov r8, r8)
 8004c34:	2000000c 	.word	0x2000000c
 8004c38:	20000300 	.word	0x20000300
 8004c3c:	20000304 	.word	0x20000304

08004c40 <irq_cb>:
	blocking_delay_timer_ptr->CR1 &= ~TIM_CR1_CEN;
}

#if defined TIM15
static void irq_cb(TIM_TypeDef *tmr)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b084      	sub	sp, #16
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
	for (uint8_t i=0u; i < NUMBER_OF_TIMERS; i++)
 8004c48:	230f      	movs	r3, #15
 8004c4a:	18fb      	adds	r3, r7, r3
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	701a      	strb	r2, [r3, #0]
 8004c50:	e020      	b.n	8004c94 <irq_cb+0x54>
	{
		if (timer_defs[i].timer == tmr)
 8004c52:	210f      	movs	r1, #15
 8004c54:	187b      	adds	r3, r7, r1
 8004c56:	781a      	ldrb	r2, [r3, #0]
 8004c58:	4b13      	ldr	r3, [pc, #76]	@ (8004ca8 <irq_cb+0x68>)
 8004c5a:	0112      	lsls	r2, r2, #4
 8004c5c:	58d3      	ldr	r3, [r2, r3]
 8004c5e:	687a      	ldr	r2, [r7, #4]
 8004c60:	429a      	cmp	r2, r3
 8004c62:	d111      	bne.n	8004c88 <irq_cb+0x48>
		{
			if (timer_defs[i].timer_irq_cb != NULL)
 8004c64:	187b      	adds	r3, r7, r1
 8004c66:	781b      	ldrb	r3, [r3, #0]
 8004c68:	4a0f      	ldr	r2, [pc, #60]	@ (8004ca8 <irq_cb+0x68>)
 8004c6a:	011b      	lsls	r3, r3, #4
 8004c6c:	18d3      	adds	r3, r2, r3
 8004c6e:	3308      	adds	r3, #8
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d008      	beq.n	8004c88 <irq_cb+0x48>
			{
				timer_defs[i].timer_irq_cb(0 /* dummy value for now, since this isn't implemented */);
 8004c76:	187b      	adds	r3, r7, r1
 8004c78:	781b      	ldrb	r3, [r3, #0]
 8004c7a:	4a0b      	ldr	r2, [pc, #44]	@ (8004ca8 <irq_cb+0x68>)
 8004c7c:	011b      	lsls	r3, r3, #4
 8004c7e:	18d3      	adds	r3, r2, r3
 8004c80:	3308      	adds	r3, #8
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	2000      	movs	r0, #0
 8004c86:	4798      	blx	r3
	for (uint8_t i=0u; i < NUMBER_OF_TIMERS; i++)
 8004c88:	210f      	movs	r1, #15
 8004c8a:	187b      	adds	r3, r7, r1
 8004c8c:	781a      	ldrb	r2, [r3, #0]
 8004c8e:	187b      	adds	r3, r7, r1
 8004c90:	3201      	adds	r2, #1
 8004c92:	701a      	strb	r2, [r3, #0]
 8004c94:	230f      	movs	r3, #15
 8004c96:	18fb      	adds	r3, r7, r3
 8004c98:	781b      	ldrb	r3, [r3, #0]
 8004c9a:	2b03      	cmp	r3, #3
 8004c9c:	d9d9      	bls.n	8004c52 <irq_cb+0x12>
			}
		}
	}
}
 8004c9e:	46c0      	nop			@ (mov r8, r8)
 8004ca0:	46c0      	nop			@ (mov r8, r8)
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	b004      	add	sp, #16
 8004ca6:	bd80      	pop	{r7, pc}
 8004ca8:	2000000c 	.word	0x2000000c

08004cac <TIM15_IRQHandler>:

void TIM15_IRQHandler(void)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	af00      	add	r7, sp, #0
	irq_cb(TIM15);
 8004cb0:	4b03      	ldr	r3, [pc, #12]	@ (8004cc0 <TIM15_IRQHandler+0x14>)
 8004cb2:	0018      	movs	r0, r3
 8004cb4:	f7ff ffc4 	bl	8004c40 <irq_cb>
}
 8004cb8:	46c0      	nop			@ (mov r8, r8)
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	bd80      	pop	{r7, pc}
 8004cbe:	46c0      	nop			@ (mov r8, r8)
 8004cc0:	40014000 	.word	0x40014000

08004cc4 <uart_irq_handler>:
{
	return ((uart_hal->uart_module->CR1 & USART_CR1_TCIE) != 0);
}

void uart_irq_handler(USART_TypeDef* uart_module)
{
 8004cc4:	b590      	push	{r4, r7, lr}
 8004cc6:	b085      	sub	sp, #20
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
	uint8_t byte_to_tx;

    /* if there are any error flags AND if in RX mode rather than Tx mode */
	if (uart_module->ISR & (USART_ISR_ORE /*| USART_ISR_NE | USART_ISR_FE*/) && (uart_module->CR2 & USART_CR2_SWAP))
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	69db      	ldr	r3, [r3, #28]
 8004cd0:	2208      	movs	r2, #8
 8004cd2:	4013      	ands	r3, r2
 8004cd4:	d018      	beq.n	8004d08 <uart_irq_handler+0x44>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	685a      	ldr	r2, [r3, #4]
 8004cda:	2380      	movs	r3, #128	@ 0x80
 8004cdc:	021b      	lsls	r3, r3, #8
 8004cde:	4013      	ands	r3, r2
 8004ce0:	d012      	beq.n	8004d08 <uart_irq_handler+0x44>
	{
		if (uart_module->ISR & USART_ISR_RXNE_RXFNE)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	69db      	ldr	r3, [r3, #28]
 8004ce6:	2220      	movs	r2, #32
 8004ce8:	4013      	ands	r3, r2
 8004cea:	d00d      	beq.n	8004d08 <uart_irq_handler+0x44>
			 * TWICE here because there's an overrun error which means we have TWO bytes 
			 * received, one in the RDR register, and then as soon as we read that once,
			 * there's a byte that gets shifted into the RDR register from the
			 * non-memory-mapped shift register.
			 */
			usart1_byte_received_callback(uart_module->RDR);
 8004cec:	4b72      	ldr	r3, [pc, #456]	@ (8004eb8 <uart_irq_handler+0x1f4>)
 8004cee:	681a      	ldr	r2, [r3, #0]
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cf4:	b2db      	uxtb	r3, r3
 8004cf6:	0018      	movs	r0, r3
 8004cf8:	4790      	blx	r2
			usart1_byte_received_callback(uart_module->RDR);
 8004cfa:	4b6f      	ldr	r3, [pc, #444]	@ (8004eb8 <uart_irq_handler+0x1f4>)
 8004cfc:	681a      	ldr	r2, [r3, #0]
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d02:	b2db      	uxtb	r3, r3
 8004d04:	0018      	movs	r0, r3
 8004d06:	4790      	blx	r2
		}
	}
		uart_module->ICR |= (USART_ICR_ORECF | USART_ICR_NECF | USART_ICR_FECF);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6a1b      	ldr	r3, [r3, #32]
 8004d0c:	220e      	movs	r2, #14
 8004d0e:	431a      	orrs	r2, r3
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	621a      	str	r2, [r3, #32]

    /* if a byte has been received AND if in Rx mode rather than Tx mode */
	if ((uart_module->ISR & USART_ISR_RXNE_RXFNE) && (uart_module->CR2 & USART_CR2_SWAP))
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	69db      	ldr	r3, [r3, #28]
 8004d18:	2220      	movs	r2, #32
 8004d1a:	4013      	ands	r3, r2
 8004d1c:	d01c      	beq.n	8004d58 <uart_irq_handler+0x94>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	685a      	ldr	r2, [r3, #4]
 8004d22:	2380      	movs	r3, #128	@ 0x80
 8004d24:	021b      	lsls	r3, r3, #8
 8004d26:	4013      	ands	r3, r2
 8004d28:	d016      	beq.n	8004d58 <uart_irq_handler+0x94>
	{
		/* Note that reading the RDR register clears the RXNE flag. */

		if (USART1 == uart_module)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	4a63      	ldr	r2, [pc, #396]	@ (8004ebc <uart_irq_handler+0x1f8>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d107      	bne.n	8004d42 <uart_irq_handler+0x7e>
		{
			/* call the USART1 received callback, passing it the received data */
			usart1_byte_received_callback(uart_module->RDR);
 8004d32:	4b61      	ldr	r3, [pc, #388]	@ (8004eb8 <uart_irq_handler+0x1f4>)
 8004d34:	681a      	ldr	r2, [r3, #0]
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d3a:	b2db      	uxtb	r3, r3
 8004d3c:	0018      	movs	r0, r3
 8004d3e:	4790      	blx	r2
 8004d40:	e00a      	b.n	8004d58 <uart_irq_handler+0x94>
		}
		else if (USART2 == uart_module)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	4a5e      	ldr	r2, [pc, #376]	@ (8004ec0 <uart_irq_handler+0x1fc>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d106      	bne.n	8004d58 <uart_irq_handler+0x94>
		{
			/* call the USART2 received callback, passing it the received data */
			usart2_byte_received_callback(uart_module->RDR);
 8004d4a:	4b5e      	ldr	r3, [pc, #376]	@ (8004ec4 <uart_irq_handler+0x200>)
 8004d4c:	681a      	ldr	r2, [r3, #0]
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d52:	b2db      	uxtb	r3, r3
 8004d54:	0018      	movs	r0, r3
 8004d56:	4790      	blx	r2
		uart_module->ICR |= USART_ICR_WUCF;
	}
#endif

    /* if the transmit buffer is empty AND we're set to Tx rather than Rx */
	if ((uart_module->ISR & USART_ISR_TXE_TXFNF) && !(uart_module->CR2 & USART_CR2_SWAP))
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	69db      	ldr	r3, [r3, #28]
 8004d5c:	2280      	movs	r2, #128	@ 0x80
 8004d5e:	4013      	ands	r3, r2
 8004d60:	d038      	beq.n	8004dd4 <uart_irq_handler+0x110>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	685a      	ldr	r2, [r3, #4]
 8004d66:	2380      	movs	r3, #128	@ 0x80
 8004d68:	021b      	lsls	r3, r3, #8
 8004d6a:	4013      	ands	r3, r2
 8004d6c:	d132      	bne.n	8004dd4 <uart_irq_handler+0x110>
	{
		if (USART1 == uart_module)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	4a52      	ldr	r2, [pc, #328]	@ (8004ebc <uart_irq_handler+0x1f8>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d115      	bne.n	8004da2 <uart_irq_handler+0xde>
		{
			/* call the USART1 transmit callback to get the byte to Tx */
			if (usart1_transmit_ready_callback(&byte_to_tx))
 8004d76:	4b54      	ldr	r3, [pc, #336]	@ (8004ec8 <uart_irq_handler+0x204>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	240e      	movs	r4, #14
 8004d7c:	193a      	adds	r2, r7, r4
 8004d7e:	0010      	movs	r0, r2
 8004d80:	4798      	blx	r3
 8004d82:	1e03      	subs	r3, r0, #0
 8004d84:	d005      	beq.n	8004d92 <uart_irq_handler+0xce>
			{
				/* transmit the byte */
				uart_module->TDR = byte_to_tx;
 8004d86:	193b      	adds	r3, r7, r4
 8004d88:	781b      	ldrb	r3, [r3, #0]
 8004d8a:	001a      	movs	r2, r3
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	629a      	str	r2, [r3, #40]	@ 0x28
 8004d90:	e020      	b.n	8004dd4 <uart_irq_handler+0x110>
			}
			else
			{
				/* disable the 'Tx buffer empty' interrupt */
				uart_module->CR1 &= ~USART_CR1_TXEIE_TXFNFIE;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	2280      	movs	r2, #128	@ 0x80
 8004d98:	4393      	bics	r3, r2
 8004d9a:	001a      	movs	r2, r3
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	601a      	str	r2, [r3, #0]
 8004da0:	e018      	b.n	8004dd4 <uart_irq_handler+0x110>
			}
		}
		else if (USART2 == uart_module)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	4a46      	ldr	r2, [pc, #280]	@ (8004ec0 <uart_irq_handler+0x1fc>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d114      	bne.n	8004dd4 <uart_irq_handler+0x110>
		{
			/* call the USART2 transmit callback to get the byte to Tx */
			if (usart2_transmit_ready_callback(&byte_to_tx))
 8004daa:	4b48      	ldr	r3, [pc, #288]	@ (8004ecc <uart_irq_handler+0x208>)
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	240e      	movs	r4, #14
 8004db0:	193a      	adds	r2, r7, r4
 8004db2:	0010      	movs	r0, r2
 8004db4:	4798      	blx	r3
 8004db6:	1e03      	subs	r3, r0, #0
 8004db8:	d005      	beq.n	8004dc6 <uart_irq_handler+0x102>
			{
				/* transmit the byte */
				uart_module->TDR = byte_to_tx;
 8004dba:	193b      	adds	r3, r7, r4
 8004dbc:	781b      	ldrb	r3, [r3, #0]
 8004dbe:	001a      	movs	r2, r3
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	629a      	str	r2, [r3, #40]	@ 0x28
 8004dc4:	e006      	b.n	8004dd4 <uart_irq_handler+0x110>
			}
			else
			{
				/* disable the 'Tx buffer empty' interrupt */
				uart_module->CR1 &= ~USART_CR1_TXEIE_TXFNFIE;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	2280      	movs	r2, #128	@ 0x80
 8004dcc:	4393      	bics	r3, r2
 8004dce:	001a      	movs	r2, r3
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	601a      	str	r2, [r3, #0]
		}
	}

/* TODO - need a callback in the UART driver for the 152 usec delay */
    /* if the transmission complete flag is set AND we're set to Tx rather than Rx */
	if ((uart_module->ISR & USART_ISR_TC) && !(uart_module->CR2 & USART_CR2_SWAP))
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	69db      	ldr	r3, [r3, #28]
 8004dd8:	2240      	movs	r2, #64	@ 0x40
 8004dda:	4013      	ands	r3, r2
 8004ddc:	d100      	bne.n	8004de0 <uart_irq_handler+0x11c>
 8004dde:	e067      	b.n	8004eb0 <uart_irq_handler+0x1ec>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	685a      	ldr	r2, [r3, #4]
 8004de4:	2380      	movs	r3, #128	@ 0x80
 8004de6:	021b      	lsls	r3, r3, #8
 8004de8:	4013      	ands	r3, r2
 8004dea:	d161      	bne.n	8004eb0 <uart_irq_handler+0x1ec>
	{
		if (USART1 == uart_module)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	4a33      	ldr	r2, [pc, #204]	@ (8004ebc <uart_irq_handler+0x1f8>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d107      	bne.n	8004e04 <uart_irq_handler+0x140>
		{
			if (usart1_blocking_delay)
 8004df4:	4b36      	ldr	r3, [pc, #216]	@ (8004ed0 <uart_irq_handler+0x20c>)
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d00e      	beq.n	8004e1a <uart_irq_handler+0x156>
			{
				/* delay to ride through the IR1 key glitch */
				usart1_blocking_delay();
 8004dfc:	4b34      	ldr	r3, [pc, #208]	@ (8004ed0 <uart_irq_handler+0x20c>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4798      	blx	r3
 8004e02:	e00a      	b.n	8004e1a <uart_irq_handler+0x156>
			}
		}
		else if (USART2 == uart_module)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	4a2e      	ldr	r2, [pc, #184]	@ (8004ec0 <uart_irq_handler+0x1fc>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d106      	bne.n	8004e1a <uart_irq_handler+0x156>
		{
			if (usart2_blocking_delay)
 8004e0c:	4b31      	ldr	r3, [pc, #196]	@ (8004ed4 <uart_irq_handler+0x210>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d002      	beq.n	8004e1a <uart_irq_handler+0x156>
			{
				/* delay to ride through the IR1 key glitch */
				usart2_blocking_delay();
 8004e14:	4b2f      	ldr	r3, [pc, #188]	@ (8004ed4 <uart_irq_handler+0x210>)
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4798      	blx	r3

		/* switch tx/rx pin to rx if needed */
		{
			uart_mode_t uart_mode;

			if (USART1 == uart_module)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	4a27      	ldr	r2, [pc, #156]	@ (8004ebc <uart_irq_handler+0x1f8>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d105      	bne.n	8004e2e <uart_irq_handler+0x16a>
			{
				uart_mode = usart1_mode;
 8004e22:	230f      	movs	r3, #15
 8004e24:	18fb      	adds	r3, r7, r3
 8004e26:	4a2c      	ldr	r2, [pc, #176]	@ (8004ed8 <uart_irq_handler+0x214>)
 8004e28:	7812      	ldrb	r2, [r2, #0]
 8004e2a:	701a      	strb	r2, [r3, #0]
 8004e2c:	e00d      	b.n	8004e4a <uart_irq_handler+0x186>
			}
			else if (USART2 == uart_module)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	4a23      	ldr	r2, [pc, #140]	@ (8004ec0 <uart_irq_handler+0x1fc>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d105      	bne.n	8004e42 <uart_irq_handler+0x17e>
			{
				uart_mode = usart2_mode;
 8004e36:	230f      	movs	r3, #15
 8004e38:	18fb      	adds	r3, r7, r3
 8004e3a:	4a28      	ldr	r2, [pc, #160]	@ (8004edc <uart_irq_handler+0x218>)
 8004e3c:	7812      	ldrb	r2, [r2, #0]
 8004e3e:	701a      	strb	r2, [r3, #0]
 8004e40:	e003      	b.n	8004e4a <uart_irq_handler+0x186>
				uart_mode = lpuart1_mode;
			}
#endif
			else
			{
				uart_mode = 0; /* Should never get here!  This line is just to ensure consistency on failure. */
 8004e42:	230f      	movs	r3, #15
 8004e44:	18fb      	adds	r3, r7, r3
 8004e46:	2200      	movs	r2, #0
 8004e48:	701a      	strb	r2, [r3, #0]
			}

			if ((ONE_WIRE_NO_EXTERNAL_PULLUP == uart_mode) || (ONE_WIRE == uart_mode))
 8004e4a:	220f      	movs	r2, #15
 8004e4c:	18bb      	adds	r3, r7, r2
 8004e4e:	781b      	ldrb	r3, [r3, #0]
 8004e50:	2b03      	cmp	r3, #3
 8004e52:	d003      	beq.n	8004e5c <uart_irq_handler+0x198>
 8004e54:	18bb      	adds	r3, r7, r2
 8004e56:	781b      	ldrb	r3, [r3, #0]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d119      	bne.n	8004e90 <uart_irq_handler+0x1cc>
			{
				/* if tx/rx pin is set to tx... */
				if (!(uart_module->CR2 & USART_CR2_SWAP))
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	685a      	ldr	r2, [r3, #4]
 8004e60:	2380      	movs	r3, #128	@ 0x80
 8004e62:	021b      	lsls	r3, r3, #8
 8004e64:	4013      	ands	r3, r2
 8004e66:	d113      	bne.n	8004e90 <uart_irq_handler+0x1cc>
				{
					/* ...then set pin to rx */
					uart_module->CR1 &= ~USART_CR1_UE;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	2201      	movs	r2, #1
 8004e6e:	4393      	bics	r3, r2
 8004e70:	001a      	movs	r2, r3
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	601a      	str	r2, [r3, #0]
					uart_module->CR2 |=  USART_CR2_SWAP; /* can only modify CR2 when UE is 0 */
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	685b      	ldr	r3, [r3, #4]
 8004e7a:	2280      	movs	r2, #128	@ 0x80
 8004e7c:	0212      	lsls	r2, r2, #8
 8004e7e:	431a      	orrs	r2, r3
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	605a      	str	r2, [r3, #4]
					uart_module->CR1 |=  USART_CR1_UE;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	2201      	movs	r2, #1
 8004e8a:	431a      	orrs	r2, r3
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	601a      	str	r2, [r3, #0]
				}
			}
		}

		/* re-enable the receiver and receive interrupt */
		uart_module->CR1 |= (USART_CR1_RE | USART_CR1_RXNEIE_RXFNEIE);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	2224      	movs	r2, #36	@ 0x24
 8004e96:	431a      	orrs	r2, r3
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	601a      	str	r2, [r3, #0]

		/* disable the 'Tx complete' interrupt */
		uart_module->CR1 &= ~USART_CR1_TCIE;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	2240      	movs	r2, #64	@ 0x40
 8004ea2:	4393      	bics	r3, r2
 8004ea4:	001a      	movs	r2, r3
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	601a      	str	r2, [r3, #0]

		/* clear the TC bit */
		uart_module->ICR = USART_ICR_TCCF;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2240      	movs	r2, #64	@ 0x40
 8004eae:	621a      	str	r2, [r3, #32]
	}
}
 8004eb0:	46c0      	nop			@ (mov r8, r8)
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	b005      	add	sp, #20
 8004eb6:	bd90      	pop	{r4, r7, pc}
 8004eb8:	2000030c 	.word	0x2000030c
 8004ebc:	40013800 	.word	0x40013800
 8004ec0:	40004400 	.word	0x40004400
 8004ec4:	20000314 	.word	0x20000314
 8004ec8:	20000308 	.word	0x20000308
 8004ecc:	20000310 	.word	0x20000310
 8004ed0:	20000318 	.word	0x20000318
 8004ed4:	2000031c 	.word	0x2000031c
 8004ed8:	20000320 	.word	0x20000320
 8004edc:	20000321 	.word	0x20000321

08004ee0 <USART1_IRQHandler>:


#ifndef USART1_IRQHandler
void USART1_IRQHandler(void)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	af00      	add	r7, sp, #0
	uart_irq_handler(USART1);
 8004ee4:	4b03      	ldr	r3, [pc, #12]	@ (8004ef4 <USART1_IRQHandler+0x14>)
 8004ee6:	0018      	movs	r0, r3
 8004ee8:	f7ff feec 	bl	8004cc4 <uart_irq_handler>
}
 8004eec:	46c0      	nop			@ (mov r8, r8)
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	bd80      	pop	{r7, pc}
 8004ef2:	46c0      	nop			@ (mov r8, r8)
 8004ef4:	40013800 	.word	0x40013800

08004ef8 <USART2_IRQHandler>:
#endif

#ifndef USART2_IRQHandler

void USART2_IRQHandler(void)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	af00      	add	r7, sp, #0
	uart_irq_handler(USART2);
 8004efc:	4b03      	ldr	r3, [pc, #12]	@ (8004f0c <USART2_IRQHandler+0x14>)
 8004efe:	0018      	movs	r0, r3
 8004f00:	f7ff fee0 	bl	8004cc4 <uart_irq_handler>
}
 8004f04:	46c0      	nop			@ (mov r8, r8)
 8004f06:	46bd      	mov	sp, r7
 8004f08:	bd80      	pop	{r7, pc}
 8004f0a:	46c0      	nop			@ (mov r8, r8)
 8004f0c:	40004400 	.word	0x40004400

08004f10 <hal_watchdog_init>:


static IWDG_HandleTypeDef wdg_hdl = {0};

void hal_watchdog_init(void)
{
 8004f10:	b5b0      	push	{r4, r5, r7, lr}
 8004f12:	af00      	add	r7, sp, #0
    // Call the watch dog initialization function that was created by the hardware configuration tool.
	MX_IWDG_Init();
 8004f14:	f7fb fc52 	bl	80007bc <MX_IWDG_Init>

	wdg_hdl = hiwdg; // Use the watch dog handle created by the STM32 Hardware Configuration Tool.
 8004f18:	4b04      	ldr	r3, [pc, #16]	@ (8004f2c <hal_watchdog_init+0x1c>)
 8004f1a:	4a05      	ldr	r2, [pc, #20]	@ (8004f30 <hal_watchdog_init+0x20>)
 8004f1c:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004f1e:	c313      	stmia	r3!, {r0, r1, r4}
 8004f20:	6812      	ldr	r2, [r2, #0]
 8004f22:	601a      	str	r2, [r3, #0]

}
 8004f24:	46c0      	nop			@ (mov r8, r8)
 8004f26:	46bd      	mov	sp, r7
 8004f28:	bdb0      	pop	{r4, r5, r7, pc}
 8004f2a:	46c0      	nop			@ (mov r8, r8)
 8004f2c:	20000324 	.word	0x20000324
 8004f30:	20000120 	.word	0x20000120

08004f34 <hal_watchdog_reset>:
{

}

void hal_watchdog_reset(void)
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	af00      	add	r7, sp, #0
	if( wdg_hdl.Instance != NULL )			// Bootloader was resetting wdt but it was never initialized. This resulted in a null pointer access in HAL functions which impacted FLASH-SR CFGBSY Flag
 8004f38:	4b05      	ldr	r3, [pc, #20]	@ (8004f50 <hal_watchdog_reset+0x1c>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d003      	beq.n	8004f48 <hal_watchdog_reset+0x14>
	{
		/* reload the WDT */
		HAL_IWDG_Refresh(&wdg_hdl);
 8004f40:	4b03      	ldr	r3, [pc, #12]	@ (8004f50 <hal_watchdog_reset+0x1c>)
 8004f42:	0018      	movs	r0, r3
 8004f44:	f7fd fc3e 	bl	80027c4 <HAL_IWDG_Refresh>
	}
}
 8004f48:	46c0      	nop			@ (mov r8, r8)
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	bd80      	pop	{r7, pc}
 8004f4e:	46c0      	nop			@ (mov r8, r8)
 8004f50:	20000324 	.word	0x20000324

08004f54 <memset>:
 8004f54:	0003      	movs	r3, r0
 8004f56:	1882      	adds	r2, r0, r2
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d100      	bne.n	8004f5e <memset+0xa>
 8004f5c:	4770      	bx	lr
 8004f5e:	7019      	strb	r1, [r3, #0]
 8004f60:	3301      	adds	r3, #1
 8004f62:	e7f9      	b.n	8004f58 <memset+0x4>

08004f64 <_init>:
 8004f64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f66:	46c0      	nop			@ (mov r8, r8)
 8004f68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f6a:	bc08      	pop	{r3}
 8004f6c:	469e      	mov	lr, r3
 8004f6e:	4770      	bx	lr

08004f70 <_fini>:
 8004f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f72:	46c0      	nop			@ (mov r8, r8)
 8004f74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f76:	bc08      	pop	{r3}
 8004f78:	469e      	mov	lr, r3
 8004f7a:	4770      	bx	lr
