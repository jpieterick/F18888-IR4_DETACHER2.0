
IR4DetacherFirmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000170  08000000  08000000  00001000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000060ec  08000170  08000170  00001170  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000294  0800625c  0800625c  0000725c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080064f0  080064f0  00008064  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080064f0  080064f0  00008064  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080064f0  080064f0  00008064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080064f0  080064f0  000074f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080064f4  080064f4  000074f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  080064f8  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000039c  20000064  0800655c  00008064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000400  0800655c  00008400  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00008064  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001be36  00000000  00000000  0000808c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004d3b  00000000  00000000  00023ec2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017c8  00000000  00000000  00028c00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000123d  00000000  00000000  0002a3c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019cdd  00000000  00000000  0002b605  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00024dfb  00000000  00000000  000452e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009bfe9  00000000  00000000  0006a0dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001060c6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000526c  00000000  00000000  0010610c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000009e  00000000  00000000  0010b378  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000170 <__do_global_dtors_aux>:
 8000170:	b510      	push	{r4, lr}
 8000172:	4c06      	ldr	r4, [pc, #24]	@ (800018c <__do_global_dtors_aux+0x1c>)
 8000174:	7823      	ldrb	r3, [r4, #0]
 8000176:	2b00      	cmp	r3, #0
 8000178:	d107      	bne.n	800018a <__do_global_dtors_aux+0x1a>
 800017a:	4b05      	ldr	r3, [pc, #20]	@ (8000190 <__do_global_dtors_aux+0x20>)
 800017c:	2b00      	cmp	r3, #0
 800017e:	d002      	beq.n	8000186 <__do_global_dtors_aux+0x16>
 8000180:	4804      	ldr	r0, [pc, #16]	@ (8000194 <__do_global_dtors_aux+0x24>)
 8000182:	e000      	b.n	8000186 <__do_global_dtors_aux+0x16>
 8000184:	bf00      	nop
 8000186:	2301      	movs	r3, #1
 8000188:	7023      	strb	r3, [r4, #0]
 800018a:	bd10      	pop	{r4, pc}
 800018c:	20000064 	.word	0x20000064
 8000190:	00000000 	.word	0x00000000
 8000194:	08006244 	.word	0x08006244

08000198 <frame_dummy>:
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <frame_dummy+0x14>)
 800019a:	b510      	push	{r4, lr}
 800019c:	2b00      	cmp	r3, #0
 800019e:	d003      	beq.n	80001a8 <frame_dummy+0x10>
 80001a0:	4903      	ldr	r1, [pc, #12]	@ (80001b0 <frame_dummy+0x18>)
 80001a2:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <frame_dummy+0x1c>)
 80001a4:	e000      	b.n	80001a8 <frame_dummy+0x10>
 80001a6:	bf00      	nop
 80001a8:	bd10      	pop	{r4, pc}
 80001aa:	46c0      	nop			@ (mov r8, r8)
 80001ac:	00000000 	.word	0x00000000
 80001b0:	20000068 	.word	0x20000068
 80001b4:	08006244 	.word	0x08006244

080001b8 <__udivsi3>:
 80001b8:	2200      	movs	r2, #0
 80001ba:	0843      	lsrs	r3, r0, #1
 80001bc:	428b      	cmp	r3, r1
 80001be:	d374      	bcc.n	80002aa <__udivsi3+0xf2>
 80001c0:	0903      	lsrs	r3, r0, #4
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d35f      	bcc.n	8000286 <__udivsi3+0xce>
 80001c6:	0a03      	lsrs	r3, r0, #8
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d344      	bcc.n	8000256 <__udivsi3+0x9e>
 80001cc:	0b03      	lsrs	r3, r0, #12
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d328      	bcc.n	8000224 <__udivsi3+0x6c>
 80001d2:	0c03      	lsrs	r3, r0, #16
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d30d      	bcc.n	80001f4 <__udivsi3+0x3c>
 80001d8:	22ff      	movs	r2, #255	@ 0xff
 80001da:	0209      	lsls	r1, r1, #8
 80001dc:	ba12      	rev	r2, r2
 80001de:	0c03      	lsrs	r3, r0, #16
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d302      	bcc.n	80001ea <__udivsi3+0x32>
 80001e4:	1212      	asrs	r2, r2, #8
 80001e6:	0209      	lsls	r1, r1, #8
 80001e8:	d065      	beq.n	80002b6 <__udivsi3+0xfe>
 80001ea:	0b03      	lsrs	r3, r0, #12
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d319      	bcc.n	8000224 <__udivsi3+0x6c>
 80001f0:	e000      	b.n	80001f4 <__udivsi3+0x3c>
 80001f2:	0a09      	lsrs	r1, r1, #8
 80001f4:	0bc3      	lsrs	r3, r0, #15
 80001f6:	428b      	cmp	r3, r1
 80001f8:	d301      	bcc.n	80001fe <__udivsi3+0x46>
 80001fa:	03cb      	lsls	r3, r1, #15
 80001fc:	1ac0      	subs	r0, r0, r3
 80001fe:	4152      	adcs	r2, r2
 8000200:	0b83      	lsrs	r3, r0, #14
 8000202:	428b      	cmp	r3, r1
 8000204:	d301      	bcc.n	800020a <__udivsi3+0x52>
 8000206:	038b      	lsls	r3, r1, #14
 8000208:	1ac0      	subs	r0, r0, r3
 800020a:	4152      	adcs	r2, r2
 800020c:	0b43      	lsrs	r3, r0, #13
 800020e:	428b      	cmp	r3, r1
 8000210:	d301      	bcc.n	8000216 <__udivsi3+0x5e>
 8000212:	034b      	lsls	r3, r1, #13
 8000214:	1ac0      	subs	r0, r0, r3
 8000216:	4152      	adcs	r2, r2
 8000218:	0b03      	lsrs	r3, r0, #12
 800021a:	428b      	cmp	r3, r1
 800021c:	d301      	bcc.n	8000222 <__udivsi3+0x6a>
 800021e:	030b      	lsls	r3, r1, #12
 8000220:	1ac0      	subs	r0, r0, r3
 8000222:	4152      	adcs	r2, r2
 8000224:	0ac3      	lsrs	r3, r0, #11
 8000226:	428b      	cmp	r3, r1
 8000228:	d301      	bcc.n	800022e <__udivsi3+0x76>
 800022a:	02cb      	lsls	r3, r1, #11
 800022c:	1ac0      	subs	r0, r0, r3
 800022e:	4152      	adcs	r2, r2
 8000230:	0a83      	lsrs	r3, r0, #10
 8000232:	428b      	cmp	r3, r1
 8000234:	d301      	bcc.n	800023a <__udivsi3+0x82>
 8000236:	028b      	lsls	r3, r1, #10
 8000238:	1ac0      	subs	r0, r0, r3
 800023a:	4152      	adcs	r2, r2
 800023c:	0a43      	lsrs	r3, r0, #9
 800023e:	428b      	cmp	r3, r1
 8000240:	d301      	bcc.n	8000246 <__udivsi3+0x8e>
 8000242:	024b      	lsls	r3, r1, #9
 8000244:	1ac0      	subs	r0, r0, r3
 8000246:	4152      	adcs	r2, r2
 8000248:	0a03      	lsrs	r3, r0, #8
 800024a:	428b      	cmp	r3, r1
 800024c:	d301      	bcc.n	8000252 <__udivsi3+0x9a>
 800024e:	020b      	lsls	r3, r1, #8
 8000250:	1ac0      	subs	r0, r0, r3
 8000252:	4152      	adcs	r2, r2
 8000254:	d2cd      	bcs.n	80001f2 <__udivsi3+0x3a>
 8000256:	09c3      	lsrs	r3, r0, #7
 8000258:	428b      	cmp	r3, r1
 800025a:	d301      	bcc.n	8000260 <__udivsi3+0xa8>
 800025c:	01cb      	lsls	r3, r1, #7
 800025e:	1ac0      	subs	r0, r0, r3
 8000260:	4152      	adcs	r2, r2
 8000262:	0983      	lsrs	r3, r0, #6
 8000264:	428b      	cmp	r3, r1
 8000266:	d301      	bcc.n	800026c <__udivsi3+0xb4>
 8000268:	018b      	lsls	r3, r1, #6
 800026a:	1ac0      	subs	r0, r0, r3
 800026c:	4152      	adcs	r2, r2
 800026e:	0943      	lsrs	r3, r0, #5
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__udivsi3+0xc0>
 8000274:	014b      	lsls	r3, r1, #5
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0903      	lsrs	r3, r0, #4
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__udivsi3+0xcc>
 8000280:	010b      	lsls	r3, r1, #4
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	08c3      	lsrs	r3, r0, #3
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__udivsi3+0xd8>
 800028c:	00cb      	lsls	r3, r1, #3
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0883      	lsrs	r3, r0, #2
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__udivsi3+0xe4>
 8000298:	008b      	lsls	r3, r1, #2
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0843      	lsrs	r3, r0, #1
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__udivsi3+0xf0>
 80002a4:	004b      	lsls	r3, r1, #1
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	1a41      	subs	r1, r0, r1
 80002ac:	d200      	bcs.n	80002b0 <__udivsi3+0xf8>
 80002ae:	4601      	mov	r1, r0
 80002b0:	4152      	adcs	r2, r2
 80002b2:	4610      	mov	r0, r2
 80002b4:	4770      	bx	lr
 80002b6:	e7ff      	b.n	80002b8 <__udivsi3+0x100>
 80002b8:	b501      	push	{r0, lr}
 80002ba:	2000      	movs	r0, #0
 80002bc:	f000 f806 	bl	80002cc <__aeabi_idiv0>
 80002c0:	bd02      	pop	{r1, pc}
 80002c2:	46c0      	nop			@ (mov r8, r8)

080002c4 <__aeabi_uidivmod>:
 80002c4:	2900      	cmp	r1, #0
 80002c6:	d0f7      	beq.n	80002b8 <__udivsi3+0x100>
 80002c8:	e776      	b.n	80001b8 <__udivsi3>
 80002ca:	4770      	bx	lr

080002cc <__aeabi_idiv0>:
 80002cc:	4770      	bx	lr
 80002ce:	46c0      	nop			@ (mov r8, r8)

080002d0 <ac_buzzer_inactive>:
	unlocked_tone[1].pwm_dc = mFREQ_TO_DUTY_CYC_COUNTS(unlocked_tone[1].pwm_period, dutyCyclePCT );
	unlocked_tone[2].pwm_dc = mFREQ_TO_DUTY_CYC_COUNTS(unlocked_tone[2].pwm_period, dutyCyclePCT );
}

bool ac_buzzer_inactive(void)
{
 80002d0:	b580      	push	{r7, lr}
 80002d2:	af00      	add	r7, sp, #0
	return ( ( chirp_counter == 0 ) && ( alarm_active == false ) && ( pwm_output_enabled == false ) && (error_counter == 0 ) && ( notifications.count == 0) );
 80002d4:	4b11      	ldr	r3, [pc, #68]	@ (800031c <ac_buzzer_inactive+0x4c>)
 80002d6:	781b      	ldrb	r3, [r3, #0]
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d117      	bne.n	800030c <ac_buzzer_inactive+0x3c>
 80002dc:	4b10      	ldr	r3, [pc, #64]	@ (8000320 <ac_buzzer_inactive+0x50>)
 80002de:	781b      	ldrb	r3, [r3, #0]
 80002e0:	2201      	movs	r2, #1
 80002e2:	4053      	eors	r3, r2
 80002e4:	b2db      	uxtb	r3, r3
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	d010      	beq.n	800030c <ac_buzzer_inactive+0x3c>
 80002ea:	4b0e      	ldr	r3, [pc, #56]	@ (8000324 <ac_buzzer_inactive+0x54>)
 80002ec:	781b      	ldrb	r3, [r3, #0]
 80002ee:	2201      	movs	r2, #1
 80002f0:	4053      	eors	r3, r2
 80002f2:	b2db      	uxtb	r3, r3
 80002f4:	2b00      	cmp	r3, #0
 80002f6:	d009      	beq.n	800030c <ac_buzzer_inactive+0x3c>
 80002f8:	4b0b      	ldr	r3, [pc, #44]	@ (8000328 <ac_buzzer_inactive+0x58>)
 80002fa:	781b      	ldrb	r3, [r3, #0]
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d105      	bne.n	800030c <ac_buzzer_inactive+0x3c>
 8000300:	4b0a      	ldr	r3, [pc, #40]	@ (800032c <ac_buzzer_inactive+0x5c>)
 8000302:	785b      	ldrb	r3, [r3, #1]
 8000304:	2b00      	cmp	r3, #0
 8000306:	d101      	bne.n	800030c <ac_buzzer_inactive+0x3c>
 8000308:	2301      	movs	r3, #1
 800030a:	e000      	b.n	800030e <ac_buzzer_inactive+0x3e>
 800030c:	2300      	movs	r3, #0
 800030e:	1c1a      	adds	r2, r3, #0
 8000310:	2301      	movs	r3, #1
 8000312:	4013      	ands	r3, r2
 8000314:	b2db      	uxtb	r3, r3
}
 8000316:	0018      	movs	r0, r3
 8000318:	46bd      	mov	sp, r7
 800031a:	bd80      	pop	{r7, pc}
 800031c:	20000080 	.word	0x20000080
 8000320:	20000083 	.word	0x20000083
 8000324:	20000085 	.word	0x20000085
 8000328:	20000081 	.word	0x20000081
 800032c:	20000088 	.word	0x20000088

08000330 <ac_chirp>:
//		}
//	}
//}

void ac_chirp(uint8_t num_chirps)
{
 8000330:	b580      	push	{r7, lr}
 8000332:	b082      	sub	sp, #8
 8000334:	af00      	add	r7, sp, #0
 8000336:	0002      	movs	r2, r0
 8000338:	1dfb      	adds	r3, r7, #7
 800033a:	701a      	strb	r2, [r3, #0]
	chirp_counter += num_chirps;
 800033c:	4b09      	ldr	r3, [pc, #36]	@ (8000364 <ac_chirp+0x34>)
 800033e:	781a      	ldrb	r2, [r3, #0]
 8000340:	1dfb      	adds	r3, r7, #7
 8000342:	781b      	ldrb	r3, [r3, #0]
 8000344:	18d3      	adds	r3, r2, r3
 8000346:	b2da      	uxtb	r2, r3
 8000348:	4b06      	ldr	r3, [pc, #24]	@ (8000364 <ac_chirp+0x34>)
 800034a:	701a      	strb	r2, [r3, #0]
	chirp_counter &= 0x0F; // limit to 15 chirps
 800034c:	4b05      	ldr	r3, [pc, #20]	@ (8000364 <ac_chirp+0x34>)
 800034e:	781b      	ldrb	r3, [r3, #0]
 8000350:	220f      	movs	r2, #15
 8000352:	4013      	ands	r3, r2
 8000354:	b2da      	uxtb	r2, r3
 8000356:	4b03      	ldr	r3, [pc, #12]	@ (8000364 <ac_chirp+0x34>)
 8000358:	701a      	strb	r2, [r3, #0]
}
 800035a:	46c0      	nop			@ (mov r8, r8)
 800035c:	46bd      	mov	sp, r7
 800035e:	b002      	add	sp, #8
 8000360:	bd80      	pop	{r7, pc}
 8000362:	46c0      	nop			@ (mov r8, r8)
 8000364:	20000080 	.word	0x20000080

08000368 <ac_error_tone>:

void ac_error_tone( uint8_t num_repeat)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	b082      	sub	sp, #8
 800036c:	af00      	add	r7, sp, #0
 800036e:	0002      	movs	r2, r0
 8000370:	1dfb      	adds	r3, r7, #7
 8000372:	701a      	strb	r2, [r3, #0]
	error_counter += num_repeat;
 8000374:	4b09      	ldr	r3, [pc, #36]	@ (800039c <ac_error_tone+0x34>)
 8000376:	781a      	ldrb	r2, [r3, #0]
 8000378:	1dfb      	adds	r3, r7, #7
 800037a:	781b      	ldrb	r3, [r3, #0]
 800037c:	18d3      	adds	r3, r2, r3
 800037e:	b2da      	uxtb	r2, r3
 8000380:	4b06      	ldr	r3, [pc, #24]	@ (800039c <ac_error_tone+0x34>)
 8000382:	701a      	strb	r2, [r3, #0]
	error_counter &= 0x0F; // limit to 15 chirps
 8000384:	4b05      	ldr	r3, [pc, #20]	@ (800039c <ac_error_tone+0x34>)
 8000386:	781b      	ldrb	r3, [r3, #0]
 8000388:	220f      	movs	r2, #15
 800038a:	4013      	ands	r3, r2
 800038c:	b2da      	uxtb	r2, r3
 800038e:	4b03      	ldr	r3, [pc, #12]	@ (800039c <ac_error_tone+0x34>)
 8000390:	701a      	strb	r2, [r3, #0]
}
 8000392:	46c0      	nop			@ (mov r8, r8)
 8000394:	46bd      	mov	sp, r7
 8000396:	b002      	add	sp, #8
 8000398:	bd80      	pop	{r7, pc}
 800039a:	46c0      	nop			@ (mov r8, r8)
 800039c:	20000081 	.word	0x20000081

080003a0 <ac_audio_controller>:
		notifications.tone = unlocked_tone;
	}
}

void ac_audio_controller(uint16_t time_since_last_called_msec)
{
 80003a0:	b5b0      	push	{r4, r5, r7, lr}
 80003a2:	b084      	sub	sp, #16
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	0002      	movs	r2, r0
 80003a8:	1dbb      	adds	r3, r7, #6
 80003aa:	801a      	strh	r2, [r3, #0]
	static uint8_t  current_step = 0;
	static uint16_t time_since_last_tone        = 0;
	static uint16_t time_since_last_chirp_start = 0;
	static uint16_t time_since_last_chirp_stop  = 0;
    /* handle the AUDIO output pin definition to ensure the pin is driven LOW when inactive */
	if (ac_buzzer_inactive())
 80003ac:	f7ff ff90 	bl	80002d0 <ac_buzzer_inactive>
 80003b0:	1e03      	subs	r3, r0, #0
 80003b2:	d016      	beq.n	80003e2 <ac_audio_controller+0x42>
	{
		/* ensure the pin is a digital output and set LOW */
		hal_gpio_set_output(timer_defs[TIMER_PIEZO_PWM].pin_id, false);
 80003b4:	4bdb      	ldr	r3, [pc, #876]	@ (8000724 <ac_audio_controller+0x384>)
 80003b6:	68db      	ldr	r3, [r3, #12]
 80003b8:	b2db      	uxtb	r3, r3
 80003ba:	2100      	movs	r1, #0
 80003bc:	0018      	movs	r0, r3
 80003be:	f005 f903 	bl	80055c8 <hal_gpio_set_output>
		hal_gpio_set_pin_mode(timer_defs[TIMER_PIEZO_PWM].pin_id, pin_defs[ timer_defs[TIMER_PIEZO_PWM].pin_id ].Mode );
 80003c2:	4bd8      	ldr	r3, [pc, #864]	@ (8000724 <ac_audio_controller+0x384>)
 80003c4:	68db      	ldr	r3, [r3, #12]
 80003c6:	b2d8      	uxtb	r0, r3
 80003c8:	4bd6      	ldr	r3, [pc, #856]	@ (8000724 <ac_audio_controller+0x384>)
 80003ca:	68da      	ldr	r2, [r3, #12]
 80003cc:	49d6      	ldr	r1, [pc, #856]	@ (8000728 <ac_audio_controller+0x388>)
 80003ce:	0013      	movs	r3, r2
 80003d0:	009b      	lsls	r3, r3, #2
 80003d2:	189b      	adds	r3, r3, r2
 80003d4:	009b      	lsls	r3, r3, #2
 80003d6:	18cb      	adds	r3, r1, r3
 80003d8:	3304      	adds	r3, #4
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	0019      	movs	r1, r3
 80003de:	f005 f917 	bl	8005610 <hal_gpio_set_pin_mode>
		/* ensure the pin is in PWM mode */
//		hal_gpio_set_pin_mode(IO_AUDIO, GPIO_AF2_LPTIM1);
	}

	/* if a manual PWM command has been initiated */
	if (pwm_override_active)
 80003e2:	4bd2      	ldr	r3, [pc, #840]	@ (800072c <ac_audio_controller+0x38c>)
 80003e4:	781b      	ldrb	r3, [r3, #0]
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	d000      	beq.n	80003ec <ac_audio_controller+0x4c>
 80003ea:	e1bf      	b.n	800076c <ac_audio_controller+0x3cc>
	{
		return;
	}

	/* update the local timers */
	time_since_last_tone        += time_since_last_called_msec;
 80003ec:	4bd0      	ldr	r3, [pc, #832]	@ (8000730 <ac_audio_controller+0x390>)
 80003ee:	881a      	ldrh	r2, [r3, #0]
 80003f0:	1dbb      	adds	r3, r7, #6
 80003f2:	881b      	ldrh	r3, [r3, #0]
 80003f4:	18d3      	adds	r3, r2, r3
 80003f6:	b29a      	uxth	r2, r3
 80003f8:	4bcd      	ldr	r3, [pc, #820]	@ (8000730 <ac_audio_controller+0x390>)
 80003fa:	801a      	strh	r2, [r3, #0]
	time_since_last_chirp_start += time_since_last_called_msec;
 80003fc:	4bcd      	ldr	r3, [pc, #820]	@ (8000734 <ac_audio_controller+0x394>)
 80003fe:	881a      	ldrh	r2, [r3, #0]
 8000400:	1dbb      	adds	r3, r7, #6
 8000402:	881b      	ldrh	r3, [r3, #0]
 8000404:	18d3      	adds	r3, r2, r3
 8000406:	b29a      	uxth	r2, r3
 8000408:	4bca      	ldr	r3, [pc, #808]	@ (8000734 <ac_audio_controller+0x394>)
 800040a:	801a      	strh	r2, [r3, #0]
	time_since_last_chirp_stop  += time_since_last_called_msec;
 800040c:	4bca      	ldr	r3, [pc, #808]	@ (8000738 <ac_audio_controller+0x398>)
 800040e:	881a      	ldrh	r2, [r3, #0]
 8000410:	1dbb      	adds	r3, r7, #6
 8000412:	881b      	ldrh	r3, [r3, #0]
 8000414:	18d3      	adds	r3, r2, r3
 8000416:	b29a      	uxth	r2, r3
 8000418:	4bc7      	ldr	r3, [pc, #796]	@ (8000738 <ac_audio_controller+0x398>)
 800041a:	801a      	strh	r2, [r3, #0]

	if (alarm_active)
 800041c:	4bc7      	ldr	r3, [pc, #796]	@ (800073c <ac_audio_controller+0x39c>)
 800041e:	781b      	ldrb	r3, [r3, #0]
 8000420:	2b00      	cmp	r3, #0
 8000422:	d041      	beq.n	80004a8 <ac_audio_controller+0x108>
	{
		/* reset the number of chirps during an active alarm state to prevent
		 * any pending chirps from sounding after the alarm ends */
		chirp_counter = 0;
 8000424:	4bc6      	ldr	r3, [pc, #792]	@ (8000740 <ac_audio_controller+0x3a0>)
 8000426:	2200      	movs	r2, #0
 8000428:	701a      	strb	r2, [r3, #0]
		error_counter = 0;
 800042a:	4bc6      	ldr	r3, [pc, #792]	@ (8000744 <ac_audio_controller+0x3a4>)
 800042c:	2200      	movs	r2, #0
 800042e:	701a      	strb	r2, [r3, #0]
		notifications.count = 0;
 8000430:	4bc5      	ldr	r3, [pc, #788]	@ (8000748 <ac_audio_controller+0x3a8>)
 8000432:	2200      	movs	r2, #0
 8000434:	705a      	strb	r2, [r3, #1]
		if ((time_since_last_tone >= ALARM_TONE_TIME_MSEC))
 8000436:	4bbe      	ldr	r3, [pc, #760]	@ (8000730 <ac_audio_controller+0x390>)
 8000438:	881b      	ldrh	r3, [r3, #0]
 800043a:	2b0e      	cmp	r3, #14
 800043c:	d800      	bhi.n	8000440 <ac_audio_controller+0xa0>
 800043e:	e198      	b.n	8000772 <ac_audio_controller+0x3d2>
		{
			/* update the step */
			current_step = (current_step < (NUM_ALARM_TONES - 1)) ? (current_step + 1) : 0;
 8000440:	4bc2      	ldr	r3, [pc, #776]	@ (800074c <ac_audio_controller+0x3ac>)
 8000442:	781b      	ldrb	r3, [r3, #0]
 8000444:	2b06      	cmp	r3, #6
 8000446:	d804      	bhi.n	8000452 <ac_audio_controller+0xb2>
 8000448:	4bc0      	ldr	r3, [pc, #768]	@ (800074c <ac_audio_controller+0x3ac>)
 800044a:	781b      	ldrb	r3, [r3, #0]
 800044c:	3301      	adds	r3, #1
 800044e:	b2da      	uxtb	r2, r3
 8000450:	e000      	b.n	8000454 <ac_audio_controller+0xb4>
 8000452:	2200      	movs	r2, #0
 8000454:	4bbd      	ldr	r3, [pc, #756]	@ (800074c <ac_audio_controller+0x3ac>)
 8000456:	701a      	strb	r2, [r3, #0]

			/* set the PWM timer */
			uint16_t on_time =  ac_adjust_alarm_audio_level(alarm_tone[current_step].pwm_dc);
 8000458:	4bbc      	ldr	r3, [pc, #752]	@ (800074c <ac_audio_controller+0x3ac>)
 800045a:	781b      	ldrb	r3, [r3, #0]
 800045c:	0019      	movs	r1, r3
 800045e:	4abc      	ldr	r2, [pc, #752]	@ (8000750 <ac_audio_controller+0x3b0>)
 8000460:	000b      	movs	r3, r1
 8000462:	005b      	lsls	r3, r3, #1
 8000464:	185b      	adds	r3, r3, r1
 8000466:	005b      	lsls	r3, r3, #1
 8000468:	18d3      	adds	r3, r2, r3
 800046a:	3302      	adds	r3, #2
 800046c:	881b      	ldrh	r3, [r3, #0]
 800046e:	250e      	movs	r5, #14
 8000470:	197c      	adds	r4, r7, r5
 8000472:	0018      	movs	r0, r3
 8000474:	f000 f980 	bl	8000778 <ac_adjust_alarm_audio_level>
 8000478:	0003      	movs	r3, r0
 800047a:	8023      	strh	r3, [r4, #0]
			hal_timer_set_pwm_output_period(TIMER_PIEZO_PWM, alarm_tone[current_step].pwm_period, on_time);
 800047c:	4bb3      	ldr	r3, [pc, #716]	@ (800074c <ac_audio_controller+0x3ac>)
 800047e:	781b      	ldrb	r3, [r3, #0]
 8000480:	0019      	movs	r1, r3
 8000482:	4ab3      	ldr	r2, [pc, #716]	@ (8000750 <ac_audio_controller+0x3b0>)
 8000484:	000b      	movs	r3, r1
 8000486:	005b      	lsls	r3, r3, #1
 8000488:	185b      	adds	r3, r3, r1
 800048a:	005b      	lsls	r3, r3, #1
 800048c:	5a99      	ldrh	r1, [r3, r2]
 800048e:	197b      	adds	r3, r7, r5
 8000490:	881b      	ldrh	r3, [r3, #0]
 8000492:	001a      	movs	r2, r3
 8000494:	2000      	movs	r0, #0
 8000496:	f005 f967 	bl	8005768 <hal_timer_set_pwm_output_period>
			pwm_output_enabled = true;
 800049a:	4bae      	ldr	r3, [pc, #696]	@ (8000754 <ac_audio_controller+0x3b4>)
 800049c:	2201      	movs	r2, #1
 800049e:	701a      	strb	r2, [r3, #0]
			/* reset the state timer */
			time_since_last_tone = 0;
 80004a0:	4ba3      	ldr	r3, [pc, #652]	@ (8000730 <ac_audio_controller+0x390>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	801a      	strh	r2, [r3, #0]
 80004a6:	e164      	b.n	8000772 <ac_audio_controller+0x3d2>
		}
	}
	else
	{
		/* if there are pending chirps */
		if (chirp_counter > 0)
 80004a8:	4ba5      	ldr	r3, [pc, #660]	@ (8000740 <ac_audio_controller+0x3a0>)
 80004aa:	781b      	ldrb	r3, [r3, #0]
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	d04e      	beq.n	800054e <ac_audio_controller+0x1ae>
		{
			if (!chirp_active)
 80004b0:	4ba9      	ldr	r3, [pc, #676]	@ (8000758 <ac_audio_controller+0x3b8>)
 80004b2:	781b      	ldrb	r3, [r3, #0]
 80004b4:	2201      	movs	r2, #1
 80004b6:	4053      	eors	r3, r2
 80004b8:	b2db      	uxtb	r3, r3
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d02d      	beq.n	800051a <ac_audio_controller+0x17a>
			{
				/* if time to start a chirp */
				if (time_since_last_chirp_stop >= CHIRP_QUIET_TIME_MSEC)
 80004be:	4b9e      	ldr	r3, [pc, #632]	@ (8000738 <ac_audio_controller+0x398>)
 80004c0:	881b      	ldrh	r3, [r3, #0]
 80004c2:	2b4a      	cmp	r3, #74	@ 0x4a
 80004c4:	d800      	bhi.n	80004c8 <ac_audio_controller+0x128>
 80004c6:	e154      	b.n	8000772 <ac_audio_controller+0x3d2>
				{
					if (chirp_low)
 80004c8:	4ba4      	ldr	r3, [pc, #656]	@ (800075c <ac_audio_controller+0x3bc>)
 80004ca:	781b      	ldrb	r3, [r3, #0]
 80004cc:	2b00      	cmp	r3, #0
 80004ce:	d00d      	beq.n	80004ec <ac_audio_controller+0x14c>
					{
						hal_timer_set_pwm_output_period(TIMER_PIEZO_PWM, chirp_tone_low.pwm_period, ac_adjust_alarm_audio_level(chirp_tone_low.pwm_dc));
 80004d0:	4ba3      	ldr	r3, [pc, #652]	@ (8000760 <ac_audio_controller+0x3c0>)
 80004d2:	881c      	ldrh	r4, [r3, #0]
 80004d4:	4ba2      	ldr	r3, [pc, #648]	@ (8000760 <ac_audio_controller+0x3c0>)
 80004d6:	885b      	ldrh	r3, [r3, #2]
 80004d8:	0018      	movs	r0, r3
 80004da:	f000 f94d 	bl	8000778 <ac_adjust_alarm_audio_level>
 80004de:	0003      	movs	r3, r0
 80004e0:	001a      	movs	r2, r3
 80004e2:	0021      	movs	r1, r4
 80004e4:	2000      	movs	r0, #0
 80004e6:	f005 f93f 	bl	8005768 <hal_timer_set_pwm_output_period>
 80004ea:	e00c      	b.n	8000506 <ac_audio_controller+0x166>
					}
					else
					{
						hal_timer_set_pwm_output_period(TIMER_PIEZO_PWM, chirp_tone.pwm_period, ac_adjust_alarm_audio_level(chirp_tone.pwm_dc));
 80004ec:	4b9d      	ldr	r3, [pc, #628]	@ (8000764 <ac_audio_controller+0x3c4>)
 80004ee:	881c      	ldrh	r4, [r3, #0]
 80004f0:	4b9c      	ldr	r3, [pc, #624]	@ (8000764 <ac_audio_controller+0x3c4>)
 80004f2:	885b      	ldrh	r3, [r3, #2]
 80004f4:	0018      	movs	r0, r3
 80004f6:	f000 f93f 	bl	8000778 <ac_adjust_alarm_audio_level>
 80004fa:	0003      	movs	r3, r0
 80004fc:	001a      	movs	r2, r3
 80004fe:	0021      	movs	r1, r4
 8000500:	2000      	movs	r0, #0
 8000502:	f005 f931 	bl	8005768 <hal_timer_set_pwm_output_period>
					}
					pwm_output_enabled = true;
 8000506:	4b93      	ldr	r3, [pc, #588]	@ (8000754 <ac_audio_controller+0x3b4>)
 8000508:	2201      	movs	r2, #1
 800050a:	701a      	strb	r2, [r3, #0]
					time_since_last_chirp_start = 0;
 800050c:	4b89      	ldr	r3, [pc, #548]	@ (8000734 <ac_audio_controller+0x394>)
 800050e:	2200      	movs	r2, #0
 8000510:	801a      	strh	r2, [r3, #0]
					chirp_active                = true;
 8000512:	4b91      	ldr	r3, [pc, #580]	@ (8000758 <ac_audio_controller+0x3b8>)
 8000514:	2201      	movs	r2, #1
 8000516:	701a      	strb	r2, [r3, #0]
 8000518:	e12b      	b.n	8000772 <ac_audio_controller+0x3d2>
				}
			}
			else
			{
				/* if time to end the chirp */
				if (time_since_last_chirp_start >= CHIRP_TONE_TIME_MSEC)
 800051a:	4b86      	ldr	r3, [pc, #536]	@ (8000734 <ac_audio_controller+0x394>)
 800051c:	881b      	ldrh	r3, [r3, #0]
 800051e:	2b4a      	cmp	r3, #74	@ 0x4a
 8000520:	d800      	bhi.n	8000524 <ac_audio_controller+0x184>
 8000522:	e126      	b.n	8000772 <ac_audio_controller+0x3d2>
				{
					hal_timer_set_pwm_output_period(TIMER_PIEZO_PWM, 0, 0);
 8000524:	2200      	movs	r2, #0
 8000526:	2100      	movs	r1, #0
 8000528:	2000      	movs	r0, #0
 800052a:	f005 f91d 	bl	8005768 <hal_timer_set_pwm_output_period>
					pwm_output_enabled = false;
 800052e:	4b89      	ldr	r3, [pc, #548]	@ (8000754 <ac_audio_controller+0x3b4>)
 8000530:	2200      	movs	r2, #0
 8000532:	701a      	strb	r2, [r3, #0]
					time_since_last_chirp_stop = 0;
 8000534:	4b80      	ldr	r3, [pc, #512]	@ (8000738 <ac_audio_controller+0x398>)
 8000536:	2200      	movs	r2, #0
 8000538:	801a      	strh	r2, [r3, #0]
					chirp_active = false;
 800053a:	4b87      	ldr	r3, [pc, #540]	@ (8000758 <ac_audio_controller+0x3b8>)
 800053c:	2200      	movs	r2, #0
 800053e:	701a      	strb	r2, [r3, #0]
					--chirp_counter;
 8000540:	4b7f      	ldr	r3, [pc, #508]	@ (8000740 <ac_audio_controller+0x3a0>)
 8000542:	781b      	ldrb	r3, [r3, #0]
 8000544:	3b01      	subs	r3, #1
 8000546:	b2da      	uxtb	r2, r3
 8000548:	4b7d      	ldr	r3, [pc, #500]	@ (8000740 <ac_audio_controller+0x3a0>)
 800054a:	701a      	strb	r2, [r3, #0]
 800054c:	e111      	b.n	8000772 <ac_audio_controller+0x3d2>
				}
			}
		}
		else if (error_counter > 0)
 800054e:	4b7d      	ldr	r3, [pc, #500]	@ (8000744 <ac_audio_controller+0x3a4>)
 8000550:	781b      	ldrb	r3, [r3, #0]
 8000552:	2b00      	cmp	r3, #0
 8000554:	d03c      	beq.n	80005d0 <ac_audio_controller+0x230>
		{
			if (!chirp_active)
 8000556:	4b80      	ldr	r3, [pc, #512]	@ (8000758 <ac_audio_controller+0x3b8>)
 8000558:	781b      	ldrb	r3, [r3, #0]
 800055a:	2201      	movs	r2, #1
 800055c:	4053      	eors	r3, r2
 800055e:	b2db      	uxtb	r3, r3
 8000560:	2b00      	cmp	r3, #0
 8000562:	d01b      	beq.n	800059c <ac_audio_controller+0x1fc>
			{
				/* if time to start a chirp */
				if (time_since_last_chirp_stop >= CHIRP_QUIET_TIME_MSEC)
 8000564:	4b74      	ldr	r3, [pc, #464]	@ (8000738 <ac_audio_controller+0x398>)
 8000566:	881b      	ldrh	r3, [r3, #0]
 8000568:	2b4a      	cmp	r3, #74	@ 0x4a
 800056a:	d800      	bhi.n	800056e <ac_audio_controller+0x1ce>
 800056c:	e101      	b.n	8000772 <ac_audio_controller+0x3d2>
				{
					hal_timer_set_pwm_output_period(TIMER_PIEZO_PWM, buzz_tone.pwm_period, ac_adjust_alarm_audio_level(buzz_tone.pwm_dc));
 800056e:	4b7e      	ldr	r3, [pc, #504]	@ (8000768 <ac_audio_controller+0x3c8>)
 8000570:	881c      	ldrh	r4, [r3, #0]
 8000572:	4b7d      	ldr	r3, [pc, #500]	@ (8000768 <ac_audio_controller+0x3c8>)
 8000574:	885b      	ldrh	r3, [r3, #2]
 8000576:	0018      	movs	r0, r3
 8000578:	f000 f8fe 	bl	8000778 <ac_adjust_alarm_audio_level>
 800057c:	0003      	movs	r3, r0
 800057e:	001a      	movs	r2, r3
 8000580:	0021      	movs	r1, r4
 8000582:	2000      	movs	r0, #0
 8000584:	f005 f8f0 	bl	8005768 <hal_timer_set_pwm_output_period>
					pwm_output_enabled = true;
 8000588:	4b72      	ldr	r3, [pc, #456]	@ (8000754 <ac_audio_controller+0x3b4>)
 800058a:	2201      	movs	r2, #1
 800058c:	701a      	strb	r2, [r3, #0]
					time_since_last_chirp_start = 0;
 800058e:	4b69      	ldr	r3, [pc, #420]	@ (8000734 <ac_audio_controller+0x394>)
 8000590:	2200      	movs	r2, #0
 8000592:	801a      	strh	r2, [r3, #0]
					chirp_active                = true;
 8000594:	4b70      	ldr	r3, [pc, #448]	@ (8000758 <ac_audio_controller+0x3b8>)
 8000596:	2201      	movs	r2, #1
 8000598:	701a      	strb	r2, [r3, #0]
 800059a:	e0ea      	b.n	8000772 <ac_audio_controller+0x3d2>
				}
			}
			else
			{
				/* if time to end the chirp */
				if (time_since_last_chirp_start >= ERROR_BUZZ_DURATION_MSEC)
 800059c:	4b65      	ldr	r3, [pc, #404]	@ (8000734 <ac_audio_controller+0x394>)
 800059e:	881b      	ldrh	r3, [r3, #0]
 80005a0:	2b63      	cmp	r3, #99	@ 0x63
 80005a2:	d800      	bhi.n	80005a6 <ac_audio_controller+0x206>
 80005a4:	e0e5      	b.n	8000772 <ac_audio_controller+0x3d2>
				{
					hal_timer_set_pwm_output_period(TIMER_PIEZO_PWM, 0, 0);
 80005a6:	2200      	movs	r2, #0
 80005a8:	2100      	movs	r1, #0
 80005aa:	2000      	movs	r0, #0
 80005ac:	f005 f8dc 	bl	8005768 <hal_timer_set_pwm_output_period>
					pwm_output_enabled = false;
 80005b0:	4b68      	ldr	r3, [pc, #416]	@ (8000754 <ac_audio_controller+0x3b4>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	701a      	strb	r2, [r3, #0]
					time_since_last_chirp_stop = 0;
 80005b6:	4b60      	ldr	r3, [pc, #384]	@ (8000738 <ac_audio_controller+0x398>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	801a      	strh	r2, [r3, #0]
					chirp_active = false;
 80005bc:	4b66      	ldr	r3, [pc, #408]	@ (8000758 <ac_audio_controller+0x3b8>)
 80005be:	2200      	movs	r2, #0
 80005c0:	701a      	strb	r2, [r3, #0]
					--error_counter;
 80005c2:	4b60      	ldr	r3, [pc, #384]	@ (8000744 <ac_audio_controller+0x3a4>)
 80005c4:	781b      	ldrb	r3, [r3, #0]
 80005c6:	3b01      	subs	r3, #1
 80005c8:	b2da      	uxtb	r2, r3
 80005ca:	4b5e      	ldr	r3, [pc, #376]	@ (8000744 <ac_audio_controller+0x3a4>)
 80005cc:	701a      	strb	r2, [r3, #0]
 80005ce:	e0d0      	b.n	8000772 <ac_audio_controller+0x3d2>
				}
			}
		}
		else if( notifications.count > 0 && notifications.type != NOTIFY_IDLE )
 80005d0:	4b5d      	ldr	r3, [pc, #372]	@ (8000748 <ac_audio_controller+0x3a8>)
 80005d2:	785b      	ldrb	r3, [r3, #1]
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d100      	bne.n	80005da <ac_audio_controller+0x23a>
 80005d8:	e097      	b.n	800070a <ac_audio_controller+0x36a>
 80005da:	4b5b      	ldr	r3, [pc, #364]	@ (8000748 <ac_audio_controller+0x3a8>)
 80005dc:	781b      	ldrb	r3, [r3, #0]
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d100      	bne.n	80005e4 <ac_audio_controller+0x244>
 80005e2:	e092      	b.n	800070a <ac_audio_controller+0x36a>
		{
			if( pwm_output_enabled == false )
 80005e4:	4b5b      	ldr	r3, [pc, #364]	@ (8000754 <ac_audio_controller+0x3b4>)
 80005e6:	781b      	ldrb	r3, [r3, #0]
 80005e8:	2201      	movs	r2, #1
 80005ea:	4053      	eors	r3, r2
 80005ec:	b2db      	uxtb	r3, r3
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d028      	beq.n	8000644 <ac_audio_controller+0x2a4>
			{
				current_step = 0;
 80005f2:	4b56      	ldr	r3, [pc, #344]	@ (800074c <ac_audio_controller+0x3ac>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	701a      	strb	r2, [r3, #0]
				pwm_output_enabled = true;
 80005f8:	4b56      	ldr	r3, [pc, #344]	@ (8000754 <ac_audio_controller+0x3b4>)
 80005fa:	2201      	movs	r2, #1
 80005fc:	701a      	strb	r2, [r3, #0]
				time_since_last_tone = 0;
 80005fe:	4b4c      	ldr	r3, [pc, #304]	@ (8000730 <ac_audio_controller+0x390>)
 8000600:	2200      	movs	r2, #0
 8000602:	801a      	strh	r2, [r3, #0]
				hal_timer_set_pwm_output_period(TIMER_PIEZO_PWM, notifications.tone[current_step].pwm_period, ac_adjust_alarm_audio_level(notifications.tone[current_step].pwm_dc));
 8000604:	4b50      	ldr	r3, [pc, #320]	@ (8000748 <ac_audio_controller+0x3a8>)
 8000606:	685a      	ldr	r2, [r3, #4]
 8000608:	4b50      	ldr	r3, [pc, #320]	@ (800074c <ac_audio_controller+0x3ac>)
 800060a:	781b      	ldrb	r3, [r3, #0]
 800060c:	0019      	movs	r1, r3
 800060e:	000b      	movs	r3, r1
 8000610:	005b      	lsls	r3, r3, #1
 8000612:	185b      	adds	r3, r3, r1
 8000614:	005b      	lsls	r3, r3, #1
 8000616:	18d3      	adds	r3, r2, r3
 8000618:	881c      	ldrh	r4, [r3, #0]
 800061a:	4b4b      	ldr	r3, [pc, #300]	@ (8000748 <ac_audio_controller+0x3a8>)
 800061c:	685a      	ldr	r2, [r3, #4]
 800061e:	4b4b      	ldr	r3, [pc, #300]	@ (800074c <ac_audio_controller+0x3ac>)
 8000620:	781b      	ldrb	r3, [r3, #0]
 8000622:	0019      	movs	r1, r3
 8000624:	000b      	movs	r3, r1
 8000626:	005b      	lsls	r3, r3, #1
 8000628:	185b      	adds	r3, r3, r1
 800062a:	005b      	lsls	r3, r3, #1
 800062c:	18d3      	adds	r3, r2, r3
 800062e:	885b      	ldrh	r3, [r3, #2]
 8000630:	0018      	movs	r0, r3
 8000632:	f000 f8a1 	bl	8000778 <ac_adjust_alarm_audio_level>
 8000636:	0003      	movs	r3, r0
 8000638:	001a      	movs	r2, r3
 800063a:	0021      	movs	r1, r4
 800063c:	2000      	movs	r0, #0
 800063e:	f005 f893 	bl	8005768 <hal_timer_set_pwm_output_period>
			if( pwm_output_enabled == false )
 8000642:	e095      	b.n	8000770 <ac_audio_controller+0x3d0>
			}
			else
			{
				if ((time_since_last_tone >= notifications.tone[current_step].duration))
 8000644:	4b40      	ldr	r3, [pc, #256]	@ (8000748 <ac_audio_controller+0x3a8>)
 8000646:	685a      	ldr	r2, [r3, #4]
 8000648:	4b40      	ldr	r3, [pc, #256]	@ (800074c <ac_audio_controller+0x3ac>)
 800064a:	781b      	ldrb	r3, [r3, #0]
 800064c:	0019      	movs	r1, r3
 800064e:	000b      	movs	r3, r1
 8000650:	005b      	lsls	r3, r3, #1
 8000652:	185b      	adds	r3, r3, r1
 8000654:	005b      	lsls	r3, r3, #1
 8000656:	18d3      	adds	r3, r2, r3
 8000658:	889a      	ldrh	r2, [r3, #4]
 800065a:	4b35      	ldr	r3, [pc, #212]	@ (8000730 <ac_audio_controller+0x390>)
 800065c:	881b      	ldrh	r3, [r3, #0]
 800065e:	429a      	cmp	r2, r3
 8000660:	d900      	bls.n	8000664 <ac_audio_controller+0x2c4>
 8000662:	e085      	b.n	8000770 <ac_audio_controller+0x3d0>
				{
					if( ++current_step >= NUM_MOTOR_TONES )
 8000664:	4b39      	ldr	r3, [pc, #228]	@ (800074c <ac_audio_controller+0x3ac>)
 8000666:	781b      	ldrb	r3, [r3, #0]
 8000668:	3301      	adds	r3, #1
 800066a:	b2da      	uxtb	r2, r3
 800066c:	4b37      	ldr	r3, [pc, #220]	@ (800074c <ac_audio_controller+0x3ac>)
 800066e:	701a      	strb	r2, [r3, #0]
 8000670:	4b36      	ldr	r3, [pc, #216]	@ (800074c <ac_audio_controller+0x3ac>)
 8000672:	781b      	ldrb	r3, [r3, #0]
 8000674:	2b04      	cmp	r3, #4
 8000676:	d91e      	bls.n	80006b6 <ac_audio_controller+0x316>
					{
						current_step = 0;
 8000678:	4b34      	ldr	r3, [pc, #208]	@ (800074c <ac_audio_controller+0x3ac>)
 800067a:	2200      	movs	r2, #0
 800067c:	701a      	strb	r2, [r3, #0]
						if( notifications.count > 1 )
 800067e:	4b32      	ldr	r3, [pc, #200]	@ (8000748 <ac_audio_controller+0x3a8>)
 8000680:	785b      	ldrb	r3, [r3, #1]
 8000682:	2b01      	cmp	r3, #1
 8000684:	d906      	bls.n	8000694 <ac_audio_controller+0x2f4>
						{
							notifications.count--;
 8000686:	4b30      	ldr	r3, [pc, #192]	@ (8000748 <ac_audio_controller+0x3a8>)
 8000688:	785b      	ldrb	r3, [r3, #1]
 800068a:	3b01      	subs	r3, #1
 800068c:	b2da      	uxtb	r2, r3
 800068e:	4b2e      	ldr	r3, [pc, #184]	@ (8000748 <ac_audio_controller+0x3a8>)
 8000690:	705a      	strb	r2, [r3, #1]
 8000692:	e010      	b.n	80006b6 <ac_audio_controller+0x316>
						}
						else
						{
							notifications.count = 0;
 8000694:	4b2c      	ldr	r3, [pc, #176]	@ (8000748 <ac_audio_controller+0x3a8>)
 8000696:	2200      	movs	r2, #0
 8000698:	705a      	strb	r2, [r3, #1]
							hal_timer_set_pwm_output_period(TIMER_PIEZO_PWM, 0, 0);
 800069a:	2200      	movs	r2, #0
 800069c:	2100      	movs	r1, #0
 800069e:	2000      	movs	r0, #0
 80006a0:	f005 f862 	bl	8005768 <hal_timer_set_pwm_output_period>
							pwm_output_enabled = false;
 80006a4:	4b2b      	ldr	r3, [pc, #172]	@ (8000754 <ac_audio_controller+0x3b4>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	701a      	strb	r2, [r3, #0]
							notifications.tone = NULL;
 80006aa:	4b27      	ldr	r3, [pc, #156]	@ (8000748 <ac_audio_controller+0x3a8>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	605a      	str	r2, [r3, #4]
							notifications.type = NOTIFY_IDLE;
 80006b0:	4b25      	ldr	r3, [pc, #148]	@ (8000748 <ac_audio_controller+0x3a8>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	701a      	strb	r2, [r3, #0]
						}
					}
					if( notifications.count )
 80006b6:	4b24      	ldr	r3, [pc, #144]	@ (8000748 <ac_audio_controller+0x3a8>)
 80006b8:	785b      	ldrb	r3, [r3, #1]
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d058      	beq.n	8000770 <ac_audio_controller+0x3d0>
					{
						/* set the PWM timer */
						hal_timer_set_pwm_output_period(TIMER_PIEZO_PWM, notifications.tone[current_step].pwm_period, ac_adjust_alarm_audio_level(notifications.tone[current_step].pwm_dc));
 80006be:	4b22      	ldr	r3, [pc, #136]	@ (8000748 <ac_audio_controller+0x3a8>)
 80006c0:	685a      	ldr	r2, [r3, #4]
 80006c2:	4b22      	ldr	r3, [pc, #136]	@ (800074c <ac_audio_controller+0x3ac>)
 80006c4:	781b      	ldrb	r3, [r3, #0]
 80006c6:	0019      	movs	r1, r3
 80006c8:	000b      	movs	r3, r1
 80006ca:	005b      	lsls	r3, r3, #1
 80006cc:	185b      	adds	r3, r3, r1
 80006ce:	005b      	lsls	r3, r3, #1
 80006d0:	18d3      	adds	r3, r2, r3
 80006d2:	881c      	ldrh	r4, [r3, #0]
 80006d4:	4b1c      	ldr	r3, [pc, #112]	@ (8000748 <ac_audio_controller+0x3a8>)
 80006d6:	685a      	ldr	r2, [r3, #4]
 80006d8:	4b1c      	ldr	r3, [pc, #112]	@ (800074c <ac_audio_controller+0x3ac>)
 80006da:	781b      	ldrb	r3, [r3, #0]
 80006dc:	0019      	movs	r1, r3
 80006de:	000b      	movs	r3, r1
 80006e0:	005b      	lsls	r3, r3, #1
 80006e2:	185b      	adds	r3, r3, r1
 80006e4:	005b      	lsls	r3, r3, #1
 80006e6:	18d3      	adds	r3, r2, r3
 80006e8:	885b      	ldrh	r3, [r3, #2]
 80006ea:	0018      	movs	r0, r3
 80006ec:	f000 f844 	bl	8000778 <ac_adjust_alarm_audio_level>
 80006f0:	0003      	movs	r3, r0
 80006f2:	001a      	movs	r2, r3
 80006f4:	0021      	movs	r1, r4
 80006f6:	2000      	movs	r0, #0
 80006f8:	f005 f836 	bl	8005768 <hal_timer_set_pwm_output_period>
						pwm_output_enabled = true;
 80006fc:	4b15      	ldr	r3, [pc, #84]	@ (8000754 <ac_audio_controller+0x3b4>)
 80006fe:	2201      	movs	r2, #1
 8000700:	701a      	strb	r2, [r3, #0]
						/* reset the state timer */
						time_since_last_tone = 0;
 8000702:	4b0b      	ldr	r3, [pc, #44]	@ (8000730 <ac_audio_controller+0x390>)
 8000704:	2200      	movs	r2, #0
 8000706:	801a      	strh	r2, [r3, #0]
			if( pwm_output_enabled == false )
 8000708:	e032      	b.n	8000770 <ac_audio_controller+0x3d0>
				}
			}
		}
		else
		{
			chirp_low = false;
 800070a:	4b14      	ldr	r3, [pc, #80]	@ (800075c <ac_audio_controller+0x3bc>)
 800070c:	2200      	movs	r2, #0
 800070e:	701a      	strb	r2, [r3, #0]
			hal_timer_set_pwm_output_period(TIMER_PIEZO_PWM, 0, 0);
 8000710:	2200      	movs	r2, #0
 8000712:	2100      	movs	r1, #0
 8000714:	2000      	movs	r0, #0
 8000716:	f005 f827 	bl	8005768 <hal_timer_set_pwm_output_period>
			pwm_output_enabled = false;
 800071a:	4b0e      	ldr	r3, [pc, #56]	@ (8000754 <ac_audio_controller+0x3b4>)
 800071c:	2200      	movs	r2, #0
 800071e:	701a      	strb	r2, [r3, #0]
 8000720:	e027      	b.n	8000772 <ac_audio_controller+0x3d2>
 8000722:	46c0      	nop			@ (mov r8, r8)
 8000724:	20000024 	.word	0x20000024
 8000728:	08006330 	.word	0x08006330
 800072c:	20000084 	.word	0x20000084
 8000730:	20000090 	.word	0x20000090
 8000734:	20000092 	.word	0x20000092
 8000738:	20000094 	.word	0x20000094
 800073c:	20000083 	.word	0x20000083
 8000740:	20000080 	.word	0x20000080
 8000744:	20000081 	.word	0x20000081
 8000748:	20000088 	.word	0x20000088
 800074c:	20000096 	.word	0x20000096
 8000750:	0800625c 	.word	0x0800625c
 8000754:	20000085 	.word	0x20000085
 8000758:	20000097 	.word	0x20000097
 800075c:	20000082 	.word	0x20000082
 8000760:	20000008 	.word	0x20000008
 8000764:	20000000 	.word	0x20000000
 8000768:	20000010 	.word	0x20000010
		return;
 800076c:	46c0      	nop			@ (mov r8, r8)
 800076e:	e000      	b.n	8000772 <ac_audio_controller+0x3d2>
			if( pwm_output_enabled == false )
 8000770:	46c0      	nop			@ (mov r8, r8)
		}
	}
}
 8000772:	46bd      	mov	sp, r7
 8000774:	b004      	add	sp, #16
 8000776:	bdb0      	pop	{r4, r5, r7, pc}

08000778 <ac_adjust_alarm_audio_level>:

static uint16_t ac_adjust_alarm_audio_level(uint32_t duty_cycle_count)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b082      	sub	sp, #8
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
	return duty_cycle_count;
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	b29b      	uxth	r3, r3
}
 8000784:	0018      	movs	r0, r3
 8000786:	46bd      	mov	sp, r7
 8000788:	b002      	add	sp, #8
 800078a:	bd80      	pop	{r7, pc}

0800078c <UtilDebounceReadAndDebounceInputs>:
static uint32_t DebouncedReadings[NUM_PORT_2_DEBOUNCE][2];

static uint8_t ThisReading = 0;

void UtilDebounceReadAndDebounceInputs(void)
{
 800078c:	b5b0      	push	{r4, r5, r7, lr}
 800078e:	b082      	sub	sp, #8
 8000790:	af00      	add	r7, sp, #0
	  uint8_t thisPort;
	  	uint16_t i;

	// Now debounce the inputs by anding and oring the members of the readings array.
	for (thisPort = 0;NUM_PORT_2_DEBOUNCE > thisPort; thisPort++)
 8000792:	1dfb      	adds	r3, r7, #7
 8000794:	2200      	movs	r2, #0
 8000796:	701a      	strb	r2, [r3, #0]
 8000798:	e05f      	b.n	800085a <UtilDebounceReadAndDebounceInputs+0xce>
	{
	   // Add this reading to the port readings array.
	   PortReadings[thisPort][ThisReading] = hal_gpio_read_port(Ports2Debounce[thisPort]);
 800079a:	1dfb      	adds	r3, r7, #7
 800079c:	781a      	ldrb	r2, [r3, #0]
 800079e:	4b39      	ldr	r3, [pc, #228]	@ (8000884 <UtilDebounceReadAndDebounceInputs+0xf8>)
 80007a0:	0092      	lsls	r2, r2, #2
 80007a2:	58d2      	ldr	r2, [r2, r3]
 80007a4:	1dfb      	adds	r3, r7, #7
 80007a6:	781c      	ldrb	r4, [r3, #0]
 80007a8:	4b37      	ldr	r3, [pc, #220]	@ (8000888 <UtilDebounceReadAndDebounceInputs+0xfc>)
 80007aa:	781b      	ldrb	r3, [r3, #0]
 80007ac:	001d      	movs	r5, r3
 80007ae:	0010      	movs	r0, r2
 80007b0:	f004 ff4e 	bl	8005650 <hal_gpio_read_port>
 80007b4:	0001      	movs	r1, r0
 80007b6:	4b35      	ldr	r3, [pc, #212]	@ (800088c <UtilDebounceReadAndDebounceInputs+0x100>)
 80007b8:	0122      	lsls	r2, r4, #4
 80007ba:	1952      	adds	r2, r2, r5
 80007bc:	0092      	lsls	r2, r2, #2
 80007be:	50d1      	str	r1, [r2, r3]

	   DebouncedReadings[thisPort][0] = 0;
 80007c0:	1dfb      	adds	r3, r7, #7
 80007c2:	781a      	ldrb	r2, [r3, #0]
 80007c4:	4b32      	ldr	r3, [pc, #200]	@ (8000890 <UtilDebounceReadAndDebounceInputs+0x104>)
 80007c6:	00d2      	lsls	r2, r2, #3
 80007c8:	2100      	movs	r1, #0
 80007ca:	50d1      	str	r1, [r2, r3]
	   DebouncedReadings[thisPort][1] = 0xFFFFFFFF;
 80007cc:	1dfb      	adds	r3, r7, #7
 80007ce:	781b      	ldrb	r3, [r3, #0]
 80007d0:	4a2f      	ldr	r2, [pc, #188]	@ (8000890 <UtilDebounceReadAndDebounceInputs+0x104>)
 80007d2:	00db      	lsls	r3, r3, #3
 80007d4:	18d3      	adds	r3, r2, r3
 80007d6:	3304      	adds	r3, #4
 80007d8:	2201      	movs	r2, #1
 80007da:	4252      	negs	r2, r2
 80007dc:	601a      	str	r2, [r3, #0]

	   for (i = 0;DEBOUNCE_DEPTH > i;i++)
 80007de:	1d3b      	adds	r3, r7, #4
 80007e0:	2200      	movs	r2, #0
 80007e2:	801a      	strh	r2, [r3, #0]
 80007e4:	e030      	b.n	8000848 <UtilDebounceReadAndDebounceInputs+0xbc>
	   {
		   // debounce this port for input state == zero. If all members of the Port Readings array have a 0 in
		   // a specific bit position, that bit will be 0 in DebouncedLow for that port.
		   DebouncedReadings[thisPort][0] |= PortReadings[thisPort][i];
 80007e6:	1dfb      	adds	r3, r7, #7
 80007e8:	781a      	ldrb	r2, [r3, #0]
 80007ea:	4b29      	ldr	r3, [pc, #164]	@ (8000890 <UtilDebounceReadAndDebounceInputs+0x104>)
 80007ec:	00d2      	lsls	r2, r2, #3
 80007ee:	58d1      	ldr	r1, [r2, r3]
 80007f0:	1dfb      	adds	r3, r7, #7
 80007f2:	7818      	ldrb	r0, [r3, #0]
 80007f4:	1d3b      	adds	r3, r7, #4
 80007f6:	881a      	ldrh	r2, [r3, #0]
 80007f8:	4b24      	ldr	r3, [pc, #144]	@ (800088c <UtilDebounceReadAndDebounceInputs+0x100>)
 80007fa:	0100      	lsls	r0, r0, #4
 80007fc:	1882      	adds	r2, r0, r2
 80007fe:	0092      	lsls	r2, r2, #2
 8000800:	58d3      	ldr	r3, [r2, r3]
 8000802:	1dfa      	adds	r2, r7, #7
 8000804:	7812      	ldrb	r2, [r2, #0]
 8000806:	4319      	orrs	r1, r3
 8000808:	4b21      	ldr	r3, [pc, #132]	@ (8000890 <UtilDebounceReadAndDebounceInputs+0x104>)
 800080a:	00d2      	lsls	r2, r2, #3
 800080c:	50d1      	str	r1, [r2, r3]

		   // debounce this port for input pin state == one. If all members of the Port Readings array have a 1 in
		   // a specific bit position, that bit will be 1 in DebouncedHigh for that port.
		   DebouncedReadings[thisPort][1] &= PortReadings[thisPort][i];
 800080e:	1dfb      	adds	r3, r7, #7
 8000810:	781b      	ldrb	r3, [r3, #0]
 8000812:	4a1f      	ldr	r2, [pc, #124]	@ (8000890 <UtilDebounceReadAndDebounceInputs+0x104>)
 8000814:	00db      	lsls	r3, r3, #3
 8000816:	18d3      	adds	r3, r2, r3
 8000818:	3304      	adds	r3, #4
 800081a:	681a      	ldr	r2, [r3, #0]
 800081c:	1dfb      	adds	r3, r7, #7
 800081e:	7818      	ldrb	r0, [r3, #0]
 8000820:	1d3b      	adds	r3, r7, #4
 8000822:	8819      	ldrh	r1, [r3, #0]
 8000824:	4b19      	ldr	r3, [pc, #100]	@ (800088c <UtilDebounceReadAndDebounceInputs+0x100>)
 8000826:	0100      	lsls	r0, r0, #4
 8000828:	1841      	adds	r1, r0, r1
 800082a:	0089      	lsls	r1, r1, #2
 800082c:	58c9      	ldr	r1, [r1, r3]
 800082e:	1dfb      	adds	r3, r7, #7
 8000830:	781b      	ldrb	r3, [r3, #0]
 8000832:	400a      	ands	r2, r1
 8000834:	4916      	ldr	r1, [pc, #88]	@ (8000890 <UtilDebounceReadAndDebounceInputs+0x104>)
 8000836:	00db      	lsls	r3, r3, #3
 8000838:	18cb      	adds	r3, r1, r3
 800083a:	3304      	adds	r3, #4
 800083c:	601a      	str	r2, [r3, #0]
	   for (i = 0;DEBOUNCE_DEPTH > i;i++)
 800083e:	1d3b      	adds	r3, r7, #4
 8000840:	881a      	ldrh	r2, [r3, #0]
 8000842:	1d3b      	adds	r3, r7, #4
 8000844:	3201      	adds	r2, #1
 8000846:	801a      	strh	r2, [r3, #0]
 8000848:	1d3b      	adds	r3, r7, #4
 800084a:	881b      	ldrh	r3, [r3, #0]
 800084c:	2b0f      	cmp	r3, #15
 800084e:	d9ca      	bls.n	80007e6 <UtilDebounceReadAndDebounceInputs+0x5a>
	for (thisPort = 0;NUM_PORT_2_DEBOUNCE > thisPort; thisPort++)
 8000850:	1dfb      	adds	r3, r7, #7
 8000852:	781a      	ldrb	r2, [r3, #0]
 8000854:	1dfb      	adds	r3, r7, #7
 8000856:	3201      	adds	r2, #1
 8000858:	701a      	strb	r2, [r3, #0]
 800085a:	1dfb      	adds	r3, r7, #7
 800085c:	781b      	ldrb	r3, [r3, #0]
 800085e:	2b01      	cmp	r3, #1
 8000860:	d99b      	bls.n	800079a <UtilDebounceReadAndDebounceInputs+0xe>
	   }

	}

	// Increment and wrap the reading number
	++ThisReading;
 8000862:	4b09      	ldr	r3, [pc, #36]	@ (8000888 <UtilDebounceReadAndDebounceInputs+0xfc>)
 8000864:	781b      	ldrb	r3, [r3, #0]
 8000866:	3301      	adds	r3, #1
 8000868:	b2da      	uxtb	r2, r3
 800086a:	4b07      	ldr	r3, [pc, #28]	@ (8000888 <UtilDebounceReadAndDebounceInputs+0xfc>)
 800086c:	701a      	strb	r2, [r3, #0]
	ThisReading &= DEBOUNCE_WRAP; // This will cause the value of ThisReading to ngo back to zero when the value is incremented passed
 800086e:	4b06      	ldr	r3, [pc, #24]	@ (8000888 <UtilDebounceReadAndDebounceInputs+0xfc>)
 8000870:	781b      	ldrb	r3, [r3, #0]
 8000872:	220f      	movs	r2, #15
 8000874:	4013      	ands	r3, r2
 8000876:	b2da      	uxtb	r2, r3
 8000878:	4b03      	ldr	r3, [pc, #12]	@ (8000888 <UtilDebounceReadAndDebounceInputs+0xfc>)
 800087a:	701a      	strb	r2, [r3, #0]
									// the value of DEBOUNCE_WRAP.
}
 800087c:	46c0      	nop			@ (mov r8, r8)
 800087e:	46bd      	mov	sp, r7
 8000880:	b002      	add	sp, #8
 8000882:	bdb0      	pop	{r4, r5, r7, pc}
 8000884:	0800628c 	.word	0x0800628c
 8000888:	20000128 	.word	0x20000128
 800088c:	20000098 	.word	0x20000098
 8000890:	20000118 	.word	0x20000118

08000894 <UtilDebounceCheckPinState>:

// This function will return true if the specified pins state matches the indicated state.
bool UtilDebounceCheckPinState(enum pin_id pinId,bool state2BeChecked)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b084      	sub	sp, #16
 8000898:	af00      	add	r7, sp, #0
 800089a:	0002      	movs	r2, r0
 800089c:	1dfb      	adds	r3, r7, #7
 800089e:	701a      	strb	r2, [r3, #0]
 80008a0:	1dbb      	adds	r3, r7, #6
 80008a2:	1c0a      	adds	r2, r1, #0
 80008a4:	701a      	strb	r2, [r3, #0]
	bool retVal = false;
 80008a6:	230f      	movs	r3, #15
 80008a8:	18fb      	adds	r3, r7, r3
 80008aa:	2200      	movs	r2, #0
 80008ac:	701a      	strb	r2, [r3, #0]
	uint8_t thisPort;

	// Find this pins port in the Ports2Debounce array
	for (thisPort = 0;NUM_PORT_2_DEBOUNCE > thisPort; thisPort++)
 80008ae:	230e      	movs	r3, #14
 80008b0:	18fb      	adds	r3, r7, r3
 80008b2:	2200      	movs	r2, #0
 80008b4:	701a      	strb	r2, [r3, #0]
 80008b6:	e011      	b.n	80008dc <UtilDebounceCheckPinState+0x48>
	{
		if (Ports2Debounce[thisPort] == port_defs[pinId])
 80008b8:	200e      	movs	r0, #14
 80008ba:	183b      	adds	r3, r7, r0
 80008bc:	781a      	ldrb	r2, [r3, #0]
 80008be:	4b2e      	ldr	r3, [pc, #184]	@ (8000978 <UtilDebounceCheckPinState+0xe4>)
 80008c0:	0092      	lsls	r2, r2, #2
 80008c2:	58d2      	ldr	r2, [r2, r3]
 80008c4:	1dfb      	adds	r3, r7, #7
 80008c6:	7819      	ldrb	r1, [r3, #0]
 80008c8:	4b2c      	ldr	r3, [pc, #176]	@ (800097c <UtilDebounceCheckPinState+0xe8>)
 80008ca:	0089      	lsls	r1, r1, #2
 80008cc:	58cb      	ldr	r3, [r1, r3]
 80008ce:	429a      	cmp	r2, r3
 80008d0:	d00a      	beq.n	80008e8 <UtilDebounceCheckPinState+0x54>
	for (thisPort = 0;NUM_PORT_2_DEBOUNCE > thisPort; thisPort++)
 80008d2:	183b      	adds	r3, r7, r0
 80008d4:	781a      	ldrb	r2, [r3, #0]
 80008d6:	183b      	adds	r3, r7, r0
 80008d8:	3201      	adds	r2, #1
 80008da:	701a      	strb	r2, [r3, #0]
 80008dc:	230e      	movs	r3, #14
 80008de:	18fb      	adds	r3, r7, r3
 80008e0:	781b      	ldrb	r3, [r3, #0]
 80008e2:	2b01      	cmp	r3, #1
 80008e4:	d9e8      	bls.n	80008b8 <UtilDebounceCheckPinState+0x24>
 80008e6:	e000      	b.n	80008ea <UtilDebounceCheckPinState+0x56>
		{
			// We found the port. We need to stop now.
			break;
 80008e8:	46c0      	nop			@ (mov r8, r8)
		}
	}

	if (NUM_PORT_2_DEBOUNCE <= thisPort)
 80008ea:	230e      	movs	r3, #14
 80008ec:	18fb      	adds	r3, r7, r3
 80008ee:	781b      	ldrb	r3, [r3, #0]
 80008f0:	2b01      	cmp	r3, #1
 80008f2:	d901      	bls.n	80008f8 <UtilDebounceCheckPinState+0x64>
	{
		// We did not find this pins port in the Ports2Debounce array
#if USE_RTT_FOR_DEBUGGING && DEBUG_DEBOUNCE // Note that both of these should be #defined to 1 in periphdefs.h.
		debug_rtt_printf("Pin id %i points to a port that is not in the Ports2Debounce array\r\n",pinId);
#endif
		while(1);
 80008f4:	46c0      	nop			@ (mov r8, r8)
 80008f6:	e7fd      	b.n	80008f4 <UtilDebounceCheckPinState+0x60>
	}
	else
	{
		if (true == state2BeChecked)
 80008f8:	1dbb      	adds	r3, r7, #6
 80008fa:	781b      	ldrb	r3, [r3, #0]
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d01f      	beq.n	8000940 <UtilDebounceCheckPinState+0xac>
		{
			// Check for a one on the specified pins bit.
			if((DebouncedReadings[thisPort][1] & pin_defs[pinId].Pin) == pin_defs[pinId].Pin)
 8000900:	230e      	movs	r3, #14
 8000902:	18fb      	adds	r3, r7, r3
 8000904:	781b      	ldrb	r3, [r3, #0]
 8000906:	4a1e      	ldr	r2, [pc, #120]	@ (8000980 <UtilDebounceCheckPinState+0xec>)
 8000908:	00db      	lsls	r3, r3, #3
 800090a:	18d3      	adds	r3, r2, r3
 800090c:	3304      	adds	r3, #4
 800090e:	6819      	ldr	r1, [r3, #0]
 8000910:	1dfb      	adds	r3, r7, #7
 8000912:	781a      	ldrb	r2, [r3, #0]
 8000914:	481b      	ldr	r0, [pc, #108]	@ (8000984 <UtilDebounceCheckPinState+0xf0>)
 8000916:	0013      	movs	r3, r2
 8000918:	009b      	lsls	r3, r3, #2
 800091a:	189b      	adds	r3, r3, r2
 800091c:	009b      	lsls	r3, r3, #2
 800091e:	581b      	ldr	r3, [r3, r0]
 8000920:	4019      	ands	r1, r3
 8000922:	1dfb      	adds	r3, r7, #7
 8000924:	781a      	ldrb	r2, [r3, #0]
 8000926:	4817      	ldr	r0, [pc, #92]	@ (8000984 <UtilDebounceCheckPinState+0xf0>)
 8000928:	0013      	movs	r3, r2
 800092a:	009b      	lsls	r3, r3, #2
 800092c:	189b      	adds	r3, r3, r2
 800092e:	009b      	lsls	r3, r3, #2
 8000930:	581b      	ldr	r3, [r3, r0]
 8000932:	4299      	cmp	r1, r3
 8000934:	d118      	bne.n	8000968 <UtilDebounceCheckPinState+0xd4>
			{
				// This pins bit was set to one in all members of the PortReading array so return true:
				retVal = true;
 8000936:	230f      	movs	r3, #15
 8000938:	18fb      	adds	r3, r7, r3
 800093a:	2201      	movs	r2, #1
 800093c:	701a      	strb	r2, [r3, #0]
 800093e:	e013      	b.n	8000968 <UtilDebounceCheckPinState+0xd4>
			}
		}
		else
		{
			// Check for a zero on the specified pins bit.
			if((DebouncedReadings[thisPort][0] & pin_defs[pinId].Pin) == 0)
 8000940:	230e      	movs	r3, #14
 8000942:	18fb      	adds	r3, r7, r3
 8000944:	781a      	ldrb	r2, [r3, #0]
 8000946:	4b0e      	ldr	r3, [pc, #56]	@ (8000980 <UtilDebounceCheckPinState+0xec>)
 8000948:	00d2      	lsls	r2, r2, #3
 800094a:	58d1      	ldr	r1, [r2, r3]
 800094c:	1dfb      	adds	r3, r7, #7
 800094e:	781a      	ldrb	r2, [r3, #0]
 8000950:	480c      	ldr	r0, [pc, #48]	@ (8000984 <UtilDebounceCheckPinState+0xf0>)
 8000952:	0013      	movs	r3, r2
 8000954:	009b      	lsls	r3, r3, #2
 8000956:	189b      	adds	r3, r3, r2
 8000958:	009b      	lsls	r3, r3, #2
 800095a:	581b      	ldr	r3, [r3, r0]
 800095c:	400b      	ands	r3, r1
 800095e:	d103      	bne.n	8000968 <UtilDebounceCheckPinState+0xd4>
			{
				// This pins bit was set to zero in all members of the PortReading array so return true:
				retVal = true;
 8000960:	230f      	movs	r3, #15
 8000962:	18fb      	adds	r3, r7, r3
 8000964:	2201      	movs	r2, #1
 8000966:	701a      	strb	r2, [r3, #0]
			}
		}
	}

	return retVal;
 8000968:	230f      	movs	r3, #15
 800096a:	18fb      	adds	r3, r7, r3
 800096c:	781b      	ldrb	r3, [r3, #0]
}
 800096e:	0018      	movs	r0, r3
 8000970:	46bd      	mov	sp, r7
 8000972:	b004      	add	sp, #16
 8000974:	bd80      	pop	{r7, pc}
 8000976:	46c0      	nop			@ (mov r8, r8)
 8000978:	0800628c 	.word	0x0800628c
 800097c:	08006448 	.word	0x08006448
 8000980:	20000118 	.word	0x20000118
 8000984:	08006330 	.word	0x08006330

08000988 <GetVBoostVboostPwmDutyCyclePctFromFlash>:
#include "VboostHandler.h"

static uint16_t VboostPwmDutyCyclePct = 50;

bool GetVBoostVboostPwmDutyCyclePctFromFlash(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0
	// TODO: Write GetVBoostVboostPwmDutyCyclePctFromFlash()
	return false;
 800098c:	2300      	movs	r3, #0
}
 800098e:	0018      	movs	r0, r3
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}

08000994 <GetVboostPwmDutyCyclePct>:

uint16_t GetVboostPwmDutyCyclePct(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
	return VboostPwmDutyCyclePct;
 8000998:	4b02      	ldr	r3, [pc, #8]	@ (80009a4 <GetVboostPwmDutyCyclePct+0x10>)
 800099a:	881b      	ldrh	r3, [r3, #0]
}
 800099c:	0018      	movs	r0, r3
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	46c0      	nop			@ (mov r8, r8)
 80009a4:	20000016 	.word	0x20000016

080009a8 <VboostStartPWM>:

void VboostStartPWM(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
	HAL_TIMEx_PWMN_Start(&htim15, TIM_CHANNEL_1);
 80009ac:	4b03      	ldr	r3, [pc, #12]	@ (80009bc <VboostStartPWM+0x14>)
 80009ae:	2100      	movs	r1, #0
 80009b0:	0018      	movs	r0, r3
 80009b2:	f003 ff7d 	bl	80048b0 <HAL_TIMEx_PWMN_Start>
}
 80009b6:	46c0      	nop			@ (mov r8, r8)
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	200002e8 	.word	0x200002e8

080009c0 <VboostStopPWM>:

void VboostStopPWM(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
	HAL_TIMEx_PWMN_Stop(&htim15, TIM_CHANNEL_1);
 80009c4:	4b03      	ldr	r3, [pc, #12]	@ (80009d4 <VboostStopPWM+0x14>)
 80009c6:	2100      	movs	r1, #0
 80009c8:	0018      	movs	r0, r3
 80009ca:	f004 f80f 	bl	80049ec <HAL_TIMEx_PWMN_Stop>
}
 80009ce:	46c0      	nop			@ (mov r8, r8)
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	200002e8 	.word	0x200002e8

080009d8 <WptControllerInit>:
*
* return values: None
*
* ****************************************************************/
void WptControllerInit(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0
	// Get the Wireless Power Transfer percent duty cycle from flash
	// TODO: setup WPT duty cycle storage and retrieval to/from flash.


}
 80009dc:	46c0      	nop			@ (mov r8, r8)
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
	...

080009e4 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b084      	sub	sp, #16
 80009e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80009ea:	1d3b      	adds	r3, r7, #4
 80009ec:	0018      	movs	r0, r3
 80009ee:	230c      	movs	r3, #12
 80009f0:	001a      	movs	r2, r3
 80009f2:	2100      	movs	r1, #0
 80009f4:	f005 fc1e 	bl	8006234 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80009f8:	4b2d      	ldr	r3, [pc, #180]	@ (8000ab0 <MX_ADC1_Init+0xcc>)
 80009fa:	4a2e      	ldr	r2, [pc, #184]	@ (8000ab4 <MX_ADC1_Init+0xd0>)
 80009fc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80009fe:	4b2c      	ldr	r3, [pc, #176]	@ (8000ab0 <MX_ADC1_Init+0xcc>)
 8000a00:	2280      	movs	r2, #128	@ 0x80
 8000a02:	05d2      	lsls	r2, r2, #23
 8000a04:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000a06:	4b2a      	ldr	r3, [pc, #168]	@ (8000ab0 <MX_ADC1_Init+0xcc>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a0c:	4b28      	ldr	r3, [pc, #160]	@ (8000ab0 <MX_ADC1_Init+0xcc>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a12:	4b27      	ldr	r3, [pc, #156]	@ (8000ab0 <MX_ADC1_Init+0xcc>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a18:	4b25      	ldr	r3, [pc, #148]	@ (8000ab0 <MX_ADC1_Init+0xcc>)
 8000a1a:	2204      	movs	r2, #4
 8000a1c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000a1e:	4b24      	ldr	r3, [pc, #144]	@ (8000ab0 <MX_ADC1_Init+0xcc>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8000a24:	4b22      	ldr	r3, [pc, #136]	@ (8000ab0 <MX_ADC1_Init+0xcc>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000a2a:	4b21      	ldr	r3, [pc, #132]	@ (8000ab0 <MX_ADC1_Init+0xcc>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8000a30:	4b1f      	ldr	r3, [pc, #124]	@ (8000ab0 <MX_ADC1_Init+0xcc>)
 8000a32:	2201      	movs	r2, #1
 8000a34:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a36:	4b1e      	ldr	r3, [pc, #120]	@ (8000ab0 <MX_ADC1_Init+0xcc>)
 8000a38:	2220      	movs	r2, #32
 8000a3a:	2100      	movs	r1, #0
 8000a3c:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a3e:	4b1c      	ldr	r3, [pc, #112]	@ (8000ab0 <MX_ADC1_Init+0xcc>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a44:	4b1a      	ldr	r3, [pc, #104]	@ (8000ab0 <MX_ADC1_Init+0xcc>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000a4a:	4b19      	ldr	r3, [pc, #100]	@ (8000ab0 <MX_ADC1_Init+0xcc>)
 8000a4c:	222c      	movs	r2, #44	@ 0x2c
 8000a4e:	2100      	movs	r1, #0
 8000a50:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000a52:	4b17      	ldr	r3, [pc, #92]	@ (8000ab0 <MX_ADC1_Init+0xcc>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8000a58:	4b15      	ldr	r3, [pc, #84]	@ (8000ab0 <MX_ADC1_Init+0xcc>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8000a5e:	4b14      	ldr	r3, [pc, #80]	@ (8000ab0 <MX_ADC1_Init+0xcc>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8000a64:	4b12      	ldr	r3, [pc, #72]	@ (8000ab0 <MX_ADC1_Init+0xcc>)
 8000a66:	223c      	movs	r2, #60	@ 0x3c
 8000a68:	2100      	movs	r1, #0
 8000a6a:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000a6c:	4b10      	ldr	r3, [pc, #64]	@ (8000ab0 <MX_ADC1_Init+0xcc>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a72:	4b0f      	ldr	r3, [pc, #60]	@ (8000ab0 <MX_ADC1_Init+0xcc>)
 8000a74:	0018      	movs	r0, r3
 8000a76:	f001 f8ff 	bl	8001c78 <HAL_ADC_Init>
 8000a7a:	1e03      	subs	r3, r0, #0
 8000a7c:	d001      	beq.n	8000a82 <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 8000a7e:	f000 fb24 	bl	80010ca <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000a82:	1d3b      	adds	r3, r7, #4
 8000a84:	4a0c      	ldr	r2, [pc, #48]	@ (8000ab8 <MX_ADC1_Init+0xd4>)
 8000a86:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a88:	1d3b      	adds	r3, r7, #4
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8000a8e:	1d3b      	adds	r3, r7, #4
 8000a90:	2200      	movs	r2, #0
 8000a92:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a94:	1d3a      	adds	r2, r7, #4
 8000a96:	4b06      	ldr	r3, [pc, #24]	@ (8000ab0 <MX_ADC1_Init+0xcc>)
 8000a98:	0011      	movs	r1, r2
 8000a9a:	0018      	movs	r0, r3
 8000a9c:	f001 fbc4 	bl	8002228 <HAL_ADC_ConfigChannel>
 8000aa0:	1e03      	subs	r3, r0, #0
 8000aa2:	d001      	beq.n	8000aa8 <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 8000aa4:	f000 fb11 	bl	80010ca <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000aa8:	46c0      	nop			@ (mov r8, r8)
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	b004      	add	sp, #16
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	2000012c 	.word	0x2000012c
 8000ab4:	40012400 	.word	0x40012400
 8000ab8:	28000400 	.word	0x28000400

08000abc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000abc:	b590      	push	{r4, r7, lr}
 8000abe:	b08b      	sub	sp, #44	@ 0x2c
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac4:	2414      	movs	r4, #20
 8000ac6:	193b      	adds	r3, r7, r4
 8000ac8:	0018      	movs	r0, r3
 8000aca:	2314      	movs	r3, #20
 8000acc:	001a      	movs	r2, r3
 8000ace:	2100      	movs	r1, #0
 8000ad0:	f005 fbb0 	bl	8006234 <memset>
  if(adcHandle->Instance==ADC1)
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	4a29      	ldr	r2, [pc, #164]	@ (8000b80 <HAL_ADC_MspInit+0xc4>)
 8000ada:	4293      	cmp	r3, r2
 8000adc:	d14c      	bne.n	8000b78 <HAL_ADC_MspInit+0xbc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000ade:	4b29      	ldr	r3, [pc, #164]	@ (8000b84 <HAL_ADC_MspInit+0xc8>)
 8000ae0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000ae2:	4b28      	ldr	r3, [pc, #160]	@ (8000b84 <HAL_ADC_MspInit+0xc8>)
 8000ae4:	2180      	movs	r1, #128	@ 0x80
 8000ae6:	0349      	lsls	r1, r1, #13
 8000ae8:	430a      	orrs	r2, r1
 8000aea:	641a      	str	r2, [r3, #64]	@ 0x40
 8000aec:	4b25      	ldr	r3, [pc, #148]	@ (8000b84 <HAL_ADC_MspInit+0xc8>)
 8000aee:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000af0:	2380      	movs	r3, #128	@ 0x80
 8000af2:	035b      	lsls	r3, r3, #13
 8000af4:	4013      	ands	r3, r2
 8000af6:	613b      	str	r3, [r7, #16]
 8000af8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000afa:	4b22      	ldr	r3, [pc, #136]	@ (8000b84 <HAL_ADC_MspInit+0xc8>)
 8000afc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000afe:	4b21      	ldr	r3, [pc, #132]	@ (8000b84 <HAL_ADC_MspInit+0xc8>)
 8000b00:	2101      	movs	r1, #1
 8000b02:	430a      	orrs	r2, r1
 8000b04:	635a      	str	r2, [r3, #52]	@ 0x34
 8000b06:	4b1f      	ldr	r3, [pc, #124]	@ (8000b84 <HAL_ADC_MspInit+0xc8>)
 8000b08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000b0a:	2201      	movs	r2, #1
 8000b0c:	4013      	ands	r3, r2
 8000b0e:	60fb      	str	r3, [r7, #12]
 8000b10:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b12:	4b1c      	ldr	r3, [pc, #112]	@ (8000b84 <HAL_ADC_MspInit+0xc8>)
 8000b14:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000b16:	4b1b      	ldr	r3, [pc, #108]	@ (8000b84 <HAL_ADC_MspInit+0xc8>)
 8000b18:	2102      	movs	r1, #2
 8000b1a:	430a      	orrs	r2, r1
 8000b1c:	635a      	str	r2, [r3, #52]	@ 0x34
 8000b1e:	4b19      	ldr	r3, [pc, #100]	@ (8000b84 <HAL_ADC_MspInit+0xc8>)
 8000b20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000b22:	2202      	movs	r2, #2
 8000b24:	4013      	ands	r3, r2
 8000b26:	60bb      	str	r3, [r7, #8]
 8000b28:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN0
    PA7     ------> ADC1_IN7
    PB2     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = VBOOST_FDBK_Pin|VIN_MONITOR_Pin;
 8000b2a:	193b      	adds	r3, r7, r4
 8000b2c:	2281      	movs	r2, #129	@ 0x81
 8000b2e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b30:	193b      	adds	r3, r7, r4
 8000b32:	2203      	movs	r2, #3
 8000b34:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b36:	193b      	adds	r3, r7, r4
 8000b38:	2200      	movs	r2, #0
 8000b3a:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b3c:	193a      	adds	r2, r7, r4
 8000b3e:	23a0      	movs	r3, #160	@ 0xa0
 8000b40:	05db      	lsls	r3, r3, #23
 8000b42:	0011      	movs	r1, r2
 8000b44:	0018      	movs	r0, r3
 8000b46:	f001 ff11 	bl	800296c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = NFC_VOUT_SENSE_Pin;
 8000b4a:	193b      	adds	r3, r7, r4
 8000b4c:	2204      	movs	r2, #4
 8000b4e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b50:	193b      	adds	r3, r7, r4
 8000b52:	2203      	movs	r2, #3
 8000b54:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b56:	193b      	adds	r3, r7, r4
 8000b58:	2200      	movs	r2, #0
 8000b5a:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(NFC_VOUT_SENSE_GPIO_Port, &GPIO_InitStruct);
 8000b5c:	193b      	adds	r3, r7, r4
 8000b5e:	4a0a      	ldr	r2, [pc, #40]	@ (8000b88 <HAL_ADC_MspInit+0xcc>)
 8000b60:	0019      	movs	r1, r3
 8000b62:	0010      	movs	r0, r2
 8000b64:	f001 ff02 	bl	800296c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 8000b68:	2200      	movs	r2, #0
 8000b6a:	2100      	movs	r1, #0
 8000b6c:	200c      	movs	r0, #12
 8000b6e:	f001 fdff 	bl	8002770 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8000b72:	200c      	movs	r0, #12
 8000b74:	f001 fe11 	bl	800279a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000b78:	46c0      	nop			@ (mov r8, r8)
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	b00b      	add	sp, #44	@ 0x2c
 8000b7e:	bd90      	pop	{r4, r7, pc}
 8000b80:	40012400 	.word	0x40012400
 8000b84:	40021000 	.word	0x40021000
 8000b88:	50000400 	.word	0x50000400

08000b8c <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8000b8c:	b590      	push	{r4, r7, lr}
 8000b8e:	b08b      	sub	sp, #44	@ 0x2c
 8000b90:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b92:	2414      	movs	r4, #20
 8000b94:	193b      	adds	r3, r7, r4
 8000b96:	0018      	movs	r0, r3
 8000b98:	2314      	movs	r3, #20
 8000b9a:	001a      	movs	r2, r3
 8000b9c:	2100      	movs	r1, #0
 8000b9e:	f005 fb49 	bl	8006234 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ba2:	4b6f      	ldr	r3, [pc, #444]	@ (8000d60 <MX_GPIO_Init+0x1d4>)
 8000ba4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000ba6:	4b6e      	ldr	r3, [pc, #440]	@ (8000d60 <MX_GPIO_Init+0x1d4>)
 8000ba8:	2104      	movs	r1, #4
 8000baa:	430a      	orrs	r2, r1
 8000bac:	635a      	str	r2, [r3, #52]	@ 0x34
 8000bae:	4b6c      	ldr	r3, [pc, #432]	@ (8000d60 <MX_GPIO_Init+0x1d4>)
 8000bb0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000bb2:	2204      	movs	r2, #4
 8000bb4:	4013      	ands	r3, r2
 8000bb6:	613b      	str	r3, [r7, #16]
 8000bb8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000bba:	4b69      	ldr	r3, [pc, #420]	@ (8000d60 <MX_GPIO_Init+0x1d4>)
 8000bbc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000bbe:	4b68      	ldr	r3, [pc, #416]	@ (8000d60 <MX_GPIO_Init+0x1d4>)
 8000bc0:	2120      	movs	r1, #32
 8000bc2:	430a      	orrs	r2, r1
 8000bc4:	635a      	str	r2, [r3, #52]	@ 0x34
 8000bc6:	4b66      	ldr	r3, [pc, #408]	@ (8000d60 <MX_GPIO_Init+0x1d4>)
 8000bc8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000bca:	2220      	movs	r2, #32
 8000bcc:	4013      	ands	r3, r2
 8000bce:	60fb      	str	r3, [r7, #12]
 8000bd0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bd2:	4b63      	ldr	r3, [pc, #396]	@ (8000d60 <MX_GPIO_Init+0x1d4>)
 8000bd4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000bd6:	4b62      	ldr	r3, [pc, #392]	@ (8000d60 <MX_GPIO_Init+0x1d4>)
 8000bd8:	2101      	movs	r1, #1
 8000bda:	430a      	orrs	r2, r1
 8000bdc:	635a      	str	r2, [r3, #52]	@ 0x34
 8000bde:	4b60      	ldr	r3, [pc, #384]	@ (8000d60 <MX_GPIO_Init+0x1d4>)
 8000be0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000be2:	2201      	movs	r2, #1
 8000be4:	4013      	ands	r3, r2
 8000be6:	60bb      	str	r3, [r7, #8]
 8000be8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bea:	4b5d      	ldr	r3, [pc, #372]	@ (8000d60 <MX_GPIO_Init+0x1d4>)
 8000bec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000bee:	4b5c      	ldr	r3, [pc, #368]	@ (8000d60 <MX_GPIO_Init+0x1d4>)
 8000bf0:	2102      	movs	r1, #2
 8000bf2:	430a      	orrs	r2, r1
 8000bf4:	635a      	str	r2, [r3, #52]	@ 0x34
 8000bf6:	4b5a      	ldr	r3, [pc, #360]	@ (8000d60 <MX_GPIO_Init+0x1d4>)
 8000bf8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000bfa:	2202      	movs	r2, #2
 8000bfc:	4013      	ands	r3, r2
 8000bfe:	607b      	str	r3, [r7, #4]
 8000c00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c02:	4b57      	ldr	r3, [pc, #348]	@ (8000d60 <MX_GPIO_Init+0x1d4>)
 8000c04:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000c06:	4b56      	ldr	r3, [pc, #344]	@ (8000d60 <MX_GPIO_Init+0x1d4>)
 8000c08:	2108      	movs	r1, #8
 8000c0a:	430a      	orrs	r2, r1
 8000c0c:	635a      	str	r2, [r3, #52]	@ 0x34
 8000c0e:	4b54      	ldr	r3, [pc, #336]	@ (8000d60 <MX_GPIO_Init+0x1d4>)
 8000c10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000c12:	2208      	movs	r2, #8
 8000c14:	4013      	ands	r3, r2
 8000c16:	603b      	str	r3, [r7, #0]
 8000c18:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, VBOOST_ENABLE_Pin|LED_RED_Pin|LED_YELLOW_Pin|LED_GREEN_Pin
 8000c1a:	4952      	ldr	r1, [pc, #328]	@ (8000d64 <MX_GPIO_Init+0x1d8>)
 8000c1c:	23a0      	movs	r3, #160	@ 0xa0
 8000c1e:	05db      	lsls	r3, r3, #23
 8000c20:	2200      	movs	r2, #0
 8000c22:	0018      	movs	r0, r3
 8000c24:	f002 f806 	bl	8002c34 <HAL_GPIO_WritePin>
                          |CHARGE_EN_Pin|BATTERY_ENABLE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NFC_POWER_ENABLE_GPIO_Port, NFC_POWER_ENABLE_Pin, GPIO_PIN_RESET);
 8000c28:	4b4f      	ldr	r3, [pc, #316]	@ (8000d68 <MX_GPIO_Init+0x1dc>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	2140      	movs	r1, #64	@ 0x40
 8000c2e:	0018      	movs	r0, r3
 8000c30:	f002 f800 	bl	8002c34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 8000c34:	193b      	adds	r3, r7, r4
 8000c36:	2280      	movs	r2, #128	@ 0x80
 8000c38:	0192      	lsls	r2, r2, #6
 8000c3a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c3c:	193b      	adds	r3, r7, r4
 8000c3e:	2200      	movs	r2, #0
 8000c40:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c42:	193b      	adds	r3, r7, r4
 8000c44:	2200      	movs	r2, #0
 8000c46:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000c48:	193b      	adds	r3, r7, r4
 8000c4a:	4a48      	ldr	r2, [pc, #288]	@ (8000d6c <MX_GPIO_Init+0x1e0>)
 8000c4c:	0019      	movs	r1, r3
 8000c4e:	0010      	movs	r0, r2
 8000c50:	f001 fe8c 	bl	800296c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 PC6 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_6|GPIO_PIN_7;
 8000c54:	193b      	adds	r3, r7, r4
 8000c56:	4a46      	ldr	r2, [pc, #280]	@ (8000d70 <MX_GPIO_Init+0x1e4>)
 8000c58:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c5a:	193b      	adds	r3, r7, r4
 8000c5c:	2203      	movs	r2, #3
 8000c5e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c60:	193b      	adds	r3, r7, r4
 8000c62:	2200      	movs	r2, #0
 8000c64:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c66:	193b      	adds	r3, r7, r4
 8000c68:	4a40      	ldr	r2, [pc, #256]	@ (8000d6c <MX_GPIO_Init+0x1e0>)
 8000c6a:	0019      	movs	r1, r3
 8000c6c:	0010      	movs	r0, r2
 8000c6e:	f001 fe7d 	bl	800296c <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000c72:	193b      	adds	r3, r7, r4
 8000c74:	2203      	movs	r2, #3
 8000c76:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c78:	193b      	adds	r3, r7, r4
 8000c7a:	2203      	movs	r2, #3
 8000c7c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7e:	193b      	adds	r3, r7, r4
 8000c80:	2200      	movs	r2, #0
 8000c82:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000c84:	193b      	adds	r3, r7, r4
 8000c86:	4a3b      	ldr	r2, [pc, #236]	@ (8000d74 <MX_GPIO_Init+0x1e8>)
 8000c88:	0019      	movs	r1, r3
 8000c8a:	0010      	movs	r0, r2
 8000c8c:	f001 fe6e 	bl	800296c <HAL_GPIO_Init>

  /*Configure GPIO pins : VBOOST_ENABLE_Pin LED_RED_Pin LED_YELLOW_Pin LED_GREEN_Pin
                           CHARGE_EN_Pin BATTERY_ENABLE_Pin */
  GPIO_InitStruct.Pin = VBOOST_ENABLE_Pin|LED_RED_Pin|LED_YELLOW_Pin|LED_GREEN_Pin
 8000c90:	193b      	adds	r3, r7, r4
 8000c92:	4a34      	ldr	r2, [pc, #208]	@ (8000d64 <MX_GPIO_Init+0x1d8>)
 8000c94:	601a      	str	r2, [r3, #0]
                          |CHARGE_EN_Pin|BATTERY_ENABLE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c96:	193b      	adds	r3, r7, r4
 8000c98:	2201      	movs	r2, #1
 8000c9a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9c:	193b      	adds	r3, r7, r4
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca2:	193b      	adds	r3, r7, r4
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ca8:	193a      	adds	r2, r7, r4
 8000caa:	23a0      	movs	r3, #160	@ 0xa0
 8000cac:	05db      	lsls	r3, r3, #23
 8000cae:	0011      	movs	r1, r2
 8000cb0:	0018      	movs	r0, r3
 8000cb2:	f001 fe5b 	bl	800296c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB11 PB12 PB13
                           PB14 PB15 PB3 PB4
                           PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8000cb6:	193b      	adds	r3, r7, r4
 8000cb8:	4a2f      	ldr	r2, [pc, #188]	@ (8000d78 <MX_GPIO_Init+0x1ec>)
 8000cba:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4
                          |GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cbc:	193b      	adds	r3, r7, r4
 8000cbe:	2203      	movs	r2, #3
 8000cc0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc2:	193b      	adds	r3, r7, r4
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cc8:	193b      	adds	r3, r7, r4
 8000cca:	4a27      	ldr	r2, [pc, #156]	@ (8000d68 <MX_GPIO_Init+0x1dc>)
 8000ccc:	0019      	movs	r1, r3
 8000cce:	0010      	movs	r0, r2
 8000cd0:	f001 fe4c 	bl	800296c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000cd4:	193b      	adds	r3, r7, r4
 8000cd6:	2280      	movs	r2, #128	@ 0x80
 8000cd8:	0152      	lsls	r2, r2, #5
 8000cda:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cdc:	193b      	adds	r3, r7, r4
 8000cde:	2203      	movs	r2, #3
 8000ce0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce2:	193b      	adds	r3, r7, r4
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ce8:	193a      	adds	r2, r7, r4
 8000cea:	23a0      	movs	r3, #160	@ 0xa0
 8000cec:	05db      	lsls	r3, r3, #23
 8000cee:	0011      	movs	r1, r2
 8000cf0:	0018      	movs	r0, r3
 8000cf2:	f001 fe3b 	bl	800296c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD2 PD3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000cf6:	193b      	adds	r3, r7, r4
 8000cf8:	220f      	movs	r2, #15
 8000cfa:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cfc:	193b      	adds	r3, r7, r4
 8000cfe:	2203      	movs	r2, #3
 8000d00:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d02:	193b      	adds	r3, r7, r4
 8000d04:	2200      	movs	r2, #0
 8000d06:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d08:	193b      	adds	r3, r7, r4
 8000d0a:	4a1c      	ldr	r2, [pc, #112]	@ (8000d7c <MX_GPIO_Init+0x1f0>)
 8000d0c:	0019      	movs	r1, r3
 8000d0e:	0010      	movs	r0, r2
 8000d10:	f001 fe2c 	bl	800296c <HAL_GPIO_Init>

  /*Configure GPIO pin : NFC_POWER_ENABLE_Pin */
  GPIO_InitStruct.Pin = NFC_POWER_ENABLE_Pin;
 8000d14:	193b      	adds	r3, r7, r4
 8000d16:	2240      	movs	r2, #64	@ 0x40
 8000d18:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d1a:	193b      	adds	r3, r7, r4
 8000d1c:	2201      	movs	r2, #1
 8000d1e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d20:	193b      	adds	r3, r7, r4
 8000d22:	2200      	movs	r2, #0
 8000d24:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d26:	193b      	adds	r3, r7, r4
 8000d28:	2200      	movs	r2, #0
 8000d2a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(NFC_POWER_ENABLE_GPIO_Port, &GPIO_InitStruct);
 8000d2c:	193b      	adds	r3, r7, r4
 8000d2e:	4a0e      	ldr	r2, [pc, #56]	@ (8000d68 <MX_GPIO_Init+0x1dc>)
 8000d30:	0019      	movs	r1, r3
 8000d32:	0010      	movs	r0, r2
 8000d34:	f001 fe1a 	bl	800296c <HAL_GPIO_Init>

  /*Configure GPIO pin : NFC_FD_INT_Pin */
  GPIO_InitStruct.Pin = NFC_FD_INT_Pin;
 8000d38:	0021      	movs	r1, r4
 8000d3a:	187b      	adds	r3, r7, r1
 8000d3c:	2280      	movs	r2, #128	@ 0x80
 8000d3e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d40:	187b      	adds	r3, r7, r1
 8000d42:	2200      	movs	r2, #0
 8000d44:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d46:	187b      	adds	r3, r7, r1
 8000d48:	2200      	movs	r2, #0
 8000d4a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(NFC_FD_INT_GPIO_Port, &GPIO_InitStruct);
 8000d4c:	187b      	adds	r3, r7, r1
 8000d4e:	4a06      	ldr	r2, [pc, #24]	@ (8000d68 <MX_GPIO_Init+0x1dc>)
 8000d50:	0019      	movs	r1, r3
 8000d52:	0010      	movs	r0, r2
 8000d54:	f001 fe0a 	bl	800296c <HAL_GPIO_Init>

}
 8000d58:	46c0      	nop			@ (mov r8, r8)
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	b00b      	add	sp, #44	@ 0x2c
 8000d5e:	bd90      	pop	{r4, r7, pc}
 8000d60:	40021000 	.word	0x40021000
 8000d64:	0000883c 	.word	0x0000883c
 8000d68:	50000400 	.word	0x50000400
 8000d6c:	50000800 	.word	0x50000800
 8000d70:	0000c0c0 	.word	0x0000c0c0
 8000d74:	50001400 	.word	0x50001400
 8000d78:	0000f83a 	.word	0x0000f83a
 8000d7c:	50000c00 	.word	0x50000c00

08000d80 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000d84:	4b1b      	ldr	r3, [pc, #108]	@ (8000df4 <MX_I2C1_Init+0x74>)
 8000d86:	4a1c      	ldr	r2, [pc, #112]	@ (8000df8 <MX_I2C1_Init+0x78>)
 8000d88:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10906999;
 8000d8a:	4b1a      	ldr	r3, [pc, #104]	@ (8000df4 <MX_I2C1_Init+0x74>)
 8000d8c:	4a1b      	ldr	r2, [pc, #108]	@ (8000dfc <MX_I2C1_Init+0x7c>)
 8000d8e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000d90:	4b18      	ldr	r3, [pc, #96]	@ (8000df4 <MX_I2C1_Init+0x74>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d96:	4b17      	ldr	r3, [pc, #92]	@ (8000df4 <MX_I2C1_Init+0x74>)
 8000d98:	2201      	movs	r2, #1
 8000d9a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d9c:	4b15      	ldr	r3, [pc, #84]	@ (8000df4 <MX_I2C1_Init+0x74>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000da2:	4b14      	ldr	r3, [pc, #80]	@ (8000df4 <MX_I2C1_Init+0x74>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000da8:	4b12      	ldr	r3, [pc, #72]	@ (8000df4 <MX_I2C1_Init+0x74>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000dae:	4b11      	ldr	r3, [pc, #68]	@ (8000df4 <MX_I2C1_Init+0x74>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000db4:	4b0f      	ldr	r3, [pc, #60]	@ (8000df4 <MX_I2C1_Init+0x74>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000dba:	4b0e      	ldr	r3, [pc, #56]	@ (8000df4 <MX_I2C1_Init+0x74>)
 8000dbc:	0018      	movs	r0, r3
 8000dbe:	f001 ff57 	bl	8002c70 <HAL_I2C_Init>
 8000dc2:	1e03      	subs	r3, r0, #0
 8000dc4:	d001      	beq.n	8000dca <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000dc6:	f000 f980 	bl	80010ca <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000dca:	4b0a      	ldr	r3, [pc, #40]	@ (8000df4 <MX_I2C1_Init+0x74>)
 8000dcc:	2100      	movs	r1, #0
 8000dce:	0018      	movs	r0, r3
 8000dd0:	f001 fff4 	bl	8002dbc <HAL_I2CEx_ConfigAnalogFilter>
 8000dd4:	1e03      	subs	r3, r0, #0
 8000dd6:	d001      	beq.n	8000ddc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000dd8:	f000 f977 	bl	80010ca <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000ddc:	4b05      	ldr	r3, [pc, #20]	@ (8000df4 <MX_I2C1_Init+0x74>)
 8000dde:	2100      	movs	r1, #0
 8000de0:	0018      	movs	r0, r3
 8000de2:	f002 f837 	bl	8002e54 <HAL_I2CEx_ConfigDigitalFilter>
 8000de6:	1e03      	subs	r3, r0, #0
 8000de8:	d001      	beq.n	8000dee <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000dea:	f000 f96e 	bl	80010ca <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000dee:	46c0      	nop			@ (mov r8, r8)
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	20000190 	.word	0x20000190
 8000df8:	40005400 	.word	0x40005400
 8000dfc:	10906999 	.word	0x10906999

08000e00 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000e00:	b590      	push	{r4, r7, lr}
 8000e02:	b091      	sub	sp, #68	@ 0x44
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e08:	232c      	movs	r3, #44	@ 0x2c
 8000e0a:	18fb      	adds	r3, r7, r3
 8000e0c:	0018      	movs	r0, r3
 8000e0e:	2314      	movs	r3, #20
 8000e10:	001a      	movs	r2, r3
 8000e12:	2100      	movs	r1, #0
 8000e14:	f005 fa0e 	bl	8006234 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e18:	2410      	movs	r4, #16
 8000e1a:	193b      	adds	r3, r7, r4
 8000e1c:	0018      	movs	r0, r3
 8000e1e:	231c      	movs	r3, #28
 8000e20:	001a      	movs	r2, r3
 8000e22:	2100      	movs	r1, #0
 8000e24:	f005 fa06 	bl	8006234 <memset>
  if(i2cHandle->Instance==I2C1)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	4a22      	ldr	r2, [pc, #136]	@ (8000eb8 <HAL_I2C_MspInit+0xb8>)
 8000e2e:	4293      	cmp	r3, r2
 8000e30:	d13e      	bne.n	8000eb0 <HAL_I2C_MspInit+0xb0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000e32:	193b      	adds	r3, r7, r4
 8000e34:	2220      	movs	r2, #32
 8000e36:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000e38:	193b      	adds	r3, r7, r4
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e3e:	193b      	adds	r3, r7, r4
 8000e40:	0018      	movs	r0, r3
 8000e42:	f002 fd8f 	bl	8003964 <HAL_RCCEx_PeriphCLKConfig>
 8000e46:	1e03      	subs	r3, r0, #0
 8000e48:	d001      	beq.n	8000e4e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000e4a:	f000 f93e 	bl	80010ca <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e4e:	4b1b      	ldr	r3, [pc, #108]	@ (8000ebc <HAL_I2C_MspInit+0xbc>)
 8000e50:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000e52:	4b1a      	ldr	r3, [pc, #104]	@ (8000ebc <HAL_I2C_MspInit+0xbc>)
 8000e54:	2102      	movs	r1, #2
 8000e56:	430a      	orrs	r2, r1
 8000e58:	635a      	str	r2, [r3, #52]	@ 0x34
 8000e5a:	4b18      	ldr	r3, [pc, #96]	@ (8000ebc <HAL_I2C_MspInit+0xbc>)
 8000e5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000e5e:	2202      	movs	r2, #2
 8000e60:	4013      	ands	r3, r2
 8000e62:	60fb      	str	r3, [r7, #12]
 8000e64:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = NFC_I2C_SCL_Pin|NFC_I2C_SDA_Pin;
 8000e66:	212c      	movs	r1, #44	@ 0x2c
 8000e68:	187b      	adds	r3, r7, r1
 8000e6a:	22c0      	movs	r2, #192	@ 0xc0
 8000e6c:	0092      	lsls	r2, r2, #2
 8000e6e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e70:	187b      	adds	r3, r7, r1
 8000e72:	2212      	movs	r2, #18
 8000e74:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e76:	187b      	adds	r3, r7, r1
 8000e78:	2200      	movs	r2, #0
 8000e7a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e7c:	187b      	adds	r3, r7, r1
 8000e7e:	2200      	movs	r2, #0
 8000e80:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8000e82:	187b      	adds	r3, r7, r1
 8000e84:	2206      	movs	r2, #6
 8000e86:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e88:	187b      	adds	r3, r7, r1
 8000e8a:	4a0d      	ldr	r2, [pc, #52]	@ (8000ec0 <HAL_I2C_MspInit+0xc0>)
 8000e8c:	0019      	movs	r1, r3
 8000e8e:	0010      	movs	r0, r2
 8000e90:	f001 fd6c 	bl	800296c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e94:	4b09      	ldr	r3, [pc, #36]	@ (8000ebc <HAL_I2C_MspInit+0xbc>)
 8000e96:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000e98:	4b08      	ldr	r3, [pc, #32]	@ (8000ebc <HAL_I2C_MspInit+0xbc>)
 8000e9a:	2180      	movs	r1, #128	@ 0x80
 8000e9c:	0389      	lsls	r1, r1, #14
 8000e9e:	430a      	orrs	r2, r1
 8000ea0:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000ea2:	4b06      	ldr	r3, [pc, #24]	@ (8000ebc <HAL_I2C_MspInit+0xbc>)
 8000ea4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000ea6:	2380      	movs	r3, #128	@ 0x80
 8000ea8:	039b      	lsls	r3, r3, #14
 8000eaa:	4013      	ands	r3, r2
 8000eac:	60bb      	str	r3, [r7, #8]
 8000eae:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000eb0:	46c0      	nop			@ (mov r8, r8)
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	b011      	add	sp, #68	@ 0x44
 8000eb6:	bd90      	pop	{r4, r7, pc}
 8000eb8:	40005400 	.word	0x40005400
 8000ebc:	40021000 	.word	0x40021000
 8000ec0:	50000400 	.word	0x50000400

08000ec4 <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8000ec8:	4b0b      	ldr	r3, [pc, #44]	@ (8000ef8 <MX_IWDG_Init+0x34>)
 8000eca:	4a0c      	ldr	r2, [pc, #48]	@ (8000efc <MX_IWDG_Init+0x38>)
 8000ecc:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
 8000ece:	4b0a      	ldr	r3, [pc, #40]	@ (8000ef8 <MX_IWDG_Init+0x34>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 8000ed4:	4b08      	ldr	r3, [pc, #32]	@ (8000ef8 <MX_IWDG_Init+0x34>)
 8000ed6:	4a0a      	ldr	r2, [pc, #40]	@ (8000f00 <MX_IWDG_Init+0x3c>)
 8000ed8:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 4095;
 8000eda:	4b07      	ldr	r3, [pc, #28]	@ (8000ef8 <MX_IWDG_Init+0x34>)
 8000edc:	4a08      	ldr	r2, [pc, #32]	@ (8000f00 <MX_IWDG_Init+0x3c>)
 8000ede:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8000ee0:	4b05      	ldr	r3, [pc, #20]	@ (8000ef8 <MX_IWDG_Init+0x34>)
 8000ee2:	0018      	movs	r0, r3
 8000ee4:	f002 f802 	bl	8002eec <HAL_IWDG_Init>
 8000ee8:	1e03      	subs	r3, r0, #0
 8000eea:	d001      	beq.n	8000ef0 <MX_IWDG_Init+0x2c>
  {
    Error_Handler();
 8000eec:	f000 f8ed 	bl	80010ca <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8000ef0:	46c0      	nop			@ (mov r8, r8)
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	46c0      	nop			@ (mov r8, r8)
 8000ef8:	200001e4 	.word	0x200001e4
 8000efc:	40003000 	.word	0x40003000
 8000f00:	00000fff 	.word	0x00000fff

08000f04 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b082      	sub	sp, #8
 8000f08:	af00      	add	r7, sp, #0

	static bool Authorized			= false;
	static bool ValidSdcIsPresent	= false;
	static bool buttonPressed		= false;

	bool chirp = true;
 8000f0a:	1dfb      	adds	r3, r7, #7
 8000f0c:	2201      	movs	r2, #1
 8000f0e:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f10:	f000 fcfa 	bl	8001908 <HAL_Init>
 #endif

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f14:	f000 f87c 	bl	8001010 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */

  // Update the SystemCoreClock variable. Note that this function must be called any time that the
  // system clock is changed.
  SystemCoreClockUpdate();
 8000f18:	f000 f938 	bl	800118c <SystemCoreClockUpdate>

  hal_gpio_init();
 8000f1c:	f004 fb4c 	bl	80055b8 <hal_gpio_init>

  MX_I2C1_Init();
 8000f20:	f7ff ff2e 	bl	8000d80 <MX_I2C1_Init>

  MX_ADC1_Init();
 8000f24:	f7ff fd5e 	bl	80009e4 <MX_ADC1_Init>

  // The Vboost duty cycle must be retrieved from flash before initializing the VBoost PWM timer.
  GetVBoostVboostPwmDutyCyclePctFromFlash();
 8000f28:	f7ff fd2e 	bl	8000988 <GetVBoostVboostPwmDutyCyclePctFromFlash>

  hal_timer_init();
 8000f2c:	f004 fbc0 	bl	80056b0 <hal_timer_init>



  WptControllerInit();
 8000f30:	f7ff fd52 	bl	80009d8 <WptControllerInit>
  MX_USART3_UART_Init();
  MX_TIM6_Init();
  MX_TIM15_Init();
  /* USER CODE BEGIN 2 */
#endif
  hal_watchdog_init(); // Initialize the the watch dog handle in submod-hal_generic
 8000f34:	f005 f95c 	bl	80061f0 <hal_watchdog_init>

  // Turn on the red LED to indicate that we have power but we are not authorized.
  while (1)
  {
	  // Get the number of milliseconds since the last trip through this loop:
	  TicksinceLastLoop = hal_timer_get_ticks_since_count(LastLoopTick);
 8000f38:	4b31      	ldr	r3, [pc, #196]	@ (8001000 <main+0xfc>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	0018      	movs	r0, r3
 8000f3e:	f004 fb9c 	bl	800567a <hal_timer_get_ticks_since_count>
 8000f42:	0002      	movs	r2, r0
 8000f44:	4b2f      	ldr	r3, [pc, #188]	@ (8001004 <main+0x100>)
 8000f46:	601a      	str	r2, [r3, #0]

	  // Get the current sys tick.
	  LastLoopTick = hal_timer_get_systick();
 8000f48:	f004 fb8f 	bl	800566a <hal_timer_get_systick>
 8000f4c:	0002      	movs	r2, r0
 8000f4e:	4b2c      	ldr	r3, [pc, #176]	@ (8001000 <main+0xfc>)
 8000f50:	601a      	str	r2, [r3, #0]

	  /* reset the WDT */
	  hal_watchdog_reset();
 8000f52:	f005 f95f 	bl	8006214 <hal_watchdog_reset>


	  ac_audio_controller((uint16_t) TicksinceLastLoop);
 8000f56:	4b2b      	ldr	r3, [pc, #172]	@ (8001004 <main+0x100>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	b29b      	uxth	r3, r3
 8000f5c:	0018      	movs	r0, r3
 8000f5e:	f7ff fa1f 	bl	80003a0 <ac_audio_controller>

      TickSinceLastExecution += TicksinceLastLoop;
 8000f62:	4b29      	ldr	r3, [pc, #164]	@ (8001008 <main+0x104>)
 8000f64:	681a      	ldr	r2, [r3, #0]
 8000f66:	4b27      	ldr	r3, [pc, #156]	@ (8001004 <main+0x100>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	18d2      	adds	r2, r2, r3
 8000f6c:	4b26      	ldr	r3, [pc, #152]	@ (8001008 <main+0x104>)
 8000f6e:	601a      	str	r2, [r3, #0]

      UtilDebounceReadAndDebounceInputs();
 8000f70:	f7ff fc0c 	bl	800078c <UtilDebounceReadAndDebounceInputs>

	  if (LOOP_THROTTLE_INTERVAL <= TickSinceLastExecution)
 8000f74:	4b24      	ldr	r3, [pc, #144]	@ (8001008 <main+0x104>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	2b09      	cmp	r3, #9
 8000f7a:	d93d      	bls.n	8000ff8 <main+0xf4>
	  {
		  TickSinceLastExecution = 0;
 8000f7c:	4b22      	ldr	r3, [pc, #136]	@ (8001008 <main+0x104>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	601a      	str	r2, [r3, #0]
#if 0
		  if ((true == IRCommsDetacherIsAuthorized()) && (true == ValidSdcIsPresent))
#endif
		  {
			  /* reset the WDT */
			  hal_watchdog_reset();
 8000f82:	f005 f947 	bl	8006214 <hal_watchdog_reset>

			  // check debounced button and interrupt inputs
			  if (false == buttonPressed)
 8000f86:	4b21      	ldr	r3, [pc, #132]	@ (800100c <main+0x108>)
 8000f88:	781b      	ldrb	r3, [r3, #0]
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	4053      	eors	r3, r2
 8000f8e:	b2db      	uxtb	r3, r3
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d020      	beq.n	8000fd6 <main+0xd2>
			  {
			      // Check the User Button to see if it was just pressed.
				  if (UtilDebounceCheckPinState(USER_BUTTON,BUTTON_PRESSED) == true)
 8000f94:	2100      	movs	r1, #0
 8000f96:	2000      	movs	r0, #0
 8000f98:	f7ff fc7c 	bl	8000894 <UtilDebounceCheckPinState>
 8000f9c:	1e03      	subs	r3, r0, #0
 8000f9e:	d02b      	beq.n	8000ff8 <main+0xf4>
				  {
#if USE_RTT_FOR_DEBUGGING && DEBUG_MAIN // Note that both of these are #defined to 1 in periphdefs.h.
			debug_rtt_printf("main() The user button has been pressed.\r\n");
#endif
					  buttonPressed = true;
 8000fa0:	4b1a      	ldr	r3, [pc, #104]	@ (800100c <main+0x108>)
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	701a      	strb	r2, [r3, #0]

					  // Activate the WPT PWM
					  hal_timer_RunPwAtDutyCycle(TIMER_WPT_PWM, PWM_DEFAULT_DUTY_CYCLE);
 8000fa6:	2132      	movs	r1, #50	@ 0x32
 8000fa8:	2001      	movs	r0, #1
 8000faa:	f004 fb91 	bl	80056d0 <hal_timer_RunPwAtDutyCycle>

					  // Activate Vboost PWM
					  VboostStartPWM();
 8000fae:	f7ff fcfb 	bl	80009a8 <VboostStartPWM>

					  // Activate Piezo PWM
					  // hal_timer_RunPwAtDutyCycle(TIMER_PIEZO_PWM, PWM_DEFAULT_DUTY_CYCLE);
					  // Do one chirp

					  if (chirp == true)
 8000fb2:	1dfb      	adds	r3, r7, #7
 8000fb4:	781b      	ldrb	r3, [r3, #0]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d006      	beq.n	8000fc8 <main+0xc4>
					  {
					     ac_chirp(1);
 8000fba:	2001      	movs	r0, #1
 8000fbc:	f7ff f9b8 	bl	8000330 <ac_chirp>
					     chirp = false;
 8000fc0:	1dfb      	adds	r3, r7, #7
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	701a      	strb	r2, [r3, #0]
 8000fc6:	e017      	b.n	8000ff8 <main+0xf4>
					  }
					  else
					  {
						  ac_error_tone(1);
 8000fc8:	2001      	movs	r0, #1
 8000fca:	f7ff f9cd 	bl	8000368 <ac_error_tone>
						  chirp = true;
 8000fce:	1dfb      	adds	r3, r7, #7
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	701a      	strb	r2, [r3, #0]
 8000fd4:	e010      	b.n	8000ff8 <main+0xf4>
				  }
			  }
			  else
			  {
				  // Check the User Button to see if it was just release.
				  if (UtilDebounceCheckPinState(USER_BUTTON,BUTTON_RELEASED) == true)
 8000fd6:	2101      	movs	r1, #1
 8000fd8:	2000      	movs	r0, #0
 8000fda:	f7ff fc5b 	bl	8000894 <UtilDebounceCheckPinState>
 8000fde:	1e03      	subs	r3, r0, #0
 8000fe0:	d00a      	beq.n	8000ff8 <main+0xf4>
				  {
#if USE_RTT_FOR_DEBUGGING && DEBUG_MAIN // Note that both of these are #defined to 1 in periphdefs.h.
			          debug_rtt_printf("main() The user button has been released.\r\n");
#endif
					  buttonPressed = false;
 8000fe2:	4b0a      	ldr	r3, [pc, #40]	@ (800100c <main+0x108>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	701a      	strb	r2, [r3, #0]

					  // Stop the WPT PWM
					  hal_timer_StopPwmOutput(TIMER_WPT_PWM);
 8000fe8:	2001      	movs	r0, #1
 8000fea:	f004 fbab 	bl	8005744 <hal_timer_StopPwmOutput>

					  // Stop the Vboost PWM
					  VboostStopPWM();
 8000fee:	f7ff fce7 	bl	80009c0 <VboostStopPWM>

					  // Stop the Piezo PWM
					  hal_timer_StopPwmOutput(TIMER_PIEZO_PWM);
 8000ff2:	2000      	movs	r0, #0
 8000ff4:	f004 fba6 	bl	8005744 <hal_timer_StopPwmOutput>
	  }

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  hal_watchdog_reset();
 8000ff8:	f005 f90c 	bl	8006214 <hal_watchdog_reset>
	  TicksinceLastLoop = hal_timer_get_ticks_since_count(LastLoopTick);
 8000ffc:	e79c      	b.n	8000f38 <main+0x34>
 8000ffe:	46c0      	nop			@ (mov r8, r8)
 8001000:	200001f4 	.word	0x200001f4
 8001004:	200001f8 	.word	0x200001f8
 8001008:	200001fc 	.word	0x200001fc
 800100c:	20000200 	.word	0x20000200

08001010 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001010:	b590      	push	{r4, r7, lr}
 8001012:	b093      	sub	sp, #76	@ 0x4c
 8001014:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001016:	2414      	movs	r4, #20
 8001018:	193b      	adds	r3, r7, r4
 800101a:	0018      	movs	r0, r3
 800101c:	2334      	movs	r3, #52	@ 0x34
 800101e:	001a      	movs	r2, r3
 8001020:	2100      	movs	r1, #0
 8001022:	f005 f907 	bl	8006234 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001026:	1d3b      	adds	r3, r7, #4
 8001028:	0018      	movs	r0, r3
 800102a:	2310      	movs	r3, #16
 800102c:	001a      	movs	r2, r3
 800102e:	2100      	movs	r1, #0
 8001030:	f005 f900 	bl	8006234 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001034:	2380      	movs	r3, #128	@ 0x80
 8001036:	009b      	lsls	r3, r3, #2
 8001038:	0018      	movs	r0, r3
 800103a:	f001 ffb9 	bl	8002fb0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 800103e:	193b      	adds	r3, r7, r4
 8001040:	220a      	movs	r2, #10
 8001042:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001044:	193b      	adds	r3, r7, r4
 8001046:	2280      	movs	r2, #128	@ 0x80
 8001048:	0052      	lsls	r2, r2, #1
 800104a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800104c:	0021      	movs	r1, r4
 800104e:	187b      	adds	r3, r7, r1
 8001050:	2200      	movs	r2, #0
 8001052:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001054:	187b      	adds	r3, r7, r1
 8001056:	2240      	movs	r2, #64	@ 0x40
 8001058:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800105a:	187b      	adds	r3, r7, r1
 800105c:	2201      	movs	r2, #1
 800105e:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001060:	187b      	adds	r3, r7, r1
 8001062:	2202      	movs	r2, #2
 8001064:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001066:	187b      	adds	r3, r7, r1
 8001068:	2202      	movs	r2, #2
 800106a:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 800106c:	187b      	adds	r3, r7, r1
 800106e:	2210      	movs	r2, #16
 8001070:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 27;
 8001072:	187b      	adds	r3, r7, r1
 8001074:	221b      	movs	r2, #27
 8001076:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001078:	187b      	adds	r3, r7, r1
 800107a:	2280      	movs	r2, #128	@ 0x80
 800107c:	0292      	lsls	r2, r2, #10
 800107e:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 8001080:	187b      	adds	r3, r7, r1
 8001082:	22c0      	movs	r2, #192	@ 0xc0
 8001084:	05d2      	lsls	r2, r2, #23
 8001086:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001088:	187b      	adds	r3, r7, r1
 800108a:	0018      	movs	r0, r3
 800108c:	f001 ffd0 	bl	8003030 <HAL_RCC_OscConfig>
 8001090:	1e03      	subs	r3, r0, #0
 8001092:	d001      	beq.n	8001098 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8001094:	f000 f819 	bl	80010ca <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001098:	1d3b      	adds	r3, r7, #4
 800109a:	2207      	movs	r2, #7
 800109c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800109e:	1d3b      	adds	r3, r7, #4
 80010a0:	2202      	movs	r2, #2
 80010a2:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010a4:	1d3b      	adds	r3, r7, #4
 80010a6:	2200      	movs	r2, #0
 80010a8:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010aa:	1d3b      	adds	r3, r7, #4
 80010ac:	2200      	movs	r2, #0
 80010ae:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80010b0:	1d3b      	adds	r3, r7, #4
 80010b2:	2102      	movs	r1, #2
 80010b4:	0018      	movs	r0, r3
 80010b6:	f002 facb 	bl	8003650 <HAL_RCC_ClockConfig>
 80010ba:	1e03      	subs	r3, r0, #0
 80010bc:	d001      	beq.n	80010c2 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80010be:	f000 f804 	bl	80010ca <Error_Handler>
  }
}
 80010c2:	46c0      	nop			@ (mov r8, r8)
 80010c4:	46bd      	mov	sp, r7
 80010c6:	b013      	add	sp, #76	@ 0x4c
 80010c8:	bd90      	pop	{r4, r7, pc}

080010ca <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010ca:	b580      	push	{r7, lr}
 80010cc:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010ce:	b672      	cpsid	i
}
 80010d0:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010d2:	46c0      	nop			@ (mov r8, r8)
 80010d4:	e7fd      	b.n	80010d2 <Error_Handler+0x8>
	...

080010d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010de:	4b11      	ldr	r3, [pc, #68]	@ (8001124 <HAL_MspInit+0x4c>)
 80010e0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80010e2:	4b10      	ldr	r3, [pc, #64]	@ (8001124 <HAL_MspInit+0x4c>)
 80010e4:	2101      	movs	r1, #1
 80010e6:	430a      	orrs	r2, r1
 80010e8:	641a      	str	r2, [r3, #64]	@ 0x40
 80010ea:	4b0e      	ldr	r3, [pc, #56]	@ (8001124 <HAL_MspInit+0x4c>)
 80010ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010ee:	2201      	movs	r2, #1
 80010f0:	4013      	ands	r3, r2
 80010f2:	607b      	str	r3, [r7, #4]
 80010f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010f6:	4b0b      	ldr	r3, [pc, #44]	@ (8001124 <HAL_MspInit+0x4c>)
 80010f8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80010fa:	4b0a      	ldr	r3, [pc, #40]	@ (8001124 <HAL_MspInit+0x4c>)
 80010fc:	2180      	movs	r1, #128	@ 0x80
 80010fe:	0549      	lsls	r1, r1, #21
 8001100:	430a      	orrs	r2, r1
 8001102:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001104:	4b07      	ldr	r3, [pc, #28]	@ (8001124 <HAL_MspInit+0x4c>)
 8001106:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001108:	2380      	movs	r3, #128	@ 0x80
 800110a:	055b      	lsls	r3, r3, #21
 800110c:	4013      	ands	r3, r2
 800110e:	603b      	str	r3, [r7, #0]
 8001110:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8001112:	23c0      	movs	r3, #192	@ 0xc0
 8001114:	00db      	lsls	r3, r3, #3
 8001116:	0018      	movs	r0, r3
 8001118:	f000 fc7c 	bl	8001a14 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800111c:	46c0      	nop			@ (mov r8, r8)
 800111e:	46bd      	mov	sp, r7
 8001120:	b002      	add	sp, #8
 8001122:	bd80      	pop	{r7, pc}
 8001124:	40021000 	.word	0x40021000

08001128 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800112c:	46c0      	nop			@ (mov r8, r8)
 800112e:	e7fd      	b.n	800112c <NMI_Handler+0x4>

08001130 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001134:	46c0      	nop			@ (mov r8, r8)
 8001136:	e7fd      	b.n	8001134 <HardFault_Handler+0x4>

08001138 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800113c:	46c0      	nop			@ (mov r8, r8)
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}

08001142 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001142:	b580      	push	{r7, lr}
 8001144:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001146:	46c0      	nop			@ (mov r8, r8)
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}

0800114c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001150:	f000 fc44 	bl	80019dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001154:	46c0      	nop			@ (mov r8, r8)
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
	...

0800115c <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 interrupt.
  */
void ADC1_IRQHandler(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001160:	4b03      	ldr	r3, [pc, #12]	@ (8001170 <ADC1_IRQHandler+0x14>)
 8001162:	0018      	movs	r0, r3
 8001164:	f000 ff30 	bl	8001fc8 <HAL_ADC_IRQHandler>
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
  /* USER CODE BEGIN USART1_IRQn 1 */
#endif
  /* USER CODE END USART1_IRQn 1 */
}
 8001168:	46c0      	nop			@ (mov r8, r8)
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
 800116e:	46c0      	nop			@ (mov r8, r8)
 8001170:	2000012c 	.word	0x2000012c

08001174 <USART3_4_IRQHandler>:

/**
  * @brief This function handles USART3 and USART4 interrupts.
  */
void USART3_4_IRQHandler(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_4_IRQn 0 */

  /* USER CODE END USART3_4_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001178:	4b03      	ldr	r3, [pc, #12]	@ (8001188 <USART3_4_IRQHandler+0x14>)
 800117a:	0018      	movs	r0, r3
 800117c:	f003 fdba 	bl	8004cf4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_4_IRQn 1 */

  /* USER CODE END USART3_4_IRQn 1 */
}
 8001180:	46c0      	nop			@ (mov r8, r8)
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	46c0      	nop			@ (mov r8, r8)
 8001188:	20000334 	.word	0x20000334

0800118c <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b086      	sub	sp, #24
 8001190:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t pllm;
  uint32_t hsidiv;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001192:	4b3b      	ldr	r3, [pc, #236]	@ (8001280 <SystemCoreClockUpdate+0xf4>)
 8001194:	689b      	ldr	r3, [r3, #8]
 8001196:	2238      	movs	r2, #56	@ 0x38
 8001198:	4013      	ands	r3, r2
 800119a:	2b20      	cmp	r3, #32
 800119c:	d011      	beq.n	80011c2 <SystemCoreClockUpdate+0x36>
 800119e:	d849      	bhi.n	8001234 <SystemCoreClockUpdate+0xa8>
 80011a0:	2b18      	cmp	r3, #24
 80011a2:	d009      	beq.n	80011b8 <SystemCoreClockUpdate+0x2c>
 80011a4:	d846      	bhi.n	8001234 <SystemCoreClockUpdate+0xa8>
 80011a6:	2b08      	cmp	r3, #8
 80011a8:	d002      	beq.n	80011b0 <SystemCoreClockUpdate+0x24>
 80011aa:	2b10      	cmp	r3, #16
 80011ac:	d00e      	beq.n	80011cc <SystemCoreClockUpdate+0x40>
 80011ae:	e041      	b.n	8001234 <SystemCoreClockUpdate+0xa8>
  {
    case RCC_CFGR_SWS_0:                /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
 80011b0:	4b34      	ldr	r3, [pc, #208]	@ (8001284 <SystemCoreClockUpdate+0xf8>)
 80011b2:	4a35      	ldr	r2, [pc, #212]	@ (8001288 <SystemCoreClockUpdate+0xfc>)
 80011b4:	601a      	str	r2, [r3, #0]
      break;
 80011b6:	e04f      	b.n	8001258 <SystemCoreClockUpdate+0xcc>

    case (RCC_CFGR_SWS_1 | RCC_CFGR_SWS_0):  /* LSI used as system clock */
      SystemCoreClock = LSI_VALUE;
 80011b8:	4b32      	ldr	r3, [pc, #200]	@ (8001284 <SystemCoreClockUpdate+0xf8>)
 80011ba:	22fa      	movs	r2, #250	@ 0xfa
 80011bc:	01d2      	lsls	r2, r2, #7
 80011be:	601a      	str	r2, [r3, #0]
      break;
 80011c0:	e04a      	b.n	8001258 <SystemCoreClockUpdate+0xcc>

    case RCC_CFGR_SWS_2:                /* LSE used as system clock */
      SystemCoreClock = LSE_VALUE;
 80011c2:	4b30      	ldr	r3, [pc, #192]	@ (8001284 <SystemCoreClockUpdate+0xf8>)
 80011c4:	2280      	movs	r2, #128	@ 0x80
 80011c6:	0212      	lsls	r2, r2, #8
 80011c8:	601a      	str	r2, [r3, #0]
      break;
 80011ca:	e045      	b.n	8001258 <SystemCoreClockUpdate+0xcc>

    case RCC_CFGR_SWS_1:  /* PLL used as system clock */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80011cc:	4b2c      	ldr	r3, [pc, #176]	@ (8001280 <SystemCoreClockUpdate+0xf4>)
 80011ce:	68db      	ldr	r3, [r3, #12]
 80011d0:	2203      	movs	r2, #3
 80011d2:	4013      	ands	r3, r2
 80011d4:	613b      	str	r3, [r7, #16]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1UL;
 80011d6:	4b2a      	ldr	r3, [pc, #168]	@ (8001280 <SystemCoreClockUpdate+0xf4>)
 80011d8:	68db      	ldr	r3, [r3, #12]
 80011da:	091b      	lsrs	r3, r3, #4
 80011dc:	2207      	movs	r2, #7
 80011de:	4013      	ands	r3, r2
 80011e0:	3301      	adds	r3, #1
 80011e2:	60fb      	str	r3, [r7, #12]

      if(pllsource == 0x03UL)           /* HSE used as PLL clock source */
 80011e4:	693b      	ldr	r3, [r7, #16]
 80011e6:	2b03      	cmp	r3, #3
 80011e8:	d106      	bne.n	80011f8 <SystemCoreClockUpdate+0x6c>
      {
        pllvco = (HSE_VALUE / pllm);
 80011ea:	68f9      	ldr	r1, [r7, #12]
 80011ec:	4826      	ldr	r0, [pc, #152]	@ (8001288 <SystemCoreClockUpdate+0xfc>)
 80011ee:	f7fe ffe3 	bl	80001b8 <__udivsi3>
 80011f2:	0003      	movs	r3, r0
 80011f4:	617b      	str	r3, [r7, #20]
 80011f6:	e005      	b.n	8001204 <SystemCoreClockUpdate+0x78>
      }
      else                              /* HSI used as PLL clock source */
      {
          pllvco = (HSI_VALUE / pllm);
 80011f8:	68f9      	ldr	r1, [r7, #12]
 80011fa:	4824      	ldr	r0, [pc, #144]	@ (800128c <SystemCoreClockUpdate+0x100>)
 80011fc:	f7fe ffdc 	bl	80001b8 <__udivsi3>
 8001200:	0003      	movs	r3, r0
 8001202:	617b      	str	r3, [r7, #20]
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001204:	4b1e      	ldr	r3, [pc, #120]	@ (8001280 <SystemCoreClockUpdate+0xf4>)
 8001206:	68db      	ldr	r3, [r3, #12]
 8001208:	0a1b      	lsrs	r3, r3, #8
 800120a:	227f      	movs	r2, #127	@ 0x7f
 800120c:	401a      	ands	r2, r3
 800120e:	697b      	ldr	r3, [r7, #20]
 8001210:	4353      	muls	r3, r2
 8001212:	617b      	str	r3, [r7, #20]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1UL);
 8001214:	4b1a      	ldr	r3, [pc, #104]	@ (8001280 <SystemCoreClockUpdate+0xf4>)
 8001216:	68db      	ldr	r3, [r3, #12]
 8001218:	0f5b      	lsrs	r3, r3, #29
 800121a:	2207      	movs	r2, #7
 800121c:	4013      	ands	r3, r2
 800121e:	3301      	adds	r3, #1
 8001220:	60bb      	str	r3, [r7, #8]

      SystemCoreClock = pllvco/pllr;
 8001222:	68b9      	ldr	r1, [r7, #8]
 8001224:	6978      	ldr	r0, [r7, #20]
 8001226:	f7fe ffc7 	bl	80001b8 <__udivsi3>
 800122a:	0003      	movs	r3, r0
 800122c:	001a      	movs	r2, r3
 800122e:	4b15      	ldr	r3, [pc, #84]	@ (8001284 <SystemCoreClockUpdate+0xf8>)
 8001230:	601a      	str	r2, [r3, #0]
      break;
 8001232:	e011      	b.n	8001258 <SystemCoreClockUpdate+0xcc>
      
    case 0x00000000U:                   /* HSI used as system clock */
    default:                            /* HSI used as system clock */
      hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV))>> RCC_CR_HSIDIV_Pos));
 8001234:	4b12      	ldr	r3, [pc, #72]	@ (8001280 <SystemCoreClockUpdate+0xf4>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	0adb      	lsrs	r3, r3, #11
 800123a:	2207      	movs	r2, #7
 800123c:	4013      	ands	r3, r2
 800123e:	2201      	movs	r2, #1
 8001240:	409a      	lsls	r2, r3
 8001242:	0013      	movs	r3, r2
 8001244:	607b      	str	r3, [r7, #4]
      SystemCoreClock = (HSI_VALUE/hsidiv);
 8001246:	6879      	ldr	r1, [r7, #4]
 8001248:	4810      	ldr	r0, [pc, #64]	@ (800128c <SystemCoreClockUpdate+0x100>)
 800124a:	f7fe ffb5 	bl	80001b8 <__udivsi3>
 800124e:	0003      	movs	r3, r0
 8001250:	001a      	movs	r2, r3
 8001252:	4b0c      	ldr	r3, [pc, #48]	@ (8001284 <SystemCoreClockUpdate+0xf8>)
 8001254:	601a      	str	r2, [r3, #0]
      break;
 8001256:	46c0      	nop			@ (mov r8, r8)
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001258:	4b09      	ldr	r3, [pc, #36]	@ (8001280 <SystemCoreClockUpdate+0xf4>)
 800125a:	689b      	ldr	r3, [r3, #8]
 800125c:	0a1b      	lsrs	r3, r3, #8
 800125e:	220f      	movs	r2, #15
 8001260:	401a      	ands	r2, r3
 8001262:	4b0b      	ldr	r3, [pc, #44]	@ (8001290 <SystemCoreClockUpdate+0x104>)
 8001264:	0092      	lsls	r2, r2, #2
 8001266:	58d3      	ldr	r3, [r2, r3]
 8001268:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 800126a:	4b06      	ldr	r3, [pc, #24]	@ (8001284 <SystemCoreClockUpdate+0xf8>)
 800126c:	681a      	ldr	r2, [r3, #0]
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	40da      	lsrs	r2, r3
 8001272:	4b04      	ldr	r3, [pc, #16]	@ (8001284 <SystemCoreClockUpdate+0xf8>)
 8001274:	601a      	str	r2, [r3, #0]
}
 8001276:	46c0      	nop			@ (mov r8, r8)
 8001278:	46bd      	mov	sp, r7
 800127a:	b006      	add	sp, #24
 800127c:	bd80      	pop	{r7, pc}
 800127e:	46c0      	nop			@ (mov r8, r8)
 8001280:	40021000 	.word	0x40021000
 8001284:	20000018 	.word	0x20000018
 8001288:	007a1200 	.word	0x007a1200
 800128c:	00f42400 	.word	0x00f42400
 8001290:	08006294 	.word	0x08006294

08001294 <MX_TIM1_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim15;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b09c      	sub	sp, #112	@ 0x70
 8001298:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800129a:	2360      	movs	r3, #96	@ 0x60
 800129c:	18fb      	adds	r3, r7, r3
 800129e:	0018      	movs	r0, r3
 80012a0:	2310      	movs	r3, #16
 80012a2:	001a      	movs	r2, r3
 80012a4:	2100      	movs	r1, #0
 80012a6:	f004 ffc5 	bl	8006234 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012aa:	2354      	movs	r3, #84	@ 0x54
 80012ac:	18fb      	adds	r3, r7, r3
 80012ae:	0018      	movs	r0, r3
 80012b0:	230c      	movs	r3, #12
 80012b2:	001a      	movs	r2, r3
 80012b4:	2100      	movs	r1, #0
 80012b6:	f004 ffbd 	bl	8006234 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012ba:	2338      	movs	r3, #56	@ 0x38
 80012bc:	18fb      	adds	r3, r7, r3
 80012be:	0018      	movs	r0, r3
 80012c0:	231c      	movs	r3, #28
 80012c2:	001a      	movs	r2, r3
 80012c4:	2100      	movs	r1, #0
 80012c6:	f004 ffb5 	bl	8006234 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80012ca:	1d3b      	adds	r3, r7, #4
 80012cc:	0018      	movs	r0, r3
 80012ce:	2334      	movs	r3, #52	@ 0x34
 80012d0:	001a      	movs	r2, r3
 80012d2:	2100      	movs	r1, #0
 80012d4:	f004 ffae 	bl	8006234 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80012d8:	4b51      	ldr	r3, [pc, #324]	@ (8001420 <MX_TIM1_Init+0x18c>)
 80012da:	4a52      	ldr	r2, [pc, #328]	@ (8001424 <MX_TIM1_Init+0x190>)
 80012dc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = PIEZO_PWM_PRESCALER;
 80012de:	4b50      	ldr	r3, [pc, #320]	@ (8001420 <MX_TIM1_Init+0x18c>)
 80012e0:	2235      	movs	r2, #53	@ 0x35
 80012e2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012e4:	4b4e      	ldr	r3, [pc, #312]	@ (8001420 <MX_TIM1_Init+0x18c>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = PIEZO_PWM_ARR_VAL;
 80012ea:	4b4d      	ldr	r3, [pc, #308]	@ (8001420 <MX_TIM1_Init+0x18c>)
 80012ec:	2263      	movs	r2, #99	@ 0x63
 80012ee:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012f0:	4b4b      	ldr	r3, [pc, #300]	@ (8001420 <MX_TIM1_Init+0x18c>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80012f6:	4b4a      	ldr	r3, [pc, #296]	@ (8001420 <MX_TIM1_Init+0x18c>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012fc:	4b48      	ldr	r3, [pc, #288]	@ (8001420 <MX_TIM1_Init+0x18c>)
 80012fe:	2200      	movs	r2, #0
 8001300:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001302:	4b47      	ldr	r3, [pc, #284]	@ (8001420 <MX_TIM1_Init+0x18c>)
 8001304:	0018      	movs	r0, r3
 8001306:	f002 fc61 	bl	8003bcc <HAL_TIM_Base_Init>
 800130a:	1e03      	subs	r3, r0, #0
 800130c:	d001      	beq.n	8001312 <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 800130e:	f7ff fedc 	bl	80010ca <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001312:	2160      	movs	r1, #96	@ 0x60
 8001314:	187b      	adds	r3, r7, r1
 8001316:	2280      	movs	r2, #128	@ 0x80
 8001318:	0152      	lsls	r2, r2, #5
 800131a:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800131c:	187a      	adds	r2, r7, r1
 800131e:	4b40      	ldr	r3, [pc, #256]	@ (8001420 <MX_TIM1_Init+0x18c>)
 8001320:	0011      	movs	r1, r2
 8001322:	0018      	movs	r0, r3
 8001324:	f002 fe0a 	bl	8003f3c <HAL_TIM_ConfigClockSource>
 8001328:	1e03      	subs	r3, r0, #0
 800132a:	d001      	beq.n	8001330 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 800132c:	f7ff fecd 	bl	80010ca <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001330:	4b3b      	ldr	r3, [pc, #236]	@ (8001420 <MX_TIM1_Init+0x18c>)
 8001332:	0018      	movs	r0, r3
 8001334:	f002 fca2 	bl	8003c7c <HAL_TIM_PWM_Init>
 8001338:	1e03      	subs	r3, r0, #0
 800133a:	d001      	beq.n	8001340 <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 800133c:	f7ff fec5 	bl	80010ca <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001340:	2154      	movs	r1, #84	@ 0x54
 8001342:	187b      	adds	r3, r7, r1
 8001344:	2200      	movs	r2, #0
 8001346:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001348:	187b      	adds	r3, r7, r1
 800134a:	2200      	movs	r2, #0
 800134c:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800134e:	187b      	adds	r3, r7, r1
 8001350:	2200      	movs	r2, #0
 8001352:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001354:	187a      	adds	r2, r7, r1
 8001356:	4b32      	ldr	r3, [pc, #200]	@ (8001420 <MX_TIM1_Init+0x18c>)
 8001358:	0011      	movs	r1, r2
 800135a:	0018      	movs	r0, r3
 800135c:	f003 fba2 	bl	8004aa4 <HAL_TIMEx_MasterConfigSynchronization>
 8001360:	1e03      	subs	r3, r0, #0
 8001362:	d001      	beq.n	8001368 <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 8001364:	f7ff feb1 	bl	80010ca <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001368:	2138      	movs	r1, #56	@ 0x38
 800136a:	187b      	adds	r3, r7, r1
 800136c:	2260      	movs	r2, #96	@ 0x60
 800136e:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 49;
 8001370:	187b      	adds	r3, r7, r1
 8001372:	2231      	movs	r2, #49	@ 0x31
 8001374:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001376:	187b      	adds	r3, r7, r1
 8001378:	2200      	movs	r2, #0
 800137a:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800137c:	187b      	adds	r3, r7, r1
 800137e:	2200      	movs	r2, #0
 8001380:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001382:	187b      	adds	r3, r7, r1
 8001384:	2200      	movs	r2, #0
 8001386:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001388:	187b      	adds	r3, r7, r1
 800138a:	2200      	movs	r2, #0
 800138c:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800138e:	187b      	adds	r3, r7, r1
 8001390:	2200      	movs	r2, #0
 8001392:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001394:	1879      	adds	r1, r7, r1
 8001396:	4b22      	ldr	r3, [pc, #136]	@ (8001420 <MX_TIM1_Init+0x18c>)
 8001398:	2200      	movs	r2, #0
 800139a:	0018      	movs	r0, r3
 800139c:	f002 fcce 	bl	8003d3c <HAL_TIM_PWM_ConfigChannel>
 80013a0:	1e03      	subs	r3, r0, #0
 80013a2:	d001      	beq.n	80013a8 <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 80013a4:	f7ff fe91 	bl	80010ca <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80013a8:	1d3b      	adds	r3, r7, #4
 80013aa:	2200      	movs	r2, #0
 80013ac:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80013ae:	1d3b      	adds	r3, r7, #4
 80013b0:	2200      	movs	r2, #0
 80013b2:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80013b4:	1d3b      	adds	r3, r7, #4
 80013b6:	2200      	movs	r2, #0
 80013b8:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80013ba:	1d3b      	adds	r3, r7, #4
 80013bc:	2200      	movs	r2, #0
 80013be:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80013c0:	1d3b      	adds	r3, r7, #4
 80013c2:	2200      	movs	r2, #0
 80013c4:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80013c6:	1d3b      	adds	r3, r7, #4
 80013c8:	2280      	movs	r2, #128	@ 0x80
 80013ca:	0192      	lsls	r2, r2, #6
 80013cc:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80013ce:	1d3b      	adds	r3, r7, #4
 80013d0:	2200      	movs	r2, #0
 80013d2:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80013d4:	1d3b      	adds	r3, r7, #4
 80013d6:	2200      	movs	r2, #0
 80013d8:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80013da:	1d3b      	adds	r3, r7, #4
 80013dc:	2200      	movs	r2, #0
 80013de:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80013e0:	1d3b      	adds	r3, r7, #4
 80013e2:	2280      	movs	r2, #128	@ 0x80
 80013e4:	0492      	lsls	r2, r2, #18
 80013e6:	625a      	str	r2, [r3, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80013e8:	1d3b      	adds	r3, r7, #4
 80013ea:	2200      	movs	r2, #0
 80013ec:	629a      	str	r2, [r3, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80013ee:	1d3b      	adds	r3, r7, #4
 80013f0:	2200      	movs	r2, #0
 80013f2:	62da      	str	r2, [r3, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80013f4:	1d3b      	adds	r3, r7, #4
 80013f6:	2200      	movs	r2, #0
 80013f8:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80013fa:	1d3a      	adds	r2, r7, #4
 80013fc:	4b08      	ldr	r3, [pc, #32]	@ (8001420 <MX_TIM1_Init+0x18c>)
 80013fe:	0011      	movs	r1, r2
 8001400:	0018      	movs	r0, r3
 8001402:	f003 fbb7 	bl	8004b74 <HAL_TIMEx_ConfigBreakDeadTime>
 8001406:	1e03      	subs	r3, r0, #0
 8001408:	d001      	beq.n	800140e <MX_TIM1_Init+0x17a>
  {
    Error_Handler();
 800140a:	f7ff fe5e 	bl	80010ca <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800140e:	4b04      	ldr	r3, [pc, #16]	@ (8001420 <MX_TIM1_Init+0x18c>)
 8001410:	0018      	movs	r0, r3
 8001412:	f000 f9e3 	bl	80017dc <HAL_TIM_MspPostInit>

}
 8001416:	46c0      	nop			@ (mov r8, r8)
 8001418:	46bd      	mov	sp, r7
 800141a:	b01c      	add	sp, #112	@ 0x70
 800141c:	bd80      	pop	{r7, pc}
 800141e:	46c0      	nop			@ (mov r8, r8)
 8001420:	20000204 	.word	0x20000204
 8001424:	40012c00 	.word	0x40012c00

08001428 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b08e      	sub	sp, #56	@ 0x38
 800142c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800142e:	2328      	movs	r3, #40	@ 0x28
 8001430:	18fb      	adds	r3, r7, r3
 8001432:	0018      	movs	r0, r3
 8001434:	2310      	movs	r3, #16
 8001436:	001a      	movs	r2, r3
 8001438:	2100      	movs	r1, #0
 800143a:	f004 fefb 	bl	8006234 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800143e:	231c      	movs	r3, #28
 8001440:	18fb      	adds	r3, r7, r3
 8001442:	0018      	movs	r0, r3
 8001444:	230c      	movs	r3, #12
 8001446:	001a      	movs	r2, r3
 8001448:	2100      	movs	r1, #0
 800144a:	f004 fef3 	bl	8006234 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800144e:	003b      	movs	r3, r7
 8001450:	0018      	movs	r0, r3
 8001452:	231c      	movs	r3, #28
 8001454:	001a      	movs	r2, r3
 8001456:	2100      	movs	r1, #0
 8001458:	f004 feec 	bl	8006234 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800145c:	4b30      	ldr	r3, [pc, #192]	@ (8001520 <MX_TIM3_Init+0xf8>)
 800145e:	4a31      	ldr	r2, [pc, #196]	@ (8001524 <MX_TIM3_Init+0xfc>)
 8001460:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = WPT_PWM_PRESCALER;
 8001462:	4b2f      	ldr	r3, [pc, #188]	@ (8001520 <MX_TIM3_Init+0xf8>)
 8001464:	2200      	movs	r2, #0
 8001466:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001468:	4b2d      	ldr	r3, [pc, #180]	@ (8001520 <MX_TIM3_Init+0xf8>)
 800146a:	2200      	movs	r2, #0
 800146c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = WPT_PWM_ARR_VAL;
 800146e:	4b2c      	ldr	r3, [pc, #176]	@ (8001520 <MX_TIM3_Init+0xf8>)
 8001470:	2290      	movs	r2, #144	@ 0x90
 8001472:	32ff      	adds	r2, #255	@ 0xff
 8001474:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001476:	4b2a      	ldr	r3, [pc, #168]	@ (8001520 <MX_TIM3_Init+0xf8>)
 8001478:	2200      	movs	r2, #0
 800147a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800147c:	4b28      	ldr	r3, [pc, #160]	@ (8001520 <MX_TIM3_Init+0xf8>)
 800147e:	2200      	movs	r2, #0
 8001480:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001482:	4b27      	ldr	r3, [pc, #156]	@ (8001520 <MX_TIM3_Init+0xf8>)
 8001484:	0018      	movs	r0, r3
 8001486:	f002 fba1 	bl	8003bcc <HAL_TIM_Base_Init>
 800148a:	1e03      	subs	r3, r0, #0
 800148c:	d001      	beq.n	8001492 <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 800148e:	f7ff fe1c 	bl	80010ca <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001492:	2128      	movs	r1, #40	@ 0x28
 8001494:	187b      	adds	r3, r7, r1
 8001496:	2280      	movs	r2, #128	@ 0x80
 8001498:	0152      	lsls	r2, r2, #5
 800149a:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800149c:	187a      	adds	r2, r7, r1
 800149e:	4b20      	ldr	r3, [pc, #128]	@ (8001520 <MX_TIM3_Init+0xf8>)
 80014a0:	0011      	movs	r1, r2
 80014a2:	0018      	movs	r0, r3
 80014a4:	f002 fd4a 	bl	8003f3c <HAL_TIM_ConfigClockSource>
 80014a8:	1e03      	subs	r3, r0, #0
 80014aa:	d001      	beq.n	80014b0 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 80014ac:	f7ff fe0d 	bl	80010ca <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80014b0:	4b1b      	ldr	r3, [pc, #108]	@ (8001520 <MX_TIM3_Init+0xf8>)
 80014b2:	0018      	movs	r0, r3
 80014b4:	f002 fbe2 	bl	8003c7c <HAL_TIM_PWM_Init>
 80014b8:	1e03      	subs	r3, r0, #0
 80014ba:	d001      	beq.n	80014c0 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80014bc:	f7ff fe05 	bl	80010ca <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014c0:	211c      	movs	r1, #28
 80014c2:	187b      	adds	r3, r7, r1
 80014c4:	2200      	movs	r2, #0
 80014c6:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014c8:	187b      	adds	r3, r7, r1
 80014ca:	2200      	movs	r2, #0
 80014cc:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80014ce:	187a      	adds	r2, r7, r1
 80014d0:	4b13      	ldr	r3, [pc, #76]	@ (8001520 <MX_TIM3_Init+0xf8>)
 80014d2:	0011      	movs	r1, r2
 80014d4:	0018      	movs	r0, r3
 80014d6:	f003 fae5 	bl	8004aa4 <HAL_TIMEx_MasterConfigSynchronization>
 80014da:	1e03      	subs	r3, r0, #0
 80014dc:	d001      	beq.n	80014e2 <MX_TIM3_Init+0xba>
  {
    Error_Handler();
 80014de:	f7ff fdf4 	bl	80010ca <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014e2:	003b      	movs	r3, r7
 80014e4:	2260      	movs	r2, #96	@ 0x60
 80014e6:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80014e8:	003b      	movs	r3, r7
 80014ea:	2200      	movs	r2, #0
 80014ec:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014ee:	003b      	movs	r3, r7
 80014f0:	2200      	movs	r2, #0
 80014f2:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014f4:	003b      	movs	r3, r7
 80014f6:	2200      	movs	r2, #0
 80014f8:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014fa:	0039      	movs	r1, r7
 80014fc:	4b08      	ldr	r3, [pc, #32]	@ (8001520 <MX_TIM3_Init+0xf8>)
 80014fe:	2200      	movs	r2, #0
 8001500:	0018      	movs	r0, r3
 8001502:	f002 fc1b 	bl	8003d3c <HAL_TIM_PWM_ConfigChannel>
 8001506:	1e03      	subs	r3, r0, #0
 8001508:	d001      	beq.n	800150e <MX_TIM3_Init+0xe6>
  {
    Error_Handler();
 800150a:	f7ff fdde 	bl	80010ca <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800150e:	4b04      	ldr	r3, [pc, #16]	@ (8001520 <MX_TIM3_Init+0xf8>)
 8001510:	0018      	movs	r0, r3
 8001512:	f000 f963 	bl	80017dc <HAL_TIM_MspPostInit>

}
 8001516:	46c0      	nop			@ (mov r8, r8)
 8001518:	46bd      	mov	sp, r7
 800151a:	b00e      	add	sp, #56	@ 0x38
 800151c:	bd80      	pop	{r7, pc}
 800151e:	46c0      	nop			@ (mov r8, r8)
 8001520:	20000250 	.word	0x20000250
 8001524:	40000400 	.word	0x40000400

08001528 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b084      	sub	sp, #16
 800152c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800152e:	1d3b      	adds	r3, r7, #4
 8001530:	0018      	movs	r0, r3
 8001532:	230c      	movs	r3, #12
 8001534:	001a      	movs	r2, r3
 8001536:	2100      	movs	r1, #0
 8001538:	f004 fe7c 	bl	8006234 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800153c:	4b15      	ldr	r3, [pc, #84]	@ (8001594 <MX_TIM6_Init+0x6c>)
 800153e:	4a16      	ldr	r2, [pc, #88]	@ (8001598 <MX_TIM6_Init+0x70>)
 8001540:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = BLOCKING_DELAY_PRESCALER;
 8001542:	4b14      	ldr	r3, [pc, #80]	@ (8001594 <MX_TIM6_Init+0x6c>)
 8001544:	2235      	movs	r2, #53	@ 0x35
 8001546:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001548:	4b12      	ldr	r3, [pc, #72]	@ (8001594 <MX_TIM6_Init+0x6c>)
 800154a:	2200      	movs	r2, #0
 800154c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 0;
 800154e:	4b11      	ldr	r3, [pc, #68]	@ (8001594 <MX_TIM6_Init+0x6c>)
 8001550:	2200      	movs	r2, #0
 8001552:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001554:	4b0f      	ldr	r3, [pc, #60]	@ (8001594 <MX_TIM6_Init+0x6c>)
 8001556:	2280      	movs	r2, #128	@ 0x80
 8001558:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800155a:	4b0e      	ldr	r3, [pc, #56]	@ (8001594 <MX_TIM6_Init+0x6c>)
 800155c:	0018      	movs	r0, r3
 800155e:	f002 fb35 	bl	8003bcc <HAL_TIM_Base_Init>
 8001562:	1e03      	subs	r3, r0, #0
 8001564:	d001      	beq.n	800156a <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8001566:	f7ff fdb0 	bl	80010ca <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800156a:	1d3b      	adds	r3, r7, #4
 800156c:	2200      	movs	r2, #0
 800156e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001570:	1d3b      	adds	r3, r7, #4
 8001572:	2200      	movs	r2, #0
 8001574:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001576:	1d3a      	adds	r2, r7, #4
 8001578:	4b06      	ldr	r3, [pc, #24]	@ (8001594 <MX_TIM6_Init+0x6c>)
 800157a:	0011      	movs	r1, r2
 800157c:	0018      	movs	r0, r3
 800157e:	f003 fa91 	bl	8004aa4 <HAL_TIMEx_MasterConfigSynchronization>
 8001582:	1e03      	subs	r3, r0, #0
 8001584:	d001      	beq.n	800158a <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 8001586:	f7ff fda0 	bl	80010ca <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800158a:	46c0      	nop			@ (mov r8, r8)
 800158c:	46bd      	mov	sp, r7
 800158e:	b004      	add	sp, #16
 8001590:	bd80      	pop	{r7, pc}
 8001592:	46c0      	nop			@ (mov r8, r8)
 8001594:	2000029c 	.word	0x2000029c
 8001598:	40001000 	.word	0x40001000

0800159c <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 800159c:	b590      	push	{r4, r7, lr}
 800159e:	b09d      	sub	sp, #116	@ 0x74
 80015a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015a2:	2360      	movs	r3, #96	@ 0x60
 80015a4:	18fb      	adds	r3, r7, r3
 80015a6:	0018      	movs	r0, r3
 80015a8:	2310      	movs	r3, #16
 80015aa:	001a      	movs	r2, r3
 80015ac:	2100      	movs	r1, #0
 80015ae:	f004 fe41 	bl	8006234 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015b2:	2354      	movs	r3, #84	@ 0x54
 80015b4:	18fb      	adds	r3, r7, r3
 80015b6:	0018      	movs	r0, r3
 80015b8:	230c      	movs	r3, #12
 80015ba:	001a      	movs	r2, r3
 80015bc:	2100      	movs	r1, #0
 80015be:	f004 fe39 	bl	8006234 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015c2:	2338      	movs	r3, #56	@ 0x38
 80015c4:	18fb      	adds	r3, r7, r3
 80015c6:	0018      	movs	r0, r3
 80015c8:	231c      	movs	r3, #28
 80015ca:	001a      	movs	r2, r3
 80015cc:	2100      	movs	r1, #0
 80015ce:	f004 fe31 	bl	8006234 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80015d2:	1d3b      	adds	r3, r7, #4
 80015d4:	0018      	movs	r0, r3
 80015d6:	2334      	movs	r3, #52	@ 0x34
 80015d8:	001a      	movs	r2, r3
 80015da:	2100      	movs	r1, #0
 80015dc:	f004 fe2a 	bl	8006234 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80015e0:	4b49      	ldr	r3, [pc, #292]	@ (8001708 <MX_TIM15_Init+0x16c>)
 80015e2:	4a4a      	ldr	r2, [pc, #296]	@ (800170c <MX_TIM15_Init+0x170>)
 80015e4:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = VBOOST_PRESCALER;
 80015e6:	4b48      	ldr	r3, [pc, #288]	@ (8001708 <MX_TIM15_Init+0x16c>)
 80015e8:	2209      	movs	r2, #9
 80015ea:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015ec:	4b46      	ldr	r3, [pc, #280]	@ (8001708 <MX_TIM15_Init+0x16c>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = VBOOST_ARR_VAL;
 80015f2:	4b45      	ldr	r3, [pc, #276]	@ (8001708 <MX_TIM15_Init+0x16c>)
 80015f4:	2263      	movs	r2, #99	@ 0x63
 80015f6:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015f8:	4b43      	ldr	r3, [pc, #268]	@ (8001708 <MX_TIM15_Init+0x16c>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80015fe:	4b42      	ldr	r3, [pc, #264]	@ (8001708 <MX_TIM15_Init+0x16c>)
 8001600:	2200      	movs	r2, #0
 8001602:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001604:	4b40      	ldr	r3, [pc, #256]	@ (8001708 <MX_TIM15_Init+0x16c>)
 8001606:	2200      	movs	r2, #0
 8001608:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 800160a:	4b3f      	ldr	r3, [pc, #252]	@ (8001708 <MX_TIM15_Init+0x16c>)
 800160c:	0018      	movs	r0, r3
 800160e:	f002 fadd 	bl	8003bcc <HAL_TIM_Base_Init>
 8001612:	1e03      	subs	r3, r0, #0
 8001614:	d001      	beq.n	800161a <MX_TIM15_Init+0x7e>
  {
    Error_Handler();
 8001616:	f7ff fd58 	bl	80010ca <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800161a:	2160      	movs	r1, #96	@ 0x60
 800161c:	187b      	adds	r3, r7, r1
 800161e:	2280      	movs	r2, #128	@ 0x80
 8001620:	0152      	lsls	r2, r2, #5
 8001622:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8001624:	187a      	adds	r2, r7, r1
 8001626:	4b38      	ldr	r3, [pc, #224]	@ (8001708 <MX_TIM15_Init+0x16c>)
 8001628:	0011      	movs	r1, r2
 800162a:	0018      	movs	r0, r3
 800162c:	f002 fc86 	bl	8003f3c <HAL_TIM_ConfigClockSource>
 8001630:	1e03      	subs	r3, r0, #0
 8001632:	d001      	beq.n	8001638 <MX_TIM15_Init+0x9c>
  {
    Error_Handler();
 8001634:	f7ff fd49 	bl	80010ca <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8001638:	4b33      	ldr	r3, [pc, #204]	@ (8001708 <MX_TIM15_Init+0x16c>)
 800163a:	0018      	movs	r0, r3
 800163c:	f002 fb1e 	bl	8003c7c <HAL_TIM_PWM_Init>
 8001640:	1e03      	subs	r3, r0, #0
 8001642:	d001      	beq.n	8001648 <MX_TIM15_Init+0xac>
  {
    Error_Handler();
 8001644:	f7ff fd41 	bl	80010ca <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001648:	2154      	movs	r1, #84	@ 0x54
 800164a:	187b      	adds	r3, r7, r1
 800164c:	2200      	movs	r2, #0
 800164e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001650:	187b      	adds	r3, r7, r1
 8001652:	2200      	movs	r2, #0
 8001654:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001656:	187a      	adds	r2, r7, r1
 8001658:	4b2b      	ldr	r3, [pc, #172]	@ (8001708 <MX_TIM15_Init+0x16c>)
 800165a:	0011      	movs	r1, r2
 800165c:	0018      	movs	r0, r3
 800165e:	f003 fa21 	bl	8004aa4 <HAL_TIMEx_MasterConfigSynchronization>
 8001662:	1e03      	subs	r3, r0, #0
 8001664:	d001      	beq.n	800166a <MX_TIM15_Init+0xce>
  {
    Error_Handler();
 8001666:	f7ff fd30 	bl	80010ca <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800166a:	2438      	movs	r4, #56	@ 0x38
 800166c:	193b      	adds	r3, r7, r4
 800166e:	2260      	movs	r2, #96	@ 0x60
 8001670:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = GetVboostPwmDutyCyclePct();
 8001672:	f7ff f98f 	bl	8000994 <GetVboostPwmDutyCyclePct>
 8001676:	0003      	movs	r3, r0
 8001678:	001a      	movs	r2, r3
 800167a:	0021      	movs	r1, r4
 800167c:	187b      	adds	r3, r7, r1
 800167e:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001680:	187b      	adds	r3, r7, r1
 8001682:	2200      	movs	r2, #0
 8001684:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001686:	187b      	adds	r3, r7, r1
 8001688:	2200      	movs	r2, #0
 800168a:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800168c:	187b      	adds	r3, r7, r1
 800168e:	2200      	movs	r2, #0
 8001690:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001692:	187b      	adds	r3, r7, r1
 8001694:	2200      	movs	r2, #0
 8001696:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001698:	187b      	adds	r3, r7, r1
 800169a:	2200      	movs	r2, #0
 800169c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800169e:	1879      	adds	r1, r7, r1
 80016a0:	4b19      	ldr	r3, [pc, #100]	@ (8001708 <MX_TIM15_Init+0x16c>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	0018      	movs	r0, r3
 80016a6:	f002 fb49 	bl	8003d3c <HAL_TIM_PWM_ConfigChannel>
 80016aa:	1e03      	subs	r3, r0, #0
 80016ac:	d001      	beq.n	80016b2 <MX_TIM15_Init+0x116>
  {
    Error_Handler();
 80016ae:	f7ff fd0c 	bl	80010ca <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80016b2:	1d3b      	adds	r3, r7, #4
 80016b4:	2200      	movs	r2, #0
 80016b6:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80016b8:	1d3b      	adds	r3, r7, #4
 80016ba:	2200      	movs	r2, #0
 80016bc:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80016be:	1d3b      	adds	r3, r7, #4
 80016c0:	2200      	movs	r2, #0
 80016c2:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80016c4:	1d3b      	adds	r3, r7, #4
 80016c6:	2200      	movs	r2, #0
 80016c8:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80016ca:	1d3b      	adds	r3, r7, #4
 80016cc:	2200      	movs	r2, #0
 80016ce:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80016d0:	1d3b      	adds	r3, r7, #4
 80016d2:	2280      	movs	r2, #128	@ 0x80
 80016d4:	0192      	lsls	r2, r2, #6
 80016d6:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80016d8:	1d3b      	adds	r3, r7, #4
 80016da:	2200      	movs	r2, #0
 80016dc:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80016de:	1d3b      	adds	r3, r7, #4
 80016e0:	2200      	movs	r2, #0
 80016e2:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 80016e4:	1d3a      	adds	r2, r7, #4
 80016e6:	4b08      	ldr	r3, [pc, #32]	@ (8001708 <MX_TIM15_Init+0x16c>)
 80016e8:	0011      	movs	r1, r2
 80016ea:	0018      	movs	r0, r3
 80016ec:	f003 fa42 	bl	8004b74 <HAL_TIMEx_ConfigBreakDeadTime>
 80016f0:	1e03      	subs	r3, r0, #0
 80016f2:	d001      	beq.n	80016f8 <MX_TIM15_Init+0x15c>
  {
    Error_Handler();
 80016f4:	f7ff fce9 	bl	80010ca <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 80016f8:	4b03      	ldr	r3, [pc, #12]	@ (8001708 <MX_TIM15_Init+0x16c>)
 80016fa:	0018      	movs	r0, r3
 80016fc:	f000 f86e 	bl	80017dc <HAL_TIM_MspPostInit>

}
 8001700:	46c0      	nop			@ (mov r8, r8)
 8001702:	46bd      	mov	sp, r7
 8001704:	b01d      	add	sp, #116	@ 0x74
 8001706:	bd90      	pop	{r4, r7, pc}
 8001708:	200002e8 	.word	0x200002e8
 800170c:	40014000 	.word	0x40014000

08001710 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b086      	sub	sp, #24
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a2a      	ldr	r2, [pc, #168]	@ (80017c8 <HAL_TIM_Base_MspInit+0xb8>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d10e      	bne.n	8001740 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001722:	4b2a      	ldr	r3, [pc, #168]	@ (80017cc <HAL_TIM_Base_MspInit+0xbc>)
 8001724:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001726:	4b29      	ldr	r3, [pc, #164]	@ (80017cc <HAL_TIM_Base_MspInit+0xbc>)
 8001728:	2180      	movs	r1, #128	@ 0x80
 800172a:	0109      	lsls	r1, r1, #4
 800172c:	430a      	orrs	r2, r1
 800172e:	641a      	str	r2, [r3, #64]	@ 0x40
 8001730:	4b26      	ldr	r3, [pc, #152]	@ (80017cc <HAL_TIM_Base_MspInit+0xbc>)
 8001732:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001734:	2380      	movs	r3, #128	@ 0x80
 8001736:	011b      	lsls	r3, r3, #4
 8001738:	4013      	ands	r3, r2
 800173a:	617b      	str	r3, [r7, #20]
 800173c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM15_CLK_ENABLE();
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 800173e:	e03e      	b.n	80017be <HAL_TIM_Base_MspInit+0xae>
  else if(tim_baseHandle->Instance==TIM3)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a22      	ldr	r2, [pc, #136]	@ (80017d0 <HAL_TIM_Base_MspInit+0xc0>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d10c      	bne.n	8001764 <HAL_TIM_Base_MspInit+0x54>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800174a:	4b20      	ldr	r3, [pc, #128]	@ (80017cc <HAL_TIM_Base_MspInit+0xbc>)
 800174c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800174e:	4b1f      	ldr	r3, [pc, #124]	@ (80017cc <HAL_TIM_Base_MspInit+0xbc>)
 8001750:	2102      	movs	r1, #2
 8001752:	430a      	orrs	r2, r1
 8001754:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001756:	4b1d      	ldr	r3, [pc, #116]	@ (80017cc <HAL_TIM_Base_MspInit+0xbc>)
 8001758:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800175a:	2202      	movs	r2, #2
 800175c:	4013      	ands	r3, r2
 800175e:	613b      	str	r3, [r7, #16]
 8001760:	693b      	ldr	r3, [r7, #16]
}
 8001762:	e02c      	b.n	80017be <HAL_TIM_Base_MspInit+0xae>
  else if(tim_baseHandle->Instance==TIM6)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a1a      	ldr	r2, [pc, #104]	@ (80017d4 <HAL_TIM_Base_MspInit+0xc4>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d114      	bne.n	8001798 <HAL_TIM_Base_MspInit+0x88>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800176e:	4b17      	ldr	r3, [pc, #92]	@ (80017cc <HAL_TIM_Base_MspInit+0xbc>)
 8001770:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001772:	4b16      	ldr	r3, [pc, #88]	@ (80017cc <HAL_TIM_Base_MspInit+0xbc>)
 8001774:	2110      	movs	r1, #16
 8001776:	430a      	orrs	r2, r1
 8001778:	63da      	str	r2, [r3, #60]	@ 0x3c
 800177a:	4b14      	ldr	r3, [pc, #80]	@ (80017cc <HAL_TIM_Base_MspInit+0xbc>)
 800177c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800177e:	2210      	movs	r2, #16
 8001780:	4013      	ands	r3, r2
 8001782:	60fb      	str	r3, [r7, #12]
 8001784:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 8001786:	2200      	movs	r2, #0
 8001788:	2100      	movs	r1, #0
 800178a:	2011      	movs	r0, #17
 800178c:	f000 fff0 	bl	8002770 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8001790:	2011      	movs	r0, #17
 8001792:	f001 f802 	bl	800279a <HAL_NVIC_EnableIRQ>
}
 8001796:	e012      	b.n	80017be <HAL_TIM_Base_MspInit+0xae>
  else if(tim_baseHandle->Instance==TIM15)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a0e      	ldr	r2, [pc, #56]	@ (80017d8 <HAL_TIM_Base_MspInit+0xc8>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d10d      	bne.n	80017be <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80017a2:	4b0a      	ldr	r3, [pc, #40]	@ (80017cc <HAL_TIM_Base_MspInit+0xbc>)
 80017a4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80017a6:	4b09      	ldr	r3, [pc, #36]	@ (80017cc <HAL_TIM_Base_MspInit+0xbc>)
 80017a8:	2180      	movs	r1, #128	@ 0x80
 80017aa:	0249      	lsls	r1, r1, #9
 80017ac:	430a      	orrs	r2, r1
 80017ae:	641a      	str	r2, [r3, #64]	@ 0x40
 80017b0:	4b06      	ldr	r3, [pc, #24]	@ (80017cc <HAL_TIM_Base_MspInit+0xbc>)
 80017b2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80017b4:	2380      	movs	r3, #128	@ 0x80
 80017b6:	025b      	lsls	r3, r3, #9
 80017b8:	4013      	ands	r3, r2
 80017ba:	60bb      	str	r3, [r7, #8]
 80017bc:	68bb      	ldr	r3, [r7, #8]
}
 80017be:	46c0      	nop			@ (mov r8, r8)
 80017c0:	46bd      	mov	sp, r7
 80017c2:	b006      	add	sp, #24
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	46c0      	nop			@ (mov r8, r8)
 80017c8:	40012c00 	.word	0x40012c00
 80017cc:	40021000 	.word	0x40021000
 80017d0:	40000400 	.word	0x40000400
 80017d4:	40001000 	.word	0x40001000
 80017d8:	40014000 	.word	0x40014000

080017dc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80017dc:	b590      	push	{r4, r7, lr}
 80017de:	b08b      	sub	sp, #44	@ 0x2c
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017e4:	2414      	movs	r4, #20
 80017e6:	193b      	adds	r3, r7, r4
 80017e8:	0018      	movs	r0, r3
 80017ea:	2314      	movs	r3, #20
 80017ec:	001a      	movs	r2, r3
 80017ee:	2100      	movs	r1, #0
 80017f0:	f004 fd20 	bl	8006234 <memset>
  if(timHandle->Instance==TIM1)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a3e      	ldr	r2, [pc, #248]	@ (80018f4 <HAL_TIM_MspPostInit+0x118>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d124      	bne.n	8001848 <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017fe:	4b3e      	ldr	r3, [pc, #248]	@ (80018f8 <HAL_TIM_MspPostInit+0x11c>)
 8001800:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001802:	4b3d      	ldr	r3, [pc, #244]	@ (80018f8 <HAL_TIM_MspPostInit+0x11c>)
 8001804:	2101      	movs	r1, #1
 8001806:	430a      	orrs	r2, r1
 8001808:	635a      	str	r2, [r3, #52]	@ 0x34
 800180a:	4b3b      	ldr	r3, [pc, #236]	@ (80018f8 <HAL_TIM_MspPostInit+0x11c>)
 800180c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800180e:	2201      	movs	r2, #1
 8001810:	4013      	ands	r3, r2
 8001812:	613b      	str	r3, [r7, #16]
 8001814:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = PIEZO_PWM_Pin;
 8001816:	193b      	adds	r3, r7, r4
 8001818:	2280      	movs	r2, #128	@ 0x80
 800181a:	0052      	lsls	r2, r2, #1
 800181c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800181e:	0021      	movs	r1, r4
 8001820:	187b      	adds	r3, r7, r1
 8001822:	2202      	movs	r2, #2
 8001824:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001826:	187b      	adds	r3, r7, r1
 8001828:	2200      	movs	r2, #0
 800182a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800182c:	187b      	adds	r3, r7, r1
 800182e:	2200      	movs	r2, #0
 8001830:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001832:	187b      	adds	r3, r7, r1
 8001834:	2202      	movs	r2, #2
 8001836:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(PIEZO_PWM_GPIO_Port, &GPIO_InitStruct);
 8001838:	187a      	adds	r2, r7, r1
 800183a:	23a0      	movs	r3, #160	@ 0xa0
 800183c:	05db      	lsls	r3, r3, #23
 800183e:	0011      	movs	r1, r2
 8001840:	0018      	movs	r0, r3
 8001842:	f001 f893 	bl	800296c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8001846:	e050      	b.n	80018ea <HAL_TIM_MspPostInit+0x10e>
  else if(timHandle->Instance==TIM3)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a2b      	ldr	r2, [pc, #172]	@ (80018fc <HAL_TIM_MspPostInit+0x120>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d123      	bne.n	800189a <HAL_TIM_MspPostInit+0xbe>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001852:	4b29      	ldr	r3, [pc, #164]	@ (80018f8 <HAL_TIM_MspPostInit+0x11c>)
 8001854:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001856:	4b28      	ldr	r3, [pc, #160]	@ (80018f8 <HAL_TIM_MspPostInit+0x11c>)
 8001858:	2101      	movs	r1, #1
 800185a:	430a      	orrs	r2, r1
 800185c:	635a      	str	r2, [r3, #52]	@ 0x34
 800185e:	4b26      	ldr	r3, [pc, #152]	@ (80018f8 <HAL_TIM_MspPostInit+0x11c>)
 8001860:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001862:	2201      	movs	r2, #1
 8001864:	4013      	ands	r3, r2
 8001866:	60fb      	str	r3, [r7, #12]
 8001868:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = WPT_PWM_Pin;
 800186a:	2114      	movs	r1, #20
 800186c:	187b      	adds	r3, r7, r1
 800186e:	2240      	movs	r2, #64	@ 0x40
 8001870:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001872:	187b      	adds	r3, r7, r1
 8001874:	2202      	movs	r2, #2
 8001876:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001878:	187b      	adds	r3, r7, r1
 800187a:	2200      	movs	r2, #0
 800187c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800187e:	187b      	adds	r3, r7, r1
 8001880:	2200      	movs	r2, #0
 8001882:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8001884:	187b      	adds	r3, r7, r1
 8001886:	2201      	movs	r2, #1
 8001888:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(WPT_PWM_GPIO_Port, &GPIO_InitStruct);
 800188a:	187a      	adds	r2, r7, r1
 800188c:	23a0      	movs	r3, #160	@ 0xa0
 800188e:	05db      	lsls	r3, r3, #23
 8001890:	0011      	movs	r1, r2
 8001892:	0018      	movs	r0, r3
 8001894:	f001 f86a 	bl	800296c <HAL_GPIO_Init>
}
 8001898:	e027      	b.n	80018ea <HAL_TIM_MspPostInit+0x10e>
  else if(timHandle->Instance==TIM15)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4a18      	ldr	r2, [pc, #96]	@ (8001900 <HAL_TIM_MspPostInit+0x124>)
 80018a0:	4293      	cmp	r3, r2
 80018a2:	d122      	bne.n	80018ea <HAL_TIM_MspPostInit+0x10e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018a4:	4b14      	ldr	r3, [pc, #80]	@ (80018f8 <HAL_TIM_MspPostInit+0x11c>)
 80018a6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80018a8:	4b13      	ldr	r3, [pc, #76]	@ (80018f8 <HAL_TIM_MspPostInit+0x11c>)
 80018aa:	2101      	movs	r1, #1
 80018ac:	430a      	orrs	r2, r1
 80018ae:	635a      	str	r2, [r3, #52]	@ 0x34
 80018b0:	4b11      	ldr	r3, [pc, #68]	@ (80018f8 <HAL_TIM_MspPostInit+0x11c>)
 80018b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80018b4:	2201      	movs	r2, #1
 80018b6:	4013      	ands	r3, r2
 80018b8:	60bb      	str	r3, [r7, #8]
 80018ba:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = VBOOST_CAL_PWM_Pin;
 80018bc:	2114      	movs	r1, #20
 80018be:	187b      	adds	r3, r7, r1
 80018c0:	2202      	movs	r2, #2
 80018c2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018c4:	187b      	adds	r3, r7, r1
 80018c6:	2202      	movs	r2, #2
 80018c8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ca:	187b      	adds	r3, r7, r1
 80018cc:	2200      	movs	r2, #0
 80018ce:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018d0:	187b      	adds	r3, r7, r1
 80018d2:	2200      	movs	r2, #0
 80018d4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM15;
 80018d6:	187b      	adds	r3, r7, r1
 80018d8:	2205      	movs	r2, #5
 80018da:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(VBOOST_CAL_PWM_GPIO_Port, &GPIO_InitStruct);
 80018dc:	187a      	adds	r2, r7, r1
 80018de:	23a0      	movs	r3, #160	@ 0xa0
 80018e0:	05db      	lsls	r3, r3, #23
 80018e2:	0011      	movs	r1, r2
 80018e4:	0018      	movs	r0, r3
 80018e6:	f001 f841 	bl	800296c <HAL_GPIO_Init>
}
 80018ea:	46c0      	nop			@ (mov r8, r8)
 80018ec:	46bd      	mov	sp, r7
 80018ee:	b00b      	add	sp, #44	@ 0x2c
 80018f0:	bd90      	pop	{r4, r7, pc}
 80018f2:	46c0      	nop			@ (mov r8, r8)
 80018f4:	40012c00 	.word	0x40012c00
 80018f8:	40021000 	.word	0x40021000
 80018fc:	40000400 	.word	0x40000400
 8001900:	40014000 	.word	0x40014000

08001904 <DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001904:	e7fe      	b.n	8001904 <DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler>
	...

08001908 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b082      	sub	sp, #8
 800190c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800190e:	1dfb      	adds	r3, r7, #7
 8001910:	2200      	movs	r2, #0
 8001912:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001914:	4b0b      	ldr	r3, [pc, #44]	@ (8001944 <HAL_Init+0x3c>)
 8001916:	681a      	ldr	r2, [r3, #0]
 8001918:	4b0a      	ldr	r3, [pc, #40]	@ (8001944 <HAL_Init+0x3c>)
 800191a:	2180      	movs	r1, #128	@ 0x80
 800191c:	0049      	lsls	r1, r1, #1
 800191e:	430a      	orrs	r2, r1
 8001920:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001922:	2003      	movs	r0, #3
 8001924:	f000 f810 	bl	8001948 <HAL_InitTick>
 8001928:	1e03      	subs	r3, r0, #0
 800192a:	d003      	beq.n	8001934 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 800192c:	1dfb      	adds	r3, r7, #7
 800192e:	2201      	movs	r2, #1
 8001930:	701a      	strb	r2, [r3, #0]
 8001932:	e001      	b.n	8001938 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001934:	f7ff fbd0 	bl	80010d8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001938:	1dfb      	adds	r3, r7, #7
 800193a:	781b      	ldrb	r3, [r3, #0]
}
 800193c:	0018      	movs	r0, r3
 800193e:	46bd      	mov	sp, r7
 8001940:	b002      	add	sp, #8
 8001942:	bd80      	pop	{r7, pc}
 8001944:	40022000 	.word	0x40022000

08001948 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001948:	b590      	push	{r4, r7, lr}
 800194a:	b085      	sub	sp, #20
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001950:	230f      	movs	r3, #15
 8001952:	18fb      	adds	r3, r7, r3
 8001954:	2200      	movs	r2, #0
 8001956:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001958:	4b1d      	ldr	r3, [pc, #116]	@ (80019d0 <HAL_InitTick+0x88>)
 800195a:	781b      	ldrb	r3, [r3, #0]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d02b      	beq.n	80019b8 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001960:	4b1c      	ldr	r3, [pc, #112]	@ (80019d4 <HAL_InitTick+0x8c>)
 8001962:	681c      	ldr	r4, [r3, #0]
 8001964:	4b1a      	ldr	r3, [pc, #104]	@ (80019d0 <HAL_InitTick+0x88>)
 8001966:	781b      	ldrb	r3, [r3, #0]
 8001968:	0019      	movs	r1, r3
 800196a:	23fa      	movs	r3, #250	@ 0xfa
 800196c:	0098      	lsls	r0, r3, #2
 800196e:	f7fe fc23 	bl	80001b8 <__udivsi3>
 8001972:	0003      	movs	r3, r0
 8001974:	0019      	movs	r1, r3
 8001976:	0020      	movs	r0, r4
 8001978:	f7fe fc1e 	bl	80001b8 <__udivsi3>
 800197c:	0003      	movs	r3, r0
 800197e:	0018      	movs	r0, r3
 8001980:	f000 ff1b 	bl	80027ba <HAL_SYSTICK_Config>
 8001984:	1e03      	subs	r3, r0, #0
 8001986:	d112      	bne.n	80019ae <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2b03      	cmp	r3, #3
 800198c:	d80a      	bhi.n	80019a4 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800198e:	6879      	ldr	r1, [r7, #4]
 8001990:	2301      	movs	r3, #1
 8001992:	425b      	negs	r3, r3
 8001994:	2200      	movs	r2, #0
 8001996:	0018      	movs	r0, r3
 8001998:	f000 feea 	bl	8002770 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800199c:	4b0e      	ldr	r3, [pc, #56]	@ (80019d8 <HAL_InitTick+0x90>)
 800199e:	687a      	ldr	r2, [r7, #4]
 80019a0:	601a      	str	r2, [r3, #0]
 80019a2:	e00d      	b.n	80019c0 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80019a4:	230f      	movs	r3, #15
 80019a6:	18fb      	adds	r3, r7, r3
 80019a8:	2201      	movs	r2, #1
 80019aa:	701a      	strb	r2, [r3, #0]
 80019ac:	e008      	b.n	80019c0 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80019ae:	230f      	movs	r3, #15
 80019b0:	18fb      	adds	r3, r7, r3
 80019b2:	2201      	movs	r2, #1
 80019b4:	701a      	strb	r2, [r3, #0]
 80019b6:	e003      	b.n	80019c0 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80019b8:	230f      	movs	r3, #15
 80019ba:	18fb      	adds	r3, r7, r3
 80019bc:	2201      	movs	r2, #1
 80019be:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80019c0:	230f      	movs	r3, #15
 80019c2:	18fb      	adds	r3, r7, r3
 80019c4:	781b      	ldrb	r3, [r3, #0]
}
 80019c6:	0018      	movs	r0, r3
 80019c8:	46bd      	mov	sp, r7
 80019ca:	b005      	add	sp, #20
 80019cc:	bd90      	pop	{r4, r7, pc}
 80019ce:	46c0      	nop			@ (mov r8, r8)
 80019d0:	20000020 	.word	0x20000020
 80019d4:	20000018 	.word	0x20000018
 80019d8:	2000001c 	.word	0x2000001c

080019dc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80019e0:	4b05      	ldr	r3, [pc, #20]	@ (80019f8 <HAL_IncTick+0x1c>)
 80019e2:	781b      	ldrb	r3, [r3, #0]
 80019e4:	001a      	movs	r2, r3
 80019e6:	4b05      	ldr	r3, [pc, #20]	@ (80019fc <HAL_IncTick+0x20>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	18d2      	adds	r2, r2, r3
 80019ec:	4b03      	ldr	r3, [pc, #12]	@ (80019fc <HAL_IncTick+0x20>)
 80019ee:	601a      	str	r2, [r3, #0]
}
 80019f0:	46c0      	nop			@ (mov r8, r8)
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	46c0      	nop			@ (mov r8, r8)
 80019f8:	20000020 	.word	0x20000020
 80019fc:	200003c8 	.word	0x200003c8

08001a00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	af00      	add	r7, sp, #0
  return uwTick;
 8001a04:	4b02      	ldr	r3, [pc, #8]	@ (8001a10 <HAL_GetTick+0x10>)
 8001a06:	681b      	ldr	r3, [r3, #0]
}
 8001a08:	0018      	movs	r0, r3
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	46c0      	nop			@ (mov r8, r8)
 8001a10:	200003c8 	.word	0x200003c8

08001a14 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b082      	sub	sp, #8
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8001a1c:	4b06      	ldr	r3, [pc, #24]	@ (8001a38 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a06      	ldr	r2, [pc, #24]	@ (8001a3c <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8001a22:	4013      	ands	r3, r2
 8001a24:	0019      	movs	r1, r3
 8001a26:	4b04      	ldr	r3, [pc, #16]	@ (8001a38 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8001a28:	687a      	ldr	r2, [r7, #4]
 8001a2a:	430a      	orrs	r2, r1
 8001a2c:	601a      	str	r2, [r3, #0]
}
 8001a2e:	46c0      	nop			@ (mov r8, r8)
 8001a30:	46bd      	mov	sp, r7
 8001a32:	b002      	add	sp, #8
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	46c0      	nop			@ (mov r8, r8)
 8001a38:	40010000 	.word	0x40010000
 8001a3c:	fffff9ff 	.word	0xfffff9ff

08001a40 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b082      	sub	sp, #8
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
 8001a48:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4a05      	ldr	r2, [pc, #20]	@ (8001a64 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8001a50:	401a      	ands	r2, r3
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	431a      	orrs	r2, r3
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	601a      	str	r2, [r3, #0]
}
 8001a5a:	46c0      	nop			@ (mov r8, r8)
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	b002      	add	sp, #8
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	46c0      	nop			@ (mov r8, r8)
 8001a64:	fe3fffff 	.word	0xfe3fffff

08001a68 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b082      	sub	sp, #8
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681a      	ldr	r2, [r3, #0]
 8001a74:	23e0      	movs	r3, #224	@ 0xe0
 8001a76:	045b      	lsls	r3, r3, #17
 8001a78:	4013      	ands	r3, r2
}
 8001a7a:	0018      	movs	r0, r3
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	b002      	add	sp, #8
 8001a80:	bd80      	pop	{r7, pc}

08001a82 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8001a82:	b580      	push	{r7, lr}
 8001a84:	b084      	sub	sp, #16
 8001a86:	af00      	add	r7, sp, #0
 8001a88:	60f8      	str	r0, [r7, #12]
 8001a8a:	60b9      	str	r1, [r7, #8]
 8001a8c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	695b      	ldr	r3, [r3, #20]
 8001a92:	68ba      	ldr	r2, [r7, #8]
 8001a94:	2104      	movs	r1, #4
 8001a96:	400a      	ands	r2, r1
 8001a98:	2107      	movs	r1, #7
 8001a9a:	4091      	lsls	r1, r2
 8001a9c:	000a      	movs	r2, r1
 8001a9e:	43d2      	mvns	r2, r2
 8001aa0:	401a      	ands	r2, r3
 8001aa2:	68bb      	ldr	r3, [r7, #8]
 8001aa4:	2104      	movs	r1, #4
 8001aa6:	400b      	ands	r3, r1
 8001aa8:	6879      	ldr	r1, [r7, #4]
 8001aaa:	4099      	lsls	r1, r3
 8001aac:	000b      	movs	r3, r1
 8001aae:	431a      	orrs	r2, r3
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8001ab4:	46c0      	nop			@ (mov r8, r8)
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	b004      	add	sp, #16
 8001aba:	bd80      	pop	{r7, pc}

08001abc <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b082      	sub	sp, #8
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
 8001ac4:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	695b      	ldr	r3, [r3, #20]
 8001aca:	683a      	ldr	r2, [r7, #0]
 8001acc:	2104      	movs	r1, #4
 8001ace:	400a      	ands	r2, r1
 8001ad0:	2107      	movs	r1, #7
 8001ad2:	4091      	lsls	r1, r2
 8001ad4:	000a      	movs	r2, r1
 8001ad6:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	2104      	movs	r1, #4
 8001adc:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8001ade:	40da      	lsrs	r2, r3
 8001ae0:	0013      	movs	r3, r2
}
 8001ae2:	0018      	movs	r0, r3
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	b002      	add	sp, #8
 8001ae8:	bd80      	pop	{r7, pc}

08001aea <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001aea:	b580      	push	{r7, lr}
 8001aec:	b082      	sub	sp, #8
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	68da      	ldr	r2, [r3, #12]
 8001af6:	23c0      	movs	r3, #192	@ 0xc0
 8001af8:	011b      	lsls	r3, r3, #4
 8001afa:	4013      	ands	r3, r2
 8001afc:	d101      	bne.n	8001b02 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001afe:	2301      	movs	r3, #1
 8001b00:	e000      	b.n	8001b04 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001b02:	2300      	movs	r3, #0
}
 8001b04:	0018      	movs	r0, r3
 8001b06:	46bd      	mov	sp, r7
 8001b08:	b002      	add	sp, #8
 8001b0a:	bd80      	pop	{r7, pc}

08001b0c <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b084      	sub	sp, #16
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	60f8      	str	r0, [r7, #12]
 8001b14:	60b9      	str	r1, [r7, #8]
 8001b16:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b1c:	68ba      	ldr	r2, [r7, #8]
 8001b1e:	211f      	movs	r1, #31
 8001b20:	400a      	ands	r2, r1
 8001b22:	210f      	movs	r1, #15
 8001b24:	4091      	lsls	r1, r2
 8001b26:	000a      	movs	r2, r1
 8001b28:	43d2      	mvns	r2, r2
 8001b2a:	401a      	ands	r2, r3
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	0e9b      	lsrs	r3, r3, #26
 8001b30:	210f      	movs	r1, #15
 8001b32:	4019      	ands	r1, r3
 8001b34:	68bb      	ldr	r3, [r7, #8]
 8001b36:	201f      	movs	r0, #31
 8001b38:	4003      	ands	r3, r0
 8001b3a:	4099      	lsls	r1, r3
 8001b3c:	000b      	movs	r3, r1
 8001b3e:	431a      	orrs	r2, r3
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001b44:	46c0      	nop			@ (mov r8, r8)
 8001b46:	46bd      	mov	sp, r7
 8001b48:	b004      	add	sp, #16
 8001b4a:	bd80      	pop	{r7, pc}

08001b4c <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b082      	sub	sp, #8
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
 8001b54:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	035b      	lsls	r3, r3, #13
 8001b5e:	0b5b      	lsrs	r3, r3, #13
 8001b60:	431a      	orrs	r2, r3
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001b66:	46c0      	nop			@ (mov r8, r8)
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	b002      	add	sp, #8
 8001b6c:	bd80      	pop	{r7, pc}

08001b6e <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001b6e:	b580      	push	{r7, lr}
 8001b70:	b082      	sub	sp, #8
 8001b72:	af00      	add	r7, sp, #0
 8001b74:	6078      	str	r0, [r7, #4]
 8001b76:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b7c:	683a      	ldr	r2, [r7, #0]
 8001b7e:	0352      	lsls	r2, r2, #13
 8001b80:	0b52      	lsrs	r2, r2, #13
 8001b82:	43d2      	mvns	r2, r2
 8001b84:	401a      	ands	r2, r3
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001b8a:	46c0      	nop			@ (mov r8, r8)
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	b002      	add	sp, #8
 8001b90:	bd80      	pop	{r7, pc}

08001b92 <LL_ADC_REG_GetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  */
__STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(const ADC_TypeDef *ADCx)
{
 8001b92:	b580      	push	{r7, lr}
 8001b94:	b082      	sub	sp, #8
 8001b96:	af00      	add	r7, sp, #0
 8001b98:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG));
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	68db      	ldr	r3, [r3, #12]
 8001b9e:	2203      	movs	r2, #3
 8001ba0:	4013      	ands	r3, r2
}
 8001ba2:	0018      	movs	r0, r3
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	b002      	add	sp, #8
 8001ba8:	bd80      	pop	{r7, pc}
	...

08001bac <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b084      	sub	sp, #16
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	60f8      	str	r0, [r7, #12]
 8001bb4:	60b9      	str	r1, [r7, #8]
 8001bb6:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	695b      	ldr	r3, [r3, #20]
 8001bbc:	68ba      	ldr	r2, [r7, #8]
 8001bbe:	0212      	lsls	r2, r2, #8
 8001bc0:	43d2      	mvns	r2, r2
 8001bc2:	401a      	ands	r2, r3
 8001bc4:	68bb      	ldr	r3, [r7, #8]
 8001bc6:	021b      	lsls	r3, r3, #8
 8001bc8:	6879      	ldr	r1, [r7, #4]
 8001bca:	400b      	ands	r3, r1
 8001bcc:	4904      	ldr	r1, [pc, #16]	@ (8001be0 <LL_ADC_SetChannelSamplingTime+0x34>)
 8001bce:	400b      	ands	r3, r1
 8001bd0:	431a      	orrs	r2, r3
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8001bd6:	46c0      	nop			@ (mov r8, r8)
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	b004      	add	sp, #16
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	46c0      	nop			@ (mov r8, r8)
 8001be0:	07ffff00 	.word	0x07ffff00

08001be4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b082      	sub	sp, #8
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	689b      	ldr	r3, [r3, #8]
 8001bf0:	4a05      	ldr	r2, [pc, #20]	@ (8001c08 <LL_ADC_EnableInternalRegulator+0x24>)
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	2280      	movs	r2, #128	@ 0x80
 8001bf6:	0552      	lsls	r2, r2, #21
 8001bf8:	431a      	orrs	r2, r3
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001bfe:	46c0      	nop			@ (mov r8, r8)
 8001c00:	46bd      	mov	sp, r7
 8001c02:	b002      	add	sp, #8
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	46c0      	nop			@ (mov r8, r8)
 8001c08:	6fffffe8 	.word	0x6fffffe8

08001c0c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b082      	sub	sp, #8
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	689a      	ldr	r2, [r3, #8]
 8001c18:	2380      	movs	r3, #128	@ 0x80
 8001c1a:	055b      	lsls	r3, r3, #21
 8001c1c:	401a      	ands	r2, r3
 8001c1e:	2380      	movs	r3, #128	@ 0x80
 8001c20:	055b      	lsls	r3, r3, #21
 8001c22:	429a      	cmp	r2, r3
 8001c24:	d101      	bne.n	8001c2a <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8001c26:	2301      	movs	r3, #1
 8001c28:	e000      	b.n	8001c2c <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8001c2a:	2300      	movs	r3, #0
}
 8001c2c:	0018      	movs	r0, r3
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	b002      	add	sp, #8
 8001c32:	bd80      	pop	{r7, pc}

08001c34 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b082      	sub	sp, #8
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	689b      	ldr	r3, [r3, #8]
 8001c40:	2201      	movs	r2, #1
 8001c42:	4013      	ands	r3, r2
 8001c44:	2b01      	cmp	r3, #1
 8001c46:	d101      	bne.n	8001c4c <LL_ADC_IsEnabled+0x18>
 8001c48:	2301      	movs	r3, #1
 8001c4a:	e000      	b.n	8001c4e <LL_ADC_IsEnabled+0x1a>
 8001c4c:	2300      	movs	r3, #0
}
 8001c4e:	0018      	movs	r0, r3
 8001c50:	46bd      	mov	sp, r7
 8001c52:	b002      	add	sp, #8
 8001c54:	bd80      	pop	{r7, pc}

08001c56 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001c56:	b580      	push	{r7, lr}
 8001c58:	b082      	sub	sp, #8
 8001c5a:	af00      	add	r7, sp, #0
 8001c5c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	689b      	ldr	r3, [r3, #8]
 8001c62:	2204      	movs	r2, #4
 8001c64:	4013      	ands	r3, r2
 8001c66:	2b04      	cmp	r3, #4
 8001c68:	d101      	bne.n	8001c6e <LL_ADC_REG_IsConversionOngoing+0x18>
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e000      	b.n	8001c70 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001c6e:	2300      	movs	r3, #0
}
 8001c70:	0018      	movs	r0, r3
 8001c72:	46bd      	mov	sp, r7
 8001c74:	b002      	add	sp, #8
 8001c76:	bd80      	pop	{r7, pc}

08001c78 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b088      	sub	sp, #32
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c80:	231f      	movs	r3, #31
 8001c82:	18fb      	adds	r3, r7, r3
 8001c84:	2200      	movs	r2, #0
 8001c86:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001c90:	2300      	movs	r3, #0
 8001c92:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d101      	bne.n	8001c9e <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	e17f      	b.n	8001f9e <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d10a      	bne.n	8001cbc <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	0018      	movs	r0, r3
 8001caa:	f7fe ff07 	bl	8000abc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2254      	movs	r2, #84	@ 0x54
 8001cb8:	2100      	movs	r1, #0
 8001cba:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	0018      	movs	r0, r3
 8001cc2:	f7ff ffa3 	bl	8001c0c <LL_ADC_IsInternalRegulatorEnabled>
 8001cc6:	1e03      	subs	r3, r0, #0
 8001cc8:	d115      	bne.n	8001cf6 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	0018      	movs	r0, r3
 8001cd0:	f7ff ff88 	bl	8001be4 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001cd4:	4bb4      	ldr	r3, [pc, #720]	@ (8001fa8 <HAL_ADC_Init+0x330>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	49b4      	ldr	r1, [pc, #720]	@ (8001fac <HAL_ADC_Init+0x334>)
 8001cda:	0018      	movs	r0, r3
 8001cdc:	f7fe fa6c 	bl	80001b8 <__udivsi3>
 8001ce0:	0003      	movs	r3, r0
 8001ce2:	3301      	adds	r3, #1
 8001ce4:	005b      	lsls	r3, r3, #1
 8001ce6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001ce8:	e002      	b.n	8001cf0 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	3b01      	subs	r3, #1
 8001cee:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d1f9      	bne.n	8001cea <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	0018      	movs	r0, r3
 8001cfc:	f7ff ff86 	bl	8001c0c <LL_ADC_IsInternalRegulatorEnabled>
 8001d00:	1e03      	subs	r3, r0, #0
 8001d02:	d10f      	bne.n	8001d24 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d08:	2210      	movs	r2, #16
 8001d0a:	431a      	orrs	r2, r3
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d14:	2201      	movs	r2, #1
 8001d16:	431a      	orrs	r2, r3
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001d1c:	231f      	movs	r3, #31
 8001d1e:	18fb      	adds	r3, r7, r3
 8001d20:	2201      	movs	r2, #1
 8001d22:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	0018      	movs	r0, r3
 8001d2a:	f7ff ff94 	bl	8001c56 <LL_ADC_REG_IsConversionOngoing>
 8001d2e:	0003      	movs	r3, r0
 8001d30:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d36:	2210      	movs	r2, #16
 8001d38:	4013      	ands	r3, r2
 8001d3a:	d000      	beq.n	8001d3e <HAL_ADC_Init+0xc6>
 8001d3c:	e122      	b.n	8001f84 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d000      	beq.n	8001d46 <HAL_ADC_Init+0xce>
 8001d44:	e11e      	b.n	8001f84 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d4a:	4a99      	ldr	r2, [pc, #612]	@ (8001fb0 <HAL_ADC_Init+0x338>)
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	2202      	movs	r2, #2
 8001d50:	431a      	orrs	r2, r3
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	0018      	movs	r0, r3
 8001d5c:	f7ff ff6a 	bl	8001c34 <LL_ADC_IsEnabled>
 8001d60:	1e03      	subs	r3, r0, #0
 8001d62:	d000      	beq.n	8001d66 <HAL_ADC_Init+0xee>
 8001d64:	e0ad      	b.n	8001ec2 <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	7e1b      	ldrb	r3, [r3, #24]
 8001d6e:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8001d70:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	7e5b      	ldrb	r3, [r3, #25]
 8001d76:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001d78:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	7e9b      	ldrb	r3, [r3, #26]
 8001d7e:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001d80:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d002      	beq.n	8001d90 <HAL_ADC_Init+0x118>
 8001d8a:	2380      	movs	r3, #128	@ 0x80
 8001d8c:	015b      	lsls	r3, r3, #5
 8001d8e:	e000      	b.n	8001d92 <HAL_ADC_Init+0x11a>
 8001d90:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001d92:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001d98:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	691b      	ldr	r3, [r3, #16]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	da04      	bge.n	8001dac <HAL_ADC_Init+0x134>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	691b      	ldr	r3, [r3, #16]
 8001da6:	005b      	lsls	r3, r3, #1
 8001da8:	085b      	lsrs	r3, r3, #1
 8001daa:	e001      	b.n	8001db0 <HAL_ADC_Init+0x138>
 8001dac:	2380      	movs	r3, #128	@ 0x80
 8001dae:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 8001db0:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	212c      	movs	r1, #44	@ 0x2c
 8001db6:	5c5b      	ldrb	r3, [r3, r1]
 8001db8:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001dba:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8001dbc:	69ba      	ldr	r2, [r7, #24]
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2220      	movs	r2, #32
 8001dc6:	5c9b      	ldrb	r3, [r3, r2]
 8001dc8:	2b01      	cmp	r3, #1
 8001dca:	d115      	bne.n	8001df8 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	7e9b      	ldrb	r3, [r3, #26]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d105      	bne.n	8001de0 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 8001dd4:	69bb      	ldr	r3, [r7, #24]
 8001dd6:	2280      	movs	r2, #128	@ 0x80
 8001dd8:	0252      	lsls	r2, r2, #9
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	61bb      	str	r3, [r7, #24]
 8001dde:	e00b      	b.n	8001df8 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001de4:	2220      	movs	r2, #32
 8001de6:	431a      	orrs	r2, r3
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001df0:	2201      	movs	r2, #1
 8001df2:	431a      	orrs	r2, r3
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d00a      	beq.n	8001e16 <HAL_ADC_Init+0x19e>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001e04:	23e0      	movs	r3, #224	@ 0xe0
 8001e06:	005b      	lsls	r3, r3, #1
 8001e08:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	69ba      	ldr	r2, [r7, #24]
 8001e12:	4313      	orrs	r3, r2
 8001e14:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	68db      	ldr	r3, [r3, #12]
 8001e1c:	4a65      	ldr	r2, [pc, #404]	@ (8001fb4 <HAL_ADC_Init+0x33c>)
 8001e1e:	4013      	ands	r3, r2
 8001e20:	0019      	movs	r1, r3
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	69ba      	ldr	r2, [r7, #24]
 8001e28:	430a      	orrs	r2, r1
 8001e2a:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	0f9b      	lsrs	r3, r3, #30
 8001e32:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	697a      	ldr	r2, [r7, #20]
 8001e3c:	4313      	orrs	r3, r2
 8001e3e:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	223c      	movs	r2, #60	@ 0x3c
 8001e44:	5c9b      	ldrb	r3, [r3, r2]
 8001e46:	2b01      	cmp	r3, #1
 8001e48:	d111      	bne.n	8001e6e <HAL_ADC_Init+0x1f6>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	0f9b      	lsrs	r3, r3, #30
 8001e50:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001e56:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                      hadc->Init.Oversampling.Ratio         |
 8001e5c:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                      hadc->Init.Oversampling.RightBitShift |
 8001e62:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	4313      	orrs	r3, r2
 8001e68:	2201      	movs	r2, #1
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	691b      	ldr	r3, [r3, #16]
 8001e74:	4a50      	ldr	r2, [pc, #320]	@ (8001fb8 <HAL_ADC_Init+0x340>)
 8001e76:	4013      	ands	r3, r2
 8001e78:	0019      	movs	r1, r3
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	697a      	ldr	r2, [r7, #20]
 8001e80:	430a      	orrs	r2, r1
 8001e82:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	685a      	ldr	r2, [r3, #4]
 8001e88:	23c0      	movs	r3, #192	@ 0xc0
 8001e8a:	061b      	lsls	r3, r3, #24
 8001e8c:	429a      	cmp	r2, r3
 8001e8e:	d018      	beq.n	8001ec2 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001e94:	2380      	movs	r3, #128	@ 0x80
 8001e96:	05db      	lsls	r3, r3, #23
 8001e98:	429a      	cmp	r2, r3
 8001e9a:	d012      	beq.n	8001ec2 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001ea0:	2380      	movs	r3, #128	@ 0x80
 8001ea2:	061b      	lsls	r3, r3, #24
 8001ea4:	429a      	cmp	r2, r3
 8001ea6:	d00c      	beq.n	8001ec2 <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8001ea8:	4b44      	ldr	r3, [pc, #272]	@ (8001fbc <HAL_ADC_Init+0x344>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a44      	ldr	r2, [pc, #272]	@ (8001fc0 <HAL_ADC_Init+0x348>)
 8001eae:	4013      	ands	r3, r2
 8001eb0:	0019      	movs	r1, r3
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	685a      	ldr	r2, [r3, #4]
 8001eb6:	23f0      	movs	r3, #240	@ 0xf0
 8001eb8:	039b      	lsls	r3, r3, #14
 8001eba:	401a      	ands	r2, r3
 8001ebc:	4b3f      	ldr	r3, [pc, #252]	@ (8001fbc <HAL_ADC_Init+0x344>)
 8001ebe:	430a      	orrs	r2, r1
 8001ec0:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6818      	ldr	r0, [r3, #0]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001eca:	001a      	movs	r2, r3
 8001ecc:	2100      	movs	r1, #0
 8001ece:	f7ff fdd8 	bl	8001a82 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6818      	ldr	r0, [r3, #0]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001eda:	493a      	ldr	r1, [pc, #232]	@ (8001fc4 <HAL_ADC_Init+0x34c>)
 8001edc:	001a      	movs	r2, r3
 8001ede:	f7ff fdd0 	bl	8001a82 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	691b      	ldr	r3, [r3, #16]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d109      	bne.n	8001efe <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	2110      	movs	r1, #16
 8001ef6:	4249      	negs	r1, r1
 8001ef8:	430a      	orrs	r2, r1
 8001efa:	629a      	str	r2, [r3, #40]	@ 0x28
 8001efc:	e018      	b.n	8001f30 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	691a      	ldr	r2, [r3, #16]
 8001f02:	2380      	movs	r3, #128	@ 0x80
 8001f04:	039b      	lsls	r3, r3, #14
 8001f06:	429a      	cmp	r2, r3
 8001f08:	d112      	bne.n	8001f30 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	69db      	ldr	r3, [r3, #28]
 8001f14:	3b01      	subs	r3, #1
 8001f16:	009b      	lsls	r3, r3, #2
 8001f18:	221c      	movs	r2, #28
 8001f1a:	4013      	ands	r3, r2
 8001f1c:	2210      	movs	r2, #16
 8001f1e:	4252      	negs	r2, r2
 8001f20:	409a      	lsls	r2, r3
 8001f22:	0011      	movs	r1, r2
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	430a      	orrs	r2, r1
 8001f2e:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	2100      	movs	r1, #0
 8001f36:	0018      	movs	r0, r3
 8001f38:	f7ff fdc0 	bl	8001abc <LL_ADC_GetSamplingTimeCommonChannels>
 8001f3c:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001f42:	429a      	cmp	r2, r3
 8001f44:	d10b      	bne.n	8001f5e <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2200      	movs	r2, #0
 8001f4a:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f50:	2203      	movs	r2, #3
 8001f52:	4393      	bics	r3, r2
 8001f54:	2201      	movs	r2, #1
 8001f56:	431a      	orrs	r2, r3
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001f5c:	e01c      	b.n	8001f98 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f62:	2212      	movs	r2, #18
 8001f64:	4393      	bics	r3, r2
 8001f66:	2210      	movs	r2, #16
 8001f68:	431a      	orrs	r2, r3
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f72:	2201      	movs	r2, #1
 8001f74:	431a      	orrs	r2, r3
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 8001f7a:	231f      	movs	r3, #31
 8001f7c:	18fb      	adds	r3, r7, r3
 8001f7e:	2201      	movs	r2, #1
 8001f80:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001f82:	e009      	b.n	8001f98 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f88:	2210      	movs	r2, #16
 8001f8a:	431a      	orrs	r2, r3
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001f90:	231f      	movs	r3, #31
 8001f92:	18fb      	adds	r3, r7, r3
 8001f94:	2201      	movs	r2, #1
 8001f96:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8001f98:	231f      	movs	r3, #31
 8001f9a:	18fb      	adds	r3, r7, r3
 8001f9c:	781b      	ldrb	r3, [r3, #0]
}
 8001f9e:	0018      	movs	r0, r3
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	b008      	add	sp, #32
 8001fa4:	bd80      	pop	{r7, pc}
 8001fa6:	46c0      	nop			@ (mov r8, r8)
 8001fa8:	20000018 	.word	0x20000018
 8001fac:	00030d40 	.word	0x00030d40
 8001fb0:	fffffefd 	.word	0xfffffefd
 8001fb4:	ffde0201 	.word	0xffde0201
 8001fb8:	1ffffc02 	.word	0x1ffffc02
 8001fbc:	40012708 	.word	0x40012708
 8001fc0:	ffc3ffff 	.word	0xffc3ffff
 8001fc4:	07ffff04 	.word	0x07ffff04

08001fc8 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b086      	sub	sp, #24
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	617b      	str	r3, [r7, #20]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	613b      	str	r3, [r7, #16]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8001fe4:	693b      	ldr	r3, [r7, #16]
 8001fe6:	2202      	movs	r2, #2
 8001fe8:	4013      	ands	r3, r2
 8001fea:	d017      	beq.n	800201c <HAL_ADC_IRQHandler+0x54>
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	2202      	movs	r2, #2
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	d013      	beq.n	800201c <HAL_ADC_IRQHandler+0x54>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ff8:	2210      	movs	r2, #16
 8001ffa:	4013      	ands	r3, r2
 8001ffc:	d106      	bne.n	800200c <HAL_ADC_IRQHandler+0x44>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002002:	2280      	movs	r2, #128	@ 0x80
 8002004:	0112      	lsls	r2, r2, #4
 8002006:	431a      	orrs	r2, r3
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	0018      	movs	r0, r3
 8002010:	f000 faf2 	bl	80025f8 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	2202      	movs	r2, #2
 800201a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800201c:	693b      	ldr	r3, [r7, #16]
 800201e:	2204      	movs	r2, #4
 8002020:	4013      	ands	r3, r2
 8002022:	d003      	beq.n	800202c <HAL_ADC_IRQHandler+0x64>
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	2204      	movs	r2, #4
 8002028:	4013      	ands	r3, r2
 800202a:	d107      	bne.n	800203c <HAL_ADC_IRQHandler+0x74>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	2208      	movs	r2, #8
 8002030:	4013      	ands	r3, r2
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002032:	d04d      	beq.n	80020d0 <HAL_ADC_IRQHandler+0x108>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	2208      	movs	r2, #8
 8002038:	4013      	ands	r3, r2
 800203a:	d049      	beq.n	80020d0 <HAL_ADC_IRQHandler+0x108>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002040:	2210      	movs	r2, #16
 8002042:	4013      	ands	r3, r2
 8002044:	d106      	bne.n	8002054 <HAL_ADC_IRQHandler+0x8c>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800204a:	2280      	movs	r2, #128	@ 0x80
 800204c:	0092      	lsls	r2, r2, #2
 800204e:	431a      	orrs	r2, r3
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	0018      	movs	r0, r3
 800205a:	f7ff fd46 	bl	8001aea <LL_ADC_REG_IsTriggerSourceSWStart>
 800205e:	1e03      	subs	r3, r0, #0
 8002060:	d02e      	beq.n	80020c0 <HAL_ADC_IRQHandler+0xf8>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	7e9b      	ldrb	r3, [r3, #26]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d12a      	bne.n	80020c0 <HAL_ADC_IRQHandler+0xf8>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	2208      	movs	r2, #8
 8002072:	4013      	ands	r3, r2
 8002074:	2b08      	cmp	r3, #8
 8002076:	d123      	bne.n	80020c0 <HAL_ADC_IRQHandler+0xf8>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	0018      	movs	r0, r3
 800207e:	f7ff fdea 	bl	8001c56 <LL_ADC_REG_IsConversionOngoing>
 8002082:	1e03      	subs	r3, r0, #0
 8002084:	d110      	bne.n	80020a8 <HAL_ADC_IRQHandler+0xe0>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	685a      	ldr	r2, [r3, #4]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	210c      	movs	r1, #12
 8002092:	438a      	bics	r2, r1
 8002094:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800209a:	4a56      	ldr	r2, [pc, #344]	@ (80021f4 <HAL_ADC_IRQHandler+0x22c>)
 800209c:	4013      	ands	r3, r2
 800209e:	2201      	movs	r2, #1
 80020a0:	431a      	orrs	r2, r3
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	659a      	str	r2, [r3, #88]	@ 0x58
 80020a6:	e00b      	b.n	80020c0 <HAL_ADC_IRQHandler+0xf8>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020ac:	2220      	movs	r2, #32
 80020ae:	431a      	orrs	r2, r3
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020b8:	2201      	movs	r2, #1
 80020ba:	431a      	orrs	r2, r3
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	65da      	str	r2, [r3, #92]	@ 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	0018      	movs	r0, r3
 80020c4:	f000 f898 	bl	80021f8 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	220c      	movs	r2, #12
 80020ce:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80020d0:	693b      	ldr	r3, [r7, #16]
 80020d2:	2280      	movs	r2, #128	@ 0x80
 80020d4:	4013      	ands	r3, r2
 80020d6:	d012      	beq.n	80020fe <HAL_ADC_IRQHandler+0x136>
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	2280      	movs	r2, #128	@ 0x80
 80020dc:	4013      	ands	r3, r2
 80020de:	d00e      	beq.n	80020fe <HAL_ADC_IRQHandler+0x136>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020e4:	2280      	movs	r2, #128	@ 0x80
 80020e6:	0252      	lsls	r2, r2, #9
 80020e8:	431a      	orrs	r2, r3
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	0018      	movs	r0, r3
 80020f2:	f000 f889 	bl	8002208 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	2280      	movs	r2, #128	@ 0x80
 80020fc:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80020fe:	693a      	ldr	r2, [r7, #16]
 8002100:	2380      	movs	r3, #128	@ 0x80
 8002102:	005b      	lsls	r3, r3, #1
 8002104:	4013      	ands	r3, r2
 8002106:	d014      	beq.n	8002132 <HAL_ADC_IRQHandler+0x16a>
 8002108:	68fa      	ldr	r2, [r7, #12]
 800210a:	2380      	movs	r3, #128	@ 0x80
 800210c:	005b      	lsls	r3, r3, #1
 800210e:	4013      	ands	r3, r2
 8002110:	d00f      	beq.n	8002132 <HAL_ADC_IRQHandler+0x16a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002116:	2280      	movs	r2, #128	@ 0x80
 8002118:	0292      	lsls	r2, r2, #10
 800211a:	431a      	orrs	r2, r3
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	0018      	movs	r0, r3
 8002124:	f000 fa58 	bl	80025d8 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	2280      	movs	r2, #128	@ 0x80
 800212e:	0052      	lsls	r2, r2, #1
 8002130:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002132:	693a      	ldr	r2, [r7, #16]
 8002134:	2380      	movs	r3, #128	@ 0x80
 8002136:	009b      	lsls	r3, r3, #2
 8002138:	4013      	ands	r3, r2
 800213a:	d014      	beq.n	8002166 <HAL_ADC_IRQHandler+0x19e>
 800213c:	68fa      	ldr	r2, [r7, #12]
 800213e:	2380      	movs	r3, #128	@ 0x80
 8002140:	009b      	lsls	r3, r3, #2
 8002142:	4013      	ands	r3, r2
 8002144:	d00f      	beq.n	8002166 <HAL_ADC_IRQHandler+0x19e>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800214a:	2280      	movs	r2, #128	@ 0x80
 800214c:	02d2      	lsls	r2, r2, #11
 800214e:	431a      	orrs	r2, r3
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	0018      	movs	r0, r3
 8002158:	f000 fa46 	bl	80025e8 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	2280      	movs	r2, #128	@ 0x80
 8002162:	0092      	lsls	r2, r2, #2
 8002164:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	2210      	movs	r2, #16
 800216a:	4013      	ands	r3, r2
 800216c:	d02b      	beq.n	80021c6 <HAL_ADC_IRQHandler+0x1fe>
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	2210      	movs	r2, #16
 8002172:	4013      	ands	r3, r2
 8002174:	d027      	beq.n	80021c6 <HAL_ADC_IRQHandler+0x1fe>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800217a:	2b00      	cmp	r3, #0
 800217c:	d102      	bne.n	8002184 <HAL_ADC_IRQHandler+0x1bc>
    {
      overrun_error = 1UL;
 800217e:	2301      	movs	r3, #1
 8002180:	617b      	str	r3, [r7, #20]
 8002182:	e008      	b.n	8002196 <HAL_ADC_IRQHandler+0x1ce>
    }
    else
    {
      /* Check DMA configuration */
      if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	0018      	movs	r0, r3
 800218a:	f7ff fd02 	bl	8001b92 <LL_ADC_REG_GetDMATransfer>
 800218e:	1e03      	subs	r3, r0, #0
 8002190:	d001      	beq.n	8002196 <HAL_ADC_IRQHandler+0x1ce>
      {
        overrun_error = 1UL;
 8002192:	2301      	movs	r3, #1
 8002194:	617b      	str	r3, [r7, #20]
      }
    }

    if (overrun_error == 1UL)
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	2b01      	cmp	r3, #1
 800219a:	d110      	bne.n	80021be <HAL_ADC_IRQHandler+0x1f6>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021a0:	2280      	movs	r2, #128	@ 0x80
 80021a2:	00d2      	lsls	r2, r2, #3
 80021a4:	431a      	orrs	r2, r3
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021ae:	2202      	movs	r2, #2
 80021b0:	431a      	orrs	r2, r3
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	65da      	str	r2, [r3, #92]	@ 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	0018      	movs	r0, r3
 80021ba:	f000 f82d 	bl	8002218 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	2210      	movs	r2, #16
 80021c4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check channel configuration ready flag ========== */
  if (((tmp_isr & ADC_FLAG_CCRDY) == ADC_FLAG_CCRDY) && ((tmp_ier & ADC_IT_CCRDY) == ADC_IT_CCRDY))
 80021c6:	693a      	ldr	r2, [r7, #16]
 80021c8:	2380      	movs	r3, #128	@ 0x80
 80021ca:	019b      	lsls	r3, r3, #6
 80021cc:	4013      	ands	r3, r2
 80021ce:	d00d      	beq.n	80021ec <HAL_ADC_IRQHandler+0x224>
 80021d0:	68fa      	ldr	r2, [r7, #12]
 80021d2:	2380      	movs	r3, #128	@ 0x80
 80021d4:	019b      	lsls	r3, r3, #6
 80021d6:	4013      	ands	r3, r2
 80021d8:	d008      	beq.n	80021ec <HAL_ADC_IRQHandler+0x224>
  {
    /* Channel configuration ready callback */
    HAL_ADCEx_ChannelConfigReadyCallback(hadc);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	0018      	movs	r0, r3
 80021de:	f000 fa13 	bl	8002608 <HAL_ADCEx_ChannelConfigReadyCallback>

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_CCRDY);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	2280      	movs	r2, #128	@ 0x80
 80021e8:	0192      	lsls	r2, r2, #6
 80021ea:	601a      	str	r2, [r3, #0]
  }
}
 80021ec:	46c0      	nop			@ (mov r8, r8)
 80021ee:	46bd      	mov	sp, r7
 80021f0:	b006      	add	sp, #24
 80021f2:	bd80      	pop	{r7, pc}
 80021f4:	fffffefe 	.word	0xfffffefe

080021f8 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b082      	sub	sp, #8
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002200:	46c0      	nop			@ (mov r8, r8)
 8002202:	46bd      	mov	sp, r7
 8002204:	b002      	add	sp, #8
 8002206:	bd80      	pop	{r7, pc}

08002208 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b082      	sub	sp, #8
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002210:	46c0      	nop			@ (mov r8, r8)
 8002212:	46bd      	mov	sp, r7
 8002214:	b002      	add	sp, #8
 8002216:	bd80      	pop	{r7, pc}

08002218 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b082      	sub	sp, #8
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002220:	46c0      	nop			@ (mov r8, r8)
 8002222:	46bd      	mov	sp, r7
 8002224:	b002      	add	sp, #8
 8002226:	bd80      	pop	{r7, pc}

08002228 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b086      	sub	sp, #24
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
 8002230:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002232:	2317      	movs	r3, #23
 8002234:	18fb      	adds	r3, r7, r3
 8002236:	2200      	movs	r2, #0
 8002238:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800223a:	2300      	movs	r3, #0
 800223c:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2254      	movs	r2, #84	@ 0x54
 8002242:	5c9b      	ldrb	r3, [r3, r2]
 8002244:	2b01      	cmp	r3, #1
 8002246:	d101      	bne.n	800224c <HAL_ADC_ConfigChannel+0x24>
 8002248:	2302      	movs	r3, #2
 800224a:	e1c0      	b.n	80025ce <HAL_ADC_ConfigChannel+0x3a6>
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2254      	movs	r2, #84	@ 0x54
 8002250:	2101      	movs	r1, #1
 8002252:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	0018      	movs	r0, r3
 800225a:	f7ff fcfc 	bl	8001c56 <LL_ADC_REG_IsConversionOngoing>
 800225e:	1e03      	subs	r3, r0, #0
 8002260:	d000      	beq.n	8002264 <HAL_ADC_ConfigChannel+0x3c>
 8002262:	e1a3      	b.n	80025ac <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	2b02      	cmp	r3, #2
 800226a:	d100      	bne.n	800226e <HAL_ADC_ConfigChannel+0x46>
 800226c:	e143      	b.n	80024f6 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	691a      	ldr	r2, [r3, #16]
 8002272:	2380      	movs	r3, #128	@ 0x80
 8002274:	061b      	lsls	r3, r3, #24
 8002276:	429a      	cmp	r2, r3
 8002278:	d004      	beq.n	8002284 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800227e:	4ac1      	ldr	r2, [pc, #772]	@ (8002584 <HAL_ADC_ConfigChannel+0x35c>)
 8002280:	4293      	cmp	r3, r2
 8002282:	d108      	bne.n	8002296 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681a      	ldr	r2, [r3, #0]
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	0019      	movs	r1, r3
 800228e:	0010      	movs	r0, r2
 8002290:	f7ff fc5c 	bl	8001b4c <LL_ADC_REG_SetSequencerChAdd>
 8002294:	e0c9      	b.n	800242a <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	211f      	movs	r1, #31
 80022a0:	400b      	ands	r3, r1
 80022a2:	210f      	movs	r1, #15
 80022a4:	4099      	lsls	r1, r3
 80022a6:	000b      	movs	r3, r1
 80022a8:	43db      	mvns	r3, r3
 80022aa:	4013      	ands	r3, r2
 80022ac:	0019      	movs	r1, r3
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	035b      	lsls	r3, r3, #13
 80022b4:	0b5b      	lsrs	r3, r3, #13
 80022b6:	d105      	bne.n	80022c4 <HAL_ADC_ConfigChannel+0x9c>
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	0e9b      	lsrs	r3, r3, #26
 80022be:	221f      	movs	r2, #31
 80022c0:	4013      	ands	r3, r2
 80022c2:	e098      	b.n	80023f6 <HAL_ADC_ConfigChannel+0x1ce>
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	2201      	movs	r2, #1
 80022ca:	4013      	ands	r3, r2
 80022cc:	d000      	beq.n	80022d0 <HAL_ADC_ConfigChannel+0xa8>
 80022ce:	e091      	b.n	80023f4 <HAL_ADC_ConfigChannel+0x1cc>
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	2202      	movs	r2, #2
 80022d6:	4013      	ands	r3, r2
 80022d8:	d000      	beq.n	80022dc <HAL_ADC_ConfigChannel+0xb4>
 80022da:	e089      	b.n	80023f0 <HAL_ADC_ConfigChannel+0x1c8>
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	2204      	movs	r2, #4
 80022e2:	4013      	ands	r3, r2
 80022e4:	d000      	beq.n	80022e8 <HAL_ADC_ConfigChannel+0xc0>
 80022e6:	e081      	b.n	80023ec <HAL_ADC_ConfigChannel+0x1c4>
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	2208      	movs	r2, #8
 80022ee:	4013      	ands	r3, r2
 80022f0:	d000      	beq.n	80022f4 <HAL_ADC_ConfigChannel+0xcc>
 80022f2:	e079      	b.n	80023e8 <HAL_ADC_ConfigChannel+0x1c0>
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	2210      	movs	r2, #16
 80022fa:	4013      	ands	r3, r2
 80022fc:	d000      	beq.n	8002300 <HAL_ADC_ConfigChannel+0xd8>
 80022fe:	e071      	b.n	80023e4 <HAL_ADC_ConfigChannel+0x1bc>
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	2220      	movs	r2, #32
 8002306:	4013      	ands	r3, r2
 8002308:	d000      	beq.n	800230c <HAL_ADC_ConfigChannel+0xe4>
 800230a:	e069      	b.n	80023e0 <HAL_ADC_ConfigChannel+0x1b8>
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	2240      	movs	r2, #64	@ 0x40
 8002312:	4013      	ands	r3, r2
 8002314:	d000      	beq.n	8002318 <HAL_ADC_ConfigChannel+0xf0>
 8002316:	e061      	b.n	80023dc <HAL_ADC_ConfigChannel+0x1b4>
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	2280      	movs	r2, #128	@ 0x80
 800231e:	4013      	ands	r3, r2
 8002320:	d000      	beq.n	8002324 <HAL_ADC_ConfigChannel+0xfc>
 8002322:	e059      	b.n	80023d8 <HAL_ADC_ConfigChannel+0x1b0>
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	681a      	ldr	r2, [r3, #0]
 8002328:	2380      	movs	r3, #128	@ 0x80
 800232a:	005b      	lsls	r3, r3, #1
 800232c:	4013      	ands	r3, r2
 800232e:	d151      	bne.n	80023d4 <HAL_ADC_ConfigChannel+0x1ac>
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	681a      	ldr	r2, [r3, #0]
 8002334:	2380      	movs	r3, #128	@ 0x80
 8002336:	009b      	lsls	r3, r3, #2
 8002338:	4013      	ands	r3, r2
 800233a:	d149      	bne.n	80023d0 <HAL_ADC_ConfigChannel+0x1a8>
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	681a      	ldr	r2, [r3, #0]
 8002340:	2380      	movs	r3, #128	@ 0x80
 8002342:	00db      	lsls	r3, r3, #3
 8002344:	4013      	ands	r3, r2
 8002346:	d141      	bne.n	80023cc <HAL_ADC_ConfigChannel+0x1a4>
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	681a      	ldr	r2, [r3, #0]
 800234c:	2380      	movs	r3, #128	@ 0x80
 800234e:	011b      	lsls	r3, r3, #4
 8002350:	4013      	ands	r3, r2
 8002352:	d139      	bne.n	80023c8 <HAL_ADC_ConfigChannel+0x1a0>
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	681a      	ldr	r2, [r3, #0]
 8002358:	2380      	movs	r3, #128	@ 0x80
 800235a:	015b      	lsls	r3, r3, #5
 800235c:	4013      	ands	r3, r2
 800235e:	d131      	bne.n	80023c4 <HAL_ADC_ConfigChannel+0x19c>
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	681a      	ldr	r2, [r3, #0]
 8002364:	2380      	movs	r3, #128	@ 0x80
 8002366:	019b      	lsls	r3, r3, #6
 8002368:	4013      	ands	r3, r2
 800236a:	d129      	bne.n	80023c0 <HAL_ADC_ConfigChannel+0x198>
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	681a      	ldr	r2, [r3, #0]
 8002370:	2380      	movs	r3, #128	@ 0x80
 8002372:	01db      	lsls	r3, r3, #7
 8002374:	4013      	ands	r3, r2
 8002376:	d121      	bne.n	80023bc <HAL_ADC_ConfigChannel+0x194>
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	681a      	ldr	r2, [r3, #0]
 800237c:	2380      	movs	r3, #128	@ 0x80
 800237e:	021b      	lsls	r3, r3, #8
 8002380:	4013      	ands	r3, r2
 8002382:	d119      	bne.n	80023b8 <HAL_ADC_ConfigChannel+0x190>
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	681a      	ldr	r2, [r3, #0]
 8002388:	2380      	movs	r3, #128	@ 0x80
 800238a:	025b      	lsls	r3, r3, #9
 800238c:	4013      	ands	r3, r2
 800238e:	d111      	bne.n	80023b4 <HAL_ADC_ConfigChannel+0x18c>
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	681a      	ldr	r2, [r3, #0]
 8002394:	2380      	movs	r3, #128	@ 0x80
 8002396:	029b      	lsls	r3, r3, #10
 8002398:	4013      	ands	r3, r2
 800239a:	d109      	bne.n	80023b0 <HAL_ADC_ConfigChannel+0x188>
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	681a      	ldr	r2, [r3, #0]
 80023a0:	2380      	movs	r3, #128	@ 0x80
 80023a2:	02db      	lsls	r3, r3, #11
 80023a4:	4013      	ands	r3, r2
 80023a6:	d001      	beq.n	80023ac <HAL_ADC_ConfigChannel+0x184>
 80023a8:	2312      	movs	r3, #18
 80023aa:	e024      	b.n	80023f6 <HAL_ADC_ConfigChannel+0x1ce>
 80023ac:	2300      	movs	r3, #0
 80023ae:	e022      	b.n	80023f6 <HAL_ADC_ConfigChannel+0x1ce>
 80023b0:	2311      	movs	r3, #17
 80023b2:	e020      	b.n	80023f6 <HAL_ADC_ConfigChannel+0x1ce>
 80023b4:	2310      	movs	r3, #16
 80023b6:	e01e      	b.n	80023f6 <HAL_ADC_ConfigChannel+0x1ce>
 80023b8:	230f      	movs	r3, #15
 80023ba:	e01c      	b.n	80023f6 <HAL_ADC_ConfigChannel+0x1ce>
 80023bc:	230e      	movs	r3, #14
 80023be:	e01a      	b.n	80023f6 <HAL_ADC_ConfigChannel+0x1ce>
 80023c0:	230d      	movs	r3, #13
 80023c2:	e018      	b.n	80023f6 <HAL_ADC_ConfigChannel+0x1ce>
 80023c4:	230c      	movs	r3, #12
 80023c6:	e016      	b.n	80023f6 <HAL_ADC_ConfigChannel+0x1ce>
 80023c8:	230b      	movs	r3, #11
 80023ca:	e014      	b.n	80023f6 <HAL_ADC_ConfigChannel+0x1ce>
 80023cc:	230a      	movs	r3, #10
 80023ce:	e012      	b.n	80023f6 <HAL_ADC_ConfigChannel+0x1ce>
 80023d0:	2309      	movs	r3, #9
 80023d2:	e010      	b.n	80023f6 <HAL_ADC_ConfigChannel+0x1ce>
 80023d4:	2308      	movs	r3, #8
 80023d6:	e00e      	b.n	80023f6 <HAL_ADC_ConfigChannel+0x1ce>
 80023d8:	2307      	movs	r3, #7
 80023da:	e00c      	b.n	80023f6 <HAL_ADC_ConfigChannel+0x1ce>
 80023dc:	2306      	movs	r3, #6
 80023de:	e00a      	b.n	80023f6 <HAL_ADC_ConfigChannel+0x1ce>
 80023e0:	2305      	movs	r3, #5
 80023e2:	e008      	b.n	80023f6 <HAL_ADC_ConfigChannel+0x1ce>
 80023e4:	2304      	movs	r3, #4
 80023e6:	e006      	b.n	80023f6 <HAL_ADC_ConfigChannel+0x1ce>
 80023e8:	2303      	movs	r3, #3
 80023ea:	e004      	b.n	80023f6 <HAL_ADC_ConfigChannel+0x1ce>
 80023ec:	2302      	movs	r3, #2
 80023ee:	e002      	b.n	80023f6 <HAL_ADC_ConfigChannel+0x1ce>
 80023f0:	2301      	movs	r3, #1
 80023f2:	e000      	b.n	80023f6 <HAL_ADC_ConfigChannel+0x1ce>
 80023f4:	2300      	movs	r3, #0
 80023f6:	683a      	ldr	r2, [r7, #0]
 80023f8:	6852      	ldr	r2, [r2, #4]
 80023fa:	201f      	movs	r0, #31
 80023fc:	4002      	ands	r2, r0
 80023fe:	4093      	lsls	r3, r2
 8002400:	000a      	movs	r2, r1
 8002402:	431a      	orrs	r2, r3
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	089b      	lsrs	r3, r3, #2
 800240e:	1c5a      	adds	r2, r3, #1
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	69db      	ldr	r3, [r3, #28]
 8002414:	429a      	cmp	r2, r3
 8002416:	d808      	bhi.n	800242a <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6818      	ldr	r0, [r3, #0]
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	6859      	ldr	r1, [r3, #4]
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	001a      	movs	r2, r3
 8002426:	f7ff fb71 	bl	8001b0c <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6818      	ldr	r0, [r3, #0]
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	6819      	ldr	r1, [r3, #0]
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	689b      	ldr	r3, [r3, #8]
 8002436:	001a      	movs	r2, r3
 8002438:	f7ff fbb8 	bl	8001bac <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	2b00      	cmp	r3, #0
 8002442:	db00      	blt.n	8002446 <HAL_ADC_ConfigChannel+0x21e>
 8002444:	e0bc      	b.n	80025c0 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002446:	4b50      	ldr	r3, [pc, #320]	@ (8002588 <HAL_ADC_ConfigChannel+0x360>)
 8002448:	0018      	movs	r0, r3
 800244a:	f7ff fb0d 	bl	8001a68 <LL_ADC_GetCommonPathInternalCh>
 800244e:	0003      	movs	r3, r0
 8002450:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4a4d      	ldr	r2, [pc, #308]	@ (800258c <HAL_ADC_ConfigChannel+0x364>)
 8002458:	4293      	cmp	r3, r2
 800245a:	d122      	bne.n	80024a2 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800245c:	693a      	ldr	r2, [r7, #16]
 800245e:	2380      	movs	r3, #128	@ 0x80
 8002460:	041b      	lsls	r3, r3, #16
 8002462:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002464:	d11d      	bne.n	80024a2 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	2280      	movs	r2, #128	@ 0x80
 800246a:	0412      	lsls	r2, r2, #16
 800246c:	4313      	orrs	r3, r2
 800246e:	4a46      	ldr	r2, [pc, #280]	@ (8002588 <HAL_ADC_ConfigChannel+0x360>)
 8002470:	0019      	movs	r1, r3
 8002472:	0010      	movs	r0, r2
 8002474:	f7ff fae4 	bl	8001a40 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002478:	4b45      	ldr	r3, [pc, #276]	@ (8002590 <HAL_ADC_ConfigChannel+0x368>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4945      	ldr	r1, [pc, #276]	@ (8002594 <HAL_ADC_ConfigChannel+0x36c>)
 800247e:	0018      	movs	r0, r3
 8002480:	f7fd fe9a 	bl	80001b8 <__udivsi3>
 8002484:	0003      	movs	r3, r0
 8002486:	1c5a      	adds	r2, r3, #1
 8002488:	0013      	movs	r3, r2
 800248a:	005b      	lsls	r3, r3, #1
 800248c:	189b      	adds	r3, r3, r2
 800248e:	009b      	lsls	r3, r3, #2
 8002490:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002492:	e002      	b.n	800249a <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	3b01      	subs	r3, #1
 8002498:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d1f9      	bne.n	8002494 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80024a0:	e08e      	b.n	80025c0 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a3c      	ldr	r2, [pc, #240]	@ (8002598 <HAL_ADC_ConfigChannel+0x370>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d10e      	bne.n	80024ca <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80024ac:	693a      	ldr	r2, [r7, #16]
 80024ae:	2380      	movs	r3, #128	@ 0x80
 80024b0:	045b      	lsls	r3, r3, #17
 80024b2:	4013      	ands	r3, r2
 80024b4:	d109      	bne.n	80024ca <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	2280      	movs	r2, #128	@ 0x80
 80024ba:	0452      	lsls	r2, r2, #17
 80024bc:	4313      	orrs	r3, r2
 80024be:	4a32      	ldr	r2, [pc, #200]	@ (8002588 <HAL_ADC_ConfigChannel+0x360>)
 80024c0:	0019      	movs	r1, r3
 80024c2:	0010      	movs	r0, r2
 80024c4:	f7ff fabc 	bl	8001a40 <LL_ADC_SetCommonPathInternalCh>
 80024c8:	e07a      	b.n	80025c0 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a33      	ldr	r2, [pc, #204]	@ (800259c <HAL_ADC_ConfigChannel+0x374>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d000      	beq.n	80024d6 <HAL_ADC_ConfigChannel+0x2ae>
 80024d4:	e074      	b.n	80025c0 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80024d6:	693a      	ldr	r2, [r7, #16]
 80024d8:	2380      	movs	r3, #128	@ 0x80
 80024da:	03db      	lsls	r3, r3, #15
 80024dc:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80024de:	d000      	beq.n	80024e2 <HAL_ADC_ConfigChannel+0x2ba>
 80024e0:	e06e      	b.n	80025c0 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	2280      	movs	r2, #128	@ 0x80
 80024e6:	03d2      	lsls	r2, r2, #15
 80024e8:	4313      	orrs	r3, r2
 80024ea:	4a27      	ldr	r2, [pc, #156]	@ (8002588 <HAL_ADC_ConfigChannel+0x360>)
 80024ec:	0019      	movs	r1, r3
 80024ee:	0010      	movs	r0, r2
 80024f0:	f7ff faa6 	bl	8001a40 <LL_ADC_SetCommonPathInternalCh>
 80024f4:	e064      	b.n	80025c0 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	691a      	ldr	r2, [r3, #16]
 80024fa:	2380      	movs	r3, #128	@ 0x80
 80024fc:	061b      	lsls	r3, r3, #24
 80024fe:	429a      	cmp	r2, r3
 8002500:	d004      	beq.n	800250c <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002506:	4a1f      	ldr	r2, [pc, #124]	@ (8002584 <HAL_ADC_ConfigChannel+0x35c>)
 8002508:	4293      	cmp	r3, r2
 800250a:	d107      	bne.n	800251c <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681a      	ldr	r2, [r3, #0]
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	0019      	movs	r1, r3
 8002516:	0010      	movs	r0, r2
 8002518:	f7ff fb29 	bl	8001b6e <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	2b00      	cmp	r3, #0
 8002522:	da4d      	bge.n	80025c0 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002524:	4b18      	ldr	r3, [pc, #96]	@ (8002588 <HAL_ADC_ConfigChannel+0x360>)
 8002526:	0018      	movs	r0, r3
 8002528:	f7ff fa9e 	bl	8001a68 <LL_ADC_GetCommonPathInternalCh>
 800252c:	0003      	movs	r3, r0
 800252e:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a15      	ldr	r2, [pc, #84]	@ (800258c <HAL_ADC_ConfigChannel+0x364>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d108      	bne.n	800254c <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	4a18      	ldr	r2, [pc, #96]	@ (80025a0 <HAL_ADC_ConfigChannel+0x378>)
 800253e:	4013      	ands	r3, r2
 8002540:	4a11      	ldr	r2, [pc, #68]	@ (8002588 <HAL_ADC_ConfigChannel+0x360>)
 8002542:	0019      	movs	r1, r3
 8002544:	0010      	movs	r0, r2
 8002546:	f7ff fa7b 	bl	8001a40 <LL_ADC_SetCommonPathInternalCh>
 800254a:	e039      	b.n	80025c0 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a11      	ldr	r2, [pc, #68]	@ (8002598 <HAL_ADC_ConfigChannel+0x370>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d108      	bne.n	8002568 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	4a12      	ldr	r2, [pc, #72]	@ (80025a4 <HAL_ADC_ConfigChannel+0x37c>)
 800255a:	4013      	ands	r3, r2
 800255c:	4a0a      	ldr	r2, [pc, #40]	@ (8002588 <HAL_ADC_ConfigChannel+0x360>)
 800255e:	0019      	movs	r1, r3
 8002560:	0010      	movs	r0, r2
 8002562:	f7ff fa6d 	bl	8001a40 <LL_ADC_SetCommonPathInternalCh>
 8002566:	e02b      	b.n	80025c0 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a0b      	ldr	r2, [pc, #44]	@ (800259c <HAL_ADC_ConfigChannel+0x374>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d126      	bne.n	80025c0 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002572:	693b      	ldr	r3, [r7, #16]
 8002574:	4a0c      	ldr	r2, [pc, #48]	@ (80025a8 <HAL_ADC_ConfigChannel+0x380>)
 8002576:	4013      	ands	r3, r2
 8002578:	4a03      	ldr	r2, [pc, #12]	@ (8002588 <HAL_ADC_ConfigChannel+0x360>)
 800257a:	0019      	movs	r1, r3
 800257c:	0010      	movs	r0, r2
 800257e:	f7ff fa5f 	bl	8001a40 <LL_ADC_SetCommonPathInternalCh>
 8002582:	e01d      	b.n	80025c0 <HAL_ADC_ConfigChannel+0x398>
 8002584:	80000004 	.word	0x80000004
 8002588:	40012708 	.word	0x40012708
 800258c:	b0001000 	.word	0xb0001000
 8002590:	20000018 	.word	0x20000018
 8002594:	00030d40 	.word	0x00030d40
 8002598:	b8004000 	.word	0xb8004000
 800259c:	b4002000 	.word	0xb4002000
 80025a0:	ff7fffff 	.word	0xff7fffff
 80025a4:	feffffff 	.word	0xfeffffff
 80025a8:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025b0:	2220      	movs	r2, #32
 80025b2:	431a      	orrs	r2, r3
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80025b8:	2317      	movs	r3, #23
 80025ba:	18fb      	adds	r3, r7, r3
 80025bc:	2201      	movs	r2, #1
 80025be:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2254      	movs	r2, #84	@ 0x54
 80025c4:	2100      	movs	r1, #0
 80025c6:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 80025c8:	2317      	movs	r3, #23
 80025ca:	18fb      	adds	r3, r7, r3
 80025cc:	781b      	ldrb	r3, [r3, #0]
}
 80025ce:	0018      	movs	r0, r3
 80025d0:	46bd      	mov	sp, r7
 80025d2:	b006      	add	sp, #24
 80025d4:	bd80      	pop	{r7, pc}
 80025d6:	46c0      	nop			@ (mov r8, r8)

080025d8 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b082      	sub	sp, #8
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80025e0:	46c0      	nop			@ (mov r8, r8)
 80025e2:	46bd      	mov	sp, r7
 80025e4:	b002      	add	sp, #8
 80025e6:	bd80      	pop	{r7, pc}

080025e8 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b082      	sub	sp, #8
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80025f0:	46c0      	nop			@ (mov r8, r8)
 80025f2:	46bd      	mov	sp, r7
 80025f4:	b002      	add	sp, #8
 80025f6:	bd80      	pop	{r7, pc}

080025f8 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b082      	sub	sp, #8
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8002600:	46c0      	nop			@ (mov r8, r8)
 8002602:	46bd      	mov	sp, r7
 8002604:	b002      	add	sp, #8
 8002606:	bd80      	pop	{r7, pc}

08002608 <HAL_ADCEx_ChannelConfigReadyCallback>:
  * @brief  ADC channel configuration ready callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_ChannelConfigReadyCallback(ADC_HandleTypeDef *hadc)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b082      	sub	sp, #8
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_ChannelConfigReadyCallback must be implemented in the user file.
  */
}
 8002610:	46c0      	nop			@ (mov r8, r8)
 8002612:	46bd      	mov	sp, r7
 8002614:	b002      	add	sp, #8
 8002616:	bd80      	pop	{r7, pc}

08002618 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b082      	sub	sp, #8
 800261c:	af00      	add	r7, sp, #0
 800261e:	0002      	movs	r2, r0
 8002620:	1dfb      	adds	r3, r7, #7
 8002622:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002624:	1dfb      	adds	r3, r7, #7
 8002626:	781b      	ldrb	r3, [r3, #0]
 8002628:	2b7f      	cmp	r3, #127	@ 0x7f
 800262a:	d809      	bhi.n	8002640 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800262c:	1dfb      	adds	r3, r7, #7
 800262e:	781b      	ldrb	r3, [r3, #0]
 8002630:	001a      	movs	r2, r3
 8002632:	231f      	movs	r3, #31
 8002634:	401a      	ands	r2, r3
 8002636:	4b04      	ldr	r3, [pc, #16]	@ (8002648 <__NVIC_EnableIRQ+0x30>)
 8002638:	2101      	movs	r1, #1
 800263a:	4091      	lsls	r1, r2
 800263c:	000a      	movs	r2, r1
 800263e:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8002640:	46c0      	nop			@ (mov r8, r8)
 8002642:	46bd      	mov	sp, r7
 8002644:	b002      	add	sp, #8
 8002646:	bd80      	pop	{r7, pc}
 8002648:	e000e100 	.word	0xe000e100

0800264c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800264c:	b590      	push	{r4, r7, lr}
 800264e:	b083      	sub	sp, #12
 8002650:	af00      	add	r7, sp, #0
 8002652:	0002      	movs	r2, r0
 8002654:	6039      	str	r1, [r7, #0]
 8002656:	1dfb      	adds	r3, r7, #7
 8002658:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800265a:	1dfb      	adds	r3, r7, #7
 800265c:	781b      	ldrb	r3, [r3, #0]
 800265e:	2b7f      	cmp	r3, #127	@ 0x7f
 8002660:	d828      	bhi.n	80026b4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002662:	4a2f      	ldr	r2, [pc, #188]	@ (8002720 <__NVIC_SetPriority+0xd4>)
 8002664:	1dfb      	adds	r3, r7, #7
 8002666:	781b      	ldrb	r3, [r3, #0]
 8002668:	b25b      	sxtb	r3, r3
 800266a:	089b      	lsrs	r3, r3, #2
 800266c:	33c0      	adds	r3, #192	@ 0xc0
 800266e:	009b      	lsls	r3, r3, #2
 8002670:	589b      	ldr	r3, [r3, r2]
 8002672:	1dfa      	adds	r2, r7, #7
 8002674:	7812      	ldrb	r2, [r2, #0]
 8002676:	0011      	movs	r1, r2
 8002678:	2203      	movs	r2, #3
 800267a:	400a      	ands	r2, r1
 800267c:	00d2      	lsls	r2, r2, #3
 800267e:	21ff      	movs	r1, #255	@ 0xff
 8002680:	4091      	lsls	r1, r2
 8002682:	000a      	movs	r2, r1
 8002684:	43d2      	mvns	r2, r2
 8002686:	401a      	ands	r2, r3
 8002688:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	019b      	lsls	r3, r3, #6
 800268e:	22ff      	movs	r2, #255	@ 0xff
 8002690:	401a      	ands	r2, r3
 8002692:	1dfb      	adds	r3, r7, #7
 8002694:	781b      	ldrb	r3, [r3, #0]
 8002696:	0018      	movs	r0, r3
 8002698:	2303      	movs	r3, #3
 800269a:	4003      	ands	r3, r0
 800269c:	00db      	lsls	r3, r3, #3
 800269e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80026a0:	481f      	ldr	r0, [pc, #124]	@ (8002720 <__NVIC_SetPriority+0xd4>)
 80026a2:	1dfb      	adds	r3, r7, #7
 80026a4:	781b      	ldrb	r3, [r3, #0]
 80026a6:	b25b      	sxtb	r3, r3
 80026a8:	089b      	lsrs	r3, r3, #2
 80026aa:	430a      	orrs	r2, r1
 80026ac:	33c0      	adds	r3, #192	@ 0xc0
 80026ae:	009b      	lsls	r3, r3, #2
 80026b0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80026b2:	e031      	b.n	8002718 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80026b4:	4a1b      	ldr	r2, [pc, #108]	@ (8002724 <__NVIC_SetPriority+0xd8>)
 80026b6:	1dfb      	adds	r3, r7, #7
 80026b8:	781b      	ldrb	r3, [r3, #0]
 80026ba:	0019      	movs	r1, r3
 80026bc:	230f      	movs	r3, #15
 80026be:	400b      	ands	r3, r1
 80026c0:	3b08      	subs	r3, #8
 80026c2:	089b      	lsrs	r3, r3, #2
 80026c4:	3306      	adds	r3, #6
 80026c6:	009b      	lsls	r3, r3, #2
 80026c8:	18d3      	adds	r3, r2, r3
 80026ca:	3304      	adds	r3, #4
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	1dfa      	adds	r2, r7, #7
 80026d0:	7812      	ldrb	r2, [r2, #0]
 80026d2:	0011      	movs	r1, r2
 80026d4:	2203      	movs	r2, #3
 80026d6:	400a      	ands	r2, r1
 80026d8:	00d2      	lsls	r2, r2, #3
 80026da:	21ff      	movs	r1, #255	@ 0xff
 80026dc:	4091      	lsls	r1, r2
 80026de:	000a      	movs	r2, r1
 80026e0:	43d2      	mvns	r2, r2
 80026e2:	401a      	ands	r2, r3
 80026e4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	019b      	lsls	r3, r3, #6
 80026ea:	22ff      	movs	r2, #255	@ 0xff
 80026ec:	401a      	ands	r2, r3
 80026ee:	1dfb      	adds	r3, r7, #7
 80026f0:	781b      	ldrb	r3, [r3, #0]
 80026f2:	0018      	movs	r0, r3
 80026f4:	2303      	movs	r3, #3
 80026f6:	4003      	ands	r3, r0
 80026f8:	00db      	lsls	r3, r3, #3
 80026fa:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80026fc:	4809      	ldr	r0, [pc, #36]	@ (8002724 <__NVIC_SetPriority+0xd8>)
 80026fe:	1dfb      	adds	r3, r7, #7
 8002700:	781b      	ldrb	r3, [r3, #0]
 8002702:	001c      	movs	r4, r3
 8002704:	230f      	movs	r3, #15
 8002706:	4023      	ands	r3, r4
 8002708:	3b08      	subs	r3, #8
 800270a:	089b      	lsrs	r3, r3, #2
 800270c:	430a      	orrs	r2, r1
 800270e:	3306      	adds	r3, #6
 8002710:	009b      	lsls	r3, r3, #2
 8002712:	18c3      	adds	r3, r0, r3
 8002714:	3304      	adds	r3, #4
 8002716:	601a      	str	r2, [r3, #0]
}
 8002718:	46c0      	nop			@ (mov r8, r8)
 800271a:	46bd      	mov	sp, r7
 800271c:	b003      	add	sp, #12
 800271e:	bd90      	pop	{r4, r7, pc}
 8002720:	e000e100 	.word	0xe000e100
 8002724:	e000ed00 	.word	0xe000ed00

08002728 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b082      	sub	sp, #8
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	1e5a      	subs	r2, r3, #1
 8002734:	2380      	movs	r3, #128	@ 0x80
 8002736:	045b      	lsls	r3, r3, #17
 8002738:	429a      	cmp	r2, r3
 800273a:	d301      	bcc.n	8002740 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800273c:	2301      	movs	r3, #1
 800273e:	e010      	b.n	8002762 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002740:	4b0a      	ldr	r3, [pc, #40]	@ (800276c <SysTick_Config+0x44>)
 8002742:	687a      	ldr	r2, [r7, #4]
 8002744:	3a01      	subs	r2, #1
 8002746:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002748:	2301      	movs	r3, #1
 800274a:	425b      	negs	r3, r3
 800274c:	2103      	movs	r1, #3
 800274e:	0018      	movs	r0, r3
 8002750:	f7ff ff7c 	bl	800264c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002754:	4b05      	ldr	r3, [pc, #20]	@ (800276c <SysTick_Config+0x44>)
 8002756:	2200      	movs	r2, #0
 8002758:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800275a:	4b04      	ldr	r3, [pc, #16]	@ (800276c <SysTick_Config+0x44>)
 800275c:	2207      	movs	r2, #7
 800275e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002760:	2300      	movs	r3, #0
}
 8002762:	0018      	movs	r0, r3
 8002764:	46bd      	mov	sp, r7
 8002766:	b002      	add	sp, #8
 8002768:	bd80      	pop	{r7, pc}
 800276a:	46c0      	nop			@ (mov r8, r8)
 800276c:	e000e010 	.word	0xe000e010

08002770 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b084      	sub	sp, #16
 8002774:	af00      	add	r7, sp, #0
 8002776:	60b9      	str	r1, [r7, #8]
 8002778:	607a      	str	r2, [r7, #4]
 800277a:	210f      	movs	r1, #15
 800277c:	187b      	adds	r3, r7, r1
 800277e:	1c02      	adds	r2, r0, #0
 8002780:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8002782:	68ba      	ldr	r2, [r7, #8]
 8002784:	187b      	adds	r3, r7, r1
 8002786:	781b      	ldrb	r3, [r3, #0]
 8002788:	b25b      	sxtb	r3, r3
 800278a:	0011      	movs	r1, r2
 800278c:	0018      	movs	r0, r3
 800278e:	f7ff ff5d 	bl	800264c <__NVIC_SetPriority>
}
 8002792:	46c0      	nop			@ (mov r8, r8)
 8002794:	46bd      	mov	sp, r7
 8002796:	b004      	add	sp, #16
 8002798:	bd80      	pop	{r7, pc}

0800279a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800279a:	b580      	push	{r7, lr}
 800279c:	b082      	sub	sp, #8
 800279e:	af00      	add	r7, sp, #0
 80027a0:	0002      	movs	r2, r0
 80027a2:	1dfb      	adds	r3, r7, #7
 80027a4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027a6:	1dfb      	adds	r3, r7, #7
 80027a8:	781b      	ldrb	r3, [r3, #0]
 80027aa:	b25b      	sxtb	r3, r3
 80027ac:	0018      	movs	r0, r3
 80027ae:	f7ff ff33 	bl	8002618 <__NVIC_EnableIRQ>
}
 80027b2:	46c0      	nop			@ (mov r8, r8)
 80027b4:	46bd      	mov	sp, r7
 80027b6:	b002      	add	sp, #8
 80027b8:	bd80      	pop	{r7, pc}

080027ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027ba:	b580      	push	{r7, lr}
 80027bc:	b082      	sub	sp, #8
 80027be:	af00      	add	r7, sp, #0
 80027c0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	0018      	movs	r0, r3
 80027c6:	f7ff ffaf 	bl	8002728 <SysTick_Config>
 80027ca:	0003      	movs	r3, r0
}
 80027cc:	0018      	movs	r0, r3
 80027ce:	46bd      	mov	sp, r7
 80027d0:	b002      	add	sp, #8
 80027d2:	bd80      	pop	{r7, pc}

080027d4 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b082      	sub	sp, #8
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d101      	bne.n	80027e6 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	e050      	b.n	8002888 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2225      	movs	r2, #37	@ 0x25
 80027ea:	5c9b      	ldrb	r3, [r3, r2]
 80027ec:	b2db      	uxtb	r3, r3
 80027ee:	2b02      	cmp	r3, #2
 80027f0:	d008      	beq.n	8002804 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2204      	movs	r2, #4
 80027f6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2224      	movs	r2, #36	@ 0x24
 80027fc:	2100      	movs	r1, #0
 80027fe:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8002800:	2301      	movs	r3, #1
 8002802:	e041      	b.n	8002888 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	681a      	ldr	r2, [r3, #0]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	210e      	movs	r1, #14
 8002810:	438a      	bics	r2, r1
 8002812:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002818:	681a      	ldr	r2, [r3, #0]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800281e:	491c      	ldr	r1, [pc, #112]	@ (8002890 <HAL_DMA_Abort+0xbc>)
 8002820:	400a      	ands	r2, r1
 8002822:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	681a      	ldr	r2, [r3, #0]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	2101      	movs	r1, #1
 8002830:	438a      	bics	r2, r1
 8002832:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 8002834:	4b17      	ldr	r3, [pc, #92]	@ (8002894 <HAL_DMA_Abort+0xc0>)
 8002836:	6859      	ldr	r1, [r3, #4]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800283c:	221c      	movs	r2, #28
 800283e:	4013      	ands	r3, r2
 8002840:	2201      	movs	r2, #1
 8002842:	409a      	lsls	r2, r3
 8002844:	4b13      	ldr	r3, [pc, #76]	@ (8002894 <HAL_DMA_Abort+0xc0>)
 8002846:	430a      	orrs	r2, r1
 8002848:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800284e:	687a      	ldr	r2, [r7, #4]
 8002850:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002852:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002858:	2b00      	cmp	r3, #0
 800285a:	d00c      	beq.n	8002876 <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002860:	681a      	ldr	r2, [r3, #0]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002866:	490a      	ldr	r1, [pc, #40]	@ (8002890 <HAL_DMA_Abort+0xbc>)
 8002868:	400a      	ands	r2, r1
 800286a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002870:	687a      	ldr	r2, [r7, #4]
 8002872:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8002874:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2225      	movs	r2, #37	@ 0x25
 800287a:	2101      	movs	r1, #1
 800287c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2224      	movs	r2, #36	@ 0x24
 8002882:	2100      	movs	r1, #0
 8002884:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8002886:	2300      	movs	r3, #0
}
 8002888:	0018      	movs	r0, r3
 800288a:	46bd      	mov	sp, r7
 800288c:	b002      	add	sp, #8
 800288e:	bd80      	pop	{r7, pc}
 8002890:	fffffeff 	.word	0xfffffeff
 8002894:	40020000 	.word	0x40020000

08002898 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b084      	sub	sp, #16
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80028a0:	210f      	movs	r1, #15
 80028a2:	187b      	adds	r3, r7, r1
 80028a4:	2200      	movs	r2, #0
 80028a6:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2225      	movs	r2, #37	@ 0x25
 80028ac:	5c9b      	ldrb	r3, [r3, r2]
 80028ae:	b2db      	uxtb	r3, r3
 80028b0:	2b02      	cmp	r3, #2
 80028b2:	d006      	beq.n	80028c2 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2204      	movs	r2, #4
 80028b8:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80028ba:	187b      	adds	r3, r7, r1
 80028bc:	2201      	movs	r2, #1
 80028be:	701a      	strb	r2, [r3, #0]
 80028c0:	e049      	b.n	8002956 <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	681a      	ldr	r2, [r3, #0]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	210e      	movs	r1, #14
 80028ce:	438a      	bics	r2, r1
 80028d0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	681a      	ldr	r2, [r3, #0]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	2101      	movs	r1, #1
 80028de:	438a      	bics	r2, r1
 80028e0:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028e6:	681a      	ldr	r2, [r3, #0]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028ec:	491d      	ldr	r1, [pc, #116]	@ (8002964 <HAL_DMA_Abort_IT+0xcc>)
 80028ee:	400a      	ands	r2, r1
 80028f0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 80028f2:	4b1d      	ldr	r3, [pc, #116]	@ (8002968 <HAL_DMA_Abort_IT+0xd0>)
 80028f4:	6859      	ldr	r1, [r3, #4]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028fa:	221c      	movs	r2, #28
 80028fc:	4013      	ands	r3, r2
 80028fe:	2201      	movs	r2, #1
 8002900:	409a      	lsls	r2, r3
 8002902:	4b19      	ldr	r3, [pc, #100]	@ (8002968 <HAL_DMA_Abort_IT+0xd0>)
 8002904:	430a      	orrs	r2, r1
 8002906:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800290c:	687a      	ldr	r2, [r7, #4]
 800290e:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002910:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002916:	2b00      	cmp	r3, #0
 8002918:	d00c      	beq.n	8002934 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800291e:	681a      	ldr	r2, [r3, #0]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002924:	490f      	ldr	r1, [pc, #60]	@ (8002964 <HAL_DMA_Abort_IT+0xcc>)
 8002926:	400a      	ands	r2, r1
 8002928:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800292e:	687a      	ldr	r2, [r7, #4]
 8002930:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8002932:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2225      	movs	r2, #37	@ 0x25
 8002938:	2101      	movs	r1, #1
 800293a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2224      	movs	r2, #36	@ 0x24
 8002940:	2100      	movs	r1, #0
 8002942:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002948:	2b00      	cmp	r3, #0
 800294a:	d004      	beq.n	8002956 <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002950:	687a      	ldr	r2, [r7, #4]
 8002952:	0010      	movs	r0, r2
 8002954:	4798      	blx	r3
    }
  }
  return status;
 8002956:	230f      	movs	r3, #15
 8002958:	18fb      	adds	r3, r7, r3
 800295a:	781b      	ldrb	r3, [r3, #0]
}
 800295c:	0018      	movs	r0, r3
 800295e:	46bd      	mov	sp, r7
 8002960:	b004      	add	sp, #16
 8002962:	bd80      	pop	{r7, pc}
 8002964:	fffffeff 	.word	0xfffffeff
 8002968:	40020000 	.word	0x40020000

0800296c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b086      	sub	sp, #24
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
 8002974:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002976:	2300      	movs	r3, #0
 8002978:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800297a:	e147      	b.n	8002c0c <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	2101      	movs	r1, #1
 8002982:	697a      	ldr	r2, [r7, #20]
 8002984:	4091      	lsls	r1, r2
 8002986:	000a      	movs	r2, r1
 8002988:	4013      	ands	r3, r2
 800298a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d100      	bne.n	8002994 <HAL_GPIO_Init+0x28>
 8002992:	e138      	b.n	8002c06 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	2203      	movs	r2, #3
 800299a:	4013      	ands	r3, r2
 800299c:	2b01      	cmp	r3, #1
 800299e:	d005      	beq.n	80029ac <HAL_GPIO_Init+0x40>
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	2203      	movs	r2, #3
 80029a6:	4013      	ands	r3, r2
 80029a8:	2b02      	cmp	r3, #2
 80029aa:	d130      	bne.n	8002a0e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	005b      	lsls	r3, r3, #1
 80029b6:	2203      	movs	r2, #3
 80029b8:	409a      	lsls	r2, r3
 80029ba:	0013      	movs	r3, r2
 80029bc:	43da      	mvns	r2, r3
 80029be:	693b      	ldr	r3, [r7, #16]
 80029c0:	4013      	ands	r3, r2
 80029c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	68da      	ldr	r2, [r3, #12]
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	005b      	lsls	r3, r3, #1
 80029cc:	409a      	lsls	r2, r3
 80029ce:	0013      	movs	r3, r2
 80029d0:	693a      	ldr	r2, [r7, #16]
 80029d2:	4313      	orrs	r3, r2
 80029d4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	693a      	ldr	r2, [r7, #16]
 80029da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80029e2:	2201      	movs	r2, #1
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	409a      	lsls	r2, r3
 80029e8:	0013      	movs	r3, r2
 80029ea:	43da      	mvns	r2, r3
 80029ec:	693b      	ldr	r3, [r7, #16]
 80029ee:	4013      	ands	r3, r2
 80029f0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	091b      	lsrs	r3, r3, #4
 80029f8:	2201      	movs	r2, #1
 80029fa:	401a      	ands	r2, r3
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	409a      	lsls	r2, r3
 8002a00:	0013      	movs	r3, r2
 8002a02:	693a      	ldr	r2, [r7, #16]
 8002a04:	4313      	orrs	r3, r2
 8002a06:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	693a      	ldr	r2, [r7, #16]
 8002a0c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	2203      	movs	r2, #3
 8002a14:	4013      	ands	r3, r2
 8002a16:	2b03      	cmp	r3, #3
 8002a18:	d017      	beq.n	8002a4a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	68db      	ldr	r3, [r3, #12]
 8002a1e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	005b      	lsls	r3, r3, #1
 8002a24:	2203      	movs	r2, #3
 8002a26:	409a      	lsls	r2, r3
 8002a28:	0013      	movs	r3, r2
 8002a2a:	43da      	mvns	r2, r3
 8002a2c:	693b      	ldr	r3, [r7, #16]
 8002a2e:	4013      	ands	r3, r2
 8002a30:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	689a      	ldr	r2, [r3, #8]
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	005b      	lsls	r3, r3, #1
 8002a3a:	409a      	lsls	r2, r3
 8002a3c:	0013      	movs	r3, r2
 8002a3e:	693a      	ldr	r2, [r7, #16]
 8002a40:	4313      	orrs	r3, r2
 8002a42:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	693a      	ldr	r2, [r7, #16]
 8002a48:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	2203      	movs	r2, #3
 8002a50:	4013      	ands	r3, r2
 8002a52:	2b02      	cmp	r3, #2
 8002a54:	d123      	bne.n	8002a9e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002a56:	697b      	ldr	r3, [r7, #20]
 8002a58:	08da      	lsrs	r2, r3, #3
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	3208      	adds	r2, #8
 8002a5e:	0092      	lsls	r2, r2, #2
 8002a60:	58d3      	ldr	r3, [r2, r3]
 8002a62:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	2207      	movs	r2, #7
 8002a68:	4013      	ands	r3, r2
 8002a6a:	009b      	lsls	r3, r3, #2
 8002a6c:	220f      	movs	r2, #15
 8002a6e:	409a      	lsls	r2, r3
 8002a70:	0013      	movs	r3, r2
 8002a72:	43da      	mvns	r2, r3
 8002a74:	693b      	ldr	r3, [r7, #16]
 8002a76:	4013      	ands	r3, r2
 8002a78:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	691a      	ldr	r2, [r3, #16]
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	2107      	movs	r1, #7
 8002a82:	400b      	ands	r3, r1
 8002a84:	009b      	lsls	r3, r3, #2
 8002a86:	409a      	lsls	r2, r3
 8002a88:	0013      	movs	r3, r2
 8002a8a:	693a      	ldr	r2, [r7, #16]
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002a90:	697b      	ldr	r3, [r7, #20]
 8002a92:	08da      	lsrs	r2, r3, #3
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	3208      	adds	r2, #8
 8002a98:	0092      	lsls	r2, r2, #2
 8002a9a:	6939      	ldr	r1, [r7, #16]
 8002a9c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	005b      	lsls	r3, r3, #1
 8002aa8:	2203      	movs	r2, #3
 8002aaa:	409a      	lsls	r2, r3
 8002aac:	0013      	movs	r3, r2
 8002aae:	43da      	mvns	r2, r3
 8002ab0:	693b      	ldr	r3, [r7, #16]
 8002ab2:	4013      	ands	r3, r2
 8002ab4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	2203      	movs	r2, #3
 8002abc:	401a      	ands	r2, r3
 8002abe:	697b      	ldr	r3, [r7, #20]
 8002ac0:	005b      	lsls	r3, r3, #1
 8002ac2:	409a      	lsls	r2, r3
 8002ac4:	0013      	movs	r3, r2
 8002ac6:	693a      	ldr	r2, [r7, #16]
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	693a      	ldr	r2, [r7, #16]
 8002ad0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	685a      	ldr	r2, [r3, #4]
 8002ad6:	23c0      	movs	r3, #192	@ 0xc0
 8002ad8:	029b      	lsls	r3, r3, #10
 8002ada:	4013      	ands	r3, r2
 8002adc:	d100      	bne.n	8002ae0 <HAL_GPIO_Init+0x174>
 8002ade:	e092      	b.n	8002c06 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8002ae0:	4a50      	ldr	r2, [pc, #320]	@ (8002c24 <HAL_GPIO_Init+0x2b8>)
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	089b      	lsrs	r3, r3, #2
 8002ae6:	3318      	adds	r3, #24
 8002ae8:	009b      	lsls	r3, r3, #2
 8002aea:	589b      	ldr	r3, [r3, r2]
 8002aec:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	2203      	movs	r2, #3
 8002af2:	4013      	ands	r3, r2
 8002af4:	00db      	lsls	r3, r3, #3
 8002af6:	220f      	movs	r2, #15
 8002af8:	409a      	lsls	r2, r3
 8002afa:	0013      	movs	r3, r2
 8002afc:	43da      	mvns	r2, r3
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	4013      	ands	r3, r2
 8002b02:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8002b04:	687a      	ldr	r2, [r7, #4]
 8002b06:	23a0      	movs	r3, #160	@ 0xa0
 8002b08:	05db      	lsls	r3, r3, #23
 8002b0a:	429a      	cmp	r2, r3
 8002b0c:	d013      	beq.n	8002b36 <HAL_GPIO_Init+0x1ca>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	4a45      	ldr	r2, [pc, #276]	@ (8002c28 <HAL_GPIO_Init+0x2bc>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d00d      	beq.n	8002b32 <HAL_GPIO_Init+0x1c6>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	4a44      	ldr	r2, [pc, #272]	@ (8002c2c <HAL_GPIO_Init+0x2c0>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d007      	beq.n	8002b2e <HAL_GPIO_Init+0x1c2>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	4a43      	ldr	r2, [pc, #268]	@ (8002c30 <HAL_GPIO_Init+0x2c4>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d101      	bne.n	8002b2a <HAL_GPIO_Init+0x1be>
 8002b26:	2303      	movs	r3, #3
 8002b28:	e006      	b.n	8002b38 <HAL_GPIO_Init+0x1cc>
 8002b2a:	2305      	movs	r3, #5
 8002b2c:	e004      	b.n	8002b38 <HAL_GPIO_Init+0x1cc>
 8002b2e:	2302      	movs	r3, #2
 8002b30:	e002      	b.n	8002b38 <HAL_GPIO_Init+0x1cc>
 8002b32:	2301      	movs	r3, #1
 8002b34:	e000      	b.n	8002b38 <HAL_GPIO_Init+0x1cc>
 8002b36:	2300      	movs	r3, #0
 8002b38:	697a      	ldr	r2, [r7, #20]
 8002b3a:	2103      	movs	r1, #3
 8002b3c:	400a      	ands	r2, r1
 8002b3e:	00d2      	lsls	r2, r2, #3
 8002b40:	4093      	lsls	r3, r2
 8002b42:	693a      	ldr	r2, [r7, #16]
 8002b44:	4313      	orrs	r3, r2
 8002b46:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8002b48:	4936      	ldr	r1, [pc, #216]	@ (8002c24 <HAL_GPIO_Init+0x2b8>)
 8002b4a:	697b      	ldr	r3, [r7, #20]
 8002b4c:	089b      	lsrs	r3, r3, #2
 8002b4e:	3318      	adds	r3, #24
 8002b50:	009b      	lsls	r3, r3, #2
 8002b52:	693a      	ldr	r2, [r7, #16]
 8002b54:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002b56:	4b33      	ldr	r3, [pc, #204]	@ (8002c24 <HAL_GPIO_Init+0x2b8>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	43da      	mvns	r2, r3
 8002b60:	693b      	ldr	r3, [r7, #16]
 8002b62:	4013      	ands	r3, r2
 8002b64:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	685a      	ldr	r2, [r3, #4]
 8002b6a:	2380      	movs	r3, #128	@ 0x80
 8002b6c:	035b      	lsls	r3, r3, #13
 8002b6e:	4013      	ands	r3, r2
 8002b70:	d003      	beq.n	8002b7a <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8002b72:	693a      	ldr	r2, [r7, #16]
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	4313      	orrs	r3, r2
 8002b78:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002b7a:	4b2a      	ldr	r3, [pc, #168]	@ (8002c24 <HAL_GPIO_Init+0x2b8>)
 8002b7c:	693a      	ldr	r2, [r7, #16]
 8002b7e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8002b80:	4b28      	ldr	r3, [pc, #160]	@ (8002c24 <HAL_GPIO_Init+0x2b8>)
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	43da      	mvns	r2, r3
 8002b8a:	693b      	ldr	r3, [r7, #16]
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	685a      	ldr	r2, [r3, #4]
 8002b94:	2380      	movs	r3, #128	@ 0x80
 8002b96:	039b      	lsls	r3, r3, #14
 8002b98:	4013      	ands	r3, r2
 8002b9a:	d003      	beq.n	8002ba4 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8002b9c:	693a      	ldr	r2, [r7, #16]
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002ba4:	4b1f      	ldr	r3, [pc, #124]	@ (8002c24 <HAL_GPIO_Init+0x2b8>)
 8002ba6:	693a      	ldr	r2, [r7, #16]
 8002ba8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002baa:	4a1e      	ldr	r2, [pc, #120]	@ (8002c24 <HAL_GPIO_Init+0x2b8>)
 8002bac:	2384      	movs	r3, #132	@ 0x84
 8002bae:	58d3      	ldr	r3, [r2, r3]
 8002bb0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	43da      	mvns	r2, r3
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	4013      	ands	r3, r2
 8002bba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	685a      	ldr	r2, [r3, #4]
 8002bc0:	2380      	movs	r3, #128	@ 0x80
 8002bc2:	029b      	lsls	r3, r3, #10
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	d003      	beq.n	8002bd0 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8002bc8:	693a      	ldr	r2, [r7, #16]
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002bd0:	4914      	ldr	r1, [pc, #80]	@ (8002c24 <HAL_GPIO_Init+0x2b8>)
 8002bd2:	2284      	movs	r2, #132	@ 0x84
 8002bd4:	693b      	ldr	r3, [r7, #16]
 8002bd6:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8002bd8:	4a12      	ldr	r2, [pc, #72]	@ (8002c24 <HAL_GPIO_Init+0x2b8>)
 8002bda:	2380      	movs	r3, #128	@ 0x80
 8002bdc:	58d3      	ldr	r3, [r2, r3]
 8002bde:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	43da      	mvns	r2, r3
 8002be4:	693b      	ldr	r3, [r7, #16]
 8002be6:	4013      	ands	r3, r2
 8002be8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	685a      	ldr	r2, [r3, #4]
 8002bee:	2380      	movs	r3, #128	@ 0x80
 8002bf0:	025b      	lsls	r3, r3, #9
 8002bf2:	4013      	ands	r3, r2
 8002bf4:	d003      	beq.n	8002bfe <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8002bf6:	693a      	ldr	r2, [r7, #16]
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002bfe:	4909      	ldr	r1, [pc, #36]	@ (8002c24 <HAL_GPIO_Init+0x2b8>)
 8002c00:	2280      	movs	r2, #128	@ 0x80
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	3301      	adds	r3, #1
 8002c0a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	681a      	ldr	r2, [r3, #0]
 8002c10:	697b      	ldr	r3, [r7, #20]
 8002c12:	40da      	lsrs	r2, r3
 8002c14:	1e13      	subs	r3, r2, #0
 8002c16:	d000      	beq.n	8002c1a <HAL_GPIO_Init+0x2ae>
 8002c18:	e6b0      	b.n	800297c <HAL_GPIO_Init+0x10>
  }
}
 8002c1a:	46c0      	nop			@ (mov r8, r8)
 8002c1c:	46c0      	nop			@ (mov r8, r8)
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	b006      	add	sp, #24
 8002c22:	bd80      	pop	{r7, pc}
 8002c24:	40021800 	.word	0x40021800
 8002c28:	50000400 	.word	0x50000400
 8002c2c:	50000800 	.word	0x50000800
 8002c30:	50000c00 	.word	0x50000c00

08002c34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b082      	sub	sp, #8
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
 8002c3c:	0008      	movs	r0, r1
 8002c3e:	0011      	movs	r1, r2
 8002c40:	1cbb      	adds	r3, r7, #2
 8002c42:	1c02      	adds	r2, r0, #0
 8002c44:	801a      	strh	r2, [r3, #0]
 8002c46:	1c7b      	adds	r3, r7, #1
 8002c48:	1c0a      	adds	r2, r1, #0
 8002c4a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002c4c:	1c7b      	adds	r3, r7, #1
 8002c4e:	781b      	ldrb	r3, [r3, #0]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d004      	beq.n	8002c5e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002c54:	1cbb      	adds	r3, r7, #2
 8002c56:	881a      	ldrh	r2, [r3, #0]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002c5c:	e003      	b.n	8002c66 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002c5e:	1cbb      	adds	r3, r7, #2
 8002c60:	881a      	ldrh	r2, [r3, #0]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002c66:	46c0      	nop			@ (mov r8, r8)
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	b002      	add	sp, #8
 8002c6c:	bd80      	pop	{r7, pc}
	...

08002c70 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b082      	sub	sp, #8
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d101      	bne.n	8002c82 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e08f      	b.n	8002da2 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2241      	movs	r2, #65	@ 0x41
 8002c86:	5c9b      	ldrb	r3, [r3, r2]
 8002c88:	b2db      	uxtb	r3, r3
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d107      	bne.n	8002c9e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2240      	movs	r2, #64	@ 0x40
 8002c92:	2100      	movs	r1, #0
 8002c94:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	0018      	movs	r0, r3
 8002c9a:	f7fe f8b1 	bl	8000e00 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2241      	movs	r2, #65	@ 0x41
 8002ca2:	2124      	movs	r1, #36	@ 0x24
 8002ca4:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	681a      	ldr	r2, [r3, #0]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	2101      	movs	r1, #1
 8002cb2:	438a      	bics	r2, r1
 8002cb4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	685a      	ldr	r2, [r3, #4]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	493b      	ldr	r1, [pc, #236]	@ (8002dac <HAL_I2C_Init+0x13c>)
 8002cc0:	400a      	ands	r2, r1
 8002cc2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	689a      	ldr	r2, [r3, #8]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4938      	ldr	r1, [pc, #224]	@ (8002db0 <HAL_I2C_Init+0x140>)
 8002cd0:	400a      	ands	r2, r1
 8002cd2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	68db      	ldr	r3, [r3, #12]
 8002cd8:	2b01      	cmp	r3, #1
 8002cda:	d108      	bne.n	8002cee <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	689a      	ldr	r2, [r3, #8]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	2180      	movs	r1, #128	@ 0x80
 8002ce6:	0209      	lsls	r1, r1, #8
 8002ce8:	430a      	orrs	r2, r1
 8002cea:	609a      	str	r2, [r3, #8]
 8002cec:	e007      	b.n	8002cfe <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	689a      	ldr	r2, [r3, #8]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	2184      	movs	r1, #132	@ 0x84
 8002cf8:	0209      	lsls	r1, r1, #8
 8002cfa:	430a      	orrs	r2, r1
 8002cfc:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	68db      	ldr	r3, [r3, #12]
 8002d02:	2b02      	cmp	r3, #2
 8002d04:	d109      	bne.n	8002d1a <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	685a      	ldr	r2, [r3, #4]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	2180      	movs	r1, #128	@ 0x80
 8002d12:	0109      	lsls	r1, r1, #4
 8002d14:	430a      	orrs	r2, r1
 8002d16:	605a      	str	r2, [r3, #4]
 8002d18:	e007      	b.n	8002d2a <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	685a      	ldr	r2, [r3, #4]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4923      	ldr	r1, [pc, #140]	@ (8002db4 <HAL_I2C_Init+0x144>)
 8002d26:	400a      	ands	r2, r1
 8002d28:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	685a      	ldr	r2, [r3, #4]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4920      	ldr	r1, [pc, #128]	@ (8002db8 <HAL_I2C_Init+0x148>)
 8002d36:	430a      	orrs	r2, r1
 8002d38:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	68da      	ldr	r2, [r3, #12]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	491a      	ldr	r1, [pc, #104]	@ (8002db0 <HAL_I2C_Init+0x140>)
 8002d46:	400a      	ands	r2, r1
 8002d48:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	691a      	ldr	r2, [r3, #16]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	695b      	ldr	r3, [r3, #20]
 8002d52:	431a      	orrs	r2, r3
 8002d54:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	699b      	ldr	r3, [r3, #24]
 8002d5a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	430a      	orrs	r2, r1
 8002d62:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	69d9      	ldr	r1, [r3, #28]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6a1a      	ldr	r2, [r3, #32]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	430a      	orrs	r2, r1
 8002d72:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	681a      	ldr	r2, [r3, #0]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	2101      	movs	r1, #1
 8002d80:	430a      	orrs	r2, r1
 8002d82:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2200      	movs	r2, #0
 8002d88:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2241      	movs	r2, #65	@ 0x41
 8002d8e:	2120      	movs	r1, #32
 8002d90:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2200      	movs	r2, #0
 8002d96:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2242      	movs	r2, #66	@ 0x42
 8002d9c:	2100      	movs	r1, #0
 8002d9e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002da0:	2300      	movs	r3, #0
}
 8002da2:	0018      	movs	r0, r3
 8002da4:	46bd      	mov	sp, r7
 8002da6:	b002      	add	sp, #8
 8002da8:	bd80      	pop	{r7, pc}
 8002daa:	46c0      	nop			@ (mov r8, r8)
 8002dac:	f0ffffff 	.word	0xf0ffffff
 8002db0:	ffff7fff 	.word	0xffff7fff
 8002db4:	fffff7ff 	.word	0xfffff7ff
 8002db8:	02008000 	.word	0x02008000

08002dbc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b082      	sub	sp, #8
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
 8002dc4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2241      	movs	r2, #65	@ 0x41
 8002dca:	5c9b      	ldrb	r3, [r3, r2]
 8002dcc:	b2db      	uxtb	r3, r3
 8002dce:	2b20      	cmp	r3, #32
 8002dd0:	d138      	bne.n	8002e44 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2240      	movs	r2, #64	@ 0x40
 8002dd6:	5c9b      	ldrb	r3, [r3, r2]
 8002dd8:	2b01      	cmp	r3, #1
 8002dda:	d101      	bne.n	8002de0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002ddc:	2302      	movs	r3, #2
 8002dde:	e032      	b.n	8002e46 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2240      	movs	r2, #64	@ 0x40
 8002de4:	2101      	movs	r1, #1
 8002de6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2241      	movs	r2, #65	@ 0x41
 8002dec:	2124      	movs	r1, #36	@ 0x24
 8002dee:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	681a      	ldr	r2, [r3, #0]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	2101      	movs	r1, #1
 8002dfc:	438a      	bics	r2, r1
 8002dfe:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	681a      	ldr	r2, [r3, #0]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4911      	ldr	r1, [pc, #68]	@ (8002e50 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8002e0c:	400a      	ands	r2, r1
 8002e0e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	6819      	ldr	r1, [r3, #0]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	683a      	ldr	r2, [r7, #0]
 8002e1c:	430a      	orrs	r2, r1
 8002e1e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	681a      	ldr	r2, [r3, #0]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	2101      	movs	r1, #1
 8002e2c:	430a      	orrs	r2, r1
 8002e2e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2241      	movs	r2, #65	@ 0x41
 8002e34:	2120      	movs	r1, #32
 8002e36:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2240      	movs	r2, #64	@ 0x40
 8002e3c:	2100      	movs	r1, #0
 8002e3e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002e40:	2300      	movs	r3, #0
 8002e42:	e000      	b.n	8002e46 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002e44:	2302      	movs	r3, #2
  }
}
 8002e46:	0018      	movs	r0, r3
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	b002      	add	sp, #8
 8002e4c:	bd80      	pop	{r7, pc}
 8002e4e:	46c0      	nop			@ (mov r8, r8)
 8002e50:	ffffefff 	.word	0xffffefff

08002e54 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b084      	sub	sp, #16
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
 8002e5c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2241      	movs	r2, #65	@ 0x41
 8002e62:	5c9b      	ldrb	r3, [r3, r2]
 8002e64:	b2db      	uxtb	r3, r3
 8002e66:	2b20      	cmp	r3, #32
 8002e68:	d139      	bne.n	8002ede <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2240      	movs	r2, #64	@ 0x40
 8002e6e:	5c9b      	ldrb	r3, [r3, r2]
 8002e70:	2b01      	cmp	r3, #1
 8002e72:	d101      	bne.n	8002e78 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002e74:	2302      	movs	r3, #2
 8002e76:	e033      	b.n	8002ee0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2240      	movs	r2, #64	@ 0x40
 8002e7c:	2101      	movs	r1, #1
 8002e7e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2241      	movs	r2, #65	@ 0x41
 8002e84:	2124      	movs	r1, #36	@ 0x24
 8002e86:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	681a      	ldr	r2, [r3, #0]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	2101      	movs	r1, #1
 8002e94:	438a      	bics	r2, r1
 8002e96:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	4a11      	ldr	r2, [pc, #68]	@ (8002ee8 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8002ea4:	4013      	ands	r3, r2
 8002ea6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	021b      	lsls	r3, r3, #8
 8002eac:	68fa      	ldr	r2, [r7, #12]
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	68fa      	ldr	r2, [r7, #12]
 8002eb8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	681a      	ldr	r2, [r3, #0]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	2101      	movs	r1, #1
 8002ec6:	430a      	orrs	r2, r1
 8002ec8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2241      	movs	r2, #65	@ 0x41
 8002ece:	2120      	movs	r1, #32
 8002ed0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2240      	movs	r2, #64	@ 0x40
 8002ed6:	2100      	movs	r1, #0
 8002ed8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002eda:	2300      	movs	r3, #0
 8002edc:	e000      	b.n	8002ee0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002ede:	2302      	movs	r3, #2
  }
}
 8002ee0:	0018      	movs	r0, r3
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	b004      	add	sp, #16
 8002ee6:	bd80      	pop	{r7, pc}
 8002ee8:	fffff0ff 	.word	0xfffff0ff

08002eec <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b084      	sub	sp, #16
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d101      	bne.n	8002efe <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	e03d      	b.n	8002f7a <HAL_IWDG_Init+0x8e>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a20      	ldr	r2, [pc, #128]	@ (8002f84 <HAL_IWDG_Init+0x98>)
 8002f04:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a1f      	ldr	r2, [pc, #124]	@ (8002f88 <HAL_IWDG_Init+0x9c>)
 8002f0c:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	687a      	ldr	r2, [r7, #4]
 8002f14:	6852      	ldr	r2, [r2, #4]
 8002f16:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	687a      	ldr	r2, [r7, #4]
 8002f1e:	6892      	ldr	r2, [r2, #8]
 8002f20:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8002f22:	f7fe fd6d 	bl	8001a00 <HAL_GetTick>
 8002f26:	0003      	movs	r3, r0
 8002f28:	60fb      	str	r3, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8002f2a:	e00e      	b.n	8002f4a <HAL_IWDG_Init+0x5e>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8002f2c:	f7fe fd68 	bl	8001a00 <HAL_GetTick>
 8002f30:	0002      	movs	r2, r0
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	1ad3      	subs	r3, r2, r3
 8002f36:	2b31      	cmp	r3, #49	@ 0x31
 8002f38:	d907      	bls.n	8002f4a <HAL_IWDG_Init+0x5e>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	68db      	ldr	r3, [r3, #12]
 8002f40:	2207      	movs	r2, #7
 8002f42:	4013      	ands	r3, r2
 8002f44:	d001      	beq.n	8002f4a <HAL_IWDG_Init+0x5e>
      {
        return HAL_TIMEOUT;
 8002f46:	2303      	movs	r3, #3
 8002f48:	e017      	b.n	8002f7a <HAL_IWDG_Init+0x8e>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	68db      	ldr	r3, [r3, #12]
 8002f50:	2207      	movs	r2, #7
 8002f52:	4013      	ands	r3, r2
 8002f54:	d1ea      	bne.n	8002f2c <HAL_IWDG_Init+0x40>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	691a      	ldr	r2, [r3, #16]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	68db      	ldr	r3, [r3, #12]
 8002f60:	429a      	cmp	r2, r3
 8002f62:	d005      	beq.n	8002f70 <HAL_IWDG_Init+0x84>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	687a      	ldr	r2, [r7, #4]
 8002f6a:	68d2      	ldr	r2, [r2, #12]
 8002f6c:	611a      	str	r2, [r3, #16]
 8002f6e:	e003      	b.n	8002f78 <HAL_IWDG_Init+0x8c>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a05      	ldr	r2, [pc, #20]	@ (8002f8c <HAL_IWDG_Init+0xa0>)
 8002f76:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002f78:	2300      	movs	r3, #0
}
 8002f7a:	0018      	movs	r0, r3
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	b004      	add	sp, #16
 8002f80:	bd80      	pop	{r7, pc}
 8002f82:	46c0      	nop			@ (mov r8, r8)
 8002f84:	0000cccc 	.word	0x0000cccc
 8002f88:	00005555 	.word	0x00005555
 8002f8c:	0000aaaa 	.word	0x0000aaaa

08002f90 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b082      	sub	sp, #8
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a03      	ldr	r2, [pc, #12]	@ (8002fac <HAL_IWDG_Refresh+0x1c>)
 8002f9e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002fa0:	2300      	movs	r3, #0
}
 8002fa2:	0018      	movs	r0, r3
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	b002      	add	sp, #8
 8002fa8:	bd80      	pop	{r7, pc}
 8002faa:	46c0      	nop			@ (mov r8, r8)
 8002fac:	0000aaaa 	.word	0x0000aaaa

08002fb0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b084      	sub	sp, #16
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002fb8:	4b19      	ldr	r3, [pc, #100]	@ (8003020 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a19      	ldr	r2, [pc, #100]	@ (8003024 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8002fbe:	4013      	ands	r3, r2
 8002fc0:	0019      	movs	r1, r3
 8002fc2:	4b17      	ldr	r3, [pc, #92]	@ (8003020 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002fc4:	687a      	ldr	r2, [r7, #4]
 8002fc6:	430a      	orrs	r2, r1
 8002fc8:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002fca:	687a      	ldr	r2, [r7, #4]
 8002fcc:	2380      	movs	r3, #128	@ 0x80
 8002fce:	009b      	lsls	r3, r3, #2
 8002fd0:	429a      	cmp	r2, r3
 8002fd2:	d11f      	bne.n	8003014 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8002fd4:	4b14      	ldr	r3, [pc, #80]	@ (8003028 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8002fd6:	681a      	ldr	r2, [r3, #0]
 8002fd8:	0013      	movs	r3, r2
 8002fda:	005b      	lsls	r3, r3, #1
 8002fdc:	189b      	adds	r3, r3, r2
 8002fde:	005b      	lsls	r3, r3, #1
 8002fe0:	4912      	ldr	r1, [pc, #72]	@ (800302c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8002fe2:	0018      	movs	r0, r3
 8002fe4:	f7fd f8e8 	bl	80001b8 <__udivsi3>
 8002fe8:	0003      	movs	r3, r0
 8002fea:	3301      	adds	r3, #1
 8002fec:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002fee:	e008      	b.n	8003002 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d003      	beq.n	8002ffe <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	3b01      	subs	r3, #1
 8002ffa:	60fb      	str	r3, [r7, #12]
 8002ffc:	e001      	b.n	8003002 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8002ffe:	2303      	movs	r3, #3
 8003000:	e009      	b.n	8003016 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003002:	4b07      	ldr	r3, [pc, #28]	@ (8003020 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003004:	695a      	ldr	r2, [r3, #20]
 8003006:	2380      	movs	r3, #128	@ 0x80
 8003008:	00db      	lsls	r3, r3, #3
 800300a:	401a      	ands	r2, r3
 800300c:	2380      	movs	r3, #128	@ 0x80
 800300e:	00db      	lsls	r3, r3, #3
 8003010:	429a      	cmp	r2, r3
 8003012:	d0ed      	beq.n	8002ff0 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8003014:	2300      	movs	r3, #0
}
 8003016:	0018      	movs	r0, r3
 8003018:	46bd      	mov	sp, r7
 800301a:	b004      	add	sp, #16
 800301c:	bd80      	pop	{r7, pc}
 800301e:	46c0      	nop			@ (mov r8, r8)
 8003020:	40007000 	.word	0x40007000
 8003024:	fffff9ff 	.word	0xfffff9ff
 8003028:	20000018 	.word	0x20000018
 800302c:	000f4240 	.word	0x000f4240

08003030 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b088      	sub	sp, #32
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d101      	bne.n	8003042 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800303e:	2301      	movs	r3, #1
 8003040:	e2f3      	b.n	800362a <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	2201      	movs	r2, #1
 8003048:	4013      	ands	r3, r2
 800304a:	d100      	bne.n	800304e <HAL_RCC_OscConfig+0x1e>
 800304c:	e07c      	b.n	8003148 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800304e:	4bc3      	ldr	r3, [pc, #780]	@ (800335c <HAL_RCC_OscConfig+0x32c>)
 8003050:	689b      	ldr	r3, [r3, #8]
 8003052:	2238      	movs	r2, #56	@ 0x38
 8003054:	4013      	ands	r3, r2
 8003056:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003058:	4bc0      	ldr	r3, [pc, #768]	@ (800335c <HAL_RCC_OscConfig+0x32c>)
 800305a:	68db      	ldr	r3, [r3, #12]
 800305c:	2203      	movs	r2, #3
 800305e:	4013      	ands	r3, r2
 8003060:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8003062:	69bb      	ldr	r3, [r7, #24]
 8003064:	2b10      	cmp	r3, #16
 8003066:	d102      	bne.n	800306e <HAL_RCC_OscConfig+0x3e>
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	2b03      	cmp	r3, #3
 800306c:	d002      	beq.n	8003074 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800306e:	69bb      	ldr	r3, [r7, #24]
 8003070:	2b08      	cmp	r3, #8
 8003072:	d10b      	bne.n	800308c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003074:	4bb9      	ldr	r3, [pc, #740]	@ (800335c <HAL_RCC_OscConfig+0x32c>)
 8003076:	681a      	ldr	r2, [r3, #0]
 8003078:	2380      	movs	r3, #128	@ 0x80
 800307a:	029b      	lsls	r3, r3, #10
 800307c:	4013      	ands	r3, r2
 800307e:	d062      	beq.n	8003146 <HAL_RCC_OscConfig+0x116>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d15e      	bne.n	8003146 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8003088:	2301      	movs	r3, #1
 800308a:	e2ce      	b.n	800362a <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	685a      	ldr	r2, [r3, #4]
 8003090:	2380      	movs	r3, #128	@ 0x80
 8003092:	025b      	lsls	r3, r3, #9
 8003094:	429a      	cmp	r2, r3
 8003096:	d107      	bne.n	80030a8 <HAL_RCC_OscConfig+0x78>
 8003098:	4bb0      	ldr	r3, [pc, #704]	@ (800335c <HAL_RCC_OscConfig+0x32c>)
 800309a:	681a      	ldr	r2, [r3, #0]
 800309c:	4baf      	ldr	r3, [pc, #700]	@ (800335c <HAL_RCC_OscConfig+0x32c>)
 800309e:	2180      	movs	r1, #128	@ 0x80
 80030a0:	0249      	lsls	r1, r1, #9
 80030a2:	430a      	orrs	r2, r1
 80030a4:	601a      	str	r2, [r3, #0]
 80030a6:	e020      	b.n	80030ea <HAL_RCC_OscConfig+0xba>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	685a      	ldr	r2, [r3, #4]
 80030ac:	23a0      	movs	r3, #160	@ 0xa0
 80030ae:	02db      	lsls	r3, r3, #11
 80030b0:	429a      	cmp	r2, r3
 80030b2:	d10e      	bne.n	80030d2 <HAL_RCC_OscConfig+0xa2>
 80030b4:	4ba9      	ldr	r3, [pc, #676]	@ (800335c <HAL_RCC_OscConfig+0x32c>)
 80030b6:	681a      	ldr	r2, [r3, #0]
 80030b8:	4ba8      	ldr	r3, [pc, #672]	@ (800335c <HAL_RCC_OscConfig+0x32c>)
 80030ba:	2180      	movs	r1, #128	@ 0x80
 80030bc:	02c9      	lsls	r1, r1, #11
 80030be:	430a      	orrs	r2, r1
 80030c0:	601a      	str	r2, [r3, #0]
 80030c2:	4ba6      	ldr	r3, [pc, #664]	@ (800335c <HAL_RCC_OscConfig+0x32c>)
 80030c4:	681a      	ldr	r2, [r3, #0]
 80030c6:	4ba5      	ldr	r3, [pc, #660]	@ (800335c <HAL_RCC_OscConfig+0x32c>)
 80030c8:	2180      	movs	r1, #128	@ 0x80
 80030ca:	0249      	lsls	r1, r1, #9
 80030cc:	430a      	orrs	r2, r1
 80030ce:	601a      	str	r2, [r3, #0]
 80030d0:	e00b      	b.n	80030ea <HAL_RCC_OscConfig+0xba>
 80030d2:	4ba2      	ldr	r3, [pc, #648]	@ (800335c <HAL_RCC_OscConfig+0x32c>)
 80030d4:	681a      	ldr	r2, [r3, #0]
 80030d6:	4ba1      	ldr	r3, [pc, #644]	@ (800335c <HAL_RCC_OscConfig+0x32c>)
 80030d8:	49a1      	ldr	r1, [pc, #644]	@ (8003360 <HAL_RCC_OscConfig+0x330>)
 80030da:	400a      	ands	r2, r1
 80030dc:	601a      	str	r2, [r3, #0]
 80030de:	4b9f      	ldr	r3, [pc, #636]	@ (800335c <HAL_RCC_OscConfig+0x32c>)
 80030e0:	681a      	ldr	r2, [r3, #0]
 80030e2:	4b9e      	ldr	r3, [pc, #632]	@ (800335c <HAL_RCC_OscConfig+0x32c>)
 80030e4:	499f      	ldr	r1, [pc, #636]	@ (8003364 <HAL_RCC_OscConfig+0x334>)
 80030e6:	400a      	ands	r2, r1
 80030e8:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d014      	beq.n	800311c <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030f2:	f7fe fc85 	bl	8001a00 <HAL_GetTick>
 80030f6:	0003      	movs	r3, r0
 80030f8:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80030fa:	e008      	b.n	800310e <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030fc:	f7fe fc80 	bl	8001a00 <HAL_GetTick>
 8003100:	0002      	movs	r2, r0
 8003102:	693b      	ldr	r3, [r7, #16]
 8003104:	1ad3      	subs	r3, r2, r3
 8003106:	2b64      	cmp	r3, #100	@ 0x64
 8003108:	d901      	bls.n	800310e <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 800310a:	2303      	movs	r3, #3
 800310c:	e28d      	b.n	800362a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800310e:	4b93      	ldr	r3, [pc, #588]	@ (800335c <HAL_RCC_OscConfig+0x32c>)
 8003110:	681a      	ldr	r2, [r3, #0]
 8003112:	2380      	movs	r3, #128	@ 0x80
 8003114:	029b      	lsls	r3, r3, #10
 8003116:	4013      	ands	r3, r2
 8003118:	d0f0      	beq.n	80030fc <HAL_RCC_OscConfig+0xcc>
 800311a:	e015      	b.n	8003148 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800311c:	f7fe fc70 	bl	8001a00 <HAL_GetTick>
 8003120:	0003      	movs	r3, r0
 8003122:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003124:	e008      	b.n	8003138 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003126:	f7fe fc6b 	bl	8001a00 <HAL_GetTick>
 800312a:	0002      	movs	r2, r0
 800312c:	693b      	ldr	r3, [r7, #16]
 800312e:	1ad3      	subs	r3, r2, r3
 8003130:	2b64      	cmp	r3, #100	@ 0x64
 8003132:	d901      	bls.n	8003138 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003134:	2303      	movs	r3, #3
 8003136:	e278      	b.n	800362a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003138:	4b88      	ldr	r3, [pc, #544]	@ (800335c <HAL_RCC_OscConfig+0x32c>)
 800313a:	681a      	ldr	r2, [r3, #0]
 800313c:	2380      	movs	r3, #128	@ 0x80
 800313e:	029b      	lsls	r3, r3, #10
 8003140:	4013      	ands	r3, r2
 8003142:	d1f0      	bne.n	8003126 <HAL_RCC_OscConfig+0xf6>
 8003144:	e000      	b.n	8003148 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003146:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	2202      	movs	r2, #2
 800314e:	4013      	ands	r3, r2
 8003150:	d100      	bne.n	8003154 <HAL_RCC_OscConfig+0x124>
 8003152:	e099      	b.n	8003288 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003154:	4b81      	ldr	r3, [pc, #516]	@ (800335c <HAL_RCC_OscConfig+0x32c>)
 8003156:	689b      	ldr	r3, [r3, #8]
 8003158:	2238      	movs	r2, #56	@ 0x38
 800315a:	4013      	ands	r3, r2
 800315c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800315e:	4b7f      	ldr	r3, [pc, #508]	@ (800335c <HAL_RCC_OscConfig+0x32c>)
 8003160:	68db      	ldr	r3, [r3, #12]
 8003162:	2203      	movs	r2, #3
 8003164:	4013      	ands	r3, r2
 8003166:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8003168:	69bb      	ldr	r3, [r7, #24]
 800316a:	2b10      	cmp	r3, #16
 800316c:	d102      	bne.n	8003174 <HAL_RCC_OscConfig+0x144>
 800316e:	697b      	ldr	r3, [r7, #20]
 8003170:	2b02      	cmp	r3, #2
 8003172:	d002      	beq.n	800317a <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8003174:	69bb      	ldr	r3, [r7, #24]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d135      	bne.n	80031e6 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800317a:	4b78      	ldr	r3, [pc, #480]	@ (800335c <HAL_RCC_OscConfig+0x32c>)
 800317c:	681a      	ldr	r2, [r3, #0]
 800317e:	2380      	movs	r3, #128	@ 0x80
 8003180:	00db      	lsls	r3, r3, #3
 8003182:	4013      	ands	r3, r2
 8003184:	d005      	beq.n	8003192 <HAL_RCC_OscConfig+0x162>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	68db      	ldr	r3, [r3, #12]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d101      	bne.n	8003192 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800318e:	2301      	movs	r3, #1
 8003190:	e24b      	b.n	800362a <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003192:	4b72      	ldr	r3, [pc, #456]	@ (800335c <HAL_RCC_OscConfig+0x32c>)
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	4a74      	ldr	r2, [pc, #464]	@ (8003368 <HAL_RCC_OscConfig+0x338>)
 8003198:	4013      	ands	r3, r2
 800319a:	0019      	movs	r1, r3
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	695b      	ldr	r3, [r3, #20]
 80031a0:	021a      	lsls	r2, r3, #8
 80031a2:	4b6e      	ldr	r3, [pc, #440]	@ (800335c <HAL_RCC_OscConfig+0x32c>)
 80031a4:	430a      	orrs	r2, r1
 80031a6:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80031a8:	69bb      	ldr	r3, [r7, #24]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d112      	bne.n	80031d4 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80031ae:	4b6b      	ldr	r3, [pc, #428]	@ (800335c <HAL_RCC_OscConfig+0x32c>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4a6e      	ldr	r2, [pc, #440]	@ (800336c <HAL_RCC_OscConfig+0x33c>)
 80031b4:	4013      	ands	r3, r2
 80031b6:	0019      	movs	r1, r3
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	691a      	ldr	r2, [r3, #16]
 80031bc:	4b67      	ldr	r3, [pc, #412]	@ (800335c <HAL_RCC_OscConfig+0x32c>)
 80031be:	430a      	orrs	r2, r1
 80031c0:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80031c2:	4b66      	ldr	r3, [pc, #408]	@ (800335c <HAL_RCC_OscConfig+0x32c>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	0adb      	lsrs	r3, r3, #11
 80031c8:	2207      	movs	r2, #7
 80031ca:	4013      	ands	r3, r2
 80031cc:	4a68      	ldr	r2, [pc, #416]	@ (8003370 <HAL_RCC_OscConfig+0x340>)
 80031ce:	40da      	lsrs	r2, r3
 80031d0:	4b68      	ldr	r3, [pc, #416]	@ (8003374 <HAL_RCC_OscConfig+0x344>)
 80031d2:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80031d4:	4b68      	ldr	r3, [pc, #416]	@ (8003378 <HAL_RCC_OscConfig+0x348>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	0018      	movs	r0, r3
 80031da:	f7fe fbb5 	bl	8001948 <HAL_InitTick>
 80031de:	1e03      	subs	r3, r0, #0
 80031e0:	d051      	beq.n	8003286 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80031e2:	2301      	movs	r3, #1
 80031e4:	e221      	b.n	800362a <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	68db      	ldr	r3, [r3, #12]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d030      	beq.n	8003250 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80031ee:	4b5b      	ldr	r3, [pc, #364]	@ (800335c <HAL_RCC_OscConfig+0x32c>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a5e      	ldr	r2, [pc, #376]	@ (800336c <HAL_RCC_OscConfig+0x33c>)
 80031f4:	4013      	ands	r3, r2
 80031f6:	0019      	movs	r1, r3
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	691a      	ldr	r2, [r3, #16]
 80031fc:	4b57      	ldr	r3, [pc, #348]	@ (800335c <HAL_RCC_OscConfig+0x32c>)
 80031fe:	430a      	orrs	r2, r1
 8003200:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8003202:	4b56      	ldr	r3, [pc, #344]	@ (800335c <HAL_RCC_OscConfig+0x32c>)
 8003204:	681a      	ldr	r2, [r3, #0]
 8003206:	4b55      	ldr	r3, [pc, #340]	@ (800335c <HAL_RCC_OscConfig+0x32c>)
 8003208:	2180      	movs	r1, #128	@ 0x80
 800320a:	0049      	lsls	r1, r1, #1
 800320c:	430a      	orrs	r2, r1
 800320e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003210:	f7fe fbf6 	bl	8001a00 <HAL_GetTick>
 8003214:	0003      	movs	r3, r0
 8003216:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003218:	e008      	b.n	800322c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800321a:	f7fe fbf1 	bl	8001a00 <HAL_GetTick>
 800321e:	0002      	movs	r2, r0
 8003220:	693b      	ldr	r3, [r7, #16]
 8003222:	1ad3      	subs	r3, r2, r3
 8003224:	2b02      	cmp	r3, #2
 8003226:	d901      	bls.n	800322c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8003228:	2303      	movs	r3, #3
 800322a:	e1fe      	b.n	800362a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800322c:	4b4b      	ldr	r3, [pc, #300]	@ (800335c <HAL_RCC_OscConfig+0x32c>)
 800322e:	681a      	ldr	r2, [r3, #0]
 8003230:	2380      	movs	r3, #128	@ 0x80
 8003232:	00db      	lsls	r3, r3, #3
 8003234:	4013      	ands	r3, r2
 8003236:	d0f0      	beq.n	800321a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003238:	4b48      	ldr	r3, [pc, #288]	@ (800335c <HAL_RCC_OscConfig+0x32c>)
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	4a4a      	ldr	r2, [pc, #296]	@ (8003368 <HAL_RCC_OscConfig+0x338>)
 800323e:	4013      	ands	r3, r2
 8003240:	0019      	movs	r1, r3
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	695b      	ldr	r3, [r3, #20]
 8003246:	021a      	lsls	r2, r3, #8
 8003248:	4b44      	ldr	r3, [pc, #272]	@ (800335c <HAL_RCC_OscConfig+0x32c>)
 800324a:	430a      	orrs	r2, r1
 800324c:	605a      	str	r2, [r3, #4]
 800324e:	e01b      	b.n	8003288 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8003250:	4b42      	ldr	r3, [pc, #264]	@ (800335c <HAL_RCC_OscConfig+0x32c>)
 8003252:	681a      	ldr	r2, [r3, #0]
 8003254:	4b41      	ldr	r3, [pc, #260]	@ (800335c <HAL_RCC_OscConfig+0x32c>)
 8003256:	4949      	ldr	r1, [pc, #292]	@ (800337c <HAL_RCC_OscConfig+0x34c>)
 8003258:	400a      	ands	r2, r1
 800325a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800325c:	f7fe fbd0 	bl	8001a00 <HAL_GetTick>
 8003260:	0003      	movs	r3, r0
 8003262:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003264:	e008      	b.n	8003278 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003266:	f7fe fbcb 	bl	8001a00 <HAL_GetTick>
 800326a:	0002      	movs	r2, r0
 800326c:	693b      	ldr	r3, [r7, #16]
 800326e:	1ad3      	subs	r3, r2, r3
 8003270:	2b02      	cmp	r3, #2
 8003272:	d901      	bls.n	8003278 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003274:	2303      	movs	r3, #3
 8003276:	e1d8      	b.n	800362a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003278:	4b38      	ldr	r3, [pc, #224]	@ (800335c <HAL_RCC_OscConfig+0x32c>)
 800327a:	681a      	ldr	r2, [r3, #0]
 800327c:	2380      	movs	r3, #128	@ 0x80
 800327e:	00db      	lsls	r3, r3, #3
 8003280:	4013      	ands	r3, r2
 8003282:	d1f0      	bne.n	8003266 <HAL_RCC_OscConfig+0x236>
 8003284:	e000      	b.n	8003288 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003286:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	2208      	movs	r2, #8
 800328e:	4013      	ands	r3, r2
 8003290:	d047      	beq.n	8003322 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003292:	4b32      	ldr	r3, [pc, #200]	@ (800335c <HAL_RCC_OscConfig+0x32c>)
 8003294:	689b      	ldr	r3, [r3, #8]
 8003296:	2238      	movs	r2, #56	@ 0x38
 8003298:	4013      	ands	r3, r2
 800329a:	2b18      	cmp	r3, #24
 800329c:	d10a      	bne.n	80032b4 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800329e:	4b2f      	ldr	r3, [pc, #188]	@ (800335c <HAL_RCC_OscConfig+0x32c>)
 80032a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032a2:	2202      	movs	r2, #2
 80032a4:	4013      	ands	r3, r2
 80032a6:	d03c      	beq.n	8003322 <HAL_RCC_OscConfig+0x2f2>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	699b      	ldr	r3, [r3, #24]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d138      	bne.n	8003322 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80032b0:	2301      	movs	r3, #1
 80032b2:	e1ba      	b.n	800362a <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	699b      	ldr	r3, [r3, #24]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d019      	beq.n	80032f0 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80032bc:	4b27      	ldr	r3, [pc, #156]	@ (800335c <HAL_RCC_OscConfig+0x32c>)
 80032be:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80032c0:	4b26      	ldr	r3, [pc, #152]	@ (800335c <HAL_RCC_OscConfig+0x32c>)
 80032c2:	2101      	movs	r1, #1
 80032c4:	430a      	orrs	r2, r1
 80032c6:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032c8:	f7fe fb9a 	bl	8001a00 <HAL_GetTick>
 80032cc:	0003      	movs	r3, r0
 80032ce:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80032d0:	e008      	b.n	80032e4 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032d2:	f7fe fb95 	bl	8001a00 <HAL_GetTick>
 80032d6:	0002      	movs	r2, r0
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	1ad3      	subs	r3, r2, r3
 80032dc:	2b02      	cmp	r3, #2
 80032de:	d901      	bls.n	80032e4 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80032e0:	2303      	movs	r3, #3
 80032e2:	e1a2      	b.n	800362a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80032e4:	4b1d      	ldr	r3, [pc, #116]	@ (800335c <HAL_RCC_OscConfig+0x32c>)
 80032e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032e8:	2202      	movs	r2, #2
 80032ea:	4013      	ands	r3, r2
 80032ec:	d0f1      	beq.n	80032d2 <HAL_RCC_OscConfig+0x2a2>
 80032ee:	e018      	b.n	8003322 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80032f0:	4b1a      	ldr	r3, [pc, #104]	@ (800335c <HAL_RCC_OscConfig+0x32c>)
 80032f2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80032f4:	4b19      	ldr	r3, [pc, #100]	@ (800335c <HAL_RCC_OscConfig+0x32c>)
 80032f6:	2101      	movs	r1, #1
 80032f8:	438a      	bics	r2, r1
 80032fa:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032fc:	f7fe fb80 	bl	8001a00 <HAL_GetTick>
 8003300:	0003      	movs	r3, r0
 8003302:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003304:	e008      	b.n	8003318 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003306:	f7fe fb7b 	bl	8001a00 <HAL_GetTick>
 800330a:	0002      	movs	r2, r0
 800330c:	693b      	ldr	r3, [r7, #16]
 800330e:	1ad3      	subs	r3, r2, r3
 8003310:	2b02      	cmp	r3, #2
 8003312:	d901      	bls.n	8003318 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8003314:	2303      	movs	r3, #3
 8003316:	e188      	b.n	800362a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003318:	4b10      	ldr	r3, [pc, #64]	@ (800335c <HAL_RCC_OscConfig+0x32c>)
 800331a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800331c:	2202      	movs	r2, #2
 800331e:	4013      	ands	r3, r2
 8003320:	d1f1      	bne.n	8003306 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	2204      	movs	r2, #4
 8003328:	4013      	ands	r3, r2
 800332a:	d100      	bne.n	800332e <HAL_RCC_OscConfig+0x2fe>
 800332c:	e0c6      	b.n	80034bc <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800332e:	231f      	movs	r3, #31
 8003330:	18fb      	adds	r3, r7, r3
 8003332:	2200      	movs	r2, #0
 8003334:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003336:	4b09      	ldr	r3, [pc, #36]	@ (800335c <HAL_RCC_OscConfig+0x32c>)
 8003338:	689b      	ldr	r3, [r3, #8]
 800333a:	2238      	movs	r2, #56	@ 0x38
 800333c:	4013      	ands	r3, r2
 800333e:	2b20      	cmp	r3, #32
 8003340:	d11e      	bne.n	8003380 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8003342:	4b06      	ldr	r3, [pc, #24]	@ (800335c <HAL_RCC_OscConfig+0x32c>)
 8003344:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003346:	2202      	movs	r2, #2
 8003348:	4013      	ands	r3, r2
 800334a:	d100      	bne.n	800334e <HAL_RCC_OscConfig+0x31e>
 800334c:	e0b6      	b.n	80034bc <HAL_RCC_OscConfig+0x48c>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	689b      	ldr	r3, [r3, #8]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d000      	beq.n	8003358 <HAL_RCC_OscConfig+0x328>
 8003356:	e0b1      	b.n	80034bc <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8003358:	2301      	movs	r3, #1
 800335a:	e166      	b.n	800362a <HAL_RCC_OscConfig+0x5fa>
 800335c:	40021000 	.word	0x40021000
 8003360:	fffeffff 	.word	0xfffeffff
 8003364:	fffbffff 	.word	0xfffbffff
 8003368:	ffff80ff 	.word	0xffff80ff
 800336c:	ffffc7ff 	.word	0xffffc7ff
 8003370:	00f42400 	.word	0x00f42400
 8003374:	20000018 	.word	0x20000018
 8003378:	2000001c 	.word	0x2000001c
 800337c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003380:	4bac      	ldr	r3, [pc, #688]	@ (8003634 <HAL_RCC_OscConfig+0x604>)
 8003382:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003384:	2380      	movs	r3, #128	@ 0x80
 8003386:	055b      	lsls	r3, r3, #21
 8003388:	4013      	ands	r3, r2
 800338a:	d101      	bne.n	8003390 <HAL_RCC_OscConfig+0x360>
 800338c:	2301      	movs	r3, #1
 800338e:	e000      	b.n	8003392 <HAL_RCC_OscConfig+0x362>
 8003390:	2300      	movs	r3, #0
 8003392:	2b00      	cmp	r3, #0
 8003394:	d011      	beq.n	80033ba <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8003396:	4ba7      	ldr	r3, [pc, #668]	@ (8003634 <HAL_RCC_OscConfig+0x604>)
 8003398:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800339a:	4ba6      	ldr	r3, [pc, #664]	@ (8003634 <HAL_RCC_OscConfig+0x604>)
 800339c:	2180      	movs	r1, #128	@ 0x80
 800339e:	0549      	lsls	r1, r1, #21
 80033a0:	430a      	orrs	r2, r1
 80033a2:	63da      	str	r2, [r3, #60]	@ 0x3c
 80033a4:	4ba3      	ldr	r3, [pc, #652]	@ (8003634 <HAL_RCC_OscConfig+0x604>)
 80033a6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80033a8:	2380      	movs	r3, #128	@ 0x80
 80033aa:	055b      	lsls	r3, r3, #21
 80033ac:	4013      	ands	r3, r2
 80033ae:	60fb      	str	r3, [r7, #12]
 80033b0:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80033b2:	231f      	movs	r3, #31
 80033b4:	18fb      	adds	r3, r7, r3
 80033b6:	2201      	movs	r2, #1
 80033b8:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033ba:	4b9f      	ldr	r3, [pc, #636]	@ (8003638 <HAL_RCC_OscConfig+0x608>)
 80033bc:	681a      	ldr	r2, [r3, #0]
 80033be:	2380      	movs	r3, #128	@ 0x80
 80033c0:	005b      	lsls	r3, r3, #1
 80033c2:	4013      	ands	r3, r2
 80033c4:	d11a      	bne.n	80033fc <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80033c6:	4b9c      	ldr	r3, [pc, #624]	@ (8003638 <HAL_RCC_OscConfig+0x608>)
 80033c8:	681a      	ldr	r2, [r3, #0]
 80033ca:	4b9b      	ldr	r3, [pc, #620]	@ (8003638 <HAL_RCC_OscConfig+0x608>)
 80033cc:	2180      	movs	r1, #128	@ 0x80
 80033ce:	0049      	lsls	r1, r1, #1
 80033d0:	430a      	orrs	r2, r1
 80033d2:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80033d4:	f7fe fb14 	bl	8001a00 <HAL_GetTick>
 80033d8:	0003      	movs	r3, r0
 80033da:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033dc:	e008      	b.n	80033f0 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033de:	f7fe fb0f 	bl	8001a00 <HAL_GetTick>
 80033e2:	0002      	movs	r2, r0
 80033e4:	693b      	ldr	r3, [r7, #16]
 80033e6:	1ad3      	subs	r3, r2, r3
 80033e8:	2b02      	cmp	r3, #2
 80033ea:	d901      	bls.n	80033f0 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80033ec:	2303      	movs	r3, #3
 80033ee:	e11c      	b.n	800362a <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033f0:	4b91      	ldr	r3, [pc, #580]	@ (8003638 <HAL_RCC_OscConfig+0x608>)
 80033f2:	681a      	ldr	r2, [r3, #0]
 80033f4:	2380      	movs	r3, #128	@ 0x80
 80033f6:	005b      	lsls	r3, r3, #1
 80033f8:	4013      	ands	r3, r2
 80033fa:	d0f0      	beq.n	80033de <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	2b01      	cmp	r3, #1
 8003402:	d106      	bne.n	8003412 <HAL_RCC_OscConfig+0x3e2>
 8003404:	4b8b      	ldr	r3, [pc, #556]	@ (8003634 <HAL_RCC_OscConfig+0x604>)
 8003406:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003408:	4b8a      	ldr	r3, [pc, #552]	@ (8003634 <HAL_RCC_OscConfig+0x604>)
 800340a:	2101      	movs	r1, #1
 800340c:	430a      	orrs	r2, r1
 800340e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003410:	e01c      	b.n	800344c <HAL_RCC_OscConfig+0x41c>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	689b      	ldr	r3, [r3, #8]
 8003416:	2b05      	cmp	r3, #5
 8003418:	d10c      	bne.n	8003434 <HAL_RCC_OscConfig+0x404>
 800341a:	4b86      	ldr	r3, [pc, #536]	@ (8003634 <HAL_RCC_OscConfig+0x604>)
 800341c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800341e:	4b85      	ldr	r3, [pc, #532]	@ (8003634 <HAL_RCC_OscConfig+0x604>)
 8003420:	2104      	movs	r1, #4
 8003422:	430a      	orrs	r2, r1
 8003424:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003426:	4b83      	ldr	r3, [pc, #524]	@ (8003634 <HAL_RCC_OscConfig+0x604>)
 8003428:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800342a:	4b82      	ldr	r3, [pc, #520]	@ (8003634 <HAL_RCC_OscConfig+0x604>)
 800342c:	2101      	movs	r1, #1
 800342e:	430a      	orrs	r2, r1
 8003430:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003432:	e00b      	b.n	800344c <HAL_RCC_OscConfig+0x41c>
 8003434:	4b7f      	ldr	r3, [pc, #508]	@ (8003634 <HAL_RCC_OscConfig+0x604>)
 8003436:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003438:	4b7e      	ldr	r3, [pc, #504]	@ (8003634 <HAL_RCC_OscConfig+0x604>)
 800343a:	2101      	movs	r1, #1
 800343c:	438a      	bics	r2, r1
 800343e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003440:	4b7c      	ldr	r3, [pc, #496]	@ (8003634 <HAL_RCC_OscConfig+0x604>)
 8003442:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003444:	4b7b      	ldr	r3, [pc, #492]	@ (8003634 <HAL_RCC_OscConfig+0x604>)
 8003446:	2104      	movs	r1, #4
 8003448:	438a      	bics	r2, r1
 800344a:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d014      	beq.n	800347e <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003454:	f7fe fad4 	bl	8001a00 <HAL_GetTick>
 8003458:	0003      	movs	r3, r0
 800345a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800345c:	e009      	b.n	8003472 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800345e:	f7fe facf 	bl	8001a00 <HAL_GetTick>
 8003462:	0002      	movs	r2, r0
 8003464:	693b      	ldr	r3, [r7, #16]
 8003466:	1ad3      	subs	r3, r2, r3
 8003468:	4a74      	ldr	r2, [pc, #464]	@ (800363c <HAL_RCC_OscConfig+0x60c>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d901      	bls.n	8003472 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800346e:	2303      	movs	r3, #3
 8003470:	e0db      	b.n	800362a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003472:	4b70      	ldr	r3, [pc, #448]	@ (8003634 <HAL_RCC_OscConfig+0x604>)
 8003474:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003476:	2202      	movs	r2, #2
 8003478:	4013      	ands	r3, r2
 800347a:	d0f0      	beq.n	800345e <HAL_RCC_OscConfig+0x42e>
 800347c:	e013      	b.n	80034a6 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800347e:	f7fe fabf 	bl	8001a00 <HAL_GetTick>
 8003482:	0003      	movs	r3, r0
 8003484:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003486:	e009      	b.n	800349c <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003488:	f7fe faba 	bl	8001a00 <HAL_GetTick>
 800348c:	0002      	movs	r2, r0
 800348e:	693b      	ldr	r3, [r7, #16]
 8003490:	1ad3      	subs	r3, r2, r3
 8003492:	4a6a      	ldr	r2, [pc, #424]	@ (800363c <HAL_RCC_OscConfig+0x60c>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d901      	bls.n	800349c <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8003498:	2303      	movs	r3, #3
 800349a:	e0c6      	b.n	800362a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800349c:	4b65      	ldr	r3, [pc, #404]	@ (8003634 <HAL_RCC_OscConfig+0x604>)
 800349e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034a0:	2202      	movs	r2, #2
 80034a2:	4013      	ands	r3, r2
 80034a4:	d1f0      	bne.n	8003488 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80034a6:	231f      	movs	r3, #31
 80034a8:	18fb      	adds	r3, r7, r3
 80034aa:	781b      	ldrb	r3, [r3, #0]
 80034ac:	2b01      	cmp	r3, #1
 80034ae:	d105      	bne.n	80034bc <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80034b0:	4b60      	ldr	r3, [pc, #384]	@ (8003634 <HAL_RCC_OscConfig+0x604>)
 80034b2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80034b4:	4b5f      	ldr	r3, [pc, #380]	@ (8003634 <HAL_RCC_OscConfig+0x604>)
 80034b6:	4962      	ldr	r1, [pc, #392]	@ (8003640 <HAL_RCC_OscConfig+0x610>)
 80034b8:	400a      	ands	r2, r1
 80034ba:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	69db      	ldr	r3, [r3, #28]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d100      	bne.n	80034c6 <HAL_RCC_OscConfig+0x496>
 80034c4:	e0b0      	b.n	8003628 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80034c6:	4b5b      	ldr	r3, [pc, #364]	@ (8003634 <HAL_RCC_OscConfig+0x604>)
 80034c8:	689b      	ldr	r3, [r3, #8]
 80034ca:	2238      	movs	r2, #56	@ 0x38
 80034cc:	4013      	ands	r3, r2
 80034ce:	2b10      	cmp	r3, #16
 80034d0:	d100      	bne.n	80034d4 <HAL_RCC_OscConfig+0x4a4>
 80034d2:	e078      	b.n	80035c6 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	69db      	ldr	r3, [r3, #28]
 80034d8:	2b02      	cmp	r3, #2
 80034da:	d153      	bne.n	8003584 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034dc:	4b55      	ldr	r3, [pc, #340]	@ (8003634 <HAL_RCC_OscConfig+0x604>)
 80034de:	681a      	ldr	r2, [r3, #0]
 80034e0:	4b54      	ldr	r3, [pc, #336]	@ (8003634 <HAL_RCC_OscConfig+0x604>)
 80034e2:	4958      	ldr	r1, [pc, #352]	@ (8003644 <HAL_RCC_OscConfig+0x614>)
 80034e4:	400a      	ands	r2, r1
 80034e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034e8:	f7fe fa8a 	bl	8001a00 <HAL_GetTick>
 80034ec:	0003      	movs	r3, r0
 80034ee:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034f0:	e008      	b.n	8003504 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034f2:	f7fe fa85 	bl	8001a00 <HAL_GetTick>
 80034f6:	0002      	movs	r2, r0
 80034f8:	693b      	ldr	r3, [r7, #16]
 80034fa:	1ad3      	subs	r3, r2, r3
 80034fc:	2b02      	cmp	r3, #2
 80034fe:	d901      	bls.n	8003504 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8003500:	2303      	movs	r3, #3
 8003502:	e092      	b.n	800362a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003504:	4b4b      	ldr	r3, [pc, #300]	@ (8003634 <HAL_RCC_OscConfig+0x604>)
 8003506:	681a      	ldr	r2, [r3, #0]
 8003508:	2380      	movs	r3, #128	@ 0x80
 800350a:	049b      	lsls	r3, r3, #18
 800350c:	4013      	ands	r3, r2
 800350e:	d1f0      	bne.n	80034f2 <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003510:	4b48      	ldr	r3, [pc, #288]	@ (8003634 <HAL_RCC_OscConfig+0x604>)
 8003512:	68db      	ldr	r3, [r3, #12]
 8003514:	4a4c      	ldr	r2, [pc, #304]	@ (8003648 <HAL_RCC_OscConfig+0x618>)
 8003516:	4013      	ands	r3, r2
 8003518:	0019      	movs	r1, r3
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6a1a      	ldr	r2, [r3, #32]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003522:	431a      	orrs	r2, r3
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003528:	021b      	lsls	r3, r3, #8
 800352a:	431a      	orrs	r2, r3
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003530:	431a      	orrs	r2, r3
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003536:	431a      	orrs	r2, r3
 8003538:	4b3e      	ldr	r3, [pc, #248]	@ (8003634 <HAL_RCC_OscConfig+0x604>)
 800353a:	430a      	orrs	r2, r1
 800353c:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800353e:	4b3d      	ldr	r3, [pc, #244]	@ (8003634 <HAL_RCC_OscConfig+0x604>)
 8003540:	681a      	ldr	r2, [r3, #0]
 8003542:	4b3c      	ldr	r3, [pc, #240]	@ (8003634 <HAL_RCC_OscConfig+0x604>)
 8003544:	2180      	movs	r1, #128	@ 0x80
 8003546:	0449      	lsls	r1, r1, #17
 8003548:	430a      	orrs	r2, r1
 800354a:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800354c:	4b39      	ldr	r3, [pc, #228]	@ (8003634 <HAL_RCC_OscConfig+0x604>)
 800354e:	68da      	ldr	r2, [r3, #12]
 8003550:	4b38      	ldr	r3, [pc, #224]	@ (8003634 <HAL_RCC_OscConfig+0x604>)
 8003552:	2180      	movs	r1, #128	@ 0x80
 8003554:	0549      	lsls	r1, r1, #21
 8003556:	430a      	orrs	r2, r1
 8003558:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800355a:	f7fe fa51 	bl	8001a00 <HAL_GetTick>
 800355e:	0003      	movs	r3, r0
 8003560:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003562:	e008      	b.n	8003576 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003564:	f7fe fa4c 	bl	8001a00 <HAL_GetTick>
 8003568:	0002      	movs	r2, r0
 800356a:	693b      	ldr	r3, [r7, #16]
 800356c:	1ad3      	subs	r3, r2, r3
 800356e:	2b02      	cmp	r3, #2
 8003570:	d901      	bls.n	8003576 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8003572:	2303      	movs	r3, #3
 8003574:	e059      	b.n	800362a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003576:	4b2f      	ldr	r3, [pc, #188]	@ (8003634 <HAL_RCC_OscConfig+0x604>)
 8003578:	681a      	ldr	r2, [r3, #0]
 800357a:	2380      	movs	r3, #128	@ 0x80
 800357c:	049b      	lsls	r3, r3, #18
 800357e:	4013      	ands	r3, r2
 8003580:	d0f0      	beq.n	8003564 <HAL_RCC_OscConfig+0x534>
 8003582:	e051      	b.n	8003628 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003584:	4b2b      	ldr	r3, [pc, #172]	@ (8003634 <HAL_RCC_OscConfig+0x604>)
 8003586:	681a      	ldr	r2, [r3, #0]
 8003588:	4b2a      	ldr	r3, [pc, #168]	@ (8003634 <HAL_RCC_OscConfig+0x604>)
 800358a:	492e      	ldr	r1, [pc, #184]	@ (8003644 <HAL_RCC_OscConfig+0x614>)
 800358c:	400a      	ands	r2, r1
 800358e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003590:	f7fe fa36 	bl	8001a00 <HAL_GetTick>
 8003594:	0003      	movs	r3, r0
 8003596:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003598:	e008      	b.n	80035ac <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800359a:	f7fe fa31 	bl	8001a00 <HAL_GetTick>
 800359e:	0002      	movs	r2, r0
 80035a0:	693b      	ldr	r3, [r7, #16]
 80035a2:	1ad3      	subs	r3, r2, r3
 80035a4:	2b02      	cmp	r3, #2
 80035a6:	d901      	bls.n	80035ac <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 80035a8:	2303      	movs	r3, #3
 80035aa:	e03e      	b.n	800362a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035ac:	4b21      	ldr	r3, [pc, #132]	@ (8003634 <HAL_RCC_OscConfig+0x604>)
 80035ae:	681a      	ldr	r2, [r3, #0]
 80035b0:	2380      	movs	r3, #128	@ 0x80
 80035b2:	049b      	lsls	r3, r3, #18
 80035b4:	4013      	ands	r3, r2
 80035b6:	d1f0      	bne.n	800359a <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 80035b8:	4b1e      	ldr	r3, [pc, #120]	@ (8003634 <HAL_RCC_OscConfig+0x604>)
 80035ba:	68da      	ldr	r2, [r3, #12]
 80035bc:	4b1d      	ldr	r3, [pc, #116]	@ (8003634 <HAL_RCC_OscConfig+0x604>)
 80035be:	4923      	ldr	r1, [pc, #140]	@ (800364c <HAL_RCC_OscConfig+0x61c>)
 80035c0:	400a      	ands	r2, r1
 80035c2:	60da      	str	r2, [r3, #12]
 80035c4:	e030      	b.n	8003628 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	69db      	ldr	r3, [r3, #28]
 80035ca:	2b01      	cmp	r3, #1
 80035cc:	d101      	bne.n	80035d2 <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 80035ce:	2301      	movs	r3, #1
 80035d0:	e02b      	b.n	800362a <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80035d2:	4b18      	ldr	r3, [pc, #96]	@ (8003634 <HAL_RCC_OscConfig+0x604>)
 80035d4:	68db      	ldr	r3, [r3, #12]
 80035d6:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035d8:	697b      	ldr	r3, [r7, #20]
 80035da:	2203      	movs	r2, #3
 80035dc:	401a      	ands	r2, r3
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6a1b      	ldr	r3, [r3, #32]
 80035e2:	429a      	cmp	r2, r3
 80035e4:	d11e      	bne.n	8003624 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80035e6:	697b      	ldr	r3, [r7, #20]
 80035e8:	2270      	movs	r2, #112	@ 0x70
 80035ea:	401a      	ands	r2, r3
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035f0:	429a      	cmp	r2, r3
 80035f2:	d117      	bne.n	8003624 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80035f4:	697a      	ldr	r2, [r7, #20]
 80035f6:	23fe      	movs	r3, #254	@ 0xfe
 80035f8:	01db      	lsls	r3, r3, #7
 80035fa:	401a      	ands	r2, r3
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003600:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003602:	429a      	cmp	r2, r3
 8003604:	d10e      	bne.n	8003624 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003606:	697a      	ldr	r2, [r7, #20]
 8003608:	23f8      	movs	r3, #248	@ 0xf8
 800360a:	039b      	lsls	r3, r3, #14
 800360c:	401a      	ands	r2, r3
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003612:	429a      	cmp	r2, r3
 8003614:	d106      	bne.n	8003624 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8003616:	697b      	ldr	r3, [r7, #20]
 8003618:	0f5b      	lsrs	r3, r3, #29
 800361a:	075a      	lsls	r2, r3, #29
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003620:	429a      	cmp	r2, r3
 8003622:	d001      	beq.n	8003628 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8003624:	2301      	movs	r3, #1
 8003626:	e000      	b.n	800362a <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8003628:	2300      	movs	r3, #0
}
 800362a:	0018      	movs	r0, r3
 800362c:	46bd      	mov	sp, r7
 800362e:	b008      	add	sp, #32
 8003630:	bd80      	pop	{r7, pc}
 8003632:	46c0      	nop			@ (mov r8, r8)
 8003634:	40021000 	.word	0x40021000
 8003638:	40007000 	.word	0x40007000
 800363c:	00001388 	.word	0x00001388
 8003640:	efffffff 	.word	0xefffffff
 8003644:	feffffff 	.word	0xfeffffff
 8003648:	1fc1808c 	.word	0x1fc1808c
 800364c:	effefffc 	.word	0xeffefffc

08003650 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b084      	sub	sp, #16
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
 8003658:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d101      	bne.n	8003664 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003660:	2301      	movs	r3, #1
 8003662:	e0e9      	b.n	8003838 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003664:	4b76      	ldr	r3, [pc, #472]	@ (8003840 <HAL_RCC_ClockConfig+0x1f0>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	2207      	movs	r2, #7
 800366a:	4013      	ands	r3, r2
 800366c:	683a      	ldr	r2, [r7, #0]
 800366e:	429a      	cmp	r2, r3
 8003670:	d91e      	bls.n	80036b0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003672:	4b73      	ldr	r3, [pc, #460]	@ (8003840 <HAL_RCC_ClockConfig+0x1f0>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	2207      	movs	r2, #7
 8003678:	4393      	bics	r3, r2
 800367a:	0019      	movs	r1, r3
 800367c:	4b70      	ldr	r3, [pc, #448]	@ (8003840 <HAL_RCC_ClockConfig+0x1f0>)
 800367e:	683a      	ldr	r2, [r7, #0]
 8003680:	430a      	orrs	r2, r1
 8003682:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003684:	f7fe f9bc 	bl	8001a00 <HAL_GetTick>
 8003688:	0003      	movs	r3, r0
 800368a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800368c:	e009      	b.n	80036a2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800368e:	f7fe f9b7 	bl	8001a00 <HAL_GetTick>
 8003692:	0002      	movs	r2, r0
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	1ad3      	subs	r3, r2, r3
 8003698:	4a6a      	ldr	r2, [pc, #424]	@ (8003844 <HAL_RCC_ClockConfig+0x1f4>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d901      	bls.n	80036a2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800369e:	2303      	movs	r3, #3
 80036a0:	e0ca      	b.n	8003838 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80036a2:	4b67      	ldr	r3, [pc, #412]	@ (8003840 <HAL_RCC_ClockConfig+0x1f0>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	2207      	movs	r2, #7
 80036a8:	4013      	ands	r3, r2
 80036aa:	683a      	ldr	r2, [r7, #0]
 80036ac:	429a      	cmp	r2, r3
 80036ae:	d1ee      	bne.n	800368e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	2202      	movs	r2, #2
 80036b6:	4013      	ands	r3, r2
 80036b8:	d015      	beq.n	80036e6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	2204      	movs	r2, #4
 80036c0:	4013      	ands	r3, r2
 80036c2:	d006      	beq.n	80036d2 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80036c4:	4b60      	ldr	r3, [pc, #384]	@ (8003848 <HAL_RCC_ClockConfig+0x1f8>)
 80036c6:	689a      	ldr	r2, [r3, #8]
 80036c8:	4b5f      	ldr	r3, [pc, #380]	@ (8003848 <HAL_RCC_ClockConfig+0x1f8>)
 80036ca:	21e0      	movs	r1, #224	@ 0xe0
 80036cc:	01c9      	lsls	r1, r1, #7
 80036ce:	430a      	orrs	r2, r1
 80036d0:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036d2:	4b5d      	ldr	r3, [pc, #372]	@ (8003848 <HAL_RCC_ClockConfig+0x1f8>)
 80036d4:	689b      	ldr	r3, [r3, #8]
 80036d6:	4a5d      	ldr	r2, [pc, #372]	@ (800384c <HAL_RCC_ClockConfig+0x1fc>)
 80036d8:	4013      	ands	r3, r2
 80036da:	0019      	movs	r1, r3
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	689a      	ldr	r2, [r3, #8]
 80036e0:	4b59      	ldr	r3, [pc, #356]	@ (8003848 <HAL_RCC_ClockConfig+0x1f8>)
 80036e2:	430a      	orrs	r2, r1
 80036e4:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	2201      	movs	r2, #1
 80036ec:	4013      	ands	r3, r2
 80036ee:	d057      	beq.n	80037a0 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	2b01      	cmp	r3, #1
 80036f6:	d107      	bne.n	8003708 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80036f8:	4b53      	ldr	r3, [pc, #332]	@ (8003848 <HAL_RCC_ClockConfig+0x1f8>)
 80036fa:	681a      	ldr	r2, [r3, #0]
 80036fc:	2380      	movs	r3, #128	@ 0x80
 80036fe:	029b      	lsls	r3, r3, #10
 8003700:	4013      	ands	r3, r2
 8003702:	d12b      	bne.n	800375c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003704:	2301      	movs	r3, #1
 8003706:	e097      	b.n	8003838 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	2b02      	cmp	r3, #2
 800370e:	d107      	bne.n	8003720 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003710:	4b4d      	ldr	r3, [pc, #308]	@ (8003848 <HAL_RCC_ClockConfig+0x1f8>)
 8003712:	681a      	ldr	r2, [r3, #0]
 8003714:	2380      	movs	r3, #128	@ 0x80
 8003716:	049b      	lsls	r3, r3, #18
 8003718:	4013      	ands	r3, r2
 800371a:	d11f      	bne.n	800375c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800371c:	2301      	movs	r3, #1
 800371e:	e08b      	b.n	8003838 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d107      	bne.n	8003738 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003728:	4b47      	ldr	r3, [pc, #284]	@ (8003848 <HAL_RCC_ClockConfig+0x1f8>)
 800372a:	681a      	ldr	r2, [r3, #0]
 800372c:	2380      	movs	r3, #128	@ 0x80
 800372e:	00db      	lsls	r3, r3, #3
 8003730:	4013      	ands	r3, r2
 8003732:	d113      	bne.n	800375c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003734:	2301      	movs	r3, #1
 8003736:	e07f      	b.n	8003838 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	2b03      	cmp	r3, #3
 800373e:	d106      	bne.n	800374e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003740:	4b41      	ldr	r3, [pc, #260]	@ (8003848 <HAL_RCC_ClockConfig+0x1f8>)
 8003742:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003744:	2202      	movs	r2, #2
 8003746:	4013      	ands	r3, r2
 8003748:	d108      	bne.n	800375c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800374a:	2301      	movs	r3, #1
 800374c:	e074      	b.n	8003838 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800374e:	4b3e      	ldr	r3, [pc, #248]	@ (8003848 <HAL_RCC_ClockConfig+0x1f8>)
 8003750:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003752:	2202      	movs	r2, #2
 8003754:	4013      	ands	r3, r2
 8003756:	d101      	bne.n	800375c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003758:	2301      	movs	r3, #1
 800375a:	e06d      	b.n	8003838 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800375c:	4b3a      	ldr	r3, [pc, #232]	@ (8003848 <HAL_RCC_ClockConfig+0x1f8>)
 800375e:	689b      	ldr	r3, [r3, #8]
 8003760:	2207      	movs	r2, #7
 8003762:	4393      	bics	r3, r2
 8003764:	0019      	movs	r1, r3
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	685a      	ldr	r2, [r3, #4]
 800376a:	4b37      	ldr	r3, [pc, #220]	@ (8003848 <HAL_RCC_ClockConfig+0x1f8>)
 800376c:	430a      	orrs	r2, r1
 800376e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003770:	f7fe f946 	bl	8001a00 <HAL_GetTick>
 8003774:	0003      	movs	r3, r0
 8003776:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003778:	e009      	b.n	800378e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800377a:	f7fe f941 	bl	8001a00 <HAL_GetTick>
 800377e:	0002      	movs	r2, r0
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	1ad3      	subs	r3, r2, r3
 8003784:	4a2f      	ldr	r2, [pc, #188]	@ (8003844 <HAL_RCC_ClockConfig+0x1f4>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d901      	bls.n	800378e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800378a:	2303      	movs	r3, #3
 800378c:	e054      	b.n	8003838 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800378e:	4b2e      	ldr	r3, [pc, #184]	@ (8003848 <HAL_RCC_ClockConfig+0x1f8>)
 8003790:	689b      	ldr	r3, [r3, #8]
 8003792:	2238      	movs	r2, #56	@ 0x38
 8003794:	401a      	ands	r2, r3
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	00db      	lsls	r3, r3, #3
 800379c:	429a      	cmp	r2, r3
 800379e:	d1ec      	bne.n	800377a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80037a0:	4b27      	ldr	r3, [pc, #156]	@ (8003840 <HAL_RCC_ClockConfig+0x1f0>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	2207      	movs	r2, #7
 80037a6:	4013      	ands	r3, r2
 80037a8:	683a      	ldr	r2, [r7, #0]
 80037aa:	429a      	cmp	r2, r3
 80037ac:	d21e      	bcs.n	80037ec <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037ae:	4b24      	ldr	r3, [pc, #144]	@ (8003840 <HAL_RCC_ClockConfig+0x1f0>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	2207      	movs	r2, #7
 80037b4:	4393      	bics	r3, r2
 80037b6:	0019      	movs	r1, r3
 80037b8:	4b21      	ldr	r3, [pc, #132]	@ (8003840 <HAL_RCC_ClockConfig+0x1f0>)
 80037ba:	683a      	ldr	r2, [r7, #0]
 80037bc:	430a      	orrs	r2, r1
 80037be:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80037c0:	f7fe f91e 	bl	8001a00 <HAL_GetTick>
 80037c4:	0003      	movs	r3, r0
 80037c6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80037c8:	e009      	b.n	80037de <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037ca:	f7fe f919 	bl	8001a00 <HAL_GetTick>
 80037ce:	0002      	movs	r2, r0
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	1ad3      	subs	r3, r2, r3
 80037d4:	4a1b      	ldr	r2, [pc, #108]	@ (8003844 <HAL_RCC_ClockConfig+0x1f4>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d901      	bls.n	80037de <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80037da:	2303      	movs	r3, #3
 80037dc:	e02c      	b.n	8003838 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80037de:	4b18      	ldr	r3, [pc, #96]	@ (8003840 <HAL_RCC_ClockConfig+0x1f0>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	2207      	movs	r2, #7
 80037e4:	4013      	ands	r3, r2
 80037e6:	683a      	ldr	r2, [r7, #0]
 80037e8:	429a      	cmp	r2, r3
 80037ea:	d1ee      	bne.n	80037ca <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	2204      	movs	r2, #4
 80037f2:	4013      	ands	r3, r2
 80037f4:	d009      	beq.n	800380a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80037f6:	4b14      	ldr	r3, [pc, #80]	@ (8003848 <HAL_RCC_ClockConfig+0x1f8>)
 80037f8:	689b      	ldr	r3, [r3, #8]
 80037fa:	4a15      	ldr	r2, [pc, #84]	@ (8003850 <HAL_RCC_ClockConfig+0x200>)
 80037fc:	4013      	ands	r3, r2
 80037fe:	0019      	movs	r1, r3
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	68da      	ldr	r2, [r3, #12]
 8003804:	4b10      	ldr	r3, [pc, #64]	@ (8003848 <HAL_RCC_ClockConfig+0x1f8>)
 8003806:	430a      	orrs	r2, r1
 8003808:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800380a:	f000 f829 	bl	8003860 <HAL_RCC_GetSysClockFreq>
 800380e:	0001      	movs	r1, r0
 8003810:	4b0d      	ldr	r3, [pc, #52]	@ (8003848 <HAL_RCC_ClockConfig+0x1f8>)
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	0a1b      	lsrs	r3, r3, #8
 8003816:	220f      	movs	r2, #15
 8003818:	401a      	ands	r2, r3
 800381a:	4b0e      	ldr	r3, [pc, #56]	@ (8003854 <HAL_RCC_ClockConfig+0x204>)
 800381c:	0092      	lsls	r2, r2, #2
 800381e:	58d3      	ldr	r3, [r2, r3]
 8003820:	221f      	movs	r2, #31
 8003822:	4013      	ands	r3, r2
 8003824:	000a      	movs	r2, r1
 8003826:	40da      	lsrs	r2, r3
 8003828:	4b0b      	ldr	r3, [pc, #44]	@ (8003858 <HAL_RCC_ClockConfig+0x208>)
 800382a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800382c:	4b0b      	ldr	r3, [pc, #44]	@ (800385c <HAL_RCC_ClockConfig+0x20c>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	0018      	movs	r0, r3
 8003832:	f7fe f889 	bl	8001948 <HAL_InitTick>
 8003836:	0003      	movs	r3, r0
}
 8003838:	0018      	movs	r0, r3
 800383a:	46bd      	mov	sp, r7
 800383c:	b004      	add	sp, #16
 800383e:	bd80      	pop	{r7, pc}
 8003840:	40022000 	.word	0x40022000
 8003844:	00001388 	.word	0x00001388
 8003848:	40021000 	.word	0x40021000
 800384c:	fffff0ff 	.word	0xfffff0ff
 8003850:	ffff8fff 	.word	0xffff8fff
 8003854:	08006294 	.word	0x08006294
 8003858:	20000018 	.word	0x20000018
 800385c:	2000001c 	.word	0x2000001c

08003860 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b086      	sub	sp, #24
 8003864:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003866:	4b3c      	ldr	r3, [pc, #240]	@ (8003958 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003868:	689b      	ldr	r3, [r3, #8]
 800386a:	2238      	movs	r2, #56	@ 0x38
 800386c:	4013      	ands	r3, r2
 800386e:	d10f      	bne.n	8003890 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8003870:	4b39      	ldr	r3, [pc, #228]	@ (8003958 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	0adb      	lsrs	r3, r3, #11
 8003876:	2207      	movs	r2, #7
 8003878:	4013      	ands	r3, r2
 800387a:	2201      	movs	r2, #1
 800387c:	409a      	lsls	r2, r3
 800387e:	0013      	movs	r3, r2
 8003880:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8003882:	6839      	ldr	r1, [r7, #0]
 8003884:	4835      	ldr	r0, [pc, #212]	@ (800395c <HAL_RCC_GetSysClockFreq+0xfc>)
 8003886:	f7fc fc97 	bl	80001b8 <__udivsi3>
 800388a:	0003      	movs	r3, r0
 800388c:	613b      	str	r3, [r7, #16]
 800388e:	e05d      	b.n	800394c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003890:	4b31      	ldr	r3, [pc, #196]	@ (8003958 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003892:	689b      	ldr	r3, [r3, #8]
 8003894:	2238      	movs	r2, #56	@ 0x38
 8003896:	4013      	ands	r3, r2
 8003898:	2b08      	cmp	r3, #8
 800389a:	d102      	bne.n	80038a2 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800389c:	4b30      	ldr	r3, [pc, #192]	@ (8003960 <HAL_RCC_GetSysClockFreq+0x100>)
 800389e:	613b      	str	r3, [r7, #16]
 80038a0:	e054      	b.n	800394c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80038a2:	4b2d      	ldr	r3, [pc, #180]	@ (8003958 <HAL_RCC_GetSysClockFreq+0xf8>)
 80038a4:	689b      	ldr	r3, [r3, #8]
 80038a6:	2238      	movs	r2, #56	@ 0x38
 80038a8:	4013      	ands	r3, r2
 80038aa:	2b10      	cmp	r3, #16
 80038ac:	d138      	bne.n	8003920 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80038ae:	4b2a      	ldr	r3, [pc, #168]	@ (8003958 <HAL_RCC_GetSysClockFreq+0xf8>)
 80038b0:	68db      	ldr	r3, [r3, #12]
 80038b2:	2203      	movs	r2, #3
 80038b4:	4013      	ands	r3, r2
 80038b6:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80038b8:	4b27      	ldr	r3, [pc, #156]	@ (8003958 <HAL_RCC_GetSysClockFreq+0xf8>)
 80038ba:	68db      	ldr	r3, [r3, #12]
 80038bc:	091b      	lsrs	r3, r3, #4
 80038be:	2207      	movs	r2, #7
 80038c0:	4013      	ands	r3, r2
 80038c2:	3301      	adds	r3, #1
 80038c4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	2b03      	cmp	r3, #3
 80038ca:	d10d      	bne.n	80038e8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80038cc:	68b9      	ldr	r1, [r7, #8]
 80038ce:	4824      	ldr	r0, [pc, #144]	@ (8003960 <HAL_RCC_GetSysClockFreq+0x100>)
 80038d0:	f7fc fc72 	bl	80001b8 <__udivsi3>
 80038d4:	0003      	movs	r3, r0
 80038d6:	0019      	movs	r1, r3
 80038d8:	4b1f      	ldr	r3, [pc, #124]	@ (8003958 <HAL_RCC_GetSysClockFreq+0xf8>)
 80038da:	68db      	ldr	r3, [r3, #12]
 80038dc:	0a1b      	lsrs	r3, r3, #8
 80038de:	227f      	movs	r2, #127	@ 0x7f
 80038e0:	4013      	ands	r3, r2
 80038e2:	434b      	muls	r3, r1
 80038e4:	617b      	str	r3, [r7, #20]
        break;
 80038e6:	e00d      	b.n	8003904 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80038e8:	68b9      	ldr	r1, [r7, #8]
 80038ea:	481c      	ldr	r0, [pc, #112]	@ (800395c <HAL_RCC_GetSysClockFreq+0xfc>)
 80038ec:	f7fc fc64 	bl	80001b8 <__udivsi3>
 80038f0:	0003      	movs	r3, r0
 80038f2:	0019      	movs	r1, r3
 80038f4:	4b18      	ldr	r3, [pc, #96]	@ (8003958 <HAL_RCC_GetSysClockFreq+0xf8>)
 80038f6:	68db      	ldr	r3, [r3, #12]
 80038f8:	0a1b      	lsrs	r3, r3, #8
 80038fa:	227f      	movs	r2, #127	@ 0x7f
 80038fc:	4013      	ands	r3, r2
 80038fe:	434b      	muls	r3, r1
 8003900:	617b      	str	r3, [r7, #20]
        break;
 8003902:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8003904:	4b14      	ldr	r3, [pc, #80]	@ (8003958 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003906:	68db      	ldr	r3, [r3, #12]
 8003908:	0f5b      	lsrs	r3, r3, #29
 800390a:	2207      	movs	r2, #7
 800390c:	4013      	ands	r3, r2
 800390e:	3301      	adds	r3, #1
 8003910:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8003912:	6879      	ldr	r1, [r7, #4]
 8003914:	6978      	ldr	r0, [r7, #20]
 8003916:	f7fc fc4f 	bl	80001b8 <__udivsi3>
 800391a:	0003      	movs	r3, r0
 800391c:	613b      	str	r3, [r7, #16]
 800391e:	e015      	b.n	800394c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003920:	4b0d      	ldr	r3, [pc, #52]	@ (8003958 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003922:	689b      	ldr	r3, [r3, #8]
 8003924:	2238      	movs	r2, #56	@ 0x38
 8003926:	4013      	ands	r3, r2
 8003928:	2b20      	cmp	r3, #32
 800392a:	d103      	bne.n	8003934 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800392c:	2380      	movs	r3, #128	@ 0x80
 800392e:	021b      	lsls	r3, r3, #8
 8003930:	613b      	str	r3, [r7, #16]
 8003932:	e00b      	b.n	800394c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003934:	4b08      	ldr	r3, [pc, #32]	@ (8003958 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003936:	689b      	ldr	r3, [r3, #8]
 8003938:	2238      	movs	r2, #56	@ 0x38
 800393a:	4013      	ands	r3, r2
 800393c:	2b18      	cmp	r3, #24
 800393e:	d103      	bne.n	8003948 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8003940:	23fa      	movs	r3, #250	@ 0xfa
 8003942:	01db      	lsls	r3, r3, #7
 8003944:	613b      	str	r3, [r7, #16]
 8003946:	e001      	b.n	800394c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8003948:	2300      	movs	r3, #0
 800394a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800394c:	693b      	ldr	r3, [r7, #16]
}
 800394e:	0018      	movs	r0, r3
 8003950:	46bd      	mov	sp, r7
 8003952:	b006      	add	sp, #24
 8003954:	bd80      	pop	{r7, pc}
 8003956:	46c0      	nop			@ (mov r8, r8)
 8003958:	40021000 	.word	0x40021000
 800395c:	00f42400 	.word	0x00f42400
 8003960:	007a1200 	.word	0x007a1200

08003964 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b086      	sub	sp, #24
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 800396c:	2313      	movs	r3, #19
 800396e:	18fb      	adds	r3, r7, r3
 8003970:	2200      	movs	r2, #0
 8003972:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003974:	2312      	movs	r3, #18
 8003976:	18fb      	adds	r3, r7, r3
 8003978:	2200      	movs	r2, #0
 800397a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681a      	ldr	r2, [r3, #0]
 8003980:	2380      	movs	r3, #128	@ 0x80
 8003982:	029b      	lsls	r3, r3, #10
 8003984:	4013      	ands	r3, r2
 8003986:	d100      	bne.n	800398a <HAL_RCCEx_PeriphCLKConfig+0x26>
 8003988:	e0a3      	b.n	8003ad2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800398a:	2011      	movs	r0, #17
 800398c:	183b      	adds	r3, r7, r0
 800398e:	2200      	movs	r2, #0
 8003990:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003992:	4b86      	ldr	r3, [pc, #536]	@ (8003bac <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003994:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003996:	2380      	movs	r3, #128	@ 0x80
 8003998:	055b      	lsls	r3, r3, #21
 800399a:	4013      	ands	r3, r2
 800399c:	d110      	bne.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800399e:	4b83      	ldr	r3, [pc, #524]	@ (8003bac <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80039a0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80039a2:	4b82      	ldr	r3, [pc, #520]	@ (8003bac <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80039a4:	2180      	movs	r1, #128	@ 0x80
 80039a6:	0549      	lsls	r1, r1, #21
 80039a8:	430a      	orrs	r2, r1
 80039aa:	63da      	str	r2, [r3, #60]	@ 0x3c
 80039ac:	4b7f      	ldr	r3, [pc, #508]	@ (8003bac <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80039ae:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80039b0:	2380      	movs	r3, #128	@ 0x80
 80039b2:	055b      	lsls	r3, r3, #21
 80039b4:	4013      	ands	r3, r2
 80039b6:	60bb      	str	r3, [r7, #8]
 80039b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039ba:	183b      	adds	r3, r7, r0
 80039bc:	2201      	movs	r2, #1
 80039be:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80039c0:	4b7b      	ldr	r3, [pc, #492]	@ (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80039c2:	681a      	ldr	r2, [r3, #0]
 80039c4:	4b7a      	ldr	r3, [pc, #488]	@ (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80039c6:	2180      	movs	r1, #128	@ 0x80
 80039c8:	0049      	lsls	r1, r1, #1
 80039ca:	430a      	orrs	r2, r1
 80039cc:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80039ce:	f7fe f817 	bl	8001a00 <HAL_GetTick>
 80039d2:	0003      	movs	r3, r0
 80039d4:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80039d6:	e00b      	b.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039d8:	f7fe f812 	bl	8001a00 <HAL_GetTick>
 80039dc:	0002      	movs	r2, r0
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	1ad3      	subs	r3, r2, r3
 80039e2:	2b02      	cmp	r3, #2
 80039e4:	d904      	bls.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80039e6:	2313      	movs	r3, #19
 80039e8:	18fb      	adds	r3, r7, r3
 80039ea:	2203      	movs	r2, #3
 80039ec:	701a      	strb	r2, [r3, #0]
        break;
 80039ee:	e005      	b.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80039f0:	4b6f      	ldr	r3, [pc, #444]	@ (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80039f2:	681a      	ldr	r2, [r3, #0]
 80039f4:	2380      	movs	r3, #128	@ 0x80
 80039f6:	005b      	lsls	r3, r3, #1
 80039f8:	4013      	ands	r3, r2
 80039fa:	d0ed      	beq.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80039fc:	2313      	movs	r3, #19
 80039fe:	18fb      	adds	r3, r7, r3
 8003a00:	781b      	ldrb	r3, [r3, #0]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d154      	bne.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003a06:	4b69      	ldr	r3, [pc, #420]	@ (8003bac <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003a08:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003a0a:	23c0      	movs	r3, #192	@ 0xc0
 8003a0c:	009b      	lsls	r3, r3, #2
 8003a0e:	4013      	ands	r3, r2
 8003a10:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003a12:	697b      	ldr	r3, [r7, #20]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d019      	beq.n	8003a4c <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	699b      	ldr	r3, [r3, #24]
 8003a1c:	697a      	ldr	r2, [r7, #20]
 8003a1e:	429a      	cmp	r2, r3
 8003a20:	d014      	beq.n	8003a4c <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003a22:	4b62      	ldr	r3, [pc, #392]	@ (8003bac <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003a24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a26:	4a63      	ldr	r2, [pc, #396]	@ (8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8003a28:	4013      	ands	r3, r2
 8003a2a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003a2c:	4b5f      	ldr	r3, [pc, #380]	@ (8003bac <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003a2e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003a30:	4b5e      	ldr	r3, [pc, #376]	@ (8003bac <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003a32:	2180      	movs	r1, #128	@ 0x80
 8003a34:	0249      	lsls	r1, r1, #9
 8003a36:	430a      	orrs	r2, r1
 8003a38:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003a3a:	4b5c      	ldr	r3, [pc, #368]	@ (8003bac <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003a3c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003a3e:	4b5b      	ldr	r3, [pc, #364]	@ (8003bac <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003a40:	495d      	ldr	r1, [pc, #372]	@ (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003a42:	400a      	ands	r2, r1
 8003a44:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003a46:	4b59      	ldr	r3, [pc, #356]	@ (8003bac <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003a48:	697a      	ldr	r2, [r7, #20]
 8003a4a:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003a4c:	697b      	ldr	r3, [r7, #20]
 8003a4e:	2201      	movs	r2, #1
 8003a50:	4013      	ands	r3, r2
 8003a52:	d016      	beq.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a54:	f7fd ffd4 	bl	8001a00 <HAL_GetTick>
 8003a58:	0003      	movs	r3, r0
 8003a5a:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a5c:	e00c      	b.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a5e:	f7fd ffcf 	bl	8001a00 <HAL_GetTick>
 8003a62:	0002      	movs	r2, r0
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	1ad3      	subs	r3, r2, r3
 8003a68:	4a54      	ldr	r2, [pc, #336]	@ (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d904      	bls.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8003a6e:	2313      	movs	r3, #19
 8003a70:	18fb      	adds	r3, r7, r3
 8003a72:	2203      	movs	r2, #3
 8003a74:	701a      	strb	r2, [r3, #0]
            break;
 8003a76:	e004      	b.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a78:	4b4c      	ldr	r3, [pc, #304]	@ (8003bac <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003a7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a7c:	2202      	movs	r2, #2
 8003a7e:	4013      	ands	r3, r2
 8003a80:	d0ed      	beq.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8003a82:	2313      	movs	r3, #19
 8003a84:	18fb      	adds	r3, r7, r3
 8003a86:	781b      	ldrb	r3, [r3, #0]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d10a      	bne.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a8c:	4b47      	ldr	r3, [pc, #284]	@ (8003bac <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003a8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a90:	4a48      	ldr	r2, [pc, #288]	@ (8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8003a92:	4013      	ands	r3, r2
 8003a94:	0019      	movs	r1, r3
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	699a      	ldr	r2, [r3, #24]
 8003a9a:	4b44      	ldr	r3, [pc, #272]	@ (8003bac <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003a9c:	430a      	orrs	r2, r1
 8003a9e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003aa0:	e00c      	b.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003aa2:	2312      	movs	r3, #18
 8003aa4:	18fb      	adds	r3, r7, r3
 8003aa6:	2213      	movs	r2, #19
 8003aa8:	18ba      	adds	r2, r7, r2
 8003aaa:	7812      	ldrb	r2, [r2, #0]
 8003aac:	701a      	strb	r2, [r3, #0]
 8003aae:	e005      	b.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ab0:	2312      	movs	r3, #18
 8003ab2:	18fb      	adds	r3, r7, r3
 8003ab4:	2213      	movs	r2, #19
 8003ab6:	18ba      	adds	r2, r7, r2
 8003ab8:	7812      	ldrb	r2, [r2, #0]
 8003aba:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003abc:	2311      	movs	r3, #17
 8003abe:	18fb      	adds	r3, r7, r3
 8003ac0:	781b      	ldrb	r3, [r3, #0]
 8003ac2:	2b01      	cmp	r3, #1
 8003ac4:	d105      	bne.n	8003ad2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ac6:	4b39      	ldr	r3, [pc, #228]	@ (8003bac <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003ac8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003aca:	4b38      	ldr	r3, [pc, #224]	@ (8003bac <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003acc:	493c      	ldr	r1, [pc, #240]	@ (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003ace:	400a      	ands	r2, r1
 8003ad0:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	2201      	movs	r2, #1
 8003ad8:	4013      	ands	r3, r2
 8003ada:	d009      	beq.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003adc:	4b33      	ldr	r3, [pc, #204]	@ (8003bac <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003ade:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ae0:	2203      	movs	r2, #3
 8003ae2:	4393      	bics	r3, r2
 8003ae4:	0019      	movs	r1, r3
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	685a      	ldr	r2, [r3, #4]
 8003aea:	4b30      	ldr	r3, [pc, #192]	@ (8003bac <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003aec:	430a      	orrs	r2, r1
 8003aee:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	2202      	movs	r2, #2
 8003af6:	4013      	ands	r3, r2
 8003af8:	d009      	beq.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003afa:	4b2c      	ldr	r3, [pc, #176]	@ (8003bac <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003afc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003afe:	220c      	movs	r2, #12
 8003b00:	4393      	bics	r3, r2
 8003b02:	0019      	movs	r1, r3
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	689a      	ldr	r2, [r3, #8]
 8003b08:	4b28      	ldr	r3, [pc, #160]	@ (8003bac <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003b0a:	430a      	orrs	r2, r1
 8003b0c:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	2220      	movs	r2, #32
 8003b14:	4013      	ands	r3, r2
 8003b16:	d009      	beq.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003b18:	4b24      	ldr	r3, [pc, #144]	@ (8003bac <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003b1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b1c:	4a29      	ldr	r2, [pc, #164]	@ (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b1e:	4013      	ands	r3, r2
 8003b20:	0019      	movs	r1, r3
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	68da      	ldr	r2, [r3, #12]
 8003b26:	4b21      	ldr	r3, [pc, #132]	@ (8003bac <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003b28:	430a      	orrs	r2, r1
 8003b2a:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681a      	ldr	r2, [r3, #0]
 8003b30:	2380      	movs	r3, #128	@ 0x80
 8003b32:	01db      	lsls	r3, r3, #7
 8003b34:	4013      	ands	r3, r2
 8003b36:	d015      	beq.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003b38:	4b1c      	ldr	r3, [pc, #112]	@ (8003bac <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003b3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b3c:	009b      	lsls	r3, r3, #2
 8003b3e:	0899      	lsrs	r1, r3, #2
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	695a      	ldr	r2, [r3, #20]
 8003b44:	4b19      	ldr	r3, [pc, #100]	@ (8003bac <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003b46:	430a      	orrs	r2, r1
 8003b48:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	695a      	ldr	r2, [r3, #20]
 8003b4e:	2380      	movs	r3, #128	@ 0x80
 8003b50:	05db      	lsls	r3, r3, #23
 8003b52:	429a      	cmp	r2, r3
 8003b54:	d106      	bne.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003b56:	4b15      	ldr	r3, [pc, #84]	@ (8003bac <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003b58:	68da      	ldr	r2, [r3, #12]
 8003b5a:	4b14      	ldr	r3, [pc, #80]	@ (8003bac <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003b5c:	2180      	movs	r1, #128	@ 0x80
 8003b5e:	0249      	lsls	r1, r1, #9
 8003b60:	430a      	orrs	r2, r1
 8003b62:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681a      	ldr	r2, [r3, #0]
 8003b68:	2380      	movs	r3, #128	@ 0x80
 8003b6a:	011b      	lsls	r3, r3, #4
 8003b6c:	4013      	ands	r3, r2
 8003b6e:	d016      	beq.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8003b70:	4b0e      	ldr	r3, [pc, #56]	@ (8003bac <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003b72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b74:	4a14      	ldr	r2, [pc, #80]	@ (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003b76:	4013      	ands	r3, r2
 8003b78:	0019      	movs	r1, r3
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	691a      	ldr	r2, [r3, #16]
 8003b7e:	4b0b      	ldr	r3, [pc, #44]	@ (8003bac <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003b80:	430a      	orrs	r2, r1
 8003b82:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	691a      	ldr	r2, [r3, #16]
 8003b88:	2380      	movs	r3, #128	@ 0x80
 8003b8a:	01db      	lsls	r3, r3, #7
 8003b8c:	429a      	cmp	r2, r3
 8003b8e:	d106      	bne.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x23a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003b90:	4b06      	ldr	r3, [pc, #24]	@ (8003bac <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003b92:	68da      	ldr	r2, [r3, #12]
 8003b94:	4b05      	ldr	r3, [pc, #20]	@ (8003bac <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003b96:	2180      	movs	r1, #128	@ 0x80
 8003b98:	0249      	lsls	r1, r1, #9
 8003b9a:	430a      	orrs	r2, r1
 8003b9c:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8003b9e:	2312      	movs	r3, #18
 8003ba0:	18fb      	adds	r3, r7, r3
 8003ba2:	781b      	ldrb	r3, [r3, #0]
}
 8003ba4:	0018      	movs	r0, r3
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	b006      	add	sp, #24
 8003baa:	bd80      	pop	{r7, pc}
 8003bac:	40021000 	.word	0x40021000
 8003bb0:	40007000 	.word	0x40007000
 8003bb4:	fffffcff 	.word	0xfffffcff
 8003bb8:	fffeffff 	.word	0xfffeffff
 8003bbc:	00001388 	.word	0x00001388
 8003bc0:	efffffff 	.word	0xefffffff
 8003bc4:	ffffcfff 	.word	0xffffcfff
 8003bc8:	ffff3fff 	.word	0xffff3fff

08003bcc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b082      	sub	sp, #8
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d101      	bne.n	8003bde <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	e04a      	b.n	8003c74 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	223d      	movs	r2, #61	@ 0x3d
 8003be2:	5c9b      	ldrb	r3, [r3, r2]
 8003be4:	b2db      	uxtb	r3, r3
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d107      	bne.n	8003bfa <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	223c      	movs	r2, #60	@ 0x3c
 8003bee:	2100      	movs	r1, #0
 8003bf0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	0018      	movs	r0, r3
 8003bf6:	f7fd fd8b 	bl	8001710 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	223d      	movs	r2, #61	@ 0x3d
 8003bfe:	2102      	movs	r1, #2
 8003c00:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681a      	ldr	r2, [r3, #0]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	3304      	adds	r3, #4
 8003c0a:	0019      	movs	r1, r3
 8003c0c:	0010      	movs	r0, r2
 8003c0e:	f000 fa6b 	bl	80040e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2248      	movs	r2, #72	@ 0x48
 8003c16:	2101      	movs	r1, #1
 8003c18:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	223e      	movs	r2, #62	@ 0x3e
 8003c1e:	2101      	movs	r1, #1
 8003c20:	5499      	strb	r1, [r3, r2]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	223f      	movs	r2, #63	@ 0x3f
 8003c26:	2101      	movs	r1, #1
 8003c28:	5499      	strb	r1, [r3, r2]
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2240      	movs	r2, #64	@ 0x40
 8003c2e:	2101      	movs	r1, #1
 8003c30:	5499      	strb	r1, [r3, r2]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2241      	movs	r2, #65	@ 0x41
 8003c36:	2101      	movs	r1, #1
 8003c38:	5499      	strb	r1, [r3, r2]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2242      	movs	r2, #66	@ 0x42
 8003c3e:	2101      	movs	r1, #1
 8003c40:	5499      	strb	r1, [r3, r2]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2243      	movs	r2, #67	@ 0x43
 8003c46:	2101      	movs	r1, #1
 8003c48:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2244      	movs	r2, #68	@ 0x44
 8003c4e:	2101      	movs	r1, #1
 8003c50:	5499      	strb	r1, [r3, r2]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2245      	movs	r2, #69	@ 0x45
 8003c56:	2101      	movs	r1, #1
 8003c58:	5499      	strb	r1, [r3, r2]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2246      	movs	r2, #70	@ 0x46
 8003c5e:	2101      	movs	r1, #1
 8003c60:	5499      	strb	r1, [r3, r2]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2247      	movs	r2, #71	@ 0x47
 8003c66:	2101      	movs	r1, #1
 8003c68:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	223d      	movs	r2, #61	@ 0x3d
 8003c6e:	2101      	movs	r1, #1
 8003c70:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003c72:	2300      	movs	r3, #0
}
 8003c74:	0018      	movs	r0, r3
 8003c76:	46bd      	mov	sp, r7
 8003c78:	b002      	add	sp, #8
 8003c7a:	bd80      	pop	{r7, pc}

08003c7c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b082      	sub	sp, #8
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d101      	bne.n	8003c8e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	e04a      	b.n	8003d24 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	223d      	movs	r2, #61	@ 0x3d
 8003c92:	5c9b      	ldrb	r3, [r3, r2]
 8003c94:	b2db      	uxtb	r3, r3
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d107      	bne.n	8003caa <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	223c      	movs	r2, #60	@ 0x3c
 8003c9e:	2100      	movs	r1, #0
 8003ca0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	0018      	movs	r0, r3
 8003ca6:	f000 f841 	bl	8003d2c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	223d      	movs	r2, #61	@ 0x3d
 8003cae:	2102      	movs	r1, #2
 8003cb0:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681a      	ldr	r2, [r3, #0]
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	3304      	adds	r3, #4
 8003cba:	0019      	movs	r1, r3
 8003cbc:	0010      	movs	r0, r2
 8003cbe:	f000 fa13 	bl	80040e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2248      	movs	r2, #72	@ 0x48
 8003cc6:	2101      	movs	r1, #1
 8003cc8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	223e      	movs	r2, #62	@ 0x3e
 8003cce:	2101      	movs	r1, #1
 8003cd0:	5499      	strb	r1, [r3, r2]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	223f      	movs	r2, #63	@ 0x3f
 8003cd6:	2101      	movs	r1, #1
 8003cd8:	5499      	strb	r1, [r3, r2]
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2240      	movs	r2, #64	@ 0x40
 8003cde:	2101      	movs	r1, #1
 8003ce0:	5499      	strb	r1, [r3, r2]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2241      	movs	r2, #65	@ 0x41
 8003ce6:	2101      	movs	r1, #1
 8003ce8:	5499      	strb	r1, [r3, r2]
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2242      	movs	r2, #66	@ 0x42
 8003cee:	2101      	movs	r1, #1
 8003cf0:	5499      	strb	r1, [r3, r2]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2243      	movs	r2, #67	@ 0x43
 8003cf6:	2101      	movs	r1, #1
 8003cf8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2244      	movs	r2, #68	@ 0x44
 8003cfe:	2101      	movs	r1, #1
 8003d00:	5499      	strb	r1, [r3, r2]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2245      	movs	r2, #69	@ 0x45
 8003d06:	2101      	movs	r1, #1
 8003d08:	5499      	strb	r1, [r3, r2]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2246      	movs	r2, #70	@ 0x46
 8003d0e:	2101      	movs	r1, #1
 8003d10:	5499      	strb	r1, [r3, r2]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2247      	movs	r2, #71	@ 0x47
 8003d16:	2101      	movs	r1, #1
 8003d18:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	223d      	movs	r2, #61	@ 0x3d
 8003d1e:	2101      	movs	r1, #1
 8003d20:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003d22:	2300      	movs	r3, #0
}
 8003d24:	0018      	movs	r0, r3
 8003d26:	46bd      	mov	sp, r7
 8003d28:	b002      	add	sp, #8
 8003d2a:	bd80      	pop	{r7, pc}

08003d2c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b082      	sub	sp, #8
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003d34:	46c0      	nop			@ (mov r8, r8)
 8003d36:	46bd      	mov	sp, r7
 8003d38:	b002      	add	sp, #8
 8003d3a:	bd80      	pop	{r7, pc}

08003d3c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b086      	sub	sp, #24
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	60f8      	str	r0, [r7, #12]
 8003d44:	60b9      	str	r1, [r7, #8]
 8003d46:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d48:	2317      	movs	r3, #23
 8003d4a:	18fb      	adds	r3, r7, r3
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	223c      	movs	r2, #60	@ 0x3c
 8003d54:	5c9b      	ldrb	r3, [r3, r2]
 8003d56:	2b01      	cmp	r3, #1
 8003d58:	d101      	bne.n	8003d5e <HAL_TIM_PWM_ConfigChannel+0x22>
 8003d5a:	2302      	movs	r3, #2
 8003d5c:	e0e5      	b.n	8003f2a <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	223c      	movs	r2, #60	@ 0x3c
 8003d62:	2101      	movs	r1, #1
 8003d64:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2b14      	cmp	r3, #20
 8003d6a:	d900      	bls.n	8003d6e <HAL_TIM_PWM_ConfigChannel+0x32>
 8003d6c:	e0d1      	b.n	8003f12 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	009a      	lsls	r2, r3, #2
 8003d72:	4b70      	ldr	r3, [pc, #448]	@ (8003f34 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8003d74:	18d3      	adds	r3, r2, r3
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	68ba      	ldr	r2, [r7, #8]
 8003d80:	0011      	movs	r1, r2
 8003d82:	0018      	movs	r0, r3
 8003d84:	f000 fa34 	bl	80041f0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	699a      	ldr	r2, [r3, #24]
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	2108      	movs	r1, #8
 8003d94:	430a      	orrs	r2, r1
 8003d96:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	699a      	ldr	r2, [r3, #24]
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	2104      	movs	r1, #4
 8003da4:	438a      	bics	r2, r1
 8003da6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	6999      	ldr	r1, [r3, #24]
 8003dae:	68bb      	ldr	r3, [r7, #8]
 8003db0:	691a      	ldr	r2, [r3, #16]
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	430a      	orrs	r2, r1
 8003db8:	619a      	str	r2, [r3, #24]
      break;
 8003dba:	e0af      	b.n	8003f1c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	68ba      	ldr	r2, [r7, #8]
 8003dc2:	0011      	movs	r1, r2
 8003dc4:	0018      	movs	r0, r3
 8003dc6:	f000 fa9d 	bl	8004304 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	699a      	ldr	r2, [r3, #24]
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	2180      	movs	r1, #128	@ 0x80
 8003dd6:	0109      	lsls	r1, r1, #4
 8003dd8:	430a      	orrs	r2, r1
 8003dda:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	699a      	ldr	r2, [r3, #24]
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4954      	ldr	r1, [pc, #336]	@ (8003f38 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003de8:	400a      	ands	r2, r1
 8003dea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	6999      	ldr	r1, [r3, #24]
 8003df2:	68bb      	ldr	r3, [r7, #8]
 8003df4:	691b      	ldr	r3, [r3, #16]
 8003df6:	021a      	lsls	r2, r3, #8
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	430a      	orrs	r2, r1
 8003dfe:	619a      	str	r2, [r3, #24]
      break;
 8003e00:	e08c      	b.n	8003f1c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	68ba      	ldr	r2, [r7, #8]
 8003e08:	0011      	movs	r1, r2
 8003e0a:	0018      	movs	r0, r3
 8003e0c:	f000 fafe 	bl	800440c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	69da      	ldr	r2, [r3, #28]
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	2108      	movs	r1, #8
 8003e1c:	430a      	orrs	r2, r1
 8003e1e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	69da      	ldr	r2, [r3, #28]
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	2104      	movs	r1, #4
 8003e2c:	438a      	bics	r2, r1
 8003e2e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	69d9      	ldr	r1, [r3, #28]
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	691a      	ldr	r2, [r3, #16]
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	430a      	orrs	r2, r1
 8003e40:	61da      	str	r2, [r3, #28]
      break;
 8003e42:	e06b      	b.n	8003f1c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	68ba      	ldr	r2, [r7, #8]
 8003e4a:	0011      	movs	r1, r2
 8003e4c:	0018      	movs	r0, r3
 8003e4e:	f000 fb65 	bl	800451c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	69da      	ldr	r2, [r3, #28]
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	2180      	movs	r1, #128	@ 0x80
 8003e5e:	0109      	lsls	r1, r1, #4
 8003e60:	430a      	orrs	r2, r1
 8003e62:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	69da      	ldr	r2, [r3, #28]
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4932      	ldr	r1, [pc, #200]	@ (8003f38 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003e70:	400a      	ands	r2, r1
 8003e72:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	69d9      	ldr	r1, [r3, #28]
 8003e7a:	68bb      	ldr	r3, [r7, #8]
 8003e7c:	691b      	ldr	r3, [r3, #16]
 8003e7e:	021a      	lsls	r2, r3, #8
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	430a      	orrs	r2, r1
 8003e86:	61da      	str	r2, [r3, #28]
      break;
 8003e88:	e048      	b.n	8003f1c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	68ba      	ldr	r2, [r7, #8]
 8003e90:	0011      	movs	r1, r2
 8003e92:	0018      	movs	r0, r3
 8003e94:	f000 fbac 	bl	80045f0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	2108      	movs	r1, #8
 8003ea4:	430a      	orrs	r2, r1
 8003ea6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	2104      	movs	r1, #4
 8003eb4:	438a      	bics	r2, r1
 8003eb6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003ebe:	68bb      	ldr	r3, [r7, #8]
 8003ec0:	691a      	ldr	r2, [r3, #16]
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	430a      	orrs	r2, r1
 8003ec8:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003eca:	e027      	b.n	8003f1c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	68ba      	ldr	r2, [r7, #8]
 8003ed2:	0011      	movs	r1, r2
 8003ed4:	0018      	movs	r0, r3
 8003ed6:	f000 fbeb 	bl	80046b0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	2180      	movs	r1, #128	@ 0x80
 8003ee6:	0109      	lsls	r1, r1, #4
 8003ee8:	430a      	orrs	r2, r1
 8003eea:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4910      	ldr	r1, [pc, #64]	@ (8003f38 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003ef8:	400a      	ands	r2, r1
 8003efa:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003f02:	68bb      	ldr	r3, [r7, #8]
 8003f04:	691b      	ldr	r3, [r3, #16]
 8003f06:	021a      	lsls	r2, r3, #8
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	430a      	orrs	r2, r1
 8003f0e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003f10:	e004      	b.n	8003f1c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8003f12:	2317      	movs	r3, #23
 8003f14:	18fb      	adds	r3, r7, r3
 8003f16:	2201      	movs	r2, #1
 8003f18:	701a      	strb	r2, [r3, #0]
      break;
 8003f1a:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	223c      	movs	r2, #60	@ 0x3c
 8003f20:	2100      	movs	r1, #0
 8003f22:	5499      	strb	r1, [r3, r2]

  return status;
 8003f24:	2317      	movs	r3, #23
 8003f26:	18fb      	adds	r3, r7, r3
 8003f28:	781b      	ldrb	r3, [r3, #0]
}
 8003f2a:	0018      	movs	r0, r3
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	b006      	add	sp, #24
 8003f30:	bd80      	pop	{r7, pc}
 8003f32:	46c0      	nop			@ (mov r8, r8)
 8003f34:	080062d4 	.word	0x080062d4
 8003f38:	fffffbff 	.word	0xfffffbff

08003f3c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b084      	sub	sp, #16
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
 8003f44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f46:	230f      	movs	r3, #15
 8003f48:	18fb      	adds	r3, r7, r3
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	223c      	movs	r2, #60	@ 0x3c
 8003f52:	5c9b      	ldrb	r3, [r3, r2]
 8003f54:	2b01      	cmp	r3, #1
 8003f56:	d101      	bne.n	8003f5c <HAL_TIM_ConfigClockSource+0x20>
 8003f58:	2302      	movs	r3, #2
 8003f5a:	e0bc      	b.n	80040d6 <HAL_TIM_ConfigClockSource+0x19a>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	223c      	movs	r2, #60	@ 0x3c
 8003f60:	2101      	movs	r1, #1
 8003f62:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	223d      	movs	r2, #61	@ 0x3d
 8003f68:	2102      	movs	r1, #2
 8003f6a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	689b      	ldr	r3, [r3, #8]
 8003f72:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003f74:	68bb      	ldr	r3, [r7, #8]
 8003f76:	4a5a      	ldr	r2, [pc, #360]	@ (80040e0 <HAL_TIM_ConfigClockSource+0x1a4>)
 8003f78:	4013      	ands	r3, r2
 8003f7a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	4a59      	ldr	r2, [pc, #356]	@ (80040e4 <HAL_TIM_ConfigClockSource+0x1a8>)
 8003f80:	4013      	ands	r3, r2
 8003f82:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	68ba      	ldr	r2, [r7, #8]
 8003f8a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	2280      	movs	r2, #128	@ 0x80
 8003f92:	0192      	lsls	r2, r2, #6
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d040      	beq.n	800401a <HAL_TIM_ConfigClockSource+0xde>
 8003f98:	2280      	movs	r2, #128	@ 0x80
 8003f9a:	0192      	lsls	r2, r2, #6
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d900      	bls.n	8003fa2 <HAL_TIM_ConfigClockSource+0x66>
 8003fa0:	e088      	b.n	80040b4 <HAL_TIM_ConfigClockSource+0x178>
 8003fa2:	2280      	movs	r2, #128	@ 0x80
 8003fa4:	0152      	lsls	r2, r2, #5
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d100      	bne.n	8003fac <HAL_TIM_ConfigClockSource+0x70>
 8003faa:	e088      	b.n	80040be <HAL_TIM_ConfigClockSource+0x182>
 8003fac:	2280      	movs	r2, #128	@ 0x80
 8003fae:	0152      	lsls	r2, r2, #5
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d900      	bls.n	8003fb6 <HAL_TIM_ConfigClockSource+0x7a>
 8003fb4:	e07e      	b.n	80040b4 <HAL_TIM_ConfigClockSource+0x178>
 8003fb6:	2b70      	cmp	r3, #112	@ 0x70
 8003fb8:	d018      	beq.n	8003fec <HAL_TIM_ConfigClockSource+0xb0>
 8003fba:	d900      	bls.n	8003fbe <HAL_TIM_ConfigClockSource+0x82>
 8003fbc:	e07a      	b.n	80040b4 <HAL_TIM_ConfigClockSource+0x178>
 8003fbe:	2b60      	cmp	r3, #96	@ 0x60
 8003fc0:	d04f      	beq.n	8004062 <HAL_TIM_ConfigClockSource+0x126>
 8003fc2:	d900      	bls.n	8003fc6 <HAL_TIM_ConfigClockSource+0x8a>
 8003fc4:	e076      	b.n	80040b4 <HAL_TIM_ConfigClockSource+0x178>
 8003fc6:	2b50      	cmp	r3, #80	@ 0x50
 8003fc8:	d03b      	beq.n	8004042 <HAL_TIM_ConfigClockSource+0x106>
 8003fca:	d900      	bls.n	8003fce <HAL_TIM_ConfigClockSource+0x92>
 8003fcc:	e072      	b.n	80040b4 <HAL_TIM_ConfigClockSource+0x178>
 8003fce:	2b40      	cmp	r3, #64	@ 0x40
 8003fd0:	d057      	beq.n	8004082 <HAL_TIM_ConfigClockSource+0x146>
 8003fd2:	d900      	bls.n	8003fd6 <HAL_TIM_ConfigClockSource+0x9a>
 8003fd4:	e06e      	b.n	80040b4 <HAL_TIM_ConfigClockSource+0x178>
 8003fd6:	2b30      	cmp	r3, #48	@ 0x30
 8003fd8:	d063      	beq.n	80040a2 <HAL_TIM_ConfigClockSource+0x166>
 8003fda:	d86b      	bhi.n	80040b4 <HAL_TIM_ConfigClockSource+0x178>
 8003fdc:	2b20      	cmp	r3, #32
 8003fde:	d060      	beq.n	80040a2 <HAL_TIM_ConfigClockSource+0x166>
 8003fe0:	d868      	bhi.n	80040b4 <HAL_TIM_ConfigClockSource+0x178>
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d05d      	beq.n	80040a2 <HAL_TIM_ConfigClockSource+0x166>
 8003fe6:	2b10      	cmp	r3, #16
 8003fe8:	d05b      	beq.n	80040a2 <HAL_TIM_ConfigClockSource+0x166>
 8003fea:	e063      	b.n	80040b4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003ffc:	f000 fc38 	bl	8004870 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	689b      	ldr	r3, [r3, #8]
 8004006:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	2277      	movs	r2, #119	@ 0x77
 800400c:	4313      	orrs	r3, r2
 800400e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	68ba      	ldr	r2, [r7, #8]
 8004016:	609a      	str	r2, [r3, #8]
      break;
 8004018:	e052      	b.n	80040c0 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800402a:	f000 fc21 	bl	8004870 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	689a      	ldr	r2, [r3, #8]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	2180      	movs	r1, #128	@ 0x80
 800403a:	01c9      	lsls	r1, r1, #7
 800403c:	430a      	orrs	r2, r1
 800403e:	609a      	str	r2, [r3, #8]
      break;
 8004040:	e03e      	b.n	80040c0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800404e:	001a      	movs	r2, r3
 8004050:	f000 fb92 	bl	8004778 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	2150      	movs	r1, #80	@ 0x50
 800405a:	0018      	movs	r0, r3
 800405c:	f000 fbec 	bl	8004838 <TIM_ITRx_SetConfig>
      break;
 8004060:	e02e      	b.n	80040c0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800406e:	001a      	movs	r2, r3
 8004070:	f000 fbb0 	bl	80047d4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	2160      	movs	r1, #96	@ 0x60
 800407a:	0018      	movs	r0, r3
 800407c:	f000 fbdc 	bl	8004838 <TIM_ITRx_SetConfig>
      break;
 8004080:	e01e      	b.n	80040c0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800408e:	001a      	movs	r2, r3
 8004090:	f000 fb72 	bl	8004778 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	2140      	movs	r1, #64	@ 0x40
 800409a:	0018      	movs	r0, r3
 800409c:	f000 fbcc 	bl	8004838 <TIM_ITRx_SetConfig>
      break;
 80040a0:	e00e      	b.n	80040c0 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681a      	ldr	r2, [r3, #0]
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	0019      	movs	r1, r3
 80040ac:	0010      	movs	r0, r2
 80040ae:	f000 fbc3 	bl	8004838 <TIM_ITRx_SetConfig>
      break;
 80040b2:	e005      	b.n	80040c0 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80040b4:	230f      	movs	r3, #15
 80040b6:	18fb      	adds	r3, r7, r3
 80040b8:	2201      	movs	r2, #1
 80040ba:	701a      	strb	r2, [r3, #0]
      break;
 80040bc:	e000      	b.n	80040c0 <HAL_TIM_ConfigClockSource+0x184>
      break;
 80040be:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	223d      	movs	r2, #61	@ 0x3d
 80040c4:	2101      	movs	r1, #1
 80040c6:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	223c      	movs	r2, #60	@ 0x3c
 80040cc:	2100      	movs	r1, #0
 80040ce:	5499      	strb	r1, [r3, r2]

  return status;
 80040d0:	230f      	movs	r3, #15
 80040d2:	18fb      	adds	r3, r7, r3
 80040d4:	781b      	ldrb	r3, [r3, #0]
}
 80040d6:	0018      	movs	r0, r3
 80040d8:	46bd      	mov	sp, r7
 80040da:	b004      	add	sp, #16
 80040dc:	bd80      	pop	{r7, pc}
 80040de:	46c0      	nop			@ (mov r8, r8)
 80040e0:	ffceff88 	.word	0xffceff88
 80040e4:	ffff00ff 	.word	0xffff00ff

080040e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b084      	sub	sp, #16
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
 80040f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	4a36      	ldr	r2, [pc, #216]	@ (80041d4 <TIM_Base_SetConfig+0xec>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d003      	beq.n	8004108 <TIM_Base_SetConfig+0x20>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	4a35      	ldr	r2, [pc, #212]	@ (80041d8 <TIM_Base_SetConfig+0xf0>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d108      	bne.n	800411a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	2270      	movs	r2, #112	@ 0x70
 800410c:	4393      	bics	r3, r2
 800410e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	68fa      	ldr	r2, [r7, #12]
 8004116:	4313      	orrs	r3, r2
 8004118:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	4a2d      	ldr	r2, [pc, #180]	@ (80041d4 <TIM_Base_SetConfig+0xec>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d013      	beq.n	800414a <TIM_Base_SetConfig+0x62>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	4a2c      	ldr	r2, [pc, #176]	@ (80041d8 <TIM_Base_SetConfig+0xf0>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d00f      	beq.n	800414a <TIM_Base_SetConfig+0x62>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	4a2b      	ldr	r2, [pc, #172]	@ (80041dc <TIM_Base_SetConfig+0xf4>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d00b      	beq.n	800414a <TIM_Base_SetConfig+0x62>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	4a2a      	ldr	r2, [pc, #168]	@ (80041e0 <TIM_Base_SetConfig+0xf8>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d007      	beq.n	800414a <TIM_Base_SetConfig+0x62>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	4a29      	ldr	r2, [pc, #164]	@ (80041e4 <TIM_Base_SetConfig+0xfc>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d003      	beq.n	800414a <TIM_Base_SetConfig+0x62>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	4a28      	ldr	r2, [pc, #160]	@ (80041e8 <TIM_Base_SetConfig+0x100>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d108      	bne.n	800415c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	4a27      	ldr	r2, [pc, #156]	@ (80041ec <TIM_Base_SetConfig+0x104>)
 800414e:	4013      	ands	r3, r2
 8004150:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	68db      	ldr	r3, [r3, #12]
 8004156:	68fa      	ldr	r2, [r7, #12]
 8004158:	4313      	orrs	r3, r2
 800415a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	2280      	movs	r2, #128	@ 0x80
 8004160:	4393      	bics	r3, r2
 8004162:	001a      	movs	r2, r3
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	695b      	ldr	r3, [r3, #20]
 8004168:	4313      	orrs	r3, r2
 800416a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	68fa      	ldr	r2, [r7, #12]
 8004170:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	689a      	ldr	r2, [r3, #8]
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	681a      	ldr	r2, [r3, #0]
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	4a13      	ldr	r2, [pc, #76]	@ (80041d4 <TIM_Base_SetConfig+0xec>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d00b      	beq.n	80041a2 <TIM_Base_SetConfig+0xba>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	4a14      	ldr	r2, [pc, #80]	@ (80041e0 <TIM_Base_SetConfig+0xf8>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d007      	beq.n	80041a2 <TIM_Base_SetConfig+0xba>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	4a13      	ldr	r2, [pc, #76]	@ (80041e4 <TIM_Base_SetConfig+0xfc>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d003      	beq.n	80041a2 <TIM_Base_SetConfig+0xba>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	4a12      	ldr	r2, [pc, #72]	@ (80041e8 <TIM_Base_SetConfig+0x100>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d103      	bne.n	80041aa <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	691a      	ldr	r2, [r3, #16]
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2201      	movs	r2, #1
 80041ae:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	691b      	ldr	r3, [r3, #16]
 80041b4:	2201      	movs	r2, #1
 80041b6:	4013      	ands	r3, r2
 80041b8:	2b01      	cmp	r3, #1
 80041ba:	d106      	bne.n	80041ca <TIM_Base_SetConfig+0xe2>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	691b      	ldr	r3, [r3, #16]
 80041c0:	2201      	movs	r2, #1
 80041c2:	4393      	bics	r3, r2
 80041c4:	001a      	movs	r2, r3
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	611a      	str	r2, [r3, #16]
  }
}
 80041ca:	46c0      	nop			@ (mov r8, r8)
 80041cc:	46bd      	mov	sp, r7
 80041ce:	b004      	add	sp, #16
 80041d0:	bd80      	pop	{r7, pc}
 80041d2:	46c0      	nop			@ (mov r8, r8)
 80041d4:	40012c00 	.word	0x40012c00
 80041d8:	40000400 	.word	0x40000400
 80041dc:	40002000 	.word	0x40002000
 80041e0:	40014000 	.word	0x40014000
 80041e4:	40014400 	.word	0x40014400
 80041e8:	40014800 	.word	0x40014800
 80041ec:	fffffcff 	.word	0xfffffcff

080041f0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b086      	sub	sp, #24
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
 80041f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6a1b      	ldr	r3, [r3, #32]
 80041fe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6a1b      	ldr	r3, [r3, #32]
 8004204:	2201      	movs	r2, #1
 8004206:	4393      	bics	r3, r2
 8004208:	001a      	movs	r2, r3
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	699b      	ldr	r3, [r3, #24]
 8004218:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	4a32      	ldr	r2, [pc, #200]	@ (80042e8 <TIM_OC1_SetConfig+0xf8>)
 800421e:	4013      	ands	r3, r2
 8004220:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	2203      	movs	r2, #3
 8004226:	4393      	bics	r3, r2
 8004228:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	68fa      	ldr	r2, [r7, #12]
 8004230:	4313      	orrs	r3, r2
 8004232:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004234:	697b      	ldr	r3, [r7, #20]
 8004236:	2202      	movs	r2, #2
 8004238:	4393      	bics	r3, r2
 800423a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	689b      	ldr	r3, [r3, #8]
 8004240:	697a      	ldr	r2, [r7, #20]
 8004242:	4313      	orrs	r3, r2
 8004244:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	4a28      	ldr	r2, [pc, #160]	@ (80042ec <TIM_OC1_SetConfig+0xfc>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d00b      	beq.n	8004266 <TIM_OC1_SetConfig+0x76>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	4a27      	ldr	r2, [pc, #156]	@ (80042f0 <TIM_OC1_SetConfig+0x100>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d007      	beq.n	8004266 <TIM_OC1_SetConfig+0x76>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	4a26      	ldr	r2, [pc, #152]	@ (80042f4 <TIM_OC1_SetConfig+0x104>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d003      	beq.n	8004266 <TIM_OC1_SetConfig+0x76>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	4a25      	ldr	r2, [pc, #148]	@ (80042f8 <TIM_OC1_SetConfig+0x108>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d10c      	bne.n	8004280 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004266:	697b      	ldr	r3, [r7, #20]
 8004268:	2208      	movs	r2, #8
 800426a:	4393      	bics	r3, r2
 800426c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	68db      	ldr	r3, [r3, #12]
 8004272:	697a      	ldr	r2, [r7, #20]
 8004274:	4313      	orrs	r3, r2
 8004276:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004278:	697b      	ldr	r3, [r7, #20]
 800427a:	2204      	movs	r2, #4
 800427c:	4393      	bics	r3, r2
 800427e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	4a1a      	ldr	r2, [pc, #104]	@ (80042ec <TIM_OC1_SetConfig+0xfc>)
 8004284:	4293      	cmp	r3, r2
 8004286:	d00b      	beq.n	80042a0 <TIM_OC1_SetConfig+0xb0>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	4a19      	ldr	r2, [pc, #100]	@ (80042f0 <TIM_OC1_SetConfig+0x100>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d007      	beq.n	80042a0 <TIM_OC1_SetConfig+0xb0>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	4a18      	ldr	r2, [pc, #96]	@ (80042f4 <TIM_OC1_SetConfig+0x104>)
 8004294:	4293      	cmp	r3, r2
 8004296:	d003      	beq.n	80042a0 <TIM_OC1_SetConfig+0xb0>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	4a17      	ldr	r2, [pc, #92]	@ (80042f8 <TIM_OC1_SetConfig+0x108>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d111      	bne.n	80042c4 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80042a0:	693b      	ldr	r3, [r7, #16]
 80042a2:	4a16      	ldr	r2, [pc, #88]	@ (80042fc <TIM_OC1_SetConfig+0x10c>)
 80042a4:	4013      	ands	r3, r2
 80042a6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80042a8:	693b      	ldr	r3, [r7, #16]
 80042aa:	4a15      	ldr	r2, [pc, #84]	@ (8004300 <TIM_OC1_SetConfig+0x110>)
 80042ac:	4013      	ands	r3, r2
 80042ae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	695b      	ldr	r3, [r3, #20]
 80042b4:	693a      	ldr	r2, [r7, #16]
 80042b6:	4313      	orrs	r3, r2
 80042b8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	699b      	ldr	r3, [r3, #24]
 80042be:	693a      	ldr	r2, [r7, #16]
 80042c0:	4313      	orrs	r3, r2
 80042c2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	693a      	ldr	r2, [r7, #16]
 80042c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	68fa      	ldr	r2, [r7, #12]
 80042ce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	685a      	ldr	r2, [r3, #4]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	697a      	ldr	r2, [r7, #20]
 80042dc:	621a      	str	r2, [r3, #32]
}
 80042de:	46c0      	nop			@ (mov r8, r8)
 80042e0:	46bd      	mov	sp, r7
 80042e2:	b006      	add	sp, #24
 80042e4:	bd80      	pop	{r7, pc}
 80042e6:	46c0      	nop			@ (mov r8, r8)
 80042e8:	fffeff8f 	.word	0xfffeff8f
 80042ec:	40012c00 	.word	0x40012c00
 80042f0:	40014000 	.word	0x40014000
 80042f4:	40014400 	.word	0x40014400
 80042f8:	40014800 	.word	0x40014800
 80042fc:	fffffeff 	.word	0xfffffeff
 8004300:	fffffdff 	.word	0xfffffdff

08004304 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b086      	sub	sp, #24
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
 800430c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6a1b      	ldr	r3, [r3, #32]
 8004312:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6a1b      	ldr	r3, [r3, #32]
 8004318:	2210      	movs	r2, #16
 800431a:	4393      	bics	r3, r2
 800431c:	001a      	movs	r2, r3
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	699b      	ldr	r3, [r3, #24]
 800432c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	4a2e      	ldr	r2, [pc, #184]	@ (80043ec <TIM_OC2_SetConfig+0xe8>)
 8004332:	4013      	ands	r3, r2
 8004334:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	4a2d      	ldr	r2, [pc, #180]	@ (80043f0 <TIM_OC2_SetConfig+0xec>)
 800433a:	4013      	ands	r3, r2
 800433c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	021b      	lsls	r3, r3, #8
 8004344:	68fa      	ldr	r2, [r7, #12]
 8004346:	4313      	orrs	r3, r2
 8004348:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800434a:	697b      	ldr	r3, [r7, #20]
 800434c:	2220      	movs	r2, #32
 800434e:	4393      	bics	r3, r2
 8004350:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	689b      	ldr	r3, [r3, #8]
 8004356:	011b      	lsls	r3, r3, #4
 8004358:	697a      	ldr	r2, [r7, #20]
 800435a:	4313      	orrs	r3, r2
 800435c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	4a24      	ldr	r2, [pc, #144]	@ (80043f4 <TIM_OC2_SetConfig+0xf0>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d10d      	bne.n	8004382 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004366:	697b      	ldr	r3, [r7, #20]
 8004368:	2280      	movs	r2, #128	@ 0x80
 800436a:	4393      	bics	r3, r2
 800436c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	68db      	ldr	r3, [r3, #12]
 8004372:	011b      	lsls	r3, r3, #4
 8004374:	697a      	ldr	r2, [r7, #20]
 8004376:	4313      	orrs	r3, r2
 8004378:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800437a:	697b      	ldr	r3, [r7, #20]
 800437c:	2240      	movs	r2, #64	@ 0x40
 800437e:	4393      	bics	r3, r2
 8004380:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	4a1b      	ldr	r2, [pc, #108]	@ (80043f4 <TIM_OC2_SetConfig+0xf0>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d00b      	beq.n	80043a2 <TIM_OC2_SetConfig+0x9e>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	4a1a      	ldr	r2, [pc, #104]	@ (80043f8 <TIM_OC2_SetConfig+0xf4>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d007      	beq.n	80043a2 <TIM_OC2_SetConfig+0x9e>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	4a19      	ldr	r2, [pc, #100]	@ (80043fc <TIM_OC2_SetConfig+0xf8>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d003      	beq.n	80043a2 <TIM_OC2_SetConfig+0x9e>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	4a18      	ldr	r2, [pc, #96]	@ (8004400 <TIM_OC2_SetConfig+0xfc>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d113      	bne.n	80043ca <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80043a2:	693b      	ldr	r3, [r7, #16]
 80043a4:	4a17      	ldr	r2, [pc, #92]	@ (8004404 <TIM_OC2_SetConfig+0x100>)
 80043a6:	4013      	ands	r3, r2
 80043a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80043aa:	693b      	ldr	r3, [r7, #16]
 80043ac:	4a16      	ldr	r2, [pc, #88]	@ (8004408 <TIM_OC2_SetConfig+0x104>)
 80043ae:	4013      	ands	r3, r2
 80043b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	695b      	ldr	r3, [r3, #20]
 80043b6:	009b      	lsls	r3, r3, #2
 80043b8:	693a      	ldr	r2, [r7, #16]
 80043ba:	4313      	orrs	r3, r2
 80043bc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	699b      	ldr	r3, [r3, #24]
 80043c2:	009b      	lsls	r3, r3, #2
 80043c4:	693a      	ldr	r2, [r7, #16]
 80043c6:	4313      	orrs	r3, r2
 80043c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	693a      	ldr	r2, [r7, #16]
 80043ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	68fa      	ldr	r2, [r7, #12]
 80043d4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	685a      	ldr	r2, [r3, #4]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	697a      	ldr	r2, [r7, #20]
 80043e2:	621a      	str	r2, [r3, #32]
}
 80043e4:	46c0      	nop			@ (mov r8, r8)
 80043e6:	46bd      	mov	sp, r7
 80043e8:	b006      	add	sp, #24
 80043ea:	bd80      	pop	{r7, pc}
 80043ec:	feff8fff 	.word	0xfeff8fff
 80043f0:	fffffcff 	.word	0xfffffcff
 80043f4:	40012c00 	.word	0x40012c00
 80043f8:	40014000 	.word	0x40014000
 80043fc:	40014400 	.word	0x40014400
 8004400:	40014800 	.word	0x40014800
 8004404:	fffffbff 	.word	0xfffffbff
 8004408:	fffff7ff 	.word	0xfffff7ff

0800440c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b086      	sub	sp, #24
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
 8004414:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6a1b      	ldr	r3, [r3, #32]
 800441a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6a1b      	ldr	r3, [r3, #32]
 8004420:	4a33      	ldr	r2, [pc, #204]	@ (80044f0 <TIM_OC3_SetConfig+0xe4>)
 8004422:	401a      	ands	r2, r3
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	685b      	ldr	r3, [r3, #4]
 800442c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	69db      	ldr	r3, [r3, #28]
 8004432:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	4a2f      	ldr	r2, [pc, #188]	@ (80044f4 <TIM_OC3_SetConfig+0xe8>)
 8004438:	4013      	ands	r3, r2
 800443a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	2203      	movs	r2, #3
 8004440:	4393      	bics	r3, r2
 8004442:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	68fa      	ldr	r2, [r7, #12]
 800444a:	4313      	orrs	r3, r2
 800444c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800444e:	697b      	ldr	r3, [r7, #20]
 8004450:	4a29      	ldr	r2, [pc, #164]	@ (80044f8 <TIM_OC3_SetConfig+0xec>)
 8004452:	4013      	ands	r3, r2
 8004454:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	689b      	ldr	r3, [r3, #8]
 800445a:	021b      	lsls	r3, r3, #8
 800445c:	697a      	ldr	r2, [r7, #20]
 800445e:	4313      	orrs	r3, r2
 8004460:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	4a25      	ldr	r2, [pc, #148]	@ (80044fc <TIM_OC3_SetConfig+0xf0>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d10d      	bne.n	8004486 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800446a:	697b      	ldr	r3, [r7, #20]
 800446c:	4a24      	ldr	r2, [pc, #144]	@ (8004500 <TIM_OC3_SetConfig+0xf4>)
 800446e:	4013      	ands	r3, r2
 8004470:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	68db      	ldr	r3, [r3, #12]
 8004476:	021b      	lsls	r3, r3, #8
 8004478:	697a      	ldr	r2, [r7, #20]
 800447a:	4313      	orrs	r3, r2
 800447c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800447e:	697b      	ldr	r3, [r7, #20]
 8004480:	4a20      	ldr	r2, [pc, #128]	@ (8004504 <TIM_OC3_SetConfig+0xf8>)
 8004482:	4013      	ands	r3, r2
 8004484:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	4a1c      	ldr	r2, [pc, #112]	@ (80044fc <TIM_OC3_SetConfig+0xf0>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d00b      	beq.n	80044a6 <TIM_OC3_SetConfig+0x9a>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	4a1d      	ldr	r2, [pc, #116]	@ (8004508 <TIM_OC3_SetConfig+0xfc>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d007      	beq.n	80044a6 <TIM_OC3_SetConfig+0x9a>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	4a1c      	ldr	r2, [pc, #112]	@ (800450c <TIM_OC3_SetConfig+0x100>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d003      	beq.n	80044a6 <TIM_OC3_SetConfig+0x9a>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	4a1b      	ldr	r2, [pc, #108]	@ (8004510 <TIM_OC3_SetConfig+0x104>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d113      	bne.n	80044ce <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80044a6:	693b      	ldr	r3, [r7, #16]
 80044a8:	4a1a      	ldr	r2, [pc, #104]	@ (8004514 <TIM_OC3_SetConfig+0x108>)
 80044aa:	4013      	ands	r3, r2
 80044ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80044ae:	693b      	ldr	r3, [r7, #16]
 80044b0:	4a19      	ldr	r2, [pc, #100]	@ (8004518 <TIM_OC3_SetConfig+0x10c>)
 80044b2:	4013      	ands	r3, r2
 80044b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	695b      	ldr	r3, [r3, #20]
 80044ba:	011b      	lsls	r3, r3, #4
 80044bc:	693a      	ldr	r2, [r7, #16]
 80044be:	4313      	orrs	r3, r2
 80044c0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	699b      	ldr	r3, [r3, #24]
 80044c6:	011b      	lsls	r3, r3, #4
 80044c8:	693a      	ldr	r2, [r7, #16]
 80044ca:	4313      	orrs	r3, r2
 80044cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	693a      	ldr	r2, [r7, #16]
 80044d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	68fa      	ldr	r2, [r7, #12]
 80044d8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	685a      	ldr	r2, [r3, #4]
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	697a      	ldr	r2, [r7, #20]
 80044e6:	621a      	str	r2, [r3, #32]
}
 80044e8:	46c0      	nop			@ (mov r8, r8)
 80044ea:	46bd      	mov	sp, r7
 80044ec:	b006      	add	sp, #24
 80044ee:	bd80      	pop	{r7, pc}
 80044f0:	fffffeff 	.word	0xfffffeff
 80044f4:	fffeff8f 	.word	0xfffeff8f
 80044f8:	fffffdff 	.word	0xfffffdff
 80044fc:	40012c00 	.word	0x40012c00
 8004500:	fffff7ff 	.word	0xfffff7ff
 8004504:	fffffbff 	.word	0xfffffbff
 8004508:	40014000 	.word	0x40014000
 800450c:	40014400 	.word	0x40014400
 8004510:	40014800 	.word	0x40014800
 8004514:	ffffefff 	.word	0xffffefff
 8004518:	ffffdfff 	.word	0xffffdfff

0800451c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b086      	sub	sp, #24
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
 8004524:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6a1b      	ldr	r3, [r3, #32]
 800452a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6a1b      	ldr	r3, [r3, #32]
 8004530:	4a26      	ldr	r2, [pc, #152]	@ (80045cc <TIM_OC4_SetConfig+0xb0>)
 8004532:	401a      	ands	r2, r3
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	685b      	ldr	r3, [r3, #4]
 800453c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	69db      	ldr	r3, [r3, #28]
 8004542:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	4a22      	ldr	r2, [pc, #136]	@ (80045d0 <TIM_OC4_SetConfig+0xb4>)
 8004548:	4013      	ands	r3, r2
 800454a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	4a21      	ldr	r2, [pc, #132]	@ (80045d4 <TIM_OC4_SetConfig+0xb8>)
 8004550:	4013      	ands	r3, r2
 8004552:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	021b      	lsls	r3, r3, #8
 800455a:	68fa      	ldr	r2, [r7, #12]
 800455c:	4313      	orrs	r3, r2
 800455e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004560:	693b      	ldr	r3, [r7, #16]
 8004562:	4a1d      	ldr	r2, [pc, #116]	@ (80045d8 <TIM_OC4_SetConfig+0xbc>)
 8004564:	4013      	ands	r3, r2
 8004566:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	689b      	ldr	r3, [r3, #8]
 800456c:	031b      	lsls	r3, r3, #12
 800456e:	693a      	ldr	r2, [r7, #16]
 8004570:	4313      	orrs	r3, r2
 8004572:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	4a19      	ldr	r2, [pc, #100]	@ (80045dc <TIM_OC4_SetConfig+0xc0>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d00b      	beq.n	8004594 <TIM_OC4_SetConfig+0x78>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	4a18      	ldr	r2, [pc, #96]	@ (80045e0 <TIM_OC4_SetConfig+0xc4>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d007      	beq.n	8004594 <TIM_OC4_SetConfig+0x78>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	4a17      	ldr	r2, [pc, #92]	@ (80045e4 <TIM_OC4_SetConfig+0xc8>)
 8004588:	4293      	cmp	r3, r2
 800458a:	d003      	beq.n	8004594 <TIM_OC4_SetConfig+0x78>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	4a16      	ldr	r2, [pc, #88]	@ (80045e8 <TIM_OC4_SetConfig+0xcc>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d109      	bne.n	80045a8 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004594:	697b      	ldr	r3, [r7, #20]
 8004596:	4a15      	ldr	r2, [pc, #84]	@ (80045ec <TIM_OC4_SetConfig+0xd0>)
 8004598:	4013      	ands	r3, r2
 800459a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	695b      	ldr	r3, [r3, #20]
 80045a0:	019b      	lsls	r3, r3, #6
 80045a2:	697a      	ldr	r2, [r7, #20]
 80045a4:	4313      	orrs	r3, r2
 80045a6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	697a      	ldr	r2, [r7, #20]
 80045ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	68fa      	ldr	r2, [r7, #12]
 80045b2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	685a      	ldr	r2, [r3, #4]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	693a      	ldr	r2, [r7, #16]
 80045c0:	621a      	str	r2, [r3, #32]
}
 80045c2:	46c0      	nop			@ (mov r8, r8)
 80045c4:	46bd      	mov	sp, r7
 80045c6:	b006      	add	sp, #24
 80045c8:	bd80      	pop	{r7, pc}
 80045ca:	46c0      	nop			@ (mov r8, r8)
 80045cc:	ffffefff 	.word	0xffffefff
 80045d0:	feff8fff 	.word	0xfeff8fff
 80045d4:	fffffcff 	.word	0xfffffcff
 80045d8:	ffffdfff 	.word	0xffffdfff
 80045dc:	40012c00 	.word	0x40012c00
 80045e0:	40014000 	.word	0x40014000
 80045e4:	40014400 	.word	0x40014400
 80045e8:	40014800 	.word	0x40014800
 80045ec:	ffffbfff 	.word	0xffffbfff

080045f0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b086      	sub	sp, #24
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
 80045f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6a1b      	ldr	r3, [r3, #32]
 80045fe:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6a1b      	ldr	r3, [r3, #32]
 8004604:	4a23      	ldr	r2, [pc, #140]	@ (8004694 <TIM_OC5_SetConfig+0xa4>)
 8004606:	401a      	ands	r2, r3
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004616:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	4a1f      	ldr	r2, [pc, #124]	@ (8004698 <TIM_OC5_SetConfig+0xa8>)
 800461c:	4013      	ands	r3, r2
 800461e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	68fa      	ldr	r2, [r7, #12]
 8004626:	4313      	orrs	r3, r2
 8004628:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800462a:	693b      	ldr	r3, [r7, #16]
 800462c:	4a1b      	ldr	r2, [pc, #108]	@ (800469c <TIM_OC5_SetConfig+0xac>)
 800462e:	4013      	ands	r3, r2
 8004630:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	689b      	ldr	r3, [r3, #8]
 8004636:	041b      	lsls	r3, r3, #16
 8004638:	693a      	ldr	r2, [r7, #16]
 800463a:	4313      	orrs	r3, r2
 800463c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	4a17      	ldr	r2, [pc, #92]	@ (80046a0 <TIM_OC5_SetConfig+0xb0>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d00b      	beq.n	800465e <TIM_OC5_SetConfig+0x6e>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	4a16      	ldr	r2, [pc, #88]	@ (80046a4 <TIM_OC5_SetConfig+0xb4>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d007      	beq.n	800465e <TIM_OC5_SetConfig+0x6e>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	4a15      	ldr	r2, [pc, #84]	@ (80046a8 <TIM_OC5_SetConfig+0xb8>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d003      	beq.n	800465e <TIM_OC5_SetConfig+0x6e>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	4a14      	ldr	r2, [pc, #80]	@ (80046ac <TIM_OC5_SetConfig+0xbc>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d109      	bne.n	8004672 <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800465e:	697b      	ldr	r3, [r7, #20]
 8004660:	4a0c      	ldr	r2, [pc, #48]	@ (8004694 <TIM_OC5_SetConfig+0xa4>)
 8004662:	4013      	ands	r3, r2
 8004664:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	695b      	ldr	r3, [r3, #20]
 800466a:	021b      	lsls	r3, r3, #8
 800466c:	697a      	ldr	r2, [r7, #20]
 800466e:	4313      	orrs	r3, r2
 8004670:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	697a      	ldr	r2, [r7, #20]
 8004676:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	68fa      	ldr	r2, [r7, #12]
 800467c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	685a      	ldr	r2, [r3, #4]
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	693a      	ldr	r2, [r7, #16]
 800468a:	621a      	str	r2, [r3, #32]
}
 800468c:	46c0      	nop			@ (mov r8, r8)
 800468e:	46bd      	mov	sp, r7
 8004690:	b006      	add	sp, #24
 8004692:	bd80      	pop	{r7, pc}
 8004694:	fffeffff 	.word	0xfffeffff
 8004698:	fffeff8f 	.word	0xfffeff8f
 800469c:	fffdffff 	.word	0xfffdffff
 80046a0:	40012c00 	.word	0x40012c00
 80046a4:	40014000 	.word	0x40014000
 80046a8:	40014400 	.word	0x40014400
 80046ac:	40014800 	.word	0x40014800

080046b0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b086      	sub	sp, #24
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
 80046b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6a1b      	ldr	r3, [r3, #32]
 80046be:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6a1b      	ldr	r3, [r3, #32]
 80046c4:	4a24      	ldr	r2, [pc, #144]	@ (8004758 <TIM_OC6_SetConfig+0xa8>)
 80046c6:	401a      	ands	r2, r3
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	4a20      	ldr	r2, [pc, #128]	@ (800475c <TIM_OC6_SetConfig+0xac>)
 80046dc:	4013      	ands	r3, r2
 80046de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	021b      	lsls	r3, r3, #8
 80046e6:	68fa      	ldr	r2, [r7, #12]
 80046e8:	4313      	orrs	r3, r2
 80046ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80046ec:	693b      	ldr	r3, [r7, #16]
 80046ee:	4a1c      	ldr	r2, [pc, #112]	@ (8004760 <TIM_OC6_SetConfig+0xb0>)
 80046f0:	4013      	ands	r3, r2
 80046f2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	689b      	ldr	r3, [r3, #8]
 80046f8:	051b      	lsls	r3, r3, #20
 80046fa:	693a      	ldr	r2, [r7, #16]
 80046fc:	4313      	orrs	r3, r2
 80046fe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	4a18      	ldr	r2, [pc, #96]	@ (8004764 <TIM_OC6_SetConfig+0xb4>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d00b      	beq.n	8004720 <TIM_OC6_SetConfig+0x70>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	4a17      	ldr	r2, [pc, #92]	@ (8004768 <TIM_OC6_SetConfig+0xb8>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d007      	beq.n	8004720 <TIM_OC6_SetConfig+0x70>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	4a16      	ldr	r2, [pc, #88]	@ (800476c <TIM_OC6_SetConfig+0xbc>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d003      	beq.n	8004720 <TIM_OC6_SetConfig+0x70>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	4a15      	ldr	r2, [pc, #84]	@ (8004770 <TIM_OC6_SetConfig+0xc0>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d109      	bne.n	8004734 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004720:	697b      	ldr	r3, [r7, #20]
 8004722:	4a14      	ldr	r2, [pc, #80]	@ (8004774 <TIM_OC6_SetConfig+0xc4>)
 8004724:	4013      	ands	r3, r2
 8004726:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	695b      	ldr	r3, [r3, #20]
 800472c:	029b      	lsls	r3, r3, #10
 800472e:	697a      	ldr	r2, [r7, #20]
 8004730:	4313      	orrs	r3, r2
 8004732:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	697a      	ldr	r2, [r7, #20]
 8004738:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	68fa      	ldr	r2, [r7, #12]
 800473e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	685a      	ldr	r2, [r3, #4]
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	693a      	ldr	r2, [r7, #16]
 800474c:	621a      	str	r2, [r3, #32]
}
 800474e:	46c0      	nop			@ (mov r8, r8)
 8004750:	46bd      	mov	sp, r7
 8004752:	b006      	add	sp, #24
 8004754:	bd80      	pop	{r7, pc}
 8004756:	46c0      	nop			@ (mov r8, r8)
 8004758:	ffefffff 	.word	0xffefffff
 800475c:	feff8fff 	.word	0xfeff8fff
 8004760:	ffdfffff 	.word	0xffdfffff
 8004764:	40012c00 	.word	0x40012c00
 8004768:	40014000 	.word	0x40014000
 800476c:	40014400 	.word	0x40014400
 8004770:	40014800 	.word	0x40014800
 8004774:	fffbffff 	.word	0xfffbffff

08004778 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b086      	sub	sp, #24
 800477c:	af00      	add	r7, sp, #0
 800477e:	60f8      	str	r0, [r7, #12]
 8004780:	60b9      	str	r1, [r7, #8]
 8004782:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	6a1b      	ldr	r3, [r3, #32]
 8004788:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	6a1b      	ldr	r3, [r3, #32]
 800478e:	2201      	movs	r2, #1
 8004790:	4393      	bics	r3, r2
 8004792:	001a      	movs	r2, r3
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	699b      	ldr	r3, [r3, #24]
 800479c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800479e:	693b      	ldr	r3, [r7, #16]
 80047a0:	22f0      	movs	r2, #240	@ 0xf0
 80047a2:	4393      	bics	r3, r2
 80047a4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	011b      	lsls	r3, r3, #4
 80047aa:	693a      	ldr	r2, [r7, #16]
 80047ac:	4313      	orrs	r3, r2
 80047ae:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80047b0:	697b      	ldr	r3, [r7, #20]
 80047b2:	220a      	movs	r2, #10
 80047b4:	4393      	bics	r3, r2
 80047b6:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80047b8:	697a      	ldr	r2, [r7, #20]
 80047ba:	68bb      	ldr	r3, [r7, #8]
 80047bc:	4313      	orrs	r3, r2
 80047be:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	693a      	ldr	r2, [r7, #16]
 80047c4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	697a      	ldr	r2, [r7, #20]
 80047ca:	621a      	str	r2, [r3, #32]
}
 80047cc:	46c0      	nop			@ (mov r8, r8)
 80047ce:	46bd      	mov	sp, r7
 80047d0:	b006      	add	sp, #24
 80047d2:	bd80      	pop	{r7, pc}

080047d4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b086      	sub	sp, #24
 80047d8:	af00      	add	r7, sp, #0
 80047da:	60f8      	str	r0, [r7, #12]
 80047dc:	60b9      	str	r1, [r7, #8]
 80047de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	6a1b      	ldr	r3, [r3, #32]
 80047e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	6a1b      	ldr	r3, [r3, #32]
 80047ea:	2210      	movs	r2, #16
 80047ec:	4393      	bics	r3, r2
 80047ee:	001a      	movs	r2, r3
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	699b      	ldr	r3, [r3, #24]
 80047f8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80047fa:	693b      	ldr	r3, [r7, #16]
 80047fc:	4a0d      	ldr	r2, [pc, #52]	@ (8004834 <TIM_TI2_ConfigInputStage+0x60>)
 80047fe:	4013      	ands	r3, r2
 8004800:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	031b      	lsls	r3, r3, #12
 8004806:	693a      	ldr	r2, [r7, #16]
 8004808:	4313      	orrs	r3, r2
 800480a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	22a0      	movs	r2, #160	@ 0xa0
 8004810:	4393      	bics	r3, r2
 8004812:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004814:	68bb      	ldr	r3, [r7, #8]
 8004816:	011b      	lsls	r3, r3, #4
 8004818:	697a      	ldr	r2, [r7, #20]
 800481a:	4313      	orrs	r3, r2
 800481c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	693a      	ldr	r2, [r7, #16]
 8004822:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	697a      	ldr	r2, [r7, #20]
 8004828:	621a      	str	r2, [r3, #32]
}
 800482a:	46c0      	nop			@ (mov r8, r8)
 800482c:	46bd      	mov	sp, r7
 800482e:	b006      	add	sp, #24
 8004830:	bd80      	pop	{r7, pc}
 8004832:	46c0      	nop			@ (mov r8, r8)
 8004834:	ffff0fff 	.word	0xffff0fff

08004838 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b084      	sub	sp, #16
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
 8004840:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	689b      	ldr	r3, [r3, #8]
 8004846:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	4a08      	ldr	r2, [pc, #32]	@ (800486c <TIM_ITRx_SetConfig+0x34>)
 800484c:	4013      	ands	r3, r2
 800484e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004850:	683a      	ldr	r2, [r7, #0]
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	4313      	orrs	r3, r2
 8004856:	2207      	movs	r2, #7
 8004858:	4313      	orrs	r3, r2
 800485a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	68fa      	ldr	r2, [r7, #12]
 8004860:	609a      	str	r2, [r3, #8]
}
 8004862:	46c0      	nop			@ (mov r8, r8)
 8004864:	46bd      	mov	sp, r7
 8004866:	b004      	add	sp, #16
 8004868:	bd80      	pop	{r7, pc}
 800486a:	46c0      	nop			@ (mov r8, r8)
 800486c:	ffcfff8f 	.word	0xffcfff8f

08004870 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b086      	sub	sp, #24
 8004874:	af00      	add	r7, sp, #0
 8004876:	60f8      	str	r0, [r7, #12]
 8004878:	60b9      	str	r1, [r7, #8]
 800487a:	607a      	str	r2, [r7, #4]
 800487c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	689b      	ldr	r3, [r3, #8]
 8004882:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004884:	697b      	ldr	r3, [r7, #20]
 8004886:	4a09      	ldr	r2, [pc, #36]	@ (80048ac <TIM_ETR_SetConfig+0x3c>)
 8004888:	4013      	ands	r3, r2
 800488a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	021a      	lsls	r2, r3, #8
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	431a      	orrs	r2, r3
 8004894:	68bb      	ldr	r3, [r7, #8]
 8004896:	4313      	orrs	r3, r2
 8004898:	697a      	ldr	r2, [r7, #20]
 800489a:	4313      	orrs	r3, r2
 800489c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	697a      	ldr	r2, [r7, #20]
 80048a2:	609a      	str	r2, [r3, #8]
}
 80048a4:	46c0      	nop			@ (mov r8, r8)
 80048a6:	46bd      	mov	sp, r7
 80048a8:	b006      	add	sp, #24
 80048aa:	bd80      	pop	{r7, pc}
 80048ac:	ffff00ff 	.word	0xffff00ff

080048b0 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b084      	sub	sp, #16
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
 80048b8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d108      	bne.n	80048d2 <HAL_TIMEx_PWMN_Start+0x22>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2244      	movs	r2, #68	@ 0x44
 80048c4:	5c9b      	ldrb	r3, [r3, r2]
 80048c6:	b2db      	uxtb	r3, r3
 80048c8:	3b01      	subs	r3, #1
 80048ca:	1e5a      	subs	r2, r3, #1
 80048cc:	4193      	sbcs	r3, r2
 80048ce:	b2db      	uxtb	r3, r3
 80048d0:	e01f      	b.n	8004912 <HAL_TIMEx_PWMN_Start+0x62>
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	2b04      	cmp	r3, #4
 80048d6:	d108      	bne.n	80048ea <HAL_TIMEx_PWMN_Start+0x3a>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2245      	movs	r2, #69	@ 0x45
 80048dc:	5c9b      	ldrb	r3, [r3, r2]
 80048de:	b2db      	uxtb	r3, r3
 80048e0:	3b01      	subs	r3, #1
 80048e2:	1e5a      	subs	r2, r3, #1
 80048e4:	4193      	sbcs	r3, r2
 80048e6:	b2db      	uxtb	r3, r3
 80048e8:	e013      	b.n	8004912 <HAL_TIMEx_PWMN_Start+0x62>
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	2b08      	cmp	r3, #8
 80048ee:	d108      	bne.n	8004902 <HAL_TIMEx_PWMN_Start+0x52>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2246      	movs	r2, #70	@ 0x46
 80048f4:	5c9b      	ldrb	r3, [r3, r2]
 80048f6:	b2db      	uxtb	r3, r3
 80048f8:	3b01      	subs	r3, #1
 80048fa:	1e5a      	subs	r2, r3, #1
 80048fc:	4193      	sbcs	r3, r2
 80048fe:	b2db      	uxtb	r3, r3
 8004900:	e007      	b.n	8004912 <HAL_TIMEx_PWMN_Start+0x62>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2247      	movs	r2, #71	@ 0x47
 8004906:	5c9b      	ldrb	r3, [r3, r2]
 8004908:	b2db      	uxtb	r3, r3
 800490a:	3b01      	subs	r3, #1
 800490c:	1e5a      	subs	r2, r3, #1
 800490e:	4193      	sbcs	r3, r2
 8004910:	b2db      	uxtb	r3, r3
 8004912:	2b00      	cmp	r3, #0
 8004914:	d001      	beq.n	800491a <HAL_TIMEx_PWMN_Start+0x6a>
  {
    return HAL_ERROR;
 8004916:	2301      	movs	r3, #1
 8004918:	e05c      	b.n	80049d4 <HAL_TIMEx_PWMN_Start+0x124>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d104      	bne.n	800492a <HAL_TIMEx_PWMN_Start+0x7a>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2244      	movs	r2, #68	@ 0x44
 8004924:	2102      	movs	r1, #2
 8004926:	5499      	strb	r1, [r3, r2]
 8004928:	e013      	b.n	8004952 <HAL_TIMEx_PWMN_Start+0xa2>
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	2b04      	cmp	r3, #4
 800492e:	d104      	bne.n	800493a <HAL_TIMEx_PWMN_Start+0x8a>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2245      	movs	r2, #69	@ 0x45
 8004934:	2102      	movs	r1, #2
 8004936:	5499      	strb	r1, [r3, r2]
 8004938:	e00b      	b.n	8004952 <HAL_TIMEx_PWMN_Start+0xa2>
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	2b08      	cmp	r3, #8
 800493e:	d104      	bne.n	800494a <HAL_TIMEx_PWMN_Start+0x9a>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2246      	movs	r2, #70	@ 0x46
 8004944:	2102      	movs	r1, #2
 8004946:	5499      	strb	r1, [r3, r2]
 8004948:	e003      	b.n	8004952 <HAL_TIMEx_PWMN_Start+0xa2>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2247      	movs	r2, #71	@ 0x47
 800494e:	2102      	movs	r1, #2
 8004950:	5499      	strb	r1, [r3, r2]

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	6839      	ldr	r1, [r7, #0]
 8004958:	2204      	movs	r2, #4
 800495a:	0018      	movs	r0, r3
 800495c:	f000 f9a6 	bl	8004cac <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	2180      	movs	r1, #128	@ 0x80
 800496c:	0209      	lsls	r1, r1, #8
 800496e:	430a      	orrs	r2, r1
 8004970:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4a19      	ldr	r2, [pc, #100]	@ (80049dc <HAL_TIMEx_PWMN_Start+0x12c>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d009      	beq.n	8004990 <HAL_TIMEx_PWMN_Start+0xe0>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4a17      	ldr	r2, [pc, #92]	@ (80049e0 <HAL_TIMEx_PWMN_Start+0x130>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d004      	beq.n	8004990 <HAL_TIMEx_PWMN_Start+0xe0>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4a16      	ldr	r2, [pc, #88]	@ (80049e4 <HAL_TIMEx_PWMN_Start+0x134>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d116      	bne.n	80049be <HAL_TIMEx_PWMN_Start+0x10e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	689b      	ldr	r3, [r3, #8]
 8004996:	4a14      	ldr	r2, [pc, #80]	@ (80049e8 <HAL_TIMEx_PWMN_Start+0x138>)
 8004998:	4013      	ands	r3, r2
 800499a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	2b06      	cmp	r3, #6
 80049a0:	d016      	beq.n	80049d0 <HAL_TIMEx_PWMN_Start+0x120>
 80049a2:	68fa      	ldr	r2, [r7, #12]
 80049a4:	2380      	movs	r3, #128	@ 0x80
 80049a6:	025b      	lsls	r3, r3, #9
 80049a8:	429a      	cmp	r2, r3
 80049aa:	d011      	beq.n	80049d0 <HAL_TIMEx_PWMN_Start+0x120>
    {
      __HAL_TIM_ENABLE(htim);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	681a      	ldr	r2, [r3, #0]
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	2101      	movs	r1, #1
 80049b8:	430a      	orrs	r2, r1
 80049ba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049bc:	e008      	b.n	80049d0 <HAL_TIMEx_PWMN_Start+0x120>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	681a      	ldr	r2, [r3, #0]
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	2101      	movs	r1, #1
 80049ca:	430a      	orrs	r2, r1
 80049cc:	601a      	str	r2, [r3, #0]
 80049ce:	e000      	b.n	80049d2 <HAL_TIMEx_PWMN_Start+0x122>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049d0:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80049d2:	2300      	movs	r3, #0
}
 80049d4:	0018      	movs	r0, r3
 80049d6:	46bd      	mov	sp, r7
 80049d8:	b004      	add	sp, #16
 80049da:	bd80      	pop	{r7, pc}
 80049dc:	40012c00 	.word	0x40012c00
 80049e0:	40000400 	.word	0x40000400
 80049e4:	40014000 	.word	0x40014000
 80049e8:	00010007 	.word	0x00010007

080049ec <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b082      	sub	sp, #8
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
 80049f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	6839      	ldr	r1, [r7, #0]
 80049fc:	2200      	movs	r2, #0
 80049fe:	0018      	movs	r0, r3
 8004a00:	f000 f954 	bl	8004cac <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	6a1b      	ldr	r3, [r3, #32]
 8004a0a:	4a23      	ldr	r2, [pc, #140]	@ (8004a98 <HAL_TIMEx_PWMN_Stop+0xac>)
 8004a0c:	4013      	ands	r3, r2
 8004a0e:	d10d      	bne.n	8004a2c <HAL_TIMEx_PWMN_Stop+0x40>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	6a1b      	ldr	r3, [r3, #32]
 8004a16:	4a21      	ldr	r2, [pc, #132]	@ (8004a9c <HAL_TIMEx_PWMN_Stop+0xb0>)
 8004a18:	4013      	ands	r3, r2
 8004a1a:	d107      	bne.n	8004a2c <HAL_TIMEx_PWMN_Stop+0x40>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	491e      	ldr	r1, [pc, #120]	@ (8004aa0 <HAL_TIMEx_PWMN_Stop+0xb4>)
 8004a28:	400a      	ands	r2, r1
 8004a2a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	6a1b      	ldr	r3, [r3, #32]
 8004a32:	4a19      	ldr	r2, [pc, #100]	@ (8004a98 <HAL_TIMEx_PWMN_Stop+0xac>)
 8004a34:	4013      	ands	r3, r2
 8004a36:	d10d      	bne.n	8004a54 <HAL_TIMEx_PWMN_Stop+0x68>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	6a1b      	ldr	r3, [r3, #32]
 8004a3e:	4a17      	ldr	r2, [pc, #92]	@ (8004a9c <HAL_TIMEx_PWMN_Stop+0xb0>)
 8004a40:	4013      	ands	r3, r2
 8004a42:	d107      	bne.n	8004a54 <HAL_TIMEx_PWMN_Stop+0x68>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	681a      	ldr	r2, [r3, #0]
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	2101      	movs	r1, #1
 8004a50:	438a      	bics	r2, r1
 8004a52:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d104      	bne.n	8004a64 <HAL_TIMEx_PWMN_Stop+0x78>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2244      	movs	r2, #68	@ 0x44
 8004a5e:	2101      	movs	r1, #1
 8004a60:	5499      	strb	r1, [r3, r2]
 8004a62:	e013      	b.n	8004a8c <HAL_TIMEx_PWMN_Stop+0xa0>
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	2b04      	cmp	r3, #4
 8004a68:	d104      	bne.n	8004a74 <HAL_TIMEx_PWMN_Stop+0x88>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2245      	movs	r2, #69	@ 0x45
 8004a6e:	2101      	movs	r1, #1
 8004a70:	5499      	strb	r1, [r3, r2]
 8004a72:	e00b      	b.n	8004a8c <HAL_TIMEx_PWMN_Stop+0xa0>
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	2b08      	cmp	r3, #8
 8004a78:	d104      	bne.n	8004a84 <HAL_TIMEx_PWMN_Stop+0x98>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2246      	movs	r2, #70	@ 0x46
 8004a7e:	2101      	movs	r1, #1
 8004a80:	5499      	strb	r1, [r3, r2]
 8004a82:	e003      	b.n	8004a8c <HAL_TIMEx_PWMN_Stop+0xa0>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2247      	movs	r2, #71	@ 0x47
 8004a88:	2101      	movs	r1, #1
 8004a8a:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8004a8c:	2300      	movs	r3, #0
}
 8004a8e:	0018      	movs	r0, r3
 8004a90:	46bd      	mov	sp, r7
 8004a92:	b002      	add	sp, #8
 8004a94:	bd80      	pop	{r7, pc}
 8004a96:	46c0      	nop			@ (mov r8, r8)
 8004a98:	00001111 	.word	0x00001111
 8004a9c:	00000444 	.word	0x00000444
 8004aa0:	ffff7fff 	.word	0xffff7fff

08004aa4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b084      	sub	sp, #16
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
 8004aac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	223c      	movs	r2, #60	@ 0x3c
 8004ab2:	5c9b      	ldrb	r3, [r3, r2]
 8004ab4:	2b01      	cmp	r3, #1
 8004ab6:	d101      	bne.n	8004abc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004ab8:	2302      	movs	r3, #2
 8004aba:	e04f      	b.n	8004b5c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	223c      	movs	r2, #60	@ 0x3c
 8004ac0:	2101      	movs	r1, #1
 8004ac2:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	223d      	movs	r2, #61	@ 0x3d
 8004ac8:	2102      	movs	r1, #2
 8004aca:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	685b      	ldr	r3, [r3, #4]
 8004ad2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	689b      	ldr	r3, [r3, #8]
 8004ada:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4a20      	ldr	r2, [pc, #128]	@ (8004b64 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d108      	bne.n	8004af8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	4a1f      	ldr	r2, [pc, #124]	@ (8004b68 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004aea:	4013      	ands	r3, r2
 8004aec:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	685b      	ldr	r3, [r3, #4]
 8004af2:	68fa      	ldr	r2, [r7, #12]
 8004af4:	4313      	orrs	r3, r2
 8004af6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	2270      	movs	r2, #112	@ 0x70
 8004afc:	4393      	bics	r3, r2
 8004afe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	68fa      	ldr	r2, [r7, #12]
 8004b06:	4313      	orrs	r3, r2
 8004b08:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	68fa      	ldr	r2, [r7, #12]
 8004b10:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	4a13      	ldr	r2, [pc, #76]	@ (8004b64 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d009      	beq.n	8004b30 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4a12      	ldr	r2, [pc, #72]	@ (8004b6c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d004      	beq.n	8004b30 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	4a11      	ldr	r2, [pc, #68]	@ (8004b70 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d10c      	bne.n	8004b4a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004b30:	68bb      	ldr	r3, [r7, #8]
 8004b32:	2280      	movs	r2, #128	@ 0x80
 8004b34:	4393      	bics	r3, r2
 8004b36:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	689b      	ldr	r3, [r3, #8]
 8004b3c:	68ba      	ldr	r2, [r7, #8]
 8004b3e:	4313      	orrs	r3, r2
 8004b40:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	68ba      	ldr	r2, [r7, #8]
 8004b48:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	223d      	movs	r2, #61	@ 0x3d
 8004b4e:	2101      	movs	r1, #1
 8004b50:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	223c      	movs	r2, #60	@ 0x3c
 8004b56:	2100      	movs	r1, #0
 8004b58:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004b5a:	2300      	movs	r3, #0
}
 8004b5c:	0018      	movs	r0, r3
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	b004      	add	sp, #16
 8004b62:	bd80      	pop	{r7, pc}
 8004b64:	40012c00 	.word	0x40012c00
 8004b68:	ff0fffff 	.word	0xff0fffff
 8004b6c:	40000400 	.word	0x40000400
 8004b70:	40014000 	.word	0x40014000

08004b74 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b084      	sub	sp, #16
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
 8004b7c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004b7e:	2300      	movs	r3, #0
 8004b80:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	223c      	movs	r2, #60	@ 0x3c
 8004b86:	5c9b      	ldrb	r3, [r3, r2]
 8004b88:	2b01      	cmp	r3, #1
 8004b8a:	d101      	bne.n	8004b90 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004b8c:	2302      	movs	r3, #2
 8004b8e:	e06f      	b.n	8004c70 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	223c      	movs	r2, #60	@ 0x3c
 8004b94:	2101      	movs	r1, #1
 8004b96:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	22ff      	movs	r2, #255	@ 0xff
 8004b9c:	4393      	bics	r3, r2
 8004b9e:	001a      	movs	r2, r3
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	68db      	ldr	r3, [r3, #12]
 8004ba4:	4313      	orrs	r3, r2
 8004ba6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	4a33      	ldr	r2, [pc, #204]	@ (8004c78 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 8004bac:	401a      	ands	r2, r3
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	689b      	ldr	r3, [r3, #8]
 8004bb2:	4313      	orrs	r3, r2
 8004bb4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	4a30      	ldr	r2, [pc, #192]	@ (8004c7c <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 8004bba:	401a      	ands	r2, r3
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	4313      	orrs	r3, r2
 8004bc2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	4a2e      	ldr	r2, [pc, #184]	@ (8004c80 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>)
 8004bc8:	401a      	ands	r2, r3
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	4a2b      	ldr	r2, [pc, #172]	@ (8004c84 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8004bd6:	401a      	ands	r2, r3
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	691b      	ldr	r3, [r3, #16]
 8004bdc:	4313      	orrs	r3, r2
 8004bde:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	4a29      	ldr	r2, [pc, #164]	@ (8004c88 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8004be4:	401a      	ands	r2, r3
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	695b      	ldr	r3, [r3, #20]
 8004bea:	4313      	orrs	r3, r2
 8004bec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	4a26      	ldr	r2, [pc, #152]	@ (8004c8c <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8004bf2:	401a      	ands	r2, r3
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	4a24      	ldr	r2, [pc, #144]	@ (8004c90 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8004c00:	401a      	ands	r2, r3
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	699b      	ldr	r3, [r3, #24]
 8004c06:	041b      	lsls	r3, r3, #16
 8004c08:	4313      	orrs	r3, r2
 8004c0a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	4a21      	ldr	r2, [pc, #132]	@ (8004c94 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8004c10:	401a      	ands	r2, r3
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	69db      	ldr	r3, [r3, #28]
 8004c16:	4313      	orrs	r3, r2
 8004c18:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	4a1e      	ldr	r2, [pc, #120]	@ (8004c98 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d11c      	bne.n	8004c5e <HAL_TIMEx_ConfigBreakDeadTime+0xea>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	4a1d      	ldr	r2, [pc, #116]	@ (8004c9c <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8004c28:	401a      	ands	r2, r3
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c2e:	051b      	lsls	r3, r3, #20
 8004c30:	4313      	orrs	r3, r2
 8004c32:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	4a1a      	ldr	r2, [pc, #104]	@ (8004ca0 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8004c38:	401a      	ands	r2, r3
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	6a1b      	ldr	r3, [r3, #32]
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	4a17      	ldr	r2, [pc, #92]	@ (8004ca4 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8004c46:	401a      	ands	r2, r3
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c4c:	4313      	orrs	r3, r2
 8004c4e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	4a15      	ldr	r2, [pc, #84]	@ (8004ca8 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8004c54:	401a      	ands	r2, r3
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	68fa      	ldr	r2, [r7, #12]
 8004c64:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	223c      	movs	r2, #60	@ 0x3c
 8004c6a:	2100      	movs	r1, #0
 8004c6c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004c6e:	2300      	movs	r3, #0
}
 8004c70:	0018      	movs	r0, r3
 8004c72:	46bd      	mov	sp, r7
 8004c74:	b004      	add	sp, #16
 8004c76:	bd80      	pop	{r7, pc}
 8004c78:	fffffcff 	.word	0xfffffcff
 8004c7c:	fffffbff 	.word	0xfffffbff
 8004c80:	fffff7ff 	.word	0xfffff7ff
 8004c84:	ffffefff 	.word	0xffffefff
 8004c88:	ffffdfff 	.word	0xffffdfff
 8004c8c:	ffffbfff 	.word	0xffffbfff
 8004c90:	fff0ffff 	.word	0xfff0ffff
 8004c94:	efffffff 	.word	0xefffffff
 8004c98:	40012c00 	.word	0x40012c00
 8004c9c:	ff0fffff 	.word	0xff0fffff
 8004ca0:	feffffff 	.word	0xfeffffff
 8004ca4:	fdffffff 	.word	0xfdffffff
 8004ca8:	dfffffff 	.word	0xdfffffff

08004cac <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b086      	sub	sp, #24
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	60f8      	str	r0, [r7, #12]
 8004cb4:	60b9      	str	r1, [r7, #8]
 8004cb6:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 8004cb8:	68bb      	ldr	r3, [r7, #8]
 8004cba:	220f      	movs	r2, #15
 8004cbc:	4013      	ands	r3, r2
 8004cbe:	2204      	movs	r2, #4
 8004cc0:	409a      	lsls	r2, r3
 8004cc2:	0013      	movs	r3, r2
 8004cc4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	6a1b      	ldr	r3, [r3, #32]
 8004cca:	697a      	ldr	r2, [r7, #20]
 8004ccc:	43d2      	mvns	r2, r2
 8004cce:	401a      	ands	r2, r3
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	6a1a      	ldr	r2, [r3, #32]
 8004cd8:	68bb      	ldr	r3, [r7, #8]
 8004cda:	210f      	movs	r1, #15
 8004cdc:	400b      	ands	r3, r1
 8004cde:	6879      	ldr	r1, [r7, #4]
 8004ce0:	4099      	lsls	r1, r3
 8004ce2:	000b      	movs	r3, r1
 8004ce4:	431a      	orrs	r2, r3
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	621a      	str	r2, [r3, #32]
}
 8004cea:	46c0      	nop			@ (mov r8, r8)
 8004cec:	46bd      	mov	sp, r7
 8004cee:	b006      	add	sp, #24
 8004cf0:	bd80      	pop	{r7, pc}
	...

08004cf4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004cf4:	b5b0      	push	{r4, r5, r7, lr}
 8004cf6:	b0aa      	sub	sp, #168	@ 0xa8
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	69db      	ldr	r3, [r3, #28]
 8004d02:	22a4      	movs	r2, #164	@ 0xa4
 8004d04:	18b9      	adds	r1, r7, r2
 8004d06:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	20a0      	movs	r0, #160	@ 0xa0
 8004d10:	1839      	adds	r1, r7, r0
 8004d12:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	689b      	ldr	r3, [r3, #8]
 8004d1a:	249c      	movs	r4, #156	@ 0x9c
 8004d1c:	1939      	adds	r1, r7, r4
 8004d1e:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004d20:	0011      	movs	r1, r2
 8004d22:	18bb      	adds	r3, r7, r2
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4aa2      	ldr	r2, [pc, #648]	@ (8004fb0 <HAL_UART_IRQHandler+0x2bc>)
 8004d28:	4013      	ands	r3, r2
 8004d2a:	2298      	movs	r2, #152	@ 0x98
 8004d2c:	18bd      	adds	r5, r7, r2
 8004d2e:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8004d30:	18bb      	adds	r3, r7, r2
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d11a      	bne.n	8004d6e <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004d38:	187b      	adds	r3, r7, r1
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	2220      	movs	r2, #32
 8004d3e:	4013      	ands	r3, r2
 8004d40:	d015      	beq.n	8004d6e <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004d42:	183b      	adds	r3, r7, r0
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	2220      	movs	r2, #32
 8004d48:	4013      	ands	r3, r2
 8004d4a:	d105      	bne.n	8004d58 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004d4c:	193b      	adds	r3, r7, r4
 8004d4e:	681a      	ldr	r2, [r3, #0]
 8004d50:	2380      	movs	r3, #128	@ 0x80
 8004d52:	055b      	lsls	r3, r3, #21
 8004d54:	4013      	ands	r3, r2
 8004d56:	d00a      	beq.n	8004d6e <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d100      	bne.n	8004d62 <HAL_UART_IRQHandler+0x6e>
 8004d60:	e2dc      	b.n	800531c <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d66:	687a      	ldr	r2, [r7, #4]
 8004d68:	0010      	movs	r0, r2
 8004d6a:	4798      	blx	r3
      }
      return;
 8004d6c:	e2d6      	b.n	800531c <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004d6e:	2398      	movs	r3, #152	@ 0x98
 8004d70:	18fb      	adds	r3, r7, r3
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d100      	bne.n	8004d7a <HAL_UART_IRQHandler+0x86>
 8004d78:	e122      	b.n	8004fc0 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8004d7a:	239c      	movs	r3, #156	@ 0x9c
 8004d7c:	18fb      	adds	r3, r7, r3
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4a8c      	ldr	r2, [pc, #560]	@ (8004fb4 <HAL_UART_IRQHandler+0x2c0>)
 8004d82:	4013      	ands	r3, r2
 8004d84:	d106      	bne.n	8004d94 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8004d86:	23a0      	movs	r3, #160	@ 0xa0
 8004d88:	18fb      	adds	r3, r7, r3
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	4a8a      	ldr	r2, [pc, #552]	@ (8004fb8 <HAL_UART_IRQHandler+0x2c4>)
 8004d8e:	4013      	ands	r3, r2
 8004d90:	d100      	bne.n	8004d94 <HAL_UART_IRQHandler+0xa0>
 8004d92:	e115      	b.n	8004fc0 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004d94:	23a4      	movs	r3, #164	@ 0xa4
 8004d96:	18fb      	adds	r3, r7, r3
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	2201      	movs	r2, #1
 8004d9c:	4013      	ands	r3, r2
 8004d9e:	d012      	beq.n	8004dc6 <HAL_UART_IRQHandler+0xd2>
 8004da0:	23a0      	movs	r3, #160	@ 0xa0
 8004da2:	18fb      	adds	r3, r7, r3
 8004da4:	681a      	ldr	r2, [r3, #0]
 8004da6:	2380      	movs	r3, #128	@ 0x80
 8004da8:	005b      	lsls	r3, r3, #1
 8004daa:	4013      	ands	r3, r2
 8004dac:	d00b      	beq.n	8004dc6 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	2201      	movs	r2, #1
 8004db4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2290      	movs	r2, #144	@ 0x90
 8004dba:	589b      	ldr	r3, [r3, r2]
 8004dbc:	2201      	movs	r2, #1
 8004dbe:	431a      	orrs	r2, r3
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2190      	movs	r1, #144	@ 0x90
 8004dc4:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004dc6:	23a4      	movs	r3, #164	@ 0xa4
 8004dc8:	18fb      	adds	r3, r7, r3
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	2202      	movs	r2, #2
 8004dce:	4013      	ands	r3, r2
 8004dd0:	d011      	beq.n	8004df6 <HAL_UART_IRQHandler+0x102>
 8004dd2:	239c      	movs	r3, #156	@ 0x9c
 8004dd4:	18fb      	adds	r3, r7, r3
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	2201      	movs	r2, #1
 8004dda:	4013      	ands	r3, r2
 8004ddc:	d00b      	beq.n	8004df6 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	2202      	movs	r2, #2
 8004de4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2290      	movs	r2, #144	@ 0x90
 8004dea:	589b      	ldr	r3, [r3, r2]
 8004dec:	2204      	movs	r2, #4
 8004dee:	431a      	orrs	r2, r3
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2190      	movs	r1, #144	@ 0x90
 8004df4:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004df6:	23a4      	movs	r3, #164	@ 0xa4
 8004df8:	18fb      	adds	r3, r7, r3
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	2204      	movs	r2, #4
 8004dfe:	4013      	ands	r3, r2
 8004e00:	d011      	beq.n	8004e26 <HAL_UART_IRQHandler+0x132>
 8004e02:	239c      	movs	r3, #156	@ 0x9c
 8004e04:	18fb      	adds	r3, r7, r3
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	2201      	movs	r2, #1
 8004e0a:	4013      	ands	r3, r2
 8004e0c:	d00b      	beq.n	8004e26 <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	2204      	movs	r2, #4
 8004e14:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2290      	movs	r2, #144	@ 0x90
 8004e1a:	589b      	ldr	r3, [r3, r2]
 8004e1c:	2202      	movs	r2, #2
 8004e1e:	431a      	orrs	r2, r3
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2190      	movs	r1, #144	@ 0x90
 8004e24:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004e26:	23a4      	movs	r3, #164	@ 0xa4
 8004e28:	18fb      	adds	r3, r7, r3
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	2208      	movs	r2, #8
 8004e2e:	4013      	ands	r3, r2
 8004e30:	d017      	beq.n	8004e62 <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004e32:	23a0      	movs	r3, #160	@ 0xa0
 8004e34:	18fb      	adds	r3, r7, r3
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	2220      	movs	r2, #32
 8004e3a:	4013      	ands	r3, r2
 8004e3c:	d105      	bne.n	8004e4a <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8004e3e:	239c      	movs	r3, #156	@ 0x9c
 8004e40:	18fb      	adds	r3, r7, r3
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4a5b      	ldr	r2, [pc, #364]	@ (8004fb4 <HAL_UART_IRQHandler+0x2c0>)
 8004e46:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004e48:	d00b      	beq.n	8004e62 <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	2208      	movs	r2, #8
 8004e50:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2290      	movs	r2, #144	@ 0x90
 8004e56:	589b      	ldr	r3, [r3, r2]
 8004e58:	2208      	movs	r2, #8
 8004e5a:	431a      	orrs	r2, r3
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2190      	movs	r1, #144	@ 0x90
 8004e60:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004e62:	23a4      	movs	r3, #164	@ 0xa4
 8004e64:	18fb      	adds	r3, r7, r3
 8004e66:	681a      	ldr	r2, [r3, #0]
 8004e68:	2380      	movs	r3, #128	@ 0x80
 8004e6a:	011b      	lsls	r3, r3, #4
 8004e6c:	4013      	ands	r3, r2
 8004e6e:	d013      	beq.n	8004e98 <HAL_UART_IRQHandler+0x1a4>
 8004e70:	23a0      	movs	r3, #160	@ 0xa0
 8004e72:	18fb      	adds	r3, r7, r3
 8004e74:	681a      	ldr	r2, [r3, #0]
 8004e76:	2380      	movs	r3, #128	@ 0x80
 8004e78:	04db      	lsls	r3, r3, #19
 8004e7a:	4013      	ands	r3, r2
 8004e7c:	d00c      	beq.n	8004e98 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	2280      	movs	r2, #128	@ 0x80
 8004e84:	0112      	lsls	r2, r2, #4
 8004e86:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2290      	movs	r2, #144	@ 0x90
 8004e8c:	589b      	ldr	r3, [r3, r2]
 8004e8e:	2220      	movs	r2, #32
 8004e90:	431a      	orrs	r2, r3
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2190      	movs	r1, #144	@ 0x90
 8004e96:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2290      	movs	r2, #144	@ 0x90
 8004e9c:	589b      	ldr	r3, [r3, r2]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d100      	bne.n	8004ea4 <HAL_UART_IRQHandler+0x1b0>
 8004ea2:	e23d      	b.n	8005320 <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004ea4:	23a4      	movs	r3, #164	@ 0xa4
 8004ea6:	18fb      	adds	r3, r7, r3
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	2220      	movs	r2, #32
 8004eac:	4013      	ands	r3, r2
 8004eae:	d015      	beq.n	8004edc <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004eb0:	23a0      	movs	r3, #160	@ 0xa0
 8004eb2:	18fb      	adds	r3, r7, r3
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	2220      	movs	r2, #32
 8004eb8:	4013      	ands	r3, r2
 8004eba:	d106      	bne.n	8004eca <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004ebc:	239c      	movs	r3, #156	@ 0x9c
 8004ebe:	18fb      	adds	r3, r7, r3
 8004ec0:	681a      	ldr	r2, [r3, #0]
 8004ec2:	2380      	movs	r3, #128	@ 0x80
 8004ec4:	055b      	lsls	r3, r3, #21
 8004ec6:	4013      	ands	r3, r2
 8004ec8:	d008      	beq.n	8004edc <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d004      	beq.n	8004edc <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ed6:	687a      	ldr	r2, [r7, #4]
 8004ed8:	0010      	movs	r0, r2
 8004eda:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2290      	movs	r2, #144	@ 0x90
 8004ee0:	589b      	ldr	r3, [r3, r2]
 8004ee2:	2194      	movs	r1, #148	@ 0x94
 8004ee4:	187a      	adds	r2, r7, r1
 8004ee6:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	689b      	ldr	r3, [r3, #8]
 8004eee:	2240      	movs	r2, #64	@ 0x40
 8004ef0:	4013      	ands	r3, r2
 8004ef2:	2b40      	cmp	r3, #64	@ 0x40
 8004ef4:	d004      	beq.n	8004f00 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004ef6:	187b      	adds	r3, r7, r1
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	2228      	movs	r2, #40	@ 0x28
 8004efc:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004efe:	d04c      	beq.n	8004f9a <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	0018      	movs	r0, r3
 8004f04:	f000 fa38 	bl	8005378 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	689b      	ldr	r3, [r3, #8]
 8004f0e:	2240      	movs	r2, #64	@ 0x40
 8004f10:	4013      	ands	r3, r2
 8004f12:	2b40      	cmp	r3, #64	@ 0x40
 8004f14:	d13c      	bne.n	8004f90 <HAL_UART_IRQHandler+0x29c>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f16:	f3ef 8310 	mrs	r3, PRIMASK
 8004f1a:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 8004f1c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f1e:	2090      	movs	r0, #144	@ 0x90
 8004f20:	183a      	adds	r2, r7, r0
 8004f22:	6013      	str	r3, [r2, #0]
 8004f24:	2301      	movs	r3, #1
 8004f26:	667b      	str	r3, [r7, #100]	@ 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f28:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004f2a:	f383 8810 	msr	PRIMASK, r3
}
 8004f2e:	46c0      	nop			@ (mov r8, r8)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	689a      	ldr	r2, [r3, #8]
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	2140      	movs	r1, #64	@ 0x40
 8004f3c:	438a      	bics	r2, r1
 8004f3e:	609a      	str	r2, [r3, #8]
 8004f40:	183b      	adds	r3, r7, r0
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f46:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004f48:	f383 8810 	msr	PRIMASK, r3
}
 8004f4c:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2280      	movs	r2, #128	@ 0x80
 8004f52:	589b      	ldr	r3, [r3, r2]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d016      	beq.n	8004f86 <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2280      	movs	r2, #128	@ 0x80
 8004f5c:	589b      	ldr	r3, [r3, r2]
 8004f5e:	4a17      	ldr	r2, [pc, #92]	@ (8004fbc <HAL_UART_IRQHandler+0x2c8>)
 8004f60:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2280      	movs	r2, #128	@ 0x80
 8004f66:	589b      	ldr	r3, [r3, r2]
 8004f68:	0018      	movs	r0, r3
 8004f6a:	f7fd fc95 	bl	8002898 <HAL_DMA_Abort_IT>
 8004f6e:	1e03      	subs	r3, r0, #0
 8004f70:	d01c      	beq.n	8004fac <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2280      	movs	r2, #128	@ 0x80
 8004f76:	589b      	ldr	r3, [r3, r2]
 8004f78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f7a:	687a      	ldr	r2, [r7, #4]
 8004f7c:	2180      	movs	r1, #128	@ 0x80
 8004f7e:	5852      	ldr	r2, [r2, r1]
 8004f80:	0010      	movs	r0, r2
 8004f82:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f84:	e012      	b.n	8004fac <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	0018      	movs	r0, r3
 8004f8a:	f000 f9e1 	bl	8005350 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f8e:	e00d      	b.n	8004fac <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	0018      	movs	r0, r3
 8004f94:	f000 f9dc 	bl	8005350 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f98:	e008      	b.n	8004fac <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	0018      	movs	r0, r3
 8004f9e:	f000 f9d7 	bl	8005350 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2290      	movs	r2, #144	@ 0x90
 8004fa6:	2100      	movs	r1, #0
 8004fa8:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8004faa:	e1b9      	b.n	8005320 <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fac:	46c0      	nop			@ (mov r8, r8)
    return;
 8004fae:	e1b7      	b.n	8005320 <HAL_UART_IRQHandler+0x62c>
 8004fb0:	0000080f 	.word	0x0000080f
 8004fb4:	10000001 	.word	0x10000001
 8004fb8:	04000120 	.word	0x04000120
 8004fbc:	08005445 	.word	0x08005445

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004fc4:	2b01      	cmp	r3, #1
 8004fc6:	d000      	beq.n	8004fca <HAL_UART_IRQHandler+0x2d6>
 8004fc8:	e13e      	b.n	8005248 <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004fca:	23a4      	movs	r3, #164	@ 0xa4
 8004fcc:	18fb      	adds	r3, r7, r3
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	2210      	movs	r2, #16
 8004fd2:	4013      	ands	r3, r2
 8004fd4:	d100      	bne.n	8004fd8 <HAL_UART_IRQHandler+0x2e4>
 8004fd6:	e137      	b.n	8005248 <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004fd8:	23a0      	movs	r3, #160	@ 0xa0
 8004fda:	18fb      	adds	r3, r7, r3
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	2210      	movs	r2, #16
 8004fe0:	4013      	ands	r3, r2
 8004fe2:	d100      	bne.n	8004fe6 <HAL_UART_IRQHandler+0x2f2>
 8004fe4:	e130      	b.n	8005248 <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	2210      	movs	r2, #16
 8004fec:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	689b      	ldr	r3, [r3, #8]
 8004ff4:	2240      	movs	r2, #64	@ 0x40
 8004ff6:	4013      	ands	r3, r2
 8004ff8:	2b40      	cmp	r3, #64	@ 0x40
 8004ffa:	d000      	beq.n	8004ffe <HAL_UART_IRQHandler+0x30a>
 8004ffc:	e0a4      	b.n	8005148 <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2280      	movs	r2, #128	@ 0x80
 8005002:	589b      	ldr	r3, [r3, r2]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	685a      	ldr	r2, [r3, #4]
 8005008:	217e      	movs	r1, #126	@ 0x7e
 800500a:	187b      	adds	r3, r7, r1
 800500c:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 800500e:	187b      	adds	r3, r7, r1
 8005010:	881b      	ldrh	r3, [r3, #0]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d100      	bne.n	8005018 <HAL_UART_IRQHandler+0x324>
 8005016:	e185      	b.n	8005324 <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	225c      	movs	r2, #92	@ 0x5c
 800501c:	5a9b      	ldrh	r3, [r3, r2]
 800501e:	187a      	adds	r2, r7, r1
 8005020:	8812      	ldrh	r2, [r2, #0]
 8005022:	429a      	cmp	r2, r3
 8005024:	d300      	bcc.n	8005028 <HAL_UART_IRQHandler+0x334>
 8005026:	e17d      	b.n	8005324 <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	187a      	adds	r2, r7, r1
 800502c:	215e      	movs	r1, #94	@ 0x5e
 800502e:	8812      	ldrh	r2, [r2, #0]
 8005030:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2280      	movs	r2, #128	@ 0x80
 8005036:	589b      	ldr	r3, [r3, r2]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	2220      	movs	r2, #32
 800503e:	4013      	ands	r3, r2
 8005040:	d170      	bne.n	8005124 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005042:	f3ef 8310 	mrs	r3, PRIMASK
 8005046:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8005048:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800504a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800504c:	2301      	movs	r3, #1
 800504e:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005050:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005052:	f383 8810 	msr	PRIMASK, r3
}
 8005056:	46c0      	nop			@ (mov r8, r8)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	681a      	ldr	r2, [r3, #0]
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	49b4      	ldr	r1, [pc, #720]	@ (8005334 <HAL_UART_IRQHandler+0x640>)
 8005064:	400a      	ands	r2, r1
 8005066:	601a      	str	r2, [r3, #0]
 8005068:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800506a:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800506c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800506e:	f383 8810 	msr	PRIMASK, r3
}
 8005072:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005074:	f3ef 8310 	mrs	r3, PRIMASK
 8005078:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 800507a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800507c:	677b      	str	r3, [r7, #116]	@ 0x74
 800507e:	2301      	movs	r3, #1
 8005080:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005082:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005084:	f383 8810 	msr	PRIMASK, r3
}
 8005088:	46c0      	nop			@ (mov r8, r8)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	689a      	ldr	r2, [r3, #8]
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	2101      	movs	r1, #1
 8005096:	438a      	bics	r2, r1
 8005098:	609a      	str	r2, [r3, #8]
 800509a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800509c:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800509e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80050a0:	f383 8810 	msr	PRIMASK, r3
}
 80050a4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80050a6:	f3ef 8310 	mrs	r3, PRIMASK
 80050aa:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 80050ac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80050ae:	673b      	str	r3, [r7, #112]	@ 0x70
 80050b0:	2301      	movs	r3, #1
 80050b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80050b6:	f383 8810 	msr	PRIMASK, r3
}
 80050ba:	46c0      	nop			@ (mov r8, r8)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	689a      	ldr	r2, [r3, #8]
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	2140      	movs	r1, #64	@ 0x40
 80050c8:	438a      	bics	r2, r1
 80050ca:	609a      	str	r2, [r3, #8]
 80050cc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80050ce:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050d0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80050d2:	f383 8810 	msr	PRIMASK, r3
}
 80050d6:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	228c      	movs	r2, #140	@ 0x8c
 80050dc:	2120      	movs	r1, #32
 80050de:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2200      	movs	r2, #0
 80050e4:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80050e6:	f3ef 8310 	mrs	r3, PRIMASK
 80050ea:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 80050ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050ee:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80050f0:	2301      	movs	r3, #1
 80050f2:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050f4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80050f6:	f383 8810 	msr	PRIMASK, r3
}
 80050fa:	46c0      	nop			@ (mov r8, r8)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	681a      	ldr	r2, [r3, #0]
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	2110      	movs	r1, #16
 8005108:	438a      	bics	r2, r1
 800510a:	601a      	str	r2, [r3, #0]
 800510c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800510e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005110:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005112:	f383 8810 	msr	PRIMASK, r3
}
 8005116:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2280      	movs	r2, #128	@ 0x80
 800511c:	589b      	ldr	r3, [r3, r2]
 800511e:	0018      	movs	r0, r3
 8005120:	f7fd fb58 	bl	80027d4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2202      	movs	r2, #2
 8005128:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	225c      	movs	r2, #92	@ 0x5c
 800512e:	5a9a      	ldrh	r2, [r3, r2]
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	215e      	movs	r1, #94	@ 0x5e
 8005134:	5a5b      	ldrh	r3, [r3, r1]
 8005136:	b29b      	uxth	r3, r3
 8005138:	1ad3      	subs	r3, r2, r3
 800513a:	b29a      	uxth	r2, r3
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	0011      	movs	r1, r2
 8005140:	0018      	movs	r0, r3
 8005142:	f000 f90d 	bl	8005360 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005146:	e0ed      	b.n	8005324 <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	225c      	movs	r2, #92	@ 0x5c
 800514c:	5a99      	ldrh	r1, [r3, r2]
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	225e      	movs	r2, #94	@ 0x5e
 8005152:	5a9b      	ldrh	r3, [r3, r2]
 8005154:	b29a      	uxth	r2, r3
 8005156:	208e      	movs	r0, #142	@ 0x8e
 8005158:	183b      	adds	r3, r7, r0
 800515a:	1a8a      	subs	r2, r1, r2
 800515c:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	225e      	movs	r2, #94	@ 0x5e
 8005162:	5a9b      	ldrh	r3, [r3, r2]
 8005164:	b29b      	uxth	r3, r3
 8005166:	2b00      	cmp	r3, #0
 8005168:	d100      	bne.n	800516c <HAL_UART_IRQHandler+0x478>
 800516a:	e0dd      	b.n	8005328 <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 800516c:	183b      	adds	r3, r7, r0
 800516e:	881b      	ldrh	r3, [r3, #0]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d100      	bne.n	8005176 <HAL_UART_IRQHandler+0x482>
 8005174:	e0d8      	b.n	8005328 <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005176:	f3ef 8310 	mrs	r3, PRIMASK
 800517a:	60fb      	str	r3, [r7, #12]
  return(result);
 800517c:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800517e:	2488      	movs	r4, #136	@ 0x88
 8005180:	193a      	adds	r2, r7, r4
 8005182:	6013      	str	r3, [r2, #0]
 8005184:	2301      	movs	r3, #1
 8005186:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005188:	693b      	ldr	r3, [r7, #16]
 800518a:	f383 8810 	msr	PRIMASK, r3
}
 800518e:	46c0      	nop			@ (mov r8, r8)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	681a      	ldr	r2, [r3, #0]
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4967      	ldr	r1, [pc, #412]	@ (8005338 <HAL_UART_IRQHandler+0x644>)
 800519c:	400a      	ands	r2, r1
 800519e:	601a      	str	r2, [r3, #0]
 80051a0:	193b      	adds	r3, r7, r4
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051a6:	697b      	ldr	r3, [r7, #20]
 80051a8:	f383 8810 	msr	PRIMASK, r3
}
 80051ac:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80051ae:	f3ef 8310 	mrs	r3, PRIMASK
 80051b2:	61bb      	str	r3, [r7, #24]
  return(result);
 80051b4:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80051b6:	2484      	movs	r4, #132	@ 0x84
 80051b8:	193a      	adds	r2, r7, r4
 80051ba:	6013      	str	r3, [r2, #0]
 80051bc:	2301      	movs	r3, #1
 80051be:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051c0:	69fb      	ldr	r3, [r7, #28]
 80051c2:	f383 8810 	msr	PRIMASK, r3
}
 80051c6:	46c0      	nop			@ (mov r8, r8)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	689a      	ldr	r2, [r3, #8]
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	495a      	ldr	r1, [pc, #360]	@ (800533c <HAL_UART_IRQHandler+0x648>)
 80051d4:	400a      	ands	r2, r1
 80051d6:	609a      	str	r2, [r3, #8]
 80051d8:	193b      	adds	r3, r7, r4
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051de:	6a3b      	ldr	r3, [r7, #32]
 80051e0:	f383 8810 	msr	PRIMASK, r3
}
 80051e4:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	228c      	movs	r2, #140	@ 0x8c
 80051ea:	2120      	movs	r1, #32
 80051ec:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2200      	movs	r2, #0
 80051f2:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2200      	movs	r2, #0
 80051f8:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80051fa:	f3ef 8310 	mrs	r3, PRIMASK
 80051fe:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8005200:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005202:	2480      	movs	r4, #128	@ 0x80
 8005204:	193a      	adds	r2, r7, r4
 8005206:	6013      	str	r3, [r2, #0]
 8005208:	2301      	movs	r3, #1
 800520a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800520c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800520e:	f383 8810 	msr	PRIMASK, r3
}
 8005212:	46c0      	nop			@ (mov r8, r8)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	681a      	ldr	r2, [r3, #0]
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	2110      	movs	r1, #16
 8005220:	438a      	bics	r2, r1
 8005222:	601a      	str	r2, [r3, #0]
 8005224:	193b      	adds	r3, r7, r4
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800522a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800522c:	f383 8810 	msr	PRIMASK, r3
}
 8005230:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2202      	movs	r2, #2
 8005236:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005238:	183b      	adds	r3, r7, r0
 800523a:	881a      	ldrh	r2, [r3, #0]
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	0011      	movs	r1, r2
 8005240:	0018      	movs	r0, r3
 8005242:	f000 f88d 	bl	8005360 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005246:	e06f      	b.n	8005328 <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005248:	23a4      	movs	r3, #164	@ 0xa4
 800524a:	18fb      	adds	r3, r7, r3
 800524c:	681a      	ldr	r2, [r3, #0]
 800524e:	2380      	movs	r3, #128	@ 0x80
 8005250:	035b      	lsls	r3, r3, #13
 8005252:	4013      	ands	r3, r2
 8005254:	d010      	beq.n	8005278 <HAL_UART_IRQHandler+0x584>
 8005256:	239c      	movs	r3, #156	@ 0x9c
 8005258:	18fb      	adds	r3, r7, r3
 800525a:	681a      	ldr	r2, [r3, #0]
 800525c:	2380      	movs	r3, #128	@ 0x80
 800525e:	03db      	lsls	r3, r3, #15
 8005260:	4013      	ands	r3, r2
 8005262:	d009      	beq.n	8005278 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	2280      	movs	r2, #128	@ 0x80
 800526a:	0352      	lsls	r2, r2, #13
 800526c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	0018      	movs	r0, r3
 8005272:	f000 f92a 	bl	80054ca <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005276:	e05a      	b.n	800532e <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005278:	23a4      	movs	r3, #164	@ 0xa4
 800527a:	18fb      	adds	r3, r7, r3
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	2280      	movs	r2, #128	@ 0x80
 8005280:	4013      	ands	r3, r2
 8005282:	d016      	beq.n	80052b2 <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005284:	23a0      	movs	r3, #160	@ 0xa0
 8005286:	18fb      	adds	r3, r7, r3
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	2280      	movs	r2, #128	@ 0x80
 800528c:	4013      	ands	r3, r2
 800528e:	d106      	bne.n	800529e <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005290:	239c      	movs	r3, #156	@ 0x9c
 8005292:	18fb      	adds	r3, r7, r3
 8005294:	681a      	ldr	r2, [r3, #0]
 8005296:	2380      	movs	r3, #128	@ 0x80
 8005298:	041b      	lsls	r3, r3, #16
 800529a:	4013      	ands	r3, r2
 800529c:	d009      	beq.n	80052b2 <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d042      	beq.n	800532c <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80052aa:	687a      	ldr	r2, [r7, #4]
 80052ac:	0010      	movs	r0, r2
 80052ae:	4798      	blx	r3
    }
    return;
 80052b0:	e03c      	b.n	800532c <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80052b2:	23a4      	movs	r3, #164	@ 0xa4
 80052b4:	18fb      	adds	r3, r7, r3
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	2240      	movs	r2, #64	@ 0x40
 80052ba:	4013      	ands	r3, r2
 80052bc:	d00a      	beq.n	80052d4 <HAL_UART_IRQHandler+0x5e0>
 80052be:	23a0      	movs	r3, #160	@ 0xa0
 80052c0:	18fb      	adds	r3, r7, r3
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	2240      	movs	r2, #64	@ 0x40
 80052c6:	4013      	ands	r3, r2
 80052c8:	d004      	beq.n	80052d4 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	0018      	movs	r0, r3
 80052ce:	f000 f8d0 	bl	8005472 <UART_EndTransmit_IT>
    return;
 80052d2:	e02c      	b.n	800532e <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80052d4:	23a4      	movs	r3, #164	@ 0xa4
 80052d6:	18fb      	adds	r3, r7, r3
 80052d8:	681a      	ldr	r2, [r3, #0]
 80052da:	2380      	movs	r3, #128	@ 0x80
 80052dc:	041b      	lsls	r3, r3, #16
 80052de:	4013      	ands	r3, r2
 80052e0:	d00b      	beq.n	80052fa <HAL_UART_IRQHandler+0x606>
 80052e2:	23a0      	movs	r3, #160	@ 0xa0
 80052e4:	18fb      	adds	r3, r7, r3
 80052e6:	681a      	ldr	r2, [r3, #0]
 80052e8:	2380      	movs	r3, #128	@ 0x80
 80052ea:	05db      	lsls	r3, r3, #23
 80052ec:	4013      	ands	r3, r2
 80052ee:	d004      	beq.n	80052fa <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	0018      	movs	r0, r3
 80052f4:	f000 f8f9 	bl	80054ea <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80052f8:	e019      	b.n	800532e <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80052fa:	23a4      	movs	r3, #164	@ 0xa4
 80052fc:	18fb      	adds	r3, r7, r3
 80052fe:	681a      	ldr	r2, [r3, #0]
 8005300:	2380      	movs	r3, #128	@ 0x80
 8005302:	045b      	lsls	r3, r3, #17
 8005304:	4013      	ands	r3, r2
 8005306:	d012      	beq.n	800532e <HAL_UART_IRQHandler+0x63a>
 8005308:	23a0      	movs	r3, #160	@ 0xa0
 800530a:	18fb      	adds	r3, r7, r3
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	2b00      	cmp	r3, #0
 8005310:	da0d      	bge.n	800532e <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	0018      	movs	r0, r3
 8005316:	f000 f8e0 	bl	80054da <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800531a:	e008      	b.n	800532e <HAL_UART_IRQHandler+0x63a>
      return;
 800531c:	46c0      	nop			@ (mov r8, r8)
 800531e:	e006      	b.n	800532e <HAL_UART_IRQHandler+0x63a>
    return;
 8005320:	46c0      	nop			@ (mov r8, r8)
 8005322:	e004      	b.n	800532e <HAL_UART_IRQHandler+0x63a>
      return;
 8005324:	46c0      	nop			@ (mov r8, r8)
 8005326:	e002      	b.n	800532e <HAL_UART_IRQHandler+0x63a>
      return;
 8005328:	46c0      	nop			@ (mov r8, r8)
 800532a:	e000      	b.n	800532e <HAL_UART_IRQHandler+0x63a>
    return;
 800532c:	46c0      	nop			@ (mov r8, r8)
  }
}
 800532e:	46bd      	mov	sp, r7
 8005330:	b02a      	add	sp, #168	@ 0xa8
 8005332:	bdb0      	pop	{r4, r5, r7, pc}
 8005334:	fffffeff 	.word	0xfffffeff
 8005338:	fffffedf 	.word	0xfffffedf
 800533c:	effffffe 	.word	0xeffffffe

08005340 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b082      	sub	sp, #8
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005348:	46c0      	nop			@ (mov r8, r8)
 800534a:	46bd      	mov	sp, r7
 800534c:	b002      	add	sp, #8
 800534e:	bd80      	pop	{r7, pc}

08005350 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b082      	sub	sp, #8
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005358:	46c0      	nop			@ (mov r8, r8)
 800535a:	46bd      	mov	sp, r7
 800535c:	b002      	add	sp, #8
 800535e:	bd80      	pop	{r7, pc}

08005360 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b082      	sub	sp, #8
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
 8005368:	000a      	movs	r2, r1
 800536a:	1cbb      	adds	r3, r7, #2
 800536c:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800536e:	46c0      	nop			@ (mov r8, r8)
 8005370:	46bd      	mov	sp, r7
 8005372:	b002      	add	sp, #8
 8005374:	bd80      	pop	{r7, pc}
	...

08005378 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b08e      	sub	sp, #56	@ 0x38
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005380:	f3ef 8310 	mrs	r3, PRIMASK
 8005384:	617b      	str	r3, [r7, #20]
  return(result);
 8005386:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005388:	637b      	str	r3, [r7, #52]	@ 0x34
 800538a:	2301      	movs	r3, #1
 800538c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800538e:	69bb      	ldr	r3, [r7, #24]
 8005390:	f383 8810 	msr	PRIMASK, r3
}
 8005394:	46c0      	nop			@ (mov r8, r8)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	681a      	ldr	r2, [r3, #0]
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4926      	ldr	r1, [pc, #152]	@ (800543c <UART_EndRxTransfer+0xc4>)
 80053a2:	400a      	ands	r2, r1
 80053a4:	601a      	str	r2, [r3, #0]
 80053a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053a8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053aa:	69fb      	ldr	r3, [r7, #28]
 80053ac:	f383 8810 	msr	PRIMASK, r3
}
 80053b0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80053b2:	f3ef 8310 	mrs	r3, PRIMASK
 80053b6:	623b      	str	r3, [r7, #32]
  return(result);
 80053b8:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80053ba:	633b      	str	r3, [r7, #48]	@ 0x30
 80053bc:	2301      	movs	r3, #1
 80053be:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053c2:	f383 8810 	msr	PRIMASK, r3
}
 80053c6:	46c0      	nop			@ (mov r8, r8)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	689a      	ldr	r2, [r3, #8]
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	491b      	ldr	r1, [pc, #108]	@ (8005440 <UART_EndRxTransfer+0xc8>)
 80053d4:	400a      	ands	r2, r1
 80053d6:	609a      	str	r2, [r3, #8]
 80053d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053da:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053de:	f383 8810 	msr	PRIMASK, r3
}
 80053e2:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80053e8:	2b01      	cmp	r3, #1
 80053ea:	d118      	bne.n	800541e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80053ec:	f3ef 8310 	mrs	r3, PRIMASK
 80053f0:	60bb      	str	r3, [r7, #8]
  return(result);
 80053f2:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80053f6:	2301      	movs	r3, #1
 80053f8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	f383 8810 	msr	PRIMASK, r3
}
 8005400:	46c0      	nop			@ (mov r8, r8)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	681a      	ldr	r2, [r3, #0]
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	2110      	movs	r1, #16
 800540e:	438a      	bics	r2, r1
 8005410:	601a      	str	r2, [r3, #0]
 8005412:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005414:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005416:	693b      	ldr	r3, [r7, #16]
 8005418:	f383 8810 	msr	PRIMASK, r3
}
 800541c:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	228c      	movs	r2, #140	@ 0x8c
 8005422:	2120      	movs	r1, #32
 8005424:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2200      	movs	r2, #0
 800542a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2200      	movs	r2, #0
 8005430:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005432:	46c0      	nop			@ (mov r8, r8)
 8005434:	46bd      	mov	sp, r7
 8005436:	b00e      	add	sp, #56	@ 0x38
 8005438:	bd80      	pop	{r7, pc}
 800543a:	46c0      	nop			@ (mov r8, r8)
 800543c:	fffffedf 	.word	0xfffffedf
 8005440:	effffffe 	.word	0xeffffffe

08005444 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005444:	b580      	push	{r7, lr}
 8005446:	b084      	sub	sp, #16
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005450:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	225e      	movs	r2, #94	@ 0x5e
 8005456:	2100      	movs	r1, #0
 8005458:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	2256      	movs	r2, #86	@ 0x56
 800545e:	2100      	movs	r1, #0
 8005460:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	0018      	movs	r0, r3
 8005466:	f7ff ff73 	bl	8005350 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800546a:	46c0      	nop			@ (mov r8, r8)
 800546c:	46bd      	mov	sp, r7
 800546e:	b004      	add	sp, #16
 8005470:	bd80      	pop	{r7, pc}

08005472 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005472:	b580      	push	{r7, lr}
 8005474:	b086      	sub	sp, #24
 8005476:	af00      	add	r7, sp, #0
 8005478:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800547a:	f3ef 8310 	mrs	r3, PRIMASK
 800547e:	60bb      	str	r3, [r7, #8]
  return(result);
 8005480:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005482:	617b      	str	r3, [r7, #20]
 8005484:	2301      	movs	r3, #1
 8005486:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	f383 8810 	msr	PRIMASK, r3
}
 800548e:	46c0      	nop			@ (mov r8, r8)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	681a      	ldr	r2, [r3, #0]
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	2140      	movs	r1, #64	@ 0x40
 800549c:	438a      	bics	r2, r1
 800549e:	601a      	str	r2, [r3, #0]
 80054a0:	697b      	ldr	r3, [r7, #20]
 80054a2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054a4:	693b      	ldr	r3, [r7, #16]
 80054a6:	f383 8810 	msr	PRIMASK, r3
}
 80054aa:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2288      	movs	r2, #136	@ 0x88
 80054b0:	2120      	movs	r1, #32
 80054b2:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2200      	movs	r2, #0
 80054b8:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	0018      	movs	r0, r3
 80054be:	f7ff ff3f 	bl	8005340 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80054c2:	46c0      	nop			@ (mov r8, r8)
 80054c4:	46bd      	mov	sp, r7
 80054c6:	b006      	add	sp, #24
 80054c8:	bd80      	pop	{r7, pc}

080054ca <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80054ca:	b580      	push	{r7, lr}
 80054cc:	b082      	sub	sp, #8
 80054ce:	af00      	add	r7, sp, #0
 80054d0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80054d2:	46c0      	nop			@ (mov r8, r8)
 80054d4:	46bd      	mov	sp, r7
 80054d6:	b002      	add	sp, #8
 80054d8:	bd80      	pop	{r7, pc}

080054da <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80054da:	b580      	push	{r7, lr}
 80054dc:	b082      	sub	sp, #8
 80054de:	af00      	add	r7, sp, #0
 80054e0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80054e2:	46c0      	nop			@ (mov r8, r8)
 80054e4:	46bd      	mov	sp, r7
 80054e6:	b002      	add	sp, #8
 80054e8:	bd80      	pop	{r7, pc}

080054ea <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80054ea:	b580      	push	{r7, lr}
 80054ec:	b082      	sub	sp, #8
 80054ee:	af00      	add	r7, sp, #0
 80054f0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80054f2:	46c0      	nop			@ (mov r8, r8)
 80054f4:	46bd      	mov	sp, r7
 80054f6:	b002      	add	sp, #8
 80054f8:	bd80      	pop	{r7, pc}
	...

080054fc <Reset_Handler>:



extern void Reset_Handler(void) __attribute__((__interrupt__));
void Reset_Handler(void)
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b082      	sub	sp, #8
 8005500:	af00      	add	r7, sp, #0
 8005502:	4b13      	ldr	r3, [pc, #76]	@ (8005550 <Reset_Handler+0x54>)
 8005504:	607b      	str	r3, [r7, #4]
 8005506:	4b13      	ldr	r3, [pc, #76]	@ (8005554 <Reset_Handler+0x58>)
 8005508:	603b      	str	r3, [r7, #0]
 800550a:	e007      	b.n	800551c <Reset_Handler+0x20>
 800550c:	687a      	ldr	r2, [r7, #4]
 800550e:	1d13      	adds	r3, r2, #4
 8005510:	607b      	str	r3, [r7, #4]
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	1d19      	adds	r1, r3, #4
 8005516:	6039      	str	r1, [r7, #0]
 8005518:	6812      	ldr	r2, [r2, #0]
 800551a:	601a      	str	r2, [r3, #0]
 800551c:	683a      	ldr	r2, [r7, #0]
 800551e:	4b0e      	ldr	r3, [pc, #56]	@ (8005558 <Reset_Handler+0x5c>)
 8005520:	429a      	cmp	r2, r3
 8005522:	d3f3      	bcc.n	800550c <Reset_Handler+0x10>
 8005524:	4b0d      	ldr	r3, [pc, #52]	@ (800555c <Reset_Handler+0x60>)
 8005526:	603b      	str	r3, [r7, #0]
 8005528:	e004      	b.n	8005534 <Reset_Handler+0x38>
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	1d1a      	adds	r2, r3, #4
 800552e:	603a      	str	r2, [r7, #0]
 8005530:	2200      	movs	r2, #0
 8005532:	601a      	str	r2, [r3, #0]
 8005534:	683a      	ldr	r2, [r7, #0]
    while (dst < &_edata)
        *dst++ = *src++;

    // Zero out the .bss segment
    dst = &_sbss;
    while (dst < &_ebss)
 8005536:	4b0a      	ldr	r3, [pc, #40]	@ (8005560 <Reset_Handler+0x64>)
 8005538:	429a      	cmp	r2, r3
 800553a:	d3f6      	bcc.n	800552a <Reset_Handler+0x2e>
        *dst++ = 0;

    VTOR_REG = (uint32_t)vectors;
 800553c:	4b09      	ldr	r3, [pc, #36]	@ (8005564 <Reset_Handler+0x68>)
 800553e:	4a0a      	ldr	r2, [pc, #40]	@ (8005568 <Reset_Handler+0x6c>)
 8005540:	601a      	str	r2, [r3, #0]

    //__libc_init_array();

    main();
 8005542:	f7fb fcdf 	bl	8000f04 <main>
}
 8005546:	46c0      	nop			@ (mov r8, r8)
 8005548:	46bd      	mov	sp, r7
 800554a:	b002      	add	sp, #8
 800554c:	bd80      	pop	{r7, pc}
 800554e:	46c0      	nop			@ (mov r8, r8)
 8005550:	080064f8 	.word	0x080064f8
 8005554:	20000000 	.word	0x20000000
 8005558:	20000064 	.word	0x20000064
 800555c:	20000064 	.word	0x20000064
 8005560:	20000400 	.word	0x20000400
 8005564:	e000ed08 	.word	0xe000ed08
 8005568:	080000b8 	.word	0x080000b8

0800556c <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b084      	sub	sp, #16
 8005570:	af00      	add	r7, sp, #0
 8005572:	60f8      	str	r0, [r7, #12]
 8005574:	60b9      	str	r1, [r7, #8]
 8005576:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	6819      	ldr	r1, [r3, #0]
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	435b      	muls	r3, r3
 8005580:	001a      	movs	r2, r3
 8005582:	0013      	movs	r3, r2
 8005584:	005b      	lsls	r3, r3, #1
 8005586:	189b      	adds	r3, r3, r2
 8005588:	43db      	mvns	r3, r3
 800558a:	400b      	ands	r3, r1
 800558c:	001a      	movs	r2, r3
 800558e:	68bb      	ldr	r3, [r7, #8]
 8005590:	435b      	muls	r3, r3
 8005592:	6879      	ldr	r1, [r7, #4]
 8005594:	434b      	muls	r3, r1
 8005596:	431a      	orrs	r2, r3
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	601a      	str	r2, [r3, #0]
}
 800559c:	46c0      	nop			@ (mov r8, r8)
 800559e:	46bd      	mov	sp, r7
 80055a0:	b004      	add	sp, #16
 80055a2:	bd80      	pop	{r7, pc}

080055a4 <LL_GPIO_ReadInputPort>:
  * @rmtoll IDR          IDy           LL_GPIO_ReadInputPort
  * @param  GPIOx GPIO Port
  * @retval Input data register value of port
  */
__STATIC_INLINE uint32_t LL_GPIO_ReadInputPort(GPIO_TypeDef *GPIOx)
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b082      	sub	sp, #8
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(GPIOx->IDR));
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	691b      	ldr	r3, [r3, #16]
}
 80055b0:	0018      	movs	r0, r3
 80055b2:	46bd      	mov	sp, r7
 80055b4:	b002      	add	sp, #8
 80055b6:	bd80      	pop	{r7, pc}

080055b8 <hal_gpio_init>:
#include "stm32g0xx_ll_gpio.h"
#include "main.h"
#include "gpio.h"

void hal_gpio_init(void)
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	af00      	add	r7, sp, #0
	// Call the GPIO initialization function setup by the STM32CubeIDE Device Configuration Tool:
	MX_GPIO_Init();
 80055bc:	f7fb fae6 	bl	8000b8c <MX_GPIO_Init>
}
 80055c0:	46c0      	nop			@ (mov r8, r8)
 80055c2:	46bd      	mov	sp, r7
 80055c4:	bd80      	pop	{r7, pc}
	...

080055c8 <hal_gpio_set_output>:
{
  return HAL_GPIO_ReadPin(port_defs[id], pin_defs[id].Pin);
}

void hal_gpio_set_output(enum pin_id id, bool value)
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b082      	sub	sp, #8
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	0002      	movs	r2, r0
 80055d0:	1dfb      	adds	r3, r7, #7
 80055d2:	701a      	strb	r2, [r3, #0]
 80055d4:	1dbb      	adds	r3, r7, #6
 80055d6:	1c0a      	adds	r2, r1, #0
 80055d8:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin(port_defs[id], pin_defs[id].Pin, (GPIO_PinState)(value != false));
 80055da:	1dfb      	adds	r3, r7, #7
 80055dc:	781a      	ldrb	r2, [r3, #0]
 80055de:	4b0a      	ldr	r3, [pc, #40]	@ (8005608 <hal_gpio_set_output+0x40>)
 80055e0:	0092      	lsls	r2, r2, #2
 80055e2:	58d0      	ldr	r0, [r2, r3]
 80055e4:	1dfb      	adds	r3, r7, #7
 80055e6:	781a      	ldrb	r2, [r3, #0]
 80055e8:	4908      	ldr	r1, [pc, #32]	@ (800560c <hal_gpio_set_output+0x44>)
 80055ea:	0013      	movs	r3, r2
 80055ec:	009b      	lsls	r3, r3, #2
 80055ee:	189b      	adds	r3, r3, r2
 80055f0:	009b      	lsls	r3, r3, #2
 80055f2:	585b      	ldr	r3, [r3, r1]
 80055f4:	b299      	uxth	r1, r3
 80055f6:	1dbb      	adds	r3, r7, #6
 80055f8:	781b      	ldrb	r3, [r3, #0]
 80055fa:	001a      	movs	r2, r3
 80055fc:	f7fd fb1a 	bl	8002c34 <HAL_GPIO_WritePin>
}
 8005600:	46c0      	nop			@ (mov r8, r8)
 8005602:	46bd      	mov	sp, r7
 8005604:	b002      	add	sp, #8
 8005606:	bd80      	pop	{r7, pc}
 8005608:	08006448 	.word	0x08006448
 800560c:	08006330 	.word	0x08006330

08005610 <hal_gpio_set_pin_mode>:
void hal_gpio_set_pull(enum pin_id id, uint32_t pull)
{
  LL_GPIO_SetPinPull(port_defs[id], pin_defs[id].Pin, pull);
}
void hal_gpio_set_pin_mode(enum pin_id id, uint32_t mode)
{
 8005610:	b580      	push	{r7, lr}
 8005612:	b082      	sub	sp, #8
 8005614:	af00      	add	r7, sp, #0
 8005616:	0002      	movs	r2, r0
 8005618:	6039      	str	r1, [r7, #0]
 800561a:	1dfb      	adds	r3, r7, #7
 800561c:	701a      	strb	r2, [r3, #0]
	LL_GPIO_SetPinMode(port_defs[id], pin_defs[id].Pin, mode);
 800561e:	1dfb      	adds	r3, r7, #7
 8005620:	781a      	ldrb	r2, [r3, #0]
 8005622:	4b09      	ldr	r3, [pc, #36]	@ (8005648 <hal_gpio_set_pin_mode+0x38>)
 8005624:	0092      	lsls	r2, r2, #2
 8005626:	58d0      	ldr	r0, [r2, r3]
 8005628:	1dfb      	adds	r3, r7, #7
 800562a:	781a      	ldrb	r2, [r3, #0]
 800562c:	4907      	ldr	r1, [pc, #28]	@ (800564c <hal_gpio_set_pin_mode+0x3c>)
 800562e:	0013      	movs	r3, r2
 8005630:	009b      	lsls	r3, r3, #2
 8005632:	189b      	adds	r3, r3, r2
 8005634:	009b      	lsls	r3, r3, #2
 8005636:	585b      	ldr	r3, [r3, r1]
 8005638:	683a      	ldr	r2, [r7, #0]
 800563a:	0019      	movs	r1, r3
 800563c:	f7ff ff96 	bl	800556c <LL_GPIO_SetPinMode>
}
 8005640:	46c0      	nop			@ (mov r8, r8)
 8005642:	46bd      	mov	sp, r7
 8005644:	b002      	add	sp, #8
 8005646:	bd80      	pop	{r7, pc}
 8005648:	08006448 	.word	0x08006448
 800564c:	08006330 	.word	0x08006330

08005650 <hal_gpio_read_port>:
	return LL_GPIO_GetPinMode(port_defs[id], pin_defs[id].Pin);
}

// Returns the bitmap of the pin values within the specified GPIO Port.
uint32_t hal_gpio_read_port(pin_port_t* GpioPort)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b082      	sub	sp, #8
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
	return LL_GPIO_ReadInputPort(GpioPort);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	0018      	movs	r0, r3
 800565c:	f7ff ffa2 	bl	80055a4 <LL_GPIO_ReadInputPort>
 8005660:	0003      	movs	r3, r0
}
 8005662:	0018      	movs	r0, r3
 8005664:	46bd      	mov	sp, r7
 8005666:	b002      	add	sp, #8
 8005668:	bd80      	pop	{r7, pc}

0800566a <hal_timer_get_systick>:
*
*  return values:  The current 1 millisecond systick count
*  remarks:
*********************************************************************************/
uint32_t hal_timer_get_systick(void)
{
 800566a:	b580      	push	{r7, lr}
 800566c:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800566e:	f7fc f9c7 	bl	8001a00 <HAL_GetTick>
 8005672:	0003      	movs	r3, r0
}
 8005674:	0018      	movs	r0, r3
 8005676:	46bd      	mov	sp, r7
 8005678:	bd80      	pop	{r7, pc}

0800567a <hal_timer_get_ticks_since_count>:
*
*  remarks:
*********************************************************************************/

uint32_t hal_timer_get_ticks_since_count(uint32_t lastCount)
{
 800567a:	b580      	push	{r7, lr}
 800567c:	b084      	sub	sp, #16
 800567e:	af00      	add	r7, sp, #0
 8005680:	6078      	str	r0, [r7, #4]
    uint32_t result;
    uint32_t currentCount = hal_timer_get_systick();
 8005682:	f7ff fff2 	bl	800566a <hal_timer_get_systick>
 8005686:	0003      	movs	r3, r0
 8005688:	60bb      	str	r3, [r7, #8]

    // Check if the counter rolled over:
    if (currentCount >= lastCount)
 800568a:	68ba      	ldr	r2, [r7, #8]
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	429a      	cmp	r2, r3
 8005690:	d304      	bcc.n	800569c <hal_timer_get_ticks_since_count+0x22>
    {
        //Counter has not rolled over.
        result = currentCount - lastCount;
 8005692:	68ba      	ldr	r2, [r7, #8]
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	1ad3      	subs	r3, r2, r3
 8005698:	60fb      	str	r3, [r7, #12]
 800569a:	e004      	b.n	80056a6 <hal_timer_get_ticks_since_count+0x2c>
    }
    else
    {
        // The counter rolled over / overflowed. Deal with it:
        result = UINT32_MAX - lastCount + currentCount;
 800569c:	68ba      	ldr	r2, [r7, #8]
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	1ad3      	subs	r3, r2, r3
 80056a2:	3b01      	subs	r3, #1
 80056a4:	60fb      	str	r3, [r7, #12]
    }

    return result;
 80056a6:	68fb      	ldr	r3, [r7, #12]
}
 80056a8:	0018      	movs	r0, r3
 80056aa:	46bd      	mov	sp, r7
 80056ac:	b004      	add	sp, #16
 80056ae:	bd80      	pop	{r7, pc}

080056b0 <hal_timer_init>:
{
	SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk; /* disable systick */
}

void hal_timer_init(void)
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	af00      	add	r7, sp, #0

	  // Note that the following "USING" macros are defined in perphdefs.h
#if defined  USING_TIM1
	  MX_TIM1_Init();
 80056b4:	f7fb fdee 	bl	8001294 <MX_TIM1_Init>
#endif
#if defined  USING_TIM3
	  MX_TIM3_Init();
 80056b8:	f7fb feb6 	bl	8001428 <MX_TIM3_Init>
#endif
#if defined  USING_TIM6
	  MX_TIM6_Init();
 80056bc:	f7fb ff34 	bl	8001528 <MX_TIM6_Init>
#endif
#if defined  USING_TIM14
	  MX_TIM14_Init();
#endif
#if defined  USING_TIM15
	  MX_TIM15_Init();
 80056c0:	f7fb ff6c 	bl	800159c <MX_TIM15_Init>
#endif
#if defined  USING_TIM17
	  MX_TIM17_Init();
#endif

    hal_timer_set_timer_for_blocking_delays(TIMER_BLOCKING_DELAY);
 80056c4:	2003      	movs	r0, #3
 80056c6:	f000 fbf7 	bl	8005eb8 <hal_timer_set_timer_for_blocking_delays>

}
 80056ca:	46c0      	nop			@ (mov r8, r8)
 80056cc:	46bd      	mov	sp, r7
 80056ce:	bd80      	pop	{r7, pc}

080056d0 <hal_timer_RunPwAtDutyCycle>:

	return TimerIsRunning;
}

void hal_timer_RunPwAtDutyCycle(enum timer_id id, uint16_t dutyCyclePct)
{
 80056d0:	b590      	push	{r4, r7, lr}
 80056d2:	b085      	sub	sp, #20
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	0002      	movs	r2, r0
 80056d8:	1dfb      	adds	r3, r7, #7
 80056da:	701a      	strb	r2, [r3, #0]
 80056dc:	1d3b      	adds	r3, r7, #4
 80056de:	1c0a      	adds	r2, r1, #0
 80056e0:	801a      	strh	r2, [r3, #0]
	// Make sure that we aren't going to overrun our arrays:
	if (NUMBER_OF_TIMERS > id)
 80056e2:	1dfb      	adds	r3, r7, #7
 80056e4:	781b      	ldrb	r3, [r3, #0]
 80056e6:	2b03      	cmp	r3, #3
 80056e8:	d826      	bhi.n	8005738 <hal_timer_RunPwAtDutyCycle+0x68>
	{
		// Check the the auto reload register value to see if it is zero:
		if (TimerArrValue[id] != 0)
 80056ea:	1dfb      	adds	r3, r7, #7
 80056ec:	781a      	ldrb	r2, [r3, #0]
 80056ee:	4b14      	ldr	r3, [pc, #80]	@ (8005740 <hal_timer_RunPwAtDutyCycle+0x70>)
 80056f0:	0052      	lsls	r2, r2, #1
 80056f2:	5ad3      	ldrh	r3, [r2, r3]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d01f      	beq.n	8005738 <hal_timer_RunPwAtDutyCycle+0x68>
		{
			uint16_t arrValue = TimerArrValue[id];
 80056f8:	1dfb      	adds	r3, r7, #7
 80056fa:	7819      	ldrb	r1, [r3, #0]
 80056fc:	240e      	movs	r4, #14
 80056fe:	193b      	adds	r3, r7, r4
 8005700:	4a0f      	ldr	r2, [pc, #60]	@ (8005740 <hal_timer_RunPwAtDutyCycle+0x70>)
 8005702:	0049      	lsls	r1, r1, #1
 8005704:	5a8a      	ldrh	r2, [r1, r2]
 8005706:	801a      	strh	r2, [r3, #0]

			uint16_t on_time = (uint16_t)((((uint32_t)arrValue + 1) * (uint32_t)dutyCyclePct)/ 100 );
 8005708:	193b      	adds	r3, r7, r4
 800570a:	881b      	ldrh	r3, [r3, #0]
 800570c:	3301      	adds	r3, #1
 800570e:	1d3a      	adds	r2, r7, #4
 8005710:	8812      	ldrh	r2, [r2, #0]
 8005712:	4353      	muls	r3, r2
 8005714:	2164      	movs	r1, #100	@ 0x64
 8005716:	0018      	movs	r0, r3
 8005718:	f7fa fd4e 	bl	80001b8 <__udivsi3>
 800571c:	0003      	movs	r3, r0
 800571e:	001a      	movs	r2, r3
 8005720:	210c      	movs	r1, #12
 8005722:	187b      	adds	r3, r7, r1
 8005724:	801a      	strh	r2, [r3, #0]

			hal_timer_set_pwm_output_period(id, arrValue, on_time);
 8005726:	187b      	adds	r3, r7, r1
 8005728:	881a      	ldrh	r2, [r3, #0]
 800572a:	193b      	adds	r3, r7, r4
 800572c:	8819      	ldrh	r1, [r3, #0]
 800572e:	1dfb      	adds	r3, r7, #7
 8005730:	781b      	ldrb	r3, [r3, #0]
 8005732:	0018      	movs	r0, r3
 8005734:	f000 f818 	bl	8005768 <hal_timer_set_pwm_output_period>
		}
	}
}
 8005738:	46c0      	nop			@ (mov r8, r8)
 800573a:	46bd      	mov	sp, r7
 800573c:	b005      	add	sp, #20
 800573e:	bd90      	pop	{r4, r7, pc}
 8005740:	08006328 	.word	0x08006328

08005744 <hal_timer_StopPwmOutput>:

void hal_timer_StopPwmOutput(enum timer_id id)
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b082      	sub	sp, #8
 8005748:	af00      	add	r7, sp, #0
 800574a:	0002      	movs	r2, r0
 800574c:	1dfb      	adds	r3, r7, #7
 800574e:	701a      	strb	r2, [r3, #0]
	// Calling hal_timer_set_pwm_output_period() with a zero in either the period or the on_time
	//turns off the PWM output.
	hal_timer_set_pwm_output_period(id, 0, 0);
 8005750:	1dfb      	adds	r3, r7, #7
 8005752:	781b      	ldrb	r3, [r3, #0]
 8005754:	2200      	movs	r2, #0
 8005756:	2100      	movs	r1, #0
 8005758:	0018      	movs	r0, r3
 800575a:	f000 f805 	bl	8005768 <hal_timer_set_pwm_output_period>
}
 800575e:	46c0      	nop			@ (mov r8, r8)
 8005760:	46bd      	mov	sp, r7
 8005762:	b002      	add	sp, #8
 8005764:	bd80      	pop	{r7, pc}
	...

08005768 <hal_timer_set_pwm_output_period>:

void hal_timer_set_pwm_output_period(enum timer_id id, uint16_t period, uint16_t on_time)
{
 8005768:	b590      	push	{r4, r7, lr}
 800576a:	b085      	sub	sp, #20
 800576c:	af00      	add	r7, sp, #0
 800576e:	0004      	movs	r4, r0
 8005770:	0008      	movs	r0, r1
 8005772:	0011      	movs	r1, r2
 8005774:	1dfb      	adds	r3, r7, #7
 8005776:	1c22      	adds	r2, r4, #0
 8005778:	701a      	strb	r2, [r3, #0]
 800577a:	1d3b      	adds	r3, r7, #4
 800577c:	1c02      	adds	r2, r0, #0
 800577e:	801a      	strh	r2, [r3, #0]
 8005780:	1cbb      	adds	r3, r7, #2
 8005782:	1c0a      	adds	r2, r1, #0
 8005784:	801a      	strh	r2, [r3, #0]
	// TODO: Write function hal_timer_set_pwm_output_period()

    if(DUMMY_TIMER == timer_defs[id].timer)
 8005786:	1dfb      	adds	r3, r7, #7
 8005788:	781a      	ldrb	r2, [r3, #0]
 800578a:	4bc3      	ldr	r3, [pc, #780]	@ (8005a98 <hal_timer_set_pwm_output_period+0x330>)
 800578c:	0112      	lsls	r2, r2, #4
 800578e:	58d3      	ldr	r3, [r2, r3]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d100      	bne.n	8005796 <hal_timer_set_pwm_output_period+0x2e>
 8005794:	e37c      	b.n	8005e90 <hal_timer_set_pwm_output_period+0x728>
    {
    	// No timer pointer was defined for this timer_defs member.
        return;
    }

    if((period == 0) || (on_time == 0))
 8005796:	1d3b      	adds	r3, r7, #4
 8005798:	881b      	ldrh	r3, [r3, #0]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d004      	beq.n	80057a8 <hal_timer_set_pwm_output_period+0x40>
 800579e:	1cbb      	adds	r3, r7, #2
 80057a0:	881b      	ldrh	r3, [r3, #0]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d000      	beq.n	80057a8 <hal_timer_set_pwm_output_period+0x40>
 80057a6:	e09b      	b.n	80058e0 <hal_timer_set_pwm_output_period+0x178>
        	/* disable the timer */
        	((LPTIM_TypeDef*)(timer_defs[id].timer))->CR &= ~LPTIM_CR_ENABLE;
        }
        else
#endif
        if( (timer_defs[id].type == TIM_BASIC) || (timer_defs[id].type == TIM_GEN_PURPOSE) )
 80057a8:	1dfb      	adds	r3, r7, #7
 80057aa:	781b      	ldrb	r3, [r3, #0]
 80057ac:	4aba      	ldr	r2, [pc, #744]	@ (8005a98 <hal_timer_set_pwm_output_period+0x330>)
 80057ae:	011b      	lsls	r3, r3, #4
 80057b0:	18d3      	adds	r3, r2, r3
 80057b2:	3304      	adds	r3, #4
 80057b4:	781b      	ldrb	r3, [r3, #0]
 80057b6:	2b01      	cmp	r3, #1
 80057b8:	d009      	beq.n	80057ce <hal_timer_set_pwm_output_period+0x66>
 80057ba:	1dfb      	adds	r3, r7, #7
 80057bc:	781b      	ldrb	r3, [r3, #0]
 80057be:	4ab6      	ldr	r2, [pc, #728]	@ (8005a98 <hal_timer_set_pwm_output_period+0x330>)
 80057c0:	011b      	lsls	r3, r3, #4
 80057c2:	18d3      	adds	r3, r2, r3
 80057c4:	3304      	adds	r3, #4
 80057c6:	781b      	ldrb	r3, [r3, #0]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d000      	beq.n	80057ce <hal_timer_set_pwm_output_period+0x66>
 80057cc:	e362      	b.n	8005e94 <hal_timer_set_pwm_output_period+0x72c>
        {
        	if( timer_defs[id].channel < NumTimerChannels)
 80057ce:	1dfb      	adds	r3, r7, #7
 80057d0:	781b      	ldrb	r3, [r3, #0]
 80057d2:	4ab1      	ldr	r2, [pc, #708]	@ (8005a98 <hal_timer_set_pwm_output_period+0x330>)
 80057d4:	011b      	lsls	r3, r3, #4
 80057d6:	18d3      	adds	r3, r2, r3
 80057d8:	3305      	adds	r3, #5
 80057da:	781b      	ldrb	r3, [r3, #0]
 80057dc:	2b06      	cmp	r3, #6
 80057de:	d818      	bhi.n	8005812 <hal_timer_set_pwm_output_period+0xaa>
        	{
        		((TIM_TypeDef *)(timer_defs[id].timer))->CCER  &=  ~ChannelCaptureCompareBits[timer_defs[id].channel].ChannelCCxE;	// Disable the channel.
 80057e0:	1dfb      	adds	r3, r7, #7
 80057e2:	781a      	ldrb	r2, [r3, #0]
 80057e4:	4bac      	ldr	r3, [pc, #688]	@ (8005a98 <hal_timer_set_pwm_output_period+0x330>)
 80057e6:	0112      	lsls	r2, r2, #4
 80057e8:	58d3      	ldr	r3, [r2, r3]
 80057ea:	6a1a      	ldr	r2, [r3, #32]
 80057ec:	1dfb      	adds	r3, r7, #7
 80057ee:	781b      	ldrb	r3, [r3, #0]
 80057f0:	49a9      	ldr	r1, [pc, #676]	@ (8005a98 <hal_timer_set_pwm_output_period+0x330>)
 80057f2:	011b      	lsls	r3, r3, #4
 80057f4:	18cb      	adds	r3, r1, r3
 80057f6:	3305      	adds	r3, #5
 80057f8:	781b      	ldrb	r3, [r3, #0]
 80057fa:	0019      	movs	r1, r3
 80057fc:	4ba7      	ldr	r3, [pc, #668]	@ (8005a9c <hal_timer_set_pwm_output_period+0x334>)
 80057fe:	0109      	lsls	r1, r1, #4
 8005800:	58cb      	ldr	r3, [r1, r3]
 8005802:	43d9      	mvns	r1, r3
 8005804:	1dfb      	adds	r3, r7, #7
 8005806:	7818      	ldrb	r0, [r3, #0]
 8005808:	4ba3      	ldr	r3, [pc, #652]	@ (8005a98 <hal_timer_set_pwm_output_period+0x330>)
 800580a:	0100      	lsls	r0, r0, #4
 800580c:	58c3      	ldr	r3, [r0, r3]
 800580e:	400a      	ands	r2, r1
 8005810:	621a      	str	r2, [r3, #32]
        	}

        	uint32_t allChannelEnableBits = 0;
 8005812:	2300      	movs	r3, #0
 8005814:	60fb      	str	r3, [r7, #12]

        	for (enum timer_channel ch = TIMER_CH0;ch < NumTimerChannels;ch++)
 8005816:	230b      	movs	r3, #11
 8005818:	18fb      	adds	r3, r7, r3
 800581a:	2200      	movs	r2, #0
 800581c:	701a      	strb	r2, [r3, #0]
 800581e:	e013      	b.n	8005848 <hal_timer_set_pwm_output_period+0xe0>
        	{
        		allChannelEnableBits |= ChannelCaptureCompareBits[timer_defs[id].channel].ChannelCCxE;
 8005820:	1dfb      	adds	r3, r7, #7
 8005822:	781b      	ldrb	r3, [r3, #0]
 8005824:	4a9c      	ldr	r2, [pc, #624]	@ (8005a98 <hal_timer_set_pwm_output_period+0x330>)
 8005826:	011b      	lsls	r3, r3, #4
 8005828:	18d3      	adds	r3, r2, r3
 800582a:	3305      	adds	r3, #5
 800582c:	781b      	ldrb	r3, [r3, #0]
 800582e:	001a      	movs	r2, r3
 8005830:	4b9a      	ldr	r3, [pc, #616]	@ (8005a9c <hal_timer_set_pwm_output_period+0x334>)
 8005832:	0112      	lsls	r2, r2, #4
 8005834:	58d3      	ldr	r3, [r2, r3]
 8005836:	68fa      	ldr	r2, [r7, #12]
 8005838:	4313      	orrs	r3, r2
 800583a:	60fb      	str	r3, [r7, #12]
        	for (enum timer_channel ch = TIMER_CH0;ch < NumTimerChannels;ch++)
 800583c:	210b      	movs	r1, #11
 800583e:	187b      	adds	r3, r7, r1
 8005840:	781a      	ldrb	r2, [r3, #0]
 8005842:	187b      	adds	r3, r7, r1
 8005844:	3201      	adds	r2, #1
 8005846:	701a      	strb	r2, [r3, #0]
 8005848:	230b      	movs	r3, #11
 800584a:	18fb      	adds	r3, r7, r3
 800584c:	781b      	ldrb	r3, [r3, #0]
 800584e:	2b06      	cmp	r3, #6
 8005850:	d9e6      	bls.n	8005820 <hal_timer_set_pwm_output_period+0xb8>
        	}
			/* If all channels are disabled, disable the timer too (note: reading channels 3 and 4 on tim21/22 will return 0 so that's okay) */
			if( (((TIM_TypeDef *)(timer_defs[id].timer))->CCER & allChannelEnableBits ) == 0 )
 8005852:	1dfb      	adds	r3, r7, #7
 8005854:	781a      	ldrb	r2, [r3, #0]
 8005856:	4b90      	ldr	r3, [pc, #576]	@ (8005a98 <hal_timer_set_pwm_output_period+0x330>)
 8005858:	0112      	lsls	r2, r2, #4
 800585a:	58d3      	ldr	r3, [r2, r3]
 800585c:	6a1b      	ldr	r3, [r3, #32]
 800585e:	68fa      	ldr	r2, [r7, #12]
 8005860:	4013      	ands	r3, r2
 8005862:	d000      	beq.n	8005866 <hal_timer_set_pwm_output_period+0xfe>
 8005864:	e316      	b.n	8005e94 <hal_timer_set_pwm_output_period+0x72c>
			{
				if( IS_TIM_BREAK_INSTANCE(timer_defs[id].timer))		/* Special consideration for timers with the break dead-time feature for PWM */
 8005866:	1dfb      	adds	r3, r7, #7
 8005868:	781a      	ldrb	r2, [r3, #0]
 800586a:	4b8b      	ldr	r3, [pc, #556]	@ (8005a98 <hal_timer_set_pwm_output_period+0x330>)
 800586c:	0112      	lsls	r2, r2, #4
 800586e:	58d3      	ldr	r3, [r2, r3]
 8005870:	4a8b      	ldr	r2, [pc, #556]	@ (8005aa0 <hal_timer_set_pwm_output_period+0x338>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d017      	beq.n	80058a6 <hal_timer_set_pwm_output_period+0x13e>
 8005876:	1dfb      	adds	r3, r7, #7
 8005878:	781a      	ldrb	r2, [r3, #0]
 800587a:	4b87      	ldr	r3, [pc, #540]	@ (8005a98 <hal_timer_set_pwm_output_period+0x330>)
 800587c:	0112      	lsls	r2, r2, #4
 800587e:	58d3      	ldr	r3, [r2, r3]
 8005880:	4a88      	ldr	r2, [pc, #544]	@ (8005aa4 <hal_timer_set_pwm_output_period+0x33c>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d00f      	beq.n	80058a6 <hal_timer_set_pwm_output_period+0x13e>
 8005886:	1dfb      	adds	r3, r7, #7
 8005888:	781a      	ldrb	r2, [r3, #0]
 800588a:	4b83      	ldr	r3, [pc, #524]	@ (8005a98 <hal_timer_set_pwm_output_period+0x330>)
 800588c:	0112      	lsls	r2, r2, #4
 800588e:	58d3      	ldr	r3, [r2, r3]
 8005890:	4a85      	ldr	r2, [pc, #532]	@ (8005aa8 <hal_timer_set_pwm_output_period+0x340>)
 8005892:	4293      	cmp	r3, r2
 8005894:	d007      	beq.n	80058a6 <hal_timer_set_pwm_output_period+0x13e>
 8005896:	1dfb      	adds	r3, r7, #7
 8005898:	781a      	ldrb	r2, [r3, #0]
 800589a:	4b7f      	ldr	r3, [pc, #508]	@ (8005a98 <hal_timer_set_pwm_output_period+0x330>)
 800589c:	0112      	lsls	r2, r2, #4
 800589e:	58d3      	ldr	r3, [r2, r3]
 80058a0:	4a82      	ldr	r2, [pc, #520]	@ (8005aac <hal_timer_set_pwm_output_period+0x344>)
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d10d      	bne.n	80058c2 <hal_timer_set_pwm_output_period+0x15a>
				{
					// See the break and dead-time register section of the Reference Manual for details of the meaning of these bits.
					((TIM_TypeDef *)(timer_defs[id].timer))->BDTR &= ~(TIM_BDTR_MOE | TIM_BDTR_OSSI | TIM_BDTR_OSSR);	// Off-state is a don't care so leave it blank
 80058a6:	1dfb      	adds	r3, r7, #7
 80058a8:	781a      	ldrb	r2, [r3, #0]
 80058aa:	4b7b      	ldr	r3, [pc, #492]	@ (8005a98 <hal_timer_set_pwm_output_period+0x330>)
 80058ac:	0112      	lsls	r2, r2, #4
 80058ae:	58d3      	ldr	r3, [r2, r3]
 80058b0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80058b2:	1dfb      	adds	r3, r7, #7
 80058b4:	7819      	ldrb	r1, [r3, #0]
 80058b6:	4b78      	ldr	r3, [pc, #480]	@ (8005a98 <hal_timer_set_pwm_output_period+0x330>)
 80058b8:	0109      	lsls	r1, r1, #4
 80058ba:	58cb      	ldr	r3, [r1, r3]
 80058bc:	497c      	ldr	r1, [pc, #496]	@ (8005ab0 <hal_timer_set_pwm_output_period+0x348>)
 80058be:	400a      	ands	r2, r1
 80058c0:	645a      	str	r2, [r3, #68]	@ 0x44
				}

				/* disable the timer */
				((TIM_TypeDef *)(timer_defs[id].timer))->CR1 &= ~(TIM_CR1_ARPE | TIM_CR1_CEN);
 80058c2:	1dfb      	adds	r3, r7, #7
 80058c4:	781a      	ldrb	r2, [r3, #0]
 80058c6:	4b74      	ldr	r3, [pc, #464]	@ (8005a98 <hal_timer_set_pwm_output_period+0x330>)
 80058c8:	0112      	lsls	r2, r2, #4
 80058ca:	58d3      	ldr	r3, [r2, r3]
 80058cc:	681a      	ldr	r2, [r3, #0]
 80058ce:	1dfb      	adds	r3, r7, #7
 80058d0:	7819      	ldrb	r1, [r3, #0]
 80058d2:	4b71      	ldr	r3, [pc, #452]	@ (8005a98 <hal_timer_set_pwm_output_period+0x330>)
 80058d4:	0109      	lsls	r1, r1, #4
 80058d6:	58cb      	ldr	r3, [r1, r3]
 80058d8:	2181      	movs	r1, #129	@ 0x81
 80058da:	438a      	bics	r2, r1
 80058dc:	601a      	str	r2, [r3, #0]
        }
        else
        {
            // No other timers supported
        }
        return;
 80058de:	e2d9      	b.n	8005e94 <hal_timer_set_pwm_output_period+0x72c>
			((LPTIM_TypeDef*)(timer_defs[id].timer))->CR   |= LPTIM_CR_CNTSTRT_Msk;
        }
        else
#endif

        if( (timer_defs[id].type == TIM_BASIC) || (timer_defs[id].type == TIM_GEN_PURPOSE) )
 80058e0:	1dfb      	adds	r3, r7, #7
 80058e2:	781b      	ldrb	r3, [r3, #0]
 80058e4:	4a6c      	ldr	r2, [pc, #432]	@ (8005a98 <hal_timer_set_pwm_output_period+0x330>)
 80058e6:	011b      	lsls	r3, r3, #4
 80058e8:	18d3      	adds	r3, r2, r3
 80058ea:	3304      	adds	r3, #4
 80058ec:	781b      	ldrb	r3, [r3, #0]
 80058ee:	2b01      	cmp	r3, #1
 80058f0:	d009      	beq.n	8005906 <hal_timer_set_pwm_output_period+0x19e>
 80058f2:	1dfb      	adds	r3, r7, #7
 80058f4:	781b      	ldrb	r3, [r3, #0]
 80058f6:	4a68      	ldr	r2, [pc, #416]	@ (8005a98 <hal_timer_set_pwm_output_period+0x330>)
 80058f8:	011b      	lsls	r3, r3, #4
 80058fa:	18d3      	adds	r3, r2, r3
 80058fc:	3304      	adds	r3, #4
 80058fe:	781b      	ldrb	r3, [r3, #0]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d000      	beq.n	8005906 <hal_timer_set_pwm_output_period+0x19e>
 8005904:	e2c7      	b.n	8005e96 <hal_timer_set_pwm_output_period+0x72e>
        {
        	((TIM_TypeDef *)(timer_defs[id].timer))->ARR = period;         // set the period.
 8005906:	1dfb      	adds	r3, r7, #7
 8005908:	781a      	ldrb	r2, [r3, #0]
 800590a:	4b63      	ldr	r3, [pc, #396]	@ (8005a98 <hal_timer_set_pwm_output_period+0x330>)
 800590c:	0112      	lsls	r2, r2, #4
 800590e:	58d3      	ldr	r3, [r2, r3]
 8005910:	1d3a      	adds	r2, r7, #4
 8005912:	8812      	ldrh	r2, [r2, #0]
 8005914:	62da      	str	r2, [r3, #44]	@ 0x2c
        	if( timer_defs[id].channel == TIMER_CH1)
 8005916:	1dfb      	adds	r3, r7, #7
 8005918:	781b      	ldrb	r3, [r3, #0]
 800591a:	4a5f      	ldr	r2, [pc, #380]	@ (8005a98 <hal_timer_set_pwm_output_period+0x330>)
 800591c:	011b      	lsls	r3, r3, #4
 800591e:	18d3      	adds	r3, r2, r3
 8005920:	3305      	adds	r3, #5
 8005922:	781b      	ldrb	r3, [r3, #0]
 8005924:	2b01      	cmp	r3, #1
 8005926:	d14a      	bne.n	80059be <hal_timer_set_pwm_output_period+0x256>
        	{
            	((TIM_TypeDef *)(timer_defs[id].timer))->CCR1 = on_time;        // ..and on time
 8005928:	1dfb      	adds	r3, r7, #7
 800592a:	781a      	ldrb	r2, [r3, #0]
 800592c:	4b5a      	ldr	r3, [pc, #360]	@ (8005a98 <hal_timer_set_pwm_output_period+0x330>)
 800592e:	0112      	lsls	r2, r2, #4
 8005930:	58d3      	ldr	r3, [r2, r3]
 8005932:	1cba      	adds	r2, r7, #2
 8005934:	8812      	ldrh	r2, [r2, #0]
 8005936:	635a      	str	r2, [r3, #52]	@ 0x34
            	if( (((TIM_TypeDef *)(timer_defs[id].timer))->CCER & TIM_CCER_CC1E) == 0 )	 /* Channel is currently off */
 8005938:	1dfb      	adds	r3, r7, #7
 800593a:	781a      	ldrb	r2, [r3, #0]
 800593c:	4b56      	ldr	r3, [pc, #344]	@ (8005a98 <hal_timer_set_pwm_output_period+0x330>)
 800593e:	0112      	lsls	r2, r2, #4
 8005940:	58d3      	ldr	r3, [r2, r3]
 8005942:	6a1b      	ldr	r3, [r3, #32]
 8005944:	2201      	movs	r2, #1
 8005946:	4013      	ands	r3, r2
 8005948:	d000      	beq.n	800594c <hal_timer_set_pwm_output_period+0x1e4>
 800594a:	e252      	b.n	8005df2 <hal_timer_set_pwm_output_period+0x68a>
				{
                    ((TIM_TypeDef *)(timer_defs[id].timer))->CCMR1 &= ~(TIM_CCMR1_OC1M | TIM_CCMR1_OC1FE);			/* Clear Output compare mode and the fast enable bits*/
 800594c:	1dfb      	adds	r3, r7, #7
 800594e:	781a      	ldrb	r2, [r3, #0]
 8005950:	4b51      	ldr	r3, [pc, #324]	@ (8005a98 <hal_timer_set_pwm_output_period+0x330>)
 8005952:	0112      	lsls	r2, r2, #4
 8005954:	58d3      	ldr	r3, [r2, r3]
 8005956:	699a      	ldr	r2, [r3, #24]
 8005958:	1dfb      	adds	r3, r7, #7
 800595a:	7819      	ldrb	r1, [r3, #0]
 800595c:	4b4e      	ldr	r3, [pc, #312]	@ (8005a98 <hal_timer_set_pwm_output_period+0x330>)
 800595e:	0109      	lsls	r1, r1, #4
 8005960:	58cb      	ldr	r3, [r1, r3]
 8005962:	4954      	ldr	r1, [pc, #336]	@ (8005ab4 <hal_timer_set_pwm_output_period+0x34c>)
 8005964:	400a      	ands	r2, r1
 8005966:	619a      	str	r2, [r3, #24]
                    ((TIM_TypeDef *)(timer_defs[id].timer))->CCMR1 |=  (TIM_CCMR1_OC1CE | 	 						/* Set the clear enable */
 8005968:	1dfb      	adds	r3, r7, #7
 800596a:	781a      	ldrb	r2, [r3, #0]
 800596c:	4b4a      	ldr	r3, [pc, #296]	@ (8005a98 <hal_timer_set_pwm_output_period+0x330>)
 800596e:	0112      	lsls	r2, r2, #4
 8005970:	58d3      	ldr	r3, [r2, r3]
 8005972:	699a      	ldr	r2, [r3, #24]
 8005974:	1dfb      	adds	r3, r7, #7
 8005976:	7819      	ldrb	r1, [r3, #0]
 8005978:	4b47      	ldr	r3, [pc, #284]	@ (8005a98 <hal_timer_set_pwm_output_period+0x330>)
 800597a:	0109      	lsls	r1, r1, #4
 800597c:	58cb      	ldr	r3, [r1, r3]
 800597e:	21e8      	movs	r1, #232	@ 0xe8
 8005980:	430a      	orrs	r2, r1
 8005982:	619a      	str	r2, [r3, #24]
                    													(TIM_CCMR1_OC1M_2 | TIM_CCMR1_OC1M_1) | 	/* Set the PWM Mode 1*/
    																	TIM_CCMR1_OC1PE);							/* Set the Fast Enable bit */
                    ((TIM_TypeDef *)(timer_defs[id].timer))->CCER  &= ~(TIM_CCER_CC1NP | TIM_CCER_CC1P);			/* Clear the channel 2 output polarity flags: OC2 will be active high */
 8005984:	1dfb      	adds	r3, r7, #7
 8005986:	781a      	ldrb	r2, [r3, #0]
 8005988:	4b43      	ldr	r3, [pc, #268]	@ (8005a98 <hal_timer_set_pwm_output_period+0x330>)
 800598a:	0112      	lsls	r2, r2, #4
 800598c:	58d3      	ldr	r3, [r2, r3]
 800598e:	6a1a      	ldr	r2, [r3, #32]
 8005990:	1dfb      	adds	r3, r7, #7
 8005992:	7819      	ldrb	r1, [r3, #0]
 8005994:	4b40      	ldr	r3, [pc, #256]	@ (8005a98 <hal_timer_set_pwm_output_period+0x330>)
 8005996:	0109      	lsls	r1, r1, #4
 8005998:	58cb      	ldr	r3, [r1, r3]
 800599a:	210a      	movs	r1, #10
 800599c:	438a      	bics	r2, r1
 800599e:	621a      	str	r2, [r3, #32]
                    ((TIM_TypeDef *)(timer_defs[id].timer))->CCER  |=  TIM_CCER_CC1E;								/* Enable channel 2 */
 80059a0:	1dfb      	adds	r3, r7, #7
 80059a2:	781a      	ldrb	r2, [r3, #0]
 80059a4:	4b3c      	ldr	r3, [pc, #240]	@ (8005a98 <hal_timer_set_pwm_output_period+0x330>)
 80059a6:	0112      	lsls	r2, r2, #4
 80059a8:	58d3      	ldr	r3, [r2, r3]
 80059aa:	6a1a      	ldr	r2, [r3, #32]
 80059ac:	1dfb      	adds	r3, r7, #7
 80059ae:	7819      	ldrb	r1, [r3, #0]
 80059b0:	4b39      	ldr	r3, [pc, #228]	@ (8005a98 <hal_timer_set_pwm_output_period+0x330>)
 80059b2:	0109      	lsls	r1, r1, #4
 80059b4:	58cb      	ldr	r3, [r1, r3]
 80059b6:	2101      	movs	r1, #1
 80059b8:	430a      	orrs	r2, r1
 80059ba:	621a      	str	r2, [r3, #32]
 80059bc:	e219      	b.n	8005df2 <hal_timer_set_pwm_output_period+0x68a>
				}
        	}
        	else if (IS_TIM_CC2_INSTANCE(timer_defs[id].timer) && timer_defs[id].channel == TIMER_CH2)						/* Does the timer have channels?*/
 80059be:	1dfb      	adds	r3, r7, #7
 80059c0:	781a      	ldrb	r2, [r3, #0]
 80059c2:	4b35      	ldr	r3, [pc, #212]	@ (8005a98 <hal_timer_set_pwm_output_period+0x330>)
 80059c4:	0112      	lsls	r2, r2, #4
 80059c6:	58d3      	ldr	r3, [r2, r3]
 80059c8:	4a35      	ldr	r2, [pc, #212]	@ (8005aa0 <hal_timer_set_pwm_output_period+0x338>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d00f      	beq.n	80059ee <hal_timer_set_pwm_output_period+0x286>
 80059ce:	1dfb      	adds	r3, r7, #7
 80059d0:	781a      	ldrb	r2, [r3, #0]
 80059d2:	4b31      	ldr	r3, [pc, #196]	@ (8005a98 <hal_timer_set_pwm_output_period+0x330>)
 80059d4:	0112      	lsls	r2, r2, #4
 80059d6:	58d3      	ldr	r3, [r2, r3]
 80059d8:	4a37      	ldr	r2, [pc, #220]	@ (8005ab8 <hal_timer_set_pwm_output_period+0x350>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d007      	beq.n	80059ee <hal_timer_set_pwm_output_period+0x286>
 80059de:	1dfb      	adds	r3, r7, #7
 80059e0:	781a      	ldrb	r2, [r3, #0]
 80059e2:	4b2d      	ldr	r3, [pc, #180]	@ (8005a98 <hal_timer_set_pwm_output_period+0x330>)
 80059e4:	0112      	lsls	r2, r2, #4
 80059e6:	58d3      	ldr	r3, [r2, r3]
 80059e8:	4a2e      	ldr	r2, [pc, #184]	@ (8005aa4 <hal_timer_set_pwm_output_period+0x33c>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d168      	bne.n	8005ac0 <hal_timer_set_pwm_output_period+0x358>
 80059ee:	1dfb      	adds	r3, r7, #7
 80059f0:	781b      	ldrb	r3, [r3, #0]
 80059f2:	4a29      	ldr	r2, [pc, #164]	@ (8005a98 <hal_timer_set_pwm_output_period+0x330>)
 80059f4:	011b      	lsls	r3, r3, #4
 80059f6:	18d3      	adds	r3, r2, r3
 80059f8:	3305      	adds	r3, #5
 80059fa:	781b      	ldrb	r3, [r3, #0]
 80059fc:	2b02      	cmp	r3, #2
 80059fe:	d15f      	bne.n	8005ac0 <hal_timer_set_pwm_output_period+0x358>
            {
            	((TIM_TypeDef *)(timer_defs[id].timer))->CCR2 = on_time;        // ..and on time
 8005a00:	1dfb      	adds	r3, r7, #7
 8005a02:	781a      	ldrb	r2, [r3, #0]
 8005a04:	4b24      	ldr	r3, [pc, #144]	@ (8005a98 <hal_timer_set_pwm_output_period+0x330>)
 8005a06:	0112      	lsls	r2, r2, #4
 8005a08:	58d3      	ldr	r3, [r2, r3]
 8005a0a:	1cba      	adds	r2, r7, #2
 8005a0c:	8812      	ldrh	r2, [r2, #0]
 8005a0e:	639a      	str	r2, [r3, #56]	@ 0x38
            	if( (((TIM_TypeDef *)(timer_defs[id].timer))->CCER & TIM_CCER_CC2E) == 0 )	 /* Channel is currently off */
 8005a10:	1dfb      	adds	r3, r7, #7
 8005a12:	781a      	ldrb	r2, [r3, #0]
 8005a14:	4b20      	ldr	r3, [pc, #128]	@ (8005a98 <hal_timer_set_pwm_output_period+0x330>)
 8005a16:	0112      	lsls	r2, r2, #4
 8005a18:	58d3      	ldr	r3, [r2, r3]
 8005a1a:	6a1b      	ldr	r3, [r3, #32]
 8005a1c:	2210      	movs	r2, #16
 8005a1e:	4013      	ands	r3, r2
 8005a20:	d000      	beq.n	8005a24 <hal_timer_set_pwm_output_period+0x2bc>
 8005a22:	e1e6      	b.n	8005df2 <hal_timer_set_pwm_output_period+0x68a>
				{
                    ((TIM_TypeDef *)(timer_defs[id].timer))->CCMR1 &= ~(TIM_CCMR1_OC2M | TIM_CCMR1_OC2FE);			/* Clear Output compare mode and the fast enable bits*/
 8005a24:	1dfb      	adds	r3, r7, #7
 8005a26:	781a      	ldrb	r2, [r3, #0]
 8005a28:	4b1b      	ldr	r3, [pc, #108]	@ (8005a98 <hal_timer_set_pwm_output_period+0x330>)
 8005a2a:	0112      	lsls	r2, r2, #4
 8005a2c:	58d3      	ldr	r3, [r2, r3]
 8005a2e:	699a      	ldr	r2, [r3, #24]
 8005a30:	1dfb      	adds	r3, r7, #7
 8005a32:	7819      	ldrb	r1, [r3, #0]
 8005a34:	4b18      	ldr	r3, [pc, #96]	@ (8005a98 <hal_timer_set_pwm_output_period+0x330>)
 8005a36:	0109      	lsls	r1, r1, #4
 8005a38:	58cb      	ldr	r3, [r1, r3]
 8005a3a:	4920      	ldr	r1, [pc, #128]	@ (8005abc <hal_timer_set_pwm_output_period+0x354>)
 8005a3c:	400a      	ands	r2, r1
 8005a3e:	619a      	str	r2, [r3, #24]
                    ((TIM_TypeDef *)(timer_defs[id].timer))->CCMR1 |=  (TIM_CCMR1_OC2CE | 	 						/* Set the clear enable */
 8005a40:	1dfb      	adds	r3, r7, #7
 8005a42:	781a      	ldrb	r2, [r3, #0]
 8005a44:	4b14      	ldr	r3, [pc, #80]	@ (8005a98 <hal_timer_set_pwm_output_period+0x330>)
 8005a46:	0112      	lsls	r2, r2, #4
 8005a48:	58d3      	ldr	r3, [r2, r3]
 8005a4a:	699a      	ldr	r2, [r3, #24]
 8005a4c:	1dfb      	adds	r3, r7, #7
 8005a4e:	7819      	ldrb	r1, [r3, #0]
 8005a50:	4b11      	ldr	r3, [pc, #68]	@ (8005a98 <hal_timer_set_pwm_output_period+0x330>)
 8005a52:	0109      	lsls	r1, r1, #4
 8005a54:	58cb      	ldr	r3, [r1, r3]
 8005a56:	21e8      	movs	r1, #232	@ 0xe8
 8005a58:	0209      	lsls	r1, r1, #8
 8005a5a:	430a      	orrs	r2, r1
 8005a5c:	619a      	str	r2, [r3, #24]
                    													(TIM_CCMR1_OC2M_2 | TIM_CCMR1_OC2M_1) | 	/* Set the PWM Mode 1*/
    																	TIM_CCMR1_OC2PE);							/* Set the Fast Enable bit */
                    ((TIM_TypeDef *)(timer_defs[id].timer))->CCER  &= ~(TIM_CCER_CC2NP | TIM_CCER_CC2P);			/* Clear the channel 2 output polarity flags: OC2 will be active high */
 8005a5e:	1dfb      	adds	r3, r7, #7
 8005a60:	781a      	ldrb	r2, [r3, #0]
 8005a62:	4b0d      	ldr	r3, [pc, #52]	@ (8005a98 <hal_timer_set_pwm_output_period+0x330>)
 8005a64:	0112      	lsls	r2, r2, #4
 8005a66:	58d3      	ldr	r3, [r2, r3]
 8005a68:	6a1a      	ldr	r2, [r3, #32]
 8005a6a:	1dfb      	adds	r3, r7, #7
 8005a6c:	7819      	ldrb	r1, [r3, #0]
 8005a6e:	4b0a      	ldr	r3, [pc, #40]	@ (8005a98 <hal_timer_set_pwm_output_period+0x330>)
 8005a70:	0109      	lsls	r1, r1, #4
 8005a72:	58cb      	ldr	r3, [r1, r3]
 8005a74:	21a0      	movs	r1, #160	@ 0xa0
 8005a76:	438a      	bics	r2, r1
 8005a78:	621a      	str	r2, [r3, #32]
                    ((TIM_TypeDef *)(timer_defs[id].timer))->CCER  |=  TIM_CCER_CC2E;								/* Enable channel 2 */
 8005a7a:	1dfb      	adds	r3, r7, #7
 8005a7c:	781a      	ldrb	r2, [r3, #0]
 8005a7e:	4b06      	ldr	r3, [pc, #24]	@ (8005a98 <hal_timer_set_pwm_output_period+0x330>)
 8005a80:	0112      	lsls	r2, r2, #4
 8005a82:	58d3      	ldr	r3, [r2, r3]
 8005a84:	6a1a      	ldr	r2, [r3, #32]
 8005a86:	1dfb      	adds	r3, r7, #7
 8005a88:	7819      	ldrb	r1, [r3, #0]
 8005a8a:	4b03      	ldr	r3, [pc, #12]	@ (8005a98 <hal_timer_set_pwm_output_period+0x330>)
 8005a8c:	0109      	lsls	r1, r1, #4
 8005a8e:	58cb      	ldr	r3, [r1, r3]
 8005a90:	2110      	movs	r1, #16
 8005a92:	430a      	orrs	r2, r1
 8005a94:	621a      	str	r2, [r3, #32]
            	if( (((TIM_TypeDef *)(timer_defs[id].timer))->CCER & TIM_CCER_CC2E) == 0 )	 /* Channel is currently off */
 8005a96:	e1ac      	b.n	8005df2 <hal_timer_set_pwm_output_period+0x68a>
 8005a98:	20000024 	.word	0x20000024
 8005a9c:	08006480 	.word	0x08006480
 8005aa0:	40012c00 	.word	0x40012c00
 8005aa4:	40014000 	.word	0x40014000
 8005aa8:	40014400 	.word	0x40014400
 8005aac:	40014800 	.word	0x40014800
 8005ab0:	ffff73ff 	.word	0xffff73ff
 8005ab4:	fffeff8b 	.word	0xfffeff8b
 8005ab8:	40000400 	.word	0x40000400
 8005abc:	feff8bff 	.word	0xfeff8bff
				}
            }
        	else if (IS_TIM_CC3_INSTANCE(timer_defs[id].timer) && timer_defs[id].channel == TIMER_CH3)						/* Does the timer have channels?*/
 8005ac0:	1dfb      	adds	r3, r7, #7
 8005ac2:	781a      	ldrb	r2, [r3, #0]
 8005ac4:	4b94      	ldr	r3, [pc, #592]	@ (8005d18 <hal_timer_set_pwm_output_period+0x5b0>)
 8005ac6:	0112      	lsls	r2, r2, #4
 8005ac8:	58d3      	ldr	r3, [r2, r3]
 8005aca:	4a94      	ldr	r2, [pc, #592]	@ (8005d1c <hal_timer_set_pwm_output_period+0x5b4>)
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d007      	beq.n	8005ae0 <hal_timer_set_pwm_output_period+0x378>
 8005ad0:	1dfb      	adds	r3, r7, #7
 8005ad2:	781a      	ldrb	r2, [r3, #0]
 8005ad4:	4b90      	ldr	r3, [pc, #576]	@ (8005d18 <hal_timer_set_pwm_output_period+0x5b0>)
 8005ad6:	0112      	lsls	r2, r2, #4
 8005ad8:	58d3      	ldr	r3, [r2, r3]
 8005ada:	4a91      	ldr	r2, [pc, #580]	@ (8005d20 <hal_timer_set_pwm_output_period+0x5b8>)
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d155      	bne.n	8005b8c <hal_timer_set_pwm_output_period+0x424>
 8005ae0:	1dfb      	adds	r3, r7, #7
 8005ae2:	781b      	ldrb	r3, [r3, #0]
 8005ae4:	4a8c      	ldr	r2, [pc, #560]	@ (8005d18 <hal_timer_set_pwm_output_period+0x5b0>)
 8005ae6:	011b      	lsls	r3, r3, #4
 8005ae8:	18d3      	adds	r3, r2, r3
 8005aea:	3305      	adds	r3, #5
 8005aec:	781b      	ldrb	r3, [r3, #0]
 8005aee:	2b03      	cmp	r3, #3
 8005af0:	d14c      	bne.n	8005b8c <hal_timer_set_pwm_output_period+0x424>
            {
				((TIM_TypeDef *)(timer_defs[id].timer))->CCR3 = on_time;        // ..and on time
 8005af2:	1dfb      	adds	r3, r7, #7
 8005af4:	781a      	ldrb	r2, [r3, #0]
 8005af6:	4b88      	ldr	r3, [pc, #544]	@ (8005d18 <hal_timer_set_pwm_output_period+0x5b0>)
 8005af8:	0112      	lsls	r2, r2, #4
 8005afa:	58d3      	ldr	r3, [r2, r3]
 8005afc:	1cba      	adds	r2, r7, #2
 8005afe:	8812      	ldrh	r2, [r2, #0]
 8005b00:	63da      	str	r2, [r3, #60]	@ 0x3c
				if( (((TIM_TypeDef *)(timer_defs[id].timer))->CCER & TIM_CCER_CC3E) == 0 )	 /* Channel is currently off */
 8005b02:	1dfb      	adds	r3, r7, #7
 8005b04:	781a      	ldrb	r2, [r3, #0]
 8005b06:	4b84      	ldr	r3, [pc, #528]	@ (8005d18 <hal_timer_set_pwm_output_period+0x5b0>)
 8005b08:	0112      	lsls	r2, r2, #4
 8005b0a:	58d3      	ldr	r3, [r2, r3]
 8005b0c:	6a1a      	ldr	r2, [r3, #32]
 8005b0e:	2380      	movs	r3, #128	@ 0x80
 8005b10:	005b      	lsls	r3, r3, #1
 8005b12:	4013      	ands	r3, r2
 8005b14:	d000      	beq.n	8005b18 <hal_timer_set_pwm_output_period+0x3b0>
 8005b16:	e16c      	b.n	8005df2 <hal_timer_set_pwm_output_period+0x68a>
				{
					((TIM_TypeDef *)(timer_defs[id].timer))->CCMR2 &= ~(TIM_CCMR2_OC3M | TIM_CCMR2_OC3FE);			/* Clear Output compare mode and the fast enable bits*/
 8005b18:	1dfb      	adds	r3, r7, #7
 8005b1a:	781a      	ldrb	r2, [r3, #0]
 8005b1c:	4b7e      	ldr	r3, [pc, #504]	@ (8005d18 <hal_timer_set_pwm_output_period+0x5b0>)
 8005b1e:	0112      	lsls	r2, r2, #4
 8005b20:	58d3      	ldr	r3, [r2, r3]
 8005b22:	69da      	ldr	r2, [r3, #28]
 8005b24:	1dfb      	adds	r3, r7, #7
 8005b26:	7819      	ldrb	r1, [r3, #0]
 8005b28:	4b7b      	ldr	r3, [pc, #492]	@ (8005d18 <hal_timer_set_pwm_output_period+0x5b0>)
 8005b2a:	0109      	lsls	r1, r1, #4
 8005b2c:	58cb      	ldr	r3, [r1, r3]
 8005b2e:	497d      	ldr	r1, [pc, #500]	@ (8005d24 <hal_timer_set_pwm_output_period+0x5bc>)
 8005b30:	400a      	ands	r2, r1
 8005b32:	61da      	str	r2, [r3, #28]
					((TIM_TypeDef *)(timer_defs[id].timer))->CCMR2 |=  (TIM_CCMR2_OC3CE | 	 						/* Set the clear enable */
 8005b34:	1dfb      	adds	r3, r7, #7
 8005b36:	781a      	ldrb	r2, [r3, #0]
 8005b38:	4b77      	ldr	r3, [pc, #476]	@ (8005d18 <hal_timer_set_pwm_output_period+0x5b0>)
 8005b3a:	0112      	lsls	r2, r2, #4
 8005b3c:	58d3      	ldr	r3, [r2, r3]
 8005b3e:	69da      	ldr	r2, [r3, #28]
 8005b40:	1dfb      	adds	r3, r7, #7
 8005b42:	7819      	ldrb	r1, [r3, #0]
 8005b44:	4b74      	ldr	r3, [pc, #464]	@ (8005d18 <hal_timer_set_pwm_output_period+0x5b0>)
 8005b46:	0109      	lsls	r1, r1, #4
 8005b48:	58cb      	ldr	r3, [r1, r3]
 8005b4a:	21e8      	movs	r1, #232	@ 0xe8
 8005b4c:	430a      	orrs	r2, r1
 8005b4e:	61da      	str	r2, [r3, #28]
																		(TIM_CCMR2_OC3M_2 | TIM_CCMR2_OC3M_1) | 	/* Set the PWM Mode 1*/
																		TIM_CCMR2_OC3PE);							/* Set the Fast Enable bit */
					((TIM_TypeDef *)(timer_defs[id].timer))->CCER  &= ~(TIM_CCER_CC3NP | TIM_CCER_CC3P);			/* Clear the channel 2 output polarity flags: OC2 will be active high */
 8005b50:	1dfb      	adds	r3, r7, #7
 8005b52:	781a      	ldrb	r2, [r3, #0]
 8005b54:	4b70      	ldr	r3, [pc, #448]	@ (8005d18 <hal_timer_set_pwm_output_period+0x5b0>)
 8005b56:	0112      	lsls	r2, r2, #4
 8005b58:	58d3      	ldr	r3, [r2, r3]
 8005b5a:	6a1a      	ldr	r2, [r3, #32]
 8005b5c:	1dfb      	adds	r3, r7, #7
 8005b5e:	7819      	ldrb	r1, [r3, #0]
 8005b60:	4b6d      	ldr	r3, [pc, #436]	@ (8005d18 <hal_timer_set_pwm_output_period+0x5b0>)
 8005b62:	0109      	lsls	r1, r1, #4
 8005b64:	58cb      	ldr	r3, [r1, r3]
 8005b66:	4970      	ldr	r1, [pc, #448]	@ (8005d28 <hal_timer_set_pwm_output_period+0x5c0>)
 8005b68:	400a      	ands	r2, r1
 8005b6a:	621a      	str	r2, [r3, #32]
					((TIM_TypeDef *)(timer_defs[id].timer))->CCER  |=  TIM_CCER_CC3E;								/* Enable channel 2 */
 8005b6c:	1dfb      	adds	r3, r7, #7
 8005b6e:	781a      	ldrb	r2, [r3, #0]
 8005b70:	4b69      	ldr	r3, [pc, #420]	@ (8005d18 <hal_timer_set_pwm_output_period+0x5b0>)
 8005b72:	0112      	lsls	r2, r2, #4
 8005b74:	58d3      	ldr	r3, [r2, r3]
 8005b76:	6a1a      	ldr	r2, [r3, #32]
 8005b78:	1dfb      	adds	r3, r7, #7
 8005b7a:	7819      	ldrb	r1, [r3, #0]
 8005b7c:	4b66      	ldr	r3, [pc, #408]	@ (8005d18 <hal_timer_set_pwm_output_period+0x5b0>)
 8005b7e:	0109      	lsls	r1, r1, #4
 8005b80:	58cb      	ldr	r3, [r1, r3]
 8005b82:	2180      	movs	r1, #128	@ 0x80
 8005b84:	0049      	lsls	r1, r1, #1
 8005b86:	430a      	orrs	r2, r1
 8005b88:	621a      	str	r2, [r3, #32]
				if( (((TIM_TypeDef *)(timer_defs[id].timer))->CCER & TIM_CCER_CC3E) == 0 )	 /* Channel is currently off */
 8005b8a:	e132      	b.n	8005df2 <hal_timer_set_pwm_output_period+0x68a>
				}
            }
        	else if (IS_TIM_CC4_INSTANCE(timer_defs[id].timer) && timer_defs[id].channel == TIMER_CH4)						/* Does the timer have channels?*/
 8005b8c:	1dfb      	adds	r3, r7, #7
 8005b8e:	781a      	ldrb	r2, [r3, #0]
 8005b90:	4b61      	ldr	r3, [pc, #388]	@ (8005d18 <hal_timer_set_pwm_output_period+0x5b0>)
 8005b92:	0112      	lsls	r2, r2, #4
 8005b94:	58d3      	ldr	r3, [r2, r3]
 8005b96:	4a61      	ldr	r2, [pc, #388]	@ (8005d1c <hal_timer_set_pwm_output_period+0x5b4>)
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	d007      	beq.n	8005bac <hal_timer_set_pwm_output_period+0x444>
 8005b9c:	1dfb      	adds	r3, r7, #7
 8005b9e:	781a      	ldrb	r2, [r3, #0]
 8005ba0:	4b5d      	ldr	r3, [pc, #372]	@ (8005d18 <hal_timer_set_pwm_output_period+0x5b0>)
 8005ba2:	0112      	lsls	r2, r2, #4
 8005ba4:	58d3      	ldr	r3, [r2, r3]
 8005ba6:	4a5e      	ldr	r2, [pc, #376]	@ (8005d20 <hal_timer_set_pwm_output_period+0x5b8>)
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	d156      	bne.n	8005c5a <hal_timer_set_pwm_output_period+0x4f2>
 8005bac:	1dfb      	adds	r3, r7, #7
 8005bae:	781b      	ldrb	r3, [r3, #0]
 8005bb0:	4a59      	ldr	r2, [pc, #356]	@ (8005d18 <hal_timer_set_pwm_output_period+0x5b0>)
 8005bb2:	011b      	lsls	r3, r3, #4
 8005bb4:	18d3      	adds	r3, r2, r3
 8005bb6:	3305      	adds	r3, #5
 8005bb8:	781b      	ldrb	r3, [r3, #0]
 8005bba:	2b04      	cmp	r3, #4
 8005bbc:	d14d      	bne.n	8005c5a <hal_timer_set_pwm_output_period+0x4f2>
            {
				((TIM_TypeDef *)(timer_defs[id].timer))->CCR4 = on_time;        // ..and on time
 8005bbe:	1dfb      	adds	r3, r7, #7
 8005bc0:	781a      	ldrb	r2, [r3, #0]
 8005bc2:	4b55      	ldr	r3, [pc, #340]	@ (8005d18 <hal_timer_set_pwm_output_period+0x5b0>)
 8005bc4:	0112      	lsls	r2, r2, #4
 8005bc6:	58d3      	ldr	r3, [r2, r3]
 8005bc8:	1cba      	adds	r2, r7, #2
 8005bca:	8812      	ldrh	r2, [r2, #0]
 8005bcc:	641a      	str	r2, [r3, #64]	@ 0x40
				if( (((TIM_TypeDef *)(timer_defs[id].timer))->CCER & TIM_CCER_CC4E) == 0 )	 /* Channel is currently off */
 8005bce:	1dfb      	adds	r3, r7, #7
 8005bd0:	781a      	ldrb	r2, [r3, #0]
 8005bd2:	4b51      	ldr	r3, [pc, #324]	@ (8005d18 <hal_timer_set_pwm_output_period+0x5b0>)
 8005bd4:	0112      	lsls	r2, r2, #4
 8005bd6:	58d3      	ldr	r3, [r2, r3]
 8005bd8:	6a1a      	ldr	r2, [r3, #32]
 8005bda:	2380      	movs	r3, #128	@ 0x80
 8005bdc:	015b      	lsls	r3, r3, #5
 8005bde:	4013      	ands	r3, r2
 8005be0:	d000      	beq.n	8005be4 <hal_timer_set_pwm_output_period+0x47c>
 8005be2:	e106      	b.n	8005df2 <hal_timer_set_pwm_output_period+0x68a>
				{
					((TIM_TypeDef *)(timer_defs[id].timer))->CCMR2 &= ~(TIM_CCMR2_OC4M | TIM_CCMR2_OC4FE);			/* Clear Output compare mode and the fast enable bits*/
 8005be4:	1dfb      	adds	r3, r7, #7
 8005be6:	781a      	ldrb	r2, [r3, #0]
 8005be8:	4b4b      	ldr	r3, [pc, #300]	@ (8005d18 <hal_timer_set_pwm_output_period+0x5b0>)
 8005bea:	0112      	lsls	r2, r2, #4
 8005bec:	58d3      	ldr	r3, [r2, r3]
 8005bee:	69da      	ldr	r2, [r3, #28]
 8005bf0:	1dfb      	adds	r3, r7, #7
 8005bf2:	7819      	ldrb	r1, [r3, #0]
 8005bf4:	4b48      	ldr	r3, [pc, #288]	@ (8005d18 <hal_timer_set_pwm_output_period+0x5b0>)
 8005bf6:	0109      	lsls	r1, r1, #4
 8005bf8:	58cb      	ldr	r3, [r1, r3]
 8005bfa:	494c      	ldr	r1, [pc, #304]	@ (8005d2c <hal_timer_set_pwm_output_period+0x5c4>)
 8005bfc:	400a      	ands	r2, r1
 8005bfe:	61da      	str	r2, [r3, #28]
					((TIM_TypeDef *)(timer_defs[id].timer))->CCMR2 |=  (TIM_CCMR2_OC4CE | 	 						/* Set the clear enable */
 8005c00:	1dfb      	adds	r3, r7, #7
 8005c02:	781a      	ldrb	r2, [r3, #0]
 8005c04:	4b44      	ldr	r3, [pc, #272]	@ (8005d18 <hal_timer_set_pwm_output_period+0x5b0>)
 8005c06:	0112      	lsls	r2, r2, #4
 8005c08:	58d3      	ldr	r3, [r2, r3]
 8005c0a:	69da      	ldr	r2, [r3, #28]
 8005c0c:	1dfb      	adds	r3, r7, #7
 8005c0e:	7819      	ldrb	r1, [r3, #0]
 8005c10:	4b41      	ldr	r3, [pc, #260]	@ (8005d18 <hal_timer_set_pwm_output_period+0x5b0>)
 8005c12:	0109      	lsls	r1, r1, #4
 8005c14:	58cb      	ldr	r3, [r1, r3]
 8005c16:	21e8      	movs	r1, #232	@ 0xe8
 8005c18:	0209      	lsls	r1, r1, #8
 8005c1a:	430a      	orrs	r2, r1
 8005c1c:	61da      	str	r2, [r3, #28]
																		(TIM_CCMR2_OC4M_2 | TIM_CCMR2_OC4M_1) | 	/* Set the PWM Mode 1*/
																		TIM_CCMR2_OC4PE);							/* Set the Fast Enable bit */
					((TIM_TypeDef *)(timer_defs[id].timer))->CCER  &= ~(TIM_CCER_CC4NP | TIM_CCER_CC4P);			/* Clear the channel 2 output polarity flags: OC2 will be active high */
 8005c1e:	1dfb      	adds	r3, r7, #7
 8005c20:	781a      	ldrb	r2, [r3, #0]
 8005c22:	4b3d      	ldr	r3, [pc, #244]	@ (8005d18 <hal_timer_set_pwm_output_period+0x5b0>)
 8005c24:	0112      	lsls	r2, r2, #4
 8005c26:	58d3      	ldr	r3, [r2, r3]
 8005c28:	6a1a      	ldr	r2, [r3, #32]
 8005c2a:	1dfb      	adds	r3, r7, #7
 8005c2c:	7819      	ldrb	r1, [r3, #0]
 8005c2e:	4b3a      	ldr	r3, [pc, #232]	@ (8005d18 <hal_timer_set_pwm_output_period+0x5b0>)
 8005c30:	0109      	lsls	r1, r1, #4
 8005c32:	58cb      	ldr	r3, [r1, r3]
 8005c34:	493e      	ldr	r1, [pc, #248]	@ (8005d30 <hal_timer_set_pwm_output_period+0x5c8>)
 8005c36:	400a      	ands	r2, r1
 8005c38:	621a      	str	r2, [r3, #32]
					((TIM_TypeDef *)(timer_defs[id].timer))->CCER  |=  TIM_CCER_CC4E;								/* Enable channel 2 */
 8005c3a:	1dfb      	adds	r3, r7, #7
 8005c3c:	781a      	ldrb	r2, [r3, #0]
 8005c3e:	4b36      	ldr	r3, [pc, #216]	@ (8005d18 <hal_timer_set_pwm_output_period+0x5b0>)
 8005c40:	0112      	lsls	r2, r2, #4
 8005c42:	58d3      	ldr	r3, [r2, r3]
 8005c44:	6a1a      	ldr	r2, [r3, #32]
 8005c46:	1dfb      	adds	r3, r7, #7
 8005c48:	7819      	ldrb	r1, [r3, #0]
 8005c4a:	4b33      	ldr	r3, [pc, #204]	@ (8005d18 <hal_timer_set_pwm_output_period+0x5b0>)
 8005c4c:	0109      	lsls	r1, r1, #4
 8005c4e:	58cb      	ldr	r3, [r1, r3]
 8005c50:	2180      	movs	r1, #128	@ 0x80
 8005c52:	0149      	lsls	r1, r1, #5
 8005c54:	430a      	orrs	r2, r1
 8005c56:	621a      	str	r2, [r3, #32]
				if( (((TIM_TypeDef *)(timer_defs[id].timer))->CCER & TIM_CCER_CC4E) == 0 )	 /* Channel is currently off */
 8005c58:	e0cb      	b.n	8005df2 <hal_timer_set_pwm_output_period+0x68a>
				}
            }
        	else if (IS_TIM_CC5_INSTANCE(timer_defs[id].timer) && timer_defs[id].channel == TIMER_CH5)						/* Does the timer have channels?*/
 8005c5a:	1dfb      	adds	r3, r7, #7
 8005c5c:	781a      	ldrb	r2, [r3, #0]
 8005c5e:	4b2e      	ldr	r3, [pc, #184]	@ (8005d18 <hal_timer_set_pwm_output_period+0x5b0>)
 8005c60:	0112      	lsls	r2, r2, #4
 8005c62:	58d3      	ldr	r3, [r2, r3]
 8005c64:	4a2d      	ldr	r2, [pc, #180]	@ (8005d1c <hal_timer_set_pwm_output_period+0x5b4>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d166      	bne.n	8005d38 <hal_timer_set_pwm_output_period+0x5d0>
 8005c6a:	1dfb      	adds	r3, r7, #7
 8005c6c:	781b      	ldrb	r3, [r3, #0]
 8005c6e:	4a2a      	ldr	r2, [pc, #168]	@ (8005d18 <hal_timer_set_pwm_output_period+0x5b0>)
 8005c70:	011b      	lsls	r3, r3, #4
 8005c72:	18d3      	adds	r3, r2, r3
 8005c74:	3305      	adds	r3, #5
 8005c76:	781b      	ldrb	r3, [r3, #0]
 8005c78:	2b05      	cmp	r3, #5
 8005c7a:	d15d      	bne.n	8005d38 <hal_timer_set_pwm_output_period+0x5d0>
            {
				((TIM_TypeDef *)(timer_defs[id].timer))->CCR5 = on_time;        // ..and on time
 8005c7c:	1dfb      	adds	r3, r7, #7
 8005c7e:	781a      	ldrb	r2, [r3, #0]
 8005c80:	4b25      	ldr	r3, [pc, #148]	@ (8005d18 <hal_timer_set_pwm_output_period+0x5b0>)
 8005c82:	0112      	lsls	r2, r2, #4
 8005c84:	58d3      	ldr	r3, [r2, r3]
 8005c86:	1cba      	adds	r2, r7, #2
 8005c88:	8812      	ldrh	r2, [r2, #0]
 8005c8a:	659a      	str	r2, [r3, #88]	@ 0x58
				if( (((TIM_TypeDef *)(timer_defs[id].timer))->CCER & TIM_CCER_CC5E) == 0 )	 /* Channel is currently off */
 8005c8c:	1dfb      	adds	r3, r7, #7
 8005c8e:	781a      	ldrb	r2, [r3, #0]
 8005c90:	4b21      	ldr	r3, [pc, #132]	@ (8005d18 <hal_timer_set_pwm_output_period+0x5b0>)
 8005c92:	0112      	lsls	r2, r2, #4
 8005c94:	58d3      	ldr	r3, [r2, r3]
 8005c96:	6a1a      	ldr	r2, [r3, #32]
 8005c98:	2380      	movs	r3, #128	@ 0x80
 8005c9a:	025b      	lsls	r3, r3, #9
 8005c9c:	4013      	ands	r3, r2
 8005c9e:	d000      	beq.n	8005ca2 <hal_timer_set_pwm_output_period+0x53a>
 8005ca0:	e0a7      	b.n	8005df2 <hal_timer_set_pwm_output_period+0x68a>
				{
					((TIM_TypeDef *)(timer_defs[id].timer))->CCMR3 &= ~(TIM_CCMR3_OC5M | TIM_CCMR3_OC5FE);			/* Clear Output compare mode and the fast enable bits*/
 8005ca2:	1dfb      	adds	r3, r7, #7
 8005ca4:	781a      	ldrb	r2, [r3, #0]
 8005ca6:	4b1c      	ldr	r3, [pc, #112]	@ (8005d18 <hal_timer_set_pwm_output_period+0x5b0>)
 8005ca8:	0112      	lsls	r2, r2, #4
 8005caa:	58d3      	ldr	r3, [r2, r3]
 8005cac:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005cae:	1dfb      	adds	r3, r7, #7
 8005cb0:	7819      	ldrb	r1, [r3, #0]
 8005cb2:	4b19      	ldr	r3, [pc, #100]	@ (8005d18 <hal_timer_set_pwm_output_period+0x5b0>)
 8005cb4:	0109      	lsls	r1, r1, #4
 8005cb6:	58cb      	ldr	r3, [r1, r3]
 8005cb8:	491a      	ldr	r1, [pc, #104]	@ (8005d24 <hal_timer_set_pwm_output_period+0x5bc>)
 8005cba:	400a      	ands	r2, r1
 8005cbc:	655a      	str	r2, [r3, #84]	@ 0x54
					((TIM_TypeDef *)(timer_defs[id].timer))->CCMR3 |=  (TIM_CCMR3_OC5CE | 	 						/* Set the clear enable */
 8005cbe:	1dfb      	adds	r3, r7, #7
 8005cc0:	781a      	ldrb	r2, [r3, #0]
 8005cc2:	4b15      	ldr	r3, [pc, #84]	@ (8005d18 <hal_timer_set_pwm_output_period+0x5b0>)
 8005cc4:	0112      	lsls	r2, r2, #4
 8005cc6:	58d3      	ldr	r3, [r2, r3]
 8005cc8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005cca:	1dfb      	adds	r3, r7, #7
 8005ccc:	7819      	ldrb	r1, [r3, #0]
 8005cce:	4b12      	ldr	r3, [pc, #72]	@ (8005d18 <hal_timer_set_pwm_output_period+0x5b0>)
 8005cd0:	0109      	lsls	r1, r1, #4
 8005cd2:	58cb      	ldr	r3, [r1, r3]
 8005cd4:	21e8      	movs	r1, #232	@ 0xe8
 8005cd6:	430a      	orrs	r2, r1
 8005cd8:	655a      	str	r2, [r3, #84]	@ 0x54
																		(TIM_CCMR3_OC5M_2 | TIM_CCMR3_OC5M_1) | 	/* Set the PWM Mode 1*/
																		TIM_CCMR3_OC5PE);							/* Set the Fast Enable bit */
					((TIM_TypeDef *)(timer_defs[id].timer))->CCER  &= ~(TIM_CCER_CC5P);								/* Clear the channel 2 output polarity flags: OC2 will be active high */
 8005cda:	1dfb      	adds	r3, r7, #7
 8005cdc:	781a      	ldrb	r2, [r3, #0]
 8005cde:	4b0e      	ldr	r3, [pc, #56]	@ (8005d18 <hal_timer_set_pwm_output_period+0x5b0>)
 8005ce0:	0112      	lsls	r2, r2, #4
 8005ce2:	58d3      	ldr	r3, [r2, r3]
 8005ce4:	6a1a      	ldr	r2, [r3, #32]
 8005ce6:	1dfb      	adds	r3, r7, #7
 8005ce8:	7819      	ldrb	r1, [r3, #0]
 8005cea:	4b0b      	ldr	r3, [pc, #44]	@ (8005d18 <hal_timer_set_pwm_output_period+0x5b0>)
 8005cec:	0109      	lsls	r1, r1, #4
 8005cee:	58cb      	ldr	r3, [r1, r3]
 8005cf0:	4910      	ldr	r1, [pc, #64]	@ (8005d34 <hal_timer_set_pwm_output_period+0x5cc>)
 8005cf2:	400a      	ands	r2, r1
 8005cf4:	621a      	str	r2, [r3, #32]
					((TIM_TypeDef *)(timer_defs[id].timer))->CCER  |=  TIM_CCER_CC5E;								/* Enable channel 5 */
 8005cf6:	1dfb      	adds	r3, r7, #7
 8005cf8:	781a      	ldrb	r2, [r3, #0]
 8005cfa:	4b07      	ldr	r3, [pc, #28]	@ (8005d18 <hal_timer_set_pwm_output_period+0x5b0>)
 8005cfc:	0112      	lsls	r2, r2, #4
 8005cfe:	58d3      	ldr	r3, [r2, r3]
 8005d00:	6a1a      	ldr	r2, [r3, #32]
 8005d02:	1dfb      	adds	r3, r7, #7
 8005d04:	7819      	ldrb	r1, [r3, #0]
 8005d06:	4b04      	ldr	r3, [pc, #16]	@ (8005d18 <hal_timer_set_pwm_output_period+0x5b0>)
 8005d08:	0109      	lsls	r1, r1, #4
 8005d0a:	58cb      	ldr	r3, [r1, r3]
 8005d0c:	2180      	movs	r1, #128	@ 0x80
 8005d0e:	0249      	lsls	r1, r1, #9
 8005d10:	430a      	orrs	r2, r1
 8005d12:	621a      	str	r2, [r3, #32]
				if( (((TIM_TypeDef *)(timer_defs[id].timer))->CCER & TIM_CCER_CC5E) == 0 )	 /* Channel is currently off */
 8005d14:	e06d      	b.n	8005df2 <hal_timer_set_pwm_output_period+0x68a>
 8005d16:	46c0      	nop			@ (mov r8, r8)
 8005d18:	20000024 	.word	0x20000024
 8005d1c:	40012c00 	.word	0x40012c00
 8005d20:	40000400 	.word	0x40000400
 8005d24:	fffeff8b 	.word	0xfffeff8b
 8005d28:	fffff5ff 	.word	0xfffff5ff
 8005d2c:	feff8bff 	.word	0xfeff8bff
 8005d30:	ffff5fff 	.word	0xffff5fff
 8005d34:	fffdffff 	.word	0xfffdffff
				}
            }
        	else if (IS_TIM_CC6_INSTANCE(timer_defs[id].timer) && timer_defs[id].channel == TIMER_CH6)						/* Does the timer have channels?*/
 8005d38:	1dfb      	adds	r3, r7, #7
 8005d3a:	781a      	ldrb	r2, [r3, #0]
 8005d3c:	4b57      	ldr	r3, [pc, #348]	@ (8005e9c <hal_timer_set_pwm_output_period+0x734>)
 8005d3e:	0112      	lsls	r2, r2, #4
 8005d40:	58d3      	ldr	r3, [r2, r3]
 8005d42:	4a57      	ldr	r2, [pc, #348]	@ (8005ea0 <hal_timer_set_pwm_output_period+0x738>)
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d154      	bne.n	8005df2 <hal_timer_set_pwm_output_period+0x68a>
 8005d48:	1dfb      	adds	r3, r7, #7
 8005d4a:	781b      	ldrb	r3, [r3, #0]
 8005d4c:	4a53      	ldr	r2, [pc, #332]	@ (8005e9c <hal_timer_set_pwm_output_period+0x734>)
 8005d4e:	011b      	lsls	r3, r3, #4
 8005d50:	18d3      	adds	r3, r2, r3
 8005d52:	3305      	adds	r3, #5
 8005d54:	781b      	ldrb	r3, [r3, #0]
 8005d56:	2b06      	cmp	r3, #6
 8005d58:	d14b      	bne.n	8005df2 <hal_timer_set_pwm_output_period+0x68a>
            {
				((TIM_TypeDef *)(timer_defs[id].timer))->CCR6 = on_time;        // ..and on time
 8005d5a:	1dfb      	adds	r3, r7, #7
 8005d5c:	781a      	ldrb	r2, [r3, #0]
 8005d5e:	4b4f      	ldr	r3, [pc, #316]	@ (8005e9c <hal_timer_set_pwm_output_period+0x734>)
 8005d60:	0112      	lsls	r2, r2, #4
 8005d62:	58d3      	ldr	r3, [r2, r3]
 8005d64:	1cba      	adds	r2, r7, #2
 8005d66:	8812      	ldrh	r2, [r2, #0]
 8005d68:	65da      	str	r2, [r3, #92]	@ 0x5c
				if( (((TIM_TypeDef *)(timer_defs[id].timer))->CCER & TIM_CCER_CC6E) == 0 )	 /* Channel is currently off */
 8005d6a:	1dfb      	adds	r3, r7, #7
 8005d6c:	781a      	ldrb	r2, [r3, #0]
 8005d6e:	4b4b      	ldr	r3, [pc, #300]	@ (8005e9c <hal_timer_set_pwm_output_period+0x734>)
 8005d70:	0112      	lsls	r2, r2, #4
 8005d72:	58d3      	ldr	r3, [r2, r3]
 8005d74:	6a1a      	ldr	r2, [r3, #32]
 8005d76:	2380      	movs	r3, #128	@ 0x80
 8005d78:	035b      	lsls	r3, r3, #13
 8005d7a:	4013      	ands	r3, r2
 8005d7c:	d139      	bne.n	8005df2 <hal_timer_set_pwm_output_period+0x68a>
				{
					((TIM_TypeDef *)(timer_defs[id].timer))->CCMR3 &= ~(TIM_CCMR3_OC6M | TIM_CCMR3_OC6FE);			/* Clear Output compare mode and the fast enable bits*/
 8005d7e:	1dfb      	adds	r3, r7, #7
 8005d80:	781a      	ldrb	r2, [r3, #0]
 8005d82:	4b46      	ldr	r3, [pc, #280]	@ (8005e9c <hal_timer_set_pwm_output_period+0x734>)
 8005d84:	0112      	lsls	r2, r2, #4
 8005d86:	58d3      	ldr	r3, [r2, r3]
 8005d88:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005d8a:	1dfb      	adds	r3, r7, #7
 8005d8c:	7819      	ldrb	r1, [r3, #0]
 8005d8e:	4b43      	ldr	r3, [pc, #268]	@ (8005e9c <hal_timer_set_pwm_output_period+0x734>)
 8005d90:	0109      	lsls	r1, r1, #4
 8005d92:	58cb      	ldr	r3, [r1, r3]
 8005d94:	4943      	ldr	r1, [pc, #268]	@ (8005ea4 <hal_timer_set_pwm_output_period+0x73c>)
 8005d96:	400a      	ands	r2, r1
 8005d98:	655a      	str	r2, [r3, #84]	@ 0x54
					((TIM_TypeDef *)(timer_defs[id].timer))->CCMR3 |=  (TIM_CCMR3_OC6CE | 	 						/* Set the clear enable */
 8005d9a:	1dfb      	adds	r3, r7, #7
 8005d9c:	781a      	ldrb	r2, [r3, #0]
 8005d9e:	4b3f      	ldr	r3, [pc, #252]	@ (8005e9c <hal_timer_set_pwm_output_period+0x734>)
 8005da0:	0112      	lsls	r2, r2, #4
 8005da2:	58d3      	ldr	r3, [r2, r3]
 8005da4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005da6:	1dfb      	adds	r3, r7, #7
 8005da8:	7819      	ldrb	r1, [r3, #0]
 8005daa:	4b3c      	ldr	r3, [pc, #240]	@ (8005e9c <hal_timer_set_pwm_output_period+0x734>)
 8005dac:	0109      	lsls	r1, r1, #4
 8005dae:	58cb      	ldr	r3, [r1, r3]
 8005db0:	21e8      	movs	r1, #232	@ 0xe8
 8005db2:	0209      	lsls	r1, r1, #8
 8005db4:	430a      	orrs	r2, r1
 8005db6:	655a      	str	r2, [r3, #84]	@ 0x54
																		(TIM_CCMR3_OC6M_2 | TIM_CCMR3_OC6M_1) | 	/* Set the PWM Mode 1*/
																		TIM_CCMR3_OC6PE);							/* Set the Fast Enable bit */
					((TIM_TypeDef *)(timer_defs[id].timer))->CCER  &= ~(TIM_CCER_CC6P);								/* Clear the channel 2 output polarity flags: OC2 will be active high */
 8005db8:	1dfb      	adds	r3, r7, #7
 8005dba:	781a      	ldrb	r2, [r3, #0]
 8005dbc:	4b37      	ldr	r3, [pc, #220]	@ (8005e9c <hal_timer_set_pwm_output_period+0x734>)
 8005dbe:	0112      	lsls	r2, r2, #4
 8005dc0:	58d3      	ldr	r3, [r2, r3]
 8005dc2:	6a1a      	ldr	r2, [r3, #32]
 8005dc4:	1dfb      	adds	r3, r7, #7
 8005dc6:	7819      	ldrb	r1, [r3, #0]
 8005dc8:	4b34      	ldr	r3, [pc, #208]	@ (8005e9c <hal_timer_set_pwm_output_period+0x734>)
 8005dca:	0109      	lsls	r1, r1, #4
 8005dcc:	58cb      	ldr	r3, [r1, r3]
 8005dce:	4936      	ldr	r1, [pc, #216]	@ (8005ea8 <hal_timer_set_pwm_output_period+0x740>)
 8005dd0:	400a      	ands	r2, r1
 8005dd2:	621a      	str	r2, [r3, #32]
					((TIM_TypeDef *)(timer_defs[id].timer))->CCER  |=  TIM_CCER_CC6E;								/* Enable channel 6 */
 8005dd4:	1dfb      	adds	r3, r7, #7
 8005dd6:	781a      	ldrb	r2, [r3, #0]
 8005dd8:	4b30      	ldr	r3, [pc, #192]	@ (8005e9c <hal_timer_set_pwm_output_period+0x734>)
 8005dda:	0112      	lsls	r2, r2, #4
 8005ddc:	58d3      	ldr	r3, [r2, r3]
 8005dde:	6a1a      	ldr	r2, [r3, #32]
 8005de0:	1dfb      	adds	r3, r7, #7
 8005de2:	7819      	ldrb	r1, [r3, #0]
 8005de4:	4b2d      	ldr	r3, [pc, #180]	@ (8005e9c <hal_timer_set_pwm_output_period+0x734>)
 8005de6:	0109      	lsls	r1, r1, #4
 8005de8:	58cb      	ldr	r3, [r1, r3]
 8005dea:	2180      	movs	r1, #128	@ 0x80
 8005dec:	0349      	lsls	r1, r1, #13
 8005dee:	430a      	orrs	r2, r1
 8005df0:	621a      	str	r2, [r3, #32]
				}
            }
			if(((((TIM_TypeDef *)(timer_defs[id].timer))->CR1 &  (TIM_CR1_ARPE | TIM_CR1_CEN)) !=  (TIM_CR1_ARPE | TIM_CR1_CEN)) )	/* If not enabled or auot-reload is not setup */
 8005df2:	1dfb      	adds	r3, r7, #7
 8005df4:	781a      	ldrb	r2, [r3, #0]
 8005df6:	4b29      	ldr	r3, [pc, #164]	@ (8005e9c <hal_timer_set_pwm_output_period+0x734>)
 8005df8:	0112      	lsls	r2, r2, #4
 8005dfa:	58d3      	ldr	r3, [r2, r3]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	2281      	movs	r2, #129	@ 0x81
 8005e00:	4013      	ands	r3, r2
 8005e02:	2b81      	cmp	r3, #129	@ 0x81
 8005e04:	d00d      	beq.n	8005e22 <hal_timer_set_pwm_output_period+0x6ba>
			{
				((TIM_TypeDef *)(timer_defs[id].timer))->CR1   |=  (TIM_CR1_ARPE | TIM_CR1_CEN);				/* Enable Counter and enable buffered Tx_ARR register */
 8005e06:	1dfb      	adds	r3, r7, #7
 8005e08:	781a      	ldrb	r2, [r3, #0]
 8005e0a:	4b24      	ldr	r3, [pc, #144]	@ (8005e9c <hal_timer_set_pwm_output_period+0x734>)
 8005e0c:	0112      	lsls	r2, r2, #4
 8005e0e:	58d3      	ldr	r3, [r2, r3]
 8005e10:	681a      	ldr	r2, [r3, #0]
 8005e12:	1dfb      	adds	r3, r7, #7
 8005e14:	7819      	ldrb	r1, [r3, #0]
 8005e16:	4b21      	ldr	r3, [pc, #132]	@ (8005e9c <hal_timer_set_pwm_output_period+0x734>)
 8005e18:	0109      	lsls	r1, r1, #4
 8005e1a:	58cb      	ldr	r3, [r1, r3]
 8005e1c:	2181      	movs	r1, #129	@ 0x81
 8005e1e:	430a      	orrs	r2, r1
 8005e20:	601a      	str	r2, [r3, #0]
			}

			if( IS_TIM_BREAK_INSTANCE(timer_defs[id].timer))		/* Special consideration for timers with the break dead-time feature for PWM */
 8005e22:	1dfb      	adds	r3, r7, #7
 8005e24:	781a      	ldrb	r2, [r3, #0]
 8005e26:	4b1d      	ldr	r3, [pc, #116]	@ (8005e9c <hal_timer_set_pwm_output_period+0x734>)
 8005e28:	0112      	lsls	r2, r2, #4
 8005e2a:	58d3      	ldr	r3, [r2, r3]
 8005e2c:	4a1c      	ldr	r2, [pc, #112]	@ (8005ea0 <hal_timer_set_pwm_output_period+0x738>)
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d017      	beq.n	8005e62 <hal_timer_set_pwm_output_period+0x6fa>
 8005e32:	1dfb      	adds	r3, r7, #7
 8005e34:	781a      	ldrb	r2, [r3, #0]
 8005e36:	4b19      	ldr	r3, [pc, #100]	@ (8005e9c <hal_timer_set_pwm_output_period+0x734>)
 8005e38:	0112      	lsls	r2, r2, #4
 8005e3a:	58d3      	ldr	r3, [r2, r3]
 8005e3c:	4a1b      	ldr	r2, [pc, #108]	@ (8005eac <hal_timer_set_pwm_output_period+0x744>)
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	d00f      	beq.n	8005e62 <hal_timer_set_pwm_output_period+0x6fa>
 8005e42:	1dfb      	adds	r3, r7, #7
 8005e44:	781a      	ldrb	r2, [r3, #0]
 8005e46:	4b15      	ldr	r3, [pc, #84]	@ (8005e9c <hal_timer_set_pwm_output_period+0x734>)
 8005e48:	0112      	lsls	r2, r2, #4
 8005e4a:	58d3      	ldr	r3, [r2, r3]
 8005e4c:	4a18      	ldr	r2, [pc, #96]	@ (8005eb0 <hal_timer_set_pwm_output_period+0x748>)
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d007      	beq.n	8005e62 <hal_timer_set_pwm_output_period+0x6fa>
 8005e52:	1dfb      	adds	r3, r7, #7
 8005e54:	781a      	ldrb	r2, [r3, #0]
 8005e56:	4b11      	ldr	r3, [pc, #68]	@ (8005e9c <hal_timer_set_pwm_output_period+0x734>)
 8005e58:	0112      	lsls	r2, r2, #4
 8005e5a:	58d3      	ldr	r3, [r2, r3]
 8005e5c:	4a15      	ldr	r2, [pc, #84]	@ (8005eb4 <hal_timer_set_pwm_output_period+0x74c>)
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d107      	bne.n	8005e72 <hal_timer_set_pwm_output_period+0x70a>
			{
				// See page 817 in the RM for the truth table
				((TIM_TypeDef *)(timer_defs[id].timer))->BDTR = (TIM_BDTR_MOE | TIM_BDTR_AOE);		// Enable output, all other bits are 0
 8005e62:	1dfb      	adds	r3, r7, #7
 8005e64:	781a      	ldrb	r2, [r3, #0]
 8005e66:	4b0d      	ldr	r3, [pc, #52]	@ (8005e9c <hal_timer_set_pwm_output_period+0x734>)
 8005e68:	0112      	lsls	r2, r2, #4
 8005e6a:	58d3      	ldr	r3, [r2, r3]
 8005e6c:	22c0      	movs	r2, #192	@ 0xc0
 8005e6e:	0212      	lsls	r2, r2, #8
 8005e70:	645a      	str	r2, [r3, #68]	@ 0x44
//				((TIM_TypeDef *)(timer_defs[id].timer))->BDTR &= ~(TIM_BDTR_OSSI | TIM_BDTR_OSSR);	// Off-state is a don't care so leave it blank
			}

			/* Generate an update event to reload the Prescaler and the repetition counter value immediately */
			((TIM_TypeDef *)(timer_defs[id].timer))->EGR |= TIM_EGR_UG;
 8005e72:	1dfb      	adds	r3, r7, #7
 8005e74:	781a      	ldrb	r2, [r3, #0]
 8005e76:	4b09      	ldr	r3, [pc, #36]	@ (8005e9c <hal_timer_set_pwm_output_period+0x734>)
 8005e78:	0112      	lsls	r2, r2, #4
 8005e7a:	58d3      	ldr	r3, [r2, r3]
 8005e7c:	695a      	ldr	r2, [r3, #20]
 8005e7e:	1dfb      	adds	r3, r7, #7
 8005e80:	7819      	ldrb	r1, [r3, #0]
 8005e82:	4b06      	ldr	r3, [pc, #24]	@ (8005e9c <hal_timer_set_pwm_output_period+0x734>)
 8005e84:	0109      	lsls	r1, r1, #4
 8005e86:	58cb      	ldr	r3, [r1, r3]
 8005e88:	2101      	movs	r1, #1
 8005e8a:	430a      	orrs	r2, r1
 8005e8c:	615a      	str	r2, [r3, #20]
 8005e8e:	e002      	b.n	8005e96 <hal_timer_set_pwm_output_period+0x72e>
        return;
 8005e90:	46c0      	nop			@ (mov r8, r8)
 8005e92:	e000      	b.n	8005e96 <hal_timer_set_pwm_output_period+0x72e>
        return;
 8005e94:	46c0      	nop			@ (mov r8, r8)
    }
    else
    {
        // No other timers supported
    }
}
 8005e96:	46bd      	mov	sp, r7
 8005e98:	b005      	add	sp, #20
 8005e9a:	bd90      	pop	{r4, r7, pc}
 8005e9c:	20000024 	.word	0x20000024
 8005ea0:	40012c00 	.word	0x40012c00
 8005ea4:	feff8bff 	.word	0xfeff8bff
 8005ea8:	ffdfffff 	.word	0xffdfffff
 8005eac:	40014000 	.word	0x40014000
 8005eb0:	40014400 	.word	0x40014400
 8005eb4:	40014800 	.word	0x40014800

08005eb8 <hal_timer_set_timer_for_blocking_delays>:
const uint16_t counts_per_50usec	= ((50  * (BLOCKING_TIMER_CLK_FREQ / 1000000 )) - 1);
const uint16_t counts_per_100usec	= ((100  * (BLOCKING_TIMER_CLK_FREQ / 1000000 )) - 1);
const uint16_t counts_per_152usec	= ((152 * (BLOCKING_TIMER_CLK_FREQ / 1000000 )) - 1);

void hal_timer_set_timer_for_blocking_delays(enum timer_id timer_for_blocking_delays)
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b082      	sub	sp, #8
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	0002      	movs	r2, r0
 8005ec0:	1dfb      	adds	r3, r7, #7
 8005ec2:	701a      	strb	r2, [r3, #0]
	/* a basic or general timer must be used for blocking delay functions */
	if ((timer_defs[timer_for_blocking_delays].type != TIM_BASIC) &&
 8005ec4:	1dfb      	adds	r3, r7, #7
 8005ec6:	781b      	ldrb	r3, [r3, #0]
 8005ec8:	4a12      	ldr	r2, [pc, #72]	@ (8005f14 <hal_timer_set_timer_for_blocking_delays+0x5c>)
 8005eca:	011b      	lsls	r3, r3, #4
 8005ecc:	18d3      	adds	r3, r2, r3
 8005ece:	3304      	adds	r3, #4
 8005ed0:	781b      	ldrb	r3, [r3, #0]
 8005ed2:	2b01      	cmp	r3, #1
 8005ed4:	d008      	beq.n	8005ee8 <hal_timer_set_timer_for_blocking_delays+0x30>
		(timer_defs[timer_for_blocking_delays].type != TIM_GEN_PURPOSE))
 8005ed6:	1dfb      	adds	r3, r7, #7
 8005ed8:	781b      	ldrb	r3, [r3, #0]
 8005eda:	4a0e      	ldr	r2, [pc, #56]	@ (8005f14 <hal_timer_set_timer_for_blocking_delays+0x5c>)
 8005edc:	011b      	lsls	r3, r3, #4
 8005ede:	18d3      	adds	r3, r2, r3
 8005ee0:	3304      	adds	r3, #4
 8005ee2:	781b      	ldrb	r3, [r3, #0]
	if ((timer_defs[timer_for_blocking_delays].type != TIM_BASIC) &&
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d110      	bne.n	8005f0a <hal_timer_set_timer_for_blocking_delays+0x52>
	{
		return;
	}

	blocking_delay_timer_ptr          = (TIM_TypeDef*)timer_defs[timer_for_blocking_delays].timer;
 8005ee8:	1dfb      	adds	r3, r7, #7
 8005eea:	781a      	ldrb	r2, [r3, #0]
 8005eec:	4b09      	ldr	r3, [pc, #36]	@ (8005f14 <hal_timer_set_timer_for_blocking_delays+0x5c>)
 8005eee:	0112      	lsls	r2, r2, #4
 8005ef0:	58d2      	ldr	r2, [r2, r3]
 8005ef2:	4b09      	ldr	r3, [pc, #36]	@ (8005f18 <hal_timer_set_timer_for_blocking_delays+0x60>)
 8005ef4:	601a      	str	r2, [r3, #0]

	//blocking_delay_prescaler_pwr_of_2 = timer_defs[timer_for_blocking_delays].prescale_powers_of_2;

	// The STM32G070 uses a 16bit prescaler.
	blocking_delay_prescaler_16b = timer_defs[timer_for_blocking_delays].prescaler_16b;
 8005ef6:	1dfb      	adds	r3, r7, #7
 8005ef8:	781b      	ldrb	r3, [r3, #0]
 8005efa:	4a06      	ldr	r2, [pc, #24]	@ (8005f14 <hal_timer_set_timer_for_blocking_delays+0x5c>)
 8005efc:	011b      	lsls	r3, r3, #4
 8005efe:	18d3      	adds	r3, r2, r3
 8005f00:	3306      	adds	r3, #6
 8005f02:	881a      	ldrh	r2, [r3, #0]
 8005f04:	4b05      	ldr	r3, [pc, #20]	@ (8005f1c <hal_timer_set_timer_for_blocking_delays+0x64>)
 8005f06:	801a      	strh	r2, [r3, #0]
 8005f08:	e000      	b.n	8005f0c <hal_timer_set_timer_for_blocking_delays+0x54>
		return;
 8005f0a:	46c0      	nop			@ (mov r8, r8)

}
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	b002      	add	sp, #8
 8005f10:	bd80      	pop	{r7, pc}
 8005f12:	46c0      	nop			@ (mov r8, r8)
 8005f14:	20000024 	.word	0x20000024
 8005f18:	200003cc 	.word	0x200003cc
 8005f1c:	200003d0 	.word	0x200003d0

08005f20 <irq_cb>:
	blocking_delay_timer_ptr->CR1 &= ~TIM_CR1_CEN;
}

#if defined TIM15
static void irq_cb(TIM_TypeDef *tmr)
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b084      	sub	sp, #16
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
	for (uint8_t i=0u; i < NUMBER_OF_TIMERS; i++)
 8005f28:	230f      	movs	r3, #15
 8005f2a:	18fb      	adds	r3, r7, r3
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	701a      	strb	r2, [r3, #0]
 8005f30:	e020      	b.n	8005f74 <irq_cb+0x54>
	{
		if (timer_defs[i].timer == tmr)
 8005f32:	210f      	movs	r1, #15
 8005f34:	187b      	adds	r3, r7, r1
 8005f36:	781a      	ldrb	r2, [r3, #0]
 8005f38:	4b13      	ldr	r3, [pc, #76]	@ (8005f88 <irq_cb+0x68>)
 8005f3a:	0112      	lsls	r2, r2, #4
 8005f3c:	58d3      	ldr	r3, [r2, r3]
 8005f3e:	687a      	ldr	r2, [r7, #4]
 8005f40:	429a      	cmp	r2, r3
 8005f42:	d111      	bne.n	8005f68 <irq_cb+0x48>
		{
			if (timer_defs[i].timer_irq_cb != NULL)
 8005f44:	187b      	adds	r3, r7, r1
 8005f46:	781b      	ldrb	r3, [r3, #0]
 8005f48:	4a0f      	ldr	r2, [pc, #60]	@ (8005f88 <irq_cb+0x68>)
 8005f4a:	011b      	lsls	r3, r3, #4
 8005f4c:	18d3      	adds	r3, r2, r3
 8005f4e:	3308      	adds	r3, #8
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d008      	beq.n	8005f68 <irq_cb+0x48>
			{
				timer_defs[i].timer_irq_cb(0 /* dummy value for now, since this isn't implemented */);
 8005f56:	187b      	adds	r3, r7, r1
 8005f58:	781b      	ldrb	r3, [r3, #0]
 8005f5a:	4a0b      	ldr	r2, [pc, #44]	@ (8005f88 <irq_cb+0x68>)
 8005f5c:	011b      	lsls	r3, r3, #4
 8005f5e:	18d3      	adds	r3, r2, r3
 8005f60:	3308      	adds	r3, #8
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	2000      	movs	r0, #0
 8005f66:	4798      	blx	r3
	for (uint8_t i=0u; i < NUMBER_OF_TIMERS; i++)
 8005f68:	210f      	movs	r1, #15
 8005f6a:	187b      	adds	r3, r7, r1
 8005f6c:	781a      	ldrb	r2, [r3, #0]
 8005f6e:	187b      	adds	r3, r7, r1
 8005f70:	3201      	adds	r2, #1
 8005f72:	701a      	strb	r2, [r3, #0]
 8005f74:	230f      	movs	r3, #15
 8005f76:	18fb      	adds	r3, r7, r3
 8005f78:	781b      	ldrb	r3, [r3, #0]
 8005f7a:	2b03      	cmp	r3, #3
 8005f7c:	d9d9      	bls.n	8005f32 <irq_cb+0x12>
			}
		}
	}
}
 8005f7e:	46c0      	nop			@ (mov r8, r8)
 8005f80:	46c0      	nop			@ (mov r8, r8)
 8005f82:	46bd      	mov	sp, r7
 8005f84:	b004      	add	sp, #16
 8005f86:	bd80      	pop	{r7, pc}
 8005f88:	20000024 	.word	0x20000024

08005f8c <TIM15_IRQHandler>:

void TIM15_IRQHandler(void)
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	af00      	add	r7, sp, #0
	irq_cb(TIM15);
 8005f90:	4b03      	ldr	r3, [pc, #12]	@ (8005fa0 <TIM15_IRQHandler+0x14>)
 8005f92:	0018      	movs	r0, r3
 8005f94:	f7ff ffc4 	bl	8005f20 <irq_cb>
}
 8005f98:	46c0      	nop			@ (mov r8, r8)
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	bd80      	pop	{r7, pc}
 8005f9e:	46c0      	nop			@ (mov r8, r8)
 8005fa0:	40014000 	.word	0x40014000

08005fa4 <uart_irq_handler>:
{
	return ((uart_hal->uart_module->CR1 & USART_CR1_TCIE) != 0);
}

void uart_irq_handler(USART_TypeDef* uart_module)
{
 8005fa4:	b590      	push	{r4, r7, lr}
 8005fa6:	b085      	sub	sp, #20
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
	uint8_t byte_to_tx;

    /* if there are any error flags AND if in RX mode rather than Tx mode */
	if (uart_module->ISR & (USART_ISR_ORE /*| USART_ISR_NE | USART_ISR_FE*/) && (uart_module->CR2 & USART_CR2_SWAP))
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	69db      	ldr	r3, [r3, #28]
 8005fb0:	2208      	movs	r2, #8
 8005fb2:	4013      	ands	r3, r2
 8005fb4:	d018      	beq.n	8005fe8 <uart_irq_handler+0x44>
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	685a      	ldr	r2, [r3, #4]
 8005fba:	2380      	movs	r3, #128	@ 0x80
 8005fbc:	021b      	lsls	r3, r3, #8
 8005fbe:	4013      	ands	r3, r2
 8005fc0:	d012      	beq.n	8005fe8 <uart_irq_handler+0x44>
	{
		if (uart_module->ISR & USART_ISR_RXNE_RXFNE)
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	69db      	ldr	r3, [r3, #28]
 8005fc6:	2220      	movs	r2, #32
 8005fc8:	4013      	ands	r3, r2
 8005fca:	d00d      	beq.n	8005fe8 <uart_irq_handler+0x44>
			 * TWICE here because there's an overrun error which means we have TWO bytes 
			 * received, one in the RDR register, and then as soon as we read that once,
			 * there's a byte that gets shifted into the RDR register from the
			 * non-memory-mapped shift register.
			 */
			usart1_byte_received_callback(uart_module->RDR);
 8005fcc:	4b72      	ldr	r3, [pc, #456]	@ (8006198 <uart_irq_handler+0x1f4>)
 8005fce:	681a      	ldr	r2, [r3, #0]
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fd4:	b2db      	uxtb	r3, r3
 8005fd6:	0018      	movs	r0, r3
 8005fd8:	4790      	blx	r2
			usart1_byte_received_callback(uart_module->RDR);
 8005fda:	4b6f      	ldr	r3, [pc, #444]	@ (8006198 <uart_irq_handler+0x1f4>)
 8005fdc:	681a      	ldr	r2, [r3, #0]
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fe2:	b2db      	uxtb	r3, r3
 8005fe4:	0018      	movs	r0, r3
 8005fe6:	4790      	blx	r2
		}
	}
		uart_module->ICR |= (USART_ICR_ORECF | USART_ICR_NECF | USART_ICR_FECF);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	6a1b      	ldr	r3, [r3, #32]
 8005fec:	220e      	movs	r2, #14
 8005fee:	431a      	orrs	r2, r3
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	621a      	str	r2, [r3, #32]

    /* if a byte has been received AND if in Rx mode rather than Tx mode */
	if ((uart_module->ISR & USART_ISR_RXNE_RXFNE) && (uart_module->CR2 & USART_CR2_SWAP))
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	69db      	ldr	r3, [r3, #28]
 8005ff8:	2220      	movs	r2, #32
 8005ffa:	4013      	ands	r3, r2
 8005ffc:	d01c      	beq.n	8006038 <uart_irq_handler+0x94>
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	685a      	ldr	r2, [r3, #4]
 8006002:	2380      	movs	r3, #128	@ 0x80
 8006004:	021b      	lsls	r3, r3, #8
 8006006:	4013      	ands	r3, r2
 8006008:	d016      	beq.n	8006038 <uart_irq_handler+0x94>
	{
		/* Note that reading the RDR register clears the RXNE flag. */

		if (USART1 == uart_module)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	4a63      	ldr	r2, [pc, #396]	@ (800619c <uart_irq_handler+0x1f8>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d107      	bne.n	8006022 <uart_irq_handler+0x7e>
		{
			/* call the USART1 received callback, passing it the received data */
			usart1_byte_received_callback(uart_module->RDR);
 8006012:	4b61      	ldr	r3, [pc, #388]	@ (8006198 <uart_irq_handler+0x1f4>)
 8006014:	681a      	ldr	r2, [r3, #0]
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800601a:	b2db      	uxtb	r3, r3
 800601c:	0018      	movs	r0, r3
 800601e:	4790      	blx	r2
 8006020:	e00a      	b.n	8006038 <uart_irq_handler+0x94>
		}
		else if (USART2 == uart_module)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	4a5e      	ldr	r2, [pc, #376]	@ (80061a0 <uart_irq_handler+0x1fc>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d106      	bne.n	8006038 <uart_irq_handler+0x94>
		{
			/* call the USART2 received callback, passing it the received data */
			usart2_byte_received_callback(uart_module->RDR);
 800602a:	4b5e      	ldr	r3, [pc, #376]	@ (80061a4 <uart_irq_handler+0x200>)
 800602c:	681a      	ldr	r2, [r3, #0]
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006032:	b2db      	uxtb	r3, r3
 8006034:	0018      	movs	r0, r3
 8006036:	4790      	blx	r2
		uart_module->ICR |= USART_ICR_WUCF;
	}
#endif

    /* if the transmit buffer is empty AND we're set to Tx rather than Rx */
	if ((uart_module->ISR & USART_ISR_TXE_TXFNF) && !(uart_module->CR2 & USART_CR2_SWAP))
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	69db      	ldr	r3, [r3, #28]
 800603c:	2280      	movs	r2, #128	@ 0x80
 800603e:	4013      	ands	r3, r2
 8006040:	d038      	beq.n	80060b4 <uart_irq_handler+0x110>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	685a      	ldr	r2, [r3, #4]
 8006046:	2380      	movs	r3, #128	@ 0x80
 8006048:	021b      	lsls	r3, r3, #8
 800604a:	4013      	ands	r3, r2
 800604c:	d132      	bne.n	80060b4 <uart_irq_handler+0x110>
	{
		if (USART1 == uart_module)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	4a52      	ldr	r2, [pc, #328]	@ (800619c <uart_irq_handler+0x1f8>)
 8006052:	4293      	cmp	r3, r2
 8006054:	d115      	bne.n	8006082 <uart_irq_handler+0xde>
		{
			/* call the USART1 transmit callback to get the byte to Tx */
			if (usart1_transmit_ready_callback(&byte_to_tx))
 8006056:	4b54      	ldr	r3, [pc, #336]	@ (80061a8 <uart_irq_handler+0x204>)
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	240e      	movs	r4, #14
 800605c:	193a      	adds	r2, r7, r4
 800605e:	0010      	movs	r0, r2
 8006060:	4798      	blx	r3
 8006062:	1e03      	subs	r3, r0, #0
 8006064:	d005      	beq.n	8006072 <uart_irq_handler+0xce>
			{
				/* transmit the byte */
				uart_module->TDR = byte_to_tx;
 8006066:	193b      	adds	r3, r7, r4
 8006068:	781b      	ldrb	r3, [r3, #0]
 800606a:	001a      	movs	r2, r3
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	629a      	str	r2, [r3, #40]	@ 0x28
 8006070:	e020      	b.n	80060b4 <uart_irq_handler+0x110>
			}
			else
			{
				/* disable the 'Tx buffer empty' interrupt */
				uart_module->CR1 &= ~USART_CR1_TXEIE_TXFNFIE;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	2280      	movs	r2, #128	@ 0x80
 8006078:	4393      	bics	r3, r2
 800607a:	001a      	movs	r2, r3
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	601a      	str	r2, [r3, #0]
 8006080:	e018      	b.n	80060b4 <uart_irq_handler+0x110>
			}
		}
		else if (USART2 == uart_module)
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	4a46      	ldr	r2, [pc, #280]	@ (80061a0 <uart_irq_handler+0x1fc>)
 8006086:	4293      	cmp	r3, r2
 8006088:	d114      	bne.n	80060b4 <uart_irq_handler+0x110>
		{
			/* call the USART2 transmit callback to get the byte to Tx */
			if (usart2_transmit_ready_callback(&byte_to_tx))
 800608a:	4b48      	ldr	r3, [pc, #288]	@ (80061ac <uart_irq_handler+0x208>)
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	240e      	movs	r4, #14
 8006090:	193a      	adds	r2, r7, r4
 8006092:	0010      	movs	r0, r2
 8006094:	4798      	blx	r3
 8006096:	1e03      	subs	r3, r0, #0
 8006098:	d005      	beq.n	80060a6 <uart_irq_handler+0x102>
			{
				/* transmit the byte */
				uart_module->TDR = byte_to_tx;
 800609a:	193b      	adds	r3, r7, r4
 800609c:	781b      	ldrb	r3, [r3, #0]
 800609e:	001a      	movs	r2, r3
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	629a      	str	r2, [r3, #40]	@ 0x28
 80060a4:	e006      	b.n	80060b4 <uart_irq_handler+0x110>
			}
			else
			{
				/* disable the 'Tx buffer empty' interrupt */
				uart_module->CR1 &= ~USART_CR1_TXEIE_TXFNFIE;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	2280      	movs	r2, #128	@ 0x80
 80060ac:	4393      	bics	r3, r2
 80060ae:	001a      	movs	r2, r3
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	601a      	str	r2, [r3, #0]
		}
	}

/* TODO - need a callback in the UART driver for the 152 usec delay */
    /* if the transmission complete flag is set AND we're set to Tx rather than Rx */
	if ((uart_module->ISR & USART_ISR_TC) && !(uart_module->CR2 & USART_CR2_SWAP))
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	69db      	ldr	r3, [r3, #28]
 80060b8:	2240      	movs	r2, #64	@ 0x40
 80060ba:	4013      	ands	r3, r2
 80060bc:	d100      	bne.n	80060c0 <uart_irq_handler+0x11c>
 80060be:	e067      	b.n	8006190 <uart_irq_handler+0x1ec>
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	685a      	ldr	r2, [r3, #4]
 80060c4:	2380      	movs	r3, #128	@ 0x80
 80060c6:	021b      	lsls	r3, r3, #8
 80060c8:	4013      	ands	r3, r2
 80060ca:	d161      	bne.n	8006190 <uart_irq_handler+0x1ec>
	{
		if (USART1 == uart_module)
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	4a33      	ldr	r2, [pc, #204]	@ (800619c <uart_irq_handler+0x1f8>)
 80060d0:	4293      	cmp	r3, r2
 80060d2:	d107      	bne.n	80060e4 <uart_irq_handler+0x140>
		{
			if (usart1_blocking_delay)
 80060d4:	4b36      	ldr	r3, [pc, #216]	@ (80061b0 <uart_irq_handler+0x20c>)
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d00e      	beq.n	80060fa <uart_irq_handler+0x156>
			{
				/* delay to ride through the IR1 key glitch */
				usart1_blocking_delay();
 80060dc:	4b34      	ldr	r3, [pc, #208]	@ (80061b0 <uart_irq_handler+0x20c>)
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	4798      	blx	r3
 80060e2:	e00a      	b.n	80060fa <uart_irq_handler+0x156>
			}
		}
		else if (USART2 == uart_module)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	4a2e      	ldr	r2, [pc, #184]	@ (80061a0 <uart_irq_handler+0x1fc>)
 80060e8:	4293      	cmp	r3, r2
 80060ea:	d106      	bne.n	80060fa <uart_irq_handler+0x156>
		{
			if (usart2_blocking_delay)
 80060ec:	4b31      	ldr	r3, [pc, #196]	@ (80061b4 <uart_irq_handler+0x210>)
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d002      	beq.n	80060fa <uart_irq_handler+0x156>
			{
				/* delay to ride through the IR1 key glitch */
				usart2_blocking_delay();
 80060f4:	4b2f      	ldr	r3, [pc, #188]	@ (80061b4 <uart_irq_handler+0x210>)
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	4798      	blx	r3

		/* switch tx/rx pin to rx if needed */
		{
			uart_mode_t uart_mode;

			if (USART1 == uart_module)
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	4a27      	ldr	r2, [pc, #156]	@ (800619c <uart_irq_handler+0x1f8>)
 80060fe:	4293      	cmp	r3, r2
 8006100:	d105      	bne.n	800610e <uart_irq_handler+0x16a>
			{
				uart_mode = usart1_mode;
 8006102:	230f      	movs	r3, #15
 8006104:	18fb      	adds	r3, r7, r3
 8006106:	4a2c      	ldr	r2, [pc, #176]	@ (80061b8 <uart_irq_handler+0x214>)
 8006108:	7812      	ldrb	r2, [r2, #0]
 800610a:	701a      	strb	r2, [r3, #0]
 800610c:	e00d      	b.n	800612a <uart_irq_handler+0x186>
			}
			else if (USART2 == uart_module)
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	4a23      	ldr	r2, [pc, #140]	@ (80061a0 <uart_irq_handler+0x1fc>)
 8006112:	4293      	cmp	r3, r2
 8006114:	d105      	bne.n	8006122 <uart_irq_handler+0x17e>
			{
				uart_mode = usart2_mode;
 8006116:	230f      	movs	r3, #15
 8006118:	18fb      	adds	r3, r7, r3
 800611a:	4a28      	ldr	r2, [pc, #160]	@ (80061bc <uart_irq_handler+0x218>)
 800611c:	7812      	ldrb	r2, [r2, #0]
 800611e:	701a      	strb	r2, [r3, #0]
 8006120:	e003      	b.n	800612a <uart_irq_handler+0x186>
				uart_mode = lpuart1_mode;
			}
#endif
			else
			{
				uart_mode = 0; /* Should never get here!  This line is just to ensure consistency on failure. */
 8006122:	230f      	movs	r3, #15
 8006124:	18fb      	adds	r3, r7, r3
 8006126:	2200      	movs	r2, #0
 8006128:	701a      	strb	r2, [r3, #0]
			}

			if ((ONE_WIRE_NO_EXTERNAL_PULLUP == uart_mode) || (ONE_WIRE == uart_mode))
 800612a:	220f      	movs	r2, #15
 800612c:	18bb      	adds	r3, r7, r2
 800612e:	781b      	ldrb	r3, [r3, #0]
 8006130:	2b03      	cmp	r3, #3
 8006132:	d003      	beq.n	800613c <uart_irq_handler+0x198>
 8006134:	18bb      	adds	r3, r7, r2
 8006136:	781b      	ldrb	r3, [r3, #0]
 8006138:	2b00      	cmp	r3, #0
 800613a:	d119      	bne.n	8006170 <uart_irq_handler+0x1cc>
			{
				/* if tx/rx pin is set to tx... */
				if (!(uart_module->CR2 & USART_CR2_SWAP))
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	685a      	ldr	r2, [r3, #4]
 8006140:	2380      	movs	r3, #128	@ 0x80
 8006142:	021b      	lsls	r3, r3, #8
 8006144:	4013      	ands	r3, r2
 8006146:	d113      	bne.n	8006170 <uart_irq_handler+0x1cc>
				{
					/* ...then set pin to rx */
					uart_module->CR1 &= ~USART_CR1_UE;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	2201      	movs	r2, #1
 800614e:	4393      	bics	r3, r2
 8006150:	001a      	movs	r2, r3
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	601a      	str	r2, [r3, #0]
					uart_module->CR2 |=  USART_CR2_SWAP; /* can only modify CR2 when UE is 0 */
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	685b      	ldr	r3, [r3, #4]
 800615a:	2280      	movs	r2, #128	@ 0x80
 800615c:	0212      	lsls	r2, r2, #8
 800615e:	431a      	orrs	r2, r3
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	605a      	str	r2, [r3, #4]
					uart_module->CR1 |=  USART_CR1_UE;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	2201      	movs	r2, #1
 800616a:	431a      	orrs	r2, r3
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	601a      	str	r2, [r3, #0]
				}
			}
		}

		/* re-enable the receiver and receive interrupt */
		uart_module->CR1 |= (USART_CR1_RE | USART_CR1_RXNEIE_RXFNEIE);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	2224      	movs	r2, #36	@ 0x24
 8006176:	431a      	orrs	r2, r3
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	601a      	str	r2, [r3, #0]

		/* disable the 'Tx complete' interrupt */
		uart_module->CR1 &= ~USART_CR1_TCIE;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	2240      	movs	r2, #64	@ 0x40
 8006182:	4393      	bics	r3, r2
 8006184:	001a      	movs	r2, r3
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	601a      	str	r2, [r3, #0]

		/* clear the TC bit */
		uart_module->ICR = USART_ICR_TCCF;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2240      	movs	r2, #64	@ 0x40
 800618e:	621a      	str	r2, [r3, #32]
	}
}
 8006190:	46c0      	nop			@ (mov r8, r8)
 8006192:	46bd      	mov	sp, r7
 8006194:	b005      	add	sp, #20
 8006196:	bd90      	pop	{r4, r7, pc}
 8006198:	200003d8 	.word	0x200003d8
 800619c:	40013800 	.word	0x40013800
 80061a0:	40004400 	.word	0x40004400
 80061a4:	200003e0 	.word	0x200003e0
 80061a8:	200003d4 	.word	0x200003d4
 80061ac:	200003dc 	.word	0x200003dc
 80061b0:	200003e4 	.word	0x200003e4
 80061b4:	200003e8 	.word	0x200003e8
 80061b8:	200003ec 	.word	0x200003ec
 80061bc:	200003ed 	.word	0x200003ed

080061c0 <USART1_IRQHandler>:


#ifndef USART1_IRQHandler
void USART1_IRQHandler(void)
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	af00      	add	r7, sp, #0
	uart_irq_handler(USART1);
 80061c4:	4b03      	ldr	r3, [pc, #12]	@ (80061d4 <USART1_IRQHandler+0x14>)
 80061c6:	0018      	movs	r0, r3
 80061c8:	f7ff feec 	bl	8005fa4 <uart_irq_handler>
}
 80061cc:	46c0      	nop			@ (mov r8, r8)
 80061ce:	46bd      	mov	sp, r7
 80061d0:	bd80      	pop	{r7, pc}
 80061d2:	46c0      	nop			@ (mov r8, r8)
 80061d4:	40013800 	.word	0x40013800

080061d8 <USART2_IRQHandler>:
#endif

#ifndef USART2_IRQHandler

void USART2_IRQHandler(void)
{
 80061d8:	b580      	push	{r7, lr}
 80061da:	af00      	add	r7, sp, #0
	uart_irq_handler(USART2);
 80061dc:	4b03      	ldr	r3, [pc, #12]	@ (80061ec <USART2_IRQHandler+0x14>)
 80061de:	0018      	movs	r0, r3
 80061e0:	f7ff fee0 	bl	8005fa4 <uart_irq_handler>
}
 80061e4:	46c0      	nop			@ (mov r8, r8)
 80061e6:	46bd      	mov	sp, r7
 80061e8:	bd80      	pop	{r7, pc}
 80061ea:	46c0      	nop			@ (mov r8, r8)
 80061ec:	40004400 	.word	0x40004400

080061f0 <hal_watchdog_init>:


static IWDG_HandleTypeDef wdg_hdl = {0};

void hal_watchdog_init(void)
{
 80061f0:	b5b0      	push	{r4, r5, r7, lr}
 80061f2:	af00      	add	r7, sp, #0
    // Call the watch dog initialization function that was created by the hardware configuration tool.
	MX_IWDG_Init();
 80061f4:	f7fa fe66 	bl	8000ec4 <MX_IWDG_Init>

	wdg_hdl = hiwdg; // Use the watch dog handle created by the STM32 Hardware Configuration Tool.
 80061f8:	4b04      	ldr	r3, [pc, #16]	@ (800620c <hal_watchdog_init+0x1c>)
 80061fa:	4a05      	ldr	r2, [pc, #20]	@ (8006210 <hal_watchdog_init+0x20>)
 80061fc:	ca13      	ldmia	r2!, {r0, r1, r4}
 80061fe:	c313      	stmia	r3!, {r0, r1, r4}
 8006200:	6812      	ldr	r2, [r2, #0]
 8006202:	601a      	str	r2, [r3, #0]

}
 8006204:	46c0      	nop			@ (mov r8, r8)
 8006206:	46bd      	mov	sp, r7
 8006208:	bdb0      	pop	{r4, r5, r7, pc}
 800620a:	46c0      	nop			@ (mov r8, r8)
 800620c:	200003f0 	.word	0x200003f0
 8006210:	200001e4 	.word	0x200001e4

08006214 <hal_watchdog_reset>:
{

}

void hal_watchdog_reset(void)
{
 8006214:	b580      	push	{r7, lr}
 8006216:	af00      	add	r7, sp, #0
	if( wdg_hdl.Instance != NULL )			// Bootloader was resetting wdt but it was never initialized. This resulted in a null pointer access in HAL functions which impacted FLASH-SR CFGBSY Flag
 8006218:	4b05      	ldr	r3, [pc, #20]	@ (8006230 <hal_watchdog_reset+0x1c>)
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d003      	beq.n	8006228 <hal_watchdog_reset+0x14>
	{
		/* reload the WDT */
		HAL_IWDG_Refresh(&wdg_hdl);
 8006220:	4b03      	ldr	r3, [pc, #12]	@ (8006230 <hal_watchdog_reset+0x1c>)
 8006222:	0018      	movs	r0, r3
 8006224:	f7fc feb4 	bl	8002f90 <HAL_IWDG_Refresh>
	}
}
 8006228:	46c0      	nop			@ (mov r8, r8)
 800622a:	46bd      	mov	sp, r7
 800622c:	bd80      	pop	{r7, pc}
 800622e:	46c0      	nop			@ (mov r8, r8)
 8006230:	200003f0 	.word	0x200003f0

08006234 <memset>:
 8006234:	0003      	movs	r3, r0
 8006236:	1882      	adds	r2, r0, r2
 8006238:	4293      	cmp	r3, r2
 800623a:	d100      	bne.n	800623e <memset+0xa>
 800623c:	4770      	bx	lr
 800623e:	7019      	strb	r1, [r3, #0]
 8006240:	3301      	adds	r3, #1
 8006242:	e7f9      	b.n	8006238 <memset+0x4>

08006244 <_init>:
 8006244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006246:	46c0      	nop			@ (mov r8, r8)
 8006248:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800624a:	bc08      	pop	{r3}
 800624c:	469e      	mov	lr, r3
 800624e:	4770      	bx	lr

08006250 <_fini>:
 8006250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006252:	46c0      	nop			@ (mov r8, r8)
 8006254:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006256:	bc08      	pop	{r3}
 8006258:	469e      	mov	lr, r3
 800625a:	4770      	bx	lr
