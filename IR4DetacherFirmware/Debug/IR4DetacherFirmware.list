
IR4DetacherFirmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000170  08000000  08000000  00001000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000042ec  08000170  08000170  00001170  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  0800445c  0800445c  0000545c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080044f8  080044f8  0000600c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080044f8  080044f8  0000600c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080044f8  080044f8  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080044f8  080044f8  000054f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080044fc  080044fc  000054fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08004500  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000024c  2000000c  0800450c  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000258  0800450c  00006258  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012cbe  00000000  00000000  00006034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a61  00000000  00000000  00018cf2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012c8  00000000  00000000  0001c758  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e4f  00000000  00000000  0001da20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018794  00000000  00000000  0001e86f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b7b7  00000000  00000000  00037003  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00099639  00000000  00000000  000527ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ebdf3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004118  00000000  00000000  000ebe38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000009e  00000000  00000000  000eff50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000170 <__do_global_dtors_aux>:
 8000170:	b510      	push	{r4, lr}
 8000172:	4c06      	ldr	r4, [pc, #24]	@ (800018c <__do_global_dtors_aux+0x1c>)
 8000174:	7823      	ldrb	r3, [r4, #0]
 8000176:	2b00      	cmp	r3, #0
 8000178:	d107      	bne.n	800018a <__do_global_dtors_aux+0x1a>
 800017a:	4b05      	ldr	r3, [pc, #20]	@ (8000190 <__do_global_dtors_aux+0x20>)
 800017c:	2b00      	cmp	r3, #0
 800017e:	d002      	beq.n	8000186 <__do_global_dtors_aux+0x16>
 8000180:	4804      	ldr	r0, [pc, #16]	@ (8000194 <__do_global_dtors_aux+0x24>)
 8000182:	e000      	b.n	8000186 <__do_global_dtors_aux+0x16>
 8000184:	bf00      	nop
 8000186:	2301      	movs	r3, #1
 8000188:	7023      	strb	r3, [r4, #0]
 800018a:	bd10      	pop	{r4, pc}
 800018c:	2000000c 	.word	0x2000000c
 8000190:	00000000 	.word	0x00000000
 8000194:	08004444 	.word	0x08004444

08000198 <frame_dummy>:
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <frame_dummy+0x14>)
 800019a:	b510      	push	{r4, lr}
 800019c:	2b00      	cmp	r3, #0
 800019e:	d003      	beq.n	80001a8 <frame_dummy+0x10>
 80001a0:	4903      	ldr	r1, [pc, #12]	@ (80001b0 <frame_dummy+0x18>)
 80001a2:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <frame_dummy+0x1c>)
 80001a4:	e000      	b.n	80001a8 <frame_dummy+0x10>
 80001a6:	bf00      	nop
 80001a8:	bd10      	pop	{r4, pc}
 80001aa:	46c0      	nop			@ (mov r8, r8)
 80001ac:	00000000 	.word	0x00000000
 80001b0:	20000010 	.word	0x20000010
 80001b4:	08004444 	.word	0x08004444

080001b8 <__udivsi3>:
 80001b8:	2200      	movs	r2, #0
 80001ba:	0843      	lsrs	r3, r0, #1
 80001bc:	428b      	cmp	r3, r1
 80001be:	d374      	bcc.n	80002aa <__udivsi3+0xf2>
 80001c0:	0903      	lsrs	r3, r0, #4
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d35f      	bcc.n	8000286 <__udivsi3+0xce>
 80001c6:	0a03      	lsrs	r3, r0, #8
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d344      	bcc.n	8000256 <__udivsi3+0x9e>
 80001cc:	0b03      	lsrs	r3, r0, #12
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d328      	bcc.n	8000224 <__udivsi3+0x6c>
 80001d2:	0c03      	lsrs	r3, r0, #16
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d30d      	bcc.n	80001f4 <__udivsi3+0x3c>
 80001d8:	22ff      	movs	r2, #255	@ 0xff
 80001da:	0209      	lsls	r1, r1, #8
 80001dc:	ba12      	rev	r2, r2
 80001de:	0c03      	lsrs	r3, r0, #16
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d302      	bcc.n	80001ea <__udivsi3+0x32>
 80001e4:	1212      	asrs	r2, r2, #8
 80001e6:	0209      	lsls	r1, r1, #8
 80001e8:	d065      	beq.n	80002b6 <__udivsi3+0xfe>
 80001ea:	0b03      	lsrs	r3, r0, #12
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d319      	bcc.n	8000224 <__udivsi3+0x6c>
 80001f0:	e000      	b.n	80001f4 <__udivsi3+0x3c>
 80001f2:	0a09      	lsrs	r1, r1, #8
 80001f4:	0bc3      	lsrs	r3, r0, #15
 80001f6:	428b      	cmp	r3, r1
 80001f8:	d301      	bcc.n	80001fe <__udivsi3+0x46>
 80001fa:	03cb      	lsls	r3, r1, #15
 80001fc:	1ac0      	subs	r0, r0, r3
 80001fe:	4152      	adcs	r2, r2
 8000200:	0b83      	lsrs	r3, r0, #14
 8000202:	428b      	cmp	r3, r1
 8000204:	d301      	bcc.n	800020a <__udivsi3+0x52>
 8000206:	038b      	lsls	r3, r1, #14
 8000208:	1ac0      	subs	r0, r0, r3
 800020a:	4152      	adcs	r2, r2
 800020c:	0b43      	lsrs	r3, r0, #13
 800020e:	428b      	cmp	r3, r1
 8000210:	d301      	bcc.n	8000216 <__udivsi3+0x5e>
 8000212:	034b      	lsls	r3, r1, #13
 8000214:	1ac0      	subs	r0, r0, r3
 8000216:	4152      	adcs	r2, r2
 8000218:	0b03      	lsrs	r3, r0, #12
 800021a:	428b      	cmp	r3, r1
 800021c:	d301      	bcc.n	8000222 <__udivsi3+0x6a>
 800021e:	030b      	lsls	r3, r1, #12
 8000220:	1ac0      	subs	r0, r0, r3
 8000222:	4152      	adcs	r2, r2
 8000224:	0ac3      	lsrs	r3, r0, #11
 8000226:	428b      	cmp	r3, r1
 8000228:	d301      	bcc.n	800022e <__udivsi3+0x76>
 800022a:	02cb      	lsls	r3, r1, #11
 800022c:	1ac0      	subs	r0, r0, r3
 800022e:	4152      	adcs	r2, r2
 8000230:	0a83      	lsrs	r3, r0, #10
 8000232:	428b      	cmp	r3, r1
 8000234:	d301      	bcc.n	800023a <__udivsi3+0x82>
 8000236:	028b      	lsls	r3, r1, #10
 8000238:	1ac0      	subs	r0, r0, r3
 800023a:	4152      	adcs	r2, r2
 800023c:	0a43      	lsrs	r3, r0, #9
 800023e:	428b      	cmp	r3, r1
 8000240:	d301      	bcc.n	8000246 <__udivsi3+0x8e>
 8000242:	024b      	lsls	r3, r1, #9
 8000244:	1ac0      	subs	r0, r0, r3
 8000246:	4152      	adcs	r2, r2
 8000248:	0a03      	lsrs	r3, r0, #8
 800024a:	428b      	cmp	r3, r1
 800024c:	d301      	bcc.n	8000252 <__udivsi3+0x9a>
 800024e:	020b      	lsls	r3, r1, #8
 8000250:	1ac0      	subs	r0, r0, r3
 8000252:	4152      	adcs	r2, r2
 8000254:	d2cd      	bcs.n	80001f2 <__udivsi3+0x3a>
 8000256:	09c3      	lsrs	r3, r0, #7
 8000258:	428b      	cmp	r3, r1
 800025a:	d301      	bcc.n	8000260 <__udivsi3+0xa8>
 800025c:	01cb      	lsls	r3, r1, #7
 800025e:	1ac0      	subs	r0, r0, r3
 8000260:	4152      	adcs	r2, r2
 8000262:	0983      	lsrs	r3, r0, #6
 8000264:	428b      	cmp	r3, r1
 8000266:	d301      	bcc.n	800026c <__udivsi3+0xb4>
 8000268:	018b      	lsls	r3, r1, #6
 800026a:	1ac0      	subs	r0, r0, r3
 800026c:	4152      	adcs	r2, r2
 800026e:	0943      	lsrs	r3, r0, #5
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__udivsi3+0xc0>
 8000274:	014b      	lsls	r3, r1, #5
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0903      	lsrs	r3, r0, #4
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__udivsi3+0xcc>
 8000280:	010b      	lsls	r3, r1, #4
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	08c3      	lsrs	r3, r0, #3
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__udivsi3+0xd8>
 800028c:	00cb      	lsls	r3, r1, #3
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0883      	lsrs	r3, r0, #2
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__udivsi3+0xe4>
 8000298:	008b      	lsls	r3, r1, #2
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0843      	lsrs	r3, r0, #1
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__udivsi3+0xf0>
 80002a4:	004b      	lsls	r3, r1, #1
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	1a41      	subs	r1, r0, r1
 80002ac:	d200      	bcs.n	80002b0 <__udivsi3+0xf8>
 80002ae:	4601      	mov	r1, r0
 80002b0:	4152      	adcs	r2, r2
 80002b2:	4610      	mov	r0, r2
 80002b4:	4770      	bx	lr
 80002b6:	e7ff      	b.n	80002b8 <__udivsi3+0x100>
 80002b8:	b501      	push	{r0, lr}
 80002ba:	2000      	movs	r0, #0
 80002bc:	f000 f806 	bl	80002cc <__aeabi_idiv0>
 80002c0:	bd02      	pop	{r1, pc}
 80002c2:	46c0      	nop			@ (mov r8, r8)

080002c4 <__aeabi_uidivmod>:
 80002c4:	2900      	cmp	r1, #0
 80002c6:	d0f7      	beq.n	80002b8 <__udivsi3+0x100>
 80002c8:	e776      	b.n	80001b8 <__udivsi3>
 80002ca:	4770      	bx	lr

080002cc <__aeabi_idiv0>:
 80002cc:	4770      	bx	lr
 80002ce:	46c0      	nop			@ (mov r8, r8)

080002d0 <WptControllerInit>:
*
* return values: None
*
* ****************************************************************/
void WptControllerInit(void)
{
 80002d0:	b580      	push	{r7, lr}
 80002d2:	af00      	add	r7, sp, #0

}
 80002d4:	46c0      	nop			@ (mov r8, r8)
 80002d6:	46bd      	mov	sp, r7
 80002d8:	bd80      	pop	{r7, pc}
	...

080002dc <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	b084      	sub	sp, #16
 80002e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80002e2:	1d3b      	adds	r3, r7, #4
 80002e4:	0018      	movs	r0, r3
 80002e6:	230c      	movs	r3, #12
 80002e8:	001a      	movs	r2, r3
 80002ea:	2100      	movs	r1, #0
 80002ec:	f004 f8a2 	bl	8004434 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80002f0:	4b2d      	ldr	r3, [pc, #180]	@ (80003a8 <MX_ADC1_Init+0xcc>)
 80002f2:	4a2e      	ldr	r2, [pc, #184]	@ (80003ac <MX_ADC1_Init+0xd0>)
 80002f4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80002f6:	4b2c      	ldr	r3, [pc, #176]	@ (80003a8 <MX_ADC1_Init+0xcc>)
 80002f8:	2280      	movs	r2, #128	@ 0x80
 80002fa:	05d2      	lsls	r2, r2, #23
 80002fc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80002fe:	4b2a      	ldr	r3, [pc, #168]	@ (80003a8 <MX_ADC1_Init+0xcc>)
 8000300:	2200      	movs	r2, #0
 8000302:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000304:	4b28      	ldr	r3, [pc, #160]	@ (80003a8 <MX_ADC1_Init+0xcc>)
 8000306:	2200      	movs	r2, #0
 8000308:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800030a:	4b27      	ldr	r3, [pc, #156]	@ (80003a8 <MX_ADC1_Init+0xcc>)
 800030c:	2200      	movs	r2, #0
 800030e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000310:	4b25      	ldr	r3, [pc, #148]	@ (80003a8 <MX_ADC1_Init+0xcc>)
 8000312:	2204      	movs	r2, #4
 8000314:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000316:	4b24      	ldr	r3, [pc, #144]	@ (80003a8 <MX_ADC1_Init+0xcc>)
 8000318:	2200      	movs	r2, #0
 800031a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 800031c:	4b22      	ldr	r3, [pc, #136]	@ (80003a8 <MX_ADC1_Init+0xcc>)
 800031e:	2200      	movs	r2, #0
 8000320:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000322:	4b21      	ldr	r3, [pc, #132]	@ (80003a8 <MX_ADC1_Init+0xcc>)
 8000324:	2200      	movs	r2, #0
 8000326:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8000328:	4b1f      	ldr	r3, [pc, #124]	@ (80003a8 <MX_ADC1_Init+0xcc>)
 800032a:	2201      	movs	r2, #1
 800032c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800032e:	4b1e      	ldr	r3, [pc, #120]	@ (80003a8 <MX_ADC1_Init+0xcc>)
 8000330:	2220      	movs	r2, #32
 8000332:	2100      	movs	r1, #0
 8000334:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000336:	4b1c      	ldr	r3, [pc, #112]	@ (80003a8 <MX_ADC1_Init+0xcc>)
 8000338:	2200      	movs	r2, #0
 800033a:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800033c:	4b1a      	ldr	r3, [pc, #104]	@ (80003a8 <MX_ADC1_Init+0xcc>)
 800033e:	2200      	movs	r2, #0
 8000340:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000342:	4b19      	ldr	r3, [pc, #100]	@ (80003a8 <MX_ADC1_Init+0xcc>)
 8000344:	222c      	movs	r2, #44	@ 0x2c
 8000346:	2100      	movs	r1, #0
 8000348:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800034a:	4b17      	ldr	r3, [pc, #92]	@ (80003a8 <MX_ADC1_Init+0xcc>)
 800034c:	2200      	movs	r2, #0
 800034e:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8000350:	4b15      	ldr	r3, [pc, #84]	@ (80003a8 <MX_ADC1_Init+0xcc>)
 8000352:	2200      	movs	r2, #0
 8000354:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8000356:	4b14      	ldr	r3, [pc, #80]	@ (80003a8 <MX_ADC1_Init+0xcc>)
 8000358:	2200      	movs	r2, #0
 800035a:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 800035c:	4b12      	ldr	r3, [pc, #72]	@ (80003a8 <MX_ADC1_Init+0xcc>)
 800035e:	223c      	movs	r2, #60	@ 0x3c
 8000360:	2100      	movs	r1, #0
 8000362:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000364:	4b10      	ldr	r3, [pc, #64]	@ (80003a8 <MX_ADC1_Init+0xcc>)
 8000366:	2200      	movs	r2, #0
 8000368:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800036a:	4b0f      	ldr	r3, [pc, #60]	@ (80003a8 <MX_ADC1_Init+0xcc>)
 800036c:	0018      	movs	r0, r3
 800036e:	f001 f81f 	bl	80013b0 <HAL_ADC_Init>
 8000372:	1e03      	subs	r3, r0, #0
 8000374:	d001      	beq.n	800037a <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 8000376:	f000 faca 	bl	800090e <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800037a:	1d3b      	adds	r3, r7, #4
 800037c:	2201      	movs	r2, #1
 800037e:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000380:	1d3b      	adds	r3, r7, #4
 8000382:	2200      	movs	r2, #0
 8000384:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8000386:	1d3b      	adds	r3, r7, #4
 8000388:	2200      	movs	r2, #0
 800038a:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800038c:	1d3a      	adds	r2, r7, #4
 800038e:	4b06      	ldr	r3, [pc, #24]	@ (80003a8 <MX_ADC1_Init+0xcc>)
 8000390:	0011      	movs	r1, r2
 8000392:	0018      	movs	r0, r3
 8000394:	f001 fae4 	bl	8001960 <HAL_ADC_ConfigChannel>
 8000398:	1e03      	subs	r3, r0, #0
 800039a:	d001      	beq.n	80003a0 <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 800039c:	f000 fab7 	bl	800090e <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80003a0:	46c0      	nop			@ (mov r8, r8)
 80003a2:	46bd      	mov	sp, r7
 80003a4:	b004      	add	sp, #16
 80003a6:	bd80      	pop	{r7, pc}
 80003a8:	20000028 	.word	0x20000028
 80003ac:	40012400 	.word	0x40012400

080003b0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80003b0:	b590      	push	{r4, r7, lr}
 80003b2:	b08b      	sub	sp, #44	@ 0x2c
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003b8:	2414      	movs	r4, #20
 80003ba:	193b      	adds	r3, r7, r4
 80003bc:	0018      	movs	r0, r3
 80003be:	2314      	movs	r3, #20
 80003c0:	001a      	movs	r2, r3
 80003c2:	2100      	movs	r1, #0
 80003c4:	f004 f836 	bl	8004434 <memset>
  if(adcHandle->Instance==ADC1)
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	4a29      	ldr	r2, [pc, #164]	@ (8000474 <HAL_ADC_MspInit+0xc4>)
 80003ce:	4293      	cmp	r3, r2
 80003d0:	d14c      	bne.n	800046c <HAL_ADC_MspInit+0xbc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80003d2:	4b29      	ldr	r3, [pc, #164]	@ (8000478 <HAL_ADC_MspInit+0xc8>)
 80003d4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80003d6:	4b28      	ldr	r3, [pc, #160]	@ (8000478 <HAL_ADC_MspInit+0xc8>)
 80003d8:	2180      	movs	r1, #128	@ 0x80
 80003da:	0349      	lsls	r1, r1, #13
 80003dc:	430a      	orrs	r2, r1
 80003de:	641a      	str	r2, [r3, #64]	@ 0x40
 80003e0:	4b25      	ldr	r3, [pc, #148]	@ (8000478 <HAL_ADC_MspInit+0xc8>)
 80003e2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80003e4:	2380      	movs	r3, #128	@ 0x80
 80003e6:	035b      	lsls	r3, r3, #13
 80003e8:	4013      	ands	r3, r2
 80003ea:	613b      	str	r3, [r7, #16]
 80003ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80003ee:	4b22      	ldr	r3, [pc, #136]	@ (8000478 <HAL_ADC_MspInit+0xc8>)
 80003f0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80003f2:	4b21      	ldr	r3, [pc, #132]	@ (8000478 <HAL_ADC_MspInit+0xc8>)
 80003f4:	2101      	movs	r1, #1
 80003f6:	430a      	orrs	r2, r1
 80003f8:	635a      	str	r2, [r3, #52]	@ 0x34
 80003fa:	4b1f      	ldr	r3, [pc, #124]	@ (8000478 <HAL_ADC_MspInit+0xc8>)
 80003fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80003fe:	2201      	movs	r2, #1
 8000400:	4013      	ands	r3, r2
 8000402:	60fb      	str	r3, [r7, #12]
 8000404:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000406:	4b1c      	ldr	r3, [pc, #112]	@ (8000478 <HAL_ADC_MspInit+0xc8>)
 8000408:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800040a:	4b1b      	ldr	r3, [pc, #108]	@ (8000478 <HAL_ADC_MspInit+0xc8>)
 800040c:	2102      	movs	r1, #2
 800040e:	430a      	orrs	r2, r1
 8000410:	635a      	str	r2, [r3, #52]	@ 0x34
 8000412:	4b19      	ldr	r3, [pc, #100]	@ (8000478 <HAL_ADC_MspInit+0xc8>)
 8000414:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000416:	2202      	movs	r2, #2
 8000418:	4013      	ands	r3, r2
 800041a:	60bb      	str	r3, [r7, #8]
 800041c:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN0
    PB2     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = VBOOST_FDBK_Pin;
 800041e:	193b      	adds	r3, r7, r4
 8000420:	2201      	movs	r2, #1
 8000422:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000424:	193b      	adds	r3, r7, r4
 8000426:	2203      	movs	r2, #3
 8000428:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800042a:	193b      	adds	r3, r7, r4
 800042c:	2200      	movs	r2, #0
 800042e:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(VBOOST_FDBK_GPIO_Port, &GPIO_InitStruct);
 8000430:	193a      	adds	r2, r7, r4
 8000432:	23a0      	movs	r3, #160	@ 0xa0
 8000434:	05db      	lsls	r3, r3, #23
 8000436:	0011      	movs	r1, r2
 8000438:	0018      	movs	r0, r3
 800043a:	f001 fd67 	bl	8001f0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = NFC_VOUT_SENSE_Pin;
 800043e:	193b      	adds	r3, r7, r4
 8000440:	2204      	movs	r2, #4
 8000442:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000444:	193b      	adds	r3, r7, r4
 8000446:	2203      	movs	r2, #3
 8000448:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800044a:	193b      	adds	r3, r7, r4
 800044c:	2200      	movs	r2, #0
 800044e:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(NFC_VOUT_SENSE_GPIO_Port, &GPIO_InitStruct);
 8000450:	193b      	adds	r3, r7, r4
 8000452:	4a0a      	ldr	r2, [pc, #40]	@ (800047c <HAL_ADC_MspInit+0xcc>)
 8000454:	0019      	movs	r1, r3
 8000456:	0010      	movs	r0, r2
 8000458:	f001 fd58 	bl	8001f0c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 800045c:	2200      	movs	r2, #0
 800045e:	2100      	movs	r1, #0
 8000460:	200c      	movs	r0, #12
 8000462:	f001 fd21 	bl	8001ea8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8000466:	200c      	movs	r0, #12
 8000468:	f001 fd33 	bl	8001ed2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800046c:	46c0      	nop			@ (mov r8, r8)
 800046e:	46bd      	mov	sp, r7
 8000470:	b00b      	add	sp, #44	@ 0x2c
 8000472:	bd90      	pop	{r4, r7, pc}
 8000474:	40012400 	.word	0x40012400
 8000478:	40021000 	.word	0x40021000
 800047c:	50000400 	.word	0x50000400

08000480 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8000480:	b590      	push	{r4, r7, lr}
 8000482:	b08b      	sub	sp, #44	@ 0x2c
 8000484:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000486:	2414      	movs	r4, #20
 8000488:	193b      	adds	r3, r7, r4
 800048a:	0018      	movs	r0, r3
 800048c:	2314      	movs	r3, #20
 800048e:	001a      	movs	r2, r3
 8000490:	2100      	movs	r1, #0
 8000492:	f003 ffcf 	bl	8004434 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000496:	4b74      	ldr	r3, [pc, #464]	@ (8000668 <MX_GPIO_Init+0x1e8>)
 8000498:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800049a:	4b73      	ldr	r3, [pc, #460]	@ (8000668 <MX_GPIO_Init+0x1e8>)
 800049c:	2104      	movs	r1, #4
 800049e:	430a      	orrs	r2, r1
 80004a0:	635a      	str	r2, [r3, #52]	@ 0x34
 80004a2:	4b71      	ldr	r3, [pc, #452]	@ (8000668 <MX_GPIO_Init+0x1e8>)
 80004a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80004a6:	2204      	movs	r2, #4
 80004a8:	4013      	ands	r3, r2
 80004aa:	613b      	str	r3, [r7, #16]
 80004ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80004ae:	4b6e      	ldr	r3, [pc, #440]	@ (8000668 <MX_GPIO_Init+0x1e8>)
 80004b0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80004b2:	4b6d      	ldr	r3, [pc, #436]	@ (8000668 <MX_GPIO_Init+0x1e8>)
 80004b4:	2120      	movs	r1, #32
 80004b6:	430a      	orrs	r2, r1
 80004b8:	635a      	str	r2, [r3, #52]	@ 0x34
 80004ba:	4b6b      	ldr	r3, [pc, #428]	@ (8000668 <MX_GPIO_Init+0x1e8>)
 80004bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80004be:	2220      	movs	r2, #32
 80004c0:	4013      	ands	r3, r2
 80004c2:	60fb      	str	r3, [r7, #12]
 80004c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004c6:	4b68      	ldr	r3, [pc, #416]	@ (8000668 <MX_GPIO_Init+0x1e8>)
 80004c8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80004ca:	4b67      	ldr	r3, [pc, #412]	@ (8000668 <MX_GPIO_Init+0x1e8>)
 80004cc:	2101      	movs	r1, #1
 80004ce:	430a      	orrs	r2, r1
 80004d0:	635a      	str	r2, [r3, #52]	@ 0x34
 80004d2:	4b65      	ldr	r3, [pc, #404]	@ (8000668 <MX_GPIO_Init+0x1e8>)
 80004d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80004d6:	2201      	movs	r2, #1
 80004d8:	4013      	ands	r3, r2
 80004da:	60bb      	str	r3, [r7, #8]
 80004dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004de:	4b62      	ldr	r3, [pc, #392]	@ (8000668 <MX_GPIO_Init+0x1e8>)
 80004e0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80004e2:	4b61      	ldr	r3, [pc, #388]	@ (8000668 <MX_GPIO_Init+0x1e8>)
 80004e4:	2102      	movs	r1, #2
 80004e6:	430a      	orrs	r2, r1
 80004e8:	635a      	str	r2, [r3, #52]	@ 0x34
 80004ea:	4b5f      	ldr	r3, [pc, #380]	@ (8000668 <MX_GPIO_Init+0x1e8>)
 80004ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80004ee:	2202      	movs	r2, #2
 80004f0:	4013      	ands	r3, r2
 80004f2:	607b      	str	r3, [r7, #4]
 80004f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80004f6:	4b5c      	ldr	r3, [pc, #368]	@ (8000668 <MX_GPIO_Init+0x1e8>)
 80004f8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80004fa:	4b5b      	ldr	r3, [pc, #364]	@ (8000668 <MX_GPIO_Init+0x1e8>)
 80004fc:	2108      	movs	r1, #8
 80004fe:	430a      	orrs	r2, r1
 8000500:	635a      	str	r2, [r3, #52]	@ 0x34
 8000502:	4b59      	ldr	r3, [pc, #356]	@ (8000668 <MX_GPIO_Init+0x1e8>)
 8000504:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000506:	2208      	movs	r2, #8
 8000508:	4013      	ands	r3, r2
 800050a:	603b      	str	r3, [r7, #0]
 800050c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, VBOOST_ENABLE_Pin|LED_RED_Pin|LED_YELLOW_Pin|LED_GREEN_Pin
 800050e:	4957      	ldr	r1, [pc, #348]	@ (800066c <MX_GPIO_Init+0x1ec>)
 8000510:	23a0      	movs	r3, #160	@ 0xa0
 8000512:	05db      	lsls	r3, r3, #23
 8000514:	2200      	movs	r2, #0
 8000516:	0018      	movs	r0, r3
 8000518:	f001 fe5c 	bl	80021d4 <HAL_GPIO_WritePin>
                          |CHARGE_EN_Pin|BATTERY_ENABLE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NFC_POWER_ENABLE_GPIO_Port, NFC_POWER_ENABLE_Pin, GPIO_PIN_RESET);
 800051c:	4b54      	ldr	r3, [pc, #336]	@ (8000670 <MX_GPIO_Init+0x1f0>)
 800051e:	2200      	movs	r2, #0
 8000520:	2140      	movs	r1, #64	@ 0x40
 8000522:	0018      	movs	r0, r3
 8000524:	f001 fe56 	bl	80021d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : USER_BUTTON_Pin BASE_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin|BASE_BUTTON_Pin;
 8000528:	193b      	adds	r3, r7, r4
 800052a:	22c0      	movs	r2, #192	@ 0xc0
 800052c:	01d2      	lsls	r2, r2, #7
 800052e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000530:	193b      	adds	r3, r7, r4
 8000532:	2200      	movs	r2, #0
 8000534:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000536:	193b      	adds	r3, r7, r4
 8000538:	2200      	movs	r2, #0
 800053a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800053c:	193b      	adds	r3, r7, r4
 800053e:	4a4d      	ldr	r2, [pc, #308]	@ (8000674 <MX_GPIO_Init+0x1f4>)
 8000540:	0019      	movs	r1, r3
 8000542:	0010      	movs	r0, r2
 8000544:	f001 fce2 	bl	8001f0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC15 PC6 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_6|GPIO_PIN_7;
 8000548:	193b      	adds	r3, r7, r4
 800054a:	4a4b      	ldr	r2, [pc, #300]	@ (8000678 <MX_GPIO_Init+0x1f8>)
 800054c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800054e:	193b      	adds	r3, r7, r4
 8000550:	2203      	movs	r2, #3
 8000552:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000554:	193b      	adds	r3, r7, r4
 8000556:	2200      	movs	r2, #0
 8000558:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800055a:	193b      	adds	r3, r7, r4
 800055c:	4a45      	ldr	r2, [pc, #276]	@ (8000674 <MX_GPIO_Init+0x1f4>)
 800055e:	0019      	movs	r1, r3
 8000560:	0010      	movs	r0, r2
 8000562:	f001 fcd3 	bl	8001f0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000566:	193b      	adds	r3, r7, r4
 8000568:	2203      	movs	r2, #3
 800056a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800056c:	193b      	adds	r3, r7, r4
 800056e:	2203      	movs	r2, #3
 8000570:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000572:	193b      	adds	r3, r7, r4
 8000574:	2200      	movs	r2, #0
 8000576:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000578:	193b      	adds	r3, r7, r4
 800057a:	4a40      	ldr	r2, [pc, #256]	@ (800067c <MX_GPIO_Init+0x1fc>)
 800057c:	0019      	movs	r1, r3
 800057e:	0010      	movs	r0, r2
 8000580:	f001 fcc4 	bl	8001f0c <HAL_GPIO_Init>

  /*Configure GPIO pins : VBOOST_ENABLE_Pin LED_RED_Pin LED_YELLOW_Pin LED_GREEN_Pin
                           CHARGE_EN_Pin BATTERY_ENABLE_Pin */
  GPIO_InitStruct.Pin = VBOOST_ENABLE_Pin|LED_RED_Pin|LED_YELLOW_Pin|LED_GREEN_Pin
 8000584:	193b      	adds	r3, r7, r4
 8000586:	4a39      	ldr	r2, [pc, #228]	@ (800066c <MX_GPIO_Init+0x1ec>)
 8000588:	601a      	str	r2, [r3, #0]
                          |CHARGE_EN_Pin|BATTERY_ENABLE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800058a:	193b      	adds	r3, r7, r4
 800058c:	2201      	movs	r2, #1
 800058e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000590:	193b      	adds	r3, r7, r4
 8000592:	2200      	movs	r2, #0
 8000594:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000596:	193b      	adds	r3, r7, r4
 8000598:	2200      	movs	r2, #0
 800059a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800059c:	193a      	adds	r2, r7, r4
 800059e:	23a0      	movs	r3, #160	@ 0xa0
 80005a0:	05db      	lsls	r3, r3, #23
 80005a2:	0011      	movs	r1, r2
 80005a4:	0018      	movs	r0, r3
 80005a6:	f001 fcb1 	bl	8001f0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA7 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_12;
 80005aa:	193b      	adds	r3, r7, r4
 80005ac:	2284      	movs	r2, #132	@ 0x84
 80005ae:	0152      	lsls	r2, r2, #5
 80005b0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005b2:	193b      	adds	r3, r7, r4
 80005b4:	2203      	movs	r2, #3
 80005b6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b8:	193b      	adds	r3, r7, r4
 80005ba:	2200      	movs	r2, #0
 80005bc:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005be:	193a      	adds	r2, r7, r4
 80005c0:	23a0      	movs	r3, #160	@ 0xa0
 80005c2:	05db      	lsls	r3, r3, #23
 80005c4:	0011      	movs	r1, r2
 80005c6:	0018      	movs	r0, r3
 80005c8:	f001 fca0 	bl	8001f0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB11 PB12 PB13
                           PB14 PB15 PB3 PB4
                           PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 80005cc:	193b      	adds	r3, r7, r4
 80005ce:	4a2c      	ldr	r2, [pc, #176]	@ (8000680 <MX_GPIO_Init+0x200>)
 80005d0:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4
                          |GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005d2:	193b      	adds	r3, r7, r4
 80005d4:	2203      	movs	r2, #3
 80005d6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d8:	193b      	adds	r3, r7, r4
 80005da:	2200      	movs	r2, #0
 80005dc:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005de:	193b      	adds	r3, r7, r4
 80005e0:	4a23      	ldr	r2, [pc, #140]	@ (8000670 <MX_GPIO_Init+0x1f0>)
 80005e2:	0019      	movs	r1, r3
 80005e4:	0010      	movs	r0, r2
 80005e6:	f001 fc91 	bl	8001f0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD2 PD3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80005ea:	193b      	adds	r3, r7, r4
 80005ec:	220f      	movs	r2, #15
 80005ee:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005f0:	193b      	adds	r3, r7, r4
 80005f2:	2203      	movs	r2, #3
 80005f4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f6:	193b      	adds	r3, r7, r4
 80005f8:	2200      	movs	r2, #0
 80005fa:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80005fc:	193b      	adds	r3, r7, r4
 80005fe:	4a21      	ldr	r2, [pc, #132]	@ (8000684 <MX_GPIO_Init+0x204>)
 8000600:	0019      	movs	r1, r3
 8000602:	0010      	movs	r0, r2
 8000604:	f001 fc82 	bl	8001f0c <HAL_GPIO_Init>

  /*Configure GPIO pin : NFC_POWER_ENABLE_Pin */
  GPIO_InitStruct.Pin = NFC_POWER_ENABLE_Pin;
 8000608:	193b      	adds	r3, r7, r4
 800060a:	2240      	movs	r2, #64	@ 0x40
 800060c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800060e:	193b      	adds	r3, r7, r4
 8000610:	2201      	movs	r2, #1
 8000612:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000614:	193b      	adds	r3, r7, r4
 8000616:	2200      	movs	r2, #0
 8000618:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800061a:	193b      	adds	r3, r7, r4
 800061c:	2200      	movs	r2, #0
 800061e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(NFC_POWER_ENABLE_GPIO_Port, &GPIO_InitStruct);
 8000620:	193b      	adds	r3, r7, r4
 8000622:	4a13      	ldr	r2, [pc, #76]	@ (8000670 <MX_GPIO_Init+0x1f0>)
 8000624:	0019      	movs	r1, r3
 8000626:	0010      	movs	r0, r2
 8000628:	f001 fc70 	bl	8001f0c <HAL_GPIO_Init>

  /*Configure GPIO pin : NFC_FD_INT_Pin */
  GPIO_InitStruct.Pin = NFC_FD_INT_Pin;
 800062c:	0021      	movs	r1, r4
 800062e:	187b      	adds	r3, r7, r1
 8000630:	2280      	movs	r2, #128	@ 0x80
 8000632:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000634:	187b      	adds	r3, r7, r1
 8000636:	2288      	movs	r2, #136	@ 0x88
 8000638:	0352      	lsls	r2, r2, #13
 800063a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800063c:	187b      	adds	r3, r7, r1
 800063e:	2200      	movs	r2, #0
 8000640:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(NFC_FD_INT_GPIO_Port, &GPIO_InitStruct);
 8000642:	187b      	adds	r3, r7, r1
 8000644:	4a0a      	ldr	r2, [pc, #40]	@ (8000670 <MX_GPIO_Init+0x1f0>)
 8000646:	0019      	movs	r1, r3
 8000648:	0010      	movs	r0, r2
 800064a:	f001 fc5f 	bl	8001f0c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 800064e:	2200      	movs	r2, #0
 8000650:	2100      	movs	r1, #0
 8000652:	2007      	movs	r0, #7
 8000654:	f001 fc28 	bl	8001ea8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000658:	2007      	movs	r0, #7
 800065a:	f001 fc3a 	bl	8001ed2 <HAL_NVIC_EnableIRQ>

}
 800065e:	46c0      	nop			@ (mov r8, r8)
 8000660:	46bd      	mov	sp, r7
 8000662:	b00b      	add	sp, #44	@ 0x2c
 8000664:	bd90      	pop	{r4, r7, pc}
 8000666:	46c0      	nop			@ (mov r8, r8)
 8000668:	40021000 	.word	0x40021000
 800066c:	0000883c 	.word	0x0000883c
 8000670:	50000400 	.word	0x50000400
 8000674:	50000800 	.word	0x50000800
 8000678:	000080c0 	.word	0x000080c0
 800067c:	50001400 	.word	0x50001400
 8000680:	0000f83a 	.word	0x0000f83a
 8000684:	50000c00 	.word	0x50000c00

08000688 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800068c:	4b1b      	ldr	r3, [pc, #108]	@ (80006fc <MX_I2C1_Init+0x74>)
 800068e:	4a1c      	ldr	r2, [pc, #112]	@ (8000700 <MX_I2C1_Init+0x78>)
 8000690:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10B17DB5;
 8000692:	4b1a      	ldr	r3, [pc, #104]	@ (80006fc <MX_I2C1_Init+0x74>)
 8000694:	4a1b      	ldr	r2, [pc, #108]	@ (8000704 <MX_I2C1_Init+0x7c>)
 8000696:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000698:	4b18      	ldr	r3, [pc, #96]	@ (80006fc <MX_I2C1_Init+0x74>)
 800069a:	2200      	movs	r2, #0
 800069c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800069e:	4b17      	ldr	r3, [pc, #92]	@ (80006fc <MX_I2C1_Init+0x74>)
 80006a0:	2201      	movs	r2, #1
 80006a2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006a4:	4b15      	ldr	r3, [pc, #84]	@ (80006fc <MX_I2C1_Init+0x74>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80006aa:	4b14      	ldr	r3, [pc, #80]	@ (80006fc <MX_I2C1_Init+0x74>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80006b0:	4b12      	ldr	r3, [pc, #72]	@ (80006fc <MX_I2C1_Init+0x74>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006b6:	4b11      	ldr	r3, [pc, #68]	@ (80006fc <MX_I2C1_Init+0x74>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006bc:	4b0f      	ldr	r3, [pc, #60]	@ (80006fc <MX_I2C1_Init+0x74>)
 80006be:	2200      	movs	r2, #0
 80006c0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006c2:	4b0e      	ldr	r3, [pc, #56]	@ (80006fc <MX_I2C1_Init+0x74>)
 80006c4:	0018      	movs	r0, r3
 80006c6:	f001 fde1 	bl	800228c <HAL_I2C_Init>
 80006ca:	1e03      	subs	r3, r0, #0
 80006cc:	d001      	beq.n	80006d2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80006ce:	f000 f91e 	bl	800090e <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80006d2:	4b0a      	ldr	r3, [pc, #40]	@ (80006fc <MX_I2C1_Init+0x74>)
 80006d4:	2100      	movs	r1, #0
 80006d6:	0018      	movs	r0, r3
 80006d8:	f001 fe7e 	bl	80023d8 <HAL_I2CEx_ConfigAnalogFilter>
 80006dc:	1e03      	subs	r3, r0, #0
 80006de:	d001      	beq.n	80006e4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80006e0:	f000 f915 	bl	800090e <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80006e4:	4b05      	ldr	r3, [pc, #20]	@ (80006fc <MX_I2C1_Init+0x74>)
 80006e6:	2100      	movs	r1, #0
 80006e8:	0018      	movs	r0, r3
 80006ea:	f001 fec1 	bl	8002470 <HAL_I2CEx_ConfigDigitalFilter>
 80006ee:	1e03      	subs	r3, r0, #0
 80006f0:	d001      	beq.n	80006f6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80006f2:	f000 f90c 	bl	800090e <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006f6:	46c0      	nop			@ (mov r8, r8)
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	2000008c 	.word	0x2000008c
 8000700:	40005400 	.word	0x40005400
 8000704:	10b17db5 	.word	0x10b17db5

08000708 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000708:	b590      	push	{r4, r7, lr}
 800070a:	b091      	sub	sp, #68	@ 0x44
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000710:	232c      	movs	r3, #44	@ 0x2c
 8000712:	18fb      	adds	r3, r7, r3
 8000714:	0018      	movs	r0, r3
 8000716:	2314      	movs	r3, #20
 8000718:	001a      	movs	r2, r3
 800071a:	2100      	movs	r1, #0
 800071c:	f003 fe8a 	bl	8004434 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000720:	2410      	movs	r4, #16
 8000722:	193b      	adds	r3, r7, r4
 8000724:	0018      	movs	r0, r3
 8000726:	231c      	movs	r3, #28
 8000728:	001a      	movs	r2, r3
 800072a:	2100      	movs	r1, #0
 800072c:	f003 fe82 	bl	8004434 <memset>
  if(i2cHandle->Instance==I2C1)
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	4a22      	ldr	r2, [pc, #136]	@ (80007c0 <HAL_I2C_MspInit+0xb8>)
 8000736:	4293      	cmp	r3, r2
 8000738:	d13e      	bne.n	80007b8 <HAL_I2C_MspInit+0xb0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800073a:	193b      	adds	r3, r7, r4
 800073c:	2220      	movs	r2, #32
 800073e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000740:	193b      	adds	r3, r7, r4
 8000742:	2200      	movs	r2, #0
 8000744:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000746:	193b      	adds	r3, r7, r4
 8000748:	0018      	movs	r0, r3
 800074a:	f002 fc19 	bl	8002f80 <HAL_RCCEx_PeriphCLKConfig>
 800074e:	1e03      	subs	r3, r0, #0
 8000750:	d001      	beq.n	8000756 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000752:	f000 f8dc 	bl	800090e <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000756:	4b1b      	ldr	r3, [pc, #108]	@ (80007c4 <HAL_I2C_MspInit+0xbc>)
 8000758:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800075a:	4b1a      	ldr	r3, [pc, #104]	@ (80007c4 <HAL_I2C_MspInit+0xbc>)
 800075c:	2102      	movs	r1, #2
 800075e:	430a      	orrs	r2, r1
 8000760:	635a      	str	r2, [r3, #52]	@ 0x34
 8000762:	4b18      	ldr	r3, [pc, #96]	@ (80007c4 <HAL_I2C_MspInit+0xbc>)
 8000764:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000766:	2202      	movs	r2, #2
 8000768:	4013      	ands	r3, r2
 800076a:	60fb      	str	r3, [r7, #12]
 800076c:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = NFC_I2C_SCL_Pin|NFC_I2C_SDA_Pin;
 800076e:	212c      	movs	r1, #44	@ 0x2c
 8000770:	187b      	adds	r3, r7, r1
 8000772:	22c0      	movs	r2, #192	@ 0xc0
 8000774:	0092      	lsls	r2, r2, #2
 8000776:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000778:	187b      	adds	r3, r7, r1
 800077a:	2212      	movs	r2, #18
 800077c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077e:	187b      	adds	r3, r7, r1
 8000780:	2200      	movs	r2, #0
 8000782:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000784:	187b      	adds	r3, r7, r1
 8000786:	2200      	movs	r2, #0
 8000788:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 800078a:	187b      	adds	r3, r7, r1
 800078c:	2206      	movs	r2, #6
 800078e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000790:	187b      	adds	r3, r7, r1
 8000792:	4a0d      	ldr	r2, [pc, #52]	@ (80007c8 <HAL_I2C_MspInit+0xc0>)
 8000794:	0019      	movs	r1, r3
 8000796:	0010      	movs	r0, r2
 8000798:	f001 fbb8 	bl	8001f0c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800079c:	4b09      	ldr	r3, [pc, #36]	@ (80007c4 <HAL_I2C_MspInit+0xbc>)
 800079e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80007a0:	4b08      	ldr	r3, [pc, #32]	@ (80007c4 <HAL_I2C_MspInit+0xbc>)
 80007a2:	2180      	movs	r1, #128	@ 0x80
 80007a4:	0389      	lsls	r1, r1, #14
 80007a6:	430a      	orrs	r2, r1
 80007a8:	63da      	str	r2, [r3, #60]	@ 0x3c
 80007aa:	4b06      	ldr	r3, [pc, #24]	@ (80007c4 <HAL_I2C_MspInit+0xbc>)
 80007ac:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80007ae:	2380      	movs	r3, #128	@ 0x80
 80007b0:	039b      	lsls	r3, r3, #14
 80007b2:	4013      	ands	r3, r2
 80007b4:	60bb      	str	r3, [r7, #8]
 80007b6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80007b8:	46c0      	nop			@ (mov r8, r8)
 80007ba:	46bd      	mov	sp, r7
 80007bc:	b011      	add	sp, #68	@ 0x44
 80007be:	bd90      	pop	{r4, r7, pc}
 80007c0:	40005400 	.word	0x40005400
 80007c4:	40021000 	.word	0x40021000
 80007c8:	50000400 	.word	0x50000400

080007cc <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 80007d0:	4b0b      	ldr	r3, [pc, #44]	@ (8000800 <MX_IWDG_Init+0x34>)
 80007d2:	4a0c      	ldr	r2, [pc, #48]	@ (8000804 <MX_IWDG_Init+0x38>)
 80007d4:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
 80007d6:	4b0a      	ldr	r3, [pc, #40]	@ (8000800 <MX_IWDG_Init+0x34>)
 80007d8:	2200      	movs	r2, #0
 80007da:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 80007dc:	4b08      	ldr	r3, [pc, #32]	@ (8000800 <MX_IWDG_Init+0x34>)
 80007de:	4a0a      	ldr	r2, [pc, #40]	@ (8000808 <MX_IWDG_Init+0x3c>)
 80007e0:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 4095;
 80007e2:	4b07      	ldr	r3, [pc, #28]	@ (8000800 <MX_IWDG_Init+0x34>)
 80007e4:	4a08      	ldr	r2, [pc, #32]	@ (8000808 <MX_IWDG_Init+0x3c>)
 80007e6:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 80007e8:	4b05      	ldr	r3, [pc, #20]	@ (8000800 <MX_IWDG_Init+0x34>)
 80007ea:	0018      	movs	r0, r3
 80007ec:	f001 fe8c 	bl	8002508 <HAL_IWDG_Init>
 80007f0:	1e03      	subs	r3, r0, #0
 80007f2:	d001      	beq.n	80007f8 <MX_IWDG_Init+0x2c>
  {
    Error_Handler();
 80007f4:	f000 f88b 	bl	800090e <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 80007f8:	46c0      	nop			@ (mov r8, r8)
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	46c0      	nop			@ (mov r8, r8)
 8000800:	200000e0 	.word	0x200000e0
 8000804:	40003000 	.word	0x40003000
 8000808:	00000fff 	.word	0x00000fff

0800080c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000810:	f000 fc16 	bl	8001040 <HAL_Init>
 #endif

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000814:	f000 f81e 	bl	8000854 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
	hal_gpio_init();
 8000818:	f003 fc8c 	bl	8004134 <hal_gpio_init>

	MX_I2C1_Init();
 800081c:	f7ff ff34 	bl	8000688 <MX_I2C1_Init>

	MX_ADC1_Init();
 8000820:	f7ff fd5c 	bl	80002dc <MX_ADC1_Init>

	hal_timer_init();
 8000824:	f003 fcb0 	bl	8004188 <hal_timer_init>

	WptControllerInit();
 8000828:	f7ff fd52 	bl	80002d0 <WptControllerInit>
  MX_TIM15_Init();
  MX_USART3_UART_Init();
  MX_TIM6_Init();
  /* USER CODE BEGIN 2 */
#endif
  hal_watchdog_init(); // Initialize the the watch dog handle in submod-hal_generic
 800082c:	f003 fde0 	bl	80043f0 <hal_watchdog_init>

  // Turn on the red LED to indicate that we have power but we are not authorized.
  while (1)
  {
	  /* reset the WDT */
	  hal_watchdog_reset();
 8000830:	f003 fdf0 	bl	8004414 <hal_watchdog_reset>

      TickSinceLastExecution = hal_timer_get_ticks_since_count(LastExecutionCount);
 8000834:	4b05      	ldr	r3, [pc, #20]	@ (800084c <main+0x40>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	0018      	movs	r0, r3
 800083a:	f003 fc8a 	bl	8004152 <hal_timer_get_ticks_since_count>
 800083e:	0002      	movs	r2, r0
 8000840:	4b03      	ldr	r3, [pc, #12]	@ (8000850 <main+0x44>)
 8000842:	601a      	str	r2, [r3, #0]
	  }

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  hal_watchdog_reset();
 8000844:	f003 fde6 	bl	8004414 <hal_watchdog_reset>
	  hal_watchdog_reset();
 8000848:	e7f2      	b.n	8000830 <main+0x24>
 800084a:	46c0      	nop			@ (mov r8, r8)
 800084c:	200000f0 	.word	0x200000f0
 8000850:	200000f4 	.word	0x200000f4

08000854 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000854:	b590      	push	{r4, r7, lr}
 8000856:	b093      	sub	sp, #76	@ 0x4c
 8000858:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800085a:	2414      	movs	r4, #20
 800085c:	193b      	adds	r3, r7, r4
 800085e:	0018      	movs	r0, r3
 8000860:	2334      	movs	r3, #52	@ 0x34
 8000862:	001a      	movs	r2, r3
 8000864:	2100      	movs	r1, #0
 8000866:	f003 fde5 	bl	8004434 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800086a:	1d3b      	adds	r3, r7, #4
 800086c:	0018      	movs	r0, r3
 800086e:	2310      	movs	r3, #16
 8000870:	001a      	movs	r2, r3
 8000872:	2100      	movs	r1, #0
 8000874:	f003 fdde 	bl	8004434 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000878:	2380      	movs	r3, #128	@ 0x80
 800087a:	009b      	lsls	r3, r3, #2
 800087c:	0018      	movs	r0, r3
 800087e:	f001 fea5 	bl	80025cc <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000882:	193b      	adds	r3, r7, r4
 8000884:	220a      	movs	r2, #10
 8000886:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000888:	193b      	adds	r3, r7, r4
 800088a:	2280      	movs	r2, #128	@ 0x80
 800088c:	0052      	lsls	r2, r2, #1
 800088e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000890:	0021      	movs	r1, r4
 8000892:	187b      	adds	r3, r7, r1
 8000894:	2200      	movs	r2, #0
 8000896:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000898:	187b      	adds	r3, r7, r1
 800089a:	2240      	movs	r2, #64	@ 0x40
 800089c:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800089e:	187b      	adds	r3, r7, r1
 80008a0:	2201      	movs	r2, #1
 80008a2:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008a4:	187b      	adds	r3, r7, r1
 80008a6:	2202      	movs	r2, #2
 80008a8:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008aa:	187b      	adds	r3, r7, r1
 80008ac:	2202      	movs	r2, #2
 80008ae:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80008b0:	187b      	adds	r3, r7, r1
 80008b2:	2200      	movs	r2, #0
 80008b4:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 80008b6:	187b      	adds	r3, r7, r1
 80008b8:	2208      	movs	r2, #8
 80008ba:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008bc:	187b      	adds	r3, r7, r1
 80008be:	2280      	movs	r2, #128	@ 0x80
 80008c0:	0292      	lsls	r2, r2, #10
 80008c2:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80008c4:	187b      	adds	r3, r7, r1
 80008c6:	2280      	movs	r2, #128	@ 0x80
 80008c8:	0592      	lsls	r2, r2, #22
 80008ca:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008cc:	187b      	adds	r3, r7, r1
 80008ce:	0018      	movs	r0, r3
 80008d0:	f001 febc 	bl	800264c <HAL_RCC_OscConfig>
 80008d4:	1e03      	subs	r3, r0, #0
 80008d6:	d001      	beq.n	80008dc <SystemClock_Config+0x88>
  {
    Error_Handler();
 80008d8:	f000 f819 	bl	800090e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008dc:	1d3b      	adds	r3, r7, #4
 80008de:	2207      	movs	r2, #7
 80008e0:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008e2:	1d3b      	adds	r3, r7, #4
 80008e4:	2202      	movs	r2, #2
 80008e6:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008e8:	1d3b      	adds	r3, r7, #4
 80008ea:	2200      	movs	r2, #0
 80008ec:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008ee:	1d3b      	adds	r3, r7, #4
 80008f0:	2200      	movs	r2, #0
 80008f2:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80008f4:	1d3b      	adds	r3, r7, #4
 80008f6:	2102      	movs	r1, #2
 80008f8:	0018      	movs	r0, r3
 80008fa:	f002 f9b7 	bl	8002c6c <HAL_RCC_ClockConfig>
 80008fe:	1e03      	subs	r3, r0, #0
 8000900:	d001      	beq.n	8000906 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000902:	f000 f804 	bl	800090e <Error_Handler>
  }
}
 8000906:	46c0      	nop			@ (mov r8, r8)
 8000908:	46bd      	mov	sp, r7
 800090a:	b013      	add	sp, #76	@ 0x4c
 800090c:	bd90      	pop	{r4, r7, pc}

0800090e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800090e:	b580      	push	{r7, lr}
 8000910:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000912:	b672      	cpsid	i
}
 8000914:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000916:	46c0      	nop			@ (mov r8, r8)
 8000918:	e7fd      	b.n	8000916 <Error_Handler+0x8>
	...

0800091c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b082      	sub	sp, #8
 8000920:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000922:	4b11      	ldr	r3, [pc, #68]	@ (8000968 <HAL_MspInit+0x4c>)
 8000924:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000926:	4b10      	ldr	r3, [pc, #64]	@ (8000968 <HAL_MspInit+0x4c>)
 8000928:	2101      	movs	r1, #1
 800092a:	430a      	orrs	r2, r1
 800092c:	641a      	str	r2, [r3, #64]	@ 0x40
 800092e:	4b0e      	ldr	r3, [pc, #56]	@ (8000968 <HAL_MspInit+0x4c>)
 8000930:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000932:	2201      	movs	r2, #1
 8000934:	4013      	ands	r3, r2
 8000936:	607b      	str	r3, [r7, #4]
 8000938:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800093a:	4b0b      	ldr	r3, [pc, #44]	@ (8000968 <HAL_MspInit+0x4c>)
 800093c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800093e:	4b0a      	ldr	r3, [pc, #40]	@ (8000968 <HAL_MspInit+0x4c>)
 8000940:	2180      	movs	r1, #128	@ 0x80
 8000942:	0549      	lsls	r1, r1, #21
 8000944:	430a      	orrs	r2, r1
 8000946:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000948:	4b07      	ldr	r3, [pc, #28]	@ (8000968 <HAL_MspInit+0x4c>)
 800094a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800094c:	2380      	movs	r3, #128	@ 0x80
 800094e:	055b      	lsls	r3, r3, #21
 8000950:	4013      	ands	r3, r2
 8000952:	603b      	str	r3, [r7, #0]
 8000954:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8000956:	23c0      	movs	r3, #192	@ 0xc0
 8000958:	00db      	lsls	r3, r3, #3
 800095a:	0018      	movs	r0, r3
 800095c:	f000 fbf6 	bl	800114c <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000960:	46c0      	nop			@ (mov r8, r8)
 8000962:	46bd      	mov	sp, r7
 8000964:	b002      	add	sp, #8
 8000966:	bd80      	pop	{r7, pc}
 8000968:	40021000 	.word	0x40021000

0800096c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000970:	46c0      	nop			@ (mov r8, r8)
 8000972:	e7fd      	b.n	8000970 <NMI_Handler+0x4>

08000974 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000978:	46c0      	nop			@ (mov r8, r8)
 800097a:	e7fd      	b.n	8000978 <HardFault_Handler+0x4>

0800097c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000980:	46c0      	nop			@ (mov r8, r8)
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}

08000986 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000986:	b580      	push	{r7, lr}
 8000988:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800098a:	46c0      	nop			@ (mov r8, r8)
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}

08000990 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000994:	f000 fbbe 	bl	8001114 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000998:	46c0      	nop			@ (mov r8, r8)
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}

0800099e <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 800099e:	b580      	push	{r7, lr}
 80009a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(NFC_FD_INT_Pin);
 80009a2:	2080      	movs	r0, #128	@ 0x80
 80009a4:	f001 fc34 	bl	8002210 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 80009a8:	46c0      	nop			@ (mov r8, r8)
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}
	...

080009b0 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 interrupt.
  */
void ADC1_IRQHandler(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80009b4:	4b03      	ldr	r3, [pc, #12]	@ (80009c4 <ADC1_IRQHandler+0x14>)
 80009b6:	0018      	movs	r0, r3
 80009b8:	f000 fea2 	bl	8001700 <HAL_ADC_IRQHandler>
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
  /* USER CODE BEGIN USART1_IRQn 1 */
#endif
  /* USER CODE END USART1_IRQn 1 */
}
 80009bc:	46c0      	nop			@ (mov r8, r8)
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	46c0      	nop			@ (mov r8, r8)
 80009c4:	20000028 	.word	0x20000028

080009c8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim15;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b09c      	sub	sp, #112	@ 0x70
 80009cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009ce:	2360      	movs	r3, #96	@ 0x60
 80009d0:	18fb      	adds	r3, r7, r3
 80009d2:	0018      	movs	r0, r3
 80009d4:	2310      	movs	r3, #16
 80009d6:	001a      	movs	r2, r3
 80009d8:	2100      	movs	r1, #0
 80009da:	f003 fd2b 	bl	8004434 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009de:	2354      	movs	r3, #84	@ 0x54
 80009e0:	18fb      	adds	r3, r7, r3
 80009e2:	0018      	movs	r0, r3
 80009e4:	230c      	movs	r3, #12
 80009e6:	001a      	movs	r2, r3
 80009e8:	2100      	movs	r1, #0
 80009ea:	f003 fd23 	bl	8004434 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009ee:	2338      	movs	r3, #56	@ 0x38
 80009f0:	18fb      	adds	r3, r7, r3
 80009f2:	0018      	movs	r0, r3
 80009f4:	231c      	movs	r3, #28
 80009f6:	001a      	movs	r2, r3
 80009f8:	2100      	movs	r1, #0
 80009fa:	f003 fd1b 	bl	8004434 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80009fe:	1d3b      	adds	r3, r7, #4
 8000a00:	0018      	movs	r0, r3
 8000a02:	2334      	movs	r3, #52	@ 0x34
 8000a04:	001a      	movs	r2, r3
 8000a06:	2100      	movs	r1, #0
 8000a08:	f003 fd14 	bl	8004434 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000a0c:	4b51      	ldr	r3, [pc, #324]	@ (8000b54 <MX_TIM1_Init+0x18c>)
 8000a0e:	4a52      	ldr	r2, [pc, #328]	@ (8000b58 <MX_TIM1_Init+0x190>)
 8000a10:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 640;
 8000a12:	4b50      	ldr	r3, [pc, #320]	@ (8000b54 <MX_TIM1_Init+0x18c>)
 8000a14:	22a0      	movs	r2, #160	@ 0xa0
 8000a16:	0092      	lsls	r2, r2, #2
 8000a18:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a1a:	4b4e      	ldr	r3, [pc, #312]	@ (8000b54 <MX_TIM1_Init+0x18c>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100;
 8000a20:	4b4c      	ldr	r3, [pc, #304]	@ (8000b54 <MX_TIM1_Init+0x18c>)
 8000a22:	2264      	movs	r2, #100	@ 0x64
 8000a24:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a26:	4b4b      	ldr	r3, [pc, #300]	@ (8000b54 <MX_TIM1_Init+0x18c>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000a2c:	4b49      	ldr	r3, [pc, #292]	@ (8000b54 <MX_TIM1_Init+0x18c>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a32:	4b48      	ldr	r3, [pc, #288]	@ (8000b54 <MX_TIM1_Init+0x18c>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000a38:	4b46      	ldr	r3, [pc, #280]	@ (8000b54 <MX_TIM1_Init+0x18c>)
 8000a3a:	0018      	movs	r0, r3
 8000a3c:	f002 fbd4 	bl	80031e8 <HAL_TIM_Base_Init>
 8000a40:	1e03      	subs	r3, r0, #0
 8000a42:	d001      	beq.n	8000a48 <MX_TIM1_Init+0x80>
  {
    Error_Handler();
 8000a44:	f7ff ff63 	bl	800090e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a48:	2160      	movs	r1, #96	@ 0x60
 8000a4a:	187b      	adds	r3, r7, r1
 8000a4c:	2280      	movs	r2, #128	@ 0x80
 8000a4e:	0152      	lsls	r2, r2, #5
 8000a50:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000a52:	187a      	adds	r2, r7, r1
 8000a54:	4b3f      	ldr	r3, [pc, #252]	@ (8000b54 <MX_TIM1_Init+0x18c>)
 8000a56:	0011      	movs	r1, r2
 8000a58:	0018      	movs	r0, r3
 8000a5a:	f002 fd75 	bl	8003548 <HAL_TIM_ConfigClockSource>
 8000a5e:	1e03      	subs	r3, r0, #0
 8000a60:	d001      	beq.n	8000a66 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8000a62:	f7ff ff54 	bl	800090e <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000a66:	4b3b      	ldr	r3, [pc, #236]	@ (8000b54 <MX_TIM1_Init+0x18c>)
 8000a68:	0018      	movs	r0, r3
 8000a6a:	f002 fc15 	bl	8003298 <HAL_TIM_PWM_Init>
 8000a6e:	1e03      	subs	r3, r0, #0
 8000a70:	d001      	beq.n	8000a76 <MX_TIM1_Init+0xae>
  {
    Error_Handler();
 8000a72:	f7ff ff4c 	bl	800090e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a76:	2154      	movs	r1, #84	@ 0x54
 8000a78:	187b      	adds	r3, r7, r1
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000a7e:	187b      	adds	r3, r7, r1
 8000a80:	2200      	movs	r2, #0
 8000a82:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a84:	187b      	adds	r3, r7, r1
 8000a86:	2200      	movs	r2, #0
 8000a88:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a8a:	187a      	adds	r2, r7, r1
 8000a8c:	4b31      	ldr	r3, [pc, #196]	@ (8000b54 <MX_TIM1_Init+0x18c>)
 8000a8e:	0011      	movs	r1, r2
 8000a90:	0018      	movs	r0, r3
 8000a92:	f003 fa13 	bl	8003ebc <HAL_TIMEx_MasterConfigSynchronization>
 8000a96:	1e03      	subs	r3, r0, #0
 8000a98:	d001      	beq.n	8000a9e <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8000a9a:	f7ff ff38 	bl	800090e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a9e:	2138      	movs	r1, #56	@ 0x38
 8000aa0:	187b      	adds	r3, r7, r1
 8000aa2:	2260      	movs	r2, #96	@ 0x60
 8000aa4:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 49;
 8000aa6:	187b      	adds	r3, r7, r1
 8000aa8:	2231      	movs	r2, #49	@ 0x31
 8000aaa:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000aac:	187b      	adds	r3, r7, r1
 8000aae:	2200      	movs	r2, #0
 8000ab0:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000ab2:	187b      	adds	r3, r7, r1
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ab8:	187b      	adds	r3, r7, r1
 8000aba:	2200      	movs	r2, #0
 8000abc:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000abe:	187b      	adds	r3, r7, r1
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000ac4:	187b      	adds	r3, r7, r1
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000aca:	1879      	adds	r1, r7, r1
 8000acc:	4b21      	ldr	r3, [pc, #132]	@ (8000b54 <MX_TIM1_Init+0x18c>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	0018      	movs	r0, r3
 8000ad2:	f002 fc39 	bl	8003348 <HAL_TIM_PWM_ConfigChannel>
 8000ad6:	1e03      	subs	r3, r0, #0
 8000ad8:	d001      	beq.n	8000ade <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8000ada:	f7ff ff18 	bl	800090e <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000ade:	1d3b      	adds	r3, r7, #4
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000ae4:	1d3b      	adds	r3, r7, #4
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000aea:	1d3b      	adds	r3, r7, #4
 8000aec:	2200      	movs	r2, #0
 8000aee:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000af0:	1d3b      	adds	r3, r7, #4
 8000af2:	2200      	movs	r2, #0
 8000af4:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000af6:	1d3b      	adds	r3, r7, #4
 8000af8:	2200      	movs	r2, #0
 8000afa:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000afc:	1d3b      	adds	r3, r7, #4
 8000afe:	2280      	movs	r2, #128	@ 0x80
 8000b00:	0192      	lsls	r2, r2, #6
 8000b02:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000b04:	1d3b      	adds	r3, r7, #4
 8000b06:	2200      	movs	r2, #0
 8000b08:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000b0a:	1d3b      	adds	r3, r7, #4
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000b10:	1d3b      	adds	r3, r7, #4
 8000b12:	2200      	movs	r2, #0
 8000b14:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000b16:	1d3b      	adds	r3, r7, #4
 8000b18:	2280      	movs	r2, #128	@ 0x80
 8000b1a:	0492      	lsls	r2, r2, #18
 8000b1c:	625a      	str	r2, [r3, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000b1e:	1d3b      	adds	r3, r7, #4
 8000b20:	2200      	movs	r2, #0
 8000b22:	629a      	str	r2, [r3, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000b24:	1d3b      	adds	r3, r7, #4
 8000b26:	2200      	movs	r2, #0
 8000b28:	62da      	str	r2, [r3, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000b2a:	1d3b      	adds	r3, r7, #4
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000b30:	1d3a      	adds	r2, r7, #4
 8000b32:	4b08      	ldr	r3, [pc, #32]	@ (8000b54 <MX_TIM1_Init+0x18c>)
 8000b34:	0011      	movs	r1, r2
 8000b36:	0018      	movs	r0, r3
 8000b38:	f003 fa28 	bl	8003f8c <HAL_TIMEx_ConfigBreakDeadTime>
 8000b3c:	1e03      	subs	r3, r0, #0
 8000b3e:	d001      	beq.n	8000b44 <MX_TIM1_Init+0x17c>
  {
    Error_Handler();
 8000b40:	f7ff fee5 	bl	800090e <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000b44:	4b03      	ldr	r3, [pc, #12]	@ (8000b54 <MX_TIM1_Init+0x18c>)
 8000b46:	0018      	movs	r0, r3
 8000b48:	f000 f9e4 	bl	8000f14 <HAL_TIM_MspPostInit>

}
 8000b4c:	46c0      	nop			@ (mov r8, r8)
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	b01c      	add	sp, #112	@ 0x70
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	200000f8 	.word	0x200000f8
 8000b58:	40012c00 	.word	0x40012c00

08000b5c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b08e      	sub	sp, #56	@ 0x38
 8000b60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b62:	2328      	movs	r3, #40	@ 0x28
 8000b64:	18fb      	adds	r3, r7, r3
 8000b66:	0018      	movs	r0, r3
 8000b68:	2310      	movs	r3, #16
 8000b6a:	001a      	movs	r2, r3
 8000b6c:	2100      	movs	r1, #0
 8000b6e:	f003 fc61 	bl	8004434 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b72:	231c      	movs	r3, #28
 8000b74:	18fb      	adds	r3, r7, r3
 8000b76:	0018      	movs	r0, r3
 8000b78:	230c      	movs	r3, #12
 8000b7a:	001a      	movs	r2, r3
 8000b7c:	2100      	movs	r1, #0
 8000b7e:	f003 fc59 	bl	8004434 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b82:	003b      	movs	r3, r7
 8000b84:	0018      	movs	r0, r3
 8000b86:	231c      	movs	r3, #28
 8000b88:	001a      	movs	r2, r3
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	f003 fc52 	bl	8004434 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000b90:	4b2f      	ldr	r3, [pc, #188]	@ (8000c50 <MX_TIM3_Init+0xf4>)
 8000b92:	4a30      	ldr	r2, [pc, #192]	@ (8000c54 <MX_TIM3_Init+0xf8>)
 8000b94:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000b96:	4b2e      	ldr	r3, [pc, #184]	@ (8000c50 <MX_TIM3_Init+0xf4>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b9c:	4b2c      	ldr	r3, [pc, #176]	@ (8000c50 <MX_TIM3_Init+0xf4>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000ba2:	4b2b      	ldr	r3, [pc, #172]	@ (8000c50 <MX_TIM3_Init+0xf4>)
 8000ba4:	4a2c      	ldr	r2, [pc, #176]	@ (8000c58 <MX_TIM3_Init+0xfc>)
 8000ba6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ba8:	4b29      	ldr	r3, [pc, #164]	@ (8000c50 <MX_TIM3_Init+0xf4>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bae:	4b28      	ldr	r3, [pc, #160]	@ (8000c50 <MX_TIM3_Init+0xf4>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000bb4:	4b26      	ldr	r3, [pc, #152]	@ (8000c50 <MX_TIM3_Init+0xf4>)
 8000bb6:	0018      	movs	r0, r3
 8000bb8:	f002 fb16 	bl	80031e8 <HAL_TIM_Base_Init>
 8000bbc:	1e03      	subs	r3, r0, #0
 8000bbe:	d001      	beq.n	8000bc4 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000bc0:	f7ff fea5 	bl	800090e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bc4:	2128      	movs	r1, #40	@ 0x28
 8000bc6:	187b      	adds	r3, r7, r1
 8000bc8:	2280      	movs	r2, #128	@ 0x80
 8000bca:	0152      	lsls	r2, r2, #5
 8000bcc:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000bce:	187a      	adds	r2, r7, r1
 8000bd0:	4b1f      	ldr	r3, [pc, #124]	@ (8000c50 <MX_TIM3_Init+0xf4>)
 8000bd2:	0011      	movs	r1, r2
 8000bd4:	0018      	movs	r0, r3
 8000bd6:	f002 fcb7 	bl	8003548 <HAL_TIM_ConfigClockSource>
 8000bda:	1e03      	subs	r3, r0, #0
 8000bdc:	d001      	beq.n	8000be2 <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8000bde:	f7ff fe96 	bl	800090e <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000be2:	4b1b      	ldr	r3, [pc, #108]	@ (8000c50 <MX_TIM3_Init+0xf4>)
 8000be4:	0018      	movs	r0, r3
 8000be6:	f002 fb57 	bl	8003298 <HAL_TIM_PWM_Init>
 8000bea:	1e03      	subs	r3, r0, #0
 8000bec:	d001      	beq.n	8000bf2 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8000bee:	f7ff fe8e 	bl	800090e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bf2:	211c      	movs	r1, #28
 8000bf4:	187b      	adds	r3, r7, r1
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bfa:	187b      	adds	r3, r7, r1
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000c00:	187a      	adds	r2, r7, r1
 8000c02:	4b13      	ldr	r3, [pc, #76]	@ (8000c50 <MX_TIM3_Init+0xf4>)
 8000c04:	0011      	movs	r1, r2
 8000c06:	0018      	movs	r0, r3
 8000c08:	f003 f958 	bl	8003ebc <HAL_TIMEx_MasterConfigSynchronization>
 8000c0c:	1e03      	subs	r3, r0, #0
 8000c0e:	d001      	beq.n	8000c14 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 8000c10:	f7ff fe7d 	bl	800090e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c14:	003b      	movs	r3, r7
 8000c16:	2260      	movs	r2, #96	@ 0x60
 8000c18:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000c1a:	003b      	movs	r3, r7
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c20:	003b      	movs	r3, r7
 8000c22:	2200      	movs	r2, #0
 8000c24:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c26:	003b      	movs	r3, r7
 8000c28:	2200      	movs	r2, #0
 8000c2a:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c2c:	0039      	movs	r1, r7
 8000c2e:	4b08      	ldr	r3, [pc, #32]	@ (8000c50 <MX_TIM3_Init+0xf4>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	0018      	movs	r0, r3
 8000c34:	f002 fb88 	bl	8003348 <HAL_TIM_PWM_ConfigChannel>
 8000c38:	1e03      	subs	r3, r0, #0
 8000c3a:	d001      	beq.n	8000c40 <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 8000c3c:	f7ff fe67 	bl	800090e <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000c40:	4b03      	ldr	r3, [pc, #12]	@ (8000c50 <MX_TIM3_Init+0xf4>)
 8000c42:	0018      	movs	r0, r3
 8000c44:	f000 f966 	bl	8000f14 <HAL_TIM_MspPostInit>

}
 8000c48:	46c0      	nop			@ (mov r8, r8)
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	b00e      	add	sp, #56	@ 0x38
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	20000144 	.word	0x20000144
 8000c54:	40000400 	.word	0x40000400
 8000c58:	0000ffff 	.word	0x0000ffff

08000c5c <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b084      	sub	sp, #16
 8000c60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c62:	1d3b      	adds	r3, r7, #4
 8000c64:	0018      	movs	r0, r3
 8000c66:	230c      	movs	r3, #12
 8000c68:	001a      	movs	r2, r3
 8000c6a:	2100      	movs	r1, #0
 8000c6c:	f003 fbe2 	bl	8004434 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000c70:	4b1e      	ldr	r3, [pc, #120]	@ (8000cec <MX_TIM6_Init+0x90>)
 8000c72:	4a1f      	ldr	r2, [pc, #124]	@ (8000cf0 <MX_TIM6_Init+0x94>)
 8000c74:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = BLOCKING_DELAY_PRESCALER;
 8000c76:	4b1f      	ldr	r3, [pc, #124]	@ (8000cf4 <MX_TIM6_Init+0x98>)
 8000c78:	681a      	ldr	r2, [r3, #0]
 8000c7a:	4b1f      	ldr	r3, [pc, #124]	@ (8000cf8 <MX_TIM6_Init+0x9c>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	0019      	movs	r1, r3
 8000c80:	0010      	movs	r0, r2
 8000c82:	f7ff fa99 	bl	80001b8 <__udivsi3>
 8000c86:	0003      	movs	r3, r0
 8000c88:	001a      	movs	r2, r3
 8000c8a:	4b18      	ldr	r3, [pc, #96]	@ (8000cec <MX_TIM6_Init+0x90>)
 8000c8c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c8e:	4b17      	ldr	r3, [pc, #92]	@ (8000cec <MX_TIM6_Init+0x90>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = BLOCKING_DELAY_PERIOD;
 8000c94:	4b18      	ldr	r3, [pc, #96]	@ (8000cf8 <MX_TIM6_Init+0x9c>)
 8000c96:	681a      	ldr	r2, [r3, #0]
 8000c98:	4b18      	ldr	r3, [pc, #96]	@ (8000cfc <MX_TIM6_Init+0xa0>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	0019      	movs	r1, r3
 8000c9e:	0010      	movs	r0, r2
 8000ca0:	f7ff fa8a 	bl	80001b8 <__udivsi3>
 8000ca4:	0003      	movs	r3, r0
 8000ca6:	001a      	movs	r2, r3
 8000ca8:	4b10      	ldr	r3, [pc, #64]	@ (8000cec <MX_TIM6_Init+0x90>)
 8000caa:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cac:	4b0f      	ldr	r3, [pc, #60]	@ (8000cec <MX_TIM6_Init+0x90>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000cb2:	4b0e      	ldr	r3, [pc, #56]	@ (8000cec <MX_TIM6_Init+0x90>)
 8000cb4:	0018      	movs	r0, r3
 8000cb6:	f002 fa97 	bl	80031e8 <HAL_TIM_Base_Init>
 8000cba:	1e03      	subs	r3, r0, #0
 8000cbc:	d001      	beq.n	8000cc2 <MX_TIM6_Init+0x66>
  {
    Error_Handler();
 8000cbe:	f7ff fe26 	bl	800090e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cc2:	1d3b      	adds	r3, r7, #4
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cc8:	1d3b      	adds	r3, r7, #4
 8000cca:	2200      	movs	r2, #0
 8000ccc:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000cce:	1d3a      	adds	r2, r7, #4
 8000cd0:	4b06      	ldr	r3, [pc, #24]	@ (8000cec <MX_TIM6_Init+0x90>)
 8000cd2:	0011      	movs	r1, r2
 8000cd4:	0018      	movs	r0, r3
 8000cd6:	f003 f8f1 	bl	8003ebc <HAL_TIMEx_MasterConfigSynchronization>
 8000cda:	1e03      	subs	r3, r0, #0
 8000cdc:	d001      	beq.n	8000ce2 <MX_TIM6_Init+0x86>
  {
    Error_Handler();
 8000cde:	f7ff fe16 	bl	800090e <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000ce2:	46c0      	nop			@ (mov r8, r8)
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	b004      	add	sp, #16
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	46c0      	nop			@ (mov r8, r8)
 8000cec:	20000190 	.word	0x20000190
 8000cf0:	40001000 	.word	0x40001000
 8000cf4:	20000000 	.word	0x20000000
 8000cf8:	080044f0 	.word	0x080044f0
 8000cfc:	080044f4 	.word	0x080044f4

08000d00 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b098      	sub	sp, #96	@ 0x60
 8000d04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d06:	2354      	movs	r3, #84	@ 0x54
 8000d08:	18fb      	adds	r3, r7, r3
 8000d0a:	0018      	movs	r0, r3
 8000d0c:	230c      	movs	r3, #12
 8000d0e:	001a      	movs	r2, r3
 8000d10:	2100      	movs	r1, #0
 8000d12:	f003 fb8f 	bl	8004434 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d16:	2338      	movs	r3, #56	@ 0x38
 8000d18:	18fb      	adds	r3, r7, r3
 8000d1a:	0018      	movs	r0, r3
 8000d1c:	231c      	movs	r3, #28
 8000d1e:	001a      	movs	r2, r3
 8000d20:	2100      	movs	r1, #0
 8000d22:	f003 fb87 	bl	8004434 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000d26:	1d3b      	adds	r3, r7, #4
 8000d28:	0018      	movs	r0, r3
 8000d2a:	2334      	movs	r3, #52	@ 0x34
 8000d2c:	001a      	movs	r2, r3
 8000d2e:	2100      	movs	r1, #0
 8000d30:	f003 fb80 	bl	8004434 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8000d34:	4b3c      	ldr	r3, [pc, #240]	@ (8000e28 <MX_TIM15_Init+0x128>)
 8000d36:	4a3d      	ldr	r2, [pc, #244]	@ (8000e2c <MX_TIM15_Init+0x12c>)
 8000d38:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8000d3a:	4b3b      	ldr	r3, [pc, #236]	@ (8000e28 <MX_TIM15_Init+0x128>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d40:	4b39      	ldr	r3, [pc, #228]	@ (8000e28 <MX_TIM15_Init+0x128>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8000d46:	4b38      	ldr	r3, [pc, #224]	@ (8000e28 <MX_TIM15_Init+0x128>)
 8000d48:	4a39      	ldr	r2, [pc, #228]	@ (8000e30 <MX_TIM15_Init+0x130>)
 8000d4a:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d4c:	4b36      	ldr	r3, [pc, #216]	@ (8000e28 <MX_TIM15_Init+0x128>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8000d52:	4b35      	ldr	r3, [pc, #212]	@ (8000e28 <MX_TIM15_Init+0x128>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d58:	4b33      	ldr	r3, [pc, #204]	@ (8000e28 <MX_TIM15_Init+0x128>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8000d5e:	4b32      	ldr	r3, [pc, #200]	@ (8000e28 <MX_TIM15_Init+0x128>)
 8000d60:	0018      	movs	r0, r3
 8000d62:	f002 fa99 	bl	8003298 <HAL_TIM_PWM_Init>
 8000d66:	1e03      	subs	r3, r0, #0
 8000d68:	d001      	beq.n	8000d6e <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 8000d6a:	f7ff fdd0 	bl	800090e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d6e:	2154      	movs	r1, #84	@ 0x54
 8000d70:	187b      	adds	r3, r7, r1
 8000d72:	2200      	movs	r2, #0
 8000d74:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d76:	187b      	adds	r3, r7, r1
 8000d78:	2200      	movs	r2, #0
 8000d7a:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8000d7c:	187a      	adds	r2, r7, r1
 8000d7e:	4b2a      	ldr	r3, [pc, #168]	@ (8000e28 <MX_TIM15_Init+0x128>)
 8000d80:	0011      	movs	r1, r2
 8000d82:	0018      	movs	r0, r3
 8000d84:	f003 f89a 	bl	8003ebc <HAL_TIMEx_MasterConfigSynchronization>
 8000d88:	1e03      	subs	r3, r0, #0
 8000d8a:	d001      	beq.n	8000d90 <MX_TIM15_Init+0x90>
  {
    Error_Handler();
 8000d8c:	f7ff fdbf 	bl	800090e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d90:	2138      	movs	r1, #56	@ 0x38
 8000d92:	187b      	adds	r3, r7, r1
 8000d94:	2260      	movs	r2, #96	@ 0x60
 8000d96:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000d98:	187b      	adds	r3, r7, r1
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d9e:	187b      	adds	r3, r7, r1
 8000da0:	2200      	movs	r2, #0
 8000da2:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000da4:	187b      	adds	r3, r7, r1
 8000da6:	2200      	movs	r2, #0
 8000da8:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000daa:	187b      	adds	r3, r7, r1
 8000dac:	2200      	movs	r2, #0
 8000dae:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000db0:	187b      	adds	r3, r7, r1
 8000db2:	2200      	movs	r2, #0
 8000db4:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000db6:	187b      	adds	r3, r7, r1
 8000db8:	2200      	movs	r2, #0
 8000dba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000dbc:	1879      	adds	r1, r7, r1
 8000dbe:	4b1a      	ldr	r3, [pc, #104]	@ (8000e28 <MX_TIM15_Init+0x128>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	0018      	movs	r0, r3
 8000dc4:	f002 fac0 	bl	8003348 <HAL_TIM_PWM_ConfigChannel>
 8000dc8:	1e03      	subs	r3, r0, #0
 8000dca:	d001      	beq.n	8000dd0 <MX_TIM15_Init+0xd0>
  {
    Error_Handler();
 8000dcc:	f7ff fd9f 	bl	800090e <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000dd0:	1d3b      	adds	r3, r7, #4
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000dd6:	1d3b      	adds	r3, r7, #4
 8000dd8:	2200      	movs	r2, #0
 8000dda:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000ddc:	1d3b      	adds	r3, r7, #4
 8000dde:	2200      	movs	r2, #0
 8000de0:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000de2:	1d3b      	adds	r3, r7, #4
 8000de4:	2200      	movs	r2, #0
 8000de6:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000de8:	1d3b      	adds	r3, r7, #4
 8000dea:	2200      	movs	r2, #0
 8000dec:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000dee:	1d3b      	adds	r3, r7, #4
 8000df0:	2280      	movs	r2, #128	@ 0x80
 8000df2:	0192      	lsls	r2, r2, #6
 8000df4:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000df6:	1d3b      	adds	r3, r7, #4
 8000df8:	2200      	movs	r2, #0
 8000dfa:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000dfc:	1d3b      	adds	r3, r7, #4
 8000dfe:	2200      	movs	r2, #0
 8000e00:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8000e02:	1d3a      	adds	r2, r7, #4
 8000e04:	4b08      	ldr	r3, [pc, #32]	@ (8000e28 <MX_TIM15_Init+0x128>)
 8000e06:	0011      	movs	r1, r2
 8000e08:	0018      	movs	r0, r3
 8000e0a:	f003 f8bf 	bl	8003f8c <HAL_TIMEx_ConfigBreakDeadTime>
 8000e0e:	1e03      	subs	r3, r0, #0
 8000e10:	d001      	beq.n	8000e16 <MX_TIM15_Init+0x116>
  {
    Error_Handler();
 8000e12:	f7ff fd7c 	bl	800090e <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8000e16:	4b04      	ldr	r3, [pc, #16]	@ (8000e28 <MX_TIM15_Init+0x128>)
 8000e18:	0018      	movs	r0, r3
 8000e1a:	f000 f87b 	bl	8000f14 <HAL_TIM_MspPostInit>

}
 8000e1e:	46c0      	nop			@ (mov r8, r8)
 8000e20:	46bd      	mov	sp, r7
 8000e22:	b018      	add	sp, #96	@ 0x60
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	46c0      	nop			@ (mov r8, r8)
 8000e28:	200001dc 	.word	0x200001dc
 8000e2c:	40014000 	.word	0x40014000
 8000e30:	0000ffff 	.word	0x0000ffff

08000e34 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b086      	sub	sp, #24
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	4a20      	ldr	r2, [pc, #128]	@ (8000ec4 <HAL_TIM_Base_MspInit+0x90>)
 8000e42:	4293      	cmp	r3, r2
 8000e44:	d10e      	bne.n	8000e64 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000e46:	4b20      	ldr	r3, [pc, #128]	@ (8000ec8 <HAL_TIM_Base_MspInit+0x94>)
 8000e48:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000e4a:	4b1f      	ldr	r3, [pc, #124]	@ (8000ec8 <HAL_TIM_Base_MspInit+0x94>)
 8000e4c:	2180      	movs	r1, #128	@ 0x80
 8000e4e:	0109      	lsls	r1, r1, #4
 8000e50:	430a      	orrs	r2, r1
 8000e52:	641a      	str	r2, [r3, #64]	@ 0x40
 8000e54:	4b1c      	ldr	r3, [pc, #112]	@ (8000ec8 <HAL_TIM_Base_MspInit+0x94>)
 8000e56:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000e58:	2380      	movs	r3, #128	@ 0x80
 8000e5a:	011b      	lsls	r3, r3, #4
 8000e5c:	4013      	ands	r3, r2
 8000e5e:	617b      	str	r3, [r7, #20]
 8000e60:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8000e62:	e02a      	b.n	8000eba <HAL_TIM_Base_MspInit+0x86>
  else if(tim_baseHandle->Instance==TIM3)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4a18      	ldr	r2, [pc, #96]	@ (8000ecc <HAL_TIM_Base_MspInit+0x98>)
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	d10c      	bne.n	8000e88 <HAL_TIM_Base_MspInit+0x54>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000e6e:	4b16      	ldr	r3, [pc, #88]	@ (8000ec8 <HAL_TIM_Base_MspInit+0x94>)
 8000e70:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000e72:	4b15      	ldr	r3, [pc, #84]	@ (8000ec8 <HAL_TIM_Base_MspInit+0x94>)
 8000e74:	2102      	movs	r1, #2
 8000e76:	430a      	orrs	r2, r1
 8000e78:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000e7a:	4b13      	ldr	r3, [pc, #76]	@ (8000ec8 <HAL_TIM_Base_MspInit+0x94>)
 8000e7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000e7e:	2202      	movs	r2, #2
 8000e80:	4013      	ands	r3, r2
 8000e82:	613b      	str	r3, [r7, #16]
 8000e84:	693b      	ldr	r3, [r7, #16]
}
 8000e86:	e018      	b.n	8000eba <HAL_TIM_Base_MspInit+0x86>
  else if(tim_baseHandle->Instance==TIM6)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4a10      	ldr	r2, [pc, #64]	@ (8000ed0 <HAL_TIM_Base_MspInit+0x9c>)
 8000e8e:	4293      	cmp	r3, r2
 8000e90:	d113      	bne.n	8000eba <HAL_TIM_Base_MspInit+0x86>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000e92:	4b0d      	ldr	r3, [pc, #52]	@ (8000ec8 <HAL_TIM_Base_MspInit+0x94>)
 8000e94:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000e96:	4b0c      	ldr	r3, [pc, #48]	@ (8000ec8 <HAL_TIM_Base_MspInit+0x94>)
 8000e98:	2110      	movs	r1, #16
 8000e9a:	430a      	orrs	r2, r1
 8000e9c:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000e9e:	4b0a      	ldr	r3, [pc, #40]	@ (8000ec8 <HAL_TIM_Base_MspInit+0x94>)
 8000ea0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000ea2:	2210      	movs	r2, #16
 8000ea4:	4013      	ands	r3, r2
 8000ea6:	60fb      	str	r3, [r7, #12]
 8000ea8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 8000eaa:	2200      	movs	r2, #0
 8000eac:	2100      	movs	r1, #0
 8000eae:	2011      	movs	r0, #17
 8000eb0:	f000 fffa 	bl	8001ea8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8000eb4:	2011      	movs	r0, #17
 8000eb6:	f001 f80c 	bl	8001ed2 <HAL_NVIC_EnableIRQ>
}
 8000eba:	46c0      	nop			@ (mov r8, r8)
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	b006      	add	sp, #24
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	46c0      	nop			@ (mov r8, r8)
 8000ec4:	40012c00 	.word	0x40012c00
 8000ec8:	40021000 	.word	0x40021000
 8000ecc:	40000400 	.word	0x40000400
 8000ed0:	40001000 	.word	0x40001000

08000ed4 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b084      	sub	sp, #16
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM15)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4a0a      	ldr	r2, [pc, #40]	@ (8000f0c <HAL_TIM_PWM_MspInit+0x38>)
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d10d      	bne.n	8000f02 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* TIM15 clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 8000ee6:	4b0a      	ldr	r3, [pc, #40]	@ (8000f10 <HAL_TIM_PWM_MspInit+0x3c>)
 8000ee8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000eea:	4b09      	ldr	r3, [pc, #36]	@ (8000f10 <HAL_TIM_PWM_MspInit+0x3c>)
 8000eec:	2180      	movs	r1, #128	@ 0x80
 8000eee:	0249      	lsls	r1, r1, #9
 8000ef0:	430a      	orrs	r2, r1
 8000ef2:	641a      	str	r2, [r3, #64]	@ 0x40
 8000ef4:	4b06      	ldr	r3, [pc, #24]	@ (8000f10 <HAL_TIM_PWM_MspInit+0x3c>)
 8000ef6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000ef8:	2380      	movs	r3, #128	@ 0x80
 8000efa:	025b      	lsls	r3, r3, #9
 8000efc:	4013      	ands	r3, r2
 8000efe:	60fb      	str	r3, [r7, #12]
 8000f00:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 8000f02:	46c0      	nop			@ (mov r8, r8)
 8000f04:	46bd      	mov	sp, r7
 8000f06:	b004      	add	sp, #16
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	46c0      	nop			@ (mov r8, r8)
 8000f0c:	40014000 	.word	0x40014000
 8000f10:	40021000 	.word	0x40021000

08000f14 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000f14:	b590      	push	{r4, r7, lr}
 8000f16:	b08b      	sub	sp, #44	@ 0x2c
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f1c:	2414      	movs	r4, #20
 8000f1e:	193b      	adds	r3, r7, r4
 8000f20:	0018      	movs	r0, r3
 8000f22:	2314      	movs	r3, #20
 8000f24:	001a      	movs	r2, r3
 8000f26:	2100      	movs	r1, #0
 8000f28:	f003 fa84 	bl	8004434 <memset>
  if(timHandle->Instance==TIM1)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4a3e      	ldr	r2, [pc, #248]	@ (800102c <HAL_TIM_MspPostInit+0x118>)
 8000f32:	4293      	cmp	r3, r2
 8000f34:	d124      	bne.n	8000f80 <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f36:	4b3e      	ldr	r3, [pc, #248]	@ (8001030 <HAL_TIM_MspPostInit+0x11c>)
 8000f38:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000f3a:	4b3d      	ldr	r3, [pc, #244]	@ (8001030 <HAL_TIM_MspPostInit+0x11c>)
 8000f3c:	2101      	movs	r1, #1
 8000f3e:	430a      	orrs	r2, r1
 8000f40:	635a      	str	r2, [r3, #52]	@ 0x34
 8000f42:	4b3b      	ldr	r3, [pc, #236]	@ (8001030 <HAL_TIM_MspPostInit+0x11c>)
 8000f44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f46:	2201      	movs	r2, #1
 8000f48:	4013      	ands	r3, r2
 8000f4a:	613b      	str	r3, [r7, #16]
 8000f4c:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = PIEZO_PWM_Pin;
 8000f4e:	193b      	adds	r3, r7, r4
 8000f50:	2280      	movs	r2, #128	@ 0x80
 8000f52:	0052      	lsls	r2, r2, #1
 8000f54:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f56:	0021      	movs	r1, r4
 8000f58:	187b      	adds	r3, r7, r1
 8000f5a:	2202      	movs	r2, #2
 8000f5c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5e:	187b      	adds	r3, r7, r1
 8000f60:	2200      	movs	r2, #0
 8000f62:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f64:	187b      	adds	r3, r7, r1
 8000f66:	2200      	movs	r2, #0
 8000f68:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000f6a:	187b      	adds	r3, r7, r1
 8000f6c:	2202      	movs	r2, #2
 8000f6e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(PIEZO_PWM_GPIO_Port, &GPIO_InitStruct);
 8000f70:	187a      	adds	r2, r7, r1
 8000f72:	23a0      	movs	r3, #160	@ 0xa0
 8000f74:	05db      	lsls	r3, r3, #23
 8000f76:	0011      	movs	r1, r2
 8000f78:	0018      	movs	r0, r3
 8000f7a:	f000 ffc7 	bl	8001f0c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8000f7e:	e050      	b.n	8001022 <HAL_TIM_MspPostInit+0x10e>
  else if(timHandle->Instance==TIM3)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	4a2b      	ldr	r2, [pc, #172]	@ (8001034 <HAL_TIM_MspPostInit+0x120>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d123      	bne.n	8000fd2 <HAL_TIM_MspPostInit+0xbe>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f8a:	4b29      	ldr	r3, [pc, #164]	@ (8001030 <HAL_TIM_MspPostInit+0x11c>)
 8000f8c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000f8e:	4b28      	ldr	r3, [pc, #160]	@ (8001030 <HAL_TIM_MspPostInit+0x11c>)
 8000f90:	2101      	movs	r1, #1
 8000f92:	430a      	orrs	r2, r1
 8000f94:	635a      	str	r2, [r3, #52]	@ 0x34
 8000f96:	4b26      	ldr	r3, [pc, #152]	@ (8001030 <HAL_TIM_MspPostInit+0x11c>)
 8000f98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	4013      	ands	r3, r2
 8000f9e:	60fb      	str	r3, [r7, #12]
 8000fa0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = WPT_PWM_Pin;
 8000fa2:	2114      	movs	r1, #20
 8000fa4:	187b      	adds	r3, r7, r1
 8000fa6:	2240      	movs	r2, #64	@ 0x40
 8000fa8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000faa:	187b      	adds	r3, r7, r1
 8000fac:	2202      	movs	r2, #2
 8000fae:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb0:	187b      	adds	r3, r7, r1
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb6:	187b      	adds	r3, r7, r1
 8000fb8:	2200      	movs	r2, #0
 8000fba:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8000fbc:	187b      	adds	r3, r7, r1
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(WPT_PWM_GPIO_Port, &GPIO_InitStruct);
 8000fc2:	187a      	adds	r2, r7, r1
 8000fc4:	23a0      	movs	r3, #160	@ 0xa0
 8000fc6:	05db      	lsls	r3, r3, #23
 8000fc8:	0011      	movs	r1, r2
 8000fca:	0018      	movs	r0, r3
 8000fcc:	f000 ff9e 	bl	8001f0c <HAL_GPIO_Init>
}
 8000fd0:	e027      	b.n	8001022 <HAL_TIM_MspPostInit+0x10e>
  else if(timHandle->Instance==TIM15)
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	4a18      	ldr	r2, [pc, #96]	@ (8001038 <HAL_TIM_MspPostInit+0x124>)
 8000fd8:	4293      	cmp	r3, r2
 8000fda:	d122      	bne.n	8001022 <HAL_TIM_MspPostInit+0x10e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fdc:	4b14      	ldr	r3, [pc, #80]	@ (8001030 <HAL_TIM_MspPostInit+0x11c>)
 8000fde:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000fe0:	4b13      	ldr	r3, [pc, #76]	@ (8001030 <HAL_TIM_MspPostInit+0x11c>)
 8000fe2:	2101      	movs	r1, #1
 8000fe4:	430a      	orrs	r2, r1
 8000fe6:	635a      	str	r2, [r3, #52]	@ 0x34
 8000fe8:	4b11      	ldr	r3, [pc, #68]	@ (8001030 <HAL_TIM_MspPostInit+0x11c>)
 8000fea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000fec:	2201      	movs	r2, #1
 8000fee:	4013      	ands	r3, r2
 8000ff0:	60bb      	str	r3, [r7, #8]
 8000ff2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = VBOOST_CAL_PWM_Pin;
 8000ff4:	2114      	movs	r1, #20
 8000ff6:	187b      	adds	r3, r7, r1
 8000ff8:	2202      	movs	r2, #2
 8000ffa:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ffc:	187b      	adds	r3, r7, r1
 8000ffe:	2202      	movs	r2, #2
 8001000:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001002:	187b      	adds	r3, r7, r1
 8001004:	2200      	movs	r2, #0
 8001006:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001008:	187b      	adds	r3, r7, r1
 800100a:	2200      	movs	r2, #0
 800100c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM15;
 800100e:	187b      	adds	r3, r7, r1
 8001010:	2205      	movs	r2, #5
 8001012:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(VBOOST_CAL_PWM_GPIO_Port, &GPIO_InitStruct);
 8001014:	187a      	adds	r2, r7, r1
 8001016:	23a0      	movs	r3, #160	@ 0xa0
 8001018:	05db      	lsls	r3, r3, #23
 800101a:	0011      	movs	r1, r2
 800101c:	0018      	movs	r0, r3
 800101e:	f000 ff75 	bl	8001f0c <HAL_GPIO_Init>
}
 8001022:	46c0      	nop			@ (mov r8, r8)
 8001024:	46bd      	mov	sp, r7
 8001026:	b00b      	add	sp, #44	@ 0x2c
 8001028:	bd90      	pop	{r4, r7, pc}
 800102a:	46c0      	nop			@ (mov r8, r8)
 800102c:	40012c00 	.word	0x40012c00
 8001030:	40021000 	.word	0x40021000
 8001034:	40000400 	.word	0x40000400
 8001038:	40014000 	.word	0x40014000

0800103c <DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800103c:	e7fe      	b.n	800103c <DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler>
	...

08001040 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001046:	1dfb      	adds	r3, r7, #7
 8001048:	2200      	movs	r2, #0
 800104a:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800104c:	4b0b      	ldr	r3, [pc, #44]	@ (800107c <HAL_Init+0x3c>)
 800104e:	681a      	ldr	r2, [r3, #0]
 8001050:	4b0a      	ldr	r3, [pc, #40]	@ (800107c <HAL_Init+0x3c>)
 8001052:	2180      	movs	r1, #128	@ 0x80
 8001054:	0049      	lsls	r1, r1, #1
 8001056:	430a      	orrs	r2, r1
 8001058:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800105a:	2003      	movs	r0, #3
 800105c:	f000 f810 	bl	8001080 <HAL_InitTick>
 8001060:	1e03      	subs	r3, r0, #0
 8001062:	d003      	beq.n	800106c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001064:	1dfb      	adds	r3, r7, #7
 8001066:	2201      	movs	r2, #1
 8001068:	701a      	strb	r2, [r3, #0]
 800106a:	e001      	b.n	8001070 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 800106c:	f7ff fc56 	bl	800091c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001070:	1dfb      	adds	r3, r7, #7
 8001072:	781b      	ldrb	r3, [r3, #0]
}
 8001074:	0018      	movs	r0, r3
 8001076:	46bd      	mov	sp, r7
 8001078:	b002      	add	sp, #8
 800107a:	bd80      	pop	{r7, pc}
 800107c:	40022000 	.word	0x40022000

08001080 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001080:	b590      	push	{r4, r7, lr}
 8001082:	b085      	sub	sp, #20
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001088:	230f      	movs	r3, #15
 800108a:	18fb      	adds	r3, r7, r3
 800108c:	2200      	movs	r2, #0
 800108e:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001090:	4b1d      	ldr	r3, [pc, #116]	@ (8001108 <HAL_InitTick+0x88>)
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d02b      	beq.n	80010f0 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001098:	4b1c      	ldr	r3, [pc, #112]	@ (800110c <HAL_InitTick+0x8c>)
 800109a:	681c      	ldr	r4, [r3, #0]
 800109c:	4b1a      	ldr	r3, [pc, #104]	@ (8001108 <HAL_InitTick+0x88>)
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	0019      	movs	r1, r3
 80010a2:	23fa      	movs	r3, #250	@ 0xfa
 80010a4:	0098      	lsls	r0, r3, #2
 80010a6:	f7ff f887 	bl	80001b8 <__udivsi3>
 80010aa:	0003      	movs	r3, r0
 80010ac:	0019      	movs	r1, r3
 80010ae:	0020      	movs	r0, r4
 80010b0:	f7ff f882 	bl	80001b8 <__udivsi3>
 80010b4:	0003      	movs	r3, r0
 80010b6:	0018      	movs	r0, r3
 80010b8:	f000 ff1b 	bl	8001ef2 <HAL_SYSTICK_Config>
 80010bc:	1e03      	subs	r3, r0, #0
 80010be:	d112      	bne.n	80010e6 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	2b03      	cmp	r3, #3
 80010c4:	d80a      	bhi.n	80010dc <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010c6:	6879      	ldr	r1, [r7, #4]
 80010c8:	2301      	movs	r3, #1
 80010ca:	425b      	negs	r3, r3
 80010cc:	2200      	movs	r2, #0
 80010ce:	0018      	movs	r0, r3
 80010d0:	f000 feea 	bl	8001ea8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80010d4:	4b0e      	ldr	r3, [pc, #56]	@ (8001110 <HAL_InitTick+0x90>)
 80010d6:	687a      	ldr	r2, [r7, #4]
 80010d8:	601a      	str	r2, [r3, #0]
 80010da:	e00d      	b.n	80010f8 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80010dc:	230f      	movs	r3, #15
 80010de:	18fb      	adds	r3, r7, r3
 80010e0:	2201      	movs	r2, #1
 80010e2:	701a      	strb	r2, [r3, #0]
 80010e4:	e008      	b.n	80010f8 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80010e6:	230f      	movs	r3, #15
 80010e8:	18fb      	adds	r3, r7, r3
 80010ea:	2201      	movs	r2, #1
 80010ec:	701a      	strb	r2, [r3, #0]
 80010ee:	e003      	b.n	80010f8 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80010f0:	230f      	movs	r3, #15
 80010f2:	18fb      	adds	r3, r7, r3
 80010f4:	2201      	movs	r2, #1
 80010f6:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80010f8:	230f      	movs	r3, #15
 80010fa:	18fb      	adds	r3, r7, r3
 80010fc:	781b      	ldrb	r3, [r3, #0]
}
 80010fe:	0018      	movs	r0, r3
 8001100:	46bd      	mov	sp, r7
 8001102:	b005      	add	sp, #20
 8001104:	bd90      	pop	{r4, r7, pc}
 8001106:	46c0      	nop			@ (mov r8, r8)
 8001108:	20000008 	.word	0x20000008
 800110c:	20000000 	.word	0x20000000
 8001110:	20000004 	.word	0x20000004

08001114 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001118:	4b05      	ldr	r3, [pc, #20]	@ (8001130 <HAL_IncTick+0x1c>)
 800111a:	781b      	ldrb	r3, [r3, #0]
 800111c:	001a      	movs	r2, r3
 800111e:	4b05      	ldr	r3, [pc, #20]	@ (8001134 <HAL_IncTick+0x20>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	18d2      	adds	r2, r2, r3
 8001124:	4b03      	ldr	r3, [pc, #12]	@ (8001134 <HAL_IncTick+0x20>)
 8001126:	601a      	str	r2, [r3, #0]
}
 8001128:	46c0      	nop			@ (mov r8, r8)
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	46c0      	nop			@ (mov r8, r8)
 8001130:	20000008 	.word	0x20000008
 8001134:	20000228 	.word	0x20000228

08001138 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
  return uwTick;
 800113c:	4b02      	ldr	r3, [pc, #8]	@ (8001148 <HAL_GetTick+0x10>)
 800113e:	681b      	ldr	r3, [r3, #0]
}
 8001140:	0018      	movs	r0, r3
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	46c0      	nop			@ (mov r8, r8)
 8001148:	20000228 	.word	0x20000228

0800114c <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8001154:	4b06      	ldr	r3, [pc, #24]	@ (8001170 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4a06      	ldr	r2, [pc, #24]	@ (8001174 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 800115a:	4013      	ands	r3, r2
 800115c:	0019      	movs	r1, r3
 800115e:	4b04      	ldr	r3, [pc, #16]	@ (8001170 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8001160:	687a      	ldr	r2, [r7, #4]
 8001162:	430a      	orrs	r2, r1
 8001164:	601a      	str	r2, [r3, #0]
}
 8001166:	46c0      	nop			@ (mov r8, r8)
 8001168:	46bd      	mov	sp, r7
 800116a:	b002      	add	sp, #8
 800116c:	bd80      	pop	{r7, pc}
 800116e:	46c0      	nop			@ (mov r8, r8)
 8001170:	40010000 	.word	0x40010000
 8001174:	fffff9ff 	.word	0xfffff9ff

08001178 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
 8001180:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4a05      	ldr	r2, [pc, #20]	@ (800119c <LL_ADC_SetCommonPathInternalCh+0x24>)
 8001188:	401a      	ands	r2, r3
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	431a      	orrs	r2, r3
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	601a      	str	r2, [r3, #0]
}
 8001192:	46c0      	nop			@ (mov r8, r8)
 8001194:	46bd      	mov	sp, r7
 8001196:	b002      	add	sp, #8
 8001198:	bd80      	pop	{r7, pc}
 800119a:	46c0      	nop			@ (mov r8, r8)
 800119c:	fe3fffff 	.word	0xfe3fffff

080011a0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681a      	ldr	r2, [r3, #0]
 80011ac:	23e0      	movs	r3, #224	@ 0xe0
 80011ae:	045b      	lsls	r3, r3, #17
 80011b0:	4013      	ands	r3, r2
}
 80011b2:	0018      	movs	r0, r3
 80011b4:	46bd      	mov	sp, r7
 80011b6:	b002      	add	sp, #8
 80011b8:	bd80      	pop	{r7, pc}

080011ba <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 80011ba:	b580      	push	{r7, lr}
 80011bc:	b084      	sub	sp, #16
 80011be:	af00      	add	r7, sp, #0
 80011c0:	60f8      	str	r0, [r7, #12]
 80011c2:	60b9      	str	r1, [r7, #8]
 80011c4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	695b      	ldr	r3, [r3, #20]
 80011ca:	68ba      	ldr	r2, [r7, #8]
 80011cc:	2104      	movs	r1, #4
 80011ce:	400a      	ands	r2, r1
 80011d0:	2107      	movs	r1, #7
 80011d2:	4091      	lsls	r1, r2
 80011d4:	000a      	movs	r2, r1
 80011d6:	43d2      	mvns	r2, r2
 80011d8:	401a      	ands	r2, r3
 80011da:	68bb      	ldr	r3, [r7, #8]
 80011dc:	2104      	movs	r1, #4
 80011de:	400b      	ands	r3, r1
 80011e0:	6879      	ldr	r1, [r7, #4]
 80011e2:	4099      	lsls	r1, r3
 80011e4:	000b      	movs	r3, r1
 80011e6:	431a      	orrs	r2, r3
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 80011ec:	46c0      	nop			@ (mov r8, r8)
 80011ee:	46bd      	mov	sp, r7
 80011f0:	b004      	add	sp, #16
 80011f2:	bd80      	pop	{r7, pc}

080011f4 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
 80011fc:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	695b      	ldr	r3, [r3, #20]
 8001202:	683a      	ldr	r2, [r7, #0]
 8001204:	2104      	movs	r1, #4
 8001206:	400a      	ands	r2, r1
 8001208:	2107      	movs	r1, #7
 800120a:	4091      	lsls	r1, r2
 800120c:	000a      	movs	r2, r1
 800120e:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	2104      	movs	r1, #4
 8001214:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8001216:	40da      	lsrs	r2, r3
 8001218:	0013      	movs	r3, r2
}
 800121a:	0018      	movs	r0, r3
 800121c:	46bd      	mov	sp, r7
 800121e:	b002      	add	sp, #8
 8001220:	bd80      	pop	{r7, pc}

08001222 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001222:	b580      	push	{r7, lr}
 8001224:	b082      	sub	sp, #8
 8001226:	af00      	add	r7, sp, #0
 8001228:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	68da      	ldr	r2, [r3, #12]
 800122e:	23c0      	movs	r3, #192	@ 0xc0
 8001230:	011b      	lsls	r3, r3, #4
 8001232:	4013      	ands	r3, r2
 8001234:	d101      	bne.n	800123a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001236:	2301      	movs	r3, #1
 8001238:	e000      	b.n	800123c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800123a:	2300      	movs	r3, #0
}
 800123c:	0018      	movs	r0, r3
 800123e:	46bd      	mov	sp, r7
 8001240:	b002      	add	sp, #8
 8001242:	bd80      	pop	{r7, pc}

08001244 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b084      	sub	sp, #16
 8001248:	af00      	add	r7, sp, #0
 800124a:	60f8      	str	r0, [r7, #12]
 800124c:	60b9      	str	r1, [r7, #8]
 800124e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001254:	68ba      	ldr	r2, [r7, #8]
 8001256:	211f      	movs	r1, #31
 8001258:	400a      	ands	r2, r1
 800125a:	210f      	movs	r1, #15
 800125c:	4091      	lsls	r1, r2
 800125e:	000a      	movs	r2, r1
 8001260:	43d2      	mvns	r2, r2
 8001262:	401a      	ands	r2, r3
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	0e9b      	lsrs	r3, r3, #26
 8001268:	210f      	movs	r1, #15
 800126a:	4019      	ands	r1, r3
 800126c:	68bb      	ldr	r3, [r7, #8]
 800126e:	201f      	movs	r0, #31
 8001270:	4003      	ands	r3, r0
 8001272:	4099      	lsls	r1, r3
 8001274:	000b      	movs	r3, r1
 8001276:	431a      	orrs	r2, r3
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800127c:	46c0      	nop			@ (mov r8, r8)
 800127e:	46bd      	mov	sp, r7
 8001280:	b004      	add	sp, #16
 8001282:	bd80      	pop	{r7, pc}

08001284 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
 800128c:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	035b      	lsls	r3, r3, #13
 8001296:	0b5b      	lsrs	r3, r3, #13
 8001298:	431a      	orrs	r2, r3
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800129e:	46c0      	nop			@ (mov r8, r8)
 80012a0:	46bd      	mov	sp, r7
 80012a2:	b002      	add	sp, #8
 80012a4:	bd80      	pop	{r7, pc}

080012a6 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80012a6:	b580      	push	{r7, lr}
 80012a8:	b082      	sub	sp, #8
 80012aa:	af00      	add	r7, sp, #0
 80012ac:	6078      	str	r0, [r7, #4]
 80012ae:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012b4:	683a      	ldr	r2, [r7, #0]
 80012b6:	0352      	lsls	r2, r2, #13
 80012b8:	0b52      	lsrs	r2, r2, #13
 80012ba:	43d2      	mvns	r2, r2
 80012bc:	401a      	ands	r2, r3
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80012c2:	46c0      	nop			@ (mov r8, r8)
 80012c4:	46bd      	mov	sp, r7
 80012c6:	b002      	add	sp, #8
 80012c8:	bd80      	pop	{r7, pc}

080012ca <LL_ADC_REG_GetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  */
__STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(const ADC_TypeDef *ADCx)
{
 80012ca:	b580      	push	{r7, lr}
 80012cc:	b082      	sub	sp, #8
 80012ce:	af00      	add	r7, sp, #0
 80012d0:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG));
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	68db      	ldr	r3, [r3, #12]
 80012d6:	2203      	movs	r2, #3
 80012d8:	4013      	ands	r3, r2
}
 80012da:	0018      	movs	r0, r3
 80012dc:	46bd      	mov	sp, r7
 80012de:	b002      	add	sp, #8
 80012e0:	bd80      	pop	{r7, pc}
	...

080012e4 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b084      	sub	sp, #16
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	60f8      	str	r0, [r7, #12]
 80012ec:	60b9      	str	r1, [r7, #8]
 80012ee:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	695b      	ldr	r3, [r3, #20]
 80012f4:	68ba      	ldr	r2, [r7, #8]
 80012f6:	0212      	lsls	r2, r2, #8
 80012f8:	43d2      	mvns	r2, r2
 80012fa:	401a      	ands	r2, r3
 80012fc:	68bb      	ldr	r3, [r7, #8]
 80012fe:	021b      	lsls	r3, r3, #8
 8001300:	6879      	ldr	r1, [r7, #4]
 8001302:	400b      	ands	r3, r1
 8001304:	4904      	ldr	r1, [pc, #16]	@ (8001318 <LL_ADC_SetChannelSamplingTime+0x34>)
 8001306:	400b      	ands	r3, r1
 8001308:	431a      	orrs	r2, r3
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 800130e:	46c0      	nop			@ (mov r8, r8)
 8001310:	46bd      	mov	sp, r7
 8001312:	b004      	add	sp, #16
 8001314:	bd80      	pop	{r7, pc}
 8001316:	46c0      	nop			@ (mov r8, r8)
 8001318:	07ffff00 	.word	0x07ffff00

0800131c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	689b      	ldr	r3, [r3, #8]
 8001328:	4a05      	ldr	r2, [pc, #20]	@ (8001340 <LL_ADC_EnableInternalRegulator+0x24>)
 800132a:	4013      	ands	r3, r2
 800132c:	2280      	movs	r2, #128	@ 0x80
 800132e:	0552      	lsls	r2, r2, #21
 8001330:	431a      	orrs	r2, r3
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001336:	46c0      	nop			@ (mov r8, r8)
 8001338:	46bd      	mov	sp, r7
 800133a:	b002      	add	sp, #8
 800133c:	bd80      	pop	{r7, pc}
 800133e:	46c0      	nop			@ (mov r8, r8)
 8001340:	6fffffe8 	.word	0x6fffffe8

08001344 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	689a      	ldr	r2, [r3, #8]
 8001350:	2380      	movs	r3, #128	@ 0x80
 8001352:	055b      	lsls	r3, r3, #21
 8001354:	401a      	ands	r2, r3
 8001356:	2380      	movs	r3, #128	@ 0x80
 8001358:	055b      	lsls	r3, r3, #21
 800135a:	429a      	cmp	r2, r3
 800135c:	d101      	bne.n	8001362 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 800135e:	2301      	movs	r3, #1
 8001360:	e000      	b.n	8001364 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8001362:	2300      	movs	r3, #0
}
 8001364:	0018      	movs	r0, r3
 8001366:	46bd      	mov	sp, r7
 8001368:	b002      	add	sp, #8
 800136a:	bd80      	pop	{r7, pc}

0800136c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b082      	sub	sp, #8
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	689b      	ldr	r3, [r3, #8]
 8001378:	2201      	movs	r2, #1
 800137a:	4013      	ands	r3, r2
 800137c:	2b01      	cmp	r3, #1
 800137e:	d101      	bne.n	8001384 <LL_ADC_IsEnabled+0x18>
 8001380:	2301      	movs	r3, #1
 8001382:	e000      	b.n	8001386 <LL_ADC_IsEnabled+0x1a>
 8001384:	2300      	movs	r3, #0
}
 8001386:	0018      	movs	r0, r3
 8001388:	46bd      	mov	sp, r7
 800138a:	b002      	add	sp, #8
 800138c:	bd80      	pop	{r7, pc}

0800138e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800138e:	b580      	push	{r7, lr}
 8001390:	b082      	sub	sp, #8
 8001392:	af00      	add	r7, sp, #0
 8001394:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	689b      	ldr	r3, [r3, #8]
 800139a:	2204      	movs	r2, #4
 800139c:	4013      	ands	r3, r2
 800139e:	2b04      	cmp	r3, #4
 80013a0:	d101      	bne.n	80013a6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80013a2:	2301      	movs	r3, #1
 80013a4:	e000      	b.n	80013a8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80013a6:	2300      	movs	r3, #0
}
 80013a8:	0018      	movs	r0, r3
 80013aa:	46bd      	mov	sp, r7
 80013ac:	b002      	add	sp, #8
 80013ae:	bd80      	pop	{r7, pc}

080013b0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b088      	sub	sp, #32
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013b8:	231f      	movs	r3, #31
 80013ba:	18fb      	adds	r3, r7, r3
 80013bc:	2200      	movs	r2, #0
 80013be:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 80013c0:	2300      	movs	r3, #0
 80013c2:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 80013c4:	2300      	movs	r3, #0
 80013c6:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80013c8:	2300      	movs	r3, #0
 80013ca:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d101      	bne.n	80013d6 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 80013d2:	2301      	movs	r3, #1
 80013d4:	e17f      	b.n	80016d6 <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d10a      	bne.n	80013f4 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	0018      	movs	r0, r3
 80013e2:	f7fe ffe5 	bl	80003b0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	2200      	movs	r2, #0
 80013ea:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	2254      	movs	r2, #84	@ 0x54
 80013f0:	2100      	movs	r1, #0
 80013f2:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	0018      	movs	r0, r3
 80013fa:	f7ff ffa3 	bl	8001344 <LL_ADC_IsInternalRegulatorEnabled>
 80013fe:	1e03      	subs	r3, r0, #0
 8001400:	d115      	bne.n	800142e <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	0018      	movs	r0, r3
 8001408:	f7ff ff88 	bl	800131c <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800140c:	4bb4      	ldr	r3, [pc, #720]	@ (80016e0 <HAL_ADC_Init+0x330>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	49b4      	ldr	r1, [pc, #720]	@ (80016e4 <HAL_ADC_Init+0x334>)
 8001412:	0018      	movs	r0, r3
 8001414:	f7fe fed0 	bl	80001b8 <__udivsi3>
 8001418:	0003      	movs	r3, r0
 800141a:	3301      	adds	r3, #1
 800141c:	005b      	lsls	r3, r3, #1
 800141e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001420:	e002      	b.n	8001428 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	3b01      	subs	r3, #1
 8001426:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d1f9      	bne.n	8001422 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	0018      	movs	r0, r3
 8001434:	f7ff ff86 	bl	8001344 <LL_ADC_IsInternalRegulatorEnabled>
 8001438:	1e03      	subs	r3, r0, #0
 800143a:	d10f      	bne.n	800145c <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001440:	2210      	movs	r2, #16
 8001442:	431a      	orrs	r2, r3
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800144c:	2201      	movs	r2, #1
 800144e:	431a      	orrs	r2, r3
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001454:	231f      	movs	r3, #31
 8001456:	18fb      	adds	r3, r7, r3
 8001458:	2201      	movs	r2, #1
 800145a:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	0018      	movs	r0, r3
 8001462:	f7ff ff94 	bl	800138e <LL_ADC_REG_IsConversionOngoing>
 8001466:	0003      	movs	r3, r0
 8001468:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800146e:	2210      	movs	r2, #16
 8001470:	4013      	ands	r3, r2
 8001472:	d000      	beq.n	8001476 <HAL_ADC_Init+0xc6>
 8001474:	e122      	b.n	80016bc <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001476:	693b      	ldr	r3, [r7, #16]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d000      	beq.n	800147e <HAL_ADC_Init+0xce>
 800147c:	e11e      	b.n	80016bc <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001482:	4a99      	ldr	r2, [pc, #612]	@ (80016e8 <HAL_ADC_Init+0x338>)
 8001484:	4013      	ands	r3, r2
 8001486:	2202      	movs	r2, #2
 8001488:	431a      	orrs	r2, r3
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	0018      	movs	r0, r3
 8001494:	f7ff ff6a 	bl	800136c <LL_ADC_IsEnabled>
 8001498:	1e03      	subs	r3, r0, #0
 800149a:	d000      	beq.n	800149e <HAL_ADC_Init+0xee>
 800149c:	e0ad      	b.n	80015fa <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	7e1b      	ldrb	r3, [r3, #24]
 80014a6:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 80014a8:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	7e5b      	ldrb	r3, [r3, #25]
 80014ae:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80014b0:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	7e9b      	ldrb	r3, [r3, #26]
 80014b6:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80014b8:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d002      	beq.n	80014c8 <HAL_ADC_Init+0x118>
 80014c2:	2380      	movs	r3, #128	@ 0x80
 80014c4:	015b      	lsls	r3, r3, #5
 80014c6:	e000      	b.n	80014ca <HAL_ADC_Init+0x11a>
 80014c8:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80014ca:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80014d0:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	691b      	ldr	r3, [r3, #16]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	da04      	bge.n	80014e4 <HAL_ADC_Init+0x134>
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	691b      	ldr	r3, [r3, #16]
 80014de:	005b      	lsls	r3, r3, #1
 80014e0:	085b      	lsrs	r3, r3, #1
 80014e2:	e001      	b.n	80014e8 <HAL_ADC_Init+0x138>
 80014e4:	2380      	movs	r3, #128	@ 0x80
 80014e6:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 80014e8:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	212c      	movs	r1, #44	@ 0x2c
 80014ee:	5c5b      	ldrb	r3, [r3, r1]
 80014f0:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80014f2:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 80014f4:	69ba      	ldr	r2, [r7, #24]
 80014f6:	4313      	orrs	r3, r2
 80014f8:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	2220      	movs	r2, #32
 80014fe:	5c9b      	ldrb	r3, [r3, r2]
 8001500:	2b01      	cmp	r3, #1
 8001502:	d115      	bne.n	8001530 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	7e9b      	ldrb	r3, [r3, #26]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d105      	bne.n	8001518 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 800150c:	69bb      	ldr	r3, [r7, #24]
 800150e:	2280      	movs	r2, #128	@ 0x80
 8001510:	0252      	lsls	r2, r2, #9
 8001512:	4313      	orrs	r3, r2
 8001514:	61bb      	str	r3, [r7, #24]
 8001516:	e00b      	b.n	8001530 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800151c:	2220      	movs	r2, #32
 800151e:	431a      	orrs	r2, r3
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001528:	2201      	movs	r2, #1
 800152a:	431a      	orrs	r2, r3
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001534:	2b00      	cmp	r3, #0
 8001536:	d00a      	beq.n	800154e <HAL_ADC_Init+0x19e>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800153c:	23e0      	movs	r3, #224	@ 0xe0
 800153e:	005b      	lsls	r3, r3, #1
 8001540:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001546:	4313      	orrs	r3, r2
 8001548:	69ba      	ldr	r2, [r7, #24]
 800154a:	4313      	orrs	r3, r2
 800154c:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	68db      	ldr	r3, [r3, #12]
 8001554:	4a65      	ldr	r2, [pc, #404]	@ (80016ec <HAL_ADC_Init+0x33c>)
 8001556:	4013      	ands	r3, r2
 8001558:	0019      	movs	r1, r3
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	69ba      	ldr	r2, [r7, #24]
 8001560:	430a      	orrs	r2, r1
 8001562:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	0f9b      	lsrs	r3, r3, #30
 800156a:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001570:	4313      	orrs	r3, r2
 8001572:	697a      	ldr	r2, [r7, #20]
 8001574:	4313      	orrs	r3, r2
 8001576:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	223c      	movs	r2, #60	@ 0x3c
 800157c:	5c9b      	ldrb	r3, [r3, r2]
 800157e:	2b01      	cmp	r3, #1
 8001580:	d111      	bne.n	80015a6 <HAL_ADC_Init+0x1f6>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	0f9b      	lsrs	r3, r3, #30
 8001588:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800158e:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                      hadc->Init.Oversampling.Ratio         |
 8001594:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                      hadc->Init.Oversampling.RightBitShift |
 800159a:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	4313      	orrs	r3, r2
 80015a0:	2201      	movs	r2, #1
 80015a2:	4313      	orrs	r3, r2
 80015a4:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	691b      	ldr	r3, [r3, #16]
 80015ac:	4a50      	ldr	r2, [pc, #320]	@ (80016f0 <HAL_ADC_Init+0x340>)
 80015ae:	4013      	ands	r3, r2
 80015b0:	0019      	movs	r1, r3
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	697a      	ldr	r2, [r7, #20]
 80015b8:	430a      	orrs	r2, r1
 80015ba:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	685a      	ldr	r2, [r3, #4]
 80015c0:	23c0      	movs	r3, #192	@ 0xc0
 80015c2:	061b      	lsls	r3, r3, #24
 80015c4:	429a      	cmp	r2, r3
 80015c6:	d018      	beq.n	80015fa <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80015cc:	2380      	movs	r3, #128	@ 0x80
 80015ce:	05db      	lsls	r3, r3, #23
 80015d0:	429a      	cmp	r2, r3
 80015d2:	d012      	beq.n	80015fa <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80015d8:	2380      	movs	r3, #128	@ 0x80
 80015da:	061b      	lsls	r3, r3, #24
 80015dc:	429a      	cmp	r2, r3
 80015de:	d00c      	beq.n	80015fa <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 80015e0:	4b44      	ldr	r3, [pc, #272]	@ (80016f4 <HAL_ADC_Init+0x344>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a44      	ldr	r2, [pc, #272]	@ (80016f8 <HAL_ADC_Init+0x348>)
 80015e6:	4013      	ands	r3, r2
 80015e8:	0019      	movs	r1, r3
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	685a      	ldr	r2, [r3, #4]
 80015ee:	23f0      	movs	r3, #240	@ 0xf0
 80015f0:	039b      	lsls	r3, r3, #14
 80015f2:	401a      	ands	r2, r3
 80015f4:	4b3f      	ldr	r3, [pc, #252]	@ (80016f4 <HAL_ADC_Init+0x344>)
 80015f6:	430a      	orrs	r2, r1
 80015f8:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6818      	ldr	r0, [r3, #0]
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001602:	001a      	movs	r2, r3
 8001604:	2100      	movs	r1, #0
 8001606:	f7ff fdd8 	bl	80011ba <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6818      	ldr	r0, [r3, #0]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001612:	493a      	ldr	r1, [pc, #232]	@ (80016fc <HAL_ADC_Init+0x34c>)
 8001614:	001a      	movs	r2, r3
 8001616:	f7ff fdd0 	bl	80011ba <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	691b      	ldr	r3, [r3, #16]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d109      	bne.n	8001636 <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	2110      	movs	r1, #16
 800162e:	4249      	negs	r1, r1
 8001630:	430a      	orrs	r2, r1
 8001632:	629a      	str	r2, [r3, #40]	@ 0x28
 8001634:	e018      	b.n	8001668 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	691a      	ldr	r2, [r3, #16]
 800163a:	2380      	movs	r3, #128	@ 0x80
 800163c:	039b      	lsls	r3, r3, #14
 800163e:	429a      	cmp	r2, r3
 8001640:	d112      	bne.n	8001668 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	69db      	ldr	r3, [r3, #28]
 800164c:	3b01      	subs	r3, #1
 800164e:	009b      	lsls	r3, r3, #2
 8001650:	221c      	movs	r2, #28
 8001652:	4013      	ands	r3, r2
 8001654:	2210      	movs	r2, #16
 8001656:	4252      	negs	r2, r2
 8001658:	409a      	lsls	r2, r3
 800165a:	0011      	movs	r1, r2
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	430a      	orrs	r2, r1
 8001666:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	2100      	movs	r1, #0
 800166e:	0018      	movs	r0, r3
 8001670:	f7ff fdc0 	bl	80011f4 <LL_ADC_GetSamplingTimeCommonChannels>
 8001674:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800167a:	429a      	cmp	r2, r3
 800167c:	d10b      	bne.n	8001696 <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2200      	movs	r2, #0
 8001682:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001688:	2203      	movs	r2, #3
 800168a:	4393      	bics	r3, r2
 800168c:	2201      	movs	r2, #1
 800168e:	431a      	orrs	r2, r3
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001694:	e01c      	b.n	80016d0 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800169a:	2212      	movs	r2, #18
 800169c:	4393      	bics	r3, r2
 800169e:	2210      	movs	r2, #16
 80016a0:	431a      	orrs	r2, r3
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016aa:	2201      	movs	r2, #1
 80016ac:	431a      	orrs	r2, r3
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 80016b2:	231f      	movs	r3, #31
 80016b4:	18fb      	adds	r3, r7, r3
 80016b6:	2201      	movs	r2, #1
 80016b8:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80016ba:	e009      	b.n	80016d0 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016c0:	2210      	movs	r2, #16
 80016c2:	431a      	orrs	r2, r3
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80016c8:	231f      	movs	r3, #31
 80016ca:	18fb      	adds	r3, r7, r3
 80016cc:	2201      	movs	r2, #1
 80016ce:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 80016d0:	231f      	movs	r3, #31
 80016d2:	18fb      	adds	r3, r7, r3
 80016d4:	781b      	ldrb	r3, [r3, #0]
}
 80016d6:	0018      	movs	r0, r3
 80016d8:	46bd      	mov	sp, r7
 80016da:	b008      	add	sp, #32
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	46c0      	nop			@ (mov r8, r8)
 80016e0:	20000000 	.word	0x20000000
 80016e4:	00030d40 	.word	0x00030d40
 80016e8:	fffffefd 	.word	0xfffffefd
 80016ec:	ffde0201 	.word	0xffde0201
 80016f0:	1ffffc02 	.word	0x1ffffc02
 80016f4:	40012708 	.word	0x40012708
 80016f8:	ffc3ffff 	.word	0xffc3ffff
 80016fc:	07ffff04 	.word	0x07ffff04

08001700 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b086      	sub	sp, #24
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8001708:	2300      	movs	r3, #0
 800170a:	617b      	str	r3, [r7, #20]
  uint32_t tmp_isr = hadc->Instance->ISR;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	613b      	str	r3, [r7, #16]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800171c:	693b      	ldr	r3, [r7, #16]
 800171e:	2202      	movs	r2, #2
 8001720:	4013      	ands	r3, r2
 8001722:	d017      	beq.n	8001754 <HAL_ADC_IRQHandler+0x54>
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	2202      	movs	r2, #2
 8001728:	4013      	ands	r3, r2
 800172a:	d013      	beq.n	8001754 <HAL_ADC_IRQHandler+0x54>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001730:	2210      	movs	r2, #16
 8001732:	4013      	ands	r3, r2
 8001734:	d106      	bne.n	8001744 <HAL_ADC_IRQHandler+0x44>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800173a:	2280      	movs	r2, #128	@ 0x80
 800173c:	0112      	lsls	r2, r2, #4
 800173e:	431a      	orrs	r2, r3
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	659a      	str	r2, [r3, #88]	@ 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	0018      	movs	r0, r3
 8001748:	f000 faf2 	bl	8001d30 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	2202      	movs	r2, #2
 8001752:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001754:	693b      	ldr	r3, [r7, #16]
 8001756:	2204      	movs	r2, #4
 8001758:	4013      	ands	r3, r2
 800175a:	d003      	beq.n	8001764 <HAL_ADC_IRQHandler+0x64>
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	2204      	movs	r2, #4
 8001760:	4013      	ands	r3, r2
 8001762:	d107      	bne.n	8001774 <HAL_ADC_IRQHandler+0x74>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001764:	693b      	ldr	r3, [r7, #16]
 8001766:	2208      	movs	r2, #8
 8001768:	4013      	ands	r3, r2
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800176a:	d04d      	beq.n	8001808 <HAL_ADC_IRQHandler+0x108>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	2208      	movs	r2, #8
 8001770:	4013      	ands	r3, r2
 8001772:	d049      	beq.n	8001808 <HAL_ADC_IRQHandler+0x108>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001778:	2210      	movs	r2, #16
 800177a:	4013      	ands	r3, r2
 800177c:	d106      	bne.n	800178c <HAL_ADC_IRQHandler+0x8c>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001782:	2280      	movs	r2, #128	@ 0x80
 8001784:	0092      	lsls	r2, r2, #2
 8001786:	431a      	orrs	r2, r3
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	0018      	movs	r0, r3
 8001792:	f7ff fd46 	bl	8001222 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001796:	1e03      	subs	r3, r0, #0
 8001798:	d02e      	beq.n	80017f8 <HAL_ADC_IRQHandler+0xf8>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	7e9b      	ldrb	r3, [r3, #26]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d12a      	bne.n	80017f8 <HAL_ADC_IRQHandler+0xf8>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	2208      	movs	r2, #8
 80017aa:	4013      	ands	r3, r2
 80017ac:	2b08      	cmp	r3, #8
 80017ae:	d123      	bne.n	80017f8 <HAL_ADC_IRQHandler+0xf8>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	0018      	movs	r0, r3
 80017b6:	f7ff fdea 	bl	800138e <LL_ADC_REG_IsConversionOngoing>
 80017ba:	1e03      	subs	r3, r0, #0
 80017bc:	d110      	bne.n	80017e0 <HAL_ADC_IRQHandler+0xe0>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	685a      	ldr	r2, [r3, #4]
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	210c      	movs	r1, #12
 80017ca:	438a      	bics	r2, r1
 80017cc:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017d2:	4a56      	ldr	r2, [pc, #344]	@ (800192c <HAL_ADC_IRQHandler+0x22c>)
 80017d4:	4013      	ands	r3, r2
 80017d6:	2201      	movs	r2, #1
 80017d8:	431a      	orrs	r2, r3
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	659a      	str	r2, [r3, #88]	@ 0x58
 80017de:	e00b      	b.n	80017f8 <HAL_ADC_IRQHandler+0xf8>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017e4:	2220      	movs	r2, #32
 80017e6:	431a      	orrs	r2, r3
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017f0:	2201      	movs	r2, #1
 80017f2:	431a      	orrs	r2, r3
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	65da      	str	r2, [r3, #92]	@ 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	0018      	movs	r0, r3
 80017fc:	f000 f898 	bl	8001930 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	220c      	movs	r2, #12
 8001806:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8001808:	693b      	ldr	r3, [r7, #16]
 800180a:	2280      	movs	r2, #128	@ 0x80
 800180c:	4013      	ands	r3, r2
 800180e:	d012      	beq.n	8001836 <HAL_ADC_IRQHandler+0x136>
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	2280      	movs	r2, #128	@ 0x80
 8001814:	4013      	ands	r3, r2
 8001816:	d00e      	beq.n	8001836 <HAL_ADC_IRQHandler+0x136>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800181c:	2280      	movs	r2, #128	@ 0x80
 800181e:	0252      	lsls	r2, r2, #9
 8001820:	431a      	orrs	r2, r3
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	0018      	movs	r0, r3
 800182a:	f000 f889 	bl	8001940 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	2280      	movs	r2, #128	@ 0x80
 8001834:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8001836:	693a      	ldr	r2, [r7, #16]
 8001838:	2380      	movs	r3, #128	@ 0x80
 800183a:	005b      	lsls	r3, r3, #1
 800183c:	4013      	ands	r3, r2
 800183e:	d014      	beq.n	800186a <HAL_ADC_IRQHandler+0x16a>
 8001840:	68fa      	ldr	r2, [r7, #12]
 8001842:	2380      	movs	r3, #128	@ 0x80
 8001844:	005b      	lsls	r3, r3, #1
 8001846:	4013      	ands	r3, r2
 8001848:	d00f      	beq.n	800186a <HAL_ADC_IRQHandler+0x16a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800184e:	2280      	movs	r2, #128	@ 0x80
 8001850:	0292      	lsls	r2, r2, #10
 8001852:	431a      	orrs	r2, r3
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	0018      	movs	r0, r3
 800185c:	f000 fa58 	bl	8001d10 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	2280      	movs	r2, #128	@ 0x80
 8001866:	0052      	lsls	r2, r2, #1
 8001868:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 800186a:	693a      	ldr	r2, [r7, #16]
 800186c:	2380      	movs	r3, #128	@ 0x80
 800186e:	009b      	lsls	r3, r3, #2
 8001870:	4013      	ands	r3, r2
 8001872:	d014      	beq.n	800189e <HAL_ADC_IRQHandler+0x19e>
 8001874:	68fa      	ldr	r2, [r7, #12]
 8001876:	2380      	movs	r3, #128	@ 0x80
 8001878:	009b      	lsls	r3, r3, #2
 800187a:	4013      	ands	r3, r2
 800187c:	d00f      	beq.n	800189e <HAL_ADC_IRQHandler+0x19e>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001882:	2280      	movs	r2, #128	@ 0x80
 8001884:	02d2      	lsls	r2, r2, #11
 8001886:	431a      	orrs	r2, r3
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	0018      	movs	r0, r3
 8001890:	f000 fa46 	bl	8001d20 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	2280      	movs	r2, #128	@ 0x80
 800189a:	0092      	lsls	r2, r2, #2
 800189c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 800189e:	693b      	ldr	r3, [r7, #16]
 80018a0:	2210      	movs	r2, #16
 80018a2:	4013      	ands	r3, r2
 80018a4:	d02b      	beq.n	80018fe <HAL_ADC_IRQHandler+0x1fe>
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	2210      	movs	r2, #16
 80018aa:	4013      	ands	r3, r2
 80018ac:	d027      	beq.n	80018fe <HAL_ADC_IRQHandler+0x1fe>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d102      	bne.n	80018bc <HAL_ADC_IRQHandler+0x1bc>
    {
      overrun_error = 1UL;
 80018b6:	2301      	movs	r3, #1
 80018b8:	617b      	str	r3, [r7, #20]
 80018ba:	e008      	b.n	80018ce <HAL_ADC_IRQHandler+0x1ce>
    }
    else
    {
      /* Check DMA configuration */
      if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	0018      	movs	r0, r3
 80018c2:	f7ff fd02 	bl	80012ca <LL_ADC_REG_GetDMATransfer>
 80018c6:	1e03      	subs	r3, r0, #0
 80018c8:	d001      	beq.n	80018ce <HAL_ADC_IRQHandler+0x1ce>
      {
        overrun_error = 1UL;
 80018ca:	2301      	movs	r3, #1
 80018cc:	617b      	str	r3, [r7, #20]
      }
    }

    if (overrun_error == 1UL)
 80018ce:	697b      	ldr	r3, [r7, #20]
 80018d0:	2b01      	cmp	r3, #1
 80018d2:	d110      	bne.n	80018f6 <HAL_ADC_IRQHandler+0x1f6>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018d8:	2280      	movs	r2, #128	@ 0x80
 80018da:	00d2      	lsls	r2, r2, #3
 80018dc:	431a      	orrs	r2, r3
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018e6:	2202      	movs	r2, #2
 80018e8:	431a      	orrs	r2, r3
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	65da      	str	r2, [r3, #92]	@ 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	0018      	movs	r0, r3
 80018f2:	f000 f82d 	bl	8001950 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	2210      	movs	r2, #16
 80018fc:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check channel configuration ready flag ========== */
  if (((tmp_isr & ADC_FLAG_CCRDY) == ADC_FLAG_CCRDY) && ((tmp_ier & ADC_IT_CCRDY) == ADC_IT_CCRDY))
 80018fe:	693a      	ldr	r2, [r7, #16]
 8001900:	2380      	movs	r3, #128	@ 0x80
 8001902:	019b      	lsls	r3, r3, #6
 8001904:	4013      	ands	r3, r2
 8001906:	d00d      	beq.n	8001924 <HAL_ADC_IRQHandler+0x224>
 8001908:	68fa      	ldr	r2, [r7, #12]
 800190a:	2380      	movs	r3, #128	@ 0x80
 800190c:	019b      	lsls	r3, r3, #6
 800190e:	4013      	ands	r3, r2
 8001910:	d008      	beq.n	8001924 <HAL_ADC_IRQHandler+0x224>
  {
    /* Channel configuration ready callback */
    HAL_ADCEx_ChannelConfigReadyCallback(hadc);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	0018      	movs	r0, r3
 8001916:	f000 fa13 	bl	8001d40 <HAL_ADCEx_ChannelConfigReadyCallback>

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_CCRDY);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	2280      	movs	r2, #128	@ 0x80
 8001920:	0192      	lsls	r2, r2, #6
 8001922:	601a      	str	r2, [r3, #0]
  }
}
 8001924:	46c0      	nop			@ (mov r8, r8)
 8001926:	46bd      	mov	sp, r7
 8001928:	b006      	add	sp, #24
 800192a:	bd80      	pop	{r7, pc}
 800192c:	fffffefe 	.word	0xfffffefe

08001930 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b082      	sub	sp, #8
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001938:	46c0      	nop			@ (mov r8, r8)
 800193a:	46bd      	mov	sp, r7
 800193c:	b002      	add	sp, #8
 800193e:	bd80      	pop	{r7, pc}

08001940 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b082      	sub	sp, #8
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001948:	46c0      	nop			@ (mov r8, r8)
 800194a:	46bd      	mov	sp, r7
 800194c:	b002      	add	sp, #8
 800194e:	bd80      	pop	{r7, pc}

08001950 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b082      	sub	sp, #8
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001958:	46c0      	nop			@ (mov r8, r8)
 800195a:	46bd      	mov	sp, r7
 800195c:	b002      	add	sp, #8
 800195e:	bd80      	pop	{r7, pc}

08001960 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b086      	sub	sp, #24
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
 8001968:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800196a:	2317      	movs	r3, #23
 800196c:	18fb      	adds	r3, r7, r3
 800196e:	2200      	movs	r2, #0
 8001970:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001972:	2300      	movs	r3, #0
 8001974:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2254      	movs	r2, #84	@ 0x54
 800197a:	5c9b      	ldrb	r3, [r3, r2]
 800197c:	2b01      	cmp	r3, #1
 800197e:	d101      	bne.n	8001984 <HAL_ADC_ConfigChannel+0x24>
 8001980:	2302      	movs	r3, #2
 8001982:	e1c0      	b.n	8001d06 <HAL_ADC_ConfigChannel+0x3a6>
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2254      	movs	r2, #84	@ 0x54
 8001988:	2101      	movs	r1, #1
 800198a:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	0018      	movs	r0, r3
 8001992:	f7ff fcfc 	bl	800138e <LL_ADC_REG_IsConversionOngoing>
 8001996:	1e03      	subs	r3, r0, #0
 8001998:	d000      	beq.n	800199c <HAL_ADC_ConfigChannel+0x3c>
 800199a:	e1a3      	b.n	8001ce4 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	2b02      	cmp	r3, #2
 80019a2:	d100      	bne.n	80019a6 <HAL_ADC_ConfigChannel+0x46>
 80019a4:	e143      	b.n	8001c2e <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	691a      	ldr	r2, [r3, #16]
 80019aa:	2380      	movs	r3, #128	@ 0x80
 80019ac:	061b      	lsls	r3, r3, #24
 80019ae:	429a      	cmp	r2, r3
 80019b0:	d004      	beq.n	80019bc <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80019b6:	4ac1      	ldr	r2, [pc, #772]	@ (8001cbc <HAL_ADC_ConfigChannel+0x35c>)
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d108      	bne.n	80019ce <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681a      	ldr	r2, [r3, #0]
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	0019      	movs	r1, r3
 80019c6:	0010      	movs	r0, r2
 80019c8:	f7ff fc5c 	bl	8001284 <LL_ADC_REG_SetSequencerChAdd>
 80019cc:	e0c9      	b.n	8001b62 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	211f      	movs	r1, #31
 80019d8:	400b      	ands	r3, r1
 80019da:	210f      	movs	r1, #15
 80019dc:	4099      	lsls	r1, r3
 80019de:	000b      	movs	r3, r1
 80019e0:	43db      	mvns	r3, r3
 80019e2:	4013      	ands	r3, r2
 80019e4:	0019      	movs	r1, r3
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	035b      	lsls	r3, r3, #13
 80019ec:	0b5b      	lsrs	r3, r3, #13
 80019ee:	d105      	bne.n	80019fc <HAL_ADC_ConfigChannel+0x9c>
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	0e9b      	lsrs	r3, r3, #26
 80019f6:	221f      	movs	r2, #31
 80019f8:	4013      	ands	r3, r2
 80019fa:	e098      	b.n	8001b2e <HAL_ADC_ConfigChannel+0x1ce>
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	2201      	movs	r2, #1
 8001a02:	4013      	ands	r3, r2
 8001a04:	d000      	beq.n	8001a08 <HAL_ADC_ConfigChannel+0xa8>
 8001a06:	e091      	b.n	8001b2c <HAL_ADC_ConfigChannel+0x1cc>
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	2202      	movs	r2, #2
 8001a0e:	4013      	ands	r3, r2
 8001a10:	d000      	beq.n	8001a14 <HAL_ADC_ConfigChannel+0xb4>
 8001a12:	e089      	b.n	8001b28 <HAL_ADC_ConfigChannel+0x1c8>
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	2204      	movs	r2, #4
 8001a1a:	4013      	ands	r3, r2
 8001a1c:	d000      	beq.n	8001a20 <HAL_ADC_ConfigChannel+0xc0>
 8001a1e:	e081      	b.n	8001b24 <HAL_ADC_ConfigChannel+0x1c4>
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	2208      	movs	r2, #8
 8001a26:	4013      	ands	r3, r2
 8001a28:	d000      	beq.n	8001a2c <HAL_ADC_ConfigChannel+0xcc>
 8001a2a:	e079      	b.n	8001b20 <HAL_ADC_ConfigChannel+0x1c0>
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	2210      	movs	r2, #16
 8001a32:	4013      	ands	r3, r2
 8001a34:	d000      	beq.n	8001a38 <HAL_ADC_ConfigChannel+0xd8>
 8001a36:	e071      	b.n	8001b1c <HAL_ADC_ConfigChannel+0x1bc>
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	2220      	movs	r2, #32
 8001a3e:	4013      	ands	r3, r2
 8001a40:	d000      	beq.n	8001a44 <HAL_ADC_ConfigChannel+0xe4>
 8001a42:	e069      	b.n	8001b18 <HAL_ADC_ConfigChannel+0x1b8>
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	2240      	movs	r2, #64	@ 0x40
 8001a4a:	4013      	ands	r3, r2
 8001a4c:	d000      	beq.n	8001a50 <HAL_ADC_ConfigChannel+0xf0>
 8001a4e:	e061      	b.n	8001b14 <HAL_ADC_ConfigChannel+0x1b4>
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	2280      	movs	r2, #128	@ 0x80
 8001a56:	4013      	ands	r3, r2
 8001a58:	d000      	beq.n	8001a5c <HAL_ADC_ConfigChannel+0xfc>
 8001a5a:	e059      	b.n	8001b10 <HAL_ADC_ConfigChannel+0x1b0>
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	681a      	ldr	r2, [r3, #0]
 8001a60:	2380      	movs	r3, #128	@ 0x80
 8001a62:	005b      	lsls	r3, r3, #1
 8001a64:	4013      	ands	r3, r2
 8001a66:	d151      	bne.n	8001b0c <HAL_ADC_ConfigChannel+0x1ac>
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	681a      	ldr	r2, [r3, #0]
 8001a6c:	2380      	movs	r3, #128	@ 0x80
 8001a6e:	009b      	lsls	r3, r3, #2
 8001a70:	4013      	ands	r3, r2
 8001a72:	d149      	bne.n	8001b08 <HAL_ADC_ConfigChannel+0x1a8>
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	681a      	ldr	r2, [r3, #0]
 8001a78:	2380      	movs	r3, #128	@ 0x80
 8001a7a:	00db      	lsls	r3, r3, #3
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	d141      	bne.n	8001b04 <HAL_ADC_ConfigChannel+0x1a4>
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	681a      	ldr	r2, [r3, #0]
 8001a84:	2380      	movs	r3, #128	@ 0x80
 8001a86:	011b      	lsls	r3, r3, #4
 8001a88:	4013      	ands	r3, r2
 8001a8a:	d139      	bne.n	8001b00 <HAL_ADC_ConfigChannel+0x1a0>
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	681a      	ldr	r2, [r3, #0]
 8001a90:	2380      	movs	r3, #128	@ 0x80
 8001a92:	015b      	lsls	r3, r3, #5
 8001a94:	4013      	ands	r3, r2
 8001a96:	d131      	bne.n	8001afc <HAL_ADC_ConfigChannel+0x19c>
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	681a      	ldr	r2, [r3, #0]
 8001a9c:	2380      	movs	r3, #128	@ 0x80
 8001a9e:	019b      	lsls	r3, r3, #6
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	d129      	bne.n	8001af8 <HAL_ADC_ConfigChannel+0x198>
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	681a      	ldr	r2, [r3, #0]
 8001aa8:	2380      	movs	r3, #128	@ 0x80
 8001aaa:	01db      	lsls	r3, r3, #7
 8001aac:	4013      	ands	r3, r2
 8001aae:	d121      	bne.n	8001af4 <HAL_ADC_ConfigChannel+0x194>
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	681a      	ldr	r2, [r3, #0]
 8001ab4:	2380      	movs	r3, #128	@ 0x80
 8001ab6:	021b      	lsls	r3, r3, #8
 8001ab8:	4013      	ands	r3, r2
 8001aba:	d119      	bne.n	8001af0 <HAL_ADC_ConfigChannel+0x190>
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	681a      	ldr	r2, [r3, #0]
 8001ac0:	2380      	movs	r3, #128	@ 0x80
 8001ac2:	025b      	lsls	r3, r3, #9
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	d111      	bne.n	8001aec <HAL_ADC_ConfigChannel+0x18c>
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	681a      	ldr	r2, [r3, #0]
 8001acc:	2380      	movs	r3, #128	@ 0x80
 8001ace:	029b      	lsls	r3, r3, #10
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	d109      	bne.n	8001ae8 <HAL_ADC_ConfigChannel+0x188>
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	2380      	movs	r3, #128	@ 0x80
 8001ada:	02db      	lsls	r3, r3, #11
 8001adc:	4013      	ands	r3, r2
 8001ade:	d001      	beq.n	8001ae4 <HAL_ADC_ConfigChannel+0x184>
 8001ae0:	2312      	movs	r3, #18
 8001ae2:	e024      	b.n	8001b2e <HAL_ADC_ConfigChannel+0x1ce>
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	e022      	b.n	8001b2e <HAL_ADC_ConfigChannel+0x1ce>
 8001ae8:	2311      	movs	r3, #17
 8001aea:	e020      	b.n	8001b2e <HAL_ADC_ConfigChannel+0x1ce>
 8001aec:	2310      	movs	r3, #16
 8001aee:	e01e      	b.n	8001b2e <HAL_ADC_ConfigChannel+0x1ce>
 8001af0:	230f      	movs	r3, #15
 8001af2:	e01c      	b.n	8001b2e <HAL_ADC_ConfigChannel+0x1ce>
 8001af4:	230e      	movs	r3, #14
 8001af6:	e01a      	b.n	8001b2e <HAL_ADC_ConfigChannel+0x1ce>
 8001af8:	230d      	movs	r3, #13
 8001afa:	e018      	b.n	8001b2e <HAL_ADC_ConfigChannel+0x1ce>
 8001afc:	230c      	movs	r3, #12
 8001afe:	e016      	b.n	8001b2e <HAL_ADC_ConfigChannel+0x1ce>
 8001b00:	230b      	movs	r3, #11
 8001b02:	e014      	b.n	8001b2e <HAL_ADC_ConfigChannel+0x1ce>
 8001b04:	230a      	movs	r3, #10
 8001b06:	e012      	b.n	8001b2e <HAL_ADC_ConfigChannel+0x1ce>
 8001b08:	2309      	movs	r3, #9
 8001b0a:	e010      	b.n	8001b2e <HAL_ADC_ConfigChannel+0x1ce>
 8001b0c:	2308      	movs	r3, #8
 8001b0e:	e00e      	b.n	8001b2e <HAL_ADC_ConfigChannel+0x1ce>
 8001b10:	2307      	movs	r3, #7
 8001b12:	e00c      	b.n	8001b2e <HAL_ADC_ConfigChannel+0x1ce>
 8001b14:	2306      	movs	r3, #6
 8001b16:	e00a      	b.n	8001b2e <HAL_ADC_ConfigChannel+0x1ce>
 8001b18:	2305      	movs	r3, #5
 8001b1a:	e008      	b.n	8001b2e <HAL_ADC_ConfigChannel+0x1ce>
 8001b1c:	2304      	movs	r3, #4
 8001b1e:	e006      	b.n	8001b2e <HAL_ADC_ConfigChannel+0x1ce>
 8001b20:	2303      	movs	r3, #3
 8001b22:	e004      	b.n	8001b2e <HAL_ADC_ConfigChannel+0x1ce>
 8001b24:	2302      	movs	r3, #2
 8001b26:	e002      	b.n	8001b2e <HAL_ADC_ConfigChannel+0x1ce>
 8001b28:	2301      	movs	r3, #1
 8001b2a:	e000      	b.n	8001b2e <HAL_ADC_ConfigChannel+0x1ce>
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	683a      	ldr	r2, [r7, #0]
 8001b30:	6852      	ldr	r2, [r2, #4]
 8001b32:	201f      	movs	r0, #31
 8001b34:	4002      	ands	r2, r0
 8001b36:	4093      	lsls	r3, r2
 8001b38:	000a      	movs	r2, r1
 8001b3a:	431a      	orrs	r2, r3
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	089b      	lsrs	r3, r3, #2
 8001b46:	1c5a      	adds	r2, r3, #1
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	69db      	ldr	r3, [r3, #28]
 8001b4c:	429a      	cmp	r2, r3
 8001b4e:	d808      	bhi.n	8001b62 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6818      	ldr	r0, [r3, #0]
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	6859      	ldr	r1, [r3, #4]
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	001a      	movs	r2, r3
 8001b5e:	f7ff fb71 	bl	8001244 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6818      	ldr	r0, [r3, #0]
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	6819      	ldr	r1, [r3, #0]
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	689b      	ldr	r3, [r3, #8]
 8001b6e:	001a      	movs	r2, r3
 8001b70:	f7ff fbb8 	bl	80012e4 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	db00      	blt.n	8001b7e <HAL_ADC_ConfigChannel+0x21e>
 8001b7c:	e0bc      	b.n	8001cf8 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001b7e:	4b50      	ldr	r3, [pc, #320]	@ (8001cc0 <HAL_ADC_ConfigChannel+0x360>)
 8001b80:	0018      	movs	r0, r3
 8001b82:	f7ff fb0d 	bl	80011a0 <LL_ADC_GetCommonPathInternalCh>
 8001b86:	0003      	movs	r3, r0
 8001b88:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4a4d      	ldr	r2, [pc, #308]	@ (8001cc4 <HAL_ADC_ConfigChannel+0x364>)
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d122      	bne.n	8001bda <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001b94:	693a      	ldr	r2, [r7, #16]
 8001b96:	2380      	movs	r3, #128	@ 0x80
 8001b98:	041b      	lsls	r3, r3, #16
 8001b9a:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001b9c:	d11d      	bne.n	8001bda <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001b9e:	693b      	ldr	r3, [r7, #16]
 8001ba0:	2280      	movs	r2, #128	@ 0x80
 8001ba2:	0412      	lsls	r2, r2, #16
 8001ba4:	4313      	orrs	r3, r2
 8001ba6:	4a46      	ldr	r2, [pc, #280]	@ (8001cc0 <HAL_ADC_ConfigChannel+0x360>)
 8001ba8:	0019      	movs	r1, r3
 8001baa:	0010      	movs	r0, r2
 8001bac:	f7ff fae4 	bl	8001178 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001bb0:	4b45      	ldr	r3, [pc, #276]	@ (8001cc8 <HAL_ADC_ConfigChannel+0x368>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4945      	ldr	r1, [pc, #276]	@ (8001ccc <HAL_ADC_ConfigChannel+0x36c>)
 8001bb6:	0018      	movs	r0, r3
 8001bb8:	f7fe fafe 	bl	80001b8 <__udivsi3>
 8001bbc:	0003      	movs	r3, r0
 8001bbe:	1c5a      	adds	r2, r3, #1
 8001bc0:	0013      	movs	r3, r2
 8001bc2:	005b      	lsls	r3, r3, #1
 8001bc4:	189b      	adds	r3, r3, r2
 8001bc6:	009b      	lsls	r3, r3, #2
 8001bc8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001bca:	e002      	b.n	8001bd2 <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	3b01      	subs	r3, #1
 8001bd0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d1f9      	bne.n	8001bcc <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001bd8:	e08e      	b.n	8001cf8 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4a3c      	ldr	r2, [pc, #240]	@ (8001cd0 <HAL_ADC_ConfigChannel+0x370>)
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d10e      	bne.n	8001c02 <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001be4:	693a      	ldr	r2, [r7, #16]
 8001be6:	2380      	movs	r3, #128	@ 0x80
 8001be8:	045b      	lsls	r3, r3, #17
 8001bea:	4013      	ands	r3, r2
 8001bec:	d109      	bne.n	8001c02 <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001bee:	693b      	ldr	r3, [r7, #16]
 8001bf0:	2280      	movs	r2, #128	@ 0x80
 8001bf2:	0452      	lsls	r2, r2, #17
 8001bf4:	4313      	orrs	r3, r2
 8001bf6:	4a32      	ldr	r2, [pc, #200]	@ (8001cc0 <HAL_ADC_ConfigChannel+0x360>)
 8001bf8:	0019      	movs	r1, r3
 8001bfa:	0010      	movs	r0, r2
 8001bfc:	f7ff fabc 	bl	8001178 <LL_ADC_SetCommonPathInternalCh>
 8001c00:	e07a      	b.n	8001cf8 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4a33      	ldr	r2, [pc, #204]	@ (8001cd4 <HAL_ADC_ConfigChannel+0x374>)
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d000      	beq.n	8001c0e <HAL_ADC_ConfigChannel+0x2ae>
 8001c0c:	e074      	b.n	8001cf8 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001c0e:	693a      	ldr	r2, [r7, #16]
 8001c10:	2380      	movs	r3, #128	@ 0x80
 8001c12:	03db      	lsls	r3, r3, #15
 8001c14:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001c16:	d000      	beq.n	8001c1a <HAL_ADC_ConfigChannel+0x2ba>
 8001c18:	e06e      	b.n	8001cf8 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001c1a:	693b      	ldr	r3, [r7, #16]
 8001c1c:	2280      	movs	r2, #128	@ 0x80
 8001c1e:	03d2      	lsls	r2, r2, #15
 8001c20:	4313      	orrs	r3, r2
 8001c22:	4a27      	ldr	r2, [pc, #156]	@ (8001cc0 <HAL_ADC_ConfigChannel+0x360>)
 8001c24:	0019      	movs	r1, r3
 8001c26:	0010      	movs	r0, r2
 8001c28:	f7ff faa6 	bl	8001178 <LL_ADC_SetCommonPathInternalCh>
 8001c2c:	e064      	b.n	8001cf8 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	691a      	ldr	r2, [r3, #16]
 8001c32:	2380      	movs	r3, #128	@ 0x80
 8001c34:	061b      	lsls	r3, r3, #24
 8001c36:	429a      	cmp	r2, r3
 8001c38:	d004      	beq.n	8001c44 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001c3e:	4a1f      	ldr	r2, [pc, #124]	@ (8001cbc <HAL_ADC_ConfigChannel+0x35c>)
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d107      	bne.n	8001c54 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681a      	ldr	r2, [r3, #0]
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	0019      	movs	r1, r3
 8001c4e:	0010      	movs	r0, r2
 8001c50:	f7ff fb29 	bl	80012a6 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	da4d      	bge.n	8001cf8 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001c5c:	4b18      	ldr	r3, [pc, #96]	@ (8001cc0 <HAL_ADC_ConfigChannel+0x360>)
 8001c5e:	0018      	movs	r0, r3
 8001c60:	f7ff fa9e 	bl	80011a0 <LL_ADC_GetCommonPathInternalCh>
 8001c64:	0003      	movs	r3, r0
 8001c66:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a15      	ldr	r2, [pc, #84]	@ (8001cc4 <HAL_ADC_ConfigChannel+0x364>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d108      	bne.n	8001c84 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	4a18      	ldr	r2, [pc, #96]	@ (8001cd8 <HAL_ADC_ConfigChannel+0x378>)
 8001c76:	4013      	ands	r3, r2
 8001c78:	4a11      	ldr	r2, [pc, #68]	@ (8001cc0 <HAL_ADC_ConfigChannel+0x360>)
 8001c7a:	0019      	movs	r1, r3
 8001c7c:	0010      	movs	r0, r2
 8001c7e:	f7ff fa7b 	bl	8001178 <LL_ADC_SetCommonPathInternalCh>
 8001c82:	e039      	b.n	8001cf8 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a11      	ldr	r2, [pc, #68]	@ (8001cd0 <HAL_ADC_ConfigChannel+0x370>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d108      	bne.n	8001ca0 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	4a12      	ldr	r2, [pc, #72]	@ (8001cdc <HAL_ADC_ConfigChannel+0x37c>)
 8001c92:	4013      	ands	r3, r2
 8001c94:	4a0a      	ldr	r2, [pc, #40]	@ (8001cc0 <HAL_ADC_ConfigChannel+0x360>)
 8001c96:	0019      	movs	r1, r3
 8001c98:	0010      	movs	r0, r2
 8001c9a:	f7ff fa6d 	bl	8001178 <LL_ADC_SetCommonPathInternalCh>
 8001c9e:	e02b      	b.n	8001cf8 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a0b      	ldr	r2, [pc, #44]	@ (8001cd4 <HAL_ADC_ConfigChannel+0x374>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d126      	bne.n	8001cf8 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001caa:	693b      	ldr	r3, [r7, #16]
 8001cac:	4a0c      	ldr	r2, [pc, #48]	@ (8001ce0 <HAL_ADC_ConfigChannel+0x380>)
 8001cae:	4013      	ands	r3, r2
 8001cb0:	4a03      	ldr	r2, [pc, #12]	@ (8001cc0 <HAL_ADC_ConfigChannel+0x360>)
 8001cb2:	0019      	movs	r1, r3
 8001cb4:	0010      	movs	r0, r2
 8001cb6:	f7ff fa5f 	bl	8001178 <LL_ADC_SetCommonPathInternalCh>
 8001cba:	e01d      	b.n	8001cf8 <HAL_ADC_ConfigChannel+0x398>
 8001cbc:	80000004 	.word	0x80000004
 8001cc0:	40012708 	.word	0x40012708
 8001cc4:	b0001000 	.word	0xb0001000
 8001cc8:	20000000 	.word	0x20000000
 8001ccc:	00030d40 	.word	0x00030d40
 8001cd0:	b8004000 	.word	0xb8004000
 8001cd4:	b4002000 	.word	0xb4002000
 8001cd8:	ff7fffff 	.word	0xff7fffff
 8001cdc:	feffffff 	.word	0xfeffffff
 8001ce0:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ce8:	2220      	movs	r2, #32
 8001cea:	431a      	orrs	r2, r3
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001cf0:	2317      	movs	r3, #23
 8001cf2:	18fb      	adds	r3, r7, r3
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2254      	movs	r2, #84	@ 0x54
 8001cfc:	2100      	movs	r1, #0
 8001cfe:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8001d00:	2317      	movs	r3, #23
 8001d02:	18fb      	adds	r3, r7, r3
 8001d04:	781b      	ldrb	r3, [r3, #0]
}
 8001d06:	0018      	movs	r0, r3
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	b006      	add	sp, #24
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	46c0      	nop			@ (mov r8, r8)

08001d10 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b082      	sub	sp, #8
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8001d18:	46c0      	nop			@ (mov r8, r8)
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	b002      	add	sp, #8
 8001d1e:	bd80      	pop	{r7, pc}

08001d20 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b082      	sub	sp, #8
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8001d28:	46c0      	nop			@ (mov r8, r8)
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	b002      	add	sp, #8
 8001d2e:	bd80      	pop	{r7, pc}

08001d30 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b082      	sub	sp, #8
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8001d38:	46c0      	nop			@ (mov r8, r8)
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	b002      	add	sp, #8
 8001d3e:	bd80      	pop	{r7, pc}

08001d40 <HAL_ADCEx_ChannelConfigReadyCallback>:
  * @brief  ADC channel configuration ready callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_ChannelConfigReadyCallback(ADC_HandleTypeDef *hadc)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b082      	sub	sp, #8
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_ChannelConfigReadyCallback must be implemented in the user file.
  */
}
 8001d48:	46c0      	nop			@ (mov r8, r8)
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	b002      	add	sp, #8
 8001d4e:	bd80      	pop	{r7, pc}

08001d50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b082      	sub	sp, #8
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	0002      	movs	r2, r0
 8001d58:	1dfb      	adds	r3, r7, #7
 8001d5a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001d5c:	1dfb      	adds	r3, r7, #7
 8001d5e:	781b      	ldrb	r3, [r3, #0]
 8001d60:	2b7f      	cmp	r3, #127	@ 0x7f
 8001d62:	d809      	bhi.n	8001d78 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d64:	1dfb      	adds	r3, r7, #7
 8001d66:	781b      	ldrb	r3, [r3, #0]
 8001d68:	001a      	movs	r2, r3
 8001d6a:	231f      	movs	r3, #31
 8001d6c:	401a      	ands	r2, r3
 8001d6e:	4b04      	ldr	r3, [pc, #16]	@ (8001d80 <__NVIC_EnableIRQ+0x30>)
 8001d70:	2101      	movs	r1, #1
 8001d72:	4091      	lsls	r1, r2
 8001d74:	000a      	movs	r2, r1
 8001d76:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8001d78:	46c0      	nop			@ (mov r8, r8)
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	b002      	add	sp, #8
 8001d7e:	bd80      	pop	{r7, pc}
 8001d80:	e000e100 	.word	0xe000e100

08001d84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d84:	b590      	push	{r4, r7, lr}
 8001d86:	b083      	sub	sp, #12
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	0002      	movs	r2, r0
 8001d8c:	6039      	str	r1, [r7, #0]
 8001d8e:	1dfb      	adds	r3, r7, #7
 8001d90:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001d92:	1dfb      	adds	r3, r7, #7
 8001d94:	781b      	ldrb	r3, [r3, #0]
 8001d96:	2b7f      	cmp	r3, #127	@ 0x7f
 8001d98:	d828      	bhi.n	8001dec <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001d9a:	4a2f      	ldr	r2, [pc, #188]	@ (8001e58 <__NVIC_SetPriority+0xd4>)
 8001d9c:	1dfb      	adds	r3, r7, #7
 8001d9e:	781b      	ldrb	r3, [r3, #0]
 8001da0:	b25b      	sxtb	r3, r3
 8001da2:	089b      	lsrs	r3, r3, #2
 8001da4:	33c0      	adds	r3, #192	@ 0xc0
 8001da6:	009b      	lsls	r3, r3, #2
 8001da8:	589b      	ldr	r3, [r3, r2]
 8001daa:	1dfa      	adds	r2, r7, #7
 8001dac:	7812      	ldrb	r2, [r2, #0]
 8001dae:	0011      	movs	r1, r2
 8001db0:	2203      	movs	r2, #3
 8001db2:	400a      	ands	r2, r1
 8001db4:	00d2      	lsls	r2, r2, #3
 8001db6:	21ff      	movs	r1, #255	@ 0xff
 8001db8:	4091      	lsls	r1, r2
 8001dba:	000a      	movs	r2, r1
 8001dbc:	43d2      	mvns	r2, r2
 8001dbe:	401a      	ands	r2, r3
 8001dc0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	019b      	lsls	r3, r3, #6
 8001dc6:	22ff      	movs	r2, #255	@ 0xff
 8001dc8:	401a      	ands	r2, r3
 8001dca:	1dfb      	adds	r3, r7, #7
 8001dcc:	781b      	ldrb	r3, [r3, #0]
 8001dce:	0018      	movs	r0, r3
 8001dd0:	2303      	movs	r3, #3
 8001dd2:	4003      	ands	r3, r0
 8001dd4:	00db      	lsls	r3, r3, #3
 8001dd6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001dd8:	481f      	ldr	r0, [pc, #124]	@ (8001e58 <__NVIC_SetPriority+0xd4>)
 8001dda:	1dfb      	adds	r3, r7, #7
 8001ddc:	781b      	ldrb	r3, [r3, #0]
 8001dde:	b25b      	sxtb	r3, r3
 8001de0:	089b      	lsrs	r3, r3, #2
 8001de2:	430a      	orrs	r2, r1
 8001de4:	33c0      	adds	r3, #192	@ 0xc0
 8001de6:	009b      	lsls	r3, r3, #2
 8001de8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001dea:	e031      	b.n	8001e50 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001dec:	4a1b      	ldr	r2, [pc, #108]	@ (8001e5c <__NVIC_SetPriority+0xd8>)
 8001dee:	1dfb      	adds	r3, r7, #7
 8001df0:	781b      	ldrb	r3, [r3, #0]
 8001df2:	0019      	movs	r1, r3
 8001df4:	230f      	movs	r3, #15
 8001df6:	400b      	ands	r3, r1
 8001df8:	3b08      	subs	r3, #8
 8001dfa:	089b      	lsrs	r3, r3, #2
 8001dfc:	3306      	adds	r3, #6
 8001dfe:	009b      	lsls	r3, r3, #2
 8001e00:	18d3      	adds	r3, r2, r3
 8001e02:	3304      	adds	r3, #4
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	1dfa      	adds	r2, r7, #7
 8001e08:	7812      	ldrb	r2, [r2, #0]
 8001e0a:	0011      	movs	r1, r2
 8001e0c:	2203      	movs	r2, #3
 8001e0e:	400a      	ands	r2, r1
 8001e10:	00d2      	lsls	r2, r2, #3
 8001e12:	21ff      	movs	r1, #255	@ 0xff
 8001e14:	4091      	lsls	r1, r2
 8001e16:	000a      	movs	r2, r1
 8001e18:	43d2      	mvns	r2, r2
 8001e1a:	401a      	ands	r2, r3
 8001e1c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	019b      	lsls	r3, r3, #6
 8001e22:	22ff      	movs	r2, #255	@ 0xff
 8001e24:	401a      	ands	r2, r3
 8001e26:	1dfb      	adds	r3, r7, #7
 8001e28:	781b      	ldrb	r3, [r3, #0]
 8001e2a:	0018      	movs	r0, r3
 8001e2c:	2303      	movs	r3, #3
 8001e2e:	4003      	ands	r3, r0
 8001e30:	00db      	lsls	r3, r3, #3
 8001e32:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001e34:	4809      	ldr	r0, [pc, #36]	@ (8001e5c <__NVIC_SetPriority+0xd8>)
 8001e36:	1dfb      	adds	r3, r7, #7
 8001e38:	781b      	ldrb	r3, [r3, #0]
 8001e3a:	001c      	movs	r4, r3
 8001e3c:	230f      	movs	r3, #15
 8001e3e:	4023      	ands	r3, r4
 8001e40:	3b08      	subs	r3, #8
 8001e42:	089b      	lsrs	r3, r3, #2
 8001e44:	430a      	orrs	r2, r1
 8001e46:	3306      	adds	r3, #6
 8001e48:	009b      	lsls	r3, r3, #2
 8001e4a:	18c3      	adds	r3, r0, r3
 8001e4c:	3304      	adds	r3, #4
 8001e4e:	601a      	str	r2, [r3, #0]
}
 8001e50:	46c0      	nop			@ (mov r8, r8)
 8001e52:	46bd      	mov	sp, r7
 8001e54:	b003      	add	sp, #12
 8001e56:	bd90      	pop	{r4, r7, pc}
 8001e58:	e000e100 	.word	0xe000e100
 8001e5c:	e000ed00 	.word	0xe000ed00

08001e60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b082      	sub	sp, #8
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	1e5a      	subs	r2, r3, #1
 8001e6c:	2380      	movs	r3, #128	@ 0x80
 8001e6e:	045b      	lsls	r3, r3, #17
 8001e70:	429a      	cmp	r2, r3
 8001e72:	d301      	bcc.n	8001e78 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e74:	2301      	movs	r3, #1
 8001e76:	e010      	b.n	8001e9a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e78:	4b0a      	ldr	r3, [pc, #40]	@ (8001ea4 <SysTick_Config+0x44>)
 8001e7a:	687a      	ldr	r2, [r7, #4]
 8001e7c:	3a01      	subs	r2, #1
 8001e7e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e80:	2301      	movs	r3, #1
 8001e82:	425b      	negs	r3, r3
 8001e84:	2103      	movs	r1, #3
 8001e86:	0018      	movs	r0, r3
 8001e88:	f7ff ff7c 	bl	8001d84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e8c:	4b05      	ldr	r3, [pc, #20]	@ (8001ea4 <SysTick_Config+0x44>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e92:	4b04      	ldr	r3, [pc, #16]	@ (8001ea4 <SysTick_Config+0x44>)
 8001e94:	2207      	movs	r2, #7
 8001e96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e98:	2300      	movs	r3, #0
}
 8001e9a:	0018      	movs	r0, r3
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	b002      	add	sp, #8
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	46c0      	nop			@ (mov r8, r8)
 8001ea4:	e000e010 	.word	0xe000e010

08001ea8 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b084      	sub	sp, #16
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	60b9      	str	r1, [r7, #8]
 8001eb0:	607a      	str	r2, [r7, #4]
 8001eb2:	210f      	movs	r1, #15
 8001eb4:	187b      	adds	r3, r7, r1
 8001eb6:	1c02      	adds	r2, r0, #0
 8001eb8:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001eba:	68ba      	ldr	r2, [r7, #8]
 8001ebc:	187b      	adds	r3, r7, r1
 8001ebe:	781b      	ldrb	r3, [r3, #0]
 8001ec0:	b25b      	sxtb	r3, r3
 8001ec2:	0011      	movs	r1, r2
 8001ec4:	0018      	movs	r0, r3
 8001ec6:	f7ff ff5d 	bl	8001d84 <__NVIC_SetPriority>
}
 8001eca:	46c0      	nop			@ (mov r8, r8)
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	b004      	add	sp, #16
 8001ed0:	bd80      	pop	{r7, pc}

08001ed2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ed2:	b580      	push	{r7, lr}
 8001ed4:	b082      	sub	sp, #8
 8001ed6:	af00      	add	r7, sp, #0
 8001ed8:	0002      	movs	r2, r0
 8001eda:	1dfb      	adds	r3, r7, #7
 8001edc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ede:	1dfb      	adds	r3, r7, #7
 8001ee0:	781b      	ldrb	r3, [r3, #0]
 8001ee2:	b25b      	sxtb	r3, r3
 8001ee4:	0018      	movs	r0, r3
 8001ee6:	f7ff ff33 	bl	8001d50 <__NVIC_EnableIRQ>
}
 8001eea:	46c0      	nop			@ (mov r8, r8)
 8001eec:	46bd      	mov	sp, r7
 8001eee:	b002      	add	sp, #8
 8001ef0:	bd80      	pop	{r7, pc}

08001ef2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ef2:	b580      	push	{r7, lr}
 8001ef4:	b082      	sub	sp, #8
 8001ef6:	af00      	add	r7, sp, #0
 8001ef8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	0018      	movs	r0, r3
 8001efe:	f7ff ffaf 	bl	8001e60 <SysTick_Config>
 8001f02:	0003      	movs	r3, r0
}
 8001f04:	0018      	movs	r0, r3
 8001f06:	46bd      	mov	sp, r7
 8001f08:	b002      	add	sp, #8
 8001f0a:	bd80      	pop	{r7, pc}

08001f0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b086      	sub	sp, #24
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
 8001f14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f16:	2300      	movs	r3, #0
 8001f18:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f1a:	e147      	b.n	80021ac <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	2101      	movs	r1, #1
 8001f22:	697a      	ldr	r2, [r7, #20]
 8001f24:	4091      	lsls	r1, r2
 8001f26:	000a      	movs	r2, r1
 8001f28:	4013      	ands	r3, r2
 8001f2a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d100      	bne.n	8001f34 <HAL_GPIO_Init+0x28>
 8001f32:	e138      	b.n	80021a6 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	2203      	movs	r2, #3
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	2b01      	cmp	r3, #1
 8001f3e:	d005      	beq.n	8001f4c <HAL_GPIO_Init+0x40>
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	2203      	movs	r2, #3
 8001f46:	4013      	ands	r3, r2
 8001f48:	2b02      	cmp	r3, #2
 8001f4a:	d130      	bne.n	8001fae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	689b      	ldr	r3, [r3, #8]
 8001f50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001f52:	697b      	ldr	r3, [r7, #20]
 8001f54:	005b      	lsls	r3, r3, #1
 8001f56:	2203      	movs	r2, #3
 8001f58:	409a      	lsls	r2, r3
 8001f5a:	0013      	movs	r3, r2
 8001f5c:	43da      	mvns	r2, r3
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	4013      	ands	r3, r2
 8001f62:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	68da      	ldr	r2, [r3, #12]
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	005b      	lsls	r3, r3, #1
 8001f6c:	409a      	lsls	r2, r3
 8001f6e:	0013      	movs	r3, r2
 8001f70:	693a      	ldr	r2, [r7, #16]
 8001f72:	4313      	orrs	r3, r2
 8001f74:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	693a      	ldr	r2, [r7, #16]
 8001f7a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001f82:	2201      	movs	r2, #1
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	409a      	lsls	r2, r3
 8001f88:	0013      	movs	r3, r2
 8001f8a:	43da      	mvns	r2, r3
 8001f8c:	693b      	ldr	r3, [r7, #16]
 8001f8e:	4013      	ands	r3, r2
 8001f90:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	091b      	lsrs	r3, r3, #4
 8001f98:	2201      	movs	r2, #1
 8001f9a:	401a      	ands	r2, r3
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	409a      	lsls	r2, r3
 8001fa0:	0013      	movs	r3, r2
 8001fa2:	693a      	ldr	r2, [r7, #16]
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	693a      	ldr	r2, [r7, #16]
 8001fac:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	2203      	movs	r2, #3
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	2b03      	cmp	r3, #3
 8001fb8:	d017      	beq.n	8001fea <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	68db      	ldr	r3, [r3, #12]
 8001fbe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	005b      	lsls	r3, r3, #1
 8001fc4:	2203      	movs	r2, #3
 8001fc6:	409a      	lsls	r2, r3
 8001fc8:	0013      	movs	r3, r2
 8001fca:	43da      	mvns	r2, r3
 8001fcc:	693b      	ldr	r3, [r7, #16]
 8001fce:	4013      	ands	r3, r2
 8001fd0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	689a      	ldr	r2, [r3, #8]
 8001fd6:	697b      	ldr	r3, [r7, #20]
 8001fd8:	005b      	lsls	r3, r3, #1
 8001fda:	409a      	lsls	r2, r3
 8001fdc:	0013      	movs	r3, r2
 8001fde:	693a      	ldr	r2, [r7, #16]
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	693a      	ldr	r2, [r7, #16]
 8001fe8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	2203      	movs	r2, #3
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	2b02      	cmp	r3, #2
 8001ff4:	d123      	bne.n	800203e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001ff6:	697b      	ldr	r3, [r7, #20]
 8001ff8:	08da      	lsrs	r2, r3, #3
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	3208      	adds	r2, #8
 8001ffe:	0092      	lsls	r2, r2, #2
 8002000:	58d3      	ldr	r3, [r2, r3]
 8002002:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	2207      	movs	r2, #7
 8002008:	4013      	ands	r3, r2
 800200a:	009b      	lsls	r3, r3, #2
 800200c:	220f      	movs	r2, #15
 800200e:	409a      	lsls	r2, r3
 8002010:	0013      	movs	r3, r2
 8002012:	43da      	mvns	r2, r3
 8002014:	693b      	ldr	r3, [r7, #16]
 8002016:	4013      	ands	r3, r2
 8002018:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	691a      	ldr	r2, [r3, #16]
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	2107      	movs	r1, #7
 8002022:	400b      	ands	r3, r1
 8002024:	009b      	lsls	r3, r3, #2
 8002026:	409a      	lsls	r2, r3
 8002028:	0013      	movs	r3, r2
 800202a:	693a      	ldr	r2, [r7, #16]
 800202c:	4313      	orrs	r3, r2
 800202e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	08da      	lsrs	r2, r3, #3
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	3208      	adds	r2, #8
 8002038:	0092      	lsls	r2, r2, #2
 800203a:	6939      	ldr	r1, [r7, #16]
 800203c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	005b      	lsls	r3, r3, #1
 8002048:	2203      	movs	r2, #3
 800204a:	409a      	lsls	r2, r3
 800204c:	0013      	movs	r3, r2
 800204e:	43da      	mvns	r2, r3
 8002050:	693b      	ldr	r3, [r7, #16]
 8002052:	4013      	ands	r3, r2
 8002054:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	2203      	movs	r2, #3
 800205c:	401a      	ands	r2, r3
 800205e:	697b      	ldr	r3, [r7, #20]
 8002060:	005b      	lsls	r3, r3, #1
 8002062:	409a      	lsls	r2, r3
 8002064:	0013      	movs	r3, r2
 8002066:	693a      	ldr	r2, [r7, #16]
 8002068:	4313      	orrs	r3, r2
 800206a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	693a      	ldr	r2, [r7, #16]
 8002070:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	685a      	ldr	r2, [r3, #4]
 8002076:	23c0      	movs	r3, #192	@ 0xc0
 8002078:	029b      	lsls	r3, r3, #10
 800207a:	4013      	ands	r3, r2
 800207c:	d100      	bne.n	8002080 <HAL_GPIO_Init+0x174>
 800207e:	e092      	b.n	80021a6 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8002080:	4a50      	ldr	r2, [pc, #320]	@ (80021c4 <HAL_GPIO_Init+0x2b8>)
 8002082:	697b      	ldr	r3, [r7, #20]
 8002084:	089b      	lsrs	r3, r3, #2
 8002086:	3318      	adds	r3, #24
 8002088:	009b      	lsls	r3, r3, #2
 800208a:	589b      	ldr	r3, [r3, r2]
 800208c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800208e:	697b      	ldr	r3, [r7, #20]
 8002090:	2203      	movs	r2, #3
 8002092:	4013      	ands	r3, r2
 8002094:	00db      	lsls	r3, r3, #3
 8002096:	220f      	movs	r2, #15
 8002098:	409a      	lsls	r2, r3
 800209a:	0013      	movs	r3, r2
 800209c:	43da      	mvns	r2, r3
 800209e:	693b      	ldr	r3, [r7, #16]
 80020a0:	4013      	ands	r3, r2
 80020a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80020a4:	687a      	ldr	r2, [r7, #4]
 80020a6:	23a0      	movs	r3, #160	@ 0xa0
 80020a8:	05db      	lsls	r3, r3, #23
 80020aa:	429a      	cmp	r2, r3
 80020ac:	d013      	beq.n	80020d6 <HAL_GPIO_Init+0x1ca>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	4a45      	ldr	r2, [pc, #276]	@ (80021c8 <HAL_GPIO_Init+0x2bc>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d00d      	beq.n	80020d2 <HAL_GPIO_Init+0x1c6>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	4a44      	ldr	r2, [pc, #272]	@ (80021cc <HAL_GPIO_Init+0x2c0>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d007      	beq.n	80020ce <HAL_GPIO_Init+0x1c2>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	4a43      	ldr	r2, [pc, #268]	@ (80021d0 <HAL_GPIO_Init+0x2c4>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d101      	bne.n	80020ca <HAL_GPIO_Init+0x1be>
 80020c6:	2303      	movs	r3, #3
 80020c8:	e006      	b.n	80020d8 <HAL_GPIO_Init+0x1cc>
 80020ca:	2305      	movs	r3, #5
 80020cc:	e004      	b.n	80020d8 <HAL_GPIO_Init+0x1cc>
 80020ce:	2302      	movs	r3, #2
 80020d0:	e002      	b.n	80020d8 <HAL_GPIO_Init+0x1cc>
 80020d2:	2301      	movs	r3, #1
 80020d4:	e000      	b.n	80020d8 <HAL_GPIO_Init+0x1cc>
 80020d6:	2300      	movs	r3, #0
 80020d8:	697a      	ldr	r2, [r7, #20]
 80020da:	2103      	movs	r1, #3
 80020dc:	400a      	ands	r2, r1
 80020de:	00d2      	lsls	r2, r2, #3
 80020e0:	4093      	lsls	r3, r2
 80020e2:	693a      	ldr	r2, [r7, #16]
 80020e4:	4313      	orrs	r3, r2
 80020e6:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80020e8:	4936      	ldr	r1, [pc, #216]	@ (80021c4 <HAL_GPIO_Init+0x2b8>)
 80020ea:	697b      	ldr	r3, [r7, #20]
 80020ec:	089b      	lsrs	r3, r3, #2
 80020ee:	3318      	adds	r3, #24
 80020f0:	009b      	lsls	r3, r3, #2
 80020f2:	693a      	ldr	r2, [r7, #16]
 80020f4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80020f6:	4b33      	ldr	r3, [pc, #204]	@ (80021c4 <HAL_GPIO_Init+0x2b8>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	43da      	mvns	r2, r3
 8002100:	693b      	ldr	r3, [r7, #16]
 8002102:	4013      	ands	r3, r2
 8002104:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	685a      	ldr	r2, [r3, #4]
 800210a:	2380      	movs	r3, #128	@ 0x80
 800210c:	035b      	lsls	r3, r3, #13
 800210e:	4013      	ands	r3, r2
 8002110:	d003      	beq.n	800211a <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8002112:	693a      	ldr	r2, [r7, #16]
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	4313      	orrs	r3, r2
 8002118:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800211a:	4b2a      	ldr	r3, [pc, #168]	@ (80021c4 <HAL_GPIO_Init+0x2b8>)
 800211c:	693a      	ldr	r2, [r7, #16]
 800211e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8002120:	4b28      	ldr	r3, [pc, #160]	@ (80021c4 <HAL_GPIO_Init+0x2b8>)
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	43da      	mvns	r2, r3
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	4013      	ands	r3, r2
 800212e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	685a      	ldr	r2, [r3, #4]
 8002134:	2380      	movs	r3, #128	@ 0x80
 8002136:	039b      	lsls	r3, r3, #14
 8002138:	4013      	ands	r3, r2
 800213a:	d003      	beq.n	8002144 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 800213c:	693a      	ldr	r2, [r7, #16]
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	4313      	orrs	r3, r2
 8002142:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002144:	4b1f      	ldr	r3, [pc, #124]	@ (80021c4 <HAL_GPIO_Init+0x2b8>)
 8002146:	693a      	ldr	r2, [r7, #16]
 8002148:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800214a:	4a1e      	ldr	r2, [pc, #120]	@ (80021c4 <HAL_GPIO_Init+0x2b8>)
 800214c:	2384      	movs	r3, #132	@ 0x84
 800214e:	58d3      	ldr	r3, [r2, r3]
 8002150:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	43da      	mvns	r2, r3
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	4013      	ands	r3, r2
 800215a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	685a      	ldr	r2, [r3, #4]
 8002160:	2380      	movs	r3, #128	@ 0x80
 8002162:	029b      	lsls	r3, r3, #10
 8002164:	4013      	ands	r3, r2
 8002166:	d003      	beq.n	8002170 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8002168:	693a      	ldr	r2, [r7, #16]
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	4313      	orrs	r3, r2
 800216e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002170:	4914      	ldr	r1, [pc, #80]	@ (80021c4 <HAL_GPIO_Init+0x2b8>)
 8002172:	2284      	movs	r2, #132	@ 0x84
 8002174:	693b      	ldr	r3, [r7, #16]
 8002176:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8002178:	4a12      	ldr	r2, [pc, #72]	@ (80021c4 <HAL_GPIO_Init+0x2b8>)
 800217a:	2380      	movs	r3, #128	@ 0x80
 800217c:	58d3      	ldr	r3, [r2, r3]
 800217e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	43da      	mvns	r2, r3
 8002184:	693b      	ldr	r3, [r7, #16]
 8002186:	4013      	ands	r3, r2
 8002188:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	685a      	ldr	r2, [r3, #4]
 800218e:	2380      	movs	r3, #128	@ 0x80
 8002190:	025b      	lsls	r3, r3, #9
 8002192:	4013      	ands	r3, r2
 8002194:	d003      	beq.n	800219e <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8002196:	693a      	ldr	r2, [r7, #16]
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	4313      	orrs	r3, r2
 800219c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800219e:	4909      	ldr	r1, [pc, #36]	@ (80021c4 <HAL_GPIO_Init+0x2b8>)
 80021a0:	2280      	movs	r2, #128	@ 0x80
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	3301      	adds	r3, #1
 80021aa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	681a      	ldr	r2, [r3, #0]
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	40da      	lsrs	r2, r3
 80021b4:	1e13      	subs	r3, r2, #0
 80021b6:	d000      	beq.n	80021ba <HAL_GPIO_Init+0x2ae>
 80021b8:	e6b0      	b.n	8001f1c <HAL_GPIO_Init+0x10>
  }
}
 80021ba:	46c0      	nop			@ (mov r8, r8)
 80021bc:	46c0      	nop			@ (mov r8, r8)
 80021be:	46bd      	mov	sp, r7
 80021c0:	b006      	add	sp, #24
 80021c2:	bd80      	pop	{r7, pc}
 80021c4:	40021800 	.word	0x40021800
 80021c8:	50000400 	.word	0x50000400
 80021cc:	50000800 	.word	0x50000800
 80021d0:	50000c00 	.word	0x50000c00

080021d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b082      	sub	sp, #8
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
 80021dc:	0008      	movs	r0, r1
 80021de:	0011      	movs	r1, r2
 80021e0:	1cbb      	adds	r3, r7, #2
 80021e2:	1c02      	adds	r2, r0, #0
 80021e4:	801a      	strh	r2, [r3, #0]
 80021e6:	1c7b      	adds	r3, r7, #1
 80021e8:	1c0a      	adds	r2, r1, #0
 80021ea:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80021ec:	1c7b      	adds	r3, r7, #1
 80021ee:	781b      	ldrb	r3, [r3, #0]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d004      	beq.n	80021fe <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80021f4:	1cbb      	adds	r3, r7, #2
 80021f6:	881a      	ldrh	r2, [r3, #0]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80021fc:	e003      	b.n	8002206 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80021fe:	1cbb      	adds	r3, r7, #2
 8002200:	881a      	ldrh	r2, [r3, #0]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002206:	46c0      	nop			@ (mov r8, r8)
 8002208:	46bd      	mov	sp, r7
 800220a:	b002      	add	sp, #8
 800220c:	bd80      	pop	{r7, pc}
	...

08002210 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b082      	sub	sp, #8
 8002214:	af00      	add	r7, sp, #0
 8002216:	0002      	movs	r2, r0
 8002218:	1dbb      	adds	r3, r7, #6
 800221a:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 800221c:	4b10      	ldr	r3, [pc, #64]	@ (8002260 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800221e:	68db      	ldr	r3, [r3, #12]
 8002220:	1dba      	adds	r2, r7, #6
 8002222:	8812      	ldrh	r2, [r2, #0]
 8002224:	4013      	ands	r3, r2
 8002226:	d008      	beq.n	800223a <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8002228:	4b0d      	ldr	r3, [pc, #52]	@ (8002260 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800222a:	1dba      	adds	r2, r7, #6
 800222c:	8812      	ldrh	r2, [r2, #0]
 800222e:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8002230:	1dbb      	adds	r3, r7, #6
 8002232:	881b      	ldrh	r3, [r3, #0]
 8002234:	0018      	movs	r0, r3
 8002236:	f000 f815 	bl	8002264 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 800223a:	4b09      	ldr	r3, [pc, #36]	@ (8002260 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800223c:	691b      	ldr	r3, [r3, #16]
 800223e:	1dba      	adds	r2, r7, #6
 8002240:	8812      	ldrh	r2, [r2, #0]
 8002242:	4013      	ands	r3, r2
 8002244:	d008      	beq.n	8002258 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8002246:	4b06      	ldr	r3, [pc, #24]	@ (8002260 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8002248:	1dba      	adds	r2, r7, #6
 800224a:	8812      	ldrh	r2, [r2, #0]
 800224c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 800224e:	1dbb      	adds	r3, r7, #6
 8002250:	881b      	ldrh	r3, [r3, #0]
 8002252:	0018      	movs	r0, r3
 8002254:	f000 f810 	bl	8002278 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8002258:	46c0      	nop			@ (mov r8, r8)
 800225a:	46bd      	mov	sp, r7
 800225c:	b002      	add	sp, #8
 800225e:	bd80      	pop	{r7, pc}
 8002260:	40021800 	.word	0x40021800

08002264 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b082      	sub	sp, #8
 8002268:	af00      	add	r7, sp, #0
 800226a:	0002      	movs	r2, r0
 800226c:	1dbb      	adds	r3, r7, #6
 800226e:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8002270:	46c0      	nop			@ (mov r8, r8)
 8002272:	46bd      	mov	sp, r7
 8002274:	b002      	add	sp, #8
 8002276:	bd80      	pop	{r7, pc}

08002278 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b082      	sub	sp, #8
 800227c:	af00      	add	r7, sp, #0
 800227e:	0002      	movs	r2, r0
 8002280:	1dbb      	adds	r3, r7, #6
 8002282:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8002284:	46c0      	nop			@ (mov r8, r8)
 8002286:	46bd      	mov	sp, r7
 8002288:	b002      	add	sp, #8
 800228a:	bd80      	pop	{r7, pc}

0800228c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b082      	sub	sp, #8
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d101      	bne.n	800229e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800229a:	2301      	movs	r3, #1
 800229c:	e08f      	b.n	80023be <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2241      	movs	r2, #65	@ 0x41
 80022a2:	5c9b      	ldrb	r3, [r3, r2]
 80022a4:	b2db      	uxtb	r3, r3
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d107      	bne.n	80022ba <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2240      	movs	r2, #64	@ 0x40
 80022ae:	2100      	movs	r1, #0
 80022b0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	0018      	movs	r0, r3
 80022b6:	f7fe fa27 	bl	8000708 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2241      	movs	r2, #65	@ 0x41
 80022be:	2124      	movs	r1, #36	@ 0x24
 80022c0:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	2101      	movs	r1, #1
 80022ce:	438a      	bics	r2, r1
 80022d0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	685a      	ldr	r2, [r3, #4]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	493b      	ldr	r1, [pc, #236]	@ (80023c8 <HAL_I2C_Init+0x13c>)
 80022dc:	400a      	ands	r2, r1
 80022de:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	689a      	ldr	r2, [r3, #8]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4938      	ldr	r1, [pc, #224]	@ (80023cc <HAL_I2C_Init+0x140>)
 80022ec:	400a      	ands	r2, r1
 80022ee:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	68db      	ldr	r3, [r3, #12]
 80022f4:	2b01      	cmp	r3, #1
 80022f6:	d108      	bne.n	800230a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	689a      	ldr	r2, [r3, #8]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	2180      	movs	r1, #128	@ 0x80
 8002302:	0209      	lsls	r1, r1, #8
 8002304:	430a      	orrs	r2, r1
 8002306:	609a      	str	r2, [r3, #8]
 8002308:	e007      	b.n	800231a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	689a      	ldr	r2, [r3, #8]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	2184      	movs	r1, #132	@ 0x84
 8002314:	0209      	lsls	r1, r1, #8
 8002316:	430a      	orrs	r2, r1
 8002318:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	68db      	ldr	r3, [r3, #12]
 800231e:	2b02      	cmp	r3, #2
 8002320:	d109      	bne.n	8002336 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	685a      	ldr	r2, [r3, #4]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	2180      	movs	r1, #128	@ 0x80
 800232e:	0109      	lsls	r1, r1, #4
 8002330:	430a      	orrs	r2, r1
 8002332:	605a      	str	r2, [r3, #4]
 8002334:	e007      	b.n	8002346 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	685a      	ldr	r2, [r3, #4]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4923      	ldr	r1, [pc, #140]	@ (80023d0 <HAL_I2C_Init+0x144>)
 8002342:	400a      	ands	r2, r1
 8002344:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	685a      	ldr	r2, [r3, #4]
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4920      	ldr	r1, [pc, #128]	@ (80023d4 <HAL_I2C_Init+0x148>)
 8002352:	430a      	orrs	r2, r1
 8002354:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	68da      	ldr	r2, [r3, #12]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	491a      	ldr	r1, [pc, #104]	@ (80023cc <HAL_I2C_Init+0x140>)
 8002362:	400a      	ands	r2, r1
 8002364:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	691a      	ldr	r2, [r3, #16]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	695b      	ldr	r3, [r3, #20]
 800236e:	431a      	orrs	r2, r3
 8002370:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	699b      	ldr	r3, [r3, #24]
 8002376:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	430a      	orrs	r2, r1
 800237e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	69d9      	ldr	r1, [r3, #28]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6a1a      	ldr	r2, [r3, #32]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	430a      	orrs	r2, r1
 800238e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	681a      	ldr	r2, [r3, #0]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	2101      	movs	r1, #1
 800239c:	430a      	orrs	r2, r1
 800239e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2200      	movs	r2, #0
 80023a4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2241      	movs	r2, #65	@ 0x41
 80023aa:	2120      	movs	r1, #32
 80023ac:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2200      	movs	r2, #0
 80023b2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2242      	movs	r2, #66	@ 0x42
 80023b8:	2100      	movs	r1, #0
 80023ba:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80023bc:	2300      	movs	r3, #0
}
 80023be:	0018      	movs	r0, r3
 80023c0:	46bd      	mov	sp, r7
 80023c2:	b002      	add	sp, #8
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	46c0      	nop			@ (mov r8, r8)
 80023c8:	f0ffffff 	.word	0xf0ffffff
 80023cc:	ffff7fff 	.word	0xffff7fff
 80023d0:	fffff7ff 	.word	0xfffff7ff
 80023d4:	02008000 	.word	0x02008000

080023d8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b082      	sub	sp, #8
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
 80023e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2241      	movs	r2, #65	@ 0x41
 80023e6:	5c9b      	ldrb	r3, [r3, r2]
 80023e8:	b2db      	uxtb	r3, r3
 80023ea:	2b20      	cmp	r3, #32
 80023ec:	d138      	bne.n	8002460 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2240      	movs	r2, #64	@ 0x40
 80023f2:	5c9b      	ldrb	r3, [r3, r2]
 80023f4:	2b01      	cmp	r3, #1
 80023f6:	d101      	bne.n	80023fc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80023f8:	2302      	movs	r3, #2
 80023fa:	e032      	b.n	8002462 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2240      	movs	r2, #64	@ 0x40
 8002400:	2101      	movs	r1, #1
 8002402:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2241      	movs	r2, #65	@ 0x41
 8002408:	2124      	movs	r1, #36	@ 0x24
 800240a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	681a      	ldr	r2, [r3, #0]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	2101      	movs	r1, #1
 8002418:	438a      	bics	r2, r1
 800241a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	681a      	ldr	r2, [r3, #0]
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4911      	ldr	r1, [pc, #68]	@ (800246c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8002428:	400a      	ands	r2, r1
 800242a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	6819      	ldr	r1, [r3, #0]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	683a      	ldr	r2, [r7, #0]
 8002438:	430a      	orrs	r2, r1
 800243a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	681a      	ldr	r2, [r3, #0]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	2101      	movs	r1, #1
 8002448:	430a      	orrs	r2, r1
 800244a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2241      	movs	r2, #65	@ 0x41
 8002450:	2120      	movs	r1, #32
 8002452:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2240      	movs	r2, #64	@ 0x40
 8002458:	2100      	movs	r1, #0
 800245a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800245c:	2300      	movs	r3, #0
 800245e:	e000      	b.n	8002462 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002460:	2302      	movs	r3, #2
  }
}
 8002462:	0018      	movs	r0, r3
 8002464:	46bd      	mov	sp, r7
 8002466:	b002      	add	sp, #8
 8002468:	bd80      	pop	{r7, pc}
 800246a:	46c0      	nop			@ (mov r8, r8)
 800246c:	ffffefff 	.word	0xffffefff

08002470 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b084      	sub	sp, #16
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
 8002478:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2241      	movs	r2, #65	@ 0x41
 800247e:	5c9b      	ldrb	r3, [r3, r2]
 8002480:	b2db      	uxtb	r3, r3
 8002482:	2b20      	cmp	r3, #32
 8002484:	d139      	bne.n	80024fa <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2240      	movs	r2, #64	@ 0x40
 800248a:	5c9b      	ldrb	r3, [r3, r2]
 800248c:	2b01      	cmp	r3, #1
 800248e:	d101      	bne.n	8002494 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002490:	2302      	movs	r3, #2
 8002492:	e033      	b.n	80024fc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2240      	movs	r2, #64	@ 0x40
 8002498:	2101      	movs	r1, #1
 800249a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2241      	movs	r2, #65	@ 0x41
 80024a0:	2124      	movs	r1, #36	@ 0x24
 80024a2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	681a      	ldr	r2, [r3, #0]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	2101      	movs	r1, #1
 80024b0:	438a      	bics	r2, r1
 80024b2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	4a11      	ldr	r2, [pc, #68]	@ (8002504 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80024c0:	4013      	ands	r3, r2
 80024c2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	021b      	lsls	r3, r3, #8
 80024c8:	68fa      	ldr	r2, [r7, #12]
 80024ca:	4313      	orrs	r3, r2
 80024cc:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	68fa      	ldr	r2, [r7, #12]
 80024d4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	681a      	ldr	r2, [r3, #0]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	2101      	movs	r1, #1
 80024e2:	430a      	orrs	r2, r1
 80024e4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2241      	movs	r2, #65	@ 0x41
 80024ea:	2120      	movs	r1, #32
 80024ec:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2240      	movs	r2, #64	@ 0x40
 80024f2:	2100      	movs	r1, #0
 80024f4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80024f6:	2300      	movs	r3, #0
 80024f8:	e000      	b.n	80024fc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80024fa:	2302      	movs	r3, #2
  }
}
 80024fc:	0018      	movs	r0, r3
 80024fe:	46bd      	mov	sp, r7
 8002500:	b004      	add	sp, #16
 8002502:	bd80      	pop	{r7, pc}
 8002504:	fffff0ff 	.word	0xfffff0ff

08002508 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b084      	sub	sp, #16
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d101      	bne.n	800251a <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	e03d      	b.n	8002596 <HAL_IWDG_Init+0x8e>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4a20      	ldr	r2, [pc, #128]	@ (80025a0 <HAL_IWDG_Init+0x98>)
 8002520:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a1f      	ldr	r2, [pc, #124]	@ (80025a4 <HAL_IWDG_Init+0x9c>)
 8002528:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	687a      	ldr	r2, [r7, #4]
 8002530:	6852      	ldr	r2, [r2, #4]
 8002532:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	687a      	ldr	r2, [r7, #4]
 800253a:	6892      	ldr	r2, [r2, #8]
 800253c:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 800253e:	f7fe fdfb 	bl	8001138 <HAL_GetTick>
 8002542:	0003      	movs	r3, r0
 8002544:	60fb      	str	r3, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8002546:	e00e      	b.n	8002566 <HAL_IWDG_Init+0x5e>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8002548:	f7fe fdf6 	bl	8001138 <HAL_GetTick>
 800254c:	0002      	movs	r2, r0
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	1ad3      	subs	r3, r2, r3
 8002552:	2b31      	cmp	r3, #49	@ 0x31
 8002554:	d907      	bls.n	8002566 <HAL_IWDG_Init+0x5e>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	68db      	ldr	r3, [r3, #12]
 800255c:	2207      	movs	r2, #7
 800255e:	4013      	ands	r3, r2
 8002560:	d001      	beq.n	8002566 <HAL_IWDG_Init+0x5e>
      {
        return HAL_TIMEOUT;
 8002562:	2303      	movs	r3, #3
 8002564:	e017      	b.n	8002596 <HAL_IWDG_Init+0x8e>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	68db      	ldr	r3, [r3, #12]
 800256c:	2207      	movs	r2, #7
 800256e:	4013      	ands	r3, r2
 8002570:	d1ea      	bne.n	8002548 <HAL_IWDG_Init+0x40>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	691a      	ldr	r2, [r3, #16]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	68db      	ldr	r3, [r3, #12]
 800257c:	429a      	cmp	r2, r3
 800257e:	d005      	beq.n	800258c <HAL_IWDG_Init+0x84>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	687a      	ldr	r2, [r7, #4]
 8002586:	68d2      	ldr	r2, [r2, #12]
 8002588:	611a      	str	r2, [r3, #16]
 800258a:	e003      	b.n	8002594 <HAL_IWDG_Init+0x8c>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a05      	ldr	r2, [pc, #20]	@ (80025a8 <HAL_IWDG_Init+0xa0>)
 8002592:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002594:	2300      	movs	r3, #0
}
 8002596:	0018      	movs	r0, r3
 8002598:	46bd      	mov	sp, r7
 800259a:	b004      	add	sp, #16
 800259c:	bd80      	pop	{r7, pc}
 800259e:	46c0      	nop			@ (mov r8, r8)
 80025a0:	0000cccc 	.word	0x0000cccc
 80025a4:	00005555 	.word	0x00005555
 80025a8:	0000aaaa 	.word	0x0000aaaa

080025ac <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b082      	sub	sp, #8
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a03      	ldr	r2, [pc, #12]	@ (80025c8 <HAL_IWDG_Refresh+0x1c>)
 80025ba:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80025bc:	2300      	movs	r3, #0
}
 80025be:	0018      	movs	r0, r3
 80025c0:	46bd      	mov	sp, r7
 80025c2:	b002      	add	sp, #8
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	46c0      	nop			@ (mov r8, r8)
 80025c8:	0000aaaa 	.word	0x0000aaaa

080025cc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b084      	sub	sp, #16
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80025d4:	4b19      	ldr	r3, [pc, #100]	@ (800263c <HAL_PWREx_ControlVoltageScaling+0x70>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a19      	ldr	r2, [pc, #100]	@ (8002640 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80025da:	4013      	ands	r3, r2
 80025dc:	0019      	movs	r1, r3
 80025de:	4b17      	ldr	r3, [pc, #92]	@ (800263c <HAL_PWREx_ControlVoltageScaling+0x70>)
 80025e0:	687a      	ldr	r2, [r7, #4]
 80025e2:	430a      	orrs	r2, r1
 80025e4:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80025e6:	687a      	ldr	r2, [r7, #4]
 80025e8:	2380      	movs	r3, #128	@ 0x80
 80025ea:	009b      	lsls	r3, r3, #2
 80025ec:	429a      	cmp	r2, r3
 80025ee:	d11f      	bne.n	8002630 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80025f0:	4b14      	ldr	r3, [pc, #80]	@ (8002644 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80025f2:	681a      	ldr	r2, [r3, #0]
 80025f4:	0013      	movs	r3, r2
 80025f6:	005b      	lsls	r3, r3, #1
 80025f8:	189b      	adds	r3, r3, r2
 80025fa:	005b      	lsls	r3, r3, #1
 80025fc:	4912      	ldr	r1, [pc, #72]	@ (8002648 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80025fe:	0018      	movs	r0, r3
 8002600:	f7fd fdda 	bl	80001b8 <__udivsi3>
 8002604:	0003      	movs	r3, r0
 8002606:	3301      	adds	r3, #1
 8002608:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800260a:	e008      	b.n	800261e <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d003      	beq.n	800261a <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	3b01      	subs	r3, #1
 8002616:	60fb      	str	r3, [r7, #12]
 8002618:	e001      	b.n	800261e <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800261a:	2303      	movs	r3, #3
 800261c:	e009      	b.n	8002632 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800261e:	4b07      	ldr	r3, [pc, #28]	@ (800263c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002620:	695a      	ldr	r2, [r3, #20]
 8002622:	2380      	movs	r3, #128	@ 0x80
 8002624:	00db      	lsls	r3, r3, #3
 8002626:	401a      	ands	r2, r3
 8002628:	2380      	movs	r3, #128	@ 0x80
 800262a:	00db      	lsls	r3, r3, #3
 800262c:	429a      	cmp	r2, r3
 800262e:	d0ed      	beq.n	800260c <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8002630:	2300      	movs	r3, #0
}
 8002632:	0018      	movs	r0, r3
 8002634:	46bd      	mov	sp, r7
 8002636:	b004      	add	sp, #16
 8002638:	bd80      	pop	{r7, pc}
 800263a:	46c0      	nop			@ (mov r8, r8)
 800263c:	40007000 	.word	0x40007000
 8002640:	fffff9ff 	.word	0xfffff9ff
 8002644:	20000000 	.word	0x20000000
 8002648:	000f4240 	.word	0x000f4240

0800264c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b088      	sub	sp, #32
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d101      	bne.n	800265e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	e2f3      	b.n	8002c46 <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	2201      	movs	r2, #1
 8002664:	4013      	ands	r3, r2
 8002666:	d100      	bne.n	800266a <HAL_RCC_OscConfig+0x1e>
 8002668:	e07c      	b.n	8002764 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800266a:	4bc3      	ldr	r3, [pc, #780]	@ (8002978 <HAL_RCC_OscConfig+0x32c>)
 800266c:	689b      	ldr	r3, [r3, #8]
 800266e:	2238      	movs	r2, #56	@ 0x38
 8002670:	4013      	ands	r3, r2
 8002672:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002674:	4bc0      	ldr	r3, [pc, #768]	@ (8002978 <HAL_RCC_OscConfig+0x32c>)
 8002676:	68db      	ldr	r3, [r3, #12]
 8002678:	2203      	movs	r2, #3
 800267a:	4013      	ands	r3, r2
 800267c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800267e:	69bb      	ldr	r3, [r7, #24]
 8002680:	2b10      	cmp	r3, #16
 8002682:	d102      	bne.n	800268a <HAL_RCC_OscConfig+0x3e>
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	2b03      	cmp	r3, #3
 8002688:	d002      	beq.n	8002690 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800268a:	69bb      	ldr	r3, [r7, #24]
 800268c:	2b08      	cmp	r3, #8
 800268e:	d10b      	bne.n	80026a8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002690:	4bb9      	ldr	r3, [pc, #740]	@ (8002978 <HAL_RCC_OscConfig+0x32c>)
 8002692:	681a      	ldr	r2, [r3, #0]
 8002694:	2380      	movs	r3, #128	@ 0x80
 8002696:	029b      	lsls	r3, r3, #10
 8002698:	4013      	ands	r3, r2
 800269a:	d062      	beq.n	8002762 <HAL_RCC_OscConfig+0x116>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d15e      	bne.n	8002762 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80026a4:	2301      	movs	r3, #1
 80026a6:	e2ce      	b.n	8002c46 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	685a      	ldr	r2, [r3, #4]
 80026ac:	2380      	movs	r3, #128	@ 0x80
 80026ae:	025b      	lsls	r3, r3, #9
 80026b0:	429a      	cmp	r2, r3
 80026b2:	d107      	bne.n	80026c4 <HAL_RCC_OscConfig+0x78>
 80026b4:	4bb0      	ldr	r3, [pc, #704]	@ (8002978 <HAL_RCC_OscConfig+0x32c>)
 80026b6:	681a      	ldr	r2, [r3, #0]
 80026b8:	4baf      	ldr	r3, [pc, #700]	@ (8002978 <HAL_RCC_OscConfig+0x32c>)
 80026ba:	2180      	movs	r1, #128	@ 0x80
 80026bc:	0249      	lsls	r1, r1, #9
 80026be:	430a      	orrs	r2, r1
 80026c0:	601a      	str	r2, [r3, #0]
 80026c2:	e020      	b.n	8002706 <HAL_RCC_OscConfig+0xba>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	685a      	ldr	r2, [r3, #4]
 80026c8:	23a0      	movs	r3, #160	@ 0xa0
 80026ca:	02db      	lsls	r3, r3, #11
 80026cc:	429a      	cmp	r2, r3
 80026ce:	d10e      	bne.n	80026ee <HAL_RCC_OscConfig+0xa2>
 80026d0:	4ba9      	ldr	r3, [pc, #676]	@ (8002978 <HAL_RCC_OscConfig+0x32c>)
 80026d2:	681a      	ldr	r2, [r3, #0]
 80026d4:	4ba8      	ldr	r3, [pc, #672]	@ (8002978 <HAL_RCC_OscConfig+0x32c>)
 80026d6:	2180      	movs	r1, #128	@ 0x80
 80026d8:	02c9      	lsls	r1, r1, #11
 80026da:	430a      	orrs	r2, r1
 80026dc:	601a      	str	r2, [r3, #0]
 80026de:	4ba6      	ldr	r3, [pc, #664]	@ (8002978 <HAL_RCC_OscConfig+0x32c>)
 80026e0:	681a      	ldr	r2, [r3, #0]
 80026e2:	4ba5      	ldr	r3, [pc, #660]	@ (8002978 <HAL_RCC_OscConfig+0x32c>)
 80026e4:	2180      	movs	r1, #128	@ 0x80
 80026e6:	0249      	lsls	r1, r1, #9
 80026e8:	430a      	orrs	r2, r1
 80026ea:	601a      	str	r2, [r3, #0]
 80026ec:	e00b      	b.n	8002706 <HAL_RCC_OscConfig+0xba>
 80026ee:	4ba2      	ldr	r3, [pc, #648]	@ (8002978 <HAL_RCC_OscConfig+0x32c>)
 80026f0:	681a      	ldr	r2, [r3, #0]
 80026f2:	4ba1      	ldr	r3, [pc, #644]	@ (8002978 <HAL_RCC_OscConfig+0x32c>)
 80026f4:	49a1      	ldr	r1, [pc, #644]	@ (800297c <HAL_RCC_OscConfig+0x330>)
 80026f6:	400a      	ands	r2, r1
 80026f8:	601a      	str	r2, [r3, #0]
 80026fa:	4b9f      	ldr	r3, [pc, #636]	@ (8002978 <HAL_RCC_OscConfig+0x32c>)
 80026fc:	681a      	ldr	r2, [r3, #0]
 80026fe:	4b9e      	ldr	r3, [pc, #632]	@ (8002978 <HAL_RCC_OscConfig+0x32c>)
 8002700:	499f      	ldr	r1, [pc, #636]	@ (8002980 <HAL_RCC_OscConfig+0x334>)
 8002702:	400a      	ands	r2, r1
 8002704:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d014      	beq.n	8002738 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800270e:	f7fe fd13 	bl	8001138 <HAL_GetTick>
 8002712:	0003      	movs	r3, r0
 8002714:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002716:	e008      	b.n	800272a <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002718:	f7fe fd0e 	bl	8001138 <HAL_GetTick>
 800271c:	0002      	movs	r2, r0
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	1ad3      	subs	r3, r2, r3
 8002722:	2b64      	cmp	r3, #100	@ 0x64
 8002724:	d901      	bls.n	800272a <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8002726:	2303      	movs	r3, #3
 8002728:	e28d      	b.n	8002c46 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800272a:	4b93      	ldr	r3, [pc, #588]	@ (8002978 <HAL_RCC_OscConfig+0x32c>)
 800272c:	681a      	ldr	r2, [r3, #0]
 800272e:	2380      	movs	r3, #128	@ 0x80
 8002730:	029b      	lsls	r3, r3, #10
 8002732:	4013      	ands	r3, r2
 8002734:	d0f0      	beq.n	8002718 <HAL_RCC_OscConfig+0xcc>
 8002736:	e015      	b.n	8002764 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002738:	f7fe fcfe 	bl	8001138 <HAL_GetTick>
 800273c:	0003      	movs	r3, r0
 800273e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002740:	e008      	b.n	8002754 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002742:	f7fe fcf9 	bl	8001138 <HAL_GetTick>
 8002746:	0002      	movs	r2, r0
 8002748:	693b      	ldr	r3, [r7, #16]
 800274a:	1ad3      	subs	r3, r2, r3
 800274c:	2b64      	cmp	r3, #100	@ 0x64
 800274e:	d901      	bls.n	8002754 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002750:	2303      	movs	r3, #3
 8002752:	e278      	b.n	8002c46 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002754:	4b88      	ldr	r3, [pc, #544]	@ (8002978 <HAL_RCC_OscConfig+0x32c>)
 8002756:	681a      	ldr	r2, [r3, #0]
 8002758:	2380      	movs	r3, #128	@ 0x80
 800275a:	029b      	lsls	r3, r3, #10
 800275c:	4013      	ands	r3, r2
 800275e:	d1f0      	bne.n	8002742 <HAL_RCC_OscConfig+0xf6>
 8002760:	e000      	b.n	8002764 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002762:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	2202      	movs	r2, #2
 800276a:	4013      	ands	r3, r2
 800276c:	d100      	bne.n	8002770 <HAL_RCC_OscConfig+0x124>
 800276e:	e099      	b.n	80028a4 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002770:	4b81      	ldr	r3, [pc, #516]	@ (8002978 <HAL_RCC_OscConfig+0x32c>)
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	2238      	movs	r2, #56	@ 0x38
 8002776:	4013      	ands	r3, r2
 8002778:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800277a:	4b7f      	ldr	r3, [pc, #508]	@ (8002978 <HAL_RCC_OscConfig+0x32c>)
 800277c:	68db      	ldr	r3, [r3, #12]
 800277e:	2203      	movs	r2, #3
 8002780:	4013      	ands	r3, r2
 8002782:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8002784:	69bb      	ldr	r3, [r7, #24]
 8002786:	2b10      	cmp	r3, #16
 8002788:	d102      	bne.n	8002790 <HAL_RCC_OscConfig+0x144>
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	2b02      	cmp	r3, #2
 800278e:	d002      	beq.n	8002796 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8002790:	69bb      	ldr	r3, [r7, #24]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d135      	bne.n	8002802 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002796:	4b78      	ldr	r3, [pc, #480]	@ (8002978 <HAL_RCC_OscConfig+0x32c>)
 8002798:	681a      	ldr	r2, [r3, #0]
 800279a:	2380      	movs	r3, #128	@ 0x80
 800279c:	00db      	lsls	r3, r3, #3
 800279e:	4013      	ands	r3, r2
 80027a0:	d005      	beq.n	80027ae <HAL_RCC_OscConfig+0x162>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	68db      	ldr	r3, [r3, #12]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d101      	bne.n	80027ae <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	e24b      	b.n	8002c46 <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027ae:	4b72      	ldr	r3, [pc, #456]	@ (8002978 <HAL_RCC_OscConfig+0x32c>)
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	4a74      	ldr	r2, [pc, #464]	@ (8002984 <HAL_RCC_OscConfig+0x338>)
 80027b4:	4013      	ands	r3, r2
 80027b6:	0019      	movs	r1, r3
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	695b      	ldr	r3, [r3, #20]
 80027bc:	021a      	lsls	r2, r3, #8
 80027be:	4b6e      	ldr	r3, [pc, #440]	@ (8002978 <HAL_RCC_OscConfig+0x32c>)
 80027c0:	430a      	orrs	r2, r1
 80027c2:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80027c4:	69bb      	ldr	r3, [r7, #24]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d112      	bne.n	80027f0 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80027ca:	4b6b      	ldr	r3, [pc, #428]	@ (8002978 <HAL_RCC_OscConfig+0x32c>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a6e      	ldr	r2, [pc, #440]	@ (8002988 <HAL_RCC_OscConfig+0x33c>)
 80027d0:	4013      	ands	r3, r2
 80027d2:	0019      	movs	r1, r3
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	691a      	ldr	r2, [r3, #16]
 80027d8:	4b67      	ldr	r3, [pc, #412]	@ (8002978 <HAL_RCC_OscConfig+0x32c>)
 80027da:	430a      	orrs	r2, r1
 80027dc:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80027de:	4b66      	ldr	r3, [pc, #408]	@ (8002978 <HAL_RCC_OscConfig+0x32c>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	0adb      	lsrs	r3, r3, #11
 80027e4:	2207      	movs	r2, #7
 80027e6:	4013      	ands	r3, r2
 80027e8:	4a68      	ldr	r2, [pc, #416]	@ (800298c <HAL_RCC_OscConfig+0x340>)
 80027ea:	40da      	lsrs	r2, r3
 80027ec:	4b68      	ldr	r3, [pc, #416]	@ (8002990 <HAL_RCC_OscConfig+0x344>)
 80027ee:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80027f0:	4b68      	ldr	r3, [pc, #416]	@ (8002994 <HAL_RCC_OscConfig+0x348>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	0018      	movs	r0, r3
 80027f6:	f7fe fc43 	bl	8001080 <HAL_InitTick>
 80027fa:	1e03      	subs	r3, r0, #0
 80027fc:	d051      	beq.n	80028a2 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80027fe:	2301      	movs	r3, #1
 8002800:	e221      	b.n	8002c46 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	68db      	ldr	r3, [r3, #12]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d030      	beq.n	800286c <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800280a:	4b5b      	ldr	r3, [pc, #364]	@ (8002978 <HAL_RCC_OscConfig+0x32c>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a5e      	ldr	r2, [pc, #376]	@ (8002988 <HAL_RCC_OscConfig+0x33c>)
 8002810:	4013      	ands	r3, r2
 8002812:	0019      	movs	r1, r3
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	691a      	ldr	r2, [r3, #16]
 8002818:	4b57      	ldr	r3, [pc, #348]	@ (8002978 <HAL_RCC_OscConfig+0x32c>)
 800281a:	430a      	orrs	r2, r1
 800281c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800281e:	4b56      	ldr	r3, [pc, #344]	@ (8002978 <HAL_RCC_OscConfig+0x32c>)
 8002820:	681a      	ldr	r2, [r3, #0]
 8002822:	4b55      	ldr	r3, [pc, #340]	@ (8002978 <HAL_RCC_OscConfig+0x32c>)
 8002824:	2180      	movs	r1, #128	@ 0x80
 8002826:	0049      	lsls	r1, r1, #1
 8002828:	430a      	orrs	r2, r1
 800282a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800282c:	f7fe fc84 	bl	8001138 <HAL_GetTick>
 8002830:	0003      	movs	r3, r0
 8002832:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002834:	e008      	b.n	8002848 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002836:	f7fe fc7f 	bl	8001138 <HAL_GetTick>
 800283a:	0002      	movs	r2, r0
 800283c:	693b      	ldr	r3, [r7, #16]
 800283e:	1ad3      	subs	r3, r2, r3
 8002840:	2b02      	cmp	r3, #2
 8002842:	d901      	bls.n	8002848 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002844:	2303      	movs	r3, #3
 8002846:	e1fe      	b.n	8002c46 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002848:	4b4b      	ldr	r3, [pc, #300]	@ (8002978 <HAL_RCC_OscConfig+0x32c>)
 800284a:	681a      	ldr	r2, [r3, #0]
 800284c:	2380      	movs	r3, #128	@ 0x80
 800284e:	00db      	lsls	r3, r3, #3
 8002850:	4013      	ands	r3, r2
 8002852:	d0f0      	beq.n	8002836 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002854:	4b48      	ldr	r3, [pc, #288]	@ (8002978 <HAL_RCC_OscConfig+0x32c>)
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	4a4a      	ldr	r2, [pc, #296]	@ (8002984 <HAL_RCC_OscConfig+0x338>)
 800285a:	4013      	ands	r3, r2
 800285c:	0019      	movs	r1, r3
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	695b      	ldr	r3, [r3, #20]
 8002862:	021a      	lsls	r2, r3, #8
 8002864:	4b44      	ldr	r3, [pc, #272]	@ (8002978 <HAL_RCC_OscConfig+0x32c>)
 8002866:	430a      	orrs	r2, r1
 8002868:	605a      	str	r2, [r3, #4]
 800286a:	e01b      	b.n	80028a4 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 800286c:	4b42      	ldr	r3, [pc, #264]	@ (8002978 <HAL_RCC_OscConfig+0x32c>)
 800286e:	681a      	ldr	r2, [r3, #0]
 8002870:	4b41      	ldr	r3, [pc, #260]	@ (8002978 <HAL_RCC_OscConfig+0x32c>)
 8002872:	4949      	ldr	r1, [pc, #292]	@ (8002998 <HAL_RCC_OscConfig+0x34c>)
 8002874:	400a      	ands	r2, r1
 8002876:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002878:	f7fe fc5e 	bl	8001138 <HAL_GetTick>
 800287c:	0003      	movs	r3, r0
 800287e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002880:	e008      	b.n	8002894 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002882:	f7fe fc59 	bl	8001138 <HAL_GetTick>
 8002886:	0002      	movs	r2, r0
 8002888:	693b      	ldr	r3, [r7, #16]
 800288a:	1ad3      	subs	r3, r2, r3
 800288c:	2b02      	cmp	r3, #2
 800288e:	d901      	bls.n	8002894 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002890:	2303      	movs	r3, #3
 8002892:	e1d8      	b.n	8002c46 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002894:	4b38      	ldr	r3, [pc, #224]	@ (8002978 <HAL_RCC_OscConfig+0x32c>)
 8002896:	681a      	ldr	r2, [r3, #0]
 8002898:	2380      	movs	r3, #128	@ 0x80
 800289a:	00db      	lsls	r3, r3, #3
 800289c:	4013      	ands	r3, r2
 800289e:	d1f0      	bne.n	8002882 <HAL_RCC_OscConfig+0x236>
 80028a0:	e000      	b.n	80028a4 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80028a2:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	2208      	movs	r2, #8
 80028aa:	4013      	ands	r3, r2
 80028ac:	d047      	beq.n	800293e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80028ae:	4b32      	ldr	r3, [pc, #200]	@ (8002978 <HAL_RCC_OscConfig+0x32c>)
 80028b0:	689b      	ldr	r3, [r3, #8]
 80028b2:	2238      	movs	r2, #56	@ 0x38
 80028b4:	4013      	ands	r3, r2
 80028b6:	2b18      	cmp	r3, #24
 80028b8:	d10a      	bne.n	80028d0 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80028ba:	4b2f      	ldr	r3, [pc, #188]	@ (8002978 <HAL_RCC_OscConfig+0x32c>)
 80028bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80028be:	2202      	movs	r2, #2
 80028c0:	4013      	ands	r3, r2
 80028c2:	d03c      	beq.n	800293e <HAL_RCC_OscConfig+0x2f2>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	699b      	ldr	r3, [r3, #24]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d138      	bne.n	800293e <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80028cc:	2301      	movs	r3, #1
 80028ce:	e1ba      	b.n	8002c46 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	699b      	ldr	r3, [r3, #24]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d019      	beq.n	800290c <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80028d8:	4b27      	ldr	r3, [pc, #156]	@ (8002978 <HAL_RCC_OscConfig+0x32c>)
 80028da:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80028dc:	4b26      	ldr	r3, [pc, #152]	@ (8002978 <HAL_RCC_OscConfig+0x32c>)
 80028de:	2101      	movs	r1, #1
 80028e0:	430a      	orrs	r2, r1
 80028e2:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028e4:	f7fe fc28 	bl	8001138 <HAL_GetTick>
 80028e8:	0003      	movs	r3, r0
 80028ea:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80028ec:	e008      	b.n	8002900 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028ee:	f7fe fc23 	bl	8001138 <HAL_GetTick>
 80028f2:	0002      	movs	r2, r0
 80028f4:	693b      	ldr	r3, [r7, #16]
 80028f6:	1ad3      	subs	r3, r2, r3
 80028f8:	2b02      	cmp	r3, #2
 80028fa:	d901      	bls.n	8002900 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80028fc:	2303      	movs	r3, #3
 80028fe:	e1a2      	b.n	8002c46 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002900:	4b1d      	ldr	r3, [pc, #116]	@ (8002978 <HAL_RCC_OscConfig+0x32c>)
 8002902:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002904:	2202      	movs	r2, #2
 8002906:	4013      	ands	r3, r2
 8002908:	d0f1      	beq.n	80028ee <HAL_RCC_OscConfig+0x2a2>
 800290a:	e018      	b.n	800293e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800290c:	4b1a      	ldr	r3, [pc, #104]	@ (8002978 <HAL_RCC_OscConfig+0x32c>)
 800290e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002910:	4b19      	ldr	r3, [pc, #100]	@ (8002978 <HAL_RCC_OscConfig+0x32c>)
 8002912:	2101      	movs	r1, #1
 8002914:	438a      	bics	r2, r1
 8002916:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002918:	f7fe fc0e 	bl	8001138 <HAL_GetTick>
 800291c:	0003      	movs	r3, r0
 800291e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002920:	e008      	b.n	8002934 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002922:	f7fe fc09 	bl	8001138 <HAL_GetTick>
 8002926:	0002      	movs	r2, r0
 8002928:	693b      	ldr	r3, [r7, #16]
 800292a:	1ad3      	subs	r3, r2, r3
 800292c:	2b02      	cmp	r3, #2
 800292e:	d901      	bls.n	8002934 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8002930:	2303      	movs	r3, #3
 8002932:	e188      	b.n	8002c46 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002934:	4b10      	ldr	r3, [pc, #64]	@ (8002978 <HAL_RCC_OscConfig+0x32c>)
 8002936:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002938:	2202      	movs	r2, #2
 800293a:	4013      	ands	r3, r2
 800293c:	d1f1      	bne.n	8002922 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	2204      	movs	r2, #4
 8002944:	4013      	ands	r3, r2
 8002946:	d100      	bne.n	800294a <HAL_RCC_OscConfig+0x2fe>
 8002948:	e0c6      	b.n	8002ad8 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800294a:	231f      	movs	r3, #31
 800294c:	18fb      	adds	r3, r7, r3
 800294e:	2200      	movs	r2, #0
 8002950:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002952:	4b09      	ldr	r3, [pc, #36]	@ (8002978 <HAL_RCC_OscConfig+0x32c>)
 8002954:	689b      	ldr	r3, [r3, #8]
 8002956:	2238      	movs	r2, #56	@ 0x38
 8002958:	4013      	ands	r3, r2
 800295a:	2b20      	cmp	r3, #32
 800295c:	d11e      	bne.n	800299c <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800295e:	4b06      	ldr	r3, [pc, #24]	@ (8002978 <HAL_RCC_OscConfig+0x32c>)
 8002960:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002962:	2202      	movs	r2, #2
 8002964:	4013      	ands	r3, r2
 8002966:	d100      	bne.n	800296a <HAL_RCC_OscConfig+0x31e>
 8002968:	e0b6      	b.n	8002ad8 <HAL_RCC_OscConfig+0x48c>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	689b      	ldr	r3, [r3, #8]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d000      	beq.n	8002974 <HAL_RCC_OscConfig+0x328>
 8002972:	e0b1      	b.n	8002ad8 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8002974:	2301      	movs	r3, #1
 8002976:	e166      	b.n	8002c46 <HAL_RCC_OscConfig+0x5fa>
 8002978:	40021000 	.word	0x40021000
 800297c:	fffeffff 	.word	0xfffeffff
 8002980:	fffbffff 	.word	0xfffbffff
 8002984:	ffff80ff 	.word	0xffff80ff
 8002988:	ffffc7ff 	.word	0xffffc7ff
 800298c:	00f42400 	.word	0x00f42400
 8002990:	20000000 	.word	0x20000000
 8002994:	20000004 	.word	0x20000004
 8002998:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800299c:	4bac      	ldr	r3, [pc, #688]	@ (8002c50 <HAL_RCC_OscConfig+0x604>)
 800299e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80029a0:	2380      	movs	r3, #128	@ 0x80
 80029a2:	055b      	lsls	r3, r3, #21
 80029a4:	4013      	ands	r3, r2
 80029a6:	d101      	bne.n	80029ac <HAL_RCC_OscConfig+0x360>
 80029a8:	2301      	movs	r3, #1
 80029aa:	e000      	b.n	80029ae <HAL_RCC_OscConfig+0x362>
 80029ac:	2300      	movs	r3, #0
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d011      	beq.n	80029d6 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80029b2:	4ba7      	ldr	r3, [pc, #668]	@ (8002c50 <HAL_RCC_OscConfig+0x604>)
 80029b4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80029b6:	4ba6      	ldr	r3, [pc, #664]	@ (8002c50 <HAL_RCC_OscConfig+0x604>)
 80029b8:	2180      	movs	r1, #128	@ 0x80
 80029ba:	0549      	lsls	r1, r1, #21
 80029bc:	430a      	orrs	r2, r1
 80029be:	63da      	str	r2, [r3, #60]	@ 0x3c
 80029c0:	4ba3      	ldr	r3, [pc, #652]	@ (8002c50 <HAL_RCC_OscConfig+0x604>)
 80029c2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80029c4:	2380      	movs	r3, #128	@ 0x80
 80029c6:	055b      	lsls	r3, r3, #21
 80029c8:	4013      	ands	r3, r2
 80029ca:	60fb      	str	r3, [r7, #12]
 80029cc:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80029ce:	231f      	movs	r3, #31
 80029d0:	18fb      	adds	r3, r7, r3
 80029d2:	2201      	movs	r2, #1
 80029d4:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029d6:	4b9f      	ldr	r3, [pc, #636]	@ (8002c54 <HAL_RCC_OscConfig+0x608>)
 80029d8:	681a      	ldr	r2, [r3, #0]
 80029da:	2380      	movs	r3, #128	@ 0x80
 80029dc:	005b      	lsls	r3, r3, #1
 80029de:	4013      	ands	r3, r2
 80029e0:	d11a      	bne.n	8002a18 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80029e2:	4b9c      	ldr	r3, [pc, #624]	@ (8002c54 <HAL_RCC_OscConfig+0x608>)
 80029e4:	681a      	ldr	r2, [r3, #0]
 80029e6:	4b9b      	ldr	r3, [pc, #620]	@ (8002c54 <HAL_RCC_OscConfig+0x608>)
 80029e8:	2180      	movs	r1, #128	@ 0x80
 80029ea:	0049      	lsls	r1, r1, #1
 80029ec:	430a      	orrs	r2, r1
 80029ee:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80029f0:	f7fe fba2 	bl	8001138 <HAL_GetTick>
 80029f4:	0003      	movs	r3, r0
 80029f6:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029f8:	e008      	b.n	8002a0c <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029fa:	f7fe fb9d 	bl	8001138 <HAL_GetTick>
 80029fe:	0002      	movs	r2, r0
 8002a00:	693b      	ldr	r3, [r7, #16]
 8002a02:	1ad3      	subs	r3, r2, r3
 8002a04:	2b02      	cmp	r3, #2
 8002a06:	d901      	bls.n	8002a0c <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8002a08:	2303      	movs	r3, #3
 8002a0a:	e11c      	b.n	8002c46 <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a0c:	4b91      	ldr	r3, [pc, #580]	@ (8002c54 <HAL_RCC_OscConfig+0x608>)
 8002a0e:	681a      	ldr	r2, [r3, #0]
 8002a10:	2380      	movs	r3, #128	@ 0x80
 8002a12:	005b      	lsls	r3, r3, #1
 8002a14:	4013      	ands	r3, r2
 8002a16:	d0f0      	beq.n	80029fa <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	2b01      	cmp	r3, #1
 8002a1e:	d106      	bne.n	8002a2e <HAL_RCC_OscConfig+0x3e2>
 8002a20:	4b8b      	ldr	r3, [pc, #556]	@ (8002c50 <HAL_RCC_OscConfig+0x604>)
 8002a22:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002a24:	4b8a      	ldr	r3, [pc, #552]	@ (8002c50 <HAL_RCC_OscConfig+0x604>)
 8002a26:	2101      	movs	r1, #1
 8002a28:	430a      	orrs	r2, r1
 8002a2a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002a2c:	e01c      	b.n	8002a68 <HAL_RCC_OscConfig+0x41c>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	689b      	ldr	r3, [r3, #8]
 8002a32:	2b05      	cmp	r3, #5
 8002a34:	d10c      	bne.n	8002a50 <HAL_RCC_OscConfig+0x404>
 8002a36:	4b86      	ldr	r3, [pc, #536]	@ (8002c50 <HAL_RCC_OscConfig+0x604>)
 8002a38:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002a3a:	4b85      	ldr	r3, [pc, #532]	@ (8002c50 <HAL_RCC_OscConfig+0x604>)
 8002a3c:	2104      	movs	r1, #4
 8002a3e:	430a      	orrs	r2, r1
 8002a40:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002a42:	4b83      	ldr	r3, [pc, #524]	@ (8002c50 <HAL_RCC_OscConfig+0x604>)
 8002a44:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002a46:	4b82      	ldr	r3, [pc, #520]	@ (8002c50 <HAL_RCC_OscConfig+0x604>)
 8002a48:	2101      	movs	r1, #1
 8002a4a:	430a      	orrs	r2, r1
 8002a4c:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002a4e:	e00b      	b.n	8002a68 <HAL_RCC_OscConfig+0x41c>
 8002a50:	4b7f      	ldr	r3, [pc, #508]	@ (8002c50 <HAL_RCC_OscConfig+0x604>)
 8002a52:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002a54:	4b7e      	ldr	r3, [pc, #504]	@ (8002c50 <HAL_RCC_OscConfig+0x604>)
 8002a56:	2101      	movs	r1, #1
 8002a58:	438a      	bics	r2, r1
 8002a5a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002a5c:	4b7c      	ldr	r3, [pc, #496]	@ (8002c50 <HAL_RCC_OscConfig+0x604>)
 8002a5e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002a60:	4b7b      	ldr	r3, [pc, #492]	@ (8002c50 <HAL_RCC_OscConfig+0x604>)
 8002a62:	2104      	movs	r1, #4
 8002a64:	438a      	bics	r2, r1
 8002a66:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	689b      	ldr	r3, [r3, #8]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d014      	beq.n	8002a9a <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a70:	f7fe fb62 	bl	8001138 <HAL_GetTick>
 8002a74:	0003      	movs	r3, r0
 8002a76:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a78:	e009      	b.n	8002a8e <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a7a:	f7fe fb5d 	bl	8001138 <HAL_GetTick>
 8002a7e:	0002      	movs	r2, r0
 8002a80:	693b      	ldr	r3, [r7, #16]
 8002a82:	1ad3      	subs	r3, r2, r3
 8002a84:	4a74      	ldr	r2, [pc, #464]	@ (8002c58 <HAL_RCC_OscConfig+0x60c>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d901      	bls.n	8002a8e <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8002a8a:	2303      	movs	r3, #3
 8002a8c:	e0db      	b.n	8002c46 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a8e:	4b70      	ldr	r3, [pc, #448]	@ (8002c50 <HAL_RCC_OscConfig+0x604>)
 8002a90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a92:	2202      	movs	r2, #2
 8002a94:	4013      	ands	r3, r2
 8002a96:	d0f0      	beq.n	8002a7a <HAL_RCC_OscConfig+0x42e>
 8002a98:	e013      	b.n	8002ac2 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a9a:	f7fe fb4d 	bl	8001138 <HAL_GetTick>
 8002a9e:	0003      	movs	r3, r0
 8002aa0:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002aa2:	e009      	b.n	8002ab8 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002aa4:	f7fe fb48 	bl	8001138 <HAL_GetTick>
 8002aa8:	0002      	movs	r2, r0
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	1ad3      	subs	r3, r2, r3
 8002aae:	4a6a      	ldr	r2, [pc, #424]	@ (8002c58 <HAL_RCC_OscConfig+0x60c>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d901      	bls.n	8002ab8 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8002ab4:	2303      	movs	r3, #3
 8002ab6:	e0c6      	b.n	8002c46 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002ab8:	4b65      	ldr	r3, [pc, #404]	@ (8002c50 <HAL_RCC_OscConfig+0x604>)
 8002aba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002abc:	2202      	movs	r2, #2
 8002abe:	4013      	ands	r3, r2
 8002ac0:	d1f0      	bne.n	8002aa4 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002ac2:	231f      	movs	r3, #31
 8002ac4:	18fb      	adds	r3, r7, r3
 8002ac6:	781b      	ldrb	r3, [r3, #0]
 8002ac8:	2b01      	cmp	r3, #1
 8002aca:	d105      	bne.n	8002ad8 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002acc:	4b60      	ldr	r3, [pc, #384]	@ (8002c50 <HAL_RCC_OscConfig+0x604>)
 8002ace:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002ad0:	4b5f      	ldr	r3, [pc, #380]	@ (8002c50 <HAL_RCC_OscConfig+0x604>)
 8002ad2:	4962      	ldr	r1, [pc, #392]	@ (8002c5c <HAL_RCC_OscConfig+0x610>)
 8002ad4:	400a      	ands	r2, r1
 8002ad6:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	69db      	ldr	r3, [r3, #28]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d100      	bne.n	8002ae2 <HAL_RCC_OscConfig+0x496>
 8002ae0:	e0b0      	b.n	8002c44 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ae2:	4b5b      	ldr	r3, [pc, #364]	@ (8002c50 <HAL_RCC_OscConfig+0x604>)
 8002ae4:	689b      	ldr	r3, [r3, #8]
 8002ae6:	2238      	movs	r2, #56	@ 0x38
 8002ae8:	4013      	ands	r3, r2
 8002aea:	2b10      	cmp	r3, #16
 8002aec:	d100      	bne.n	8002af0 <HAL_RCC_OscConfig+0x4a4>
 8002aee:	e078      	b.n	8002be2 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	69db      	ldr	r3, [r3, #28]
 8002af4:	2b02      	cmp	r3, #2
 8002af6:	d153      	bne.n	8002ba0 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002af8:	4b55      	ldr	r3, [pc, #340]	@ (8002c50 <HAL_RCC_OscConfig+0x604>)
 8002afa:	681a      	ldr	r2, [r3, #0]
 8002afc:	4b54      	ldr	r3, [pc, #336]	@ (8002c50 <HAL_RCC_OscConfig+0x604>)
 8002afe:	4958      	ldr	r1, [pc, #352]	@ (8002c60 <HAL_RCC_OscConfig+0x614>)
 8002b00:	400a      	ands	r2, r1
 8002b02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b04:	f7fe fb18 	bl	8001138 <HAL_GetTick>
 8002b08:	0003      	movs	r3, r0
 8002b0a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b0c:	e008      	b.n	8002b20 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b0e:	f7fe fb13 	bl	8001138 <HAL_GetTick>
 8002b12:	0002      	movs	r2, r0
 8002b14:	693b      	ldr	r3, [r7, #16]
 8002b16:	1ad3      	subs	r3, r2, r3
 8002b18:	2b02      	cmp	r3, #2
 8002b1a:	d901      	bls.n	8002b20 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8002b1c:	2303      	movs	r3, #3
 8002b1e:	e092      	b.n	8002c46 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b20:	4b4b      	ldr	r3, [pc, #300]	@ (8002c50 <HAL_RCC_OscConfig+0x604>)
 8002b22:	681a      	ldr	r2, [r3, #0]
 8002b24:	2380      	movs	r3, #128	@ 0x80
 8002b26:	049b      	lsls	r3, r3, #18
 8002b28:	4013      	ands	r3, r2
 8002b2a:	d1f0      	bne.n	8002b0e <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b2c:	4b48      	ldr	r3, [pc, #288]	@ (8002c50 <HAL_RCC_OscConfig+0x604>)
 8002b2e:	68db      	ldr	r3, [r3, #12]
 8002b30:	4a4c      	ldr	r2, [pc, #304]	@ (8002c64 <HAL_RCC_OscConfig+0x618>)
 8002b32:	4013      	ands	r3, r2
 8002b34:	0019      	movs	r1, r3
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6a1a      	ldr	r2, [r3, #32]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b3e:	431a      	orrs	r2, r3
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b44:	021b      	lsls	r3, r3, #8
 8002b46:	431a      	orrs	r2, r3
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b4c:	431a      	orrs	r2, r3
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b52:	431a      	orrs	r2, r3
 8002b54:	4b3e      	ldr	r3, [pc, #248]	@ (8002c50 <HAL_RCC_OscConfig+0x604>)
 8002b56:	430a      	orrs	r2, r1
 8002b58:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b5a:	4b3d      	ldr	r3, [pc, #244]	@ (8002c50 <HAL_RCC_OscConfig+0x604>)
 8002b5c:	681a      	ldr	r2, [r3, #0]
 8002b5e:	4b3c      	ldr	r3, [pc, #240]	@ (8002c50 <HAL_RCC_OscConfig+0x604>)
 8002b60:	2180      	movs	r1, #128	@ 0x80
 8002b62:	0449      	lsls	r1, r1, #17
 8002b64:	430a      	orrs	r2, r1
 8002b66:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002b68:	4b39      	ldr	r3, [pc, #228]	@ (8002c50 <HAL_RCC_OscConfig+0x604>)
 8002b6a:	68da      	ldr	r2, [r3, #12]
 8002b6c:	4b38      	ldr	r3, [pc, #224]	@ (8002c50 <HAL_RCC_OscConfig+0x604>)
 8002b6e:	2180      	movs	r1, #128	@ 0x80
 8002b70:	0549      	lsls	r1, r1, #21
 8002b72:	430a      	orrs	r2, r1
 8002b74:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b76:	f7fe fadf 	bl	8001138 <HAL_GetTick>
 8002b7a:	0003      	movs	r3, r0
 8002b7c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b7e:	e008      	b.n	8002b92 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b80:	f7fe fada 	bl	8001138 <HAL_GetTick>
 8002b84:	0002      	movs	r2, r0
 8002b86:	693b      	ldr	r3, [r7, #16]
 8002b88:	1ad3      	subs	r3, r2, r3
 8002b8a:	2b02      	cmp	r3, #2
 8002b8c:	d901      	bls.n	8002b92 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8002b8e:	2303      	movs	r3, #3
 8002b90:	e059      	b.n	8002c46 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b92:	4b2f      	ldr	r3, [pc, #188]	@ (8002c50 <HAL_RCC_OscConfig+0x604>)
 8002b94:	681a      	ldr	r2, [r3, #0]
 8002b96:	2380      	movs	r3, #128	@ 0x80
 8002b98:	049b      	lsls	r3, r3, #18
 8002b9a:	4013      	ands	r3, r2
 8002b9c:	d0f0      	beq.n	8002b80 <HAL_RCC_OscConfig+0x534>
 8002b9e:	e051      	b.n	8002c44 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ba0:	4b2b      	ldr	r3, [pc, #172]	@ (8002c50 <HAL_RCC_OscConfig+0x604>)
 8002ba2:	681a      	ldr	r2, [r3, #0]
 8002ba4:	4b2a      	ldr	r3, [pc, #168]	@ (8002c50 <HAL_RCC_OscConfig+0x604>)
 8002ba6:	492e      	ldr	r1, [pc, #184]	@ (8002c60 <HAL_RCC_OscConfig+0x614>)
 8002ba8:	400a      	ands	r2, r1
 8002baa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bac:	f7fe fac4 	bl	8001138 <HAL_GetTick>
 8002bb0:	0003      	movs	r3, r0
 8002bb2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002bb4:	e008      	b.n	8002bc8 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bb6:	f7fe fabf 	bl	8001138 <HAL_GetTick>
 8002bba:	0002      	movs	r2, r0
 8002bbc:	693b      	ldr	r3, [r7, #16]
 8002bbe:	1ad3      	subs	r3, r2, r3
 8002bc0:	2b02      	cmp	r3, #2
 8002bc2:	d901      	bls.n	8002bc8 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8002bc4:	2303      	movs	r3, #3
 8002bc6:	e03e      	b.n	8002c46 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002bc8:	4b21      	ldr	r3, [pc, #132]	@ (8002c50 <HAL_RCC_OscConfig+0x604>)
 8002bca:	681a      	ldr	r2, [r3, #0]
 8002bcc:	2380      	movs	r3, #128	@ 0x80
 8002bce:	049b      	lsls	r3, r3, #18
 8002bd0:	4013      	ands	r3, r2
 8002bd2:	d1f0      	bne.n	8002bb6 <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8002bd4:	4b1e      	ldr	r3, [pc, #120]	@ (8002c50 <HAL_RCC_OscConfig+0x604>)
 8002bd6:	68da      	ldr	r2, [r3, #12]
 8002bd8:	4b1d      	ldr	r3, [pc, #116]	@ (8002c50 <HAL_RCC_OscConfig+0x604>)
 8002bda:	4923      	ldr	r1, [pc, #140]	@ (8002c68 <HAL_RCC_OscConfig+0x61c>)
 8002bdc:	400a      	ands	r2, r1
 8002bde:	60da      	str	r2, [r3, #12]
 8002be0:	e030      	b.n	8002c44 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	69db      	ldr	r3, [r3, #28]
 8002be6:	2b01      	cmp	r3, #1
 8002be8:	d101      	bne.n	8002bee <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	e02b      	b.n	8002c46 <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8002bee:	4b18      	ldr	r3, [pc, #96]	@ (8002c50 <HAL_RCC_OscConfig+0x604>)
 8002bf0:	68db      	ldr	r3, [r3, #12]
 8002bf2:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bf4:	697b      	ldr	r3, [r7, #20]
 8002bf6:	2203      	movs	r2, #3
 8002bf8:	401a      	ands	r2, r3
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6a1b      	ldr	r3, [r3, #32]
 8002bfe:	429a      	cmp	r2, r3
 8002c00:	d11e      	bne.n	8002c40 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	2270      	movs	r2, #112	@ 0x70
 8002c06:	401a      	ands	r2, r3
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c0c:	429a      	cmp	r2, r3
 8002c0e:	d117      	bne.n	8002c40 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c10:	697a      	ldr	r2, [r7, #20]
 8002c12:	23fe      	movs	r3, #254	@ 0xfe
 8002c14:	01db      	lsls	r3, r3, #7
 8002c16:	401a      	ands	r2, r3
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c1c:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002c1e:	429a      	cmp	r2, r3
 8002c20:	d10e      	bne.n	8002c40 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002c22:	697a      	ldr	r2, [r7, #20]
 8002c24:	23f8      	movs	r3, #248	@ 0xf8
 8002c26:	039b      	lsls	r3, r3, #14
 8002c28:	401a      	ands	r2, r3
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c2e:	429a      	cmp	r2, r3
 8002c30:	d106      	bne.n	8002c40 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002c32:	697b      	ldr	r3, [r7, #20]
 8002c34:	0f5b      	lsrs	r3, r3, #29
 8002c36:	075a      	lsls	r2, r3, #29
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002c3c:	429a      	cmp	r2, r3
 8002c3e:	d001      	beq.n	8002c44 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8002c40:	2301      	movs	r3, #1
 8002c42:	e000      	b.n	8002c46 <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8002c44:	2300      	movs	r3, #0
}
 8002c46:	0018      	movs	r0, r3
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	b008      	add	sp, #32
 8002c4c:	bd80      	pop	{r7, pc}
 8002c4e:	46c0      	nop			@ (mov r8, r8)
 8002c50:	40021000 	.word	0x40021000
 8002c54:	40007000 	.word	0x40007000
 8002c58:	00001388 	.word	0x00001388
 8002c5c:	efffffff 	.word	0xefffffff
 8002c60:	feffffff 	.word	0xfeffffff
 8002c64:	1fc1808c 	.word	0x1fc1808c
 8002c68:	effefffc 	.word	0xeffefffc

08002c6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b084      	sub	sp, #16
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
 8002c74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d101      	bne.n	8002c80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	e0e9      	b.n	8002e54 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c80:	4b76      	ldr	r3, [pc, #472]	@ (8002e5c <HAL_RCC_ClockConfig+0x1f0>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	2207      	movs	r2, #7
 8002c86:	4013      	ands	r3, r2
 8002c88:	683a      	ldr	r2, [r7, #0]
 8002c8a:	429a      	cmp	r2, r3
 8002c8c:	d91e      	bls.n	8002ccc <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c8e:	4b73      	ldr	r3, [pc, #460]	@ (8002e5c <HAL_RCC_ClockConfig+0x1f0>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	2207      	movs	r2, #7
 8002c94:	4393      	bics	r3, r2
 8002c96:	0019      	movs	r1, r3
 8002c98:	4b70      	ldr	r3, [pc, #448]	@ (8002e5c <HAL_RCC_ClockConfig+0x1f0>)
 8002c9a:	683a      	ldr	r2, [r7, #0]
 8002c9c:	430a      	orrs	r2, r1
 8002c9e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002ca0:	f7fe fa4a 	bl	8001138 <HAL_GetTick>
 8002ca4:	0003      	movs	r3, r0
 8002ca6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002ca8:	e009      	b.n	8002cbe <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002caa:	f7fe fa45 	bl	8001138 <HAL_GetTick>
 8002cae:	0002      	movs	r2, r0
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	1ad3      	subs	r3, r2, r3
 8002cb4:	4a6a      	ldr	r2, [pc, #424]	@ (8002e60 <HAL_RCC_ClockConfig+0x1f4>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d901      	bls.n	8002cbe <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002cba:	2303      	movs	r3, #3
 8002cbc:	e0ca      	b.n	8002e54 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002cbe:	4b67      	ldr	r3, [pc, #412]	@ (8002e5c <HAL_RCC_ClockConfig+0x1f0>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	2207      	movs	r2, #7
 8002cc4:	4013      	ands	r3, r2
 8002cc6:	683a      	ldr	r2, [r7, #0]
 8002cc8:	429a      	cmp	r2, r3
 8002cca:	d1ee      	bne.n	8002caa <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	2202      	movs	r2, #2
 8002cd2:	4013      	ands	r3, r2
 8002cd4:	d015      	beq.n	8002d02 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	2204      	movs	r2, #4
 8002cdc:	4013      	ands	r3, r2
 8002cde:	d006      	beq.n	8002cee <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002ce0:	4b60      	ldr	r3, [pc, #384]	@ (8002e64 <HAL_RCC_ClockConfig+0x1f8>)
 8002ce2:	689a      	ldr	r2, [r3, #8]
 8002ce4:	4b5f      	ldr	r3, [pc, #380]	@ (8002e64 <HAL_RCC_ClockConfig+0x1f8>)
 8002ce6:	21e0      	movs	r1, #224	@ 0xe0
 8002ce8:	01c9      	lsls	r1, r1, #7
 8002cea:	430a      	orrs	r2, r1
 8002cec:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cee:	4b5d      	ldr	r3, [pc, #372]	@ (8002e64 <HAL_RCC_ClockConfig+0x1f8>)
 8002cf0:	689b      	ldr	r3, [r3, #8]
 8002cf2:	4a5d      	ldr	r2, [pc, #372]	@ (8002e68 <HAL_RCC_ClockConfig+0x1fc>)
 8002cf4:	4013      	ands	r3, r2
 8002cf6:	0019      	movs	r1, r3
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	689a      	ldr	r2, [r3, #8]
 8002cfc:	4b59      	ldr	r3, [pc, #356]	@ (8002e64 <HAL_RCC_ClockConfig+0x1f8>)
 8002cfe:	430a      	orrs	r2, r1
 8002d00:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	2201      	movs	r2, #1
 8002d08:	4013      	ands	r3, r2
 8002d0a:	d057      	beq.n	8002dbc <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	2b01      	cmp	r3, #1
 8002d12:	d107      	bne.n	8002d24 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d14:	4b53      	ldr	r3, [pc, #332]	@ (8002e64 <HAL_RCC_ClockConfig+0x1f8>)
 8002d16:	681a      	ldr	r2, [r3, #0]
 8002d18:	2380      	movs	r3, #128	@ 0x80
 8002d1a:	029b      	lsls	r3, r3, #10
 8002d1c:	4013      	ands	r3, r2
 8002d1e:	d12b      	bne.n	8002d78 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002d20:	2301      	movs	r3, #1
 8002d22:	e097      	b.n	8002e54 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	2b02      	cmp	r3, #2
 8002d2a:	d107      	bne.n	8002d3c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d2c:	4b4d      	ldr	r3, [pc, #308]	@ (8002e64 <HAL_RCC_ClockConfig+0x1f8>)
 8002d2e:	681a      	ldr	r2, [r3, #0]
 8002d30:	2380      	movs	r3, #128	@ 0x80
 8002d32:	049b      	lsls	r3, r3, #18
 8002d34:	4013      	ands	r3, r2
 8002d36:	d11f      	bne.n	8002d78 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	e08b      	b.n	8002e54 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d107      	bne.n	8002d54 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d44:	4b47      	ldr	r3, [pc, #284]	@ (8002e64 <HAL_RCC_ClockConfig+0x1f8>)
 8002d46:	681a      	ldr	r2, [r3, #0]
 8002d48:	2380      	movs	r3, #128	@ 0x80
 8002d4a:	00db      	lsls	r3, r3, #3
 8002d4c:	4013      	ands	r3, r2
 8002d4e:	d113      	bne.n	8002d78 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002d50:	2301      	movs	r3, #1
 8002d52:	e07f      	b.n	8002e54 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	2b03      	cmp	r3, #3
 8002d5a:	d106      	bne.n	8002d6a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002d5c:	4b41      	ldr	r3, [pc, #260]	@ (8002e64 <HAL_RCC_ClockConfig+0x1f8>)
 8002d5e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d60:	2202      	movs	r2, #2
 8002d62:	4013      	ands	r3, r2
 8002d64:	d108      	bne.n	8002d78 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	e074      	b.n	8002e54 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d6a:	4b3e      	ldr	r3, [pc, #248]	@ (8002e64 <HAL_RCC_ClockConfig+0x1f8>)
 8002d6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d6e:	2202      	movs	r2, #2
 8002d70:	4013      	ands	r3, r2
 8002d72:	d101      	bne.n	8002d78 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002d74:	2301      	movs	r3, #1
 8002d76:	e06d      	b.n	8002e54 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002d78:	4b3a      	ldr	r3, [pc, #232]	@ (8002e64 <HAL_RCC_ClockConfig+0x1f8>)
 8002d7a:	689b      	ldr	r3, [r3, #8]
 8002d7c:	2207      	movs	r2, #7
 8002d7e:	4393      	bics	r3, r2
 8002d80:	0019      	movs	r1, r3
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	685a      	ldr	r2, [r3, #4]
 8002d86:	4b37      	ldr	r3, [pc, #220]	@ (8002e64 <HAL_RCC_ClockConfig+0x1f8>)
 8002d88:	430a      	orrs	r2, r1
 8002d8a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d8c:	f7fe f9d4 	bl	8001138 <HAL_GetTick>
 8002d90:	0003      	movs	r3, r0
 8002d92:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d94:	e009      	b.n	8002daa <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d96:	f7fe f9cf 	bl	8001138 <HAL_GetTick>
 8002d9a:	0002      	movs	r2, r0
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	1ad3      	subs	r3, r2, r3
 8002da0:	4a2f      	ldr	r2, [pc, #188]	@ (8002e60 <HAL_RCC_ClockConfig+0x1f4>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d901      	bls.n	8002daa <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8002da6:	2303      	movs	r3, #3
 8002da8:	e054      	b.n	8002e54 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002daa:	4b2e      	ldr	r3, [pc, #184]	@ (8002e64 <HAL_RCC_ClockConfig+0x1f8>)
 8002dac:	689b      	ldr	r3, [r3, #8]
 8002dae:	2238      	movs	r2, #56	@ 0x38
 8002db0:	401a      	ands	r2, r3
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	00db      	lsls	r3, r3, #3
 8002db8:	429a      	cmp	r2, r3
 8002dba:	d1ec      	bne.n	8002d96 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002dbc:	4b27      	ldr	r3, [pc, #156]	@ (8002e5c <HAL_RCC_ClockConfig+0x1f0>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	2207      	movs	r2, #7
 8002dc2:	4013      	ands	r3, r2
 8002dc4:	683a      	ldr	r2, [r7, #0]
 8002dc6:	429a      	cmp	r2, r3
 8002dc8:	d21e      	bcs.n	8002e08 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dca:	4b24      	ldr	r3, [pc, #144]	@ (8002e5c <HAL_RCC_ClockConfig+0x1f0>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	2207      	movs	r2, #7
 8002dd0:	4393      	bics	r3, r2
 8002dd2:	0019      	movs	r1, r3
 8002dd4:	4b21      	ldr	r3, [pc, #132]	@ (8002e5c <HAL_RCC_ClockConfig+0x1f0>)
 8002dd6:	683a      	ldr	r2, [r7, #0]
 8002dd8:	430a      	orrs	r2, r1
 8002dda:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002ddc:	f7fe f9ac 	bl	8001138 <HAL_GetTick>
 8002de0:	0003      	movs	r3, r0
 8002de2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002de4:	e009      	b.n	8002dfa <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002de6:	f7fe f9a7 	bl	8001138 <HAL_GetTick>
 8002dea:	0002      	movs	r2, r0
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	1ad3      	subs	r3, r2, r3
 8002df0:	4a1b      	ldr	r2, [pc, #108]	@ (8002e60 <HAL_RCC_ClockConfig+0x1f4>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d901      	bls.n	8002dfa <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8002df6:	2303      	movs	r3, #3
 8002df8:	e02c      	b.n	8002e54 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002dfa:	4b18      	ldr	r3, [pc, #96]	@ (8002e5c <HAL_RCC_ClockConfig+0x1f0>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	2207      	movs	r2, #7
 8002e00:	4013      	ands	r3, r2
 8002e02:	683a      	ldr	r2, [r7, #0]
 8002e04:	429a      	cmp	r2, r3
 8002e06:	d1ee      	bne.n	8002de6 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	2204      	movs	r2, #4
 8002e0e:	4013      	ands	r3, r2
 8002e10:	d009      	beq.n	8002e26 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002e12:	4b14      	ldr	r3, [pc, #80]	@ (8002e64 <HAL_RCC_ClockConfig+0x1f8>)
 8002e14:	689b      	ldr	r3, [r3, #8]
 8002e16:	4a15      	ldr	r2, [pc, #84]	@ (8002e6c <HAL_RCC_ClockConfig+0x200>)
 8002e18:	4013      	ands	r3, r2
 8002e1a:	0019      	movs	r1, r3
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	68da      	ldr	r2, [r3, #12]
 8002e20:	4b10      	ldr	r3, [pc, #64]	@ (8002e64 <HAL_RCC_ClockConfig+0x1f8>)
 8002e22:	430a      	orrs	r2, r1
 8002e24:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002e26:	f000 f829 	bl	8002e7c <HAL_RCC_GetSysClockFreq>
 8002e2a:	0001      	movs	r1, r0
 8002e2c:	4b0d      	ldr	r3, [pc, #52]	@ (8002e64 <HAL_RCC_ClockConfig+0x1f8>)
 8002e2e:	689b      	ldr	r3, [r3, #8]
 8002e30:	0a1b      	lsrs	r3, r3, #8
 8002e32:	220f      	movs	r2, #15
 8002e34:	401a      	ands	r2, r3
 8002e36:	4b0e      	ldr	r3, [pc, #56]	@ (8002e70 <HAL_RCC_ClockConfig+0x204>)
 8002e38:	0092      	lsls	r2, r2, #2
 8002e3a:	58d3      	ldr	r3, [r2, r3]
 8002e3c:	221f      	movs	r2, #31
 8002e3e:	4013      	ands	r3, r2
 8002e40:	000a      	movs	r2, r1
 8002e42:	40da      	lsrs	r2, r3
 8002e44:	4b0b      	ldr	r3, [pc, #44]	@ (8002e74 <HAL_RCC_ClockConfig+0x208>)
 8002e46:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002e48:	4b0b      	ldr	r3, [pc, #44]	@ (8002e78 <HAL_RCC_ClockConfig+0x20c>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	0018      	movs	r0, r3
 8002e4e:	f7fe f917 	bl	8001080 <HAL_InitTick>
 8002e52:	0003      	movs	r3, r0
}
 8002e54:	0018      	movs	r0, r3
 8002e56:	46bd      	mov	sp, r7
 8002e58:	b004      	add	sp, #16
 8002e5a:	bd80      	pop	{r7, pc}
 8002e5c:	40022000 	.word	0x40022000
 8002e60:	00001388 	.word	0x00001388
 8002e64:	40021000 	.word	0x40021000
 8002e68:	fffff0ff 	.word	0xfffff0ff
 8002e6c:	ffff8fff 	.word	0xffff8fff
 8002e70:	0800445c 	.word	0x0800445c
 8002e74:	20000000 	.word	0x20000000
 8002e78:	20000004 	.word	0x20000004

08002e7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b086      	sub	sp, #24
 8002e80:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002e82:	4b3c      	ldr	r3, [pc, #240]	@ (8002f74 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002e84:	689b      	ldr	r3, [r3, #8]
 8002e86:	2238      	movs	r2, #56	@ 0x38
 8002e88:	4013      	ands	r3, r2
 8002e8a:	d10f      	bne.n	8002eac <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002e8c:	4b39      	ldr	r3, [pc, #228]	@ (8002f74 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	0adb      	lsrs	r3, r3, #11
 8002e92:	2207      	movs	r2, #7
 8002e94:	4013      	ands	r3, r2
 8002e96:	2201      	movs	r2, #1
 8002e98:	409a      	lsls	r2, r3
 8002e9a:	0013      	movs	r3, r2
 8002e9c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002e9e:	6839      	ldr	r1, [r7, #0]
 8002ea0:	4835      	ldr	r0, [pc, #212]	@ (8002f78 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002ea2:	f7fd f989 	bl	80001b8 <__udivsi3>
 8002ea6:	0003      	movs	r3, r0
 8002ea8:	613b      	str	r3, [r7, #16]
 8002eaa:	e05d      	b.n	8002f68 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002eac:	4b31      	ldr	r3, [pc, #196]	@ (8002f74 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002eae:	689b      	ldr	r3, [r3, #8]
 8002eb0:	2238      	movs	r2, #56	@ 0x38
 8002eb2:	4013      	ands	r3, r2
 8002eb4:	2b08      	cmp	r3, #8
 8002eb6:	d102      	bne.n	8002ebe <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002eb8:	4b30      	ldr	r3, [pc, #192]	@ (8002f7c <HAL_RCC_GetSysClockFreq+0x100>)
 8002eba:	613b      	str	r3, [r7, #16]
 8002ebc:	e054      	b.n	8002f68 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ebe:	4b2d      	ldr	r3, [pc, #180]	@ (8002f74 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002ec0:	689b      	ldr	r3, [r3, #8]
 8002ec2:	2238      	movs	r2, #56	@ 0x38
 8002ec4:	4013      	ands	r3, r2
 8002ec6:	2b10      	cmp	r3, #16
 8002ec8:	d138      	bne.n	8002f3c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002eca:	4b2a      	ldr	r3, [pc, #168]	@ (8002f74 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002ecc:	68db      	ldr	r3, [r3, #12]
 8002ece:	2203      	movs	r2, #3
 8002ed0:	4013      	ands	r3, r2
 8002ed2:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002ed4:	4b27      	ldr	r3, [pc, #156]	@ (8002f74 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002ed6:	68db      	ldr	r3, [r3, #12]
 8002ed8:	091b      	lsrs	r3, r3, #4
 8002eda:	2207      	movs	r2, #7
 8002edc:	4013      	ands	r3, r2
 8002ede:	3301      	adds	r3, #1
 8002ee0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	2b03      	cmp	r3, #3
 8002ee6:	d10d      	bne.n	8002f04 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002ee8:	68b9      	ldr	r1, [r7, #8]
 8002eea:	4824      	ldr	r0, [pc, #144]	@ (8002f7c <HAL_RCC_GetSysClockFreq+0x100>)
 8002eec:	f7fd f964 	bl	80001b8 <__udivsi3>
 8002ef0:	0003      	movs	r3, r0
 8002ef2:	0019      	movs	r1, r3
 8002ef4:	4b1f      	ldr	r3, [pc, #124]	@ (8002f74 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002ef6:	68db      	ldr	r3, [r3, #12]
 8002ef8:	0a1b      	lsrs	r3, r3, #8
 8002efa:	227f      	movs	r2, #127	@ 0x7f
 8002efc:	4013      	ands	r3, r2
 8002efe:	434b      	muls	r3, r1
 8002f00:	617b      	str	r3, [r7, #20]
        break;
 8002f02:	e00d      	b.n	8002f20 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002f04:	68b9      	ldr	r1, [r7, #8]
 8002f06:	481c      	ldr	r0, [pc, #112]	@ (8002f78 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002f08:	f7fd f956 	bl	80001b8 <__udivsi3>
 8002f0c:	0003      	movs	r3, r0
 8002f0e:	0019      	movs	r1, r3
 8002f10:	4b18      	ldr	r3, [pc, #96]	@ (8002f74 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002f12:	68db      	ldr	r3, [r3, #12]
 8002f14:	0a1b      	lsrs	r3, r3, #8
 8002f16:	227f      	movs	r2, #127	@ 0x7f
 8002f18:	4013      	ands	r3, r2
 8002f1a:	434b      	muls	r3, r1
 8002f1c:	617b      	str	r3, [r7, #20]
        break;
 8002f1e:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002f20:	4b14      	ldr	r3, [pc, #80]	@ (8002f74 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002f22:	68db      	ldr	r3, [r3, #12]
 8002f24:	0f5b      	lsrs	r3, r3, #29
 8002f26:	2207      	movs	r2, #7
 8002f28:	4013      	ands	r3, r2
 8002f2a:	3301      	adds	r3, #1
 8002f2c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8002f2e:	6879      	ldr	r1, [r7, #4]
 8002f30:	6978      	ldr	r0, [r7, #20]
 8002f32:	f7fd f941 	bl	80001b8 <__udivsi3>
 8002f36:	0003      	movs	r3, r0
 8002f38:	613b      	str	r3, [r7, #16]
 8002f3a:	e015      	b.n	8002f68 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002f3c:	4b0d      	ldr	r3, [pc, #52]	@ (8002f74 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002f3e:	689b      	ldr	r3, [r3, #8]
 8002f40:	2238      	movs	r2, #56	@ 0x38
 8002f42:	4013      	ands	r3, r2
 8002f44:	2b20      	cmp	r3, #32
 8002f46:	d103      	bne.n	8002f50 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002f48:	2380      	movs	r3, #128	@ 0x80
 8002f4a:	021b      	lsls	r3, r3, #8
 8002f4c:	613b      	str	r3, [r7, #16]
 8002f4e:	e00b      	b.n	8002f68 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002f50:	4b08      	ldr	r3, [pc, #32]	@ (8002f74 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002f52:	689b      	ldr	r3, [r3, #8]
 8002f54:	2238      	movs	r2, #56	@ 0x38
 8002f56:	4013      	ands	r3, r2
 8002f58:	2b18      	cmp	r3, #24
 8002f5a:	d103      	bne.n	8002f64 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002f5c:	23fa      	movs	r3, #250	@ 0xfa
 8002f5e:	01db      	lsls	r3, r3, #7
 8002f60:	613b      	str	r3, [r7, #16]
 8002f62:	e001      	b.n	8002f68 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002f64:	2300      	movs	r3, #0
 8002f66:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002f68:	693b      	ldr	r3, [r7, #16]
}
 8002f6a:	0018      	movs	r0, r3
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	b006      	add	sp, #24
 8002f70:	bd80      	pop	{r7, pc}
 8002f72:	46c0      	nop			@ (mov r8, r8)
 8002f74:	40021000 	.word	0x40021000
 8002f78:	00f42400 	.word	0x00f42400
 8002f7c:	007a1200 	.word	0x007a1200

08002f80 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b086      	sub	sp, #24
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002f88:	2313      	movs	r3, #19
 8002f8a:	18fb      	adds	r3, r7, r3
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002f90:	2312      	movs	r3, #18
 8002f92:	18fb      	adds	r3, r7, r3
 8002f94:	2200      	movs	r2, #0
 8002f96:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681a      	ldr	r2, [r3, #0]
 8002f9c:	2380      	movs	r3, #128	@ 0x80
 8002f9e:	029b      	lsls	r3, r3, #10
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	d100      	bne.n	8002fa6 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002fa4:	e0a3      	b.n	80030ee <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fa6:	2011      	movs	r0, #17
 8002fa8:	183b      	adds	r3, r7, r0
 8002faa:	2200      	movs	r2, #0
 8002fac:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002fae:	4b86      	ldr	r3, [pc, #536]	@ (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002fb0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002fb2:	2380      	movs	r3, #128	@ 0x80
 8002fb4:	055b      	lsls	r3, r3, #21
 8002fb6:	4013      	ands	r3, r2
 8002fb8:	d110      	bne.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fba:	4b83      	ldr	r3, [pc, #524]	@ (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002fbc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002fbe:	4b82      	ldr	r3, [pc, #520]	@ (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002fc0:	2180      	movs	r1, #128	@ 0x80
 8002fc2:	0549      	lsls	r1, r1, #21
 8002fc4:	430a      	orrs	r2, r1
 8002fc6:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002fc8:	4b7f      	ldr	r3, [pc, #508]	@ (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002fca:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002fcc:	2380      	movs	r3, #128	@ 0x80
 8002fce:	055b      	lsls	r3, r3, #21
 8002fd0:	4013      	ands	r3, r2
 8002fd2:	60bb      	str	r3, [r7, #8]
 8002fd4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fd6:	183b      	adds	r3, r7, r0
 8002fd8:	2201      	movs	r2, #1
 8002fda:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002fdc:	4b7b      	ldr	r3, [pc, #492]	@ (80031cc <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002fde:	681a      	ldr	r2, [r3, #0]
 8002fe0:	4b7a      	ldr	r3, [pc, #488]	@ (80031cc <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002fe2:	2180      	movs	r1, #128	@ 0x80
 8002fe4:	0049      	lsls	r1, r1, #1
 8002fe6:	430a      	orrs	r2, r1
 8002fe8:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002fea:	f7fe f8a5 	bl	8001138 <HAL_GetTick>
 8002fee:	0003      	movs	r3, r0
 8002ff0:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002ff2:	e00b      	b.n	800300c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ff4:	f7fe f8a0 	bl	8001138 <HAL_GetTick>
 8002ff8:	0002      	movs	r2, r0
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	1ad3      	subs	r3, r2, r3
 8002ffe:	2b02      	cmp	r3, #2
 8003000:	d904      	bls.n	800300c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8003002:	2313      	movs	r3, #19
 8003004:	18fb      	adds	r3, r7, r3
 8003006:	2203      	movs	r2, #3
 8003008:	701a      	strb	r2, [r3, #0]
        break;
 800300a:	e005      	b.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800300c:	4b6f      	ldr	r3, [pc, #444]	@ (80031cc <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800300e:	681a      	ldr	r2, [r3, #0]
 8003010:	2380      	movs	r3, #128	@ 0x80
 8003012:	005b      	lsls	r3, r3, #1
 8003014:	4013      	ands	r3, r2
 8003016:	d0ed      	beq.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8003018:	2313      	movs	r3, #19
 800301a:	18fb      	adds	r3, r7, r3
 800301c:	781b      	ldrb	r3, [r3, #0]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d154      	bne.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003022:	4b69      	ldr	r3, [pc, #420]	@ (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003024:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003026:	23c0      	movs	r3, #192	@ 0xc0
 8003028:	009b      	lsls	r3, r3, #2
 800302a:	4013      	ands	r3, r2
 800302c:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800302e:	697b      	ldr	r3, [r7, #20]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d019      	beq.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	699b      	ldr	r3, [r3, #24]
 8003038:	697a      	ldr	r2, [r7, #20]
 800303a:	429a      	cmp	r2, r3
 800303c:	d014      	beq.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800303e:	4b62      	ldr	r3, [pc, #392]	@ (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003040:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003042:	4a63      	ldr	r2, [pc, #396]	@ (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8003044:	4013      	ands	r3, r2
 8003046:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003048:	4b5f      	ldr	r3, [pc, #380]	@ (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800304a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800304c:	4b5e      	ldr	r3, [pc, #376]	@ (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800304e:	2180      	movs	r1, #128	@ 0x80
 8003050:	0249      	lsls	r1, r1, #9
 8003052:	430a      	orrs	r2, r1
 8003054:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003056:	4b5c      	ldr	r3, [pc, #368]	@ (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003058:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800305a:	4b5b      	ldr	r3, [pc, #364]	@ (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800305c:	495d      	ldr	r1, [pc, #372]	@ (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800305e:	400a      	ands	r2, r1
 8003060:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003062:	4b59      	ldr	r3, [pc, #356]	@ (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003064:	697a      	ldr	r2, [r7, #20]
 8003066:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	2201      	movs	r2, #1
 800306c:	4013      	ands	r3, r2
 800306e:	d016      	beq.n	800309e <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003070:	f7fe f862 	bl	8001138 <HAL_GetTick>
 8003074:	0003      	movs	r3, r0
 8003076:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003078:	e00c      	b.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800307a:	f7fe f85d 	bl	8001138 <HAL_GetTick>
 800307e:	0002      	movs	r2, r0
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	1ad3      	subs	r3, r2, r3
 8003084:	4a54      	ldr	r2, [pc, #336]	@ (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d904      	bls.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800308a:	2313      	movs	r3, #19
 800308c:	18fb      	adds	r3, r7, r3
 800308e:	2203      	movs	r2, #3
 8003090:	701a      	strb	r2, [r3, #0]
            break;
 8003092:	e004      	b.n	800309e <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003094:	4b4c      	ldr	r3, [pc, #304]	@ (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003096:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003098:	2202      	movs	r2, #2
 800309a:	4013      	ands	r3, r2
 800309c:	d0ed      	beq.n	800307a <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800309e:	2313      	movs	r3, #19
 80030a0:	18fb      	adds	r3, r7, r3
 80030a2:	781b      	ldrb	r3, [r3, #0]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d10a      	bne.n	80030be <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80030a8:	4b47      	ldr	r3, [pc, #284]	@ (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80030aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030ac:	4a48      	ldr	r2, [pc, #288]	@ (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80030ae:	4013      	ands	r3, r2
 80030b0:	0019      	movs	r1, r3
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	699a      	ldr	r2, [r3, #24]
 80030b6:	4b44      	ldr	r3, [pc, #272]	@ (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80030b8:	430a      	orrs	r2, r1
 80030ba:	65da      	str	r2, [r3, #92]	@ 0x5c
 80030bc:	e00c      	b.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80030be:	2312      	movs	r3, #18
 80030c0:	18fb      	adds	r3, r7, r3
 80030c2:	2213      	movs	r2, #19
 80030c4:	18ba      	adds	r2, r7, r2
 80030c6:	7812      	ldrb	r2, [r2, #0]
 80030c8:	701a      	strb	r2, [r3, #0]
 80030ca:	e005      	b.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030cc:	2312      	movs	r3, #18
 80030ce:	18fb      	adds	r3, r7, r3
 80030d0:	2213      	movs	r2, #19
 80030d2:	18ba      	adds	r2, r7, r2
 80030d4:	7812      	ldrb	r2, [r2, #0]
 80030d6:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80030d8:	2311      	movs	r3, #17
 80030da:	18fb      	adds	r3, r7, r3
 80030dc:	781b      	ldrb	r3, [r3, #0]
 80030de:	2b01      	cmp	r3, #1
 80030e0:	d105      	bne.n	80030ee <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030e2:	4b39      	ldr	r3, [pc, #228]	@ (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80030e4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80030e6:	4b38      	ldr	r3, [pc, #224]	@ (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80030e8:	493c      	ldr	r1, [pc, #240]	@ (80031dc <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80030ea:	400a      	ands	r2, r1
 80030ec:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	2201      	movs	r2, #1
 80030f4:	4013      	ands	r3, r2
 80030f6:	d009      	beq.n	800310c <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80030f8:	4b33      	ldr	r3, [pc, #204]	@ (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80030fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030fc:	2203      	movs	r2, #3
 80030fe:	4393      	bics	r3, r2
 8003100:	0019      	movs	r1, r3
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	685a      	ldr	r2, [r3, #4]
 8003106:	4b30      	ldr	r3, [pc, #192]	@ (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003108:	430a      	orrs	r2, r1
 800310a:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	2202      	movs	r2, #2
 8003112:	4013      	ands	r3, r2
 8003114:	d009      	beq.n	800312a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003116:	4b2c      	ldr	r3, [pc, #176]	@ (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003118:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800311a:	220c      	movs	r2, #12
 800311c:	4393      	bics	r3, r2
 800311e:	0019      	movs	r1, r3
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	689a      	ldr	r2, [r3, #8]
 8003124:	4b28      	ldr	r3, [pc, #160]	@ (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003126:	430a      	orrs	r2, r1
 8003128:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	2220      	movs	r2, #32
 8003130:	4013      	ands	r3, r2
 8003132:	d009      	beq.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003134:	4b24      	ldr	r3, [pc, #144]	@ (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003136:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003138:	4a29      	ldr	r2, [pc, #164]	@ (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800313a:	4013      	ands	r3, r2
 800313c:	0019      	movs	r1, r3
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	68da      	ldr	r2, [r3, #12]
 8003142:	4b21      	ldr	r3, [pc, #132]	@ (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003144:	430a      	orrs	r2, r1
 8003146:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681a      	ldr	r2, [r3, #0]
 800314c:	2380      	movs	r3, #128	@ 0x80
 800314e:	01db      	lsls	r3, r3, #7
 8003150:	4013      	ands	r3, r2
 8003152:	d015      	beq.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003154:	4b1c      	ldr	r3, [pc, #112]	@ (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003156:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003158:	009b      	lsls	r3, r3, #2
 800315a:	0899      	lsrs	r1, r3, #2
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	695a      	ldr	r2, [r3, #20]
 8003160:	4b19      	ldr	r3, [pc, #100]	@ (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003162:	430a      	orrs	r2, r1
 8003164:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	695a      	ldr	r2, [r3, #20]
 800316a:	2380      	movs	r3, #128	@ 0x80
 800316c:	05db      	lsls	r3, r3, #23
 800316e:	429a      	cmp	r2, r3
 8003170:	d106      	bne.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003172:	4b15      	ldr	r3, [pc, #84]	@ (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003174:	68da      	ldr	r2, [r3, #12]
 8003176:	4b14      	ldr	r3, [pc, #80]	@ (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003178:	2180      	movs	r1, #128	@ 0x80
 800317a:	0249      	lsls	r1, r1, #9
 800317c:	430a      	orrs	r2, r1
 800317e:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681a      	ldr	r2, [r3, #0]
 8003184:	2380      	movs	r3, #128	@ 0x80
 8003186:	011b      	lsls	r3, r3, #4
 8003188:	4013      	ands	r3, r2
 800318a:	d016      	beq.n	80031ba <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800318c:	4b0e      	ldr	r3, [pc, #56]	@ (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800318e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003190:	4a14      	ldr	r2, [pc, #80]	@ (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003192:	4013      	ands	r3, r2
 8003194:	0019      	movs	r1, r3
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	691a      	ldr	r2, [r3, #16]
 800319a:	4b0b      	ldr	r3, [pc, #44]	@ (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800319c:	430a      	orrs	r2, r1
 800319e:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	691a      	ldr	r2, [r3, #16]
 80031a4:	2380      	movs	r3, #128	@ 0x80
 80031a6:	01db      	lsls	r3, r3, #7
 80031a8:	429a      	cmp	r2, r3
 80031aa:	d106      	bne.n	80031ba <HAL_RCCEx_PeriphCLKConfig+0x23a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80031ac:	4b06      	ldr	r3, [pc, #24]	@ (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80031ae:	68da      	ldr	r2, [r3, #12]
 80031b0:	4b05      	ldr	r3, [pc, #20]	@ (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80031b2:	2180      	movs	r1, #128	@ 0x80
 80031b4:	0249      	lsls	r1, r1, #9
 80031b6:	430a      	orrs	r2, r1
 80031b8:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80031ba:	2312      	movs	r3, #18
 80031bc:	18fb      	adds	r3, r7, r3
 80031be:	781b      	ldrb	r3, [r3, #0]
}
 80031c0:	0018      	movs	r0, r3
 80031c2:	46bd      	mov	sp, r7
 80031c4:	b006      	add	sp, #24
 80031c6:	bd80      	pop	{r7, pc}
 80031c8:	40021000 	.word	0x40021000
 80031cc:	40007000 	.word	0x40007000
 80031d0:	fffffcff 	.word	0xfffffcff
 80031d4:	fffeffff 	.word	0xfffeffff
 80031d8:	00001388 	.word	0x00001388
 80031dc:	efffffff 	.word	0xefffffff
 80031e0:	ffffcfff 	.word	0xffffcfff
 80031e4:	ffff3fff 	.word	0xffff3fff

080031e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b082      	sub	sp, #8
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d101      	bne.n	80031fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80031f6:	2301      	movs	r3, #1
 80031f8:	e04a      	b.n	8003290 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	223d      	movs	r2, #61	@ 0x3d
 80031fe:	5c9b      	ldrb	r3, [r3, r2]
 8003200:	b2db      	uxtb	r3, r3
 8003202:	2b00      	cmp	r3, #0
 8003204:	d107      	bne.n	8003216 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	223c      	movs	r2, #60	@ 0x3c
 800320a:	2100      	movs	r1, #0
 800320c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	0018      	movs	r0, r3
 8003212:	f7fd fe0f 	bl	8000e34 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	223d      	movs	r2, #61	@ 0x3d
 800321a:	2102      	movs	r1, #2
 800321c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681a      	ldr	r2, [r3, #0]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	3304      	adds	r3, #4
 8003226:	0019      	movs	r1, r3
 8003228:	0010      	movs	r0, r2
 800322a:	f000 fa63 	bl	80036f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2248      	movs	r2, #72	@ 0x48
 8003232:	2101      	movs	r1, #1
 8003234:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	223e      	movs	r2, #62	@ 0x3e
 800323a:	2101      	movs	r1, #1
 800323c:	5499      	strb	r1, [r3, r2]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	223f      	movs	r2, #63	@ 0x3f
 8003242:	2101      	movs	r1, #1
 8003244:	5499      	strb	r1, [r3, r2]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2240      	movs	r2, #64	@ 0x40
 800324a:	2101      	movs	r1, #1
 800324c:	5499      	strb	r1, [r3, r2]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2241      	movs	r2, #65	@ 0x41
 8003252:	2101      	movs	r1, #1
 8003254:	5499      	strb	r1, [r3, r2]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2242      	movs	r2, #66	@ 0x42
 800325a:	2101      	movs	r1, #1
 800325c:	5499      	strb	r1, [r3, r2]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2243      	movs	r2, #67	@ 0x43
 8003262:	2101      	movs	r1, #1
 8003264:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2244      	movs	r2, #68	@ 0x44
 800326a:	2101      	movs	r1, #1
 800326c:	5499      	strb	r1, [r3, r2]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2245      	movs	r2, #69	@ 0x45
 8003272:	2101      	movs	r1, #1
 8003274:	5499      	strb	r1, [r3, r2]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2246      	movs	r2, #70	@ 0x46
 800327a:	2101      	movs	r1, #1
 800327c:	5499      	strb	r1, [r3, r2]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2247      	movs	r2, #71	@ 0x47
 8003282:	2101      	movs	r1, #1
 8003284:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	223d      	movs	r2, #61	@ 0x3d
 800328a:	2101      	movs	r1, #1
 800328c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800328e:	2300      	movs	r3, #0
}
 8003290:	0018      	movs	r0, r3
 8003292:	46bd      	mov	sp, r7
 8003294:	b002      	add	sp, #8
 8003296:	bd80      	pop	{r7, pc}

08003298 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b082      	sub	sp, #8
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d101      	bne.n	80032aa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80032a6:	2301      	movs	r3, #1
 80032a8:	e04a      	b.n	8003340 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	223d      	movs	r2, #61	@ 0x3d
 80032ae:	5c9b      	ldrb	r3, [r3, r2]
 80032b0:	b2db      	uxtb	r3, r3
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d107      	bne.n	80032c6 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	223c      	movs	r2, #60	@ 0x3c
 80032ba:	2100      	movs	r1, #0
 80032bc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	0018      	movs	r0, r3
 80032c2:	f7fd fe07 	bl	8000ed4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	223d      	movs	r2, #61	@ 0x3d
 80032ca:	2102      	movs	r1, #2
 80032cc:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681a      	ldr	r2, [r3, #0]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	3304      	adds	r3, #4
 80032d6:	0019      	movs	r1, r3
 80032d8:	0010      	movs	r0, r2
 80032da:	f000 fa0b 	bl	80036f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2248      	movs	r2, #72	@ 0x48
 80032e2:	2101      	movs	r1, #1
 80032e4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	223e      	movs	r2, #62	@ 0x3e
 80032ea:	2101      	movs	r1, #1
 80032ec:	5499      	strb	r1, [r3, r2]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	223f      	movs	r2, #63	@ 0x3f
 80032f2:	2101      	movs	r1, #1
 80032f4:	5499      	strb	r1, [r3, r2]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2240      	movs	r2, #64	@ 0x40
 80032fa:	2101      	movs	r1, #1
 80032fc:	5499      	strb	r1, [r3, r2]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2241      	movs	r2, #65	@ 0x41
 8003302:	2101      	movs	r1, #1
 8003304:	5499      	strb	r1, [r3, r2]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2242      	movs	r2, #66	@ 0x42
 800330a:	2101      	movs	r1, #1
 800330c:	5499      	strb	r1, [r3, r2]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2243      	movs	r2, #67	@ 0x43
 8003312:	2101      	movs	r1, #1
 8003314:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2244      	movs	r2, #68	@ 0x44
 800331a:	2101      	movs	r1, #1
 800331c:	5499      	strb	r1, [r3, r2]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2245      	movs	r2, #69	@ 0x45
 8003322:	2101      	movs	r1, #1
 8003324:	5499      	strb	r1, [r3, r2]
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2246      	movs	r2, #70	@ 0x46
 800332a:	2101      	movs	r1, #1
 800332c:	5499      	strb	r1, [r3, r2]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2247      	movs	r2, #71	@ 0x47
 8003332:	2101      	movs	r1, #1
 8003334:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	223d      	movs	r2, #61	@ 0x3d
 800333a:	2101      	movs	r1, #1
 800333c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800333e:	2300      	movs	r3, #0
}
 8003340:	0018      	movs	r0, r3
 8003342:	46bd      	mov	sp, r7
 8003344:	b002      	add	sp, #8
 8003346:	bd80      	pop	{r7, pc}

08003348 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b086      	sub	sp, #24
 800334c:	af00      	add	r7, sp, #0
 800334e:	60f8      	str	r0, [r7, #12]
 8003350:	60b9      	str	r1, [r7, #8]
 8003352:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003354:	2317      	movs	r3, #23
 8003356:	18fb      	adds	r3, r7, r3
 8003358:	2200      	movs	r2, #0
 800335a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	223c      	movs	r2, #60	@ 0x3c
 8003360:	5c9b      	ldrb	r3, [r3, r2]
 8003362:	2b01      	cmp	r3, #1
 8003364:	d101      	bne.n	800336a <HAL_TIM_PWM_ConfigChannel+0x22>
 8003366:	2302      	movs	r3, #2
 8003368:	e0e5      	b.n	8003536 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	223c      	movs	r2, #60	@ 0x3c
 800336e:	2101      	movs	r1, #1
 8003370:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2b14      	cmp	r3, #20
 8003376:	d900      	bls.n	800337a <HAL_TIM_PWM_ConfigChannel+0x32>
 8003378:	e0d1      	b.n	800351e <HAL_TIM_PWM_ConfigChannel+0x1d6>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	009a      	lsls	r2, r3, #2
 800337e:	4b70      	ldr	r3, [pc, #448]	@ (8003540 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8003380:	18d3      	adds	r3, r2, r3
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	68ba      	ldr	r2, [r7, #8]
 800338c:	0011      	movs	r1, r2
 800338e:	0018      	movs	r0, r3
 8003390:	f000 fa34 	bl	80037fc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	699a      	ldr	r2, [r3, #24]
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	2108      	movs	r1, #8
 80033a0:	430a      	orrs	r2, r1
 80033a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	699a      	ldr	r2, [r3, #24]
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	2104      	movs	r1, #4
 80033b0:	438a      	bics	r2, r1
 80033b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	6999      	ldr	r1, [r3, #24]
 80033ba:	68bb      	ldr	r3, [r7, #8]
 80033bc:	691a      	ldr	r2, [r3, #16]
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	430a      	orrs	r2, r1
 80033c4:	619a      	str	r2, [r3, #24]
      break;
 80033c6:	e0af      	b.n	8003528 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	68ba      	ldr	r2, [r7, #8]
 80033ce:	0011      	movs	r1, r2
 80033d0:	0018      	movs	r0, r3
 80033d2:	f000 fa9d 	bl	8003910 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	699a      	ldr	r2, [r3, #24]
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	2180      	movs	r1, #128	@ 0x80
 80033e2:	0109      	lsls	r1, r1, #4
 80033e4:	430a      	orrs	r2, r1
 80033e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	699a      	ldr	r2, [r3, #24]
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4954      	ldr	r1, [pc, #336]	@ (8003544 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80033f4:	400a      	ands	r2, r1
 80033f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	6999      	ldr	r1, [r3, #24]
 80033fe:	68bb      	ldr	r3, [r7, #8]
 8003400:	691b      	ldr	r3, [r3, #16]
 8003402:	021a      	lsls	r2, r3, #8
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	430a      	orrs	r2, r1
 800340a:	619a      	str	r2, [r3, #24]
      break;
 800340c:	e08c      	b.n	8003528 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	68ba      	ldr	r2, [r7, #8]
 8003414:	0011      	movs	r1, r2
 8003416:	0018      	movs	r0, r3
 8003418:	f000 fafe 	bl	8003a18 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	69da      	ldr	r2, [r3, #28]
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	2108      	movs	r1, #8
 8003428:	430a      	orrs	r2, r1
 800342a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	69da      	ldr	r2, [r3, #28]
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	2104      	movs	r1, #4
 8003438:	438a      	bics	r2, r1
 800343a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	69d9      	ldr	r1, [r3, #28]
 8003442:	68bb      	ldr	r3, [r7, #8]
 8003444:	691a      	ldr	r2, [r3, #16]
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	430a      	orrs	r2, r1
 800344c:	61da      	str	r2, [r3, #28]
      break;
 800344e:	e06b      	b.n	8003528 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	68ba      	ldr	r2, [r7, #8]
 8003456:	0011      	movs	r1, r2
 8003458:	0018      	movs	r0, r3
 800345a:	f000 fb65 	bl	8003b28 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	69da      	ldr	r2, [r3, #28]
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	2180      	movs	r1, #128	@ 0x80
 800346a:	0109      	lsls	r1, r1, #4
 800346c:	430a      	orrs	r2, r1
 800346e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	69da      	ldr	r2, [r3, #28]
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4932      	ldr	r1, [pc, #200]	@ (8003544 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800347c:	400a      	ands	r2, r1
 800347e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	69d9      	ldr	r1, [r3, #28]
 8003486:	68bb      	ldr	r3, [r7, #8]
 8003488:	691b      	ldr	r3, [r3, #16]
 800348a:	021a      	lsls	r2, r3, #8
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	430a      	orrs	r2, r1
 8003492:	61da      	str	r2, [r3, #28]
      break;
 8003494:	e048      	b.n	8003528 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	68ba      	ldr	r2, [r7, #8]
 800349c:	0011      	movs	r1, r2
 800349e:	0018      	movs	r0, r3
 80034a0:	f000 fbac 	bl	8003bfc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	2108      	movs	r1, #8
 80034b0:	430a      	orrs	r2, r1
 80034b2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	2104      	movs	r1, #4
 80034c0:	438a      	bics	r2, r1
 80034c2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80034ca:	68bb      	ldr	r3, [r7, #8]
 80034cc:	691a      	ldr	r2, [r3, #16]
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	430a      	orrs	r2, r1
 80034d4:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80034d6:	e027      	b.n	8003528 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	68ba      	ldr	r2, [r7, #8]
 80034de:	0011      	movs	r1, r2
 80034e0:	0018      	movs	r0, r3
 80034e2:	f000 fbeb 	bl	8003cbc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	2180      	movs	r1, #128	@ 0x80
 80034f2:	0109      	lsls	r1, r1, #4
 80034f4:	430a      	orrs	r2, r1
 80034f6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4910      	ldr	r1, [pc, #64]	@ (8003544 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003504:	400a      	ands	r2, r1
 8003506:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800350e:	68bb      	ldr	r3, [r7, #8]
 8003510:	691b      	ldr	r3, [r3, #16]
 8003512:	021a      	lsls	r2, r3, #8
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	430a      	orrs	r2, r1
 800351a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800351c:	e004      	b.n	8003528 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 800351e:	2317      	movs	r3, #23
 8003520:	18fb      	adds	r3, r7, r3
 8003522:	2201      	movs	r2, #1
 8003524:	701a      	strb	r2, [r3, #0]
      break;
 8003526:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	223c      	movs	r2, #60	@ 0x3c
 800352c:	2100      	movs	r1, #0
 800352e:	5499      	strb	r1, [r3, r2]

  return status;
 8003530:	2317      	movs	r3, #23
 8003532:	18fb      	adds	r3, r7, r3
 8003534:	781b      	ldrb	r3, [r3, #0]
}
 8003536:	0018      	movs	r0, r3
 8003538:	46bd      	mov	sp, r7
 800353a:	b006      	add	sp, #24
 800353c:	bd80      	pop	{r7, pc}
 800353e:	46c0      	nop			@ (mov r8, r8)
 8003540:	0800449c 	.word	0x0800449c
 8003544:	fffffbff 	.word	0xfffffbff

08003548 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b084      	sub	sp, #16
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
 8003550:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003552:	230f      	movs	r3, #15
 8003554:	18fb      	adds	r3, r7, r3
 8003556:	2200      	movs	r2, #0
 8003558:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	223c      	movs	r2, #60	@ 0x3c
 800355e:	5c9b      	ldrb	r3, [r3, r2]
 8003560:	2b01      	cmp	r3, #1
 8003562:	d101      	bne.n	8003568 <HAL_TIM_ConfigClockSource+0x20>
 8003564:	2302      	movs	r3, #2
 8003566:	e0bc      	b.n	80036e2 <HAL_TIM_ConfigClockSource+0x19a>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	223c      	movs	r2, #60	@ 0x3c
 800356c:	2101      	movs	r1, #1
 800356e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	223d      	movs	r2, #61	@ 0x3d
 8003574:	2102      	movs	r1, #2
 8003576:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	689b      	ldr	r3, [r3, #8]
 800357e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	4a5a      	ldr	r2, [pc, #360]	@ (80036ec <HAL_TIM_ConfigClockSource+0x1a4>)
 8003584:	4013      	ands	r3, r2
 8003586:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	4a59      	ldr	r2, [pc, #356]	@ (80036f0 <HAL_TIM_ConfigClockSource+0x1a8>)
 800358c:	4013      	ands	r3, r2
 800358e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	68ba      	ldr	r2, [r7, #8]
 8003596:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	2280      	movs	r2, #128	@ 0x80
 800359e:	0192      	lsls	r2, r2, #6
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d040      	beq.n	8003626 <HAL_TIM_ConfigClockSource+0xde>
 80035a4:	2280      	movs	r2, #128	@ 0x80
 80035a6:	0192      	lsls	r2, r2, #6
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d900      	bls.n	80035ae <HAL_TIM_ConfigClockSource+0x66>
 80035ac:	e088      	b.n	80036c0 <HAL_TIM_ConfigClockSource+0x178>
 80035ae:	2280      	movs	r2, #128	@ 0x80
 80035b0:	0152      	lsls	r2, r2, #5
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d100      	bne.n	80035b8 <HAL_TIM_ConfigClockSource+0x70>
 80035b6:	e088      	b.n	80036ca <HAL_TIM_ConfigClockSource+0x182>
 80035b8:	2280      	movs	r2, #128	@ 0x80
 80035ba:	0152      	lsls	r2, r2, #5
 80035bc:	4293      	cmp	r3, r2
 80035be:	d900      	bls.n	80035c2 <HAL_TIM_ConfigClockSource+0x7a>
 80035c0:	e07e      	b.n	80036c0 <HAL_TIM_ConfigClockSource+0x178>
 80035c2:	2b70      	cmp	r3, #112	@ 0x70
 80035c4:	d018      	beq.n	80035f8 <HAL_TIM_ConfigClockSource+0xb0>
 80035c6:	d900      	bls.n	80035ca <HAL_TIM_ConfigClockSource+0x82>
 80035c8:	e07a      	b.n	80036c0 <HAL_TIM_ConfigClockSource+0x178>
 80035ca:	2b60      	cmp	r3, #96	@ 0x60
 80035cc:	d04f      	beq.n	800366e <HAL_TIM_ConfigClockSource+0x126>
 80035ce:	d900      	bls.n	80035d2 <HAL_TIM_ConfigClockSource+0x8a>
 80035d0:	e076      	b.n	80036c0 <HAL_TIM_ConfigClockSource+0x178>
 80035d2:	2b50      	cmp	r3, #80	@ 0x50
 80035d4:	d03b      	beq.n	800364e <HAL_TIM_ConfigClockSource+0x106>
 80035d6:	d900      	bls.n	80035da <HAL_TIM_ConfigClockSource+0x92>
 80035d8:	e072      	b.n	80036c0 <HAL_TIM_ConfigClockSource+0x178>
 80035da:	2b40      	cmp	r3, #64	@ 0x40
 80035dc:	d057      	beq.n	800368e <HAL_TIM_ConfigClockSource+0x146>
 80035de:	d900      	bls.n	80035e2 <HAL_TIM_ConfigClockSource+0x9a>
 80035e0:	e06e      	b.n	80036c0 <HAL_TIM_ConfigClockSource+0x178>
 80035e2:	2b30      	cmp	r3, #48	@ 0x30
 80035e4:	d063      	beq.n	80036ae <HAL_TIM_ConfigClockSource+0x166>
 80035e6:	d86b      	bhi.n	80036c0 <HAL_TIM_ConfigClockSource+0x178>
 80035e8:	2b20      	cmp	r3, #32
 80035ea:	d060      	beq.n	80036ae <HAL_TIM_ConfigClockSource+0x166>
 80035ec:	d868      	bhi.n	80036c0 <HAL_TIM_ConfigClockSource+0x178>
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d05d      	beq.n	80036ae <HAL_TIM_ConfigClockSource+0x166>
 80035f2:	2b10      	cmp	r3, #16
 80035f4:	d05b      	beq.n	80036ae <HAL_TIM_ConfigClockSource+0x166>
 80035f6:	e063      	b.n	80036c0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003608:	f000 fc38 	bl	8003e7c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	689b      	ldr	r3, [r3, #8]
 8003612:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	2277      	movs	r2, #119	@ 0x77
 8003618:	4313      	orrs	r3, r2
 800361a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	68ba      	ldr	r2, [r7, #8]
 8003622:	609a      	str	r2, [r3, #8]
      break;
 8003624:	e052      	b.n	80036cc <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003636:	f000 fc21 	bl	8003e7c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	689a      	ldr	r2, [r3, #8]
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	2180      	movs	r1, #128	@ 0x80
 8003646:	01c9      	lsls	r1, r1, #7
 8003648:	430a      	orrs	r2, r1
 800364a:	609a      	str	r2, [r3, #8]
      break;
 800364c:	e03e      	b.n	80036cc <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800365a:	001a      	movs	r2, r3
 800365c:	f000 fb92 	bl	8003d84 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	2150      	movs	r1, #80	@ 0x50
 8003666:	0018      	movs	r0, r3
 8003668:	f000 fbec 	bl	8003e44 <TIM_ITRx_SetConfig>
      break;
 800366c:	e02e      	b.n	80036cc <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800367a:	001a      	movs	r2, r3
 800367c:	f000 fbb0 	bl	8003de0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	2160      	movs	r1, #96	@ 0x60
 8003686:	0018      	movs	r0, r3
 8003688:	f000 fbdc 	bl	8003e44 <TIM_ITRx_SetConfig>
      break;
 800368c:	e01e      	b.n	80036cc <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800369a:	001a      	movs	r2, r3
 800369c:	f000 fb72 	bl	8003d84 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	2140      	movs	r1, #64	@ 0x40
 80036a6:	0018      	movs	r0, r3
 80036a8:	f000 fbcc 	bl	8003e44 <TIM_ITRx_SetConfig>
      break;
 80036ac:	e00e      	b.n	80036cc <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681a      	ldr	r2, [r3, #0]
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	0019      	movs	r1, r3
 80036b8:	0010      	movs	r0, r2
 80036ba:	f000 fbc3 	bl	8003e44 <TIM_ITRx_SetConfig>
      break;
 80036be:	e005      	b.n	80036cc <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80036c0:	230f      	movs	r3, #15
 80036c2:	18fb      	adds	r3, r7, r3
 80036c4:	2201      	movs	r2, #1
 80036c6:	701a      	strb	r2, [r3, #0]
      break;
 80036c8:	e000      	b.n	80036cc <HAL_TIM_ConfigClockSource+0x184>
      break;
 80036ca:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	223d      	movs	r2, #61	@ 0x3d
 80036d0:	2101      	movs	r1, #1
 80036d2:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	223c      	movs	r2, #60	@ 0x3c
 80036d8:	2100      	movs	r1, #0
 80036da:	5499      	strb	r1, [r3, r2]

  return status;
 80036dc:	230f      	movs	r3, #15
 80036de:	18fb      	adds	r3, r7, r3
 80036e0:	781b      	ldrb	r3, [r3, #0]
}
 80036e2:	0018      	movs	r0, r3
 80036e4:	46bd      	mov	sp, r7
 80036e6:	b004      	add	sp, #16
 80036e8:	bd80      	pop	{r7, pc}
 80036ea:	46c0      	nop			@ (mov r8, r8)
 80036ec:	ffceff88 	.word	0xffceff88
 80036f0:	ffff00ff 	.word	0xffff00ff

080036f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b084      	sub	sp, #16
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
 80036fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	4a36      	ldr	r2, [pc, #216]	@ (80037e0 <TIM_Base_SetConfig+0xec>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d003      	beq.n	8003714 <TIM_Base_SetConfig+0x20>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	4a35      	ldr	r2, [pc, #212]	@ (80037e4 <TIM_Base_SetConfig+0xf0>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d108      	bne.n	8003726 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	2270      	movs	r2, #112	@ 0x70
 8003718:	4393      	bics	r3, r2
 800371a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	68fa      	ldr	r2, [r7, #12]
 8003722:	4313      	orrs	r3, r2
 8003724:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	4a2d      	ldr	r2, [pc, #180]	@ (80037e0 <TIM_Base_SetConfig+0xec>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d013      	beq.n	8003756 <TIM_Base_SetConfig+0x62>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	4a2c      	ldr	r2, [pc, #176]	@ (80037e4 <TIM_Base_SetConfig+0xf0>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d00f      	beq.n	8003756 <TIM_Base_SetConfig+0x62>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	4a2b      	ldr	r2, [pc, #172]	@ (80037e8 <TIM_Base_SetConfig+0xf4>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d00b      	beq.n	8003756 <TIM_Base_SetConfig+0x62>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	4a2a      	ldr	r2, [pc, #168]	@ (80037ec <TIM_Base_SetConfig+0xf8>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d007      	beq.n	8003756 <TIM_Base_SetConfig+0x62>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	4a29      	ldr	r2, [pc, #164]	@ (80037f0 <TIM_Base_SetConfig+0xfc>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d003      	beq.n	8003756 <TIM_Base_SetConfig+0x62>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	4a28      	ldr	r2, [pc, #160]	@ (80037f4 <TIM_Base_SetConfig+0x100>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d108      	bne.n	8003768 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	4a27      	ldr	r2, [pc, #156]	@ (80037f8 <TIM_Base_SetConfig+0x104>)
 800375a:	4013      	ands	r3, r2
 800375c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	68db      	ldr	r3, [r3, #12]
 8003762:	68fa      	ldr	r2, [r7, #12]
 8003764:	4313      	orrs	r3, r2
 8003766:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	2280      	movs	r2, #128	@ 0x80
 800376c:	4393      	bics	r3, r2
 800376e:	001a      	movs	r2, r3
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	695b      	ldr	r3, [r3, #20]
 8003774:	4313      	orrs	r3, r2
 8003776:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	68fa      	ldr	r2, [r7, #12]
 800377c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	689a      	ldr	r2, [r3, #8]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	681a      	ldr	r2, [r3, #0]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	4a13      	ldr	r2, [pc, #76]	@ (80037e0 <TIM_Base_SetConfig+0xec>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d00b      	beq.n	80037ae <TIM_Base_SetConfig+0xba>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	4a14      	ldr	r2, [pc, #80]	@ (80037ec <TIM_Base_SetConfig+0xf8>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d007      	beq.n	80037ae <TIM_Base_SetConfig+0xba>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	4a13      	ldr	r2, [pc, #76]	@ (80037f0 <TIM_Base_SetConfig+0xfc>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d003      	beq.n	80037ae <TIM_Base_SetConfig+0xba>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	4a12      	ldr	r2, [pc, #72]	@ (80037f4 <TIM_Base_SetConfig+0x100>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d103      	bne.n	80037b6 <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	691a      	ldr	r2, [r3, #16]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2201      	movs	r2, #1
 80037ba:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	691b      	ldr	r3, [r3, #16]
 80037c0:	2201      	movs	r2, #1
 80037c2:	4013      	ands	r3, r2
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	d106      	bne.n	80037d6 <TIM_Base_SetConfig+0xe2>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	691b      	ldr	r3, [r3, #16]
 80037cc:	2201      	movs	r2, #1
 80037ce:	4393      	bics	r3, r2
 80037d0:	001a      	movs	r2, r3
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	611a      	str	r2, [r3, #16]
  }
}
 80037d6:	46c0      	nop			@ (mov r8, r8)
 80037d8:	46bd      	mov	sp, r7
 80037da:	b004      	add	sp, #16
 80037dc:	bd80      	pop	{r7, pc}
 80037de:	46c0      	nop			@ (mov r8, r8)
 80037e0:	40012c00 	.word	0x40012c00
 80037e4:	40000400 	.word	0x40000400
 80037e8:	40002000 	.word	0x40002000
 80037ec:	40014000 	.word	0x40014000
 80037f0:	40014400 	.word	0x40014400
 80037f4:	40014800 	.word	0x40014800
 80037f8:	fffffcff 	.word	0xfffffcff

080037fc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b086      	sub	sp, #24
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
 8003804:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6a1b      	ldr	r3, [r3, #32]
 800380a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6a1b      	ldr	r3, [r3, #32]
 8003810:	2201      	movs	r2, #1
 8003812:	4393      	bics	r3, r2
 8003814:	001a      	movs	r2, r3
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	699b      	ldr	r3, [r3, #24]
 8003824:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	4a32      	ldr	r2, [pc, #200]	@ (80038f4 <TIM_OC1_SetConfig+0xf8>)
 800382a:	4013      	ands	r3, r2
 800382c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	2203      	movs	r2, #3
 8003832:	4393      	bics	r3, r2
 8003834:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	68fa      	ldr	r2, [r7, #12]
 800383c:	4313      	orrs	r3, r2
 800383e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003840:	697b      	ldr	r3, [r7, #20]
 8003842:	2202      	movs	r2, #2
 8003844:	4393      	bics	r3, r2
 8003846:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	689b      	ldr	r3, [r3, #8]
 800384c:	697a      	ldr	r2, [r7, #20]
 800384e:	4313      	orrs	r3, r2
 8003850:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	4a28      	ldr	r2, [pc, #160]	@ (80038f8 <TIM_OC1_SetConfig+0xfc>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d00b      	beq.n	8003872 <TIM_OC1_SetConfig+0x76>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	4a27      	ldr	r2, [pc, #156]	@ (80038fc <TIM_OC1_SetConfig+0x100>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d007      	beq.n	8003872 <TIM_OC1_SetConfig+0x76>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	4a26      	ldr	r2, [pc, #152]	@ (8003900 <TIM_OC1_SetConfig+0x104>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d003      	beq.n	8003872 <TIM_OC1_SetConfig+0x76>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	4a25      	ldr	r2, [pc, #148]	@ (8003904 <TIM_OC1_SetConfig+0x108>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d10c      	bne.n	800388c <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	2208      	movs	r2, #8
 8003876:	4393      	bics	r3, r2
 8003878:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	68db      	ldr	r3, [r3, #12]
 800387e:	697a      	ldr	r2, [r7, #20]
 8003880:	4313      	orrs	r3, r2
 8003882:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003884:	697b      	ldr	r3, [r7, #20]
 8003886:	2204      	movs	r2, #4
 8003888:	4393      	bics	r3, r2
 800388a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	4a1a      	ldr	r2, [pc, #104]	@ (80038f8 <TIM_OC1_SetConfig+0xfc>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d00b      	beq.n	80038ac <TIM_OC1_SetConfig+0xb0>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	4a19      	ldr	r2, [pc, #100]	@ (80038fc <TIM_OC1_SetConfig+0x100>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d007      	beq.n	80038ac <TIM_OC1_SetConfig+0xb0>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	4a18      	ldr	r2, [pc, #96]	@ (8003900 <TIM_OC1_SetConfig+0x104>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d003      	beq.n	80038ac <TIM_OC1_SetConfig+0xb0>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	4a17      	ldr	r2, [pc, #92]	@ (8003904 <TIM_OC1_SetConfig+0x108>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d111      	bne.n	80038d0 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80038ac:	693b      	ldr	r3, [r7, #16]
 80038ae:	4a16      	ldr	r2, [pc, #88]	@ (8003908 <TIM_OC1_SetConfig+0x10c>)
 80038b0:	4013      	ands	r3, r2
 80038b2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80038b4:	693b      	ldr	r3, [r7, #16]
 80038b6:	4a15      	ldr	r2, [pc, #84]	@ (800390c <TIM_OC1_SetConfig+0x110>)
 80038b8:	4013      	ands	r3, r2
 80038ba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	695b      	ldr	r3, [r3, #20]
 80038c0:	693a      	ldr	r2, [r7, #16]
 80038c2:	4313      	orrs	r3, r2
 80038c4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	699b      	ldr	r3, [r3, #24]
 80038ca:	693a      	ldr	r2, [r7, #16]
 80038cc:	4313      	orrs	r3, r2
 80038ce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	693a      	ldr	r2, [r7, #16]
 80038d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	68fa      	ldr	r2, [r7, #12]
 80038da:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	685a      	ldr	r2, [r3, #4]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	697a      	ldr	r2, [r7, #20]
 80038e8:	621a      	str	r2, [r3, #32]
}
 80038ea:	46c0      	nop			@ (mov r8, r8)
 80038ec:	46bd      	mov	sp, r7
 80038ee:	b006      	add	sp, #24
 80038f0:	bd80      	pop	{r7, pc}
 80038f2:	46c0      	nop			@ (mov r8, r8)
 80038f4:	fffeff8f 	.word	0xfffeff8f
 80038f8:	40012c00 	.word	0x40012c00
 80038fc:	40014000 	.word	0x40014000
 8003900:	40014400 	.word	0x40014400
 8003904:	40014800 	.word	0x40014800
 8003908:	fffffeff 	.word	0xfffffeff
 800390c:	fffffdff 	.word	0xfffffdff

08003910 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b086      	sub	sp, #24
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
 8003918:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6a1b      	ldr	r3, [r3, #32]
 800391e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6a1b      	ldr	r3, [r3, #32]
 8003924:	2210      	movs	r2, #16
 8003926:	4393      	bics	r3, r2
 8003928:	001a      	movs	r2, r3
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	699b      	ldr	r3, [r3, #24]
 8003938:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	4a2e      	ldr	r2, [pc, #184]	@ (80039f8 <TIM_OC2_SetConfig+0xe8>)
 800393e:	4013      	ands	r3, r2
 8003940:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	4a2d      	ldr	r2, [pc, #180]	@ (80039fc <TIM_OC2_SetConfig+0xec>)
 8003946:	4013      	ands	r3, r2
 8003948:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	021b      	lsls	r3, r3, #8
 8003950:	68fa      	ldr	r2, [r7, #12]
 8003952:	4313      	orrs	r3, r2
 8003954:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	2220      	movs	r2, #32
 800395a:	4393      	bics	r3, r2
 800395c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	689b      	ldr	r3, [r3, #8]
 8003962:	011b      	lsls	r3, r3, #4
 8003964:	697a      	ldr	r2, [r7, #20]
 8003966:	4313      	orrs	r3, r2
 8003968:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	4a24      	ldr	r2, [pc, #144]	@ (8003a00 <TIM_OC2_SetConfig+0xf0>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d10d      	bne.n	800398e <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003972:	697b      	ldr	r3, [r7, #20]
 8003974:	2280      	movs	r2, #128	@ 0x80
 8003976:	4393      	bics	r3, r2
 8003978:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	68db      	ldr	r3, [r3, #12]
 800397e:	011b      	lsls	r3, r3, #4
 8003980:	697a      	ldr	r2, [r7, #20]
 8003982:	4313      	orrs	r3, r2
 8003984:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	2240      	movs	r2, #64	@ 0x40
 800398a:	4393      	bics	r3, r2
 800398c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	4a1b      	ldr	r2, [pc, #108]	@ (8003a00 <TIM_OC2_SetConfig+0xf0>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d00b      	beq.n	80039ae <TIM_OC2_SetConfig+0x9e>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	4a1a      	ldr	r2, [pc, #104]	@ (8003a04 <TIM_OC2_SetConfig+0xf4>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d007      	beq.n	80039ae <TIM_OC2_SetConfig+0x9e>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	4a19      	ldr	r2, [pc, #100]	@ (8003a08 <TIM_OC2_SetConfig+0xf8>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d003      	beq.n	80039ae <TIM_OC2_SetConfig+0x9e>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	4a18      	ldr	r2, [pc, #96]	@ (8003a0c <TIM_OC2_SetConfig+0xfc>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d113      	bne.n	80039d6 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80039ae:	693b      	ldr	r3, [r7, #16]
 80039b0:	4a17      	ldr	r2, [pc, #92]	@ (8003a10 <TIM_OC2_SetConfig+0x100>)
 80039b2:	4013      	ands	r3, r2
 80039b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	4a16      	ldr	r2, [pc, #88]	@ (8003a14 <TIM_OC2_SetConfig+0x104>)
 80039ba:	4013      	ands	r3, r2
 80039bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	695b      	ldr	r3, [r3, #20]
 80039c2:	009b      	lsls	r3, r3, #2
 80039c4:	693a      	ldr	r2, [r7, #16]
 80039c6:	4313      	orrs	r3, r2
 80039c8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	699b      	ldr	r3, [r3, #24]
 80039ce:	009b      	lsls	r3, r3, #2
 80039d0:	693a      	ldr	r2, [r7, #16]
 80039d2:	4313      	orrs	r3, r2
 80039d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	693a      	ldr	r2, [r7, #16]
 80039da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	68fa      	ldr	r2, [r7, #12]
 80039e0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	685a      	ldr	r2, [r3, #4]
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	697a      	ldr	r2, [r7, #20]
 80039ee:	621a      	str	r2, [r3, #32]
}
 80039f0:	46c0      	nop			@ (mov r8, r8)
 80039f2:	46bd      	mov	sp, r7
 80039f4:	b006      	add	sp, #24
 80039f6:	bd80      	pop	{r7, pc}
 80039f8:	feff8fff 	.word	0xfeff8fff
 80039fc:	fffffcff 	.word	0xfffffcff
 8003a00:	40012c00 	.word	0x40012c00
 8003a04:	40014000 	.word	0x40014000
 8003a08:	40014400 	.word	0x40014400
 8003a0c:	40014800 	.word	0x40014800
 8003a10:	fffffbff 	.word	0xfffffbff
 8003a14:	fffff7ff 	.word	0xfffff7ff

08003a18 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b086      	sub	sp, #24
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
 8003a20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6a1b      	ldr	r3, [r3, #32]
 8003a26:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6a1b      	ldr	r3, [r3, #32]
 8003a2c:	4a33      	ldr	r2, [pc, #204]	@ (8003afc <TIM_OC3_SetConfig+0xe4>)
 8003a2e:	401a      	ands	r2, r3
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	69db      	ldr	r3, [r3, #28]
 8003a3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	4a2f      	ldr	r2, [pc, #188]	@ (8003b00 <TIM_OC3_SetConfig+0xe8>)
 8003a44:	4013      	ands	r3, r2
 8003a46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	2203      	movs	r2, #3
 8003a4c:	4393      	bics	r3, r2
 8003a4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	68fa      	ldr	r2, [r7, #12]
 8003a56:	4313      	orrs	r3, r2
 8003a58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003a5a:	697b      	ldr	r3, [r7, #20]
 8003a5c:	4a29      	ldr	r2, [pc, #164]	@ (8003b04 <TIM_OC3_SetConfig+0xec>)
 8003a5e:	4013      	ands	r3, r2
 8003a60:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	689b      	ldr	r3, [r3, #8]
 8003a66:	021b      	lsls	r3, r3, #8
 8003a68:	697a      	ldr	r2, [r7, #20]
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	4a25      	ldr	r2, [pc, #148]	@ (8003b08 <TIM_OC3_SetConfig+0xf0>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d10d      	bne.n	8003a92 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003a76:	697b      	ldr	r3, [r7, #20]
 8003a78:	4a24      	ldr	r2, [pc, #144]	@ (8003b0c <TIM_OC3_SetConfig+0xf4>)
 8003a7a:	4013      	ands	r3, r2
 8003a7c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	68db      	ldr	r3, [r3, #12]
 8003a82:	021b      	lsls	r3, r3, #8
 8003a84:	697a      	ldr	r2, [r7, #20]
 8003a86:	4313      	orrs	r3, r2
 8003a88:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003a8a:	697b      	ldr	r3, [r7, #20]
 8003a8c:	4a20      	ldr	r2, [pc, #128]	@ (8003b10 <TIM_OC3_SetConfig+0xf8>)
 8003a8e:	4013      	ands	r3, r2
 8003a90:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	4a1c      	ldr	r2, [pc, #112]	@ (8003b08 <TIM_OC3_SetConfig+0xf0>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d00b      	beq.n	8003ab2 <TIM_OC3_SetConfig+0x9a>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	4a1d      	ldr	r2, [pc, #116]	@ (8003b14 <TIM_OC3_SetConfig+0xfc>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d007      	beq.n	8003ab2 <TIM_OC3_SetConfig+0x9a>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	4a1c      	ldr	r2, [pc, #112]	@ (8003b18 <TIM_OC3_SetConfig+0x100>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d003      	beq.n	8003ab2 <TIM_OC3_SetConfig+0x9a>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	4a1b      	ldr	r2, [pc, #108]	@ (8003b1c <TIM_OC3_SetConfig+0x104>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d113      	bne.n	8003ada <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	4a1a      	ldr	r2, [pc, #104]	@ (8003b20 <TIM_OC3_SetConfig+0x108>)
 8003ab6:	4013      	ands	r3, r2
 8003ab8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003aba:	693b      	ldr	r3, [r7, #16]
 8003abc:	4a19      	ldr	r2, [pc, #100]	@ (8003b24 <TIM_OC3_SetConfig+0x10c>)
 8003abe:	4013      	ands	r3, r2
 8003ac0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	695b      	ldr	r3, [r3, #20]
 8003ac6:	011b      	lsls	r3, r3, #4
 8003ac8:	693a      	ldr	r2, [r7, #16]
 8003aca:	4313      	orrs	r3, r2
 8003acc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	699b      	ldr	r3, [r3, #24]
 8003ad2:	011b      	lsls	r3, r3, #4
 8003ad4:	693a      	ldr	r2, [r7, #16]
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	693a      	ldr	r2, [r7, #16]
 8003ade:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	68fa      	ldr	r2, [r7, #12]
 8003ae4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	685a      	ldr	r2, [r3, #4]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	697a      	ldr	r2, [r7, #20]
 8003af2:	621a      	str	r2, [r3, #32]
}
 8003af4:	46c0      	nop			@ (mov r8, r8)
 8003af6:	46bd      	mov	sp, r7
 8003af8:	b006      	add	sp, #24
 8003afa:	bd80      	pop	{r7, pc}
 8003afc:	fffffeff 	.word	0xfffffeff
 8003b00:	fffeff8f 	.word	0xfffeff8f
 8003b04:	fffffdff 	.word	0xfffffdff
 8003b08:	40012c00 	.word	0x40012c00
 8003b0c:	fffff7ff 	.word	0xfffff7ff
 8003b10:	fffffbff 	.word	0xfffffbff
 8003b14:	40014000 	.word	0x40014000
 8003b18:	40014400 	.word	0x40014400
 8003b1c:	40014800 	.word	0x40014800
 8003b20:	ffffefff 	.word	0xffffefff
 8003b24:	ffffdfff 	.word	0xffffdfff

08003b28 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b086      	sub	sp, #24
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
 8003b30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6a1b      	ldr	r3, [r3, #32]
 8003b36:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6a1b      	ldr	r3, [r3, #32]
 8003b3c:	4a26      	ldr	r2, [pc, #152]	@ (8003bd8 <TIM_OC4_SetConfig+0xb0>)
 8003b3e:	401a      	ands	r2, r3
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	69db      	ldr	r3, [r3, #28]
 8003b4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	4a22      	ldr	r2, [pc, #136]	@ (8003bdc <TIM_OC4_SetConfig+0xb4>)
 8003b54:	4013      	ands	r3, r2
 8003b56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	4a21      	ldr	r2, [pc, #132]	@ (8003be0 <TIM_OC4_SetConfig+0xb8>)
 8003b5c:	4013      	ands	r3, r2
 8003b5e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	021b      	lsls	r3, r3, #8
 8003b66:	68fa      	ldr	r2, [r7, #12]
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003b6c:	693b      	ldr	r3, [r7, #16]
 8003b6e:	4a1d      	ldr	r2, [pc, #116]	@ (8003be4 <TIM_OC4_SetConfig+0xbc>)
 8003b70:	4013      	ands	r3, r2
 8003b72:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	689b      	ldr	r3, [r3, #8]
 8003b78:	031b      	lsls	r3, r3, #12
 8003b7a:	693a      	ldr	r2, [r7, #16]
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	4a19      	ldr	r2, [pc, #100]	@ (8003be8 <TIM_OC4_SetConfig+0xc0>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d00b      	beq.n	8003ba0 <TIM_OC4_SetConfig+0x78>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	4a18      	ldr	r2, [pc, #96]	@ (8003bec <TIM_OC4_SetConfig+0xc4>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d007      	beq.n	8003ba0 <TIM_OC4_SetConfig+0x78>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	4a17      	ldr	r2, [pc, #92]	@ (8003bf0 <TIM_OC4_SetConfig+0xc8>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d003      	beq.n	8003ba0 <TIM_OC4_SetConfig+0x78>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	4a16      	ldr	r2, [pc, #88]	@ (8003bf4 <TIM_OC4_SetConfig+0xcc>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d109      	bne.n	8003bb4 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003ba0:	697b      	ldr	r3, [r7, #20]
 8003ba2:	4a15      	ldr	r2, [pc, #84]	@ (8003bf8 <TIM_OC4_SetConfig+0xd0>)
 8003ba4:	4013      	ands	r3, r2
 8003ba6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	695b      	ldr	r3, [r3, #20]
 8003bac:	019b      	lsls	r3, r3, #6
 8003bae:	697a      	ldr	r2, [r7, #20]
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	697a      	ldr	r2, [r7, #20]
 8003bb8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	68fa      	ldr	r2, [r7, #12]
 8003bbe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	685a      	ldr	r2, [r3, #4]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	693a      	ldr	r2, [r7, #16]
 8003bcc:	621a      	str	r2, [r3, #32]
}
 8003bce:	46c0      	nop			@ (mov r8, r8)
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	b006      	add	sp, #24
 8003bd4:	bd80      	pop	{r7, pc}
 8003bd6:	46c0      	nop			@ (mov r8, r8)
 8003bd8:	ffffefff 	.word	0xffffefff
 8003bdc:	feff8fff 	.word	0xfeff8fff
 8003be0:	fffffcff 	.word	0xfffffcff
 8003be4:	ffffdfff 	.word	0xffffdfff
 8003be8:	40012c00 	.word	0x40012c00
 8003bec:	40014000 	.word	0x40014000
 8003bf0:	40014400 	.word	0x40014400
 8003bf4:	40014800 	.word	0x40014800
 8003bf8:	ffffbfff 	.word	0xffffbfff

08003bfc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b086      	sub	sp, #24
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
 8003c04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6a1b      	ldr	r3, [r3, #32]
 8003c0a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6a1b      	ldr	r3, [r3, #32]
 8003c10:	4a23      	ldr	r2, [pc, #140]	@ (8003ca0 <TIM_OC5_SetConfig+0xa4>)
 8003c12:	401a      	ands	r2, r3
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	4a1f      	ldr	r2, [pc, #124]	@ (8003ca4 <TIM_OC5_SetConfig+0xa8>)
 8003c28:	4013      	ands	r3, r2
 8003c2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	68fa      	ldr	r2, [r7, #12]
 8003c32:	4313      	orrs	r3, r2
 8003c34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003c36:	693b      	ldr	r3, [r7, #16]
 8003c38:	4a1b      	ldr	r2, [pc, #108]	@ (8003ca8 <TIM_OC5_SetConfig+0xac>)
 8003c3a:	4013      	ands	r3, r2
 8003c3c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	689b      	ldr	r3, [r3, #8]
 8003c42:	041b      	lsls	r3, r3, #16
 8003c44:	693a      	ldr	r2, [r7, #16]
 8003c46:	4313      	orrs	r3, r2
 8003c48:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	4a17      	ldr	r2, [pc, #92]	@ (8003cac <TIM_OC5_SetConfig+0xb0>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d00b      	beq.n	8003c6a <TIM_OC5_SetConfig+0x6e>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	4a16      	ldr	r2, [pc, #88]	@ (8003cb0 <TIM_OC5_SetConfig+0xb4>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d007      	beq.n	8003c6a <TIM_OC5_SetConfig+0x6e>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	4a15      	ldr	r2, [pc, #84]	@ (8003cb4 <TIM_OC5_SetConfig+0xb8>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d003      	beq.n	8003c6a <TIM_OC5_SetConfig+0x6e>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	4a14      	ldr	r2, [pc, #80]	@ (8003cb8 <TIM_OC5_SetConfig+0xbc>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d109      	bne.n	8003c7e <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003c6a:	697b      	ldr	r3, [r7, #20]
 8003c6c:	4a0c      	ldr	r2, [pc, #48]	@ (8003ca0 <TIM_OC5_SetConfig+0xa4>)
 8003c6e:	4013      	ands	r3, r2
 8003c70:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	695b      	ldr	r3, [r3, #20]
 8003c76:	021b      	lsls	r3, r3, #8
 8003c78:	697a      	ldr	r2, [r7, #20]
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	697a      	ldr	r2, [r7, #20]
 8003c82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	68fa      	ldr	r2, [r7, #12]
 8003c88:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	685a      	ldr	r2, [r3, #4]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	693a      	ldr	r2, [r7, #16]
 8003c96:	621a      	str	r2, [r3, #32]
}
 8003c98:	46c0      	nop			@ (mov r8, r8)
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	b006      	add	sp, #24
 8003c9e:	bd80      	pop	{r7, pc}
 8003ca0:	fffeffff 	.word	0xfffeffff
 8003ca4:	fffeff8f 	.word	0xfffeff8f
 8003ca8:	fffdffff 	.word	0xfffdffff
 8003cac:	40012c00 	.word	0x40012c00
 8003cb0:	40014000 	.word	0x40014000
 8003cb4:	40014400 	.word	0x40014400
 8003cb8:	40014800 	.word	0x40014800

08003cbc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b086      	sub	sp, #24
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
 8003cc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6a1b      	ldr	r3, [r3, #32]
 8003cca:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6a1b      	ldr	r3, [r3, #32]
 8003cd0:	4a24      	ldr	r2, [pc, #144]	@ (8003d64 <TIM_OC6_SetConfig+0xa8>)
 8003cd2:	401a      	ands	r2, r3
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ce2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	4a20      	ldr	r2, [pc, #128]	@ (8003d68 <TIM_OC6_SetConfig+0xac>)
 8003ce8:	4013      	ands	r3, r2
 8003cea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	021b      	lsls	r3, r3, #8
 8003cf2:	68fa      	ldr	r2, [r7, #12]
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003cf8:	693b      	ldr	r3, [r7, #16]
 8003cfa:	4a1c      	ldr	r2, [pc, #112]	@ (8003d6c <TIM_OC6_SetConfig+0xb0>)
 8003cfc:	4013      	ands	r3, r2
 8003cfe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	689b      	ldr	r3, [r3, #8]
 8003d04:	051b      	lsls	r3, r3, #20
 8003d06:	693a      	ldr	r2, [r7, #16]
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	4a18      	ldr	r2, [pc, #96]	@ (8003d70 <TIM_OC6_SetConfig+0xb4>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d00b      	beq.n	8003d2c <TIM_OC6_SetConfig+0x70>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	4a17      	ldr	r2, [pc, #92]	@ (8003d74 <TIM_OC6_SetConfig+0xb8>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d007      	beq.n	8003d2c <TIM_OC6_SetConfig+0x70>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	4a16      	ldr	r2, [pc, #88]	@ (8003d78 <TIM_OC6_SetConfig+0xbc>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d003      	beq.n	8003d2c <TIM_OC6_SetConfig+0x70>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	4a15      	ldr	r2, [pc, #84]	@ (8003d7c <TIM_OC6_SetConfig+0xc0>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d109      	bne.n	8003d40 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003d2c:	697b      	ldr	r3, [r7, #20]
 8003d2e:	4a14      	ldr	r2, [pc, #80]	@ (8003d80 <TIM_OC6_SetConfig+0xc4>)
 8003d30:	4013      	ands	r3, r2
 8003d32:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	695b      	ldr	r3, [r3, #20]
 8003d38:	029b      	lsls	r3, r3, #10
 8003d3a:	697a      	ldr	r2, [r7, #20]
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	697a      	ldr	r2, [r7, #20]
 8003d44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	68fa      	ldr	r2, [r7, #12]
 8003d4a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	685a      	ldr	r2, [r3, #4]
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	693a      	ldr	r2, [r7, #16]
 8003d58:	621a      	str	r2, [r3, #32]
}
 8003d5a:	46c0      	nop			@ (mov r8, r8)
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	b006      	add	sp, #24
 8003d60:	bd80      	pop	{r7, pc}
 8003d62:	46c0      	nop			@ (mov r8, r8)
 8003d64:	ffefffff 	.word	0xffefffff
 8003d68:	feff8fff 	.word	0xfeff8fff
 8003d6c:	ffdfffff 	.word	0xffdfffff
 8003d70:	40012c00 	.word	0x40012c00
 8003d74:	40014000 	.word	0x40014000
 8003d78:	40014400 	.word	0x40014400
 8003d7c:	40014800 	.word	0x40014800
 8003d80:	fffbffff 	.word	0xfffbffff

08003d84 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b086      	sub	sp, #24
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	60f8      	str	r0, [r7, #12]
 8003d8c:	60b9      	str	r1, [r7, #8]
 8003d8e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	6a1b      	ldr	r3, [r3, #32]
 8003d94:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	6a1b      	ldr	r3, [r3, #32]
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	4393      	bics	r3, r2
 8003d9e:	001a      	movs	r2, r3
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	699b      	ldr	r3, [r3, #24]
 8003da8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003daa:	693b      	ldr	r3, [r7, #16]
 8003dac:	22f0      	movs	r2, #240	@ 0xf0
 8003dae:	4393      	bics	r3, r2
 8003db0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	011b      	lsls	r3, r3, #4
 8003db6:	693a      	ldr	r2, [r7, #16]
 8003db8:	4313      	orrs	r3, r2
 8003dba:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003dbc:	697b      	ldr	r3, [r7, #20]
 8003dbe:	220a      	movs	r2, #10
 8003dc0:	4393      	bics	r3, r2
 8003dc2:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003dc4:	697a      	ldr	r2, [r7, #20]
 8003dc6:	68bb      	ldr	r3, [r7, #8]
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	693a      	ldr	r2, [r7, #16]
 8003dd0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	697a      	ldr	r2, [r7, #20]
 8003dd6:	621a      	str	r2, [r3, #32]
}
 8003dd8:	46c0      	nop			@ (mov r8, r8)
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	b006      	add	sp, #24
 8003dde:	bd80      	pop	{r7, pc}

08003de0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b086      	sub	sp, #24
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	60f8      	str	r0, [r7, #12]
 8003de8:	60b9      	str	r1, [r7, #8]
 8003dea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	6a1b      	ldr	r3, [r3, #32]
 8003df0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	6a1b      	ldr	r3, [r3, #32]
 8003df6:	2210      	movs	r2, #16
 8003df8:	4393      	bics	r3, r2
 8003dfa:	001a      	movs	r2, r3
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	699b      	ldr	r3, [r3, #24]
 8003e04:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	4a0d      	ldr	r2, [pc, #52]	@ (8003e40 <TIM_TI2_ConfigInputStage+0x60>)
 8003e0a:	4013      	ands	r3, r2
 8003e0c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	031b      	lsls	r3, r3, #12
 8003e12:	693a      	ldr	r2, [r7, #16]
 8003e14:	4313      	orrs	r3, r2
 8003e16:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003e18:	697b      	ldr	r3, [r7, #20]
 8003e1a:	22a0      	movs	r2, #160	@ 0xa0
 8003e1c:	4393      	bics	r3, r2
 8003e1e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	011b      	lsls	r3, r3, #4
 8003e24:	697a      	ldr	r2, [r7, #20]
 8003e26:	4313      	orrs	r3, r2
 8003e28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	693a      	ldr	r2, [r7, #16]
 8003e2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	697a      	ldr	r2, [r7, #20]
 8003e34:	621a      	str	r2, [r3, #32]
}
 8003e36:	46c0      	nop			@ (mov r8, r8)
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	b006      	add	sp, #24
 8003e3c:	bd80      	pop	{r7, pc}
 8003e3e:	46c0      	nop			@ (mov r8, r8)
 8003e40:	ffff0fff 	.word	0xffff0fff

08003e44 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b084      	sub	sp, #16
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
 8003e4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	689b      	ldr	r3, [r3, #8]
 8003e52:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	4a08      	ldr	r2, [pc, #32]	@ (8003e78 <TIM_ITRx_SetConfig+0x34>)
 8003e58:	4013      	ands	r3, r2
 8003e5a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003e5c:	683a      	ldr	r2, [r7, #0]
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	4313      	orrs	r3, r2
 8003e62:	2207      	movs	r2, #7
 8003e64:	4313      	orrs	r3, r2
 8003e66:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	68fa      	ldr	r2, [r7, #12]
 8003e6c:	609a      	str	r2, [r3, #8]
}
 8003e6e:	46c0      	nop			@ (mov r8, r8)
 8003e70:	46bd      	mov	sp, r7
 8003e72:	b004      	add	sp, #16
 8003e74:	bd80      	pop	{r7, pc}
 8003e76:	46c0      	nop			@ (mov r8, r8)
 8003e78:	ffcfff8f 	.word	0xffcfff8f

08003e7c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b086      	sub	sp, #24
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	60f8      	str	r0, [r7, #12]
 8003e84:	60b9      	str	r1, [r7, #8]
 8003e86:	607a      	str	r2, [r7, #4]
 8003e88:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	689b      	ldr	r3, [r3, #8]
 8003e8e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e90:	697b      	ldr	r3, [r7, #20]
 8003e92:	4a09      	ldr	r2, [pc, #36]	@ (8003eb8 <TIM_ETR_SetConfig+0x3c>)
 8003e94:	4013      	ands	r3, r2
 8003e96:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	021a      	lsls	r2, r3, #8
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	431a      	orrs	r2, r3
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	697a      	ldr	r2, [r7, #20]
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	697a      	ldr	r2, [r7, #20]
 8003eae:	609a      	str	r2, [r3, #8]
}
 8003eb0:	46c0      	nop			@ (mov r8, r8)
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	b006      	add	sp, #24
 8003eb6:	bd80      	pop	{r7, pc}
 8003eb8:	ffff00ff 	.word	0xffff00ff

08003ebc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b084      	sub	sp, #16
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
 8003ec4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	223c      	movs	r2, #60	@ 0x3c
 8003eca:	5c9b      	ldrb	r3, [r3, r2]
 8003ecc:	2b01      	cmp	r3, #1
 8003ece:	d101      	bne.n	8003ed4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003ed0:	2302      	movs	r3, #2
 8003ed2:	e04f      	b.n	8003f74 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	223c      	movs	r2, #60	@ 0x3c
 8003ed8:	2101      	movs	r1, #1
 8003eda:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	223d      	movs	r2, #61	@ 0x3d
 8003ee0:	2102      	movs	r1, #2
 8003ee2:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	689b      	ldr	r3, [r3, #8]
 8003ef2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a20      	ldr	r2, [pc, #128]	@ (8003f7c <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d108      	bne.n	8003f10 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	4a1f      	ldr	r2, [pc, #124]	@ (8003f80 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003f02:	4013      	ands	r3, r2
 8003f04:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	68fa      	ldr	r2, [r7, #12]
 8003f0c:	4313      	orrs	r3, r2
 8003f0e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	2270      	movs	r2, #112	@ 0x70
 8003f14:	4393      	bics	r3, r2
 8003f16:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	68fa      	ldr	r2, [r7, #12]
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	68fa      	ldr	r2, [r7, #12]
 8003f28:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4a13      	ldr	r2, [pc, #76]	@ (8003f7c <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d009      	beq.n	8003f48 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a12      	ldr	r2, [pc, #72]	@ (8003f84 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d004      	beq.n	8003f48 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a11      	ldr	r2, [pc, #68]	@ (8003f88 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d10c      	bne.n	8003f62 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003f48:	68bb      	ldr	r3, [r7, #8]
 8003f4a:	2280      	movs	r2, #128	@ 0x80
 8003f4c:	4393      	bics	r3, r2
 8003f4e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	689b      	ldr	r3, [r3, #8]
 8003f54:	68ba      	ldr	r2, [r7, #8]
 8003f56:	4313      	orrs	r3, r2
 8003f58:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	68ba      	ldr	r2, [r7, #8]
 8003f60:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	223d      	movs	r2, #61	@ 0x3d
 8003f66:	2101      	movs	r1, #1
 8003f68:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	223c      	movs	r2, #60	@ 0x3c
 8003f6e:	2100      	movs	r1, #0
 8003f70:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003f72:	2300      	movs	r3, #0
}
 8003f74:	0018      	movs	r0, r3
 8003f76:	46bd      	mov	sp, r7
 8003f78:	b004      	add	sp, #16
 8003f7a:	bd80      	pop	{r7, pc}
 8003f7c:	40012c00 	.word	0x40012c00
 8003f80:	ff0fffff 	.word	0xff0fffff
 8003f84:	40000400 	.word	0x40000400
 8003f88:	40014000 	.word	0x40014000

08003f8c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b084      	sub	sp, #16
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
 8003f94:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003f96:	2300      	movs	r3, #0
 8003f98:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	223c      	movs	r2, #60	@ 0x3c
 8003f9e:	5c9b      	ldrb	r3, [r3, r2]
 8003fa0:	2b01      	cmp	r3, #1
 8003fa2:	d101      	bne.n	8003fa8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003fa4:	2302      	movs	r3, #2
 8003fa6:	e06f      	b.n	8004088 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	223c      	movs	r2, #60	@ 0x3c
 8003fac:	2101      	movs	r1, #1
 8003fae:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	22ff      	movs	r2, #255	@ 0xff
 8003fb4:	4393      	bics	r3, r2
 8003fb6:	001a      	movs	r2, r3
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	68db      	ldr	r3, [r3, #12]
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	4a33      	ldr	r2, [pc, #204]	@ (8004090 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 8003fc4:	401a      	ands	r2, r3
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	689b      	ldr	r3, [r3, #8]
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	4a30      	ldr	r2, [pc, #192]	@ (8004094 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 8003fd2:	401a      	ands	r2, r3
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	4a2e      	ldr	r2, [pc, #184]	@ (8004098 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>)
 8003fe0:	401a      	ands	r2, r3
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	4a2b      	ldr	r2, [pc, #172]	@ (800409c <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8003fee:	401a      	ands	r2, r3
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	691b      	ldr	r3, [r3, #16]
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	4a29      	ldr	r2, [pc, #164]	@ (80040a0 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8003ffc:	401a      	ands	r2, r3
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	695b      	ldr	r3, [r3, #20]
 8004002:	4313      	orrs	r3, r2
 8004004:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	4a26      	ldr	r2, [pc, #152]	@ (80040a4 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 800400a:	401a      	ands	r2, r3
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004010:	4313      	orrs	r3, r2
 8004012:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	4a24      	ldr	r2, [pc, #144]	@ (80040a8 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8004018:	401a      	ands	r2, r3
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	699b      	ldr	r3, [r3, #24]
 800401e:	041b      	lsls	r3, r3, #16
 8004020:	4313      	orrs	r3, r2
 8004022:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	4a21      	ldr	r2, [pc, #132]	@ (80040ac <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8004028:	401a      	ands	r2, r3
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	69db      	ldr	r3, [r3, #28]
 800402e:	4313      	orrs	r3, r2
 8004030:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4a1e      	ldr	r2, [pc, #120]	@ (80040b0 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d11c      	bne.n	8004076 <HAL_TIMEx_ConfigBreakDeadTime+0xea>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	4a1d      	ldr	r2, [pc, #116]	@ (80040b4 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8004040:	401a      	ands	r2, r3
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004046:	051b      	lsls	r3, r3, #20
 8004048:	4313      	orrs	r3, r2
 800404a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	4a1a      	ldr	r2, [pc, #104]	@ (80040b8 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8004050:	401a      	ands	r2, r3
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	6a1b      	ldr	r3, [r3, #32]
 8004056:	4313      	orrs	r3, r2
 8004058:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	4a17      	ldr	r2, [pc, #92]	@ (80040bc <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 800405e:	401a      	ands	r2, r3
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004064:	4313      	orrs	r3, r2
 8004066:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	4a15      	ldr	r2, [pc, #84]	@ (80040c0 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 800406c:	401a      	ands	r2, r3
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004072:	4313      	orrs	r3, r2
 8004074:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	68fa      	ldr	r2, [r7, #12]
 800407c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	223c      	movs	r2, #60	@ 0x3c
 8004082:	2100      	movs	r1, #0
 8004084:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004086:	2300      	movs	r3, #0
}
 8004088:	0018      	movs	r0, r3
 800408a:	46bd      	mov	sp, r7
 800408c:	b004      	add	sp, #16
 800408e:	bd80      	pop	{r7, pc}
 8004090:	fffffcff 	.word	0xfffffcff
 8004094:	fffffbff 	.word	0xfffffbff
 8004098:	fffff7ff 	.word	0xfffff7ff
 800409c:	ffffefff 	.word	0xffffefff
 80040a0:	ffffdfff 	.word	0xffffdfff
 80040a4:	ffffbfff 	.word	0xffffbfff
 80040a8:	fff0ffff 	.word	0xfff0ffff
 80040ac:	efffffff 	.word	0xefffffff
 80040b0:	40012c00 	.word	0x40012c00
 80040b4:	ff0fffff 	.word	0xff0fffff
 80040b8:	feffffff 	.word	0xfeffffff
 80040bc:	fdffffff 	.word	0xfdffffff
 80040c0:	dfffffff 	.word	0xdfffffff

080040c4 <Reset_Handler>:



extern void Reset_Handler(void) __attribute__((__interrupt__));
void Reset_Handler(void)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b082      	sub	sp, #8
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	4b13      	ldr	r3, [pc, #76]	@ (8004118 <Reset_Handler+0x54>)
 80040cc:	607b      	str	r3, [r7, #4]
 80040ce:	4b13      	ldr	r3, [pc, #76]	@ (800411c <Reset_Handler+0x58>)
 80040d0:	603b      	str	r3, [r7, #0]
 80040d2:	e007      	b.n	80040e4 <Reset_Handler+0x20>
 80040d4:	687a      	ldr	r2, [r7, #4]
 80040d6:	1d13      	adds	r3, r2, #4
 80040d8:	607b      	str	r3, [r7, #4]
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	1d19      	adds	r1, r3, #4
 80040de:	6039      	str	r1, [r7, #0]
 80040e0:	6812      	ldr	r2, [r2, #0]
 80040e2:	601a      	str	r2, [r3, #0]
 80040e4:	683a      	ldr	r2, [r7, #0]
 80040e6:	4b0e      	ldr	r3, [pc, #56]	@ (8004120 <Reset_Handler+0x5c>)
 80040e8:	429a      	cmp	r2, r3
 80040ea:	d3f3      	bcc.n	80040d4 <Reset_Handler+0x10>
 80040ec:	4b0d      	ldr	r3, [pc, #52]	@ (8004124 <Reset_Handler+0x60>)
 80040ee:	603b      	str	r3, [r7, #0]
 80040f0:	e004      	b.n	80040fc <Reset_Handler+0x38>
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	1d1a      	adds	r2, r3, #4
 80040f6:	603a      	str	r2, [r7, #0]
 80040f8:	2200      	movs	r2, #0
 80040fa:	601a      	str	r2, [r3, #0]
 80040fc:	683a      	ldr	r2, [r7, #0]
    while (dst < &_edata)
        *dst++ = *src++;

    // Zero out the .bss segment
    dst = &_sbss;
    while (dst < &_ebss)
 80040fe:	4b0a      	ldr	r3, [pc, #40]	@ (8004128 <Reset_Handler+0x64>)
 8004100:	429a      	cmp	r2, r3
 8004102:	d3f6      	bcc.n	80040f2 <Reset_Handler+0x2e>
        *dst++ = 0;

    VTOR_REG = (uint32_t)vectors;
 8004104:	4b09      	ldr	r3, [pc, #36]	@ (800412c <Reset_Handler+0x68>)
 8004106:	4a0a      	ldr	r2, [pc, #40]	@ (8004130 <Reset_Handler+0x6c>)
 8004108:	601a      	str	r2, [r3, #0]

    //__libc_init_array();

    main();
 800410a:	f7fc fb7f 	bl	800080c <main>
}
 800410e:	46c0      	nop			@ (mov r8, r8)
 8004110:	46bd      	mov	sp, r7
 8004112:	b002      	add	sp, #8
 8004114:	bd80      	pop	{r7, pc}
 8004116:	46c0      	nop			@ (mov r8, r8)
 8004118:	08004500 	.word	0x08004500
 800411c:	20000000 	.word	0x20000000
 8004120:	2000000c 	.word	0x2000000c
 8004124:	2000000c 	.word	0x2000000c
 8004128:	20000258 	.word	0x20000258
 800412c:	e000ed08 	.word	0xe000ed08
 8004130:	080000b8 	.word	0x080000b8

08004134 <hal_gpio_init>:
#include "stm32g0xx_ll_gpio.h"
#include "main.h"
#include "gpio.h"

void hal_gpio_init(void)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	af00      	add	r7, sp, #0
	// Call the GPIO initialization function setup by the STM32CubeIDE Device Configuration Tool:
	MX_GPIO_Init();
 8004138:	f7fc f9a2 	bl	8000480 <MX_GPIO_Init>
}
 800413c:	46c0      	nop			@ (mov r8, r8)
 800413e:	46bd      	mov	sp, r7
 8004140:	bd80      	pop	{r7, pc}

08004142 <hal_timer_get_systick>:
*
*  return values:  The current 1 millisecond systick count
*  remarks:
*********************************************************************************/
uint32_t hal_timer_get_systick(void)
{
 8004142:	b580      	push	{r7, lr}
 8004144:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8004146:	f7fc fff7 	bl	8001138 <HAL_GetTick>
 800414a:	0003      	movs	r3, r0
}
 800414c:	0018      	movs	r0, r3
 800414e:	46bd      	mov	sp, r7
 8004150:	bd80      	pop	{r7, pc}

08004152 <hal_timer_get_ticks_since_count>:
*
*  remarks:
*********************************************************************************/

uint32_t hal_timer_get_ticks_since_count(uint32_t lastCount)
{
 8004152:	b580      	push	{r7, lr}
 8004154:	b084      	sub	sp, #16
 8004156:	af00      	add	r7, sp, #0
 8004158:	6078      	str	r0, [r7, #4]
    uint32_t result;
    uint32_t currentCount = hal_timer_get_systick();
 800415a:	f7ff fff2 	bl	8004142 <hal_timer_get_systick>
 800415e:	0003      	movs	r3, r0
 8004160:	60bb      	str	r3, [r7, #8]

    // Check if the counter rolled over:
    if (currentCount >= lastCount)
 8004162:	68ba      	ldr	r2, [r7, #8]
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	429a      	cmp	r2, r3
 8004168:	d304      	bcc.n	8004174 <hal_timer_get_ticks_since_count+0x22>
    {
        //Counter has not rolled over.
        result = currentCount - lastCount;
 800416a:	68ba      	ldr	r2, [r7, #8]
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	1ad3      	subs	r3, r2, r3
 8004170:	60fb      	str	r3, [r7, #12]
 8004172:	e004      	b.n	800417e <hal_timer_get_ticks_since_count+0x2c>
    }
    else
    {
        // The counter rolled over / overflowed. Deal with it:
        result = UINT32_MAX - lastCount + currentCount;
 8004174:	68ba      	ldr	r2, [r7, #8]
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	1ad3      	subs	r3, r2, r3
 800417a:	3b01      	subs	r3, #1
 800417c:	60fb      	str	r3, [r7, #12]
    }

    return result;
 800417e:	68fb      	ldr	r3, [r7, #12]
}
 8004180:	0018      	movs	r0, r3
 8004182:	46bd      	mov	sp, r7
 8004184:	b004      	add	sp, #16
 8004186:	bd80      	pop	{r7, pc}

08004188 <hal_timer_init>:
{
	SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk; /* disable systick */
}

void hal_timer_init(void)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	af00      	add	r7, sp, #0

	  // Note that the following "USING" macros are defined in perphdefs.h
#if defined  USING_TIM1
	  MX_TIM1_Init();
 800418c:	f7fc fc1c 	bl	80009c8 <MX_TIM1_Init>
#endif
#if defined  USING_TIM3
	  MX_TIM3_Init();
 8004190:	f7fc fce4 	bl	8000b5c <MX_TIM3_Init>
#endif
#if defined  USING_TIM6
	  MX_TIM6_Init();
 8004194:	f7fc fd62 	bl	8000c5c <MX_TIM6_Init>
#endif
#if defined  USING_TIM14
	  MX_TIM14_Init();
#endif
#if defined  USING_TIM15
	  MX_TIM15_Init();
 8004198:	f7fc fdb2 	bl	8000d00 <MX_TIM15_Init>
#endif
#if defined  USING_TIM17
	  MX_TIM17_Init();
#endif

}
 800419c:	46c0      	nop			@ (mov r8, r8)
 800419e:	46bd      	mov	sp, r7
 80041a0:	bd80      	pop	{r7, pc}
	...

080041a4 <uart_irq_handler>:
{
	return ((uart_hal->uart_module->CR1 & USART_CR1_TCIE) != 0);
}

void uart_irq_handler(USART_TypeDef* uart_module)
{
 80041a4:	b590      	push	{r4, r7, lr}
 80041a6:	b085      	sub	sp, #20
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
	uint8_t byte_to_tx;

    /* if there are any error flags AND if in RX mode rather than Tx mode */
	if (uart_module->ISR & (USART_ISR_ORE /*| USART_ISR_NE | USART_ISR_FE*/) && (uart_module->CR2 & USART_CR2_SWAP))
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	69db      	ldr	r3, [r3, #28]
 80041b0:	2208      	movs	r2, #8
 80041b2:	4013      	ands	r3, r2
 80041b4:	d018      	beq.n	80041e8 <uart_irq_handler+0x44>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	685a      	ldr	r2, [r3, #4]
 80041ba:	2380      	movs	r3, #128	@ 0x80
 80041bc:	021b      	lsls	r3, r3, #8
 80041be:	4013      	ands	r3, r2
 80041c0:	d012      	beq.n	80041e8 <uart_irq_handler+0x44>
	{
		if (uart_module->ISR & USART_ISR_RXNE_RXFNE)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	69db      	ldr	r3, [r3, #28]
 80041c6:	2220      	movs	r2, #32
 80041c8:	4013      	ands	r3, r2
 80041ca:	d00d      	beq.n	80041e8 <uart_irq_handler+0x44>
			 * TWICE here because there's an overrun error which means we have TWO bytes 
			 * received, one in the RDR register, and then as soon as we read that once,
			 * there's a byte that gets shifted into the RDR register from the
			 * non-memory-mapped shift register.
			 */
			usart1_byte_received_callback(uart_module->RDR);
 80041cc:	4b72      	ldr	r3, [pc, #456]	@ (8004398 <uart_irq_handler+0x1f4>)
 80041ce:	681a      	ldr	r2, [r3, #0]
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041d4:	b2db      	uxtb	r3, r3
 80041d6:	0018      	movs	r0, r3
 80041d8:	4790      	blx	r2
			usart1_byte_received_callback(uart_module->RDR);
 80041da:	4b6f      	ldr	r3, [pc, #444]	@ (8004398 <uart_irq_handler+0x1f4>)
 80041dc:	681a      	ldr	r2, [r3, #0]
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041e2:	b2db      	uxtb	r3, r3
 80041e4:	0018      	movs	r0, r3
 80041e6:	4790      	blx	r2
		}
	}
		uart_module->ICR |= (USART_ICR_ORECF | USART_ICR_NECF | USART_ICR_FECF);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6a1b      	ldr	r3, [r3, #32]
 80041ec:	220e      	movs	r2, #14
 80041ee:	431a      	orrs	r2, r3
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	621a      	str	r2, [r3, #32]

    /* if a byte has been received AND if in Rx mode rather than Tx mode */
	if ((uart_module->ISR & USART_ISR_RXNE_RXFNE) && (uart_module->CR2 & USART_CR2_SWAP))
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	69db      	ldr	r3, [r3, #28]
 80041f8:	2220      	movs	r2, #32
 80041fa:	4013      	ands	r3, r2
 80041fc:	d01c      	beq.n	8004238 <uart_irq_handler+0x94>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	685a      	ldr	r2, [r3, #4]
 8004202:	2380      	movs	r3, #128	@ 0x80
 8004204:	021b      	lsls	r3, r3, #8
 8004206:	4013      	ands	r3, r2
 8004208:	d016      	beq.n	8004238 <uart_irq_handler+0x94>
	{
		/* Note that reading the RDR register clears the RXNE flag. */

		if (USART1 == uart_module)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	4a63      	ldr	r2, [pc, #396]	@ (800439c <uart_irq_handler+0x1f8>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d107      	bne.n	8004222 <uart_irq_handler+0x7e>
		{
			/* call the USART1 received callback, passing it the received data */
			usart1_byte_received_callback(uart_module->RDR);
 8004212:	4b61      	ldr	r3, [pc, #388]	@ (8004398 <uart_irq_handler+0x1f4>)
 8004214:	681a      	ldr	r2, [r3, #0]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800421a:	b2db      	uxtb	r3, r3
 800421c:	0018      	movs	r0, r3
 800421e:	4790      	blx	r2
 8004220:	e00a      	b.n	8004238 <uart_irq_handler+0x94>
		}
		else if (USART2 == uart_module)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	4a5e      	ldr	r2, [pc, #376]	@ (80043a0 <uart_irq_handler+0x1fc>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d106      	bne.n	8004238 <uart_irq_handler+0x94>
		{
			/* call the USART2 received callback, passing it the received data */
			usart2_byte_received_callback(uart_module->RDR);
 800422a:	4b5e      	ldr	r3, [pc, #376]	@ (80043a4 <uart_irq_handler+0x200>)
 800422c:	681a      	ldr	r2, [r3, #0]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004232:	b2db      	uxtb	r3, r3
 8004234:	0018      	movs	r0, r3
 8004236:	4790      	blx	r2
		uart_module->ICR |= USART_ICR_WUCF;
	}
#endif

    /* if the transmit buffer is empty AND we're set to Tx rather than Rx */
	if ((uart_module->ISR & USART_ISR_TXE_TXFNF) && !(uart_module->CR2 & USART_CR2_SWAP))
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	69db      	ldr	r3, [r3, #28]
 800423c:	2280      	movs	r2, #128	@ 0x80
 800423e:	4013      	ands	r3, r2
 8004240:	d038      	beq.n	80042b4 <uart_irq_handler+0x110>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	685a      	ldr	r2, [r3, #4]
 8004246:	2380      	movs	r3, #128	@ 0x80
 8004248:	021b      	lsls	r3, r3, #8
 800424a:	4013      	ands	r3, r2
 800424c:	d132      	bne.n	80042b4 <uart_irq_handler+0x110>
	{
		if (USART1 == uart_module)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	4a52      	ldr	r2, [pc, #328]	@ (800439c <uart_irq_handler+0x1f8>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d115      	bne.n	8004282 <uart_irq_handler+0xde>
		{
			/* call the USART1 transmit callback to get the byte to Tx */
			if (usart1_transmit_ready_callback(&byte_to_tx))
 8004256:	4b54      	ldr	r3, [pc, #336]	@ (80043a8 <uart_irq_handler+0x204>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	240e      	movs	r4, #14
 800425c:	193a      	adds	r2, r7, r4
 800425e:	0010      	movs	r0, r2
 8004260:	4798      	blx	r3
 8004262:	1e03      	subs	r3, r0, #0
 8004264:	d005      	beq.n	8004272 <uart_irq_handler+0xce>
			{
				/* transmit the byte */
				uart_module->TDR = byte_to_tx;
 8004266:	193b      	adds	r3, r7, r4
 8004268:	781b      	ldrb	r3, [r3, #0]
 800426a:	001a      	movs	r2, r3
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	629a      	str	r2, [r3, #40]	@ 0x28
 8004270:	e020      	b.n	80042b4 <uart_irq_handler+0x110>
			}
			else
			{
				/* disable the 'Tx buffer empty' interrupt */
				uart_module->CR1 &= ~USART_CR1_TXEIE_TXFNFIE;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	2280      	movs	r2, #128	@ 0x80
 8004278:	4393      	bics	r3, r2
 800427a:	001a      	movs	r2, r3
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	601a      	str	r2, [r3, #0]
 8004280:	e018      	b.n	80042b4 <uart_irq_handler+0x110>
			}
		}
		else if (USART2 == uart_module)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	4a46      	ldr	r2, [pc, #280]	@ (80043a0 <uart_irq_handler+0x1fc>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d114      	bne.n	80042b4 <uart_irq_handler+0x110>
		{
			/* call the USART2 transmit callback to get the byte to Tx */
			if (usart2_transmit_ready_callback(&byte_to_tx))
 800428a:	4b48      	ldr	r3, [pc, #288]	@ (80043ac <uart_irq_handler+0x208>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	240e      	movs	r4, #14
 8004290:	193a      	adds	r2, r7, r4
 8004292:	0010      	movs	r0, r2
 8004294:	4798      	blx	r3
 8004296:	1e03      	subs	r3, r0, #0
 8004298:	d005      	beq.n	80042a6 <uart_irq_handler+0x102>
			{
				/* transmit the byte */
				uart_module->TDR = byte_to_tx;
 800429a:	193b      	adds	r3, r7, r4
 800429c:	781b      	ldrb	r3, [r3, #0]
 800429e:	001a      	movs	r2, r3
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	629a      	str	r2, [r3, #40]	@ 0x28
 80042a4:	e006      	b.n	80042b4 <uart_irq_handler+0x110>
			}
			else
			{
				/* disable the 'Tx buffer empty' interrupt */
				uart_module->CR1 &= ~USART_CR1_TXEIE_TXFNFIE;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	2280      	movs	r2, #128	@ 0x80
 80042ac:	4393      	bics	r3, r2
 80042ae:	001a      	movs	r2, r3
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	601a      	str	r2, [r3, #0]
		}
	}

/* TODO - need a callback in the UART driver for the 152 usec delay */
    /* if the transmission complete flag is set AND we're set to Tx rather than Rx */
	if ((uart_module->ISR & USART_ISR_TC) && !(uart_module->CR2 & USART_CR2_SWAP))
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	69db      	ldr	r3, [r3, #28]
 80042b8:	2240      	movs	r2, #64	@ 0x40
 80042ba:	4013      	ands	r3, r2
 80042bc:	d100      	bne.n	80042c0 <uart_irq_handler+0x11c>
 80042be:	e067      	b.n	8004390 <uart_irq_handler+0x1ec>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	685a      	ldr	r2, [r3, #4]
 80042c4:	2380      	movs	r3, #128	@ 0x80
 80042c6:	021b      	lsls	r3, r3, #8
 80042c8:	4013      	ands	r3, r2
 80042ca:	d161      	bne.n	8004390 <uart_irq_handler+0x1ec>
	{
		if (USART1 == uart_module)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	4a33      	ldr	r2, [pc, #204]	@ (800439c <uart_irq_handler+0x1f8>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d107      	bne.n	80042e4 <uart_irq_handler+0x140>
		{
			if (usart1_blocking_delay)
 80042d4:	4b36      	ldr	r3, [pc, #216]	@ (80043b0 <uart_irq_handler+0x20c>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d00e      	beq.n	80042fa <uart_irq_handler+0x156>
			{
				/* delay to ride through the IR1 key glitch */
				usart1_blocking_delay();
 80042dc:	4b34      	ldr	r3, [pc, #208]	@ (80043b0 <uart_irq_handler+0x20c>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4798      	blx	r3
 80042e2:	e00a      	b.n	80042fa <uart_irq_handler+0x156>
			}
		}
		else if (USART2 == uart_module)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	4a2e      	ldr	r2, [pc, #184]	@ (80043a0 <uart_irq_handler+0x1fc>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d106      	bne.n	80042fa <uart_irq_handler+0x156>
		{
			if (usart2_blocking_delay)
 80042ec:	4b31      	ldr	r3, [pc, #196]	@ (80043b4 <uart_irq_handler+0x210>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d002      	beq.n	80042fa <uart_irq_handler+0x156>
			{
				/* delay to ride through the IR1 key glitch */
				usart2_blocking_delay();
 80042f4:	4b2f      	ldr	r3, [pc, #188]	@ (80043b4 <uart_irq_handler+0x210>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4798      	blx	r3

		/* switch tx/rx pin to rx if needed */
		{
			uart_mode_t uart_mode;

			if (USART1 == uart_module)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	4a27      	ldr	r2, [pc, #156]	@ (800439c <uart_irq_handler+0x1f8>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d105      	bne.n	800430e <uart_irq_handler+0x16a>
			{
				uart_mode = usart1_mode;
 8004302:	230f      	movs	r3, #15
 8004304:	18fb      	adds	r3, r7, r3
 8004306:	4a2c      	ldr	r2, [pc, #176]	@ (80043b8 <uart_irq_handler+0x214>)
 8004308:	7812      	ldrb	r2, [r2, #0]
 800430a:	701a      	strb	r2, [r3, #0]
 800430c:	e00d      	b.n	800432a <uart_irq_handler+0x186>
			}
			else if (USART2 == uart_module)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	4a23      	ldr	r2, [pc, #140]	@ (80043a0 <uart_irq_handler+0x1fc>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d105      	bne.n	8004322 <uart_irq_handler+0x17e>
			{
				uart_mode = usart2_mode;
 8004316:	230f      	movs	r3, #15
 8004318:	18fb      	adds	r3, r7, r3
 800431a:	4a28      	ldr	r2, [pc, #160]	@ (80043bc <uart_irq_handler+0x218>)
 800431c:	7812      	ldrb	r2, [r2, #0]
 800431e:	701a      	strb	r2, [r3, #0]
 8004320:	e003      	b.n	800432a <uart_irq_handler+0x186>
				uart_mode = lpuart1_mode;
			}
#endif
			else
			{
				uart_mode = 0; /* Should never get here!  This line is just to ensure consistency on failure. */
 8004322:	230f      	movs	r3, #15
 8004324:	18fb      	adds	r3, r7, r3
 8004326:	2200      	movs	r2, #0
 8004328:	701a      	strb	r2, [r3, #0]
			}

			if ((ONE_WIRE_NO_EXTERNAL_PULLUP == uart_mode) || (ONE_WIRE == uart_mode))
 800432a:	220f      	movs	r2, #15
 800432c:	18bb      	adds	r3, r7, r2
 800432e:	781b      	ldrb	r3, [r3, #0]
 8004330:	2b03      	cmp	r3, #3
 8004332:	d003      	beq.n	800433c <uart_irq_handler+0x198>
 8004334:	18bb      	adds	r3, r7, r2
 8004336:	781b      	ldrb	r3, [r3, #0]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d119      	bne.n	8004370 <uart_irq_handler+0x1cc>
			{
				/* if tx/rx pin is set to tx... */
				if (!(uart_module->CR2 & USART_CR2_SWAP))
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	685a      	ldr	r2, [r3, #4]
 8004340:	2380      	movs	r3, #128	@ 0x80
 8004342:	021b      	lsls	r3, r3, #8
 8004344:	4013      	ands	r3, r2
 8004346:	d113      	bne.n	8004370 <uart_irq_handler+0x1cc>
				{
					/* ...then set pin to rx */
					uart_module->CR1 &= ~USART_CR1_UE;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	2201      	movs	r2, #1
 800434e:	4393      	bics	r3, r2
 8004350:	001a      	movs	r2, r3
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	601a      	str	r2, [r3, #0]
					uart_module->CR2 |=  USART_CR2_SWAP; /* can only modify CR2 when UE is 0 */
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	2280      	movs	r2, #128	@ 0x80
 800435c:	0212      	lsls	r2, r2, #8
 800435e:	431a      	orrs	r2, r3
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	605a      	str	r2, [r3, #4]
					uart_module->CR1 |=  USART_CR1_UE;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	2201      	movs	r2, #1
 800436a:	431a      	orrs	r2, r3
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	601a      	str	r2, [r3, #0]
				}
			}
		}

		/* re-enable the receiver and receive interrupt */
		uart_module->CR1 |= (USART_CR1_RE | USART_CR1_RXNEIE_RXFNEIE);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	2224      	movs	r2, #36	@ 0x24
 8004376:	431a      	orrs	r2, r3
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	601a      	str	r2, [r3, #0]

		/* disable the 'Tx complete' interrupt */
		uart_module->CR1 &= ~USART_CR1_TCIE;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	2240      	movs	r2, #64	@ 0x40
 8004382:	4393      	bics	r3, r2
 8004384:	001a      	movs	r2, r3
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	601a      	str	r2, [r3, #0]

		/* clear the TC bit */
		uart_module->ICR = USART_ICR_TCCF;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2240      	movs	r2, #64	@ 0x40
 800438e:	621a      	str	r2, [r3, #32]
	}
}
 8004390:	46c0      	nop			@ (mov r8, r8)
 8004392:	46bd      	mov	sp, r7
 8004394:	b005      	add	sp, #20
 8004396:	bd90      	pop	{r4, r7, pc}
 8004398:	20000230 	.word	0x20000230
 800439c:	40013800 	.word	0x40013800
 80043a0:	40004400 	.word	0x40004400
 80043a4:	20000238 	.word	0x20000238
 80043a8:	2000022c 	.word	0x2000022c
 80043ac:	20000234 	.word	0x20000234
 80043b0:	2000023c 	.word	0x2000023c
 80043b4:	20000240 	.word	0x20000240
 80043b8:	20000244 	.word	0x20000244
 80043bc:	20000245 	.word	0x20000245

080043c0 <USART1_IRQHandler>:


#ifndef USART1_IRQHandler
void USART1_IRQHandler(void)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	af00      	add	r7, sp, #0
	uart_irq_handler(USART1);
 80043c4:	4b03      	ldr	r3, [pc, #12]	@ (80043d4 <USART1_IRQHandler+0x14>)
 80043c6:	0018      	movs	r0, r3
 80043c8:	f7ff feec 	bl	80041a4 <uart_irq_handler>
}
 80043cc:	46c0      	nop			@ (mov r8, r8)
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bd80      	pop	{r7, pc}
 80043d2:	46c0      	nop			@ (mov r8, r8)
 80043d4:	40013800 	.word	0x40013800

080043d8 <USART2_IRQHandler>:
#endif

#ifndef USART2_IRQHandler

void USART2_IRQHandler(void)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	af00      	add	r7, sp, #0
	uart_irq_handler(USART2);
 80043dc:	4b03      	ldr	r3, [pc, #12]	@ (80043ec <USART2_IRQHandler+0x14>)
 80043de:	0018      	movs	r0, r3
 80043e0:	f7ff fee0 	bl	80041a4 <uart_irq_handler>
}
 80043e4:	46c0      	nop			@ (mov r8, r8)
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bd80      	pop	{r7, pc}
 80043ea:	46c0      	nop			@ (mov r8, r8)
 80043ec:	40004400 	.word	0x40004400

080043f0 <hal_watchdog_init>:


static IWDG_HandleTypeDef wdg_hdl = {0};

void hal_watchdog_init(void)
{
 80043f0:	b5b0      	push	{r4, r5, r7, lr}
 80043f2:	af00      	add	r7, sp, #0
    // Call the watch dog initialization function that was created by the hardware configuration tool.
	MX_IWDG_Init();
 80043f4:	f7fc f9ea 	bl	80007cc <MX_IWDG_Init>

	wdg_hdl = hiwdg; // Use the watch dog handle created by the STM32 Hardware Configuration Tool.
 80043f8:	4b04      	ldr	r3, [pc, #16]	@ (800440c <hal_watchdog_init+0x1c>)
 80043fa:	4a05      	ldr	r2, [pc, #20]	@ (8004410 <hal_watchdog_init+0x20>)
 80043fc:	ca13      	ldmia	r2!, {r0, r1, r4}
 80043fe:	c313      	stmia	r3!, {r0, r1, r4}
 8004400:	6812      	ldr	r2, [r2, #0]
 8004402:	601a      	str	r2, [r3, #0]

}
 8004404:	46c0      	nop			@ (mov r8, r8)
 8004406:	46bd      	mov	sp, r7
 8004408:	bdb0      	pop	{r4, r5, r7, pc}
 800440a:	46c0      	nop			@ (mov r8, r8)
 800440c:	20000248 	.word	0x20000248
 8004410:	200000e0 	.word	0x200000e0

08004414 <hal_watchdog_reset>:
{

}

void hal_watchdog_reset(void)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	af00      	add	r7, sp, #0
	if( wdg_hdl.Instance != NULL )			// Bootloader was resetting wdt but it was never initialized. This resulted in a null pointer access in HAL functions which impacted FLASH-SR CFGBSY Flag
 8004418:	4b05      	ldr	r3, [pc, #20]	@ (8004430 <hal_watchdog_reset+0x1c>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d003      	beq.n	8004428 <hal_watchdog_reset+0x14>
	{
		/* reload the WDT */
		HAL_IWDG_Refresh(&wdg_hdl);
 8004420:	4b03      	ldr	r3, [pc, #12]	@ (8004430 <hal_watchdog_reset+0x1c>)
 8004422:	0018      	movs	r0, r3
 8004424:	f7fe f8c2 	bl	80025ac <HAL_IWDG_Refresh>
	}
}
 8004428:	46c0      	nop			@ (mov r8, r8)
 800442a:	46bd      	mov	sp, r7
 800442c:	bd80      	pop	{r7, pc}
 800442e:	46c0      	nop			@ (mov r8, r8)
 8004430:	20000248 	.word	0x20000248

08004434 <memset>:
 8004434:	0003      	movs	r3, r0
 8004436:	1882      	adds	r2, r0, r2
 8004438:	4293      	cmp	r3, r2
 800443a:	d100      	bne.n	800443e <memset+0xa>
 800443c:	4770      	bx	lr
 800443e:	7019      	strb	r1, [r3, #0]
 8004440:	3301      	adds	r3, #1
 8004442:	e7f9      	b.n	8004438 <memset+0x4>

08004444 <_init>:
 8004444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004446:	46c0      	nop			@ (mov r8, r8)
 8004448:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800444a:	bc08      	pop	{r3}
 800444c:	469e      	mov	lr, r3
 800444e:	4770      	bx	lr

08004450 <_fini>:
 8004450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004452:	46c0      	nop			@ (mov r8, r8)
 8004454:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004456:	bc08      	pop	{r3}
 8004458:	469e      	mov	lr, r3
 800445a:	4770      	bx	lr
