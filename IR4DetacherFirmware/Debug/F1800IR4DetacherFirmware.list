
F1800IR4DetacherFirmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000170  08000000  08000000  00001000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007c10  08000170  08000170  00001170  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002e4  08007d80  08007d80  00008d80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008064  08008064  0000a138  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08008064  08008064  0000a138  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08008064  08008064  0000a138  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008064  08008064  00009064  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008068  08008068  00009068  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000138  20000000  0800806c  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000608  20000138  080081a4  0000a138  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000740  080081a4  0000a740  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000a138  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e81d  00000000  00000000  0000a160  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000058bb  00000000  00000000  0002897d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a90  00000000  00000000  0002e238  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001448  00000000  00000000  0002fcc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bf88  00000000  00000000  00031110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000297bd  00000000  00000000  0004d098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a4a51  00000000  00000000  00076855  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011b2a6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005c60  00000000  00000000  0011b2ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000009e  00000000  00000000  00120f4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000170 <__do_global_dtors_aux>:
 8000170:	b510      	push	{r4, lr}
 8000172:	4c06      	ldr	r4, [pc, #24]	@ (800018c <__do_global_dtors_aux+0x1c>)
 8000174:	7823      	ldrb	r3, [r4, #0]
 8000176:	2b00      	cmp	r3, #0
 8000178:	d107      	bne.n	800018a <__do_global_dtors_aux+0x1a>
 800017a:	4b05      	ldr	r3, [pc, #20]	@ (8000190 <__do_global_dtors_aux+0x20>)
 800017c:	2b00      	cmp	r3, #0
 800017e:	d002      	beq.n	8000186 <__do_global_dtors_aux+0x16>
 8000180:	4804      	ldr	r0, [pc, #16]	@ (8000194 <__do_global_dtors_aux+0x24>)
 8000182:	e000      	b.n	8000186 <__do_global_dtors_aux+0x16>
 8000184:	bf00      	nop
 8000186:	2301      	movs	r3, #1
 8000188:	7023      	strb	r3, [r4, #0]
 800018a:	bd10      	pop	{r4, pc}
 800018c:	20000138 	.word	0x20000138
 8000190:	00000000 	.word	0x00000000
 8000194:	08007d68 	.word	0x08007d68

08000198 <frame_dummy>:
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <frame_dummy+0x14>)
 800019a:	b510      	push	{r4, lr}
 800019c:	2b00      	cmp	r3, #0
 800019e:	d003      	beq.n	80001a8 <frame_dummy+0x10>
 80001a0:	4903      	ldr	r1, [pc, #12]	@ (80001b0 <frame_dummy+0x18>)
 80001a2:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <frame_dummy+0x1c>)
 80001a4:	e000      	b.n	80001a8 <frame_dummy+0x10>
 80001a6:	bf00      	nop
 80001a8:	bd10      	pop	{r4, pc}
 80001aa:	46c0      	nop			@ (mov r8, r8)
 80001ac:	00000000 	.word	0x00000000
 80001b0:	2000013c 	.word	0x2000013c
 80001b4:	08007d68 	.word	0x08007d68

080001b8 <__udivsi3>:
 80001b8:	2200      	movs	r2, #0
 80001ba:	0843      	lsrs	r3, r0, #1
 80001bc:	428b      	cmp	r3, r1
 80001be:	d374      	bcc.n	80002aa <__udivsi3+0xf2>
 80001c0:	0903      	lsrs	r3, r0, #4
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d35f      	bcc.n	8000286 <__udivsi3+0xce>
 80001c6:	0a03      	lsrs	r3, r0, #8
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d344      	bcc.n	8000256 <__udivsi3+0x9e>
 80001cc:	0b03      	lsrs	r3, r0, #12
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d328      	bcc.n	8000224 <__udivsi3+0x6c>
 80001d2:	0c03      	lsrs	r3, r0, #16
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d30d      	bcc.n	80001f4 <__udivsi3+0x3c>
 80001d8:	22ff      	movs	r2, #255	@ 0xff
 80001da:	0209      	lsls	r1, r1, #8
 80001dc:	ba12      	rev	r2, r2
 80001de:	0c03      	lsrs	r3, r0, #16
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d302      	bcc.n	80001ea <__udivsi3+0x32>
 80001e4:	1212      	asrs	r2, r2, #8
 80001e6:	0209      	lsls	r1, r1, #8
 80001e8:	d065      	beq.n	80002b6 <__udivsi3+0xfe>
 80001ea:	0b03      	lsrs	r3, r0, #12
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d319      	bcc.n	8000224 <__udivsi3+0x6c>
 80001f0:	e000      	b.n	80001f4 <__udivsi3+0x3c>
 80001f2:	0a09      	lsrs	r1, r1, #8
 80001f4:	0bc3      	lsrs	r3, r0, #15
 80001f6:	428b      	cmp	r3, r1
 80001f8:	d301      	bcc.n	80001fe <__udivsi3+0x46>
 80001fa:	03cb      	lsls	r3, r1, #15
 80001fc:	1ac0      	subs	r0, r0, r3
 80001fe:	4152      	adcs	r2, r2
 8000200:	0b83      	lsrs	r3, r0, #14
 8000202:	428b      	cmp	r3, r1
 8000204:	d301      	bcc.n	800020a <__udivsi3+0x52>
 8000206:	038b      	lsls	r3, r1, #14
 8000208:	1ac0      	subs	r0, r0, r3
 800020a:	4152      	adcs	r2, r2
 800020c:	0b43      	lsrs	r3, r0, #13
 800020e:	428b      	cmp	r3, r1
 8000210:	d301      	bcc.n	8000216 <__udivsi3+0x5e>
 8000212:	034b      	lsls	r3, r1, #13
 8000214:	1ac0      	subs	r0, r0, r3
 8000216:	4152      	adcs	r2, r2
 8000218:	0b03      	lsrs	r3, r0, #12
 800021a:	428b      	cmp	r3, r1
 800021c:	d301      	bcc.n	8000222 <__udivsi3+0x6a>
 800021e:	030b      	lsls	r3, r1, #12
 8000220:	1ac0      	subs	r0, r0, r3
 8000222:	4152      	adcs	r2, r2
 8000224:	0ac3      	lsrs	r3, r0, #11
 8000226:	428b      	cmp	r3, r1
 8000228:	d301      	bcc.n	800022e <__udivsi3+0x76>
 800022a:	02cb      	lsls	r3, r1, #11
 800022c:	1ac0      	subs	r0, r0, r3
 800022e:	4152      	adcs	r2, r2
 8000230:	0a83      	lsrs	r3, r0, #10
 8000232:	428b      	cmp	r3, r1
 8000234:	d301      	bcc.n	800023a <__udivsi3+0x82>
 8000236:	028b      	lsls	r3, r1, #10
 8000238:	1ac0      	subs	r0, r0, r3
 800023a:	4152      	adcs	r2, r2
 800023c:	0a43      	lsrs	r3, r0, #9
 800023e:	428b      	cmp	r3, r1
 8000240:	d301      	bcc.n	8000246 <__udivsi3+0x8e>
 8000242:	024b      	lsls	r3, r1, #9
 8000244:	1ac0      	subs	r0, r0, r3
 8000246:	4152      	adcs	r2, r2
 8000248:	0a03      	lsrs	r3, r0, #8
 800024a:	428b      	cmp	r3, r1
 800024c:	d301      	bcc.n	8000252 <__udivsi3+0x9a>
 800024e:	020b      	lsls	r3, r1, #8
 8000250:	1ac0      	subs	r0, r0, r3
 8000252:	4152      	adcs	r2, r2
 8000254:	d2cd      	bcs.n	80001f2 <__udivsi3+0x3a>
 8000256:	09c3      	lsrs	r3, r0, #7
 8000258:	428b      	cmp	r3, r1
 800025a:	d301      	bcc.n	8000260 <__udivsi3+0xa8>
 800025c:	01cb      	lsls	r3, r1, #7
 800025e:	1ac0      	subs	r0, r0, r3
 8000260:	4152      	adcs	r2, r2
 8000262:	0983      	lsrs	r3, r0, #6
 8000264:	428b      	cmp	r3, r1
 8000266:	d301      	bcc.n	800026c <__udivsi3+0xb4>
 8000268:	018b      	lsls	r3, r1, #6
 800026a:	1ac0      	subs	r0, r0, r3
 800026c:	4152      	adcs	r2, r2
 800026e:	0943      	lsrs	r3, r0, #5
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__udivsi3+0xc0>
 8000274:	014b      	lsls	r3, r1, #5
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0903      	lsrs	r3, r0, #4
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__udivsi3+0xcc>
 8000280:	010b      	lsls	r3, r1, #4
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	08c3      	lsrs	r3, r0, #3
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__udivsi3+0xd8>
 800028c:	00cb      	lsls	r3, r1, #3
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0883      	lsrs	r3, r0, #2
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__udivsi3+0xe4>
 8000298:	008b      	lsls	r3, r1, #2
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0843      	lsrs	r3, r0, #1
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__udivsi3+0xf0>
 80002a4:	004b      	lsls	r3, r1, #1
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	1a41      	subs	r1, r0, r1
 80002ac:	d200      	bcs.n	80002b0 <__udivsi3+0xf8>
 80002ae:	4601      	mov	r1, r0
 80002b0:	4152      	adcs	r2, r2
 80002b2:	4610      	mov	r0, r2
 80002b4:	4770      	bx	lr
 80002b6:	e7ff      	b.n	80002b8 <__udivsi3+0x100>
 80002b8:	b501      	push	{r0, lr}
 80002ba:	2000      	movs	r0, #0
 80002bc:	f000 f8f0 	bl	80004a0 <__aeabi_idiv0>
 80002c0:	bd02      	pop	{r1, pc}
 80002c2:	46c0      	nop			@ (mov r8, r8)

080002c4 <__aeabi_uidivmod>:
 80002c4:	2900      	cmp	r1, #0
 80002c6:	d0f7      	beq.n	80002b8 <__udivsi3+0x100>
 80002c8:	e776      	b.n	80001b8 <__udivsi3>
 80002ca:	4770      	bx	lr

080002cc <__divsi3>:
 80002cc:	4603      	mov	r3, r0
 80002ce:	430b      	orrs	r3, r1
 80002d0:	d47f      	bmi.n	80003d2 <__divsi3+0x106>
 80002d2:	2200      	movs	r2, #0
 80002d4:	0843      	lsrs	r3, r0, #1
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d374      	bcc.n	80003c4 <__divsi3+0xf8>
 80002da:	0903      	lsrs	r3, r0, #4
 80002dc:	428b      	cmp	r3, r1
 80002de:	d35f      	bcc.n	80003a0 <__divsi3+0xd4>
 80002e0:	0a03      	lsrs	r3, r0, #8
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d344      	bcc.n	8000370 <__divsi3+0xa4>
 80002e6:	0b03      	lsrs	r3, r0, #12
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d328      	bcc.n	800033e <__divsi3+0x72>
 80002ec:	0c03      	lsrs	r3, r0, #16
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d30d      	bcc.n	800030e <__divsi3+0x42>
 80002f2:	22ff      	movs	r2, #255	@ 0xff
 80002f4:	0209      	lsls	r1, r1, #8
 80002f6:	ba12      	rev	r2, r2
 80002f8:	0c03      	lsrs	r3, r0, #16
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d302      	bcc.n	8000304 <__divsi3+0x38>
 80002fe:	1212      	asrs	r2, r2, #8
 8000300:	0209      	lsls	r1, r1, #8
 8000302:	d065      	beq.n	80003d0 <__divsi3+0x104>
 8000304:	0b03      	lsrs	r3, r0, #12
 8000306:	428b      	cmp	r3, r1
 8000308:	d319      	bcc.n	800033e <__divsi3+0x72>
 800030a:	e000      	b.n	800030e <__divsi3+0x42>
 800030c:	0a09      	lsrs	r1, r1, #8
 800030e:	0bc3      	lsrs	r3, r0, #15
 8000310:	428b      	cmp	r3, r1
 8000312:	d301      	bcc.n	8000318 <__divsi3+0x4c>
 8000314:	03cb      	lsls	r3, r1, #15
 8000316:	1ac0      	subs	r0, r0, r3
 8000318:	4152      	adcs	r2, r2
 800031a:	0b83      	lsrs	r3, r0, #14
 800031c:	428b      	cmp	r3, r1
 800031e:	d301      	bcc.n	8000324 <__divsi3+0x58>
 8000320:	038b      	lsls	r3, r1, #14
 8000322:	1ac0      	subs	r0, r0, r3
 8000324:	4152      	adcs	r2, r2
 8000326:	0b43      	lsrs	r3, r0, #13
 8000328:	428b      	cmp	r3, r1
 800032a:	d301      	bcc.n	8000330 <__divsi3+0x64>
 800032c:	034b      	lsls	r3, r1, #13
 800032e:	1ac0      	subs	r0, r0, r3
 8000330:	4152      	adcs	r2, r2
 8000332:	0b03      	lsrs	r3, r0, #12
 8000334:	428b      	cmp	r3, r1
 8000336:	d301      	bcc.n	800033c <__divsi3+0x70>
 8000338:	030b      	lsls	r3, r1, #12
 800033a:	1ac0      	subs	r0, r0, r3
 800033c:	4152      	adcs	r2, r2
 800033e:	0ac3      	lsrs	r3, r0, #11
 8000340:	428b      	cmp	r3, r1
 8000342:	d301      	bcc.n	8000348 <__divsi3+0x7c>
 8000344:	02cb      	lsls	r3, r1, #11
 8000346:	1ac0      	subs	r0, r0, r3
 8000348:	4152      	adcs	r2, r2
 800034a:	0a83      	lsrs	r3, r0, #10
 800034c:	428b      	cmp	r3, r1
 800034e:	d301      	bcc.n	8000354 <__divsi3+0x88>
 8000350:	028b      	lsls	r3, r1, #10
 8000352:	1ac0      	subs	r0, r0, r3
 8000354:	4152      	adcs	r2, r2
 8000356:	0a43      	lsrs	r3, r0, #9
 8000358:	428b      	cmp	r3, r1
 800035a:	d301      	bcc.n	8000360 <__divsi3+0x94>
 800035c:	024b      	lsls	r3, r1, #9
 800035e:	1ac0      	subs	r0, r0, r3
 8000360:	4152      	adcs	r2, r2
 8000362:	0a03      	lsrs	r3, r0, #8
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0xa0>
 8000368:	020b      	lsls	r3, r1, #8
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	d2cd      	bcs.n	800030c <__divsi3+0x40>
 8000370:	09c3      	lsrs	r3, r0, #7
 8000372:	428b      	cmp	r3, r1
 8000374:	d301      	bcc.n	800037a <__divsi3+0xae>
 8000376:	01cb      	lsls	r3, r1, #7
 8000378:	1ac0      	subs	r0, r0, r3
 800037a:	4152      	adcs	r2, r2
 800037c:	0983      	lsrs	r3, r0, #6
 800037e:	428b      	cmp	r3, r1
 8000380:	d301      	bcc.n	8000386 <__divsi3+0xba>
 8000382:	018b      	lsls	r3, r1, #6
 8000384:	1ac0      	subs	r0, r0, r3
 8000386:	4152      	adcs	r2, r2
 8000388:	0943      	lsrs	r3, r0, #5
 800038a:	428b      	cmp	r3, r1
 800038c:	d301      	bcc.n	8000392 <__divsi3+0xc6>
 800038e:	014b      	lsls	r3, r1, #5
 8000390:	1ac0      	subs	r0, r0, r3
 8000392:	4152      	adcs	r2, r2
 8000394:	0903      	lsrs	r3, r0, #4
 8000396:	428b      	cmp	r3, r1
 8000398:	d301      	bcc.n	800039e <__divsi3+0xd2>
 800039a:	010b      	lsls	r3, r1, #4
 800039c:	1ac0      	subs	r0, r0, r3
 800039e:	4152      	adcs	r2, r2
 80003a0:	08c3      	lsrs	r3, r0, #3
 80003a2:	428b      	cmp	r3, r1
 80003a4:	d301      	bcc.n	80003aa <__divsi3+0xde>
 80003a6:	00cb      	lsls	r3, r1, #3
 80003a8:	1ac0      	subs	r0, r0, r3
 80003aa:	4152      	adcs	r2, r2
 80003ac:	0883      	lsrs	r3, r0, #2
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0xea>
 80003b2:	008b      	lsls	r3, r1, #2
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	0843      	lsrs	r3, r0, #1
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d301      	bcc.n	80003c2 <__divsi3+0xf6>
 80003be:	004b      	lsls	r3, r1, #1
 80003c0:	1ac0      	subs	r0, r0, r3
 80003c2:	4152      	adcs	r2, r2
 80003c4:	1a41      	subs	r1, r0, r1
 80003c6:	d200      	bcs.n	80003ca <__divsi3+0xfe>
 80003c8:	4601      	mov	r1, r0
 80003ca:	4152      	adcs	r2, r2
 80003cc:	4610      	mov	r0, r2
 80003ce:	4770      	bx	lr
 80003d0:	e05d      	b.n	800048e <__divsi3+0x1c2>
 80003d2:	0fca      	lsrs	r2, r1, #31
 80003d4:	d000      	beq.n	80003d8 <__divsi3+0x10c>
 80003d6:	4249      	negs	r1, r1
 80003d8:	1003      	asrs	r3, r0, #32
 80003da:	d300      	bcc.n	80003de <__divsi3+0x112>
 80003dc:	4240      	negs	r0, r0
 80003de:	4053      	eors	r3, r2
 80003e0:	2200      	movs	r2, #0
 80003e2:	469c      	mov	ip, r3
 80003e4:	0903      	lsrs	r3, r0, #4
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d32d      	bcc.n	8000446 <__divsi3+0x17a>
 80003ea:	0a03      	lsrs	r3, r0, #8
 80003ec:	428b      	cmp	r3, r1
 80003ee:	d312      	bcc.n	8000416 <__divsi3+0x14a>
 80003f0:	22fc      	movs	r2, #252	@ 0xfc
 80003f2:	0189      	lsls	r1, r1, #6
 80003f4:	ba12      	rev	r2, r2
 80003f6:	0a03      	lsrs	r3, r0, #8
 80003f8:	428b      	cmp	r3, r1
 80003fa:	d30c      	bcc.n	8000416 <__divsi3+0x14a>
 80003fc:	0189      	lsls	r1, r1, #6
 80003fe:	1192      	asrs	r2, r2, #6
 8000400:	428b      	cmp	r3, r1
 8000402:	d308      	bcc.n	8000416 <__divsi3+0x14a>
 8000404:	0189      	lsls	r1, r1, #6
 8000406:	1192      	asrs	r2, r2, #6
 8000408:	428b      	cmp	r3, r1
 800040a:	d304      	bcc.n	8000416 <__divsi3+0x14a>
 800040c:	0189      	lsls	r1, r1, #6
 800040e:	d03a      	beq.n	8000486 <__divsi3+0x1ba>
 8000410:	1192      	asrs	r2, r2, #6
 8000412:	e000      	b.n	8000416 <__divsi3+0x14a>
 8000414:	0989      	lsrs	r1, r1, #6
 8000416:	09c3      	lsrs	r3, r0, #7
 8000418:	428b      	cmp	r3, r1
 800041a:	d301      	bcc.n	8000420 <__divsi3+0x154>
 800041c:	01cb      	lsls	r3, r1, #7
 800041e:	1ac0      	subs	r0, r0, r3
 8000420:	4152      	adcs	r2, r2
 8000422:	0983      	lsrs	r3, r0, #6
 8000424:	428b      	cmp	r3, r1
 8000426:	d301      	bcc.n	800042c <__divsi3+0x160>
 8000428:	018b      	lsls	r3, r1, #6
 800042a:	1ac0      	subs	r0, r0, r3
 800042c:	4152      	adcs	r2, r2
 800042e:	0943      	lsrs	r3, r0, #5
 8000430:	428b      	cmp	r3, r1
 8000432:	d301      	bcc.n	8000438 <__divsi3+0x16c>
 8000434:	014b      	lsls	r3, r1, #5
 8000436:	1ac0      	subs	r0, r0, r3
 8000438:	4152      	adcs	r2, r2
 800043a:	0903      	lsrs	r3, r0, #4
 800043c:	428b      	cmp	r3, r1
 800043e:	d301      	bcc.n	8000444 <__divsi3+0x178>
 8000440:	010b      	lsls	r3, r1, #4
 8000442:	1ac0      	subs	r0, r0, r3
 8000444:	4152      	adcs	r2, r2
 8000446:	08c3      	lsrs	r3, r0, #3
 8000448:	428b      	cmp	r3, r1
 800044a:	d301      	bcc.n	8000450 <__divsi3+0x184>
 800044c:	00cb      	lsls	r3, r1, #3
 800044e:	1ac0      	subs	r0, r0, r3
 8000450:	4152      	adcs	r2, r2
 8000452:	0883      	lsrs	r3, r0, #2
 8000454:	428b      	cmp	r3, r1
 8000456:	d301      	bcc.n	800045c <__divsi3+0x190>
 8000458:	008b      	lsls	r3, r1, #2
 800045a:	1ac0      	subs	r0, r0, r3
 800045c:	4152      	adcs	r2, r2
 800045e:	d2d9      	bcs.n	8000414 <__divsi3+0x148>
 8000460:	0843      	lsrs	r3, r0, #1
 8000462:	428b      	cmp	r3, r1
 8000464:	d301      	bcc.n	800046a <__divsi3+0x19e>
 8000466:	004b      	lsls	r3, r1, #1
 8000468:	1ac0      	subs	r0, r0, r3
 800046a:	4152      	adcs	r2, r2
 800046c:	1a41      	subs	r1, r0, r1
 800046e:	d200      	bcs.n	8000472 <__divsi3+0x1a6>
 8000470:	4601      	mov	r1, r0
 8000472:	4663      	mov	r3, ip
 8000474:	4152      	adcs	r2, r2
 8000476:	105b      	asrs	r3, r3, #1
 8000478:	4610      	mov	r0, r2
 800047a:	d301      	bcc.n	8000480 <__divsi3+0x1b4>
 800047c:	4240      	negs	r0, r0
 800047e:	2b00      	cmp	r3, #0
 8000480:	d500      	bpl.n	8000484 <__divsi3+0x1b8>
 8000482:	4249      	negs	r1, r1
 8000484:	4770      	bx	lr
 8000486:	4663      	mov	r3, ip
 8000488:	105b      	asrs	r3, r3, #1
 800048a:	d300      	bcc.n	800048e <__divsi3+0x1c2>
 800048c:	4240      	negs	r0, r0
 800048e:	b501      	push	{r0, lr}
 8000490:	2000      	movs	r0, #0
 8000492:	f000 f805 	bl	80004a0 <__aeabi_idiv0>
 8000496:	bd02      	pop	{r1, pc}

08000498 <__aeabi_idivmod>:
 8000498:	2900      	cmp	r1, #0
 800049a:	d0f8      	beq.n	800048e <__divsi3+0x1c2>
 800049c:	e716      	b.n	80002cc <__divsi3>
 800049e:	4770      	bx	lr

080004a0 <__aeabi_idiv0>:
 80004a0:	4770      	bx	lr
 80004a2:	46c0      	nop			@ (mov r8, r8)

080004a4 <ac_buzzer_inactive>:
	unlocked_tone[1].pwm_dc = mFREQ_TO_DUTY_CYC_COUNTS(unlocked_tone[1].pwm_period, dutyCyclePCT );
	unlocked_tone[2].pwm_dc = mFREQ_TO_DUTY_CYC_COUNTS(unlocked_tone[2].pwm_period, dutyCyclePCT );
}

bool ac_buzzer_inactive(void)
{
 80004a4:	b580      	push	{r7, lr}
 80004a6:	af00      	add	r7, sp, #0
	return ( ( chirp_counter == 0 ) && ( alarm_active == false ) && ( pwm_output_enabled == false ) && (error_counter == 0 ) && ( notifications.count == 0) );
 80004a8:	4b11      	ldr	r3, [pc, #68]	@ (80004f0 <ac_buzzer_inactive+0x4c>)
 80004aa:	781b      	ldrb	r3, [r3, #0]
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	d117      	bne.n	80004e0 <ac_buzzer_inactive+0x3c>
 80004b0:	4b10      	ldr	r3, [pc, #64]	@ (80004f4 <ac_buzzer_inactive+0x50>)
 80004b2:	781b      	ldrb	r3, [r3, #0]
 80004b4:	2201      	movs	r2, #1
 80004b6:	4053      	eors	r3, r2
 80004b8:	b2db      	uxtb	r3, r3
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d010      	beq.n	80004e0 <ac_buzzer_inactive+0x3c>
 80004be:	4b0e      	ldr	r3, [pc, #56]	@ (80004f8 <ac_buzzer_inactive+0x54>)
 80004c0:	781b      	ldrb	r3, [r3, #0]
 80004c2:	2201      	movs	r2, #1
 80004c4:	4053      	eors	r3, r2
 80004c6:	b2db      	uxtb	r3, r3
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	d009      	beq.n	80004e0 <ac_buzzer_inactive+0x3c>
 80004cc:	4b0b      	ldr	r3, [pc, #44]	@ (80004fc <ac_buzzer_inactive+0x58>)
 80004ce:	781b      	ldrb	r3, [r3, #0]
 80004d0:	2b00      	cmp	r3, #0
 80004d2:	d105      	bne.n	80004e0 <ac_buzzer_inactive+0x3c>
 80004d4:	4b0a      	ldr	r3, [pc, #40]	@ (8000500 <ac_buzzer_inactive+0x5c>)
 80004d6:	785b      	ldrb	r3, [r3, #1]
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d101      	bne.n	80004e0 <ac_buzzer_inactive+0x3c>
 80004dc:	2301      	movs	r3, #1
 80004de:	e000      	b.n	80004e2 <ac_buzzer_inactive+0x3e>
 80004e0:	2300      	movs	r3, #0
 80004e2:	1c1a      	adds	r2, r3, #0
 80004e4:	2301      	movs	r3, #1
 80004e6:	4013      	ands	r3, r2
 80004e8:	b2db      	uxtb	r3, r3
}
 80004ea:	0018      	movs	r0, r3
 80004ec:	46bd      	mov	sp, r7
 80004ee:	bd80      	pop	{r7, pc}
 80004f0:	20000154 	.word	0x20000154
 80004f4:	20000157 	.word	0x20000157
 80004f8:	20000159 	.word	0x20000159
 80004fc:	20000155 	.word	0x20000155
 8000500:	2000015c 	.word	0x2000015c

08000504 <ac_chirp>:
//		}
//	}
//}

void ac_chirp(uint8_t num_chirps)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b082      	sub	sp, #8
 8000508:	af00      	add	r7, sp, #0
 800050a:	0002      	movs	r2, r0
 800050c:	1dfb      	adds	r3, r7, #7
 800050e:	701a      	strb	r2, [r3, #0]
	chirp_counter += num_chirps;
 8000510:	4b09      	ldr	r3, [pc, #36]	@ (8000538 <ac_chirp+0x34>)
 8000512:	781a      	ldrb	r2, [r3, #0]
 8000514:	1dfb      	adds	r3, r7, #7
 8000516:	781b      	ldrb	r3, [r3, #0]
 8000518:	18d3      	adds	r3, r2, r3
 800051a:	b2da      	uxtb	r2, r3
 800051c:	4b06      	ldr	r3, [pc, #24]	@ (8000538 <ac_chirp+0x34>)
 800051e:	701a      	strb	r2, [r3, #0]
	chirp_counter &= 0x0F; // limit to 15 chirps
 8000520:	4b05      	ldr	r3, [pc, #20]	@ (8000538 <ac_chirp+0x34>)
 8000522:	781b      	ldrb	r3, [r3, #0]
 8000524:	220f      	movs	r2, #15
 8000526:	4013      	ands	r3, r2
 8000528:	b2da      	uxtb	r2, r3
 800052a:	4b03      	ldr	r3, [pc, #12]	@ (8000538 <ac_chirp+0x34>)
 800052c:	701a      	strb	r2, [r3, #0]
}
 800052e:	46c0      	nop			@ (mov r8, r8)
 8000530:	46bd      	mov	sp, r7
 8000532:	b002      	add	sp, #8
 8000534:	bd80      	pop	{r7, pc}
 8000536:	46c0      	nop			@ (mov r8, r8)
 8000538:	20000154 	.word	0x20000154

0800053c <ac_error_tone>:

void ac_error_tone( uint8_t num_repeat)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b082      	sub	sp, #8
 8000540:	af00      	add	r7, sp, #0
 8000542:	0002      	movs	r2, r0
 8000544:	1dfb      	adds	r3, r7, #7
 8000546:	701a      	strb	r2, [r3, #0]
	error_counter += num_repeat;
 8000548:	4b09      	ldr	r3, [pc, #36]	@ (8000570 <ac_error_tone+0x34>)
 800054a:	781a      	ldrb	r2, [r3, #0]
 800054c:	1dfb      	adds	r3, r7, #7
 800054e:	781b      	ldrb	r3, [r3, #0]
 8000550:	18d3      	adds	r3, r2, r3
 8000552:	b2da      	uxtb	r2, r3
 8000554:	4b06      	ldr	r3, [pc, #24]	@ (8000570 <ac_error_tone+0x34>)
 8000556:	701a      	strb	r2, [r3, #0]
	error_counter &= 0x0F; // limit to 15 chirps
 8000558:	4b05      	ldr	r3, [pc, #20]	@ (8000570 <ac_error_tone+0x34>)
 800055a:	781b      	ldrb	r3, [r3, #0]
 800055c:	220f      	movs	r2, #15
 800055e:	4013      	ands	r3, r2
 8000560:	b2da      	uxtb	r2, r3
 8000562:	4b03      	ldr	r3, [pc, #12]	@ (8000570 <ac_error_tone+0x34>)
 8000564:	701a      	strb	r2, [r3, #0]
}
 8000566:	46c0      	nop			@ (mov r8, r8)
 8000568:	46bd      	mov	sp, r7
 800056a:	b002      	add	sp, #8
 800056c:	bd80      	pop	{r7, pc}
 800056e:	46c0      	nop			@ (mov r8, r8)
 8000570:	20000155 	.word	0x20000155

08000574 <ac_audio_controller>:
		notifications.tone = unlocked_tone;
	}
}

void ac_audio_controller(uint16_t time_since_last_called_msec)
{
 8000574:	b5b0      	push	{r4, r5, r7, lr}
 8000576:	b084      	sub	sp, #16
 8000578:	af00      	add	r7, sp, #0
 800057a:	0002      	movs	r2, r0
 800057c:	1dbb      	adds	r3, r7, #6
 800057e:	801a      	strh	r2, [r3, #0]
	static uint8_t  current_step = 0;
	static uint16_t time_since_last_tone        = 0;
	static uint16_t time_since_last_chirp_start = 0;
	static uint16_t time_since_last_chirp_stop  = 0;
    /* handle the AUDIO output pin definition to ensure the pin is driven LOW when inactive */
	if (ac_buzzer_inactive())
 8000580:	f7ff ff90 	bl	80004a4 <ac_buzzer_inactive>
 8000584:	1e03      	subs	r3, r0, #0
 8000586:	d016      	beq.n	80005b6 <ac_audio_controller+0x42>
	{
		/* ensure the pin is a digital output and set LOW */
		hal_gpio_set_output(timer_defs[TIMER_PIEZO_PWM].pin_id, false);
 8000588:	4bdb      	ldr	r3, [pc, #876]	@ (80008f8 <ac_audio_controller+0x384>)
 800058a:	68db      	ldr	r3, [r3, #12]
 800058c:	b2db      	uxtb	r3, r3
 800058e:	2100      	movs	r1, #0
 8000590:	0018      	movs	r0, r3
 8000592:	f006 fcf9 	bl	8006f88 <hal_gpio_set_output>
		hal_gpio_set_pin_mode(timer_defs[TIMER_PIEZO_PWM].pin_id, pin_defs[ timer_defs[TIMER_PIEZO_PWM].pin_id ].Mode );
 8000596:	4bd8      	ldr	r3, [pc, #864]	@ (80008f8 <ac_audio_controller+0x384>)
 8000598:	68db      	ldr	r3, [r3, #12]
 800059a:	b2d8      	uxtb	r0, r3
 800059c:	4bd6      	ldr	r3, [pc, #856]	@ (80008f8 <ac_audio_controller+0x384>)
 800059e:	68da      	ldr	r2, [r3, #12]
 80005a0:	49d6      	ldr	r1, [pc, #856]	@ (80008fc <ac_audio_controller+0x388>)
 80005a2:	0013      	movs	r3, r2
 80005a4:	009b      	lsls	r3, r3, #2
 80005a6:	189b      	adds	r3, r3, r2
 80005a8:	009b      	lsls	r3, r3, #2
 80005aa:	18cb      	adds	r3, r1, r3
 80005ac:	3304      	adds	r3, #4
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	0019      	movs	r1, r3
 80005b2:	f006 fd0d 	bl	8006fd0 <hal_gpio_set_pin_mode>
		/* ensure the pin is in PWM mode */
//		hal_gpio_set_pin_mode(IO_AUDIO, GPIO_AF2_LPTIM1);
	}

	/* if a manual PWM command has been initiated */
	if (pwm_override_active)
 80005b6:	4bd2      	ldr	r3, [pc, #840]	@ (8000900 <ac_audio_controller+0x38c>)
 80005b8:	781b      	ldrb	r3, [r3, #0]
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d000      	beq.n	80005c0 <ac_audio_controller+0x4c>
 80005be:	e1bf      	b.n	8000940 <ac_audio_controller+0x3cc>
	{
		return;
	}

	/* update the local timers */
	time_since_last_tone        += time_since_last_called_msec;
 80005c0:	4bd0      	ldr	r3, [pc, #832]	@ (8000904 <ac_audio_controller+0x390>)
 80005c2:	881a      	ldrh	r2, [r3, #0]
 80005c4:	1dbb      	adds	r3, r7, #6
 80005c6:	881b      	ldrh	r3, [r3, #0]
 80005c8:	18d3      	adds	r3, r2, r3
 80005ca:	b29a      	uxth	r2, r3
 80005cc:	4bcd      	ldr	r3, [pc, #820]	@ (8000904 <ac_audio_controller+0x390>)
 80005ce:	801a      	strh	r2, [r3, #0]
	time_since_last_chirp_start += time_since_last_called_msec;
 80005d0:	4bcd      	ldr	r3, [pc, #820]	@ (8000908 <ac_audio_controller+0x394>)
 80005d2:	881a      	ldrh	r2, [r3, #0]
 80005d4:	1dbb      	adds	r3, r7, #6
 80005d6:	881b      	ldrh	r3, [r3, #0]
 80005d8:	18d3      	adds	r3, r2, r3
 80005da:	b29a      	uxth	r2, r3
 80005dc:	4bca      	ldr	r3, [pc, #808]	@ (8000908 <ac_audio_controller+0x394>)
 80005de:	801a      	strh	r2, [r3, #0]
	time_since_last_chirp_stop  += time_since_last_called_msec;
 80005e0:	4bca      	ldr	r3, [pc, #808]	@ (800090c <ac_audio_controller+0x398>)
 80005e2:	881a      	ldrh	r2, [r3, #0]
 80005e4:	1dbb      	adds	r3, r7, #6
 80005e6:	881b      	ldrh	r3, [r3, #0]
 80005e8:	18d3      	adds	r3, r2, r3
 80005ea:	b29a      	uxth	r2, r3
 80005ec:	4bc7      	ldr	r3, [pc, #796]	@ (800090c <ac_audio_controller+0x398>)
 80005ee:	801a      	strh	r2, [r3, #0]

	if (alarm_active)
 80005f0:	4bc7      	ldr	r3, [pc, #796]	@ (8000910 <ac_audio_controller+0x39c>)
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d041      	beq.n	800067c <ac_audio_controller+0x108>
	{
		/* reset the number of chirps during an active alarm state to prevent
		 * any pending chirps from sounding after the alarm ends */
		chirp_counter = 0;
 80005f8:	4bc6      	ldr	r3, [pc, #792]	@ (8000914 <ac_audio_controller+0x3a0>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	701a      	strb	r2, [r3, #0]
		error_counter = 0;
 80005fe:	4bc6      	ldr	r3, [pc, #792]	@ (8000918 <ac_audio_controller+0x3a4>)
 8000600:	2200      	movs	r2, #0
 8000602:	701a      	strb	r2, [r3, #0]
		notifications.count = 0;
 8000604:	4bc5      	ldr	r3, [pc, #788]	@ (800091c <ac_audio_controller+0x3a8>)
 8000606:	2200      	movs	r2, #0
 8000608:	705a      	strb	r2, [r3, #1]
		if ((time_since_last_tone >= ALARM_TONE_TIME_MSEC))
 800060a:	4bbe      	ldr	r3, [pc, #760]	@ (8000904 <ac_audio_controller+0x390>)
 800060c:	881b      	ldrh	r3, [r3, #0]
 800060e:	2b0e      	cmp	r3, #14
 8000610:	d800      	bhi.n	8000614 <ac_audio_controller+0xa0>
 8000612:	e198      	b.n	8000946 <ac_audio_controller+0x3d2>
		{
			/* update the step */
			current_step = (current_step < (NUM_ALARM_TONES - 1)) ? (current_step + 1) : 0;
 8000614:	4bc2      	ldr	r3, [pc, #776]	@ (8000920 <ac_audio_controller+0x3ac>)
 8000616:	781b      	ldrb	r3, [r3, #0]
 8000618:	2b06      	cmp	r3, #6
 800061a:	d804      	bhi.n	8000626 <ac_audio_controller+0xb2>
 800061c:	4bc0      	ldr	r3, [pc, #768]	@ (8000920 <ac_audio_controller+0x3ac>)
 800061e:	781b      	ldrb	r3, [r3, #0]
 8000620:	3301      	adds	r3, #1
 8000622:	b2da      	uxtb	r2, r3
 8000624:	e000      	b.n	8000628 <ac_audio_controller+0xb4>
 8000626:	2200      	movs	r2, #0
 8000628:	4bbd      	ldr	r3, [pc, #756]	@ (8000920 <ac_audio_controller+0x3ac>)
 800062a:	701a      	strb	r2, [r3, #0]

			/* set the PWM timer */
			uint16_t on_time =  ac_adjust_alarm_audio_level(alarm_tone[current_step].pwm_dc);
 800062c:	4bbc      	ldr	r3, [pc, #752]	@ (8000920 <ac_audio_controller+0x3ac>)
 800062e:	781b      	ldrb	r3, [r3, #0]
 8000630:	0019      	movs	r1, r3
 8000632:	4abc      	ldr	r2, [pc, #752]	@ (8000924 <ac_audio_controller+0x3b0>)
 8000634:	000b      	movs	r3, r1
 8000636:	005b      	lsls	r3, r3, #1
 8000638:	185b      	adds	r3, r3, r1
 800063a:	005b      	lsls	r3, r3, #1
 800063c:	18d3      	adds	r3, r2, r3
 800063e:	3302      	adds	r3, #2
 8000640:	881b      	ldrh	r3, [r3, #0]
 8000642:	250e      	movs	r5, #14
 8000644:	197c      	adds	r4, r7, r5
 8000646:	0018      	movs	r0, r3
 8000648:	f000 f980 	bl	800094c <ac_adjust_alarm_audio_level>
 800064c:	0003      	movs	r3, r0
 800064e:	8023      	strh	r3, [r4, #0]
			hal_timer_set_pwm_output_period(TIMER_PIEZO_PWM, alarm_tone[current_step].pwm_period, on_time);
 8000650:	4bb3      	ldr	r3, [pc, #716]	@ (8000920 <ac_audio_controller+0x3ac>)
 8000652:	781b      	ldrb	r3, [r3, #0]
 8000654:	0019      	movs	r1, r3
 8000656:	4ab3      	ldr	r2, [pc, #716]	@ (8000924 <ac_audio_controller+0x3b0>)
 8000658:	000b      	movs	r3, r1
 800065a:	005b      	lsls	r3, r3, #1
 800065c:	185b      	adds	r3, r3, r1
 800065e:	005b      	lsls	r3, r3, #1
 8000660:	5a99      	ldrh	r1, [r3, r2]
 8000662:	197b      	adds	r3, r7, r5
 8000664:	881b      	ldrh	r3, [r3, #0]
 8000666:	001a      	movs	r2, r3
 8000668:	2000      	movs	r0, #0
 800066a:	f006 fd5d 	bl	8007128 <hal_timer_set_pwm_output_period>
			pwm_output_enabled = true;
 800066e:	4bae      	ldr	r3, [pc, #696]	@ (8000928 <ac_audio_controller+0x3b4>)
 8000670:	2201      	movs	r2, #1
 8000672:	701a      	strb	r2, [r3, #0]
			/* reset the state timer */
			time_since_last_tone = 0;
 8000674:	4ba3      	ldr	r3, [pc, #652]	@ (8000904 <ac_audio_controller+0x390>)
 8000676:	2200      	movs	r2, #0
 8000678:	801a      	strh	r2, [r3, #0]
 800067a:	e164      	b.n	8000946 <ac_audio_controller+0x3d2>
		}
	}
	else
	{
		/* if there are pending chirps */
		if (chirp_counter > 0)
 800067c:	4ba5      	ldr	r3, [pc, #660]	@ (8000914 <ac_audio_controller+0x3a0>)
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	2b00      	cmp	r3, #0
 8000682:	d04e      	beq.n	8000722 <ac_audio_controller+0x1ae>
		{
			if (!chirp_active)
 8000684:	4ba9      	ldr	r3, [pc, #676]	@ (800092c <ac_audio_controller+0x3b8>)
 8000686:	781b      	ldrb	r3, [r3, #0]
 8000688:	2201      	movs	r2, #1
 800068a:	4053      	eors	r3, r2
 800068c:	b2db      	uxtb	r3, r3
 800068e:	2b00      	cmp	r3, #0
 8000690:	d02d      	beq.n	80006ee <ac_audio_controller+0x17a>
			{
				/* if time to start a chirp */
				if (time_since_last_chirp_stop >= CHIRP_QUIET_TIME_MSEC)
 8000692:	4b9e      	ldr	r3, [pc, #632]	@ (800090c <ac_audio_controller+0x398>)
 8000694:	881b      	ldrh	r3, [r3, #0]
 8000696:	2b4a      	cmp	r3, #74	@ 0x4a
 8000698:	d800      	bhi.n	800069c <ac_audio_controller+0x128>
 800069a:	e154      	b.n	8000946 <ac_audio_controller+0x3d2>
				{
					if (chirp_low)
 800069c:	4ba4      	ldr	r3, [pc, #656]	@ (8000930 <ac_audio_controller+0x3bc>)
 800069e:	781b      	ldrb	r3, [r3, #0]
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d00d      	beq.n	80006c0 <ac_audio_controller+0x14c>
					{
						hal_timer_set_pwm_output_period(TIMER_PIEZO_PWM, chirp_tone_low.pwm_period, ac_adjust_alarm_audio_level(chirp_tone_low.pwm_dc));
 80006a4:	4ba3      	ldr	r3, [pc, #652]	@ (8000934 <ac_audio_controller+0x3c0>)
 80006a6:	881c      	ldrh	r4, [r3, #0]
 80006a8:	4ba2      	ldr	r3, [pc, #648]	@ (8000934 <ac_audio_controller+0x3c0>)
 80006aa:	885b      	ldrh	r3, [r3, #2]
 80006ac:	0018      	movs	r0, r3
 80006ae:	f000 f94d 	bl	800094c <ac_adjust_alarm_audio_level>
 80006b2:	0003      	movs	r3, r0
 80006b4:	001a      	movs	r2, r3
 80006b6:	0021      	movs	r1, r4
 80006b8:	2000      	movs	r0, #0
 80006ba:	f006 fd35 	bl	8007128 <hal_timer_set_pwm_output_period>
 80006be:	e00c      	b.n	80006da <ac_audio_controller+0x166>
					}
					else
					{
						hal_timer_set_pwm_output_period(TIMER_PIEZO_PWM, chirp_tone.pwm_period, ac_adjust_alarm_audio_level(chirp_tone.pwm_dc));
 80006c0:	4b9d      	ldr	r3, [pc, #628]	@ (8000938 <ac_audio_controller+0x3c4>)
 80006c2:	881c      	ldrh	r4, [r3, #0]
 80006c4:	4b9c      	ldr	r3, [pc, #624]	@ (8000938 <ac_audio_controller+0x3c4>)
 80006c6:	885b      	ldrh	r3, [r3, #2]
 80006c8:	0018      	movs	r0, r3
 80006ca:	f000 f93f 	bl	800094c <ac_adjust_alarm_audio_level>
 80006ce:	0003      	movs	r3, r0
 80006d0:	001a      	movs	r2, r3
 80006d2:	0021      	movs	r1, r4
 80006d4:	2000      	movs	r0, #0
 80006d6:	f006 fd27 	bl	8007128 <hal_timer_set_pwm_output_period>
					}
					pwm_output_enabled = true;
 80006da:	4b93      	ldr	r3, [pc, #588]	@ (8000928 <ac_audio_controller+0x3b4>)
 80006dc:	2201      	movs	r2, #1
 80006de:	701a      	strb	r2, [r3, #0]
					time_since_last_chirp_start = 0;
 80006e0:	4b89      	ldr	r3, [pc, #548]	@ (8000908 <ac_audio_controller+0x394>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	801a      	strh	r2, [r3, #0]
					chirp_active                = true;
 80006e6:	4b91      	ldr	r3, [pc, #580]	@ (800092c <ac_audio_controller+0x3b8>)
 80006e8:	2201      	movs	r2, #1
 80006ea:	701a      	strb	r2, [r3, #0]
 80006ec:	e12b      	b.n	8000946 <ac_audio_controller+0x3d2>
				}
			}
			else
			{
				/* if time to end the chirp */
				if (time_since_last_chirp_start >= CHIRP_TONE_TIME_MSEC)
 80006ee:	4b86      	ldr	r3, [pc, #536]	@ (8000908 <ac_audio_controller+0x394>)
 80006f0:	881b      	ldrh	r3, [r3, #0]
 80006f2:	2b4a      	cmp	r3, #74	@ 0x4a
 80006f4:	d800      	bhi.n	80006f8 <ac_audio_controller+0x184>
 80006f6:	e126      	b.n	8000946 <ac_audio_controller+0x3d2>
				{
					hal_timer_set_pwm_output_period(TIMER_PIEZO_PWM, 0, 0);
 80006f8:	2200      	movs	r2, #0
 80006fa:	2100      	movs	r1, #0
 80006fc:	2000      	movs	r0, #0
 80006fe:	f006 fd13 	bl	8007128 <hal_timer_set_pwm_output_period>
					pwm_output_enabled = false;
 8000702:	4b89      	ldr	r3, [pc, #548]	@ (8000928 <ac_audio_controller+0x3b4>)
 8000704:	2200      	movs	r2, #0
 8000706:	701a      	strb	r2, [r3, #0]
					time_since_last_chirp_stop = 0;
 8000708:	4b80      	ldr	r3, [pc, #512]	@ (800090c <ac_audio_controller+0x398>)
 800070a:	2200      	movs	r2, #0
 800070c:	801a      	strh	r2, [r3, #0]
					chirp_active = false;
 800070e:	4b87      	ldr	r3, [pc, #540]	@ (800092c <ac_audio_controller+0x3b8>)
 8000710:	2200      	movs	r2, #0
 8000712:	701a      	strb	r2, [r3, #0]
					--chirp_counter;
 8000714:	4b7f      	ldr	r3, [pc, #508]	@ (8000914 <ac_audio_controller+0x3a0>)
 8000716:	781b      	ldrb	r3, [r3, #0]
 8000718:	3b01      	subs	r3, #1
 800071a:	b2da      	uxtb	r2, r3
 800071c:	4b7d      	ldr	r3, [pc, #500]	@ (8000914 <ac_audio_controller+0x3a0>)
 800071e:	701a      	strb	r2, [r3, #0]
 8000720:	e111      	b.n	8000946 <ac_audio_controller+0x3d2>
				}
			}
		}
		else if (error_counter > 0)
 8000722:	4b7d      	ldr	r3, [pc, #500]	@ (8000918 <ac_audio_controller+0x3a4>)
 8000724:	781b      	ldrb	r3, [r3, #0]
 8000726:	2b00      	cmp	r3, #0
 8000728:	d03c      	beq.n	80007a4 <ac_audio_controller+0x230>
		{
			if (!chirp_active)
 800072a:	4b80      	ldr	r3, [pc, #512]	@ (800092c <ac_audio_controller+0x3b8>)
 800072c:	781b      	ldrb	r3, [r3, #0]
 800072e:	2201      	movs	r2, #1
 8000730:	4053      	eors	r3, r2
 8000732:	b2db      	uxtb	r3, r3
 8000734:	2b00      	cmp	r3, #0
 8000736:	d01b      	beq.n	8000770 <ac_audio_controller+0x1fc>
			{
				/* if time to start a chirp */
				if (time_since_last_chirp_stop >= CHIRP_QUIET_TIME_MSEC)
 8000738:	4b74      	ldr	r3, [pc, #464]	@ (800090c <ac_audio_controller+0x398>)
 800073a:	881b      	ldrh	r3, [r3, #0]
 800073c:	2b4a      	cmp	r3, #74	@ 0x4a
 800073e:	d800      	bhi.n	8000742 <ac_audio_controller+0x1ce>
 8000740:	e101      	b.n	8000946 <ac_audio_controller+0x3d2>
				{
					hal_timer_set_pwm_output_period(TIMER_PIEZO_PWM, buzz_tone.pwm_period, ac_adjust_alarm_audio_level(buzz_tone.pwm_dc));
 8000742:	4b7e      	ldr	r3, [pc, #504]	@ (800093c <ac_audio_controller+0x3c8>)
 8000744:	881c      	ldrh	r4, [r3, #0]
 8000746:	4b7d      	ldr	r3, [pc, #500]	@ (800093c <ac_audio_controller+0x3c8>)
 8000748:	885b      	ldrh	r3, [r3, #2]
 800074a:	0018      	movs	r0, r3
 800074c:	f000 f8fe 	bl	800094c <ac_adjust_alarm_audio_level>
 8000750:	0003      	movs	r3, r0
 8000752:	001a      	movs	r2, r3
 8000754:	0021      	movs	r1, r4
 8000756:	2000      	movs	r0, #0
 8000758:	f006 fce6 	bl	8007128 <hal_timer_set_pwm_output_period>
					pwm_output_enabled = true;
 800075c:	4b72      	ldr	r3, [pc, #456]	@ (8000928 <ac_audio_controller+0x3b4>)
 800075e:	2201      	movs	r2, #1
 8000760:	701a      	strb	r2, [r3, #0]
					time_since_last_chirp_start = 0;
 8000762:	4b69      	ldr	r3, [pc, #420]	@ (8000908 <ac_audio_controller+0x394>)
 8000764:	2200      	movs	r2, #0
 8000766:	801a      	strh	r2, [r3, #0]
					chirp_active                = true;
 8000768:	4b70      	ldr	r3, [pc, #448]	@ (800092c <ac_audio_controller+0x3b8>)
 800076a:	2201      	movs	r2, #1
 800076c:	701a      	strb	r2, [r3, #0]
 800076e:	e0ea      	b.n	8000946 <ac_audio_controller+0x3d2>
				}
			}
			else
			{
				/* if time to end the chirp */
				if (time_since_last_chirp_start >= ERROR_BUZZ_DURATION_MSEC)
 8000770:	4b65      	ldr	r3, [pc, #404]	@ (8000908 <ac_audio_controller+0x394>)
 8000772:	881b      	ldrh	r3, [r3, #0]
 8000774:	2b63      	cmp	r3, #99	@ 0x63
 8000776:	d800      	bhi.n	800077a <ac_audio_controller+0x206>
 8000778:	e0e5      	b.n	8000946 <ac_audio_controller+0x3d2>
				{
					hal_timer_set_pwm_output_period(TIMER_PIEZO_PWM, 0, 0);
 800077a:	2200      	movs	r2, #0
 800077c:	2100      	movs	r1, #0
 800077e:	2000      	movs	r0, #0
 8000780:	f006 fcd2 	bl	8007128 <hal_timer_set_pwm_output_period>
					pwm_output_enabled = false;
 8000784:	4b68      	ldr	r3, [pc, #416]	@ (8000928 <ac_audio_controller+0x3b4>)
 8000786:	2200      	movs	r2, #0
 8000788:	701a      	strb	r2, [r3, #0]
					time_since_last_chirp_stop = 0;
 800078a:	4b60      	ldr	r3, [pc, #384]	@ (800090c <ac_audio_controller+0x398>)
 800078c:	2200      	movs	r2, #0
 800078e:	801a      	strh	r2, [r3, #0]
					chirp_active = false;
 8000790:	4b66      	ldr	r3, [pc, #408]	@ (800092c <ac_audio_controller+0x3b8>)
 8000792:	2200      	movs	r2, #0
 8000794:	701a      	strb	r2, [r3, #0]
					--error_counter;
 8000796:	4b60      	ldr	r3, [pc, #384]	@ (8000918 <ac_audio_controller+0x3a4>)
 8000798:	781b      	ldrb	r3, [r3, #0]
 800079a:	3b01      	subs	r3, #1
 800079c:	b2da      	uxtb	r2, r3
 800079e:	4b5e      	ldr	r3, [pc, #376]	@ (8000918 <ac_audio_controller+0x3a4>)
 80007a0:	701a      	strb	r2, [r3, #0]
 80007a2:	e0d0      	b.n	8000946 <ac_audio_controller+0x3d2>
				}
			}
		}
		else if( notifications.count > 0 && notifications.type != NOTIFY_IDLE )
 80007a4:	4b5d      	ldr	r3, [pc, #372]	@ (800091c <ac_audio_controller+0x3a8>)
 80007a6:	785b      	ldrb	r3, [r3, #1]
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d100      	bne.n	80007ae <ac_audio_controller+0x23a>
 80007ac:	e097      	b.n	80008de <ac_audio_controller+0x36a>
 80007ae:	4b5b      	ldr	r3, [pc, #364]	@ (800091c <ac_audio_controller+0x3a8>)
 80007b0:	781b      	ldrb	r3, [r3, #0]
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d100      	bne.n	80007b8 <ac_audio_controller+0x244>
 80007b6:	e092      	b.n	80008de <ac_audio_controller+0x36a>
		{
			if( pwm_output_enabled == false )
 80007b8:	4b5b      	ldr	r3, [pc, #364]	@ (8000928 <ac_audio_controller+0x3b4>)
 80007ba:	781b      	ldrb	r3, [r3, #0]
 80007bc:	2201      	movs	r2, #1
 80007be:	4053      	eors	r3, r2
 80007c0:	b2db      	uxtb	r3, r3
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d028      	beq.n	8000818 <ac_audio_controller+0x2a4>
			{
				current_step = 0;
 80007c6:	4b56      	ldr	r3, [pc, #344]	@ (8000920 <ac_audio_controller+0x3ac>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	701a      	strb	r2, [r3, #0]
				pwm_output_enabled = true;
 80007cc:	4b56      	ldr	r3, [pc, #344]	@ (8000928 <ac_audio_controller+0x3b4>)
 80007ce:	2201      	movs	r2, #1
 80007d0:	701a      	strb	r2, [r3, #0]
				time_since_last_tone = 0;
 80007d2:	4b4c      	ldr	r3, [pc, #304]	@ (8000904 <ac_audio_controller+0x390>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	801a      	strh	r2, [r3, #0]
				hal_timer_set_pwm_output_period(TIMER_PIEZO_PWM, notifications.tone[current_step].pwm_period, ac_adjust_alarm_audio_level(notifications.tone[current_step].pwm_dc));
 80007d8:	4b50      	ldr	r3, [pc, #320]	@ (800091c <ac_audio_controller+0x3a8>)
 80007da:	685a      	ldr	r2, [r3, #4]
 80007dc:	4b50      	ldr	r3, [pc, #320]	@ (8000920 <ac_audio_controller+0x3ac>)
 80007de:	781b      	ldrb	r3, [r3, #0]
 80007e0:	0019      	movs	r1, r3
 80007e2:	000b      	movs	r3, r1
 80007e4:	005b      	lsls	r3, r3, #1
 80007e6:	185b      	adds	r3, r3, r1
 80007e8:	005b      	lsls	r3, r3, #1
 80007ea:	18d3      	adds	r3, r2, r3
 80007ec:	881c      	ldrh	r4, [r3, #0]
 80007ee:	4b4b      	ldr	r3, [pc, #300]	@ (800091c <ac_audio_controller+0x3a8>)
 80007f0:	685a      	ldr	r2, [r3, #4]
 80007f2:	4b4b      	ldr	r3, [pc, #300]	@ (8000920 <ac_audio_controller+0x3ac>)
 80007f4:	781b      	ldrb	r3, [r3, #0]
 80007f6:	0019      	movs	r1, r3
 80007f8:	000b      	movs	r3, r1
 80007fa:	005b      	lsls	r3, r3, #1
 80007fc:	185b      	adds	r3, r3, r1
 80007fe:	005b      	lsls	r3, r3, #1
 8000800:	18d3      	adds	r3, r2, r3
 8000802:	885b      	ldrh	r3, [r3, #2]
 8000804:	0018      	movs	r0, r3
 8000806:	f000 f8a1 	bl	800094c <ac_adjust_alarm_audio_level>
 800080a:	0003      	movs	r3, r0
 800080c:	001a      	movs	r2, r3
 800080e:	0021      	movs	r1, r4
 8000810:	2000      	movs	r0, #0
 8000812:	f006 fc89 	bl	8007128 <hal_timer_set_pwm_output_period>
			if( pwm_output_enabled == false )
 8000816:	e095      	b.n	8000944 <ac_audio_controller+0x3d0>
			}
			else
			{
				if ((time_since_last_tone >= notifications.tone[current_step].duration))
 8000818:	4b40      	ldr	r3, [pc, #256]	@ (800091c <ac_audio_controller+0x3a8>)
 800081a:	685a      	ldr	r2, [r3, #4]
 800081c:	4b40      	ldr	r3, [pc, #256]	@ (8000920 <ac_audio_controller+0x3ac>)
 800081e:	781b      	ldrb	r3, [r3, #0]
 8000820:	0019      	movs	r1, r3
 8000822:	000b      	movs	r3, r1
 8000824:	005b      	lsls	r3, r3, #1
 8000826:	185b      	adds	r3, r3, r1
 8000828:	005b      	lsls	r3, r3, #1
 800082a:	18d3      	adds	r3, r2, r3
 800082c:	889a      	ldrh	r2, [r3, #4]
 800082e:	4b35      	ldr	r3, [pc, #212]	@ (8000904 <ac_audio_controller+0x390>)
 8000830:	881b      	ldrh	r3, [r3, #0]
 8000832:	429a      	cmp	r2, r3
 8000834:	d900      	bls.n	8000838 <ac_audio_controller+0x2c4>
 8000836:	e085      	b.n	8000944 <ac_audio_controller+0x3d0>
				{
					if( ++current_step >= NUM_MOTOR_TONES )
 8000838:	4b39      	ldr	r3, [pc, #228]	@ (8000920 <ac_audio_controller+0x3ac>)
 800083a:	781b      	ldrb	r3, [r3, #0]
 800083c:	3301      	adds	r3, #1
 800083e:	b2da      	uxtb	r2, r3
 8000840:	4b37      	ldr	r3, [pc, #220]	@ (8000920 <ac_audio_controller+0x3ac>)
 8000842:	701a      	strb	r2, [r3, #0]
 8000844:	4b36      	ldr	r3, [pc, #216]	@ (8000920 <ac_audio_controller+0x3ac>)
 8000846:	781b      	ldrb	r3, [r3, #0]
 8000848:	2b04      	cmp	r3, #4
 800084a:	d91e      	bls.n	800088a <ac_audio_controller+0x316>
					{
						current_step = 0;
 800084c:	4b34      	ldr	r3, [pc, #208]	@ (8000920 <ac_audio_controller+0x3ac>)
 800084e:	2200      	movs	r2, #0
 8000850:	701a      	strb	r2, [r3, #0]
						if( notifications.count > 1 )
 8000852:	4b32      	ldr	r3, [pc, #200]	@ (800091c <ac_audio_controller+0x3a8>)
 8000854:	785b      	ldrb	r3, [r3, #1]
 8000856:	2b01      	cmp	r3, #1
 8000858:	d906      	bls.n	8000868 <ac_audio_controller+0x2f4>
						{
							notifications.count--;
 800085a:	4b30      	ldr	r3, [pc, #192]	@ (800091c <ac_audio_controller+0x3a8>)
 800085c:	785b      	ldrb	r3, [r3, #1]
 800085e:	3b01      	subs	r3, #1
 8000860:	b2da      	uxtb	r2, r3
 8000862:	4b2e      	ldr	r3, [pc, #184]	@ (800091c <ac_audio_controller+0x3a8>)
 8000864:	705a      	strb	r2, [r3, #1]
 8000866:	e010      	b.n	800088a <ac_audio_controller+0x316>
						}
						else
						{
							notifications.count = 0;
 8000868:	4b2c      	ldr	r3, [pc, #176]	@ (800091c <ac_audio_controller+0x3a8>)
 800086a:	2200      	movs	r2, #0
 800086c:	705a      	strb	r2, [r3, #1]
							hal_timer_set_pwm_output_period(TIMER_PIEZO_PWM, 0, 0);
 800086e:	2200      	movs	r2, #0
 8000870:	2100      	movs	r1, #0
 8000872:	2000      	movs	r0, #0
 8000874:	f006 fc58 	bl	8007128 <hal_timer_set_pwm_output_period>
							pwm_output_enabled = false;
 8000878:	4b2b      	ldr	r3, [pc, #172]	@ (8000928 <ac_audio_controller+0x3b4>)
 800087a:	2200      	movs	r2, #0
 800087c:	701a      	strb	r2, [r3, #0]
							notifications.tone = NULL;
 800087e:	4b27      	ldr	r3, [pc, #156]	@ (800091c <ac_audio_controller+0x3a8>)
 8000880:	2200      	movs	r2, #0
 8000882:	605a      	str	r2, [r3, #4]
							notifications.type = NOTIFY_IDLE;
 8000884:	4b25      	ldr	r3, [pc, #148]	@ (800091c <ac_audio_controller+0x3a8>)
 8000886:	2200      	movs	r2, #0
 8000888:	701a      	strb	r2, [r3, #0]
						}
					}
					if( notifications.count )
 800088a:	4b24      	ldr	r3, [pc, #144]	@ (800091c <ac_audio_controller+0x3a8>)
 800088c:	785b      	ldrb	r3, [r3, #1]
 800088e:	2b00      	cmp	r3, #0
 8000890:	d058      	beq.n	8000944 <ac_audio_controller+0x3d0>
					{
						/* set the PWM timer */
						hal_timer_set_pwm_output_period(TIMER_PIEZO_PWM, notifications.tone[current_step].pwm_period, ac_adjust_alarm_audio_level(notifications.tone[current_step].pwm_dc));
 8000892:	4b22      	ldr	r3, [pc, #136]	@ (800091c <ac_audio_controller+0x3a8>)
 8000894:	685a      	ldr	r2, [r3, #4]
 8000896:	4b22      	ldr	r3, [pc, #136]	@ (8000920 <ac_audio_controller+0x3ac>)
 8000898:	781b      	ldrb	r3, [r3, #0]
 800089a:	0019      	movs	r1, r3
 800089c:	000b      	movs	r3, r1
 800089e:	005b      	lsls	r3, r3, #1
 80008a0:	185b      	adds	r3, r3, r1
 80008a2:	005b      	lsls	r3, r3, #1
 80008a4:	18d3      	adds	r3, r2, r3
 80008a6:	881c      	ldrh	r4, [r3, #0]
 80008a8:	4b1c      	ldr	r3, [pc, #112]	@ (800091c <ac_audio_controller+0x3a8>)
 80008aa:	685a      	ldr	r2, [r3, #4]
 80008ac:	4b1c      	ldr	r3, [pc, #112]	@ (8000920 <ac_audio_controller+0x3ac>)
 80008ae:	781b      	ldrb	r3, [r3, #0]
 80008b0:	0019      	movs	r1, r3
 80008b2:	000b      	movs	r3, r1
 80008b4:	005b      	lsls	r3, r3, #1
 80008b6:	185b      	adds	r3, r3, r1
 80008b8:	005b      	lsls	r3, r3, #1
 80008ba:	18d3      	adds	r3, r2, r3
 80008bc:	885b      	ldrh	r3, [r3, #2]
 80008be:	0018      	movs	r0, r3
 80008c0:	f000 f844 	bl	800094c <ac_adjust_alarm_audio_level>
 80008c4:	0003      	movs	r3, r0
 80008c6:	001a      	movs	r2, r3
 80008c8:	0021      	movs	r1, r4
 80008ca:	2000      	movs	r0, #0
 80008cc:	f006 fc2c 	bl	8007128 <hal_timer_set_pwm_output_period>
						pwm_output_enabled = true;
 80008d0:	4b15      	ldr	r3, [pc, #84]	@ (8000928 <ac_audio_controller+0x3b4>)
 80008d2:	2201      	movs	r2, #1
 80008d4:	701a      	strb	r2, [r3, #0]
						/* reset the state timer */
						time_since_last_tone = 0;
 80008d6:	4b0b      	ldr	r3, [pc, #44]	@ (8000904 <ac_audio_controller+0x390>)
 80008d8:	2200      	movs	r2, #0
 80008da:	801a      	strh	r2, [r3, #0]
			if( pwm_output_enabled == false )
 80008dc:	e032      	b.n	8000944 <ac_audio_controller+0x3d0>
				}
			}
		}
		else
		{
			chirp_low = false;
 80008de:	4b14      	ldr	r3, [pc, #80]	@ (8000930 <ac_audio_controller+0x3bc>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	701a      	strb	r2, [r3, #0]
			hal_timer_set_pwm_output_period(TIMER_PIEZO_PWM, 0, 0);
 80008e4:	2200      	movs	r2, #0
 80008e6:	2100      	movs	r1, #0
 80008e8:	2000      	movs	r0, #0
 80008ea:	f006 fc1d 	bl	8007128 <hal_timer_set_pwm_output_period>
			pwm_output_enabled = false;
 80008ee:	4b0e      	ldr	r3, [pc, #56]	@ (8000928 <ac_audio_controller+0x3b4>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	701a      	strb	r2, [r3, #0]
 80008f4:	e027      	b.n	8000946 <ac_audio_controller+0x3d2>
 80008f6:	46c0      	nop			@ (mov r8, r8)
 80008f8:	200000c4 	.word	0x200000c4
 80008fc:	08007ea4 	.word	0x08007ea4
 8000900:	20000158 	.word	0x20000158
 8000904:	20000164 	.word	0x20000164
 8000908:	20000166 	.word	0x20000166
 800090c:	20000168 	.word	0x20000168
 8000910:	20000157 	.word	0x20000157
 8000914:	20000154 	.word	0x20000154
 8000918:	20000155 	.word	0x20000155
 800091c:	2000015c 	.word	0x2000015c
 8000920:	2000016a 	.word	0x2000016a
 8000924:	08007d80 	.word	0x08007d80
 8000928:	20000159 	.word	0x20000159
 800092c:	2000016b 	.word	0x2000016b
 8000930:	20000156 	.word	0x20000156
 8000934:	20000008 	.word	0x20000008
 8000938:	20000000 	.word	0x20000000
 800093c:	20000010 	.word	0x20000010
		return;
 8000940:	46c0      	nop			@ (mov r8, r8)
 8000942:	e000      	b.n	8000946 <ac_audio_controller+0x3d2>
			if( pwm_output_enabled == false )
 8000944:	46c0      	nop			@ (mov r8, r8)
		}
	}
}
 8000946:	46bd      	mov	sp, r7
 8000948:	b004      	add	sp, #16
 800094a:	bdb0      	pop	{r4, r5, r7, pc}

0800094c <ac_adjust_alarm_audio_level>:

static uint16_t ac_adjust_alarm_audio_level(uint32_t duty_cycle_count)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
	return duty_cycle_count;
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	b29b      	uxth	r3, r3
}
 8000958:	0018      	movs	r0, r3
 800095a:	46bd      	mov	sp, r7
 800095c:	b002      	add	sp, #8
 800095e:	bd80      	pop	{r7, pc}

08000960 <UtilDebounceReadAndDebounceInputs>:
static uint32_t DebouncedReadings[NUM_PORT_2_DEBOUNCE][2];

static uint8_t ThisReading = 0;

void UtilDebounceReadAndDebounceInputs(void)
{
 8000960:	b5b0      	push	{r4, r5, r7, lr}
 8000962:	b082      	sub	sp, #8
 8000964:	af00      	add	r7, sp, #0
	  uint8_t thisPort;
	  	uint16_t i;

	// Now debounce the inputs by anding and oring the members of the readings array.
	for (thisPort = 0;NUM_PORT_2_DEBOUNCE > thisPort; thisPort++)
 8000966:	1dfb      	adds	r3, r7, #7
 8000968:	2200      	movs	r2, #0
 800096a:	701a      	strb	r2, [r3, #0]
 800096c:	e05f      	b.n	8000a2e <UtilDebounceReadAndDebounceInputs+0xce>
	{
	   // Add this reading to the port readings array.
	   PortReadings[thisPort][ThisReading] = hal_gpio_read_port(Ports2Debounce[thisPort]);
 800096e:	1dfb      	adds	r3, r7, #7
 8000970:	781a      	ldrb	r2, [r3, #0]
 8000972:	4b39      	ldr	r3, [pc, #228]	@ (8000a58 <UtilDebounceReadAndDebounceInputs+0xf8>)
 8000974:	0092      	lsls	r2, r2, #2
 8000976:	58d2      	ldr	r2, [r2, r3]
 8000978:	1dfb      	adds	r3, r7, #7
 800097a:	781c      	ldrb	r4, [r3, #0]
 800097c:	4b37      	ldr	r3, [pc, #220]	@ (8000a5c <UtilDebounceReadAndDebounceInputs+0xfc>)
 800097e:	781b      	ldrb	r3, [r3, #0]
 8000980:	001d      	movs	r5, r3
 8000982:	0010      	movs	r0, r2
 8000984:	f006 fb44 	bl	8007010 <hal_gpio_read_port>
 8000988:	0001      	movs	r1, r0
 800098a:	4b35      	ldr	r3, [pc, #212]	@ (8000a60 <UtilDebounceReadAndDebounceInputs+0x100>)
 800098c:	0122      	lsls	r2, r4, #4
 800098e:	1952      	adds	r2, r2, r5
 8000990:	0092      	lsls	r2, r2, #2
 8000992:	50d1      	str	r1, [r2, r3]

	   DebouncedReadings[thisPort][0] = 0;
 8000994:	1dfb      	adds	r3, r7, #7
 8000996:	781a      	ldrb	r2, [r3, #0]
 8000998:	4b32      	ldr	r3, [pc, #200]	@ (8000a64 <UtilDebounceReadAndDebounceInputs+0x104>)
 800099a:	00d2      	lsls	r2, r2, #3
 800099c:	2100      	movs	r1, #0
 800099e:	50d1      	str	r1, [r2, r3]
	   DebouncedReadings[thisPort][1] = 0xFFFFFFFF;
 80009a0:	1dfb      	adds	r3, r7, #7
 80009a2:	781b      	ldrb	r3, [r3, #0]
 80009a4:	4a2f      	ldr	r2, [pc, #188]	@ (8000a64 <UtilDebounceReadAndDebounceInputs+0x104>)
 80009a6:	00db      	lsls	r3, r3, #3
 80009a8:	18d3      	adds	r3, r2, r3
 80009aa:	3304      	adds	r3, #4
 80009ac:	2201      	movs	r2, #1
 80009ae:	4252      	negs	r2, r2
 80009b0:	601a      	str	r2, [r3, #0]

	   for (i = 0;DEBOUNCE_DEPTH > i;i++)
 80009b2:	1d3b      	adds	r3, r7, #4
 80009b4:	2200      	movs	r2, #0
 80009b6:	801a      	strh	r2, [r3, #0]
 80009b8:	e030      	b.n	8000a1c <UtilDebounceReadAndDebounceInputs+0xbc>
	   {
		   // debounce this port for input state == zero. If all members of the Port Readings array have a 0 in
		   // a specific bit position, that bit will be 0 in DebouncedLow for that port.
		   DebouncedReadings[thisPort][0] |= PortReadings[thisPort][i];
 80009ba:	1dfb      	adds	r3, r7, #7
 80009bc:	781a      	ldrb	r2, [r3, #0]
 80009be:	4b29      	ldr	r3, [pc, #164]	@ (8000a64 <UtilDebounceReadAndDebounceInputs+0x104>)
 80009c0:	00d2      	lsls	r2, r2, #3
 80009c2:	58d1      	ldr	r1, [r2, r3]
 80009c4:	1dfb      	adds	r3, r7, #7
 80009c6:	7818      	ldrb	r0, [r3, #0]
 80009c8:	1d3b      	adds	r3, r7, #4
 80009ca:	881a      	ldrh	r2, [r3, #0]
 80009cc:	4b24      	ldr	r3, [pc, #144]	@ (8000a60 <UtilDebounceReadAndDebounceInputs+0x100>)
 80009ce:	0100      	lsls	r0, r0, #4
 80009d0:	1882      	adds	r2, r0, r2
 80009d2:	0092      	lsls	r2, r2, #2
 80009d4:	58d3      	ldr	r3, [r2, r3]
 80009d6:	1dfa      	adds	r2, r7, #7
 80009d8:	7812      	ldrb	r2, [r2, #0]
 80009da:	4319      	orrs	r1, r3
 80009dc:	4b21      	ldr	r3, [pc, #132]	@ (8000a64 <UtilDebounceReadAndDebounceInputs+0x104>)
 80009de:	00d2      	lsls	r2, r2, #3
 80009e0:	50d1      	str	r1, [r2, r3]

		   // debounce this port for input pin state == one. If all members of the Port Readings array have a 1 in
		   // a specific bit position, that bit will be 1 in DebouncedHigh for that port.
		   DebouncedReadings[thisPort][1] &= PortReadings[thisPort][i];
 80009e2:	1dfb      	adds	r3, r7, #7
 80009e4:	781b      	ldrb	r3, [r3, #0]
 80009e6:	4a1f      	ldr	r2, [pc, #124]	@ (8000a64 <UtilDebounceReadAndDebounceInputs+0x104>)
 80009e8:	00db      	lsls	r3, r3, #3
 80009ea:	18d3      	adds	r3, r2, r3
 80009ec:	3304      	adds	r3, #4
 80009ee:	681a      	ldr	r2, [r3, #0]
 80009f0:	1dfb      	adds	r3, r7, #7
 80009f2:	7818      	ldrb	r0, [r3, #0]
 80009f4:	1d3b      	adds	r3, r7, #4
 80009f6:	8819      	ldrh	r1, [r3, #0]
 80009f8:	4b19      	ldr	r3, [pc, #100]	@ (8000a60 <UtilDebounceReadAndDebounceInputs+0x100>)
 80009fa:	0100      	lsls	r0, r0, #4
 80009fc:	1841      	adds	r1, r0, r1
 80009fe:	0089      	lsls	r1, r1, #2
 8000a00:	58c9      	ldr	r1, [r1, r3]
 8000a02:	1dfb      	adds	r3, r7, #7
 8000a04:	781b      	ldrb	r3, [r3, #0]
 8000a06:	400a      	ands	r2, r1
 8000a08:	4916      	ldr	r1, [pc, #88]	@ (8000a64 <UtilDebounceReadAndDebounceInputs+0x104>)
 8000a0a:	00db      	lsls	r3, r3, #3
 8000a0c:	18cb      	adds	r3, r1, r3
 8000a0e:	3304      	adds	r3, #4
 8000a10:	601a      	str	r2, [r3, #0]
	   for (i = 0;DEBOUNCE_DEPTH > i;i++)
 8000a12:	1d3b      	adds	r3, r7, #4
 8000a14:	881a      	ldrh	r2, [r3, #0]
 8000a16:	1d3b      	adds	r3, r7, #4
 8000a18:	3201      	adds	r2, #1
 8000a1a:	801a      	strh	r2, [r3, #0]
 8000a1c:	1d3b      	adds	r3, r7, #4
 8000a1e:	881b      	ldrh	r3, [r3, #0]
 8000a20:	2b0f      	cmp	r3, #15
 8000a22:	d9ca      	bls.n	80009ba <UtilDebounceReadAndDebounceInputs+0x5a>
	for (thisPort = 0;NUM_PORT_2_DEBOUNCE > thisPort; thisPort++)
 8000a24:	1dfb      	adds	r3, r7, #7
 8000a26:	781a      	ldrb	r2, [r3, #0]
 8000a28:	1dfb      	adds	r3, r7, #7
 8000a2a:	3201      	adds	r2, #1
 8000a2c:	701a      	strb	r2, [r3, #0]
 8000a2e:	1dfb      	adds	r3, r7, #7
 8000a30:	781b      	ldrb	r3, [r3, #0]
 8000a32:	2b01      	cmp	r3, #1
 8000a34:	d99b      	bls.n	800096e <UtilDebounceReadAndDebounceInputs+0xe>
	   }

	}

	// Increment and wrap the reading number
	++ThisReading;
 8000a36:	4b09      	ldr	r3, [pc, #36]	@ (8000a5c <UtilDebounceReadAndDebounceInputs+0xfc>)
 8000a38:	781b      	ldrb	r3, [r3, #0]
 8000a3a:	3301      	adds	r3, #1
 8000a3c:	b2da      	uxtb	r2, r3
 8000a3e:	4b07      	ldr	r3, [pc, #28]	@ (8000a5c <UtilDebounceReadAndDebounceInputs+0xfc>)
 8000a40:	701a      	strb	r2, [r3, #0]
	ThisReading &= DEBOUNCE_WRAP; // This will cause the value of ThisReading to ngo back to zero when the value is incremented passed
 8000a42:	4b06      	ldr	r3, [pc, #24]	@ (8000a5c <UtilDebounceReadAndDebounceInputs+0xfc>)
 8000a44:	781b      	ldrb	r3, [r3, #0]
 8000a46:	220f      	movs	r2, #15
 8000a48:	4013      	ands	r3, r2
 8000a4a:	b2da      	uxtb	r2, r3
 8000a4c:	4b03      	ldr	r3, [pc, #12]	@ (8000a5c <UtilDebounceReadAndDebounceInputs+0xfc>)
 8000a4e:	701a      	strb	r2, [r3, #0]
									// the value of DEBOUNCE_WRAP.
}
 8000a50:	46c0      	nop			@ (mov r8, r8)
 8000a52:	46bd      	mov	sp, r7
 8000a54:	b002      	add	sp, #8
 8000a56:	bdb0      	pop	{r4, r5, r7, pc}
 8000a58:	08007db0 	.word	0x08007db0
 8000a5c:	200001fc 	.word	0x200001fc
 8000a60:	2000016c 	.word	0x2000016c
 8000a64:	200001ec 	.word	0x200001ec

08000a68 <UtilDebounceCheckPinState>:

// This function will return true if the specified pins state matches the indicated state.
bool UtilDebounceCheckPinState(enum pin_id pinId,bool state2BeChecked)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b084      	sub	sp, #16
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	0002      	movs	r2, r0
 8000a70:	1dfb      	adds	r3, r7, #7
 8000a72:	701a      	strb	r2, [r3, #0]
 8000a74:	1dbb      	adds	r3, r7, #6
 8000a76:	1c0a      	adds	r2, r1, #0
 8000a78:	701a      	strb	r2, [r3, #0]
	bool retVal = false;
 8000a7a:	230f      	movs	r3, #15
 8000a7c:	18fb      	adds	r3, r7, r3
 8000a7e:	2200      	movs	r2, #0
 8000a80:	701a      	strb	r2, [r3, #0]
	uint8_t thisPort;

	// Find this pins port in the Ports2Debounce array
	for (thisPort = 0;NUM_PORT_2_DEBOUNCE > thisPort; thisPort++)
 8000a82:	230e      	movs	r3, #14
 8000a84:	18fb      	adds	r3, r7, r3
 8000a86:	2200      	movs	r2, #0
 8000a88:	701a      	strb	r2, [r3, #0]
 8000a8a:	e011      	b.n	8000ab0 <UtilDebounceCheckPinState+0x48>
	{
		if (Ports2Debounce[thisPort] == port_defs[pinId])
 8000a8c:	200e      	movs	r0, #14
 8000a8e:	183b      	adds	r3, r7, r0
 8000a90:	781a      	ldrb	r2, [r3, #0]
 8000a92:	4b2e      	ldr	r3, [pc, #184]	@ (8000b4c <UtilDebounceCheckPinState+0xe4>)
 8000a94:	0092      	lsls	r2, r2, #2
 8000a96:	58d2      	ldr	r2, [r2, r3]
 8000a98:	1dfb      	adds	r3, r7, #7
 8000a9a:	7819      	ldrb	r1, [r3, #0]
 8000a9c:	4b2c      	ldr	r3, [pc, #176]	@ (8000b50 <UtilDebounceCheckPinState+0xe8>)
 8000a9e:	0089      	lsls	r1, r1, #2
 8000aa0:	58cb      	ldr	r3, [r1, r3]
 8000aa2:	429a      	cmp	r2, r3
 8000aa4:	d00a      	beq.n	8000abc <UtilDebounceCheckPinState+0x54>
	for (thisPort = 0;NUM_PORT_2_DEBOUNCE > thisPort; thisPort++)
 8000aa6:	183b      	adds	r3, r7, r0
 8000aa8:	781a      	ldrb	r2, [r3, #0]
 8000aaa:	183b      	adds	r3, r7, r0
 8000aac:	3201      	adds	r2, #1
 8000aae:	701a      	strb	r2, [r3, #0]
 8000ab0:	230e      	movs	r3, #14
 8000ab2:	18fb      	adds	r3, r7, r3
 8000ab4:	781b      	ldrb	r3, [r3, #0]
 8000ab6:	2b01      	cmp	r3, #1
 8000ab8:	d9e8      	bls.n	8000a8c <UtilDebounceCheckPinState+0x24>
 8000aba:	e000      	b.n	8000abe <UtilDebounceCheckPinState+0x56>
		{
			// We found the port. We need to stop now.
			break;
 8000abc:	46c0      	nop			@ (mov r8, r8)
		}
	}

	if (NUM_PORT_2_DEBOUNCE <= thisPort)
 8000abe:	230e      	movs	r3, #14
 8000ac0:	18fb      	adds	r3, r7, r3
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	2b01      	cmp	r3, #1
 8000ac6:	d901      	bls.n	8000acc <UtilDebounceCheckPinState+0x64>
	{
		// We did not find this pins port in the Ports2Debounce array
#if USE_RTT_FOR_DEBUGGING && DEBUG_DEBOUNCE // Note that both of these should be #defined to 1 in periphdefs.h.
		debug_rtt_printf("Pin id %i points to a port that is not in the Ports2Debounce array\r\n",pinId);
#endif
		while(1);
 8000ac8:	46c0      	nop			@ (mov r8, r8)
 8000aca:	e7fd      	b.n	8000ac8 <UtilDebounceCheckPinState+0x60>
	}
	else
	{
		if (true == state2BeChecked)
 8000acc:	1dbb      	adds	r3, r7, #6
 8000ace:	781b      	ldrb	r3, [r3, #0]
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d01f      	beq.n	8000b14 <UtilDebounceCheckPinState+0xac>
		{
			// Check for a one on the specified pins bit.
			if((DebouncedReadings[thisPort][1] & pin_defs[pinId].Pin) == pin_defs[pinId].Pin)
 8000ad4:	230e      	movs	r3, #14
 8000ad6:	18fb      	adds	r3, r7, r3
 8000ad8:	781b      	ldrb	r3, [r3, #0]
 8000ada:	4a1e      	ldr	r2, [pc, #120]	@ (8000b54 <UtilDebounceCheckPinState+0xec>)
 8000adc:	00db      	lsls	r3, r3, #3
 8000ade:	18d3      	adds	r3, r2, r3
 8000ae0:	3304      	adds	r3, #4
 8000ae2:	6819      	ldr	r1, [r3, #0]
 8000ae4:	1dfb      	adds	r3, r7, #7
 8000ae6:	781a      	ldrb	r2, [r3, #0]
 8000ae8:	481b      	ldr	r0, [pc, #108]	@ (8000b58 <UtilDebounceCheckPinState+0xf0>)
 8000aea:	0013      	movs	r3, r2
 8000aec:	009b      	lsls	r3, r3, #2
 8000aee:	189b      	adds	r3, r3, r2
 8000af0:	009b      	lsls	r3, r3, #2
 8000af2:	581b      	ldr	r3, [r3, r0]
 8000af4:	4019      	ands	r1, r3
 8000af6:	1dfb      	adds	r3, r7, #7
 8000af8:	781a      	ldrb	r2, [r3, #0]
 8000afa:	4817      	ldr	r0, [pc, #92]	@ (8000b58 <UtilDebounceCheckPinState+0xf0>)
 8000afc:	0013      	movs	r3, r2
 8000afe:	009b      	lsls	r3, r3, #2
 8000b00:	189b      	adds	r3, r3, r2
 8000b02:	009b      	lsls	r3, r3, #2
 8000b04:	581b      	ldr	r3, [r3, r0]
 8000b06:	4299      	cmp	r1, r3
 8000b08:	d118      	bne.n	8000b3c <UtilDebounceCheckPinState+0xd4>
			{
				// This pins bit was set to one in all members of the PortReading array so return true:
				retVal = true;
 8000b0a:	230f      	movs	r3, #15
 8000b0c:	18fb      	adds	r3, r7, r3
 8000b0e:	2201      	movs	r2, #1
 8000b10:	701a      	strb	r2, [r3, #0]
 8000b12:	e013      	b.n	8000b3c <UtilDebounceCheckPinState+0xd4>
			}
		}
		else
		{
			// Check for a zero on the specified pins bit.
			if((DebouncedReadings[thisPort][0] & pin_defs[pinId].Pin) == 0)
 8000b14:	230e      	movs	r3, #14
 8000b16:	18fb      	adds	r3, r7, r3
 8000b18:	781a      	ldrb	r2, [r3, #0]
 8000b1a:	4b0e      	ldr	r3, [pc, #56]	@ (8000b54 <UtilDebounceCheckPinState+0xec>)
 8000b1c:	00d2      	lsls	r2, r2, #3
 8000b1e:	58d1      	ldr	r1, [r2, r3]
 8000b20:	1dfb      	adds	r3, r7, #7
 8000b22:	781a      	ldrb	r2, [r3, #0]
 8000b24:	480c      	ldr	r0, [pc, #48]	@ (8000b58 <UtilDebounceCheckPinState+0xf0>)
 8000b26:	0013      	movs	r3, r2
 8000b28:	009b      	lsls	r3, r3, #2
 8000b2a:	189b      	adds	r3, r3, r2
 8000b2c:	009b      	lsls	r3, r3, #2
 8000b2e:	581b      	ldr	r3, [r3, r0]
 8000b30:	400b      	ands	r3, r1
 8000b32:	d103      	bne.n	8000b3c <UtilDebounceCheckPinState+0xd4>
			{
				// This pins bit was set to zero in all members of the PortReading array so return true:
				retVal = true;
 8000b34:	230f      	movs	r3, #15
 8000b36:	18fb      	adds	r3, r7, r3
 8000b38:	2201      	movs	r2, #1
 8000b3a:	701a      	strb	r2, [r3, #0]
			}
		}
	}

	return retVal;
 8000b3c:	230f      	movs	r3, #15
 8000b3e:	18fb      	adds	r3, r7, r3
 8000b40:	781b      	ldrb	r3, [r3, #0]
}
 8000b42:	0018      	movs	r0, r3
 8000b44:	46bd      	mov	sp, r7
 8000b46:	b004      	add	sp, #16
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	46c0      	nop			@ (mov r8, r8)
 8000b4c:	08007db0 	.word	0x08007db0
 8000b50:	08007fbc 	.word	0x08007fbc
 8000b54:	200001ec 	.word	0x200001ec
 8000b58:	08007ea4 	.word	0x08007ea4

08000b5c <GetVBoostVboostPwmDutyCyclePctFromFlash>:
#include "VboostHandler.h"

static uint16_t VboostPwmDutyCyclePct = 50;

bool GetVBoostVboostPwmDutyCyclePctFromFlash(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
	// TODO: Write GetVBoostVboostPwmDutyCyclePctFromFlash()
	return false;
 8000b60:	2300      	movs	r3, #0
}
 8000b62:	0018      	movs	r0, r3
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}

08000b68 <GetVboostPwmDutyCyclePct>:

uint16_t GetVboostPwmDutyCyclePct(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
	return VboostPwmDutyCyclePct;
 8000b6c:	4b02      	ldr	r3, [pc, #8]	@ (8000b78 <GetVboostPwmDutyCyclePct+0x10>)
 8000b6e:	881b      	ldrh	r3, [r3, #0]
}
 8000b70:	0018      	movs	r0, r3
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	46c0      	nop			@ (mov r8, r8)
 8000b78:	20000016 	.word	0x20000016

08000b7c <VboostStartPWM>:

void VboostStartPWM(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
	HAL_TIMEx_PWMN_Start(&htim15, TIM_CHANNEL_1);
 8000b80:	4b03      	ldr	r3, [pc, #12]	@ (8000b90 <VboostStartPWM+0x14>)
 8000b82:	2100      	movs	r1, #0
 8000b84:	0018      	movs	r0, r3
 8000b86:	f004 f99b 	bl	8004ec0 <HAL_TIMEx_PWMN_Start>
}
 8000b8a:	46c0      	nop			@ (mov r8, r8)
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	2000040c 	.word	0x2000040c

08000b94 <VboostStopPWM>:

void VboostStopPWM(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
	HAL_TIMEx_PWMN_Stop(&htim15, TIM_CHANNEL_1);
 8000b98:	4b03      	ldr	r3, [pc, #12]	@ (8000ba8 <VboostStopPWM+0x14>)
 8000b9a:	2100      	movs	r1, #0
 8000b9c:	0018      	movs	r0, r3
 8000b9e:	f004 fa2d 	bl	8004ffc <HAL_TIMEx_PWMN_Stop>
}
 8000ba2:	46c0      	nop			@ (mov r8, r8)
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	2000040c 	.word	0x2000040c

08000bac <WptControllerInit>:
*
* return values: None
*
* ****************************************************************/
void WptControllerInit(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
	// Get the Wireless Power Transfer percent duty cycle from flash
	// TODO: setup WPT duty cycle storage and retrieval to/from flash.


}
 8000bb0:	46c0      	nop			@ (mov r8, r8)
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
	...

08000bb8 <fcul_read>:
 *  @param[in] uint8_t *value
 *  @param[in] size_t value_size
 *  @return size_t
 */
size_t fcul_read(_tFlash_Key key, uint8_t *value, size_t value_size)
{
 8000bb8:	b590      	push	{r4, r7, lr}
 8000bba:	b085      	sub	sp, #20
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	60b9      	str	r1, [r7, #8]
 8000bc0:	607a      	str	r2, [r7, #4]
 8000bc2:	240f      	movs	r4, #15
 8000bc4:	193b      	adds	r3, r7, r4
 8000bc6:	1c02      	adds	r2, r0, #0
 8000bc8:	701a      	strb	r2, [r3, #0]
	if( fcul_is_ready() )
 8000bca:	f000 f811 	bl	8000bf0 <fcul_is_ready>
 8000bce:	1e03      	subs	r3, r0, #0
 8000bd0:	d007      	beq.n	8000be2 <fcul_read+0x2a>
	{
		return flash_controller_read(&fc, (uint8_t*)&key, value, value_size);
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	68ba      	ldr	r2, [r7, #8]
 8000bd6:	1939      	adds	r1, r7, r4
 8000bd8:	4804      	ldr	r0, [pc, #16]	@ (8000bec <fcul_read+0x34>)
 8000bda:	f005 fff2 	bl	8006bc2 <flash_controller_read>
 8000bde:	0003      	movs	r3, r0
 8000be0:	e000      	b.n	8000be4 <fcul_read+0x2c>
	}
	return FLASH_KEY_NOT_FOUND;
 8000be2:	2300      	movs	r3, #0
}
 8000be4:	0018      	movs	r0, r3
 8000be6:	46bd      	mov	sp, r7
 8000be8:	b005      	add	sp, #20
 8000bea:	bd90      	pop	{r4, r7, pc}
 8000bec:	20000200 	.word	0x20000200

08000bf0 <fcul_is_ready>:
 *  @details
 *  @param[in] void
 *  @return bool
 */
bool fcul_is_ready( void )
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	af00      	add	r7, sp, #0
	return (flash_controller_initialized > 0);
 8000bf4:	4b03      	ldr	r3, [pc, #12]	@ (8000c04 <fcul_is_ready+0x14>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	1e5a      	subs	r2, r3, #1
 8000bfa:	4193      	sbcs	r3, r2
 8000bfc:	b2db      	uxtb	r3, r3
}
 8000bfe:	0018      	movs	r0, r3
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	2000023c 	.word	0x2000023c

08000c08 <get_IR4_info>:
static volatile uint32_t block_lp_for_IR_tmr = 0;
static volatile uint32_t IR_wait_for_rtl_active = false;


static void get_IR4_info(IR4_LockStatus_e *ir4_lockState, IR4_DeviceState *ir4_status)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b082      	sub	sp, #8
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
 8000c10:	6039      	str	r1, [r7, #0]
    *ir4_lockState = IR4_LOCK_UNLOCK_SELF_LATCH;
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	2211      	movs	r2, #17
 8000c16:	701a      	strb	r2, [r3, #0]
    *ir4_status = IR4_DeviceOk;
 8000c18:	683b      	ldr	r3, [r7, #0]
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	701a      	strb	r2, [r3, #0]
}
 8000c1e:	46c0      	nop			@ (mov r8, r8)
 8000c20:	46bd      	mov	sp, r7
 8000c22:	b002      	add	sp, #8
 8000c24:	bd80      	pop	{r7, pc}
	...

08000c28 <irkey_gl_init>:
  // TODO: add in for erasing all encryption keys except for the factory keys.
  return true;
}

void irkey_gl_init(uint8_t key_uart)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b082      	sub	sp, #8
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	0002      	movs	r2, r0
 8000c30:	1dfb      	adds	r3, r7, #7
 8000c32:	701a      	strb	r2, [r3, #0]
	/* Register a callback for the IR key blocking delay */
	uart_defs[key_uart].uart_hal.blocking_delay = irKey_blocking_delay;
 8000c34:	1dfb      	adds	r3, r7, #7
 8000c36:	781a      	ldrb	r2, [r3, #0]
 8000c38:	4930      	ldr	r1, [pc, #192]	@ (8000cfc <irkey_gl_init+0xd4>)
 8000c3a:	0013      	movs	r3, r2
 8000c3c:	005b      	lsls	r3, r3, #1
 8000c3e:	189b      	adds	r3, r3, r2
 8000c40:	00db      	lsls	r3, r3, #3
 8000c42:	18cb      	adds	r3, r1, r3
 8000c44:	3314      	adds	r3, #20
 8000c46:	4a2e      	ldr	r2, [pc, #184]	@ (8000d00 <irkey_gl_init+0xd8>)
 8000c48:	601a      	str	r2, [r3, #0]

	/* initialize the UART driver */
	//k_uart = uart_driver_init(uart_defs[key_uart].uart_bus_num, &(uart_defs[key_uart].uart_hal), rx_buf, RX_BUF_SIZE, tx_buf, TX_BUF_SIZE);

	uart_driver_init_this_uart(key_uart);
 8000c4a:	1dfb      	adds	r3, r7, #7
 8000c4c:	781b      	ldrb	r3, [r3, #0]
 8000c4e:	0018      	movs	r0, r3
 8000c50:	f005 ffd4 	bl	8006bfc <uart_driver_init_this_uart>

    hal_uart_disable_tx(  &uart_defs[key_uart].uart_hal );
 8000c54:	1dfb      	adds	r3, r7, #7
 8000c56:	781a      	ldrb	r2, [r3, #0]
 8000c58:	0013      	movs	r3, r2
 8000c5a:	005b      	lsls	r3, r3, #1
 8000c5c:	189b      	adds	r3, r3, r2
 8000c5e:	00db      	lsls	r3, r3, #3
 8000c60:	4a26      	ldr	r2, [pc, #152]	@ (8000cfc <irkey_gl_init+0xd4>)
 8000c62:	189b      	adds	r3, r3, r2
 8000c64:	0018      	movs	r0, r3
 8000c66:	f006 fed5 	bl	8007a14 <hal_uart_disable_tx>
    hal_uart_enable_rx( &uart_defs[key_uart].uart_hal );
 8000c6a:	1dfb      	adds	r3, r7, #7
 8000c6c:	781a      	ldrb	r2, [r3, #0]
 8000c6e:	0013      	movs	r3, r2
 8000c70:	005b      	lsls	r3, r3, #1
 8000c72:	189b      	adds	r3, r3, r2
 8000c74:	00db      	lsls	r3, r3, #3
 8000c76:	4a21      	ldr	r2, [pc, #132]	@ (8000cfc <irkey_gl_init+0xd4>)
 8000c78:	189b      	adds	r3, r3, r2
 8000c7a:	0018      	movs	r0, r3
 8000c7c:	f006 fee3 	bl	8007a46 <hal_uart_enable_rx>
	//hal_gpio_set_output(RX_EN, true);

	if( fcul_read(FLASH_KEY_SDC, sdc_ram_copy, SZ_OF_IR3_SDC) == FLASH_KEY_NOT_FOUND)
 8000c80:	4b20      	ldr	r3, [pc, #128]	@ (8000d04 <irkey_gl_init+0xdc>)
 8000c82:	2204      	movs	r2, #4
 8000c84:	0019      	movs	r1, r3
 8000c86:	2002      	movs	r0, #2
 8000c88:	f7ff ff96 	bl	8000bb8 <fcul_read>
 8000c8c:	1e03      	subs	r3, r0, #0
 8000c8e:	d105      	bne.n	8000c9c <irkey_gl_init+0x74>
	{
		memset( sdc_ram_copy, 0, SZ_OF_IR3_SDC);
 8000c90:	4b1c      	ldr	r3, [pc, #112]	@ (8000d04 <irkey_gl_init+0xdc>)
 8000c92:	2204      	movs	r2, #4
 8000c94:	2100      	movs	r1, #0
 8000c96:	0018      	movs	r0, r3
 8000c98:	f007 f854 	bl	8007d44 <memset>

	/*
	 * TODO: (JLT) Remove (by macro definition) when NFC is working
	 */
#if 1
	if( fcul_read(FLASH_KEY_SERIAL_NUMBER, our_serial_ram_copy, DEVICE_SN_BYTES) == FLASH_KEY_NOT_FOUND)
 8000c9c:	4b1a      	ldr	r3, [pc, #104]	@ (8000d08 <irkey_gl_init+0xe0>)
 8000c9e:	2208      	movs	r2, #8
 8000ca0:	0019      	movs	r1, r3
 8000ca2:	2001      	movs	r0, #1
 8000ca4:	f7ff ff88 	bl	8000bb8 <fcul_read>
 8000ca8:	1e03      	subs	r3, r0, #0
 8000caa:	d10a      	bne.n	8000cc2 <irkey_gl_init+0x9a>
	{
		memset( our_serial_ram_copy, 0, DEVICE_SN_BYTES);
 8000cac:	4b16      	ldr	r3, [pc, #88]	@ (8000d08 <irkey_gl_init+0xe0>)
 8000cae:	2208      	movs	r2, #8
 8000cb0:	2100      	movs	r1, #0
 8000cb2:	0018      	movs	r0, r3
 8000cb4:	f007 f846 	bl	8007d44 <memset>

		/* there is no good way to handle this condition but, at this point, this is a true statement */
		ir_comm_ctx.is_my_sn_blank = true;
 8000cb8:	4b14      	ldr	r3, [pc, #80]	@ (8000d0c <irkey_gl_init+0xe4>)
 8000cba:	222e      	movs	r2, #46	@ 0x2e
 8000cbc:	2101      	movs	r1, #1
 8000cbe:	5499      	strb	r1, [r3, r2]
 8000cc0:	e011      	b.n	8000ce6 <irkey_gl_init+0xbe>
	}
	else if (0 == memcmp(our_serial_ram_copy, blanks.sn, DEVICE_SN_BYTES))
 8000cc2:	4913      	ldr	r1, [pc, #76]	@ (8000d10 <irkey_gl_init+0xe8>)
 8000cc4:	4b10      	ldr	r3, [pc, #64]	@ (8000d08 <irkey_gl_init+0xe0>)
 8000cc6:	2208      	movs	r2, #8
 8000cc8:	0018      	movs	r0, r3
 8000cca:	f007 f82d 	bl	8007d28 <memcmp>
 8000cce:	1e03      	subs	r3, r0, #0
 8000cd0:	d104      	bne.n	8000cdc <irkey_gl_init+0xb4>
	{
		ir_comm_ctx.is_my_sn_blank = true;
 8000cd2:	4b0e      	ldr	r3, [pc, #56]	@ (8000d0c <irkey_gl_init+0xe4>)
 8000cd4:	222e      	movs	r2, #46	@ 0x2e
 8000cd6:	2101      	movs	r1, #1
 8000cd8:	5499      	strb	r1, [r3, r2]
 8000cda:	e004      	b.n	8000ce6 <irkey_gl_init+0xbe>
	}
	else
	{
		memcpy(ir_comm_ctx.my_sn, our_serial_ram_copy, DEVICE_SN_BYTES);
 8000cdc:	4b0b      	ldr	r3, [pc, #44]	@ (8000d0c <irkey_gl_init+0xe4>)
 8000cde:	4a0a      	ldr	r2, [pc, #40]	@ (8000d08 <irkey_gl_init+0xe0>)
 8000ce0:	3308      	adds	r3, #8
 8000ce2:	ca03      	ldmia	r2!, {r0, r1}
 8000ce4:	c303      	stmia	r3!, {r0, r1}
			ir_comm_ctx.my_sn[6],
			ir_comm_ctx.my_sn[7]);
#endif
#endif

	ir_mode_ram_copy = IR4_NON_LIVE_ACCESS_MODE;
 8000ce6:	4b0b      	ldr	r3, [pc, #44]	@ (8000d14 <irkey_gl_init+0xec>)
 8000ce8:	2206      	movs	r2, #6
 8000cea:	701a      	strb	r2, [r3, #0]
	ir_comm_ctx.ir_mode = IR4_NON_LIVE_ACCESS_MODE;
 8000cec:	4b07      	ldr	r3, [pc, #28]	@ (8000d0c <irkey_gl_init+0xe4>)
 8000cee:	2206      	movs	r2, #6
 8000cf0:	709a      	strb	r2, [r3, #2]

#if USE_RTT_FOR_DEBUGGING && DEBUG_IRKEY_GLUE
	debug_rtt_printf("%s ir_mode_ram_copy %d\r\n", __FUNCTION__, ir_mode_ram_copy);
#endif
}
 8000cf2:	46c0      	nop			@ (mov r8, r8)
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	b002      	add	sp, #8
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	46c0      	nop			@ (mov r8, r8)
 8000cfc:	20000104 	.word	0x20000104
 8000d00:	08000d19 	.word	0x08000d19
 8000d04:	20000244 	.word	0x20000244
 8000d08:	20000248 	.word	0x20000248
 8000d0c:	2000001c 	.word	0x2000001c
 8000d10:	08007db8 	.word	0x08007db8
 8000d14:	20000018 	.word	0x20000018

08000d18 <irKey_blocking_delay>:
 *  @details 	Blocking delay after transmission complete. invue_ir1_ir2.h comments explain why this is needed
 *  @param[in] void
 *  @return void
 */
static void irKey_blocking_delay(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	af00      	add	r7, sp, #0
	hal_uart_disable_tx(k_uart->uart_hal);
 8000d1c:	4b05      	ldr	r3, [pc, #20]	@ (8000d34 <irKey_blocking_delay+0x1c>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	0018      	movs	r0, r3
 8000d24:	f006 fe76 	bl	8007a14 <hal_uart_disable_tx>
	hal_timer_blocking_delay_for_152us();
 8000d28:	f006 fdda 	bl	80078e0 <hal_timer_blocking_delay_for_152us>
}
 8000d2c:	46c0      	nop			@ (mov r8, r8)
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	46c0      	nop			@ (mov r8, r8)
 8000d34:	20000240 	.word	0x20000240

08000d38 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b084      	sub	sp, #16
 8000d3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d3e:	1d3b      	adds	r3, r7, #4
 8000d40:	0018      	movs	r0, r3
 8000d42:	230c      	movs	r3, #12
 8000d44:	001a      	movs	r2, r3
 8000d46:	2100      	movs	r1, #0
 8000d48:	f006 fffc 	bl	8007d44 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000d4c:	4b2d      	ldr	r3, [pc, #180]	@ (8000e04 <MX_ADC1_Init+0xcc>)
 8000d4e:	4a2e      	ldr	r2, [pc, #184]	@ (8000e08 <MX_ADC1_Init+0xd0>)
 8000d50:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000d52:	4b2c      	ldr	r3, [pc, #176]	@ (8000e04 <MX_ADC1_Init+0xcc>)
 8000d54:	2280      	movs	r2, #128	@ 0x80
 8000d56:	05d2      	lsls	r2, r2, #23
 8000d58:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d5a:	4b2a      	ldr	r3, [pc, #168]	@ (8000e04 <MX_ADC1_Init+0xcc>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d60:	4b28      	ldr	r3, [pc, #160]	@ (8000e04 <MX_ADC1_Init+0xcc>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d66:	4b27      	ldr	r3, [pc, #156]	@ (8000e04 <MX_ADC1_Init+0xcc>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d6c:	4b25      	ldr	r3, [pc, #148]	@ (8000e04 <MX_ADC1_Init+0xcc>)
 8000d6e:	2204      	movs	r2, #4
 8000d70:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000d72:	4b24      	ldr	r3, [pc, #144]	@ (8000e04 <MX_ADC1_Init+0xcc>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8000d78:	4b22      	ldr	r3, [pc, #136]	@ (8000e04 <MX_ADC1_Init+0xcc>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000d7e:	4b21      	ldr	r3, [pc, #132]	@ (8000e04 <MX_ADC1_Init+0xcc>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8000d84:	4b1f      	ldr	r3, [pc, #124]	@ (8000e04 <MX_ADC1_Init+0xcc>)
 8000d86:	2201      	movs	r2, #1
 8000d88:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d8a:	4b1e      	ldr	r3, [pc, #120]	@ (8000e04 <MX_ADC1_Init+0xcc>)
 8000d8c:	2220      	movs	r2, #32
 8000d8e:	2100      	movs	r1, #0
 8000d90:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d92:	4b1c      	ldr	r3, [pc, #112]	@ (8000e04 <MX_ADC1_Init+0xcc>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d98:	4b1a      	ldr	r3, [pc, #104]	@ (8000e04 <MX_ADC1_Init+0xcc>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000d9e:	4b19      	ldr	r3, [pc, #100]	@ (8000e04 <MX_ADC1_Init+0xcc>)
 8000da0:	222c      	movs	r2, #44	@ 0x2c
 8000da2:	2100      	movs	r1, #0
 8000da4:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000da6:	4b17      	ldr	r3, [pc, #92]	@ (8000e04 <MX_ADC1_Init+0xcc>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8000dac:	4b15      	ldr	r3, [pc, #84]	@ (8000e04 <MX_ADC1_Init+0xcc>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8000db2:	4b14      	ldr	r3, [pc, #80]	@ (8000e04 <MX_ADC1_Init+0xcc>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8000db8:	4b12      	ldr	r3, [pc, #72]	@ (8000e04 <MX_ADC1_Init+0xcc>)
 8000dba:	223c      	movs	r2, #60	@ 0x3c
 8000dbc:	2100      	movs	r1, #0
 8000dbe:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000dc0:	4b10      	ldr	r3, [pc, #64]	@ (8000e04 <MX_ADC1_Init+0xcc>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000dc6:	4b0f      	ldr	r3, [pc, #60]	@ (8000e04 <MX_ADC1_Init+0xcc>)
 8000dc8:	0018      	movs	r0, r3
 8000dca:	f001 fa31 	bl	8002230 <HAL_ADC_Init>
 8000dce:	1e03      	subs	r3, r0, #0
 8000dd0:	d001      	beq.n	8000dd6 <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 8000dd2:	f000 fb26 	bl	8001422 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000dd6:	1d3b      	adds	r3, r7, #4
 8000dd8:	4a0c      	ldr	r2, [pc, #48]	@ (8000e0c <MX_ADC1_Init+0xd4>)
 8000dda:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ddc:	1d3b      	adds	r3, r7, #4
 8000dde:	2200      	movs	r2, #0
 8000de0:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8000de2:	1d3b      	adds	r3, r7, #4
 8000de4:	2200      	movs	r2, #0
 8000de6:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000de8:	1d3a      	adds	r2, r7, #4
 8000dea:	4b06      	ldr	r3, [pc, #24]	@ (8000e04 <MX_ADC1_Init+0xcc>)
 8000dec:	0011      	movs	r1, r2
 8000dee:	0018      	movs	r0, r3
 8000df0:	f001 fcf6 	bl	80027e0 <HAL_ADC_ConfigChannel>
 8000df4:	1e03      	subs	r3, r0, #0
 8000df6:	d001      	beq.n	8000dfc <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 8000df8:	f000 fb13 	bl	8001422 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000dfc:	46c0      	nop			@ (mov r8, r8)
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	b004      	add	sp, #16
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	20000250 	.word	0x20000250
 8000e08:	40012400 	.word	0x40012400
 8000e0c:	28000400 	.word	0x28000400

08000e10 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000e10:	b590      	push	{r4, r7, lr}
 8000e12:	b08b      	sub	sp, #44	@ 0x2c
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e18:	2414      	movs	r4, #20
 8000e1a:	193b      	adds	r3, r7, r4
 8000e1c:	0018      	movs	r0, r3
 8000e1e:	2314      	movs	r3, #20
 8000e20:	001a      	movs	r2, r3
 8000e22:	2100      	movs	r1, #0
 8000e24:	f006 ff8e 	bl	8007d44 <memset>
  if(adcHandle->Instance==ADC1)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	4a29      	ldr	r2, [pc, #164]	@ (8000ed4 <HAL_ADC_MspInit+0xc4>)
 8000e2e:	4293      	cmp	r3, r2
 8000e30:	d14c      	bne.n	8000ecc <HAL_ADC_MspInit+0xbc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000e32:	4b29      	ldr	r3, [pc, #164]	@ (8000ed8 <HAL_ADC_MspInit+0xc8>)
 8000e34:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000e36:	4b28      	ldr	r3, [pc, #160]	@ (8000ed8 <HAL_ADC_MspInit+0xc8>)
 8000e38:	2180      	movs	r1, #128	@ 0x80
 8000e3a:	0349      	lsls	r1, r1, #13
 8000e3c:	430a      	orrs	r2, r1
 8000e3e:	641a      	str	r2, [r3, #64]	@ 0x40
 8000e40:	4b25      	ldr	r3, [pc, #148]	@ (8000ed8 <HAL_ADC_MspInit+0xc8>)
 8000e42:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000e44:	2380      	movs	r3, #128	@ 0x80
 8000e46:	035b      	lsls	r3, r3, #13
 8000e48:	4013      	ands	r3, r2
 8000e4a:	613b      	str	r3, [r7, #16]
 8000e4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e4e:	4b22      	ldr	r3, [pc, #136]	@ (8000ed8 <HAL_ADC_MspInit+0xc8>)
 8000e50:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000e52:	4b21      	ldr	r3, [pc, #132]	@ (8000ed8 <HAL_ADC_MspInit+0xc8>)
 8000e54:	2101      	movs	r1, #1
 8000e56:	430a      	orrs	r2, r1
 8000e58:	635a      	str	r2, [r3, #52]	@ 0x34
 8000e5a:	4b1f      	ldr	r3, [pc, #124]	@ (8000ed8 <HAL_ADC_MspInit+0xc8>)
 8000e5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000e5e:	2201      	movs	r2, #1
 8000e60:	4013      	ands	r3, r2
 8000e62:	60fb      	str	r3, [r7, #12]
 8000e64:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e66:	4b1c      	ldr	r3, [pc, #112]	@ (8000ed8 <HAL_ADC_MspInit+0xc8>)
 8000e68:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000e6a:	4b1b      	ldr	r3, [pc, #108]	@ (8000ed8 <HAL_ADC_MspInit+0xc8>)
 8000e6c:	2102      	movs	r1, #2
 8000e6e:	430a      	orrs	r2, r1
 8000e70:	635a      	str	r2, [r3, #52]	@ 0x34
 8000e72:	4b19      	ldr	r3, [pc, #100]	@ (8000ed8 <HAL_ADC_MspInit+0xc8>)
 8000e74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000e76:	2202      	movs	r2, #2
 8000e78:	4013      	ands	r3, r2
 8000e7a:	60bb      	str	r3, [r7, #8]
 8000e7c:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN0
    PA7     ------> ADC1_IN7
    PB2     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = VBOOST_FDBK_Pin|VIN_MONITOR_Pin;
 8000e7e:	193b      	adds	r3, r7, r4
 8000e80:	2281      	movs	r2, #129	@ 0x81
 8000e82:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e84:	193b      	adds	r3, r7, r4
 8000e86:	2203      	movs	r2, #3
 8000e88:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8a:	193b      	adds	r3, r7, r4
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e90:	193a      	adds	r2, r7, r4
 8000e92:	23a0      	movs	r3, #160	@ 0xa0
 8000e94:	05db      	lsls	r3, r3, #23
 8000e96:	0011      	movs	r1, r2
 8000e98:	0018      	movs	r0, r3
 8000e9a:	f002 f843 	bl	8002f24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = NFC_VOUT_SENSE_Pin;
 8000e9e:	193b      	adds	r3, r7, r4
 8000ea0:	2204      	movs	r2, #4
 8000ea2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ea4:	193b      	adds	r3, r7, r4
 8000ea6:	2203      	movs	r2, #3
 8000ea8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eaa:	193b      	adds	r3, r7, r4
 8000eac:	2200      	movs	r2, #0
 8000eae:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(NFC_VOUT_SENSE_GPIO_Port, &GPIO_InitStruct);
 8000eb0:	193b      	adds	r3, r7, r4
 8000eb2:	4a0a      	ldr	r2, [pc, #40]	@ (8000edc <HAL_ADC_MspInit+0xcc>)
 8000eb4:	0019      	movs	r1, r3
 8000eb6:	0010      	movs	r0, r2
 8000eb8:	f002 f834 	bl	8002f24 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	2100      	movs	r1, #0
 8000ec0:	200c      	movs	r0, #12
 8000ec2:	f001 ff31 	bl	8002d28 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8000ec6:	200c      	movs	r0, #12
 8000ec8:	f001 ff43 	bl	8002d52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000ecc:	46c0      	nop			@ (mov r8, r8)
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	b00b      	add	sp, #44	@ 0x2c
 8000ed2:	bd90      	pop	{r4, r7, pc}
 8000ed4:	40012400 	.word	0x40012400
 8000ed8:	40021000 	.word	0x40021000
 8000edc:	50000400 	.word	0x50000400

08000ee0 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8000ee0:	b590      	push	{r4, r7, lr}
 8000ee2:	b08b      	sub	sp, #44	@ 0x2c
 8000ee4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee6:	2414      	movs	r4, #20
 8000ee8:	193b      	adds	r3, r7, r4
 8000eea:	0018      	movs	r0, r3
 8000eec:	2314      	movs	r3, #20
 8000eee:	001a      	movs	r2, r3
 8000ef0:	2100      	movs	r1, #0
 8000ef2:	f006 ff27 	bl	8007d44 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ef6:	4b6f      	ldr	r3, [pc, #444]	@ (80010b4 <MX_GPIO_Init+0x1d4>)
 8000ef8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000efa:	4b6e      	ldr	r3, [pc, #440]	@ (80010b4 <MX_GPIO_Init+0x1d4>)
 8000efc:	2104      	movs	r1, #4
 8000efe:	430a      	orrs	r2, r1
 8000f00:	635a      	str	r2, [r3, #52]	@ 0x34
 8000f02:	4b6c      	ldr	r3, [pc, #432]	@ (80010b4 <MX_GPIO_Init+0x1d4>)
 8000f04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f06:	2204      	movs	r2, #4
 8000f08:	4013      	ands	r3, r2
 8000f0a:	613b      	str	r3, [r7, #16]
 8000f0c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f0e:	4b69      	ldr	r3, [pc, #420]	@ (80010b4 <MX_GPIO_Init+0x1d4>)
 8000f10:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000f12:	4b68      	ldr	r3, [pc, #416]	@ (80010b4 <MX_GPIO_Init+0x1d4>)
 8000f14:	2120      	movs	r1, #32
 8000f16:	430a      	orrs	r2, r1
 8000f18:	635a      	str	r2, [r3, #52]	@ 0x34
 8000f1a:	4b66      	ldr	r3, [pc, #408]	@ (80010b4 <MX_GPIO_Init+0x1d4>)
 8000f1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f1e:	2220      	movs	r2, #32
 8000f20:	4013      	ands	r3, r2
 8000f22:	60fb      	str	r3, [r7, #12]
 8000f24:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f26:	4b63      	ldr	r3, [pc, #396]	@ (80010b4 <MX_GPIO_Init+0x1d4>)
 8000f28:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000f2a:	4b62      	ldr	r3, [pc, #392]	@ (80010b4 <MX_GPIO_Init+0x1d4>)
 8000f2c:	2101      	movs	r1, #1
 8000f2e:	430a      	orrs	r2, r1
 8000f30:	635a      	str	r2, [r3, #52]	@ 0x34
 8000f32:	4b60      	ldr	r3, [pc, #384]	@ (80010b4 <MX_GPIO_Init+0x1d4>)
 8000f34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f36:	2201      	movs	r2, #1
 8000f38:	4013      	ands	r3, r2
 8000f3a:	60bb      	str	r3, [r7, #8]
 8000f3c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f3e:	4b5d      	ldr	r3, [pc, #372]	@ (80010b4 <MX_GPIO_Init+0x1d4>)
 8000f40:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000f42:	4b5c      	ldr	r3, [pc, #368]	@ (80010b4 <MX_GPIO_Init+0x1d4>)
 8000f44:	2102      	movs	r1, #2
 8000f46:	430a      	orrs	r2, r1
 8000f48:	635a      	str	r2, [r3, #52]	@ 0x34
 8000f4a:	4b5a      	ldr	r3, [pc, #360]	@ (80010b4 <MX_GPIO_Init+0x1d4>)
 8000f4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f4e:	2202      	movs	r2, #2
 8000f50:	4013      	ands	r3, r2
 8000f52:	607b      	str	r3, [r7, #4]
 8000f54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f56:	4b57      	ldr	r3, [pc, #348]	@ (80010b4 <MX_GPIO_Init+0x1d4>)
 8000f58:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000f5a:	4b56      	ldr	r3, [pc, #344]	@ (80010b4 <MX_GPIO_Init+0x1d4>)
 8000f5c:	2108      	movs	r1, #8
 8000f5e:	430a      	orrs	r2, r1
 8000f60:	635a      	str	r2, [r3, #52]	@ 0x34
 8000f62:	4b54      	ldr	r3, [pc, #336]	@ (80010b4 <MX_GPIO_Init+0x1d4>)
 8000f64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f66:	2208      	movs	r2, #8
 8000f68:	4013      	ands	r3, r2
 8000f6a:	603b      	str	r3, [r7, #0]
 8000f6c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, VBOOST_ENABLE_Pin|LED_RED_Pin|LED_YELLOW_Pin|LED_GREEN_Pin
 8000f6e:	4952      	ldr	r1, [pc, #328]	@ (80010b8 <MX_GPIO_Init+0x1d8>)
 8000f70:	23a0      	movs	r3, #160	@ 0xa0
 8000f72:	05db      	lsls	r3, r3, #23
 8000f74:	2200      	movs	r2, #0
 8000f76:	0018      	movs	r0, r3
 8000f78:	f002 f938 	bl	80031ec <HAL_GPIO_WritePin>
                          |CHARGE_EN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NFC_POWER_ENABLE_GPIO_Port, NFC_POWER_ENABLE_Pin, GPIO_PIN_RESET);
 8000f7c:	4b4f      	ldr	r3, [pc, #316]	@ (80010bc <MX_GPIO_Init+0x1dc>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	2140      	movs	r1, #64	@ 0x40
 8000f82:	0018      	movs	r0, r3
 8000f84:	f002 f932 	bl	80031ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 8000f88:	193b      	adds	r3, r7, r4
 8000f8a:	2280      	movs	r2, #128	@ 0x80
 8000f8c:	0192      	lsls	r2, r2, #6
 8000f8e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f90:	193b      	adds	r3, r7, r4
 8000f92:	2200      	movs	r2, #0
 8000f94:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f96:	193b      	adds	r3, r7, r4
 8000f98:	2200      	movs	r2, #0
 8000f9a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000f9c:	193b      	adds	r3, r7, r4
 8000f9e:	4a48      	ldr	r2, [pc, #288]	@ (80010c0 <MX_GPIO_Init+0x1e0>)
 8000fa0:	0019      	movs	r1, r3
 8000fa2:	0010      	movs	r0, r2
 8000fa4:	f001 ffbe 	bl	8002f24 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 PC6 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_6|GPIO_PIN_7;
 8000fa8:	193b      	adds	r3, r7, r4
 8000faa:	4a46      	ldr	r2, [pc, #280]	@ (80010c4 <MX_GPIO_Init+0x1e4>)
 8000fac:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fae:	193b      	adds	r3, r7, r4
 8000fb0:	2203      	movs	r2, #3
 8000fb2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb4:	193b      	adds	r3, r7, r4
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fba:	193b      	adds	r3, r7, r4
 8000fbc:	4a40      	ldr	r2, [pc, #256]	@ (80010c0 <MX_GPIO_Init+0x1e0>)
 8000fbe:	0019      	movs	r1, r3
 8000fc0:	0010      	movs	r0, r2
 8000fc2:	f001 ffaf 	bl	8002f24 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000fc6:	193b      	adds	r3, r7, r4
 8000fc8:	2203      	movs	r2, #3
 8000fca:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fcc:	193b      	adds	r3, r7, r4
 8000fce:	2203      	movs	r2, #3
 8000fd0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd2:	193b      	adds	r3, r7, r4
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000fd8:	193b      	adds	r3, r7, r4
 8000fda:	4a3b      	ldr	r2, [pc, #236]	@ (80010c8 <MX_GPIO_Init+0x1e8>)
 8000fdc:	0019      	movs	r1, r3
 8000fde:	0010      	movs	r0, r2
 8000fe0:	f001 ffa0 	bl	8002f24 <HAL_GPIO_Init>

  /*Configure GPIO pins : VBOOST_ENABLE_Pin LED_RED_Pin LED_YELLOW_Pin LED_GREEN_Pin
                           CHARGE_EN_Pin */
  GPIO_InitStruct.Pin = VBOOST_ENABLE_Pin|LED_RED_Pin|LED_YELLOW_Pin|LED_GREEN_Pin
 8000fe4:	193b      	adds	r3, r7, r4
 8000fe6:	4a34      	ldr	r2, [pc, #208]	@ (80010b8 <MX_GPIO_Init+0x1d8>)
 8000fe8:	601a      	str	r2, [r3, #0]
                          |CHARGE_EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fea:	193b      	adds	r3, r7, r4
 8000fec:	2201      	movs	r2, #1
 8000fee:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff0:	193b      	adds	r3, r7, r4
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff6:	193b      	adds	r3, r7, r4
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ffc:	193a      	adds	r2, r7, r4
 8000ffe:	23a0      	movs	r3, #160	@ 0xa0
 8001000:	05db      	lsls	r3, r3, #23
 8001002:	0011      	movs	r1, r2
 8001004:	0018      	movs	r0, r3
 8001006:	f001 ff8d 	bl	8002f24 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB11 PB12 PB13
                           PB14 PB15 PB3 PB4
                           PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 800100a:	193b      	adds	r3, r7, r4
 800100c:	4a2f      	ldr	r2, [pc, #188]	@ (80010cc <MX_GPIO_Init+0x1ec>)
 800100e:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4
                          |GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001010:	193b      	adds	r3, r7, r4
 8001012:	2203      	movs	r2, #3
 8001014:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001016:	193b      	adds	r3, r7, r4
 8001018:	2200      	movs	r2, #0
 800101a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800101c:	193b      	adds	r3, r7, r4
 800101e:	4a27      	ldr	r2, [pc, #156]	@ (80010bc <MX_GPIO_Init+0x1dc>)
 8001020:	0019      	movs	r1, r3
 8001022:	0010      	movs	r0, r2
 8001024:	f001 ff7e 	bl	8002f24 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_15;
 8001028:	193b      	adds	r3, r7, r4
 800102a:	2290      	movs	r2, #144	@ 0x90
 800102c:	0212      	lsls	r2, r2, #8
 800102e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001030:	193b      	adds	r3, r7, r4
 8001032:	2203      	movs	r2, #3
 8001034:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001036:	193b      	adds	r3, r7, r4
 8001038:	2200      	movs	r2, #0
 800103a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800103c:	193a      	adds	r2, r7, r4
 800103e:	23a0      	movs	r3, #160	@ 0xa0
 8001040:	05db      	lsls	r3, r3, #23
 8001042:	0011      	movs	r1, r2
 8001044:	0018      	movs	r0, r3
 8001046:	f001 ff6d 	bl	8002f24 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD2 PD3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800104a:	193b      	adds	r3, r7, r4
 800104c:	220f      	movs	r2, #15
 800104e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001050:	193b      	adds	r3, r7, r4
 8001052:	2203      	movs	r2, #3
 8001054:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001056:	193b      	adds	r3, r7, r4
 8001058:	2200      	movs	r2, #0
 800105a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800105c:	193b      	adds	r3, r7, r4
 800105e:	4a1c      	ldr	r2, [pc, #112]	@ (80010d0 <MX_GPIO_Init+0x1f0>)
 8001060:	0019      	movs	r1, r3
 8001062:	0010      	movs	r0, r2
 8001064:	f001 ff5e 	bl	8002f24 <HAL_GPIO_Init>

  /*Configure GPIO pin : NFC_POWER_ENABLE_Pin */
  GPIO_InitStruct.Pin = NFC_POWER_ENABLE_Pin;
 8001068:	193b      	adds	r3, r7, r4
 800106a:	2240      	movs	r2, #64	@ 0x40
 800106c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800106e:	193b      	adds	r3, r7, r4
 8001070:	2201      	movs	r2, #1
 8001072:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001074:	193b      	adds	r3, r7, r4
 8001076:	2200      	movs	r2, #0
 8001078:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800107a:	193b      	adds	r3, r7, r4
 800107c:	2200      	movs	r2, #0
 800107e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(NFC_POWER_ENABLE_GPIO_Port, &GPIO_InitStruct);
 8001080:	193b      	adds	r3, r7, r4
 8001082:	4a0e      	ldr	r2, [pc, #56]	@ (80010bc <MX_GPIO_Init+0x1dc>)
 8001084:	0019      	movs	r1, r3
 8001086:	0010      	movs	r0, r2
 8001088:	f001 ff4c 	bl	8002f24 <HAL_GPIO_Init>

  /*Configure GPIO pin : NFC_FD_INT_Pin */
  GPIO_InitStruct.Pin = NFC_FD_INT_Pin;
 800108c:	0021      	movs	r1, r4
 800108e:	187b      	adds	r3, r7, r1
 8001090:	2280      	movs	r2, #128	@ 0x80
 8001092:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001094:	187b      	adds	r3, r7, r1
 8001096:	2200      	movs	r2, #0
 8001098:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109a:	187b      	adds	r3, r7, r1
 800109c:	2200      	movs	r2, #0
 800109e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(NFC_FD_INT_GPIO_Port, &GPIO_InitStruct);
 80010a0:	187b      	adds	r3, r7, r1
 80010a2:	4a06      	ldr	r2, [pc, #24]	@ (80010bc <MX_GPIO_Init+0x1dc>)
 80010a4:	0019      	movs	r1, r3
 80010a6:	0010      	movs	r0, r2
 80010a8:	f001 ff3c 	bl	8002f24 <HAL_GPIO_Init>

}
 80010ac:	46c0      	nop			@ (mov r8, r8)
 80010ae:	46bd      	mov	sp, r7
 80010b0:	b00b      	add	sp, #44	@ 0x2c
 80010b2:	bd90      	pop	{r4, r7, pc}
 80010b4:	40021000 	.word	0x40021000
 80010b8:	0000083c 	.word	0x0000083c
 80010bc:	50000400 	.word	0x50000400
 80010c0:	50000800 	.word	0x50000800
 80010c4:	0000c0c0 	.word	0x0000c0c0
 80010c8:	50001400 	.word	0x50001400
 80010cc:	0000f83a 	.word	0x0000f83a
 80010d0:	50000c00 	.word	0x50000c00

080010d4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80010d8:	4b1b      	ldr	r3, [pc, #108]	@ (8001148 <MX_I2C1_Init+0x74>)
 80010da:	4a1c      	ldr	r2, [pc, #112]	@ (800114c <MX_I2C1_Init+0x78>)
 80010dc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10906999;
 80010de:	4b1a      	ldr	r3, [pc, #104]	@ (8001148 <MX_I2C1_Init+0x74>)
 80010e0:	4a1b      	ldr	r2, [pc, #108]	@ (8001150 <MX_I2C1_Init+0x7c>)
 80010e2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80010e4:	4b18      	ldr	r3, [pc, #96]	@ (8001148 <MX_I2C1_Init+0x74>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010ea:	4b17      	ldr	r3, [pc, #92]	@ (8001148 <MX_I2C1_Init+0x74>)
 80010ec:	2201      	movs	r2, #1
 80010ee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010f0:	4b15      	ldr	r3, [pc, #84]	@ (8001148 <MX_I2C1_Init+0x74>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80010f6:	4b14      	ldr	r3, [pc, #80]	@ (8001148 <MX_I2C1_Init+0x74>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80010fc:	4b12      	ldr	r3, [pc, #72]	@ (8001148 <MX_I2C1_Init+0x74>)
 80010fe:	2200      	movs	r2, #0
 8001100:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001102:	4b11      	ldr	r3, [pc, #68]	@ (8001148 <MX_I2C1_Init+0x74>)
 8001104:	2200      	movs	r2, #0
 8001106:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001108:	4b0f      	ldr	r3, [pc, #60]	@ (8001148 <MX_I2C1_Init+0x74>)
 800110a:	2200      	movs	r2, #0
 800110c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800110e:	4b0e      	ldr	r3, [pc, #56]	@ (8001148 <MX_I2C1_Init+0x74>)
 8001110:	0018      	movs	r0, r3
 8001112:	f002 f889 	bl	8003228 <HAL_I2C_Init>
 8001116:	1e03      	subs	r3, r0, #0
 8001118:	d001      	beq.n	800111e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800111a:	f000 f982 	bl	8001422 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800111e:	4b0a      	ldr	r3, [pc, #40]	@ (8001148 <MX_I2C1_Init+0x74>)
 8001120:	2100      	movs	r1, #0
 8001122:	0018      	movs	r0, r3
 8001124:	f002 f926 	bl	8003374 <HAL_I2CEx_ConfigAnalogFilter>
 8001128:	1e03      	subs	r3, r0, #0
 800112a:	d001      	beq.n	8001130 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800112c:	f000 f979 	bl	8001422 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001130:	4b05      	ldr	r3, [pc, #20]	@ (8001148 <MX_I2C1_Init+0x74>)
 8001132:	2100      	movs	r1, #0
 8001134:	0018      	movs	r0, r3
 8001136:	f002 f969 	bl	800340c <HAL_I2CEx_ConfigDigitalFilter>
 800113a:	1e03      	subs	r3, r0, #0
 800113c:	d001      	beq.n	8001142 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800113e:	f000 f970 	bl	8001422 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001142:	46c0      	nop			@ (mov r8, r8)
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	200002b4 	.word	0x200002b4
 800114c:	40005400 	.word	0x40005400
 8001150:	10906999 	.word	0x10906999

08001154 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001154:	b590      	push	{r4, r7, lr}
 8001156:	b091      	sub	sp, #68	@ 0x44
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800115c:	232c      	movs	r3, #44	@ 0x2c
 800115e:	18fb      	adds	r3, r7, r3
 8001160:	0018      	movs	r0, r3
 8001162:	2314      	movs	r3, #20
 8001164:	001a      	movs	r2, r3
 8001166:	2100      	movs	r1, #0
 8001168:	f006 fdec 	bl	8007d44 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800116c:	2410      	movs	r4, #16
 800116e:	193b      	adds	r3, r7, r4
 8001170:	0018      	movs	r0, r3
 8001172:	231c      	movs	r3, #28
 8001174:	001a      	movs	r2, r3
 8001176:	2100      	movs	r1, #0
 8001178:	f006 fde4 	bl	8007d44 <memset>
  if(i2cHandle->Instance==I2C1)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4a22      	ldr	r2, [pc, #136]	@ (800120c <HAL_I2C_MspInit+0xb8>)
 8001182:	4293      	cmp	r3, r2
 8001184:	d13e      	bne.n	8001204 <HAL_I2C_MspInit+0xb0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001186:	193b      	adds	r3, r7, r4
 8001188:	2220      	movs	r2, #32
 800118a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800118c:	193b      	adds	r3, r7, r4
 800118e:	2200      	movs	r2, #0
 8001190:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001192:	193b      	adds	r3, r7, r4
 8001194:	0018      	movs	r0, r3
 8001196:	f002 feed 	bl	8003f74 <HAL_RCCEx_PeriphCLKConfig>
 800119a:	1e03      	subs	r3, r0, #0
 800119c:	d001      	beq.n	80011a2 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800119e:	f000 f940 	bl	8001422 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011a2:	4b1b      	ldr	r3, [pc, #108]	@ (8001210 <HAL_I2C_MspInit+0xbc>)
 80011a4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80011a6:	4b1a      	ldr	r3, [pc, #104]	@ (8001210 <HAL_I2C_MspInit+0xbc>)
 80011a8:	2102      	movs	r1, #2
 80011aa:	430a      	orrs	r2, r1
 80011ac:	635a      	str	r2, [r3, #52]	@ 0x34
 80011ae:	4b18      	ldr	r3, [pc, #96]	@ (8001210 <HAL_I2C_MspInit+0xbc>)
 80011b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80011b2:	2202      	movs	r2, #2
 80011b4:	4013      	ands	r3, r2
 80011b6:	60fb      	str	r3, [r7, #12]
 80011b8:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = NFC_I2C_SCL_Pin|NFC_I2C_SDA_Pin;
 80011ba:	212c      	movs	r1, #44	@ 0x2c
 80011bc:	187b      	adds	r3, r7, r1
 80011be:	22c0      	movs	r2, #192	@ 0xc0
 80011c0:	0092      	lsls	r2, r2, #2
 80011c2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011c4:	187b      	adds	r3, r7, r1
 80011c6:	2212      	movs	r2, #18
 80011c8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ca:	187b      	adds	r3, r7, r1
 80011cc:	2200      	movs	r2, #0
 80011ce:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d0:	187b      	adds	r3, r7, r1
 80011d2:	2200      	movs	r2, #0
 80011d4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 80011d6:	187b      	adds	r3, r7, r1
 80011d8:	2206      	movs	r2, #6
 80011da:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011dc:	187b      	adds	r3, r7, r1
 80011de:	4a0d      	ldr	r2, [pc, #52]	@ (8001214 <HAL_I2C_MspInit+0xc0>)
 80011e0:	0019      	movs	r1, r3
 80011e2:	0010      	movs	r0, r2
 80011e4:	f001 fe9e 	bl	8002f24 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80011e8:	4b09      	ldr	r3, [pc, #36]	@ (8001210 <HAL_I2C_MspInit+0xbc>)
 80011ea:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80011ec:	4b08      	ldr	r3, [pc, #32]	@ (8001210 <HAL_I2C_MspInit+0xbc>)
 80011ee:	2180      	movs	r1, #128	@ 0x80
 80011f0:	0389      	lsls	r1, r1, #14
 80011f2:	430a      	orrs	r2, r1
 80011f4:	63da      	str	r2, [r3, #60]	@ 0x3c
 80011f6:	4b06      	ldr	r3, [pc, #24]	@ (8001210 <HAL_I2C_MspInit+0xbc>)
 80011f8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80011fa:	2380      	movs	r3, #128	@ 0x80
 80011fc:	039b      	lsls	r3, r3, #14
 80011fe:	4013      	ands	r3, r2
 8001200:	60bb      	str	r3, [r7, #8]
 8001202:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001204:	46c0      	nop			@ (mov r8, r8)
 8001206:	46bd      	mov	sp, r7
 8001208:	b011      	add	sp, #68	@ 0x44
 800120a:	bd90      	pop	{r4, r7, pc}
 800120c:	40005400 	.word	0x40005400
 8001210:	40021000 	.word	0x40021000
 8001214:	50000400 	.word	0x50000400

08001218 <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 800121c:	4b0b      	ldr	r3, [pc, #44]	@ (800124c <MX_IWDG_Init+0x34>)
 800121e:	4a0c      	ldr	r2, [pc, #48]	@ (8001250 <MX_IWDG_Init+0x38>)
 8001220:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
 8001222:	4b0a      	ldr	r3, [pc, #40]	@ (800124c <MX_IWDG_Init+0x34>)
 8001224:	2200      	movs	r2, #0
 8001226:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 8001228:	4b08      	ldr	r3, [pc, #32]	@ (800124c <MX_IWDG_Init+0x34>)
 800122a:	4a0a      	ldr	r2, [pc, #40]	@ (8001254 <MX_IWDG_Init+0x3c>)
 800122c:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 4095;
 800122e:	4b07      	ldr	r3, [pc, #28]	@ (800124c <MX_IWDG_Init+0x34>)
 8001230:	4a08      	ldr	r2, [pc, #32]	@ (8001254 <MX_IWDG_Init+0x3c>)
 8001232:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8001234:	4b05      	ldr	r3, [pc, #20]	@ (800124c <MX_IWDG_Init+0x34>)
 8001236:	0018      	movs	r0, r3
 8001238:	f002 f934 	bl	80034a4 <HAL_IWDG_Init>
 800123c:	1e03      	subs	r3, r0, #0
 800123e:	d001      	beq.n	8001244 <MX_IWDG_Init+0x2c>
  {
    Error_Handler();
 8001240:	f000 f8ef 	bl	8001422 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8001244:	46c0      	nop			@ (mov r8, r8)
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	46c0      	nop			@ (mov r8, r8)
 800124c:	20000308 	.word	0x20000308
 8001250:	40003000 	.word	0x40003000
 8001254:	00000fff 	.word	0x00000fff

08001258 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b082      	sub	sp, #8
 800125c:	af00      	add	r7, sp, #0

	static bool Authorized			= false;
	static bool ValidSdcIsPresent	= false;
	static bool buttonPressed		= false;

	bool chirp = true;
 800125e:	1dfb      	adds	r3, r7, #7
 8001260:	2201      	movs	r2, #1
 8001262:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001264:	f000 fe2c 	bl	8001ec0 <HAL_Init>
 #endif

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001268:	f000 f87e 	bl	8001368 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */

  // Update the SystemCoreClock variable. Note that this function must be called any time that the
  // system clock is changed.
  SystemCoreClockUpdate();
 800126c:	f000 f93a 	bl	80014e4 <SystemCoreClockUpdate>

  hal_gpio_init();
 8001270:	f005 fe82 	bl	8006f78 <hal_gpio_init>

  MX_I2C1_Init();
 8001274:	f7ff ff2e 	bl	80010d4 <MX_I2C1_Init>

  MX_ADC1_Init();
 8001278:	f7ff fd5e 	bl	8000d38 <MX_ADC1_Init>

  // The Vboost duty cycle must be retrieved from flash before initializing the VBoost PWM timer.
  GetVBoostVboostPwmDutyCyclePctFromFlash();
 800127c:	f7ff fc6e 	bl	8000b5c <GetVBoostVboostPwmDutyCyclePctFromFlash>

  hal_timer_init();
 8001280:	f005 fef6 	bl	8007070 <hal_timer_init>



  WptControllerInit();
 8001284:	f7ff fc92 	bl	8000bac <WptControllerInit>
#if 0
    // TODO: decide what to do with these initialization function call:   
	hal_interrupts_enable();
#endif
	
	irkey_gl_init(IR_COMM_UART_INDX);
 8001288:	2000      	movs	r0, #0
 800128a:	f7ff fccd 	bl	8000c28 <irkey_gl_init>
  MX_USART3_UART_Init();
  MX_TIM6_Init();
  MX_TIM15_Init();
  /* USER CODE BEGIN 2 */
#endif
  hal_watchdog_init(); // Initialize the the watch dog handle in submod-hal_generic
 800128e:	f006 fd29 	bl	8007ce4 <hal_watchdog_init>

  // Turn on the red LED to indicate that we have power but we are not authorized.
  while (1)
  {
	  // Get the number of milliseconds since the last trip through this loop:
	  TicksinceLastLoop = hal_timer_get_ticks_since_count(LastLoopTick);
 8001292:	4b31      	ldr	r3, [pc, #196]	@ (8001358 <main+0x100>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	0018      	movs	r0, r3
 8001298:	f005 fecf 	bl	800703a <hal_timer_get_ticks_since_count>
 800129c:	0002      	movs	r2, r0
 800129e:	4b2f      	ldr	r3, [pc, #188]	@ (800135c <main+0x104>)
 80012a0:	601a      	str	r2, [r3, #0]

	  // Get the current sys tick.
	  LastLoopTick = hal_timer_get_systick();
 80012a2:	f005 fec2 	bl	800702a <hal_timer_get_systick>
 80012a6:	0002      	movs	r2, r0
 80012a8:	4b2b      	ldr	r3, [pc, #172]	@ (8001358 <main+0x100>)
 80012aa:	601a      	str	r2, [r3, #0]

	  /* reset the WDT */
	  hal_watchdog_reset();
 80012ac:	f006 fd2c 	bl	8007d08 <hal_watchdog_reset>


	  ac_audio_controller((uint16_t) TicksinceLastLoop);
 80012b0:	4b2a      	ldr	r3, [pc, #168]	@ (800135c <main+0x104>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	b29b      	uxth	r3, r3
 80012b6:	0018      	movs	r0, r3
 80012b8:	f7ff f95c 	bl	8000574 <ac_audio_controller>

      TickSinceLastExecution += TicksinceLastLoop;
 80012bc:	4b28      	ldr	r3, [pc, #160]	@ (8001360 <main+0x108>)
 80012be:	681a      	ldr	r2, [r3, #0]
 80012c0:	4b26      	ldr	r3, [pc, #152]	@ (800135c <main+0x104>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	18d2      	adds	r2, r2, r3
 80012c6:	4b26      	ldr	r3, [pc, #152]	@ (8001360 <main+0x108>)
 80012c8:	601a      	str	r2, [r3, #0]

      UtilDebounceReadAndDebounceInputs();
 80012ca:	f7ff fb49 	bl	8000960 <UtilDebounceReadAndDebounceInputs>

	  if (LOOP_THROTTLE_INTERVAL <= TickSinceLastExecution)
 80012ce:	4b24      	ldr	r3, [pc, #144]	@ (8001360 <main+0x108>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	2b09      	cmp	r3, #9
 80012d4:	d93d      	bls.n	8001352 <main+0xfa>
	  {
		  TickSinceLastExecution = 0;
 80012d6:	4b22      	ldr	r3, [pc, #136]	@ (8001360 <main+0x108>)
 80012d8:	2200      	movs	r2, #0
 80012da:	601a      	str	r2, [r3, #0]
#if 0
		  if ((true == IRCommsDetacherIsAuthorized()) && (true == ValidSdcIsPresent))
#endif
		  {
			  /* reset the WDT */
			  hal_watchdog_reset();
 80012dc:	f006 fd14 	bl	8007d08 <hal_watchdog_reset>

			  // check debounced button and interrupt inputs
			  if (false == buttonPressed)
 80012e0:	4b20      	ldr	r3, [pc, #128]	@ (8001364 <main+0x10c>)
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	2201      	movs	r2, #1
 80012e6:	4053      	eors	r3, r2
 80012e8:	b2db      	uxtb	r3, r3
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d020      	beq.n	8001330 <main+0xd8>
			  {
			      // Check the User Button to see if it was just pressed.
				  if (UtilDebounceCheckPinState(USER_BUTTON,BUTTON_PRESSED) == true)
 80012ee:	2100      	movs	r1, #0
 80012f0:	2000      	movs	r0, #0
 80012f2:	f7ff fbb9 	bl	8000a68 <UtilDebounceCheckPinState>
 80012f6:	1e03      	subs	r3, r0, #0
 80012f8:	d02b      	beq.n	8001352 <main+0xfa>
				  {
#if USE_RTT_FOR_DEBUGGING && DEBUG_MAIN // Note that both of these are #defined to 1 in periphdefs.h.
			debug_rtt_printf("main() The user button has been pressed.\r\n");
#endif
					  buttonPressed = true;
 80012fa:	4b1a      	ldr	r3, [pc, #104]	@ (8001364 <main+0x10c>)
 80012fc:	2201      	movs	r2, #1
 80012fe:	701a      	strb	r2, [r3, #0]

					  // Activate the WPT PWM
					  hal_timer_RunPwAtDutyCycle(TIMER_WPT_PWM, PWM_DEFAULT_DUTY_CYCLE);
 8001300:	2132      	movs	r1, #50	@ 0x32
 8001302:	2001      	movs	r0, #1
 8001304:	f005 fec4 	bl	8007090 <hal_timer_RunPwAtDutyCycle>

					  // Activate Vboost PWM
					  VboostStartPWM();
 8001308:	f7ff fc38 	bl	8000b7c <VboostStartPWM>

					  // Activate Piezo PWM
					  // hal_timer_RunPwAtDutyCycle(TIMER_PIEZO_PWM, PWM_DEFAULT_DUTY_CYCLE);
					  // Do one chirp

					  if (chirp == true)
 800130c:	1dfb      	adds	r3, r7, #7
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d006      	beq.n	8001322 <main+0xca>
					  {
					     ac_chirp(1);
 8001314:	2001      	movs	r0, #1
 8001316:	f7ff f8f5 	bl	8000504 <ac_chirp>
					     chirp = false;
 800131a:	1dfb      	adds	r3, r7, #7
 800131c:	2200      	movs	r2, #0
 800131e:	701a      	strb	r2, [r3, #0]
 8001320:	e017      	b.n	8001352 <main+0xfa>
					  }
					  else
					  {
						  ac_error_tone(1);
 8001322:	2001      	movs	r0, #1
 8001324:	f7ff f90a 	bl	800053c <ac_error_tone>
						  chirp = true;
 8001328:	1dfb      	adds	r3, r7, #7
 800132a:	2201      	movs	r2, #1
 800132c:	701a      	strb	r2, [r3, #0]
 800132e:	e010      	b.n	8001352 <main+0xfa>
				  }
			  }
			  else
			  {
				  // Check the User Button to see if it was just release.
				  if (UtilDebounceCheckPinState(USER_BUTTON,BUTTON_RELEASED) == true)
 8001330:	2101      	movs	r1, #1
 8001332:	2000      	movs	r0, #0
 8001334:	f7ff fb98 	bl	8000a68 <UtilDebounceCheckPinState>
 8001338:	1e03      	subs	r3, r0, #0
 800133a:	d00a      	beq.n	8001352 <main+0xfa>
				  {
#if USE_RTT_FOR_DEBUGGING && DEBUG_MAIN // Note that both of these are #defined to 1 in periphdefs.h.
			          debug_rtt_printf("main() The user button has been released.\r\n");
#endif
					  buttonPressed = false;
 800133c:	4b09      	ldr	r3, [pc, #36]	@ (8001364 <main+0x10c>)
 800133e:	2200      	movs	r2, #0
 8001340:	701a      	strb	r2, [r3, #0]

					  // Stop the WPT PWM
					  hal_timer_StopPwmOutput(TIMER_WPT_PWM);
 8001342:	2001      	movs	r0, #1
 8001344:	f005 fede 	bl	8007104 <hal_timer_StopPwmOutput>

					  // Stop the Vboost PWM
					  VboostStopPWM();
 8001348:	f7ff fc24 	bl	8000b94 <VboostStopPWM>

					  // Stop the Piezo PWM
					  hal_timer_StopPwmOutput(TIMER_PIEZO_PWM);
 800134c:	2000      	movs	r0, #0
 800134e:	f005 fed9 	bl	8007104 <hal_timer_StopPwmOutput>
	  }

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  hal_watchdog_reset();
 8001352:	f006 fcd9 	bl	8007d08 <hal_watchdog_reset>
	  TicksinceLastLoop = hal_timer_get_ticks_since_count(LastLoopTick);
 8001356:	e79c      	b.n	8001292 <main+0x3a>
 8001358:	20000318 	.word	0x20000318
 800135c:	2000031c 	.word	0x2000031c
 8001360:	20000320 	.word	0x20000320
 8001364:	20000324 	.word	0x20000324

08001368 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001368:	b590      	push	{r4, r7, lr}
 800136a:	b093      	sub	sp, #76	@ 0x4c
 800136c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800136e:	2414      	movs	r4, #20
 8001370:	193b      	adds	r3, r7, r4
 8001372:	0018      	movs	r0, r3
 8001374:	2334      	movs	r3, #52	@ 0x34
 8001376:	001a      	movs	r2, r3
 8001378:	2100      	movs	r1, #0
 800137a:	f006 fce3 	bl	8007d44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800137e:	1d3b      	adds	r3, r7, #4
 8001380:	0018      	movs	r0, r3
 8001382:	2310      	movs	r3, #16
 8001384:	001a      	movs	r2, r3
 8001386:	2100      	movs	r1, #0
 8001388:	f006 fcdc 	bl	8007d44 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800138c:	2380      	movs	r3, #128	@ 0x80
 800138e:	009b      	lsls	r3, r3, #2
 8001390:	0018      	movs	r0, r3
 8001392:	f002 f8e9 	bl	8003568 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8001396:	193b      	adds	r3, r7, r4
 8001398:	220a      	movs	r2, #10
 800139a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800139c:	193b      	adds	r3, r7, r4
 800139e:	2280      	movs	r2, #128	@ 0x80
 80013a0:	0052      	lsls	r2, r2, #1
 80013a2:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80013a4:	0021      	movs	r1, r4
 80013a6:	187b      	adds	r3, r7, r1
 80013a8:	2200      	movs	r2, #0
 80013aa:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013ac:	187b      	adds	r3, r7, r1
 80013ae:	2240      	movs	r2, #64	@ 0x40
 80013b0:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80013b2:	187b      	adds	r3, r7, r1
 80013b4:	2201      	movs	r2, #1
 80013b6:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013b8:	187b      	adds	r3, r7, r1
 80013ba:	2202      	movs	r2, #2
 80013bc:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80013be:	187b      	adds	r3, r7, r1
 80013c0:	2202      	movs	r2, #2
 80013c2:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 80013c4:	187b      	adds	r3, r7, r1
 80013c6:	2210      	movs	r2, #16
 80013c8:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 27;
 80013ca:	187b      	adds	r3, r7, r1
 80013cc:	221b      	movs	r2, #27
 80013ce:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80013d0:	187b      	adds	r3, r7, r1
 80013d2:	2280      	movs	r2, #128	@ 0x80
 80013d4:	0292      	lsls	r2, r2, #10
 80013d6:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 80013d8:	187b      	adds	r3, r7, r1
 80013da:	22c0      	movs	r2, #192	@ 0xc0
 80013dc:	05d2      	lsls	r2, r2, #23
 80013de:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013e0:	187b      	adds	r3, r7, r1
 80013e2:	0018      	movs	r0, r3
 80013e4:	f002 f90c 	bl	8003600 <HAL_RCC_OscConfig>
 80013e8:	1e03      	subs	r3, r0, #0
 80013ea:	d001      	beq.n	80013f0 <SystemClock_Config+0x88>
  {
    Error_Handler();
 80013ec:	f000 f819 	bl	8001422 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013f0:	1d3b      	adds	r3, r7, #4
 80013f2:	2207      	movs	r2, #7
 80013f4:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013f6:	1d3b      	adds	r3, r7, #4
 80013f8:	2202      	movs	r2, #2
 80013fa:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013fc:	1d3b      	adds	r3, r7, #4
 80013fe:	2200      	movs	r2, #0
 8001400:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001402:	1d3b      	adds	r3, r7, #4
 8001404:	2200      	movs	r2, #0
 8001406:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001408:	1d3b      	adds	r3, r7, #4
 800140a:	2102      	movs	r1, #2
 800140c:	0018      	movs	r0, r3
 800140e:	f002 fc07 	bl	8003c20 <HAL_RCC_ClockConfig>
 8001412:	1e03      	subs	r3, r0, #0
 8001414:	d001      	beq.n	800141a <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8001416:	f000 f804 	bl	8001422 <Error_Handler>
  }
}
 800141a:	46c0      	nop			@ (mov r8, r8)
 800141c:	46bd      	mov	sp, r7
 800141e:	b013      	add	sp, #76	@ 0x4c
 8001420:	bd90      	pop	{r4, r7, pc}

08001422 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001422:	b580      	push	{r7, lr}
 8001424:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001426:	b672      	cpsid	i
}
 8001428:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800142a:	46c0      	nop			@ (mov r8, r8)
 800142c:	e7fd      	b.n	800142a <Error_Handler+0x8>
	...

08001430 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b082      	sub	sp, #8
 8001434:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001436:	4b11      	ldr	r3, [pc, #68]	@ (800147c <HAL_MspInit+0x4c>)
 8001438:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800143a:	4b10      	ldr	r3, [pc, #64]	@ (800147c <HAL_MspInit+0x4c>)
 800143c:	2101      	movs	r1, #1
 800143e:	430a      	orrs	r2, r1
 8001440:	641a      	str	r2, [r3, #64]	@ 0x40
 8001442:	4b0e      	ldr	r3, [pc, #56]	@ (800147c <HAL_MspInit+0x4c>)
 8001444:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001446:	2201      	movs	r2, #1
 8001448:	4013      	ands	r3, r2
 800144a:	607b      	str	r3, [r7, #4]
 800144c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800144e:	4b0b      	ldr	r3, [pc, #44]	@ (800147c <HAL_MspInit+0x4c>)
 8001450:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001452:	4b0a      	ldr	r3, [pc, #40]	@ (800147c <HAL_MspInit+0x4c>)
 8001454:	2180      	movs	r1, #128	@ 0x80
 8001456:	0549      	lsls	r1, r1, #21
 8001458:	430a      	orrs	r2, r1
 800145a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800145c:	4b07      	ldr	r3, [pc, #28]	@ (800147c <HAL_MspInit+0x4c>)
 800145e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001460:	2380      	movs	r3, #128	@ 0x80
 8001462:	055b      	lsls	r3, r3, #21
 8001464:	4013      	ands	r3, r2
 8001466:	603b      	str	r3, [r7, #0]
 8001468:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 800146a:	23c0      	movs	r3, #192	@ 0xc0
 800146c:	00db      	lsls	r3, r3, #3
 800146e:	0018      	movs	r0, r3
 8001470:	f000 fdac 	bl	8001fcc <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001474:	46c0      	nop			@ (mov r8, r8)
 8001476:	46bd      	mov	sp, r7
 8001478:	b002      	add	sp, #8
 800147a:	bd80      	pop	{r7, pc}
 800147c:	40021000 	.word	0x40021000

08001480 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001484:	46c0      	nop			@ (mov r8, r8)
 8001486:	e7fd      	b.n	8001484 <NMI_Handler+0x4>

08001488 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800148c:	46c0      	nop			@ (mov r8, r8)
 800148e:	e7fd      	b.n	800148c <HardFault_Handler+0x4>

08001490 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001494:	46c0      	nop			@ (mov r8, r8)
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}

0800149a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800149a:	b580      	push	{r7, lr}
 800149c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800149e:	46c0      	nop			@ (mov r8, r8)
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}

080014a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014a8:	f000 fd74 	bl	8001f94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014ac:	46c0      	nop			@ (mov r8, r8)
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
	...

080014b4 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 interrupt.
  */
void ADC1_IRQHandler(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80014b8:	4b03      	ldr	r3, [pc, #12]	@ (80014c8 <ADC1_IRQHandler+0x14>)
 80014ba:	0018      	movs	r0, r3
 80014bc:	f001 f860 	bl	8002580 <HAL_ADC_IRQHandler>
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
  /* USER CODE BEGIN USART1_IRQn 1 */
#endif
  /* USER CODE END USART1_IRQn 1 */
}
 80014c0:	46c0      	nop			@ (mov r8, r8)
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	46c0      	nop			@ (mov r8, r8)
 80014c8:	20000250 	.word	0x20000250

080014cc <USART3_4_IRQHandler>:

/**
  * @brief This function handles USART3 and USART4 interrupts.
  */
void USART3_4_IRQHandler(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_4_IRQn 0 */

  /* USER CODE END USART3_4_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80014d0:	4b03      	ldr	r3, [pc, #12]	@ (80014e0 <USART3_4_IRQHandler+0x14>)
 80014d2:	0018      	movs	r0, r3
 80014d4:	f003 ff6c 	bl	80053b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_4_IRQn 1 */

  /* USER CODE END USART3_4_IRQn 1 */
}
 80014d8:	46c0      	nop			@ (mov r8, r8)
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	46c0      	nop			@ (mov r8, r8)
 80014e0:	200004ec 	.word	0x200004ec

080014e4 <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b086      	sub	sp, #24
 80014e8:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t pllm;
  uint32_t hsidiv;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80014ea:	4b3b      	ldr	r3, [pc, #236]	@ (80015d8 <SystemCoreClockUpdate+0xf4>)
 80014ec:	689b      	ldr	r3, [r3, #8]
 80014ee:	2238      	movs	r2, #56	@ 0x38
 80014f0:	4013      	ands	r3, r2
 80014f2:	2b20      	cmp	r3, #32
 80014f4:	d011      	beq.n	800151a <SystemCoreClockUpdate+0x36>
 80014f6:	d849      	bhi.n	800158c <SystemCoreClockUpdate+0xa8>
 80014f8:	2b18      	cmp	r3, #24
 80014fa:	d009      	beq.n	8001510 <SystemCoreClockUpdate+0x2c>
 80014fc:	d846      	bhi.n	800158c <SystemCoreClockUpdate+0xa8>
 80014fe:	2b08      	cmp	r3, #8
 8001500:	d002      	beq.n	8001508 <SystemCoreClockUpdate+0x24>
 8001502:	2b10      	cmp	r3, #16
 8001504:	d00e      	beq.n	8001524 <SystemCoreClockUpdate+0x40>
 8001506:	e041      	b.n	800158c <SystemCoreClockUpdate+0xa8>
  {
    case RCC_CFGR_SWS_0:                /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
 8001508:	4b34      	ldr	r3, [pc, #208]	@ (80015dc <SystemCoreClockUpdate+0xf8>)
 800150a:	4a35      	ldr	r2, [pc, #212]	@ (80015e0 <SystemCoreClockUpdate+0xfc>)
 800150c:	601a      	str	r2, [r3, #0]
      break;
 800150e:	e04f      	b.n	80015b0 <SystemCoreClockUpdate+0xcc>

    case (RCC_CFGR_SWS_1 | RCC_CFGR_SWS_0):  /* LSI used as system clock */
      SystemCoreClock = LSI_VALUE;
 8001510:	4b32      	ldr	r3, [pc, #200]	@ (80015dc <SystemCoreClockUpdate+0xf8>)
 8001512:	22fa      	movs	r2, #250	@ 0xfa
 8001514:	01d2      	lsls	r2, r2, #7
 8001516:	601a      	str	r2, [r3, #0]
      break;
 8001518:	e04a      	b.n	80015b0 <SystemCoreClockUpdate+0xcc>

    case RCC_CFGR_SWS_2:                /* LSE used as system clock */
      SystemCoreClock = LSE_VALUE;
 800151a:	4b30      	ldr	r3, [pc, #192]	@ (80015dc <SystemCoreClockUpdate+0xf8>)
 800151c:	2280      	movs	r2, #128	@ 0x80
 800151e:	0212      	lsls	r2, r2, #8
 8001520:	601a      	str	r2, [r3, #0]
      break;
 8001522:	e045      	b.n	80015b0 <SystemCoreClockUpdate+0xcc>

    case RCC_CFGR_SWS_1:  /* PLL used as system clock */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001524:	4b2c      	ldr	r3, [pc, #176]	@ (80015d8 <SystemCoreClockUpdate+0xf4>)
 8001526:	68db      	ldr	r3, [r3, #12]
 8001528:	2203      	movs	r2, #3
 800152a:	4013      	ands	r3, r2
 800152c:	613b      	str	r3, [r7, #16]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1UL;
 800152e:	4b2a      	ldr	r3, [pc, #168]	@ (80015d8 <SystemCoreClockUpdate+0xf4>)
 8001530:	68db      	ldr	r3, [r3, #12]
 8001532:	091b      	lsrs	r3, r3, #4
 8001534:	2207      	movs	r2, #7
 8001536:	4013      	ands	r3, r2
 8001538:	3301      	adds	r3, #1
 800153a:	60fb      	str	r3, [r7, #12]

      if(pllsource == 0x03UL)           /* HSE used as PLL clock source */
 800153c:	693b      	ldr	r3, [r7, #16]
 800153e:	2b03      	cmp	r3, #3
 8001540:	d106      	bne.n	8001550 <SystemCoreClockUpdate+0x6c>
      {
        pllvco = (HSE_VALUE / pllm);
 8001542:	68f9      	ldr	r1, [r7, #12]
 8001544:	4826      	ldr	r0, [pc, #152]	@ (80015e0 <SystemCoreClockUpdate+0xfc>)
 8001546:	f7fe fe37 	bl	80001b8 <__udivsi3>
 800154a:	0003      	movs	r3, r0
 800154c:	617b      	str	r3, [r7, #20]
 800154e:	e005      	b.n	800155c <SystemCoreClockUpdate+0x78>
      }
      else                              /* HSI used as PLL clock source */
      {
          pllvco = (HSI_VALUE / pllm);
 8001550:	68f9      	ldr	r1, [r7, #12]
 8001552:	4824      	ldr	r0, [pc, #144]	@ (80015e4 <SystemCoreClockUpdate+0x100>)
 8001554:	f7fe fe30 	bl	80001b8 <__udivsi3>
 8001558:	0003      	movs	r3, r0
 800155a:	617b      	str	r3, [r7, #20]
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800155c:	4b1e      	ldr	r3, [pc, #120]	@ (80015d8 <SystemCoreClockUpdate+0xf4>)
 800155e:	68db      	ldr	r3, [r3, #12]
 8001560:	0a1b      	lsrs	r3, r3, #8
 8001562:	227f      	movs	r2, #127	@ 0x7f
 8001564:	401a      	ands	r2, r3
 8001566:	697b      	ldr	r3, [r7, #20]
 8001568:	4353      	muls	r3, r2
 800156a:	617b      	str	r3, [r7, #20]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1UL);
 800156c:	4b1a      	ldr	r3, [pc, #104]	@ (80015d8 <SystemCoreClockUpdate+0xf4>)
 800156e:	68db      	ldr	r3, [r3, #12]
 8001570:	0f5b      	lsrs	r3, r3, #29
 8001572:	2207      	movs	r2, #7
 8001574:	4013      	ands	r3, r2
 8001576:	3301      	adds	r3, #1
 8001578:	60bb      	str	r3, [r7, #8]

      SystemCoreClock = pllvco/pllr;
 800157a:	68b9      	ldr	r1, [r7, #8]
 800157c:	6978      	ldr	r0, [r7, #20]
 800157e:	f7fe fe1b 	bl	80001b8 <__udivsi3>
 8001582:	0003      	movs	r3, r0
 8001584:	001a      	movs	r2, r3
 8001586:	4b15      	ldr	r3, [pc, #84]	@ (80015dc <SystemCoreClockUpdate+0xf8>)
 8001588:	601a      	str	r2, [r3, #0]
      break;
 800158a:	e011      	b.n	80015b0 <SystemCoreClockUpdate+0xcc>
      
    case 0x00000000U:                   /* HSI used as system clock */
    default:                            /* HSI used as system clock */
      hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV))>> RCC_CR_HSIDIV_Pos));
 800158c:	4b12      	ldr	r3, [pc, #72]	@ (80015d8 <SystemCoreClockUpdate+0xf4>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	0adb      	lsrs	r3, r3, #11
 8001592:	2207      	movs	r2, #7
 8001594:	4013      	ands	r3, r2
 8001596:	2201      	movs	r2, #1
 8001598:	409a      	lsls	r2, r3
 800159a:	0013      	movs	r3, r2
 800159c:	607b      	str	r3, [r7, #4]
      SystemCoreClock = (HSI_VALUE/hsidiv);
 800159e:	6879      	ldr	r1, [r7, #4]
 80015a0:	4810      	ldr	r0, [pc, #64]	@ (80015e4 <SystemCoreClockUpdate+0x100>)
 80015a2:	f7fe fe09 	bl	80001b8 <__udivsi3>
 80015a6:	0003      	movs	r3, r0
 80015a8:	001a      	movs	r2, r3
 80015aa:	4b0c      	ldr	r3, [pc, #48]	@ (80015dc <SystemCoreClockUpdate+0xf8>)
 80015ac:	601a      	str	r2, [r3, #0]
      break;
 80015ae:	46c0      	nop			@ (mov r8, r8)
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80015b0:	4b09      	ldr	r3, [pc, #36]	@ (80015d8 <SystemCoreClockUpdate+0xf4>)
 80015b2:	689b      	ldr	r3, [r3, #8]
 80015b4:	0a1b      	lsrs	r3, r3, #8
 80015b6:	220f      	movs	r2, #15
 80015b8:	401a      	ands	r2, r3
 80015ba:	4b0b      	ldr	r3, [pc, #44]	@ (80015e8 <SystemCoreClockUpdate+0x104>)
 80015bc:	0092      	lsls	r2, r2, #2
 80015be:	58d3      	ldr	r3, [r2, r3]
 80015c0:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 80015c2:	4b06      	ldr	r3, [pc, #24]	@ (80015dc <SystemCoreClockUpdate+0xf8>)
 80015c4:	681a      	ldr	r2, [r3, #0]
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	40da      	lsrs	r2, r3
 80015ca:	4b04      	ldr	r3, [pc, #16]	@ (80015dc <SystemCoreClockUpdate+0xf8>)
 80015cc:	601a      	str	r2, [r3, #0]
}
 80015ce:	46c0      	nop			@ (mov r8, r8)
 80015d0:	46bd      	mov	sp, r7
 80015d2:	b006      	add	sp, #24
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	46c0      	nop			@ (mov r8, r8)
 80015d8:	40021000 	.word	0x40021000
 80015dc:	200000b8 	.word	0x200000b8
 80015e0:	007a1200 	.word	0x007a1200
 80015e4:	00f42400 	.word	0x00f42400
 80015e8:	08007dc0 	.word	0x08007dc0

080015ec <MX_TIM1_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim15;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b09c      	sub	sp, #112	@ 0x70
 80015f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015f2:	2360      	movs	r3, #96	@ 0x60
 80015f4:	18fb      	adds	r3, r7, r3
 80015f6:	0018      	movs	r0, r3
 80015f8:	2310      	movs	r3, #16
 80015fa:	001a      	movs	r2, r3
 80015fc:	2100      	movs	r1, #0
 80015fe:	f006 fba1 	bl	8007d44 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001602:	2354      	movs	r3, #84	@ 0x54
 8001604:	18fb      	adds	r3, r7, r3
 8001606:	0018      	movs	r0, r3
 8001608:	230c      	movs	r3, #12
 800160a:	001a      	movs	r2, r3
 800160c:	2100      	movs	r1, #0
 800160e:	f006 fb99 	bl	8007d44 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001612:	2338      	movs	r3, #56	@ 0x38
 8001614:	18fb      	adds	r3, r7, r3
 8001616:	0018      	movs	r0, r3
 8001618:	231c      	movs	r3, #28
 800161a:	001a      	movs	r2, r3
 800161c:	2100      	movs	r1, #0
 800161e:	f006 fb91 	bl	8007d44 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001622:	1d3b      	adds	r3, r7, #4
 8001624:	0018      	movs	r0, r3
 8001626:	2334      	movs	r3, #52	@ 0x34
 8001628:	001a      	movs	r2, r3
 800162a:	2100      	movs	r1, #0
 800162c:	f006 fb8a 	bl	8007d44 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001630:	4b51      	ldr	r3, [pc, #324]	@ (8001778 <MX_TIM1_Init+0x18c>)
 8001632:	4a52      	ldr	r2, [pc, #328]	@ (800177c <MX_TIM1_Init+0x190>)
 8001634:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = PIEZO_PWM_PRESCALER;
 8001636:	4b50      	ldr	r3, [pc, #320]	@ (8001778 <MX_TIM1_Init+0x18c>)
 8001638:	2235      	movs	r2, #53	@ 0x35
 800163a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800163c:	4b4e      	ldr	r3, [pc, #312]	@ (8001778 <MX_TIM1_Init+0x18c>)
 800163e:	2200      	movs	r2, #0
 8001640:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = PIEZO_PWM_ARR_VAL;
 8001642:	4b4d      	ldr	r3, [pc, #308]	@ (8001778 <MX_TIM1_Init+0x18c>)
 8001644:	2263      	movs	r2, #99	@ 0x63
 8001646:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001648:	4b4b      	ldr	r3, [pc, #300]	@ (8001778 <MX_TIM1_Init+0x18c>)
 800164a:	2200      	movs	r2, #0
 800164c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800164e:	4b4a      	ldr	r3, [pc, #296]	@ (8001778 <MX_TIM1_Init+0x18c>)
 8001650:	2200      	movs	r2, #0
 8001652:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001654:	4b48      	ldr	r3, [pc, #288]	@ (8001778 <MX_TIM1_Init+0x18c>)
 8001656:	2200      	movs	r2, #0
 8001658:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800165a:	4b47      	ldr	r3, [pc, #284]	@ (8001778 <MX_TIM1_Init+0x18c>)
 800165c:	0018      	movs	r0, r3
 800165e:	f002 fdbd 	bl	80041dc <HAL_TIM_Base_Init>
 8001662:	1e03      	subs	r3, r0, #0
 8001664:	d001      	beq.n	800166a <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 8001666:	f7ff fedc 	bl	8001422 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800166a:	2160      	movs	r1, #96	@ 0x60
 800166c:	187b      	adds	r3, r7, r1
 800166e:	2280      	movs	r2, #128	@ 0x80
 8001670:	0152      	lsls	r2, r2, #5
 8001672:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001674:	187a      	adds	r2, r7, r1
 8001676:	4b40      	ldr	r3, [pc, #256]	@ (8001778 <MX_TIM1_Init+0x18c>)
 8001678:	0011      	movs	r1, r2
 800167a:	0018      	movs	r0, r3
 800167c:	f002 ff66 	bl	800454c <HAL_TIM_ConfigClockSource>
 8001680:	1e03      	subs	r3, r0, #0
 8001682:	d001      	beq.n	8001688 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8001684:	f7ff fecd 	bl	8001422 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001688:	4b3b      	ldr	r3, [pc, #236]	@ (8001778 <MX_TIM1_Init+0x18c>)
 800168a:	0018      	movs	r0, r3
 800168c:	f002 fdfe 	bl	800428c <HAL_TIM_PWM_Init>
 8001690:	1e03      	subs	r3, r0, #0
 8001692:	d001      	beq.n	8001698 <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 8001694:	f7ff fec5 	bl	8001422 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001698:	2154      	movs	r1, #84	@ 0x54
 800169a:	187b      	adds	r3, r7, r1
 800169c:	2200      	movs	r2, #0
 800169e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80016a0:	187b      	adds	r3, r7, r1
 80016a2:	2200      	movs	r2, #0
 80016a4:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016a6:	187b      	adds	r3, r7, r1
 80016a8:	2200      	movs	r2, #0
 80016aa:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80016ac:	187a      	adds	r2, r7, r1
 80016ae:	4b32      	ldr	r3, [pc, #200]	@ (8001778 <MX_TIM1_Init+0x18c>)
 80016b0:	0011      	movs	r1, r2
 80016b2:	0018      	movs	r0, r3
 80016b4:	f003 fcfe 	bl	80050b4 <HAL_TIMEx_MasterConfigSynchronization>
 80016b8:	1e03      	subs	r3, r0, #0
 80016ba:	d001      	beq.n	80016c0 <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 80016bc:	f7ff feb1 	bl	8001422 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016c0:	2138      	movs	r1, #56	@ 0x38
 80016c2:	187b      	adds	r3, r7, r1
 80016c4:	2260      	movs	r2, #96	@ 0x60
 80016c6:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 49;
 80016c8:	187b      	adds	r3, r7, r1
 80016ca:	2231      	movs	r2, #49	@ 0x31
 80016cc:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016ce:	187b      	adds	r3, r7, r1
 80016d0:	2200      	movs	r2, #0
 80016d2:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80016d4:	187b      	adds	r3, r7, r1
 80016d6:	2200      	movs	r2, #0
 80016d8:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016da:	187b      	adds	r3, r7, r1
 80016dc:	2200      	movs	r2, #0
 80016de:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80016e0:	187b      	adds	r3, r7, r1
 80016e2:	2200      	movs	r2, #0
 80016e4:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80016e6:	187b      	adds	r3, r7, r1
 80016e8:	2200      	movs	r2, #0
 80016ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80016ec:	1879      	adds	r1, r7, r1
 80016ee:	4b22      	ldr	r3, [pc, #136]	@ (8001778 <MX_TIM1_Init+0x18c>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	0018      	movs	r0, r3
 80016f4:	f002 fe2a 	bl	800434c <HAL_TIM_PWM_ConfigChannel>
 80016f8:	1e03      	subs	r3, r0, #0
 80016fa:	d001      	beq.n	8001700 <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 80016fc:	f7ff fe91 	bl	8001422 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001700:	1d3b      	adds	r3, r7, #4
 8001702:	2200      	movs	r2, #0
 8001704:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001706:	1d3b      	adds	r3, r7, #4
 8001708:	2200      	movs	r2, #0
 800170a:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800170c:	1d3b      	adds	r3, r7, #4
 800170e:	2200      	movs	r2, #0
 8001710:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001712:	1d3b      	adds	r3, r7, #4
 8001714:	2200      	movs	r2, #0
 8001716:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001718:	1d3b      	adds	r3, r7, #4
 800171a:	2200      	movs	r2, #0
 800171c:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800171e:	1d3b      	adds	r3, r7, #4
 8001720:	2280      	movs	r2, #128	@ 0x80
 8001722:	0192      	lsls	r2, r2, #6
 8001724:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001726:	1d3b      	adds	r3, r7, #4
 8001728:	2200      	movs	r2, #0
 800172a:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800172c:	1d3b      	adds	r3, r7, #4
 800172e:	2200      	movs	r2, #0
 8001730:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001732:	1d3b      	adds	r3, r7, #4
 8001734:	2200      	movs	r2, #0
 8001736:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001738:	1d3b      	adds	r3, r7, #4
 800173a:	2280      	movs	r2, #128	@ 0x80
 800173c:	0492      	lsls	r2, r2, #18
 800173e:	625a      	str	r2, [r3, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001740:	1d3b      	adds	r3, r7, #4
 8001742:	2200      	movs	r2, #0
 8001744:	629a      	str	r2, [r3, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001746:	1d3b      	adds	r3, r7, #4
 8001748:	2200      	movs	r2, #0
 800174a:	62da      	str	r2, [r3, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800174c:	1d3b      	adds	r3, r7, #4
 800174e:	2200      	movs	r2, #0
 8001750:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001752:	1d3a      	adds	r2, r7, #4
 8001754:	4b08      	ldr	r3, [pc, #32]	@ (8001778 <MX_TIM1_Init+0x18c>)
 8001756:	0011      	movs	r1, r2
 8001758:	0018      	movs	r0, r3
 800175a:	f003 fd13 	bl	8005184 <HAL_TIMEx_ConfigBreakDeadTime>
 800175e:	1e03      	subs	r3, r0, #0
 8001760:	d001      	beq.n	8001766 <MX_TIM1_Init+0x17a>
  {
    Error_Handler();
 8001762:	f7ff fe5e 	bl	8001422 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001766:	4b04      	ldr	r3, [pc, #16]	@ (8001778 <MX_TIM1_Init+0x18c>)
 8001768:	0018      	movs	r0, r3
 800176a:	f000 f9e3 	bl	8001b34 <HAL_TIM_MspPostInit>

}
 800176e:	46c0      	nop			@ (mov r8, r8)
 8001770:	46bd      	mov	sp, r7
 8001772:	b01c      	add	sp, #112	@ 0x70
 8001774:	bd80      	pop	{r7, pc}
 8001776:	46c0      	nop			@ (mov r8, r8)
 8001778:	20000328 	.word	0x20000328
 800177c:	40012c00 	.word	0x40012c00

08001780 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b08e      	sub	sp, #56	@ 0x38
 8001784:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001786:	2328      	movs	r3, #40	@ 0x28
 8001788:	18fb      	adds	r3, r7, r3
 800178a:	0018      	movs	r0, r3
 800178c:	2310      	movs	r3, #16
 800178e:	001a      	movs	r2, r3
 8001790:	2100      	movs	r1, #0
 8001792:	f006 fad7 	bl	8007d44 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001796:	231c      	movs	r3, #28
 8001798:	18fb      	adds	r3, r7, r3
 800179a:	0018      	movs	r0, r3
 800179c:	230c      	movs	r3, #12
 800179e:	001a      	movs	r2, r3
 80017a0:	2100      	movs	r1, #0
 80017a2:	f006 facf 	bl	8007d44 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017a6:	003b      	movs	r3, r7
 80017a8:	0018      	movs	r0, r3
 80017aa:	231c      	movs	r3, #28
 80017ac:	001a      	movs	r2, r3
 80017ae:	2100      	movs	r1, #0
 80017b0:	f006 fac8 	bl	8007d44 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80017b4:	4b30      	ldr	r3, [pc, #192]	@ (8001878 <MX_TIM3_Init+0xf8>)
 80017b6:	4a31      	ldr	r2, [pc, #196]	@ (800187c <MX_TIM3_Init+0xfc>)
 80017b8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = WPT_PWM_PRESCALER;
 80017ba:	4b2f      	ldr	r3, [pc, #188]	@ (8001878 <MX_TIM3_Init+0xf8>)
 80017bc:	2200      	movs	r2, #0
 80017be:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017c0:	4b2d      	ldr	r3, [pc, #180]	@ (8001878 <MX_TIM3_Init+0xf8>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = WPT_PWM_ARR_VAL;
 80017c6:	4b2c      	ldr	r3, [pc, #176]	@ (8001878 <MX_TIM3_Init+0xf8>)
 80017c8:	2290      	movs	r2, #144	@ 0x90
 80017ca:	32ff      	adds	r2, #255	@ 0xff
 80017cc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017ce:	4b2a      	ldr	r3, [pc, #168]	@ (8001878 <MX_TIM3_Init+0xf8>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017d4:	4b28      	ldr	r3, [pc, #160]	@ (8001878 <MX_TIM3_Init+0xf8>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80017da:	4b27      	ldr	r3, [pc, #156]	@ (8001878 <MX_TIM3_Init+0xf8>)
 80017dc:	0018      	movs	r0, r3
 80017de:	f002 fcfd 	bl	80041dc <HAL_TIM_Base_Init>
 80017e2:	1e03      	subs	r3, r0, #0
 80017e4:	d001      	beq.n	80017ea <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 80017e6:	f7ff fe1c 	bl	8001422 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017ea:	2128      	movs	r1, #40	@ 0x28
 80017ec:	187b      	adds	r3, r7, r1
 80017ee:	2280      	movs	r2, #128	@ 0x80
 80017f0:	0152      	lsls	r2, r2, #5
 80017f2:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80017f4:	187a      	adds	r2, r7, r1
 80017f6:	4b20      	ldr	r3, [pc, #128]	@ (8001878 <MX_TIM3_Init+0xf8>)
 80017f8:	0011      	movs	r1, r2
 80017fa:	0018      	movs	r0, r3
 80017fc:	f002 fea6 	bl	800454c <HAL_TIM_ConfigClockSource>
 8001800:	1e03      	subs	r3, r0, #0
 8001802:	d001      	beq.n	8001808 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 8001804:	f7ff fe0d 	bl	8001422 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001808:	4b1b      	ldr	r3, [pc, #108]	@ (8001878 <MX_TIM3_Init+0xf8>)
 800180a:	0018      	movs	r0, r3
 800180c:	f002 fd3e 	bl	800428c <HAL_TIM_PWM_Init>
 8001810:	1e03      	subs	r3, r0, #0
 8001812:	d001      	beq.n	8001818 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001814:	f7ff fe05 	bl	8001422 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001818:	211c      	movs	r1, #28
 800181a:	187b      	adds	r3, r7, r1
 800181c:	2200      	movs	r2, #0
 800181e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001820:	187b      	adds	r3, r7, r1
 8001822:	2200      	movs	r2, #0
 8001824:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001826:	187a      	adds	r2, r7, r1
 8001828:	4b13      	ldr	r3, [pc, #76]	@ (8001878 <MX_TIM3_Init+0xf8>)
 800182a:	0011      	movs	r1, r2
 800182c:	0018      	movs	r0, r3
 800182e:	f003 fc41 	bl	80050b4 <HAL_TIMEx_MasterConfigSynchronization>
 8001832:	1e03      	subs	r3, r0, #0
 8001834:	d001      	beq.n	800183a <MX_TIM3_Init+0xba>
  {
    Error_Handler();
 8001836:	f7ff fdf4 	bl	8001422 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800183a:	003b      	movs	r3, r7
 800183c:	2260      	movs	r2, #96	@ 0x60
 800183e:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8001840:	003b      	movs	r3, r7
 8001842:	2200      	movs	r2, #0
 8001844:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001846:	003b      	movs	r3, r7
 8001848:	2200      	movs	r2, #0
 800184a:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800184c:	003b      	movs	r3, r7
 800184e:	2200      	movs	r2, #0
 8001850:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001852:	0039      	movs	r1, r7
 8001854:	4b08      	ldr	r3, [pc, #32]	@ (8001878 <MX_TIM3_Init+0xf8>)
 8001856:	2200      	movs	r2, #0
 8001858:	0018      	movs	r0, r3
 800185a:	f002 fd77 	bl	800434c <HAL_TIM_PWM_ConfigChannel>
 800185e:	1e03      	subs	r3, r0, #0
 8001860:	d001      	beq.n	8001866 <MX_TIM3_Init+0xe6>
  {
    Error_Handler();
 8001862:	f7ff fdde 	bl	8001422 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001866:	4b04      	ldr	r3, [pc, #16]	@ (8001878 <MX_TIM3_Init+0xf8>)
 8001868:	0018      	movs	r0, r3
 800186a:	f000 f963 	bl	8001b34 <HAL_TIM_MspPostInit>

}
 800186e:	46c0      	nop			@ (mov r8, r8)
 8001870:	46bd      	mov	sp, r7
 8001872:	b00e      	add	sp, #56	@ 0x38
 8001874:	bd80      	pop	{r7, pc}
 8001876:	46c0      	nop			@ (mov r8, r8)
 8001878:	20000374 	.word	0x20000374
 800187c:	40000400 	.word	0x40000400

08001880 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b084      	sub	sp, #16
 8001884:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001886:	1d3b      	adds	r3, r7, #4
 8001888:	0018      	movs	r0, r3
 800188a:	230c      	movs	r3, #12
 800188c:	001a      	movs	r2, r3
 800188e:	2100      	movs	r1, #0
 8001890:	f006 fa58 	bl	8007d44 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001894:	4b15      	ldr	r3, [pc, #84]	@ (80018ec <MX_TIM6_Init+0x6c>)
 8001896:	4a16      	ldr	r2, [pc, #88]	@ (80018f0 <MX_TIM6_Init+0x70>)
 8001898:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = BLOCKING_DELAY_PRESCALER;
 800189a:	4b14      	ldr	r3, [pc, #80]	@ (80018ec <MX_TIM6_Init+0x6c>)
 800189c:	2235      	movs	r2, #53	@ 0x35
 800189e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018a0:	4b12      	ldr	r3, [pc, #72]	@ (80018ec <MX_TIM6_Init+0x6c>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 0;
 80018a6:	4b11      	ldr	r3, [pc, #68]	@ (80018ec <MX_TIM6_Init+0x6c>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80018ac:	4b0f      	ldr	r3, [pc, #60]	@ (80018ec <MX_TIM6_Init+0x6c>)
 80018ae:	2280      	movs	r2, #128	@ 0x80
 80018b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80018b2:	4b0e      	ldr	r3, [pc, #56]	@ (80018ec <MX_TIM6_Init+0x6c>)
 80018b4:	0018      	movs	r0, r3
 80018b6:	f002 fc91 	bl	80041dc <HAL_TIM_Base_Init>
 80018ba:	1e03      	subs	r3, r0, #0
 80018bc:	d001      	beq.n	80018c2 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 80018be:	f7ff fdb0 	bl	8001422 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018c2:	1d3b      	adds	r3, r7, #4
 80018c4:	2200      	movs	r2, #0
 80018c6:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018c8:	1d3b      	adds	r3, r7, #4
 80018ca:	2200      	movs	r2, #0
 80018cc:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80018ce:	1d3a      	adds	r2, r7, #4
 80018d0:	4b06      	ldr	r3, [pc, #24]	@ (80018ec <MX_TIM6_Init+0x6c>)
 80018d2:	0011      	movs	r1, r2
 80018d4:	0018      	movs	r0, r3
 80018d6:	f003 fbed 	bl	80050b4 <HAL_TIMEx_MasterConfigSynchronization>
 80018da:	1e03      	subs	r3, r0, #0
 80018dc:	d001      	beq.n	80018e2 <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 80018de:	f7ff fda0 	bl	8001422 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80018e2:	46c0      	nop			@ (mov r8, r8)
 80018e4:	46bd      	mov	sp, r7
 80018e6:	b004      	add	sp, #16
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	46c0      	nop			@ (mov r8, r8)
 80018ec:	200003c0 	.word	0x200003c0
 80018f0:	40001000 	.word	0x40001000

080018f4 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 80018f4:	b590      	push	{r4, r7, lr}
 80018f6:	b09d      	sub	sp, #116	@ 0x74
 80018f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018fa:	2360      	movs	r3, #96	@ 0x60
 80018fc:	18fb      	adds	r3, r7, r3
 80018fe:	0018      	movs	r0, r3
 8001900:	2310      	movs	r3, #16
 8001902:	001a      	movs	r2, r3
 8001904:	2100      	movs	r1, #0
 8001906:	f006 fa1d 	bl	8007d44 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800190a:	2354      	movs	r3, #84	@ 0x54
 800190c:	18fb      	adds	r3, r7, r3
 800190e:	0018      	movs	r0, r3
 8001910:	230c      	movs	r3, #12
 8001912:	001a      	movs	r2, r3
 8001914:	2100      	movs	r1, #0
 8001916:	f006 fa15 	bl	8007d44 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800191a:	2338      	movs	r3, #56	@ 0x38
 800191c:	18fb      	adds	r3, r7, r3
 800191e:	0018      	movs	r0, r3
 8001920:	231c      	movs	r3, #28
 8001922:	001a      	movs	r2, r3
 8001924:	2100      	movs	r1, #0
 8001926:	f006 fa0d 	bl	8007d44 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800192a:	1d3b      	adds	r3, r7, #4
 800192c:	0018      	movs	r0, r3
 800192e:	2334      	movs	r3, #52	@ 0x34
 8001930:	001a      	movs	r2, r3
 8001932:	2100      	movs	r1, #0
 8001934:	f006 fa06 	bl	8007d44 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8001938:	4b49      	ldr	r3, [pc, #292]	@ (8001a60 <MX_TIM15_Init+0x16c>)
 800193a:	4a4a      	ldr	r2, [pc, #296]	@ (8001a64 <MX_TIM15_Init+0x170>)
 800193c:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = VBOOST_PRESCALER;
 800193e:	4b48      	ldr	r3, [pc, #288]	@ (8001a60 <MX_TIM15_Init+0x16c>)
 8001940:	2209      	movs	r2, #9
 8001942:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001944:	4b46      	ldr	r3, [pc, #280]	@ (8001a60 <MX_TIM15_Init+0x16c>)
 8001946:	2200      	movs	r2, #0
 8001948:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = VBOOST_ARR_VAL;
 800194a:	4b45      	ldr	r3, [pc, #276]	@ (8001a60 <MX_TIM15_Init+0x16c>)
 800194c:	2263      	movs	r2, #99	@ 0x63
 800194e:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001950:	4b43      	ldr	r3, [pc, #268]	@ (8001a60 <MX_TIM15_Init+0x16c>)
 8001952:	2200      	movs	r2, #0
 8001954:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8001956:	4b42      	ldr	r3, [pc, #264]	@ (8001a60 <MX_TIM15_Init+0x16c>)
 8001958:	2200      	movs	r2, #0
 800195a:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800195c:	4b40      	ldr	r3, [pc, #256]	@ (8001a60 <MX_TIM15_Init+0x16c>)
 800195e:	2200      	movs	r2, #0
 8001960:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8001962:	4b3f      	ldr	r3, [pc, #252]	@ (8001a60 <MX_TIM15_Init+0x16c>)
 8001964:	0018      	movs	r0, r3
 8001966:	f002 fc39 	bl	80041dc <HAL_TIM_Base_Init>
 800196a:	1e03      	subs	r3, r0, #0
 800196c:	d001      	beq.n	8001972 <MX_TIM15_Init+0x7e>
  {
    Error_Handler();
 800196e:	f7ff fd58 	bl	8001422 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001972:	2160      	movs	r1, #96	@ 0x60
 8001974:	187b      	adds	r3, r7, r1
 8001976:	2280      	movs	r2, #128	@ 0x80
 8001978:	0152      	lsls	r2, r2, #5
 800197a:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 800197c:	187a      	adds	r2, r7, r1
 800197e:	4b38      	ldr	r3, [pc, #224]	@ (8001a60 <MX_TIM15_Init+0x16c>)
 8001980:	0011      	movs	r1, r2
 8001982:	0018      	movs	r0, r3
 8001984:	f002 fde2 	bl	800454c <HAL_TIM_ConfigClockSource>
 8001988:	1e03      	subs	r3, r0, #0
 800198a:	d001      	beq.n	8001990 <MX_TIM15_Init+0x9c>
  {
    Error_Handler();
 800198c:	f7ff fd49 	bl	8001422 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8001990:	4b33      	ldr	r3, [pc, #204]	@ (8001a60 <MX_TIM15_Init+0x16c>)
 8001992:	0018      	movs	r0, r3
 8001994:	f002 fc7a 	bl	800428c <HAL_TIM_PWM_Init>
 8001998:	1e03      	subs	r3, r0, #0
 800199a:	d001      	beq.n	80019a0 <MX_TIM15_Init+0xac>
  {
    Error_Handler();
 800199c:	f7ff fd41 	bl	8001422 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019a0:	2154      	movs	r1, #84	@ 0x54
 80019a2:	187b      	adds	r3, r7, r1
 80019a4:	2200      	movs	r2, #0
 80019a6:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019a8:	187b      	adds	r3, r7, r1
 80019aa:	2200      	movs	r2, #0
 80019ac:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80019ae:	187a      	adds	r2, r7, r1
 80019b0:	4b2b      	ldr	r3, [pc, #172]	@ (8001a60 <MX_TIM15_Init+0x16c>)
 80019b2:	0011      	movs	r1, r2
 80019b4:	0018      	movs	r0, r3
 80019b6:	f003 fb7d 	bl	80050b4 <HAL_TIMEx_MasterConfigSynchronization>
 80019ba:	1e03      	subs	r3, r0, #0
 80019bc:	d001      	beq.n	80019c2 <MX_TIM15_Init+0xce>
  {
    Error_Handler();
 80019be:	f7ff fd30 	bl	8001422 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019c2:	2438      	movs	r4, #56	@ 0x38
 80019c4:	193b      	adds	r3, r7, r4
 80019c6:	2260      	movs	r2, #96	@ 0x60
 80019c8:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = GetVboostPwmDutyCyclePct();
 80019ca:	f7ff f8cd 	bl	8000b68 <GetVboostPwmDutyCyclePct>
 80019ce:	0003      	movs	r3, r0
 80019d0:	001a      	movs	r2, r3
 80019d2:	0021      	movs	r1, r4
 80019d4:	187b      	adds	r3, r7, r1
 80019d6:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019d8:	187b      	adds	r3, r7, r1
 80019da:	2200      	movs	r2, #0
 80019dc:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80019de:	187b      	adds	r3, r7, r1
 80019e0:	2200      	movs	r2, #0
 80019e2:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019e4:	187b      	adds	r3, r7, r1
 80019e6:	2200      	movs	r2, #0
 80019e8:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80019ea:	187b      	adds	r3, r7, r1
 80019ec:	2200      	movs	r2, #0
 80019ee:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80019f0:	187b      	adds	r3, r7, r1
 80019f2:	2200      	movs	r2, #0
 80019f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80019f6:	1879      	adds	r1, r7, r1
 80019f8:	4b19      	ldr	r3, [pc, #100]	@ (8001a60 <MX_TIM15_Init+0x16c>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	0018      	movs	r0, r3
 80019fe:	f002 fca5 	bl	800434c <HAL_TIM_PWM_ConfigChannel>
 8001a02:	1e03      	subs	r3, r0, #0
 8001a04:	d001      	beq.n	8001a0a <MX_TIM15_Init+0x116>
  {
    Error_Handler();
 8001a06:	f7ff fd0c 	bl	8001422 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001a0a:	1d3b      	adds	r3, r7, #4
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001a10:	1d3b      	adds	r3, r7, #4
 8001a12:	2200      	movs	r2, #0
 8001a14:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001a16:	1d3b      	adds	r3, r7, #4
 8001a18:	2200      	movs	r2, #0
 8001a1a:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001a1c:	1d3b      	adds	r3, r7, #4
 8001a1e:	2200      	movs	r2, #0
 8001a20:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001a22:	1d3b      	adds	r3, r7, #4
 8001a24:	2200      	movs	r2, #0
 8001a26:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001a28:	1d3b      	adds	r3, r7, #4
 8001a2a:	2280      	movs	r2, #128	@ 0x80
 8001a2c:	0192      	lsls	r2, r2, #6
 8001a2e:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001a30:	1d3b      	adds	r3, r7, #4
 8001a32:	2200      	movs	r2, #0
 8001a34:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001a36:	1d3b      	adds	r3, r7, #4
 8001a38:	2200      	movs	r2, #0
 8001a3a:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8001a3c:	1d3a      	adds	r2, r7, #4
 8001a3e:	4b08      	ldr	r3, [pc, #32]	@ (8001a60 <MX_TIM15_Init+0x16c>)
 8001a40:	0011      	movs	r1, r2
 8001a42:	0018      	movs	r0, r3
 8001a44:	f003 fb9e 	bl	8005184 <HAL_TIMEx_ConfigBreakDeadTime>
 8001a48:	1e03      	subs	r3, r0, #0
 8001a4a:	d001      	beq.n	8001a50 <MX_TIM15_Init+0x15c>
  {
    Error_Handler();
 8001a4c:	f7ff fce9 	bl	8001422 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8001a50:	4b03      	ldr	r3, [pc, #12]	@ (8001a60 <MX_TIM15_Init+0x16c>)
 8001a52:	0018      	movs	r0, r3
 8001a54:	f000 f86e 	bl	8001b34 <HAL_TIM_MspPostInit>

}
 8001a58:	46c0      	nop			@ (mov r8, r8)
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	b01d      	add	sp, #116	@ 0x74
 8001a5e:	bd90      	pop	{r4, r7, pc}
 8001a60:	2000040c 	.word	0x2000040c
 8001a64:	40014000 	.word	0x40014000

08001a68 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b086      	sub	sp, #24
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a2a      	ldr	r2, [pc, #168]	@ (8001b20 <HAL_TIM_Base_MspInit+0xb8>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d10e      	bne.n	8001a98 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001a7a:	4b2a      	ldr	r3, [pc, #168]	@ (8001b24 <HAL_TIM_Base_MspInit+0xbc>)
 8001a7c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001a7e:	4b29      	ldr	r3, [pc, #164]	@ (8001b24 <HAL_TIM_Base_MspInit+0xbc>)
 8001a80:	2180      	movs	r1, #128	@ 0x80
 8001a82:	0109      	lsls	r1, r1, #4
 8001a84:	430a      	orrs	r2, r1
 8001a86:	641a      	str	r2, [r3, #64]	@ 0x40
 8001a88:	4b26      	ldr	r3, [pc, #152]	@ (8001b24 <HAL_TIM_Base_MspInit+0xbc>)
 8001a8a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001a8c:	2380      	movs	r3, #128	@ 0x80
 8001a8e:	011b      	lsls	r3, r3, #4
 8001a90:	4013      	ands	r3, r2
 8001a92:	617b      	str	r3, [r7, #20]
 8001a94:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM15_CLK_ENABLE();
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 8001a96:	e03e      	b.n	8001b16 <HAL_TIM_Base_MspInit+0xae>
  else if(tim_baseHandle->Instance==TIM3)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a22      	ldr	r2, [pc, #136]	@ (8001b28 <HAL_TIM_Base_MspInit+0xc0>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d10c      	bne.n	8001abc <HAL_TIM_Base_MspInit+0x54>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001aa2:	4b20      	ldr	r3, [pc, #128]	@ (8001b24 <HAL_TIM_Base_MspInit+0xbc>)
 8001aa4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001aa6:	4b1f      	ldr	r3, [pc, #124]	@ (8001b24 <HAL_TIM_Base_MspInit+0xbc>)
 8001aa8:	2102      	movs	r1, #2
 8001aaa:	430a      	orrs	r2, r1
 8001aac:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001aae:	4b1d      	ldr	r3, [pc, #116]	@ (8001b24 <HAL_TIM_Base_MspInit+0xbc>)
 8001ab0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ab2:	2202      	movs	r2, #2
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	613b      	str	r3, [r7, #16]
 8001ab8:	693b      	ldr	r3, [r7, #16]
}
 8001aba:	e02c      	b.n	8001b16 <HAL_TIM_Base_MspInit+0xae>
  else if(tim_baseHandle->Instance==TIM6)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a1a      	ldr	r2, [pc, #104]	@ (8001b2c <HAL_TIM_Base_MspInit+0xc4>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d114      	bne.n	8001af0 <HAL_TIM_Base_MspInit+0x88>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001ac6:	4b17      	ldr	r3, [pc, #92]	@ (8001b24 <HAL_TIM_Base_MspInit+0xbc>)
 8001ac8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001aca:	4b16      	ldr	r3, [pc, #88]	@ (8001b24 <HAL_TIM_Base_MspInit+0xbc>)
 8001acc:	2110      	movs	r1, #16
 8001ace:	430a      	orrs	r2, r1
 8001ad0:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001ad2:	4b14      	ldr	r3, [pc, #80]	@ (8001b24 <HAL_TIM_Base_MspInit+0xbc>)
 8001ad4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ad6:	2210      	movs	r2, #16
 8001ad8:	4013      	ands	r3, r2
 8001ada:	60fb      	str	r3, [r7, #12]
 8001adc:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 8001ade:	2200      	movs	r2, #0
 8001ae0:	2100      	movs	r1, #0
 8001ae2:	2011      	movs	r0, #17
 8001ae4:	f001 f920 	bl	8002d28 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8001ae8:	2011      	movs	r0, #17
 8001aea:	f001 f932 	bl	8002d52 <HAL_NVIC_EnableIRQ>
}
 8001aee:	e012      	b.n	8001b16 <HAL_TIM_Base_MspInit+0xae>
  else if(tim_baseHandle->Instance==TIM15)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a0e      	ldr	r2, [pc, #56]	@ (8001b30 <HAL_TIM_Base_MspInit+0xc8>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d10d      	bne.n	8001b16 <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8001afa:	4b0a      	ldr	r3, [pc, #40]	@ (8001b24 <HAL_TIM_Base_MspInit+0xbc>)
 8001afc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001afe:	4b09      	ldr	r3, [pc, #36]	@ (8001b24 <HAL_TIM_Base_MspInit+0xbc>)
 8001b00:	2180      	movs	r1, #128	@ 0x80
 8001b02:	0249      	lsls	r1, r1, #9
 8001b04:	430a      	orrs	r2, r1
 8001b06:	641a      	str	r2, [r3, #64]	@ 0x40
 8001b08:	4b06      	ldr	r3, [pc, #24]	@ (8001b24 <HAL_TIM_Base_MspInit+0xbc>)
 8001b0a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001b0c:	2380      	movs	r3, #128	@ 0x80
 8001b0e:	025b      	lsls	r3, r3, #9
 8001b10:	4013      	ands	r3, r2
 8001b12:	60bb      	str	r3, [r7, #8]
 8001b14:	68bb      	ldr	r3, [r7, #8]
}
 8001b16:	46c0      	nop			@ (mov r8, r8)
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	b006      	add	sp, #24
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	46c0      	nop			@ (mov r8, r8)
 8001b20:	40012c00 	.word	0x40012c00
 8001b24:	40021000 	.word	0x40021000
 8001b28:	40000400 	.word	0x40000400
 8001b2c:	40001000 	.word	0x40001000
 8001b30:	40014000 	.word	0x40014000

08001b34 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001b34:	b590      	push	{r4, r7, lr}
 8001b36:	b08b      	sub	sp, #44	@ 0x2c
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b3c:	2414      	movs	r4, #20
 8001b3e:	193b      	adds	r3, r7, r4
 8001b40:	0018      	movs	r0, r3
 8001b42:	2314      	movs	r3, #20
 8001b44:	001a      	movs	r2, r3
 8001b46:	2100      	movs	r1, #0
 8001b48:	f006 f8fc 	bl	8007d44 <memset>
  if(timHandle->Instance==TIM1)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a3e      	ldr	r2, [pc, #248]	@ (8001c4c <HAL_TIM_MspPostInit+0x118>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d124      	bne.n	8001ba0 <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b56:	4b3e      	ldr	r3, [pc, #248]	@ (8001c50 <HAL_TIM_MspPostInit+0x11c>)
 8001b58:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001b5a:	4b3d      	ldr	r3, [pc, #244]	@ (8001c50 <HAL_TIM_MspPostInit+0x11c>)
 8001b5c:	2101      	movs	r1, #1
 8001b5e:	430a      	orrs	r2, r1
 8001b60:	635a      	str	r2, [r3, #52]	@ 0x34
 8001b62:	4b3b      	ldr	r3, [pc, #236]	@ (8001c50 <HAL_TIM_MspPostInit+0x11c>)
 8001b64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b66:	2201      	movs	r2, #1
 8001b68:	4013      	ands	r3, r2
 8001b6a:	613b      	str	r3, [r7, #16]
 8001b6c:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = PIEZO_PWM_Pin;
 8001b6e:	193b      	adds	r3, r7, r4
 8001b70:	2280      	movs	r2, #128	@ 0x80
 8001b72:	0052      	lsls	r2, r2, #1
 8001b74:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b76:	0021      	movs	r1, r4
 8001b78:	187b      	adds	r3, r7, r1
 8001b7a:	2202      	movs	r2, #2
 8001b7c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b7e:	187b      	adds	r3, r7, r1
 8001b80:	2200      	movs	r2, #0
 8001b82:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b84:	187b      	adds	r3, r7, r1
 8001b86:	2200      	movs	r2, #0
 8001b88:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001b8a:	187b      	adds	r3, r7, r1
 8001b8c:	2202      	movs	r2, #2
 8001b8e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(PIEZO_PWM_GPIO_Port, &GPIO_InitStruct);
 8001b90:	187a      	adds	r2, r7, r1
 8001b92:	23a0      	movs	r3, #160	@ 0xa0
 8001b94:	05db      	lsls	r3, r3, #23
 8001b96:	0011      	movs	r1, r2
 8001b98:	0018      	movs	r0, r3
 8001b9a:	f001 f9c3 	bl	8002f24 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8001b9e:	e050      	b.n	8001c42 <HAL_TIM_MspPostInit+0x10e>
  else if(timHandle->Instance==TIM3)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a2b      	ldr	r2, [pc, #172]	@ (8001c54 <HAL_TIM_MspPostInit+0x120>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d123      	bne.n	8001bf2 <HAL_TIM_MspPostInit+0xbe>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001baa:	4b29      	ldr	r3, [pc, #164]	@ (8001c50 <HAL_TIM_MspPostInit+0x11c>)
 8001bac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001bae:	4b28      	ldr	r3, [pc, #160]	@ (8001c50 <HAL_TIM_MspPostInit+0x11c>)
 8001bb0:	2101      	movs	r1, #1
 8001bb2:	430a      	orrs	r2, r1
 8001bb4:	635a      	str	r2, [r3, #52]	@ 0x34
 8001bb6:	4b26      	ldr	r3, [pc, #152]	@ (8001c50 <HAL_TIM_MspPostInit+0x11c>)
 8001bb8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001bba:	2201      	movs	r2, #1
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	60fb      	str	r3, [r7, #12]
 8001bc0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = WPT_PWM_Pin;
 8001bc2:	2114      	movs	r1, #20
 8001bc4:	187b      	adds	r3, r7, r1
 8001bc6:	2240      	movs	r2, #64	@ 0x40
 8001bc8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bca:	187b      	adds	r3, r7, r1
 8001bcc:	2202      	movs	r2, #2
 8001bce:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd0:	187b      	adds	r3, r7, r1
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bd6:	187b      	adds	r3, r7, r1
 8001bd8:	2200      	movs	r2, #0
 8001bda:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8001bdc:	187b      	adds	r3, r7, r1
 8001bde:	2201      	movs	r2, #1
 8001be0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(WPT_PWM_GPIO_Port, &GPIO_InitStruct);
 8001be2:	187a      	adds	r2, r7, r1
 8001be4:	23a0      	movs	r3, #160	@ 0xa0
 8001be6:	05db      	lsls	r3, r3, #23
 8001be8:	0011      	movs	r1, r2
 8001bea:	0018      	movs	r0, r3
 8001bec:	f001 f99a 	bl	8002f24 <HAL_GPIO_Init>
}
 8001bf0:	e027      	b.n	8001c42 <HAL_TIM_MspPostInit+0x10e>
  else if(timHandle->Instance==TIM15)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a18      	ldr	r2, [pc, #96]	@ (8001c58 <HAL_TIM_MspPostInit+0x124>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d122      	bne.n	8001c42 <HAL_TIM_MspPostInit+0x10e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bfc:	4b14      	ldr	r3, [pc, #80]	@ (8001c50 <HAL_TIM_MspPostInit+0x11c>)
 8001bfe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001c00:	4b13      	ldr	r3, [pc, #76]	@ (8001c50 <HAL_TIM_MspPostInit+0x11c>)
 8001c02:	2101      	movs	r1, #1
 8001c04:	430a      	orrs	r2, r1
 8001c06:	635a      	str	r2, [r3, #52]	@ 0x34
 8001c08:	4b11      	ldr	r3, [pc, #68]	@ (8001c50 <HAL_TIM_MspPostInit+0x11c>)
 8001c0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	4013      	ands	r3, r2
 8001c10:	60bb      	str	r3, [r7, #8]
 8001c12:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = VBOOST_CAL_PWM_Pin;
 8001c14:	2114      	movs	r1, #20
 8001c16:	187b      	adds	r3, r7, r1
 8001c18:	2202      	movs	r2, #2
 8001c1a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c1c:	187b      	adds	r3, r7, r1
 8001c1e:	2202      	movs	r2, #2
 8001c20:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c22:	187b      	adds	r3, r7, r1
 8001c24:	2200      	movs	r2, #0
 8001c26:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c28:	187b      	adds	r3, r7, r1
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM15;
 8001c2e:	187b      	adds	r3, r7, r1
 8001c30:	2205      	movs	r2, #5
 8001c32:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(VBOOST_CAL_PWM_GPIO_Port, &GPIO_InitStruct);
 8001c34:	187a      	adds	r2, r7, r1
 8001c36:	23a0      	movs	r3, #160	@ 0xa0
 8001c38:	05db      	lsls	r3, r3, #23
 8001c3a:	0011      	movs	r1, r2
 8001c3c:	0018      	movs	r0, r3
 8001c3e:	f001 f971 	bl	8002f24 <HAL_GPIO_Init>
}
 8001c42:	46c0      	nop			@ (mov r8, r8)
 8001c44:	46bd      	mov	sp, r7
 8001c46:	b00b      	add	sp, #44	@ 0x2c
 8001c48:	bd90      	pop	{r4, r7, pc}
 8001c4a:	46c0      	nop			@ (mov r8, r8)
 8001c4c:	40012c00 	.word	0x40012c00
 8001c50:	40021000 	.word	0x40021000
 8001c54:	40000400 	.word	0x40000400
 8001c58:	40014000 	.word	0x40014000

08001c5c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001c60:	4b22      	ldr	r3, [pc, #136]	@ (8001cec <MX_USART1_UART_Init+0x90>)
 8001c62:	4a23      	ldr	r2, [pc, #140]	@ (8001cf0 <MX_USART1_UART_Init+0x94>)
 8001c64:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 6553;
 8001c66:	4b21      	ldr	r3, [pc, #132]	@ (8001cec <MX_USART1_UART_Init+0x90>)
 8001c68:	4a22      	ldr	r2, [pc, #136]	@ (8001cf4 <MX_USART1_UART_Init+0x98>)
 8001c6a:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001c6c:	4b1f      	ldr	r3, [pc, #124]	@ (8001cec <MX_USART1_UART_Init+0x90>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001c72:	4b1e      	ldr	r3, [pc, #120]	@ (8001cec <MX_USART1_UART_Init+0x90>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001c78:	4b1c      	ldr	r3, [pc, #112]	@ (8001cec <MX_USART1_UART_Init+0x90>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001c7e:	4b1b      	ldr	r3, [pc, #108]	@ (8001cec <MX_USART1_UART_Init+0x90>)
 8001c80:	220c      	movs	r2, #12
 8001c82:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c84:	4b19      	ldr	r3, [pc, #100]	@ (8001cec <MX_USART1_UART_Init+0x90>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c8a:	4b18      	ldr	r3, [pc, #96]	@ (8001cec <MX_USART1_UART_Init+0x90>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c90:	4b16      	ldr	r3, [pc, #88]	@ (8001cec <MX_USART1_UART_Init+0x90>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001c96:	4b15      	ldr	r3, [pc, #84]	@ (8001cec <MX_USART1_UART_Init+0x90>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c9c:	4b13      	ldr	r3, [pc, #76]	@ (8001cec <MX_USART1_UART_Init+0x90>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001ca2:	4b12      	ldr	r3, [pc, #72]	@ (8001cec <MX_USART1_UART_Init+0x90>)
 8001ca4:	0018      	movs	r0, r3
 8001ca6:	f003 fb2d 	bl	8005304 <HAL_UART_Init>
 8001caa:	1e03      	subs	r3, r0, #0
 8001cac:	d001      	beq.n	8001cb2 <MX_USART1_UART_Init+0x56>
  {
    Error_Handler();
 8001cae:	f7ff fbb8 	bl	8001422 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001cb2:	4b0e      	ldr	r3, [pc, #56]	@ (8001cec <MX_USART1_UART_Init+0x90>)
 8001cb4:	2100      	movs	r1, #0
 8001cb6:	0018      	movs	r0, r3
 8001cb8:	f004 fb2a 	bl	8006310 <HAL_UARTEx_SetTxFifoThreshold>
 8001cbc:	1e03      	subs	r3, r0, #0
 8001cbe:	d001      	beq.n	8001cc4 <MX_USART1_UART_Init+0x68>
  {
    Error_Handler();
 8001cc0:	f7ff fbaf 	bl	8001422 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001cc4:	4b09      	ldr	r3, [pc, #36]	@ (8001cec <MX_USART1_UART_Init+0x90>)
 8001cc6:	2100      	movs	r1, #0
 8001cc8:	0018      	movs	r0, r3
 8001cca:	f004 fb61 	bl	8006390 <HAL_UARTEx_SetRxFifoThreshold>
 8001cce:	1e03      	subs	r3, r0, #0
 8001cd0:	d001      	beq.n	8001cd6 <MX_USART1_UART_Init+0x7a>
  {
    Error_Handler();
 8001cd2:	f7ff fba6 	bl	8001422 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001cd6:	4b05      	ldr	r3, [pc, #20]	@ (8001cec <MX_USART1_UART_Init+0x90>)
 8001cd8:	0018      	movs	r0, r3
 8001cda:	f004 fadf 	bl	800629c <HAL_UARTEx_DisableFifoMode>
 8001cde:	1e03      	subs	r3, r0, #0
 8001ce0:	d001      	beq.n	8001ce6 <MX_USART1_UART_Init+0x8a>
  {
    Error_Handler();
 8001ce2:	f7ff fb9e 	bl	8001422 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001ce6:	46c0      	nop			@ (mov r8, r8)
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	20000458 	.word	0x20000458
 8001cf0:	40013800 	.word	0x40013800
 8001cf4:	00001999 	.word	0x00001999

08001cf8 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001cfc:	4b16      	ldr	r3, [pc, #88]	@ (8001d58 <MX_USART3_UART_Init+0x60>)
 8001cfe:	4a17      	ldr	r2, [pc, #92]	@ (8001d5c <MX_USART3_UART_Init+0x64>)
 8001d00:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001d02:	4b15      	ldr	r3, [pc, #84]	@ (8001d58 <MX_USART3_UART_Init+0x60>)
 8001d04:	22e1      	movs	r2, #225	@ 0xe1
 8001d06:	0252      	lsls	r2, r2, #9
 8001d08:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001d0a:	4b13      	ldr	r3, [pc, #76]	@ (8001d58 <MX_USART3_UART_Init+0x60>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001d10:	4b11      	ldr	r3, [pc, #68]	@ (8001d58 <MX_USART3_UART_Init+0x60>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001d16:	4b10      	ldr	r3, [pc, #64]	@ (8001d58 <MX_USART3_UART_Init+0x60>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001d1c:	4b0e      	ldr	r3, [pc, #56]	@ (8001d58 <MX_USART3_UART_Init+0x60>)
 8001d1e:	220c      	movs	r2, #12
 8001d20:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d22:	4b0d      	ldr	r3, [pc, #52]	@ (8001d58 <MX_USART3_UART_Init+0x60>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d28:	4b0b      	ldr	r3, [pc, #44]	@ (8001d58 <MX_USART3_UART_Init+0x60>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d2e:	4b0a      	ldr	r3, [pc, #40]	@ (8001d58 <MX_USART3_UART_Init+0x60>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001d34:	4b08      	ldr	r3, [pc, #32]	@ (8001d58 <MX_USART3_UART_Init+0x60>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d3a:	4b07      	ldr	r3, [pc, #28]	@ (8001d58 <MX_USART3_UART_Init+0x60>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001d40:	4b05      	ldr	r3, [pc, #20]	@ (8001d58 <MX_USART3_UART_Init+0x60>)
 8001d42:	0018      	movs	r0, r3
 8001d44:	f003 fade 	bl	8005304 <HAL_UART_Init>
 8001d48:	1e03      	subs	r3, r0, #0
 8001d4a:	d001      	beq.n	8001d50 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001d4c:	f7ff fb69 	bl	8001422 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001d50:	46c0      	nop			@ (mov r8, r8)
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	46c0      	nop			@ (mov r8, r8)
 8001d58:	200004ec 	.word	0x200004ec
 8001d5c:	40004800 	.word	0x40004800

08001d60 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001d60:	b590      	push	{r4, r7, lr}
 8001d62:	b093      	sub	sp, #76	@ 0x4c
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d68:	2334      	movs	r3, #52	@ 0x34
 8001d6a:	18fb      	adds	r3, r7, r3
 8001d6c:	0018      	movs	r0, r3
 8001d6e:	2314      	movs	r3, #20
 8001d70:	001a      	movs	r2, r3
 8001d72:	2100      	movs	r1, #0
 8001d74:	f005 ffe6 	bl	8007d44 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d78:	2418      	movs	r4, #24
 8001d7a:	193b      	adds	r3, r7, r4
 8001d7c:	0018      	movs	r0, r3
 8001d7e:	231c      	movs	r3, #28
 8001d80:	001a      	movs	r2, r3
 8001d82:	2100      	movs	r1, #0
 8001d84:	f005 ffde 	bl	8007d44 <memset>
  if(uartHandle->Instance==USART1)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a46      	ldr	r2, [pc, #280]	@ (8001ea8 <HAL_UART_MspInit+0x148>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d148      	bne.n	8001e24 <HAL_UART_MspInit+0xc4>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001d92:	193b      	adds	r3, r7, r4
 8001d94:	2201      	movs	r2, #1
 8001d96:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8001d98:	193b      	adds	r3, r7, r4
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d9e:	193b      	adds	r3, r7, r4
 8001da0:	0018      	movs	r0, r3
 8001da2:	f002 f8e7 	bl	8003f74 <HAL_RCCEx_PeriphCLKConfig>
 8001da6:	1e03      	subs	r3, r0, #0
 8001da8:	d001      	beq.n	8001dae <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001daa:	f7ff fb3a 	bl	8001422 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001dae:	4b3f      	ldr	r3, [pc, #252]	@ (8001eac <HAL_UART_MspInit+0x14c>)
 8001db0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001db2:	4b3e      	ldr	r3, [pc, #248]	@ (8001eac <HAL_UART_MspInit+0x14c>)
 8001db4:	2180      	movs	r1, #128	@ 0x80
 8001db6:	01c9      	lsls	r1, r1, #7
 8001db8:	430a      	orrs	r2, r1
 8001dba:	641a      	str	r2, [r3, #64]	@ 0x40
 8001dbc:	4b3b      	ldr	r3, [pc, #236]	@ (8001eac <HAL_UART_MspInit+0x14c>)
 8001dbe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001dc0:	2380      	movs	r3, #128	@ 0x80
 8001dc2:	01db      	lsls	r3, r3, #7
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	617b      	str	r3, [r7, #20]
 8001dc8:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dca:	4b38      	ldr	r3, [pc, #224]	@ (8001eac <HAL_UART_MspInit+0x14c>)
 8001dcc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001dce:	4b37      	ldr	r3, [pc, #220]	@ (8001eac <HAL_UART_MspInit+0x14c>)
 8001dd0:	2101      	movs	r1, #1
 8001dd2:	430a      	orrs	r2, r1
 8001dd4:	635a      	str	r2, [r3, #52]	@ 0x34
 8001dd6:	4b35      	ldr	r3, [pc, #212]	@ (8001eac <HAL_UART_MspInit+0x14c>)
 8001dd8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001dda:	2201      	movs	r2, #1
 8001ddc:	4013      	ands	r3, r2
 8001dde:	613b      	str	r3, [r7, #16]
 8001de0:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = IR_UART_TX_Pin|IR_UART_RX_Pin;
 8001de2:	2134      	movs	r1, #52	@ 0x34
 8001de4:	187b      	adds	r3, r7, r1
 8001de6:	22c0      	movs	r2, #192	@ 0xc0
 8001de8:	00d2      	lsls	r2, r2, #3
 8001dea:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dec:	187b      	adds	r3, r7, r1
 8001dee:	2202      	movs	r2, #2
 8001df0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df2:	187b      	adds	r3, r7, r1
 8001df4:	2200      	movs	r2, #0
 8001df6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001df8:	187b      	adds	r3, r7, r1
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8001dfe:	187b      	adds	r3, r7, r1
 8001e00:	2201      	movs	r2, #1
 8001e02:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e04:	187a      	adds	r2, r7, r1
 8001e06:	23a0      	movs	r3, #160	@ 0xa0
 8001e08:	05db      	lsls	r3, r3, #23
 8001e0a:	0011      	movs	r1, r2
 8001e0c:	0018      	movs	r0, r3
 8001e0e:	f001 f889 	bl	8002f24 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 8001e12:	2200      	movs	r2, #0
 8001e14:	2101      	movs	r1, #1
 8001e16:	201b      	movs	r0, #27
 8001e18:	f000 ff86 	bl	8002d28 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001e1c:	201b      	movs	r0, #27
 8001e1e:	f000 ff98 	bl	8002d52 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_4_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001e22:	e03c      	b.n	8001e9e <HAL_UART_MspInit+0x13e>
  else if(uartHandle->Instance==USART3)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a21      	ldr	r2, [pc, #132]	@ (8001eb0 <HAL_UART_MspInit+0x150>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d137      	bne.n	8001e9e <HAL_UART_MspInit+0x13e>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001e2e:	4b1f      	ldr	r3, [pc, #124]	@ (8001eac <HAL_UART_MspInit+0x14c>)
 8001e30:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001e32:	4b1e      	ldr	r3, [pc, #120]	@ (8001eac <HAL_UART_MspInit+0x14c>)
 8001e34:	2180      	movs	r1, #128	@ 0x80
 8001e36:	02c9      	lsls	r1, r1, #11
 8001e38:	430a      	orrs	r2, r1
 8001e3a:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001e3c:	4b1b      	ldr	r3, [pc, #108]	@ (8001eac <HAL_UART_MspInit+0x14c>)
 8001e3e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001e40:	2380      	movs	r3, #128	@ 0x80
 8001e42:	02db      	lsls	r3, r3, #11
 8001e44:	4013      	ands	r3, r2
 8001e46:	60fb      	str	r3, [r7, #12]
 8001e48:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e4a:	4b18      	ldr	r3, [pc, #96]	@ (8001eac <HAL_UART_MspInit+0x14c>)
 8001e4c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001e4e:	4b17      	ldr	r3, [pc, #92]	@ (8001eac <HAL_UART_MspInit+0x14c>)
 8001e50:	2102      	movs	r1, #2
 8001e52:	430a      	orrs	r2, r1
 8001e54:	635a      	str	r2, [r3, #52]	@ 0x34
 8001e56:	4b15      	ldr	r3, [pc, #84]	@ (8001eac <HAL_UART_MspInit+0x14c>)
 8001e58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e5a:	2202      	movs	r2, #2
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	60bb      	str	r3, [r7, #8]
 8001e60:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = DEBUG_RX_Pin|DEBUG_TX_Pin;
 8001e62:	2134      	movs	r1, #52	@ 0x34
 8001e64:	187b      	adds	r3, r7, r1
 8001e66:	4a13      	ldr	r2, [pc, #76]	@ (8001eb4 <HAL_UART_MspInit+0x154>)
 8001e68:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e6a:	187b      	adds	r3, r7, r1
 8001e6c:	2202      	movs	r2, #2
 8001e6e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e70:	187b      	adds	r3, r7, r1
 8001e72:	2200      	movs	r2, #0
 8001e74:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e76:	187b      	adds	r3, r7, r1
 8001e78:	2200      	movs	r2, #0
 8001e7a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 8001e7c:	187b      	adds	r3, r7, r1
 8001e7e:	2204      	movs	r2, #4
 8001e80:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e82:	187b      	adds	r3, r7, r1
 8001e84:	4a0c      	ldr	r2, [pc, #48]	@ (8001eb8 <HAL_UART_MspInit+0x158>)
 8001e86:	0019      	movs	r1, r3
 8001e88:	0010      	movs	r0, r2
 8001e8a:	f001 f84b 	bl	8002f24 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_4_IRQn, 0, 0);
 8001e8e:	2200      	movs	r2, #0
 8001e90:	2100      	movs	r1, #0
 8001e92:	201d      	movs	r0, #29
 8001e94:	f000 ff48 	bl	8002d28 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_IRQn);
 8001e98:	201d      	movs	r0, #29
 8001e9a:	f000 ff5a 	bl	8002d52 <HAL_NVIC_EnableIRQ>
}
 8001e9e:	46c0      	nop			@ (mov r8, r8)
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	b013      	add	sp, #76	@ 0x4c
 8001ea4:	bd90      	pop	{r4, r7, pc}
 8001ea6:	46c0      	nop			@ (mov r8, r8)
 8001ea8:	40013800 	.word	0x40013800
 8001eac:	40021000 	.word	0x40021000
 8001eb0:	40004800 	.word	0x40004800
 8001eb4:	00000401 	.word	0x00000401
 8001eb8:	50000400 	.word	0x50000400

08001ebc <DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001ebc:	e7fe      	b.n	8001ebc <DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler>
	...

08001ec0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b082      	sub	sp, #8
 8001ec4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001ec6:	1dfb      	adds	r3, r7, #7
 8001ec8:	2200      	movs	r2, #0
 8001eca:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ecc:	4b0b      	ldr	r3, [pc, #44]	@ (8001efc <HAL_Init+0x3c>)
 8001ece:	681a      	ldr	r2, [r3, #0]
 8001ed0:	4b0a      	ldr	r3, [pc, #40]	@ (8001efc <HAL_Init+0x3c>)
 8001ed2:	2180      	movs	r1, #128	@ 0x80
 8001ed4:	0049      	lsls	r1, r1, #1
 8001ed6:	430a      	orrs	r2, r1
 8001ed8:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001eda:	2003      	movs	r0, #3
 8001edc:	f000 f810 	bl	8001f00 <HAL_InitTick>
 8001ee0:	1e03      	subs	r3, r0, #0
 8001ee2:	d003      	beq.n	8001eec <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001ee4:	1dfb      	adds	r3, r7, #7
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	701a      	strb	r2, [r3, #0]
 8001eea:	e001      	b.n	8001ef0 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001eec:	f7ff faa0 	bl	8001430 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001ef0:	1dfb      	adds	r3, r7, #7
 8001ef2:	781b      	ldrb	r3, [r3, #0]
}
 8001ef4:	0018      	movs	r0, r3
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	b002      	add	sp, #8
 8001efa:	bd80      	pop	{r7, pc}
 8001efc:	40022000 	.word	0x40022000

08001f00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f00:	b590      	push	{r4, r7, lr}
 8001f02:	b085      	sub	sp, #20
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001f08:	230f      	movs	r3, #15
 8001f0a:	18fb      	adds	r3, r7, r3
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001f10:	4b1d      	ldr	r3, [pc, #116]	@ (8001f88 <HAL_InitTick+0x88>)
 8001f12:	781b      	ldrb	r3, [r3, #0]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d02b      	beq.n	8001f70 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001f18:	4b1c      	ldr	r3, [pc, #112]	@ (8001f8c <HAL_InitTick+0x8c>)
 8001f1a:	681c      	ldr	r4, [r3, #0]
 8001f1c:	4b1a      	ldr	r3, [pc, #104]	@ (8001f88 <HAL_InitTick+0x88>)
 8001f1e:	781b      	ldrb	r3, [r3, #0]
 8001f20:	0019      	movs	r1, r3
 8001f22:	23fa      	movs	r3, #250	@ 0xfa
 8001f24:	0098      	lsls	r0, r3, #2
 8001f26:	f7fe f947 	bl	80001b8 <__udivsi3>
 8001f2a:	0003      	movs	r3, r0
 8001f2c:	0019      	movs	r1, r3
 8001f2e:	0020      	movs	r0, r4
 8001f30:	f7fe f942 	bl	80001b8 <__udivsi3>
 8001f34:	0003      	movs	r3, r0
 8001f36:	0018      	movs	r0, r3
 8001f38:	f000 ff1b 	bl	8002d72 <HAL_SYSTICK_Config>
 8001f3c:	1e03      	subs	r3, r0, #0
 8001f3e:	d112      	bne.n	8001f66 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2b03      	cmp	r3, #3
 8001f44:	d80a      	bhi.n	8001f5c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f46:	6879      	ldr	r1, [r7, #4]
 8001f48:	2301      	movs	r3, #1
 8001f4a:	425b      	negs	r3, r3
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	0018      	movs	r0, r3
 8001f50:	f000 feea 	bl	8002d28 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001f54:	4b0e      	ldr	r3, [pc, #56]	@ (8001f90 <HAL_InitTick+0x90>)
 8001f56:	687a      	ldr	r2, [r7, #4]
 8001f58:	601a      	str	r2, [r3, #0]
 8001f5a:	e00d      	b.n	8001f78 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001f5c:	230f      	movs	r3, #15
 8001f5e:	18fb      	adds	r3, r7, r3
 8001f60:	2201      	movs	r2, #1
 8001f62:	701a      	strb	r2, [r3, #0]
 8001f64:	e008      	b.n	8001f78 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001f66:	230f      	movs	r3, #15
 8001f68:	18fb      	adds	r3, r7, r3
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	701a      	strb	r2, [r3, #0]
 8001f6e:	e003      	b.n	8001f78 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001f70:	230f      	movs	r3, #15
 8001f72:	18fb      	adds	r3, r7, r3
 8001f74:	2201      	movs	r2, #1
 8001f76:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001f78:	230f      	movs	r3, #15
 8001f7a:	18fb      	adds	r3, r7, r3
 8001f7c:	781b      	ldrb	r3, [r3, #0]
}
 8001f7e:	0018      	movs	r0, r3
 8001f80:	46bd      	mov	sp, r7
 8001f82:	b005      	add	sp, #20
 8001f84:	bd90      	pop	{r4, r7, pc}
 8001f86:	46c0      	nop			@ (mov r8, r8)
 8001f88:	200000c0 	.word	0x200000c0
 8001f8c:	200000b8 	.word	0x200000b8
 8001f90:	200000bc 	.word	0x200000bc

08001f94 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001f98:	4b05      	ldr	r3, [pc, #20]	@ (8001fb0 <HAL_IncTick+0x1c>)
 8001f9a:	781b      	ldrb	r3, [r3, #0]
 8001f9c:	001a      	movs	r2, r3
 8001f9e:	4b05      	ldr	r3, [pc, #20]	@ (8001fb4 <HAL_IncTick+0x20>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	18d2      	adds	r2, r2, r3
 8001fa4:	4b03      	ldr	r3, [pc, #12]	@ (8001fb4 <HAL_IncTick+0x20>)
 8001fa6:	601a      	str	r2, [r3, #0]
}
 8001fa8:	46c0      	nop			@ (mov r8, r8)
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	46c0      	nop			@ (mov r8, r8)
 8001fb0:	200000c0 	.word	0x200000c0
 8001fb4:	20000580 	.word	0x20000580

08001fb8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	af00      	add	r7, sp, #0
  return uwTick;
 8001fbc:	4b02      	ldr	r3, [pc, #8]	@ (8001fc8 <HAL_GetTick+0x10>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
}
 8001fc0:	0018      	movs	r0, r3
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	46c0      	nop			@ (mov r8, r8)
 8001fc8:	20000580 	.word	0x20000580

08001fcc <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b082      	sub	sp, #8
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8001fd4:	4b06      	ldr	r3, [pc, #24]	@ (8001ff0 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a06      	ldr	r2, [pc, #24]	@ (8001ff4 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8001fda:	4013      	ands	r3, r2
 8001fdc:	0019      	movs	r1, r3
 8001fde:	4b04      	ldr	r3, [pc, #16]	@ (8001ff0 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8001fe0:	687a      	ldr	r2, [r7, #4]
 8001fe2:	430a      	orrs	r2, r1
 8001fe4:	601a      	str	r2, [r3, #0]
}
 8001fe6:	46c0      	nop			@ (mov r8, r8)
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	b002      	add	sp, #8
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	46c0      	nop			@ (mov r8, r8)
 8001ff0:	40010000 	.word	0x40010000
 8001ff4:	fffff9ff 	.word	0xfffff9ff

08001ff8 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b082      	sub	sp, #8
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
 8002000:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4a05      	ldr	r2, [pc, #20]	@ (800201c <LL_ADC_SetCommonPathInternalCh+0x24>)
 8002008:	401a      	ands	r2, r3
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	431a      	orrs	r2, r3
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	601a      	str	r2, [r3, #0]
}
 8002012:	46c0      	nop			@ (mov r8, r8)
 8002014:	46bd      	mov	sp, r7
 8002016:	b002      	add	sp, #8
 8002018:	bd80      	pop	{r7, pc}
 800201a:	46c0      	nop			@ (mov r8, r8)
 800201c:	fe3fffff 	.word	0xfe3fffff

08002020 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b082      	sub	sp, #8
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681a      	ldr	r2, [r3, #0]
 800202c:	23e0      	movs	r3, #224	@ 0xe0
 800202e:	045b      	lsls	r3, r3, #17
 8002030:	4013      	ands	r3, r2
}
 8002032:	0018      	movs	r0, r3
 8002034:	46bd      	mov	sp, r7
 8002036:	b002      	add	sp, #8
 8002038:	bd80      	pop	{r7, pc}

0800203a <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 800203a:	b580      	push	{r7, lr}
 800203c:	b084      	sub	sp, #16
 800203e:	af00      	add	r7, sp, #0
 8002040:	60f8      	str	r0, [r7, #12]
 8002042:	60b9      	str	r1, [r7, #8]
 8002044:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	695b      	ldr	r3, [r3, #20]
 800204a:	68ba      	ldr	r2, [r7, #8]
 800204c:	2104      	movs	r1, #4
 800204e:	400a      	ands	r2, r1
 8002050:	2107      	movs	r1, #7
 8002052:	4091      	lsls	r1, r2
 8002054:	000a      	movs	r2, r1
 8002056:	43d2      	mvns	r2, r2
 8002058:	401a      	ands	r2, r3
 800205a:	68bb      	ldr	r3, [r7, #8]
 800205c:	2104      	movs	r1, #4
 800205e:	400b      	ands	r3, r1
 8002060:	6879      	ldr	r1, [r7, #4]
 8002062:	4099      	lsls	r1, r3
 8002064:	000b      	movs	r3, r1
 8002066:	431a      	orrs	r2, r3
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 800206c:	46c0      	nop			@ (mov r8, r8)
 800206e:	46bd      	mov	sp, r7
 8002070:	b004      	add	sp, #16
 8002072:	bd80      	pop	{r7, pc}

08002074 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b082      	sub	sp, #8
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
 800207c:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	695b      	ldr	r3, [r3, #20]
 8002082:	683a      	ldr	r2, [r7, #0]
 8002084:	2104      	movs	r1, #4
 8002086:	400a      	ands	r2, r1
 8002088:	2107      	movs	r1, #7
 800208a:	4091      	lsls	r1, r2
 800208c:	000a      	movs	r2, r1
 800208e:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	2104      	movs	r1, #4
 8002094:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8002096:	40da      	lsrs	r2, r3
 8002098:	0013      	movs	r3, r2
}
 800209a:	0018      	movs	r0, r3
 800209c:	46bd      	mov	sp, r7
 800209e:	b002      	add	sp, #8
 80020a0:	bd80      	pop	{r7, pc}

080020a2 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80020a2:	b580      	push	{r7, lr}
 80020a4:	b082      	sub	sp, #8
 80020a6:	af00      	add	r7, sp, #0
 80020a8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	68da      	ldr	r2, [r3, #12]
 80020ae:	23c0      	movs	r3, #192	@ 0xc0
 80020b0:	011b      	lsls	r3, r3, #4
 80020b2:	4013      	ands	r3, r2
 80020b4:	d101      	bne.n	80020ba <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80020b6:	2301      	movs	r3, #1
 80020b8:	e000      	b.n	80020bc <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80020ba:	2300      	movs	r3, #0
}
 80020bc:	0018      	movs	r0, r3
 80020be:	46bd      	mov	sp, r7
 80020c0:	b002      	add	sp, #8
 80020c2:	bd80      	pop	{r7, pc}

080020c4 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b084      	sub	sp, #16
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	60f8      	str	r0, [r7, #12]
 80020cc:	60b9      	str	r1, [r7, #8]
 80020ce:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020d4:	68ba      	ldr	r2, [r7, #8]
 80020d6:	211f      	movs	r1, #31
 80020d8:	400a      	ands	r2, r1
 80020da:	210f      	movs	r1, #15
 80020dc:	4091      	lsls	r1, r2
 80020de:	000a      	movs	r2, r1
 80020e0:	43d2      	mvns	r2, r2
 80020e2:	401a      	ands	r2, r3
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	0e9b      	lsrs	r3, r3, #26
 80020e8:	210f      	movs	r1, #15
 80020ea:	4019      	ands	r1, r3
 80020ec:	68bb      	ldr	r3, [r7, #8]
 80020ee:	201f      	movs	r0, #31
 80020f0:	4003      	ands	r3, r0
 80020f2:	4099      	lsls	r1, r3
 80020f4:	000b      	movs	r3, r1
 80020f6:	431a      	orrs	r2, r3
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80020fc:	46c0      	nop			@ (mov r8, r8)
 80020fe:	46bd      	mov	sp, r7
 8002100:	b004      	add	sp, #16
 8002102:	bd80      	pop	{r7, pc}

08002104 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b082      	sub	sp, #8
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
 800210c:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	035b      	lsls	r3, r3, #13
 8002116:	0b5b      	lsrs	r3, r3, #13
 8002118:	431a      	orrs	r2, r3
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800211e:	46c0      	nop			@ (mov r8, r8)
 8002120:	46bd      	mov	sp, r7
 8002122:	b002      	add	sp, #8
 8002124:	bd80      	pop	{r7, pc}

08002126 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002126:	b580      	push	{r7, lr}
 8002128:	b082      	sub	sp, #8
 800212a:	af00      	add	r7, sp, #0
 800212c:	6078      	str	r0, [r7, #4]
 800212e:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002134:	683a      	ldr	r2, [r7, #0]
 8002136:	0352      	lsls	r2, r2, #13
 8002138:	0b52      	lsrs	r2, r2, #13
 800213a:	43d2      	mvns	r2, r2
 800213c:	401a      	ands	r2, r3
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002142:	46c0      	nop			@ (mov r8, r8)
 8002144:	46bd      	mov	sp, r7
 8002146:	b002      	add	sp, #8
 8002148:	bd80      	pop	{r7, pc}

0800214a <LL_ADC_REG_GetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  */
__STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(const ADC_TypeDef *ADCx)
{
 800214a:	b580      	push	{r7, lr}
 800214c:	b082      	sub	sp, #8
 800214e:	af00      	add	r7, sp, #0
 8002150:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG));
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	68db      	ldr	r3, [r3, #12]
 8002156:	2203      	movs	r2, #3
 8002158:	4013      	ands	r3, r2
}
 800215a:	0018      	movs	r0, r3
 800215c:	46bd      	mov	sp, r7
 800215e:	b002      	add	sp, #8
 8002160:	bd80      	pop	{r7, pc}
	...

08002164 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b084      	sub	sp, #16
 8002168:	af00      	add	r7, sp, #0
 800216a:	60f8      	str	r0, [r7, #12]
 800216c:	60b9      	str	r1, [r7, #8]
 800216e:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	695b      	ldr	r3, [r3, #20]
 8002174:	68ba      	ldr	r2, [r7, #8]
 8002176:	0212      	lsls	r2, r2, #8
 8002178:	43d2      	mvns	r2, r2
 800217a:	401a      	ands	r2, r3
 800217c:	68bb      	ldr	r3, [r7, #8]
 800217e:	021b      	lsls	r3, r3, #8
 8002180:	6879      	ldr	r1, [r7, #4]
 8002182:	400b      	ands	r3, r1
 8002184:	4904      	ldr	r1, [pc, #16]	@ (8002198 <LL_ADC_SetChannelSamplingTime+0x34>)
 8002186:	400b      	ands	r3, r1
 8002188:	431a      	orrs	r2, r3
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 800218e:	46c0      	nop			@ (mov r8, r8)
 8002190:	46bd      	mov	sp, r7
 8002192:	b004      	add	sp, #16
 8002194:	bd80      	pop	{r7, pc}
 8002196:	46c0      	nop			@ (mov r8, r8)
 8002198:	07ffff00 	.word	0x07ffff00

0800219c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b082      	sub	sp, #8
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	689b      	ldr	r3, [r3, #8]
 80021a8:	4a05      	ldr	r2, [pc, #20]	@ (80021c0 <LL_ADC_EnableInternalRegulator+0x24>)
 80021aa:	4013      	ands	r3, r2
 80021ac:	2280      	movs	r2, #128	@ 0x80
 80021ae:	0552      	lsls	r2, r2, #21
 80021b0:	431a      	orrs	r2, r3
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80021b6:	46c0      	nop			@ (mov r8, r8)
 80021b8:	46bd      	mov	sp, r7
 80021ba:	b002      	add	sp, #8
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	46c0      	nop			@ (mov r8, r8)
 80021c0:	6fffffe8 	.word	0x6fffffe8

080021c4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b082      	sub	sp, #8
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	689a      	ldr	r2, [r3, #8]
 80021d0:	2380      	movs	r3, #128	@ 0x80
 80021d2:	055b      	lsls	r3, r3, #21
 80021d4:	401a      	ands	r2, r3
 80021d6:	2380      	movs	r3, #128	@ 0x80
 80021d8:	055b      	lsls	r3, r3, #21
 80021da:	429a      	cmp	r2, r3
 80021dc:	d101      	bne.n	80021e2 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 80021de:	2301      	movs	r3, #1
 80021e0:	e000      	b.n	80021e4 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 80021e2:	2300      	movs	r3, #0
}
 80021e4:	0018      	movs	r0, r3
 80021e6:	46bd      	mov	sp, r7
 80021e8:	b002      	add	sp, #8
 80021ea:	bd80      	pop	{r7, pc}

080021ec <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b082      	sub	sp, #8
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	689b      	ldr	r3, [r3, #8]
 80021f8:	2201      	movs	r2, #1
 80021fa:	4013      	ands	r3, r2
 80021fc:	2b01      	cmp	r3, #1
 80021fe:	d101      	bne.n	8002204 <LL_ADC_IsEnabled+0x18>
 8002200:	2301      	movs	r3, #1
 8002202:	e000      	b.n	8002206 <LL_ADC_IsEnabled+0x1a>
 8002204:	2300      	movs	r3, #0
}
 8002206:	0018      	movs	r0, r3
 8002208:	46bd      	mov	sp, r7
 800220a:	b002      	add	sp, #8
 800220c:	bd80      	pop	{r7, pc}

0800220e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800220e:	b580      	push	{r7, lr}
 8002210:	b082      	sub	sp, #8
 8002212:	af00      	add	r7, sp, #0
 8002214:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	689b      	ldr	r3, [r3, #8]
 800221a:	2204      	movs	r2, #4
 800221c:	4013      	ands	r3, r2
 800221e:	2b04      	cmp	r3, #4
 8002220:	d101      	bne.n	8002226 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002222:	2301      	movs	r3, #1
 8002224:	e000      	b.n	8002228 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002226:	2300      	movs	r3, #0
}
 8002228:	0018      	movs	r0, r3
 800222a:	46bd      	mov	sp, r7
 800222c:	b002      	add	sp, #8
 800222e:	bd80      	pop	{r7, pc}

08002230 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b088      	sub	sp, #32
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002238:	231f      	movs	r3, #31
 800223a:	18fb      	adds	r3, r7, r3
 800223c:	2200      	movs	r2, #0
 800223e:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 8002240:	2300      	movs	r3, #0
 8002242:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 8002244:	2300      	movs	r3, #0
 8002246:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002248:	2300      	movs	r3, #0
 800224a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d101      	bne.n	8002256 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8002252:	2301      	movs	r3, #1
 8002254:	e17f      	b.n	8002556 <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800225a:	2b00      	cmp	r3, #0
 800225c:	d10a      	bne.n	8002274 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	0018      	movs	r0, r3
 8002262:	f7fe fdd5 	bl	8000e10 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2200      	movs	r2, #0
 800226a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2254      	movs	r2, #84	@ 0x54
 8002270:	2100      	movs	r1, #0
 8002272:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	0018      	movs	r0, r3
 800227a:	f7ff ffa3 	bl	80021c4 <LL_ADC_IsInternalRegulatorEnabled>
 800227e:	1e03      	subs	r3, r0, #0
 8002280:	d115      	bne.n	80022ae <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	0018      	movs	r0, r3
 8002288:	f7ff ff88 	bl	800219c <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800228c:	4bb4      	ldr	r3, [pc, #720]	@ (8002560 <HAL_ADC_Init+0x330>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	49b4      	ldr	r1, [pc, #720]	@ (8002564 <HAL_ADC_Init+0x334>)
 8002292:	0018      	movs	r0, r3
 8002294:	f7fd ff90 	bl	80001b8 <__udivsi3>
 8002298:	0003      	movs	r3, r0
 800229a:	3301      	adds	r3, #1
 800229c:	005b      	lsls	r3, r3, #1
 800229e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80022a0:	e002      	b.n	80022a8 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	3b01      	subs	r3, #1
 80022a6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d1f9      	bne.n	80022a2 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	0018      	movs	r0, r3
 80022b4:	f7ff ff86 	bl	80021c4 <LL_ADC_IsInternalRegulatorEnabled>
 80022b8:	1e03      	subs	r3, r0, #0
 80022ba:	d10f      	bne.n	80022dc <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022c0:	2210      	movs	r2, #16
 80022c2:	431a      	orrs	r2, r3
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022cc:	2201      	movs	r2, #1
 80022ce:	431a      	orrs	r2, r3
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80022d4:	231f      	movs	r3, #31
 80022d6:	18fb      	adds	r3, r7, r3
 80022d8:	2201      	movs	r2, #1
 80022da:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	0018      	movs	r0, r3
 80022e2:	f7ff ff94 	bl	800220e <LL_ADC_REG_IsConversionOngoing>
 80022e6:	0003      	movs	r3, r0
 80022e8:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022ee:	2210      	movs	r2, #16
 80022f0:	4013      	ands	r3, r2
 80022f2:	d000      	beq.n	80022f6 <HAL_ADC_Init+0xc6>
 80022f4:	e122      	b.n	800253c <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d000      	beq.n	80022fe <HAL_ADC_Init+0xce>
 80022fc:	e11e      	b.n	800253c <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002302:	4a99      	ldr	r2, [pc, #612]	@ (8002568 <HAL_ADC_Init+0x338>)
 8002304:	4013      	ands	r3, r2
 8002306:	2202      	movs	r2, #2
 8002308:	431a      	orrs	r2, r3
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	0018      	movs	r0, r3
 8002314:	f7ff ff6a 	bl	80021ec <LL_ADC_IsEnabled>
 8002318:	1e03      	subs	r3, r0, #0
 800231a:	d000      	beq.n	800231e <HAL_ADC_Init+0xee>
 800231c:	e0ad      	b.n	800247a <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	7e1b      	ldrb	r3, [r3, #24]
 8002326:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8002328:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	7e5b      	ldrb	r3, [r3, #25]
 800232e:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002330:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	7e9b      	ldrb	r3, [r3, #26]
 8002336:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002338:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800233e:	2b00      	cmp	r3, #0
 8002340:	d002      	beq.n	8002348 <HAL_ADC_Init+0x118>
 8002342:	2380      	movs	r3, #128	@ 0x80
 8002344:	015b      	lsls	r3, r3, #5
 8002346:	e000      	b.n	800234a <HAL_ADC_Init+0x11a>
 8002348:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800234a:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002350:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	691b      	ldr	r3, [r3, #16]
 8002356:	2b00      	cmp	r3, #0
 8002358:	da04      	bge.n	8002364 <HAL_ADC_Init+0x134>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	691b      	ldr	r3, [r3, #16]
 800235e:	005b      	lsls	r3, r3, #1
 8002360:	085b      	lsrs	r3, r3, #1
 8002362:	e001      	b.n	8002368 <HAL_ADC_Init+0x138>
 8002364:	2380      	movs	r3, #128	@ 0x80
 8002366:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 8002368:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	212c      	movs	r1, #44	@ 0x2c
 800236e:	5c5b      	ldrb	r3, [r3, r1]
 8002370:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002372:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8002374:	69ba      	ldr	r2, [r7, #24]
 8002376:	4313      	orrs	r3, r2
 8002378:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2220      	movs	r2, #32
 800237e:	5c9b      	ldrb	r3, [r3, r2]
 8002380:	2b01      	cmp	r3, #1
 8002382:	d115      	bne.n	80023b0 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	7e9b      	ldrb	r3, [r3, #26]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d105      	bne.n	8002398 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 800238c:	69bb      	ldr	r3, [r7, #24]
 800238e:	2280      	movs	r2, #128	@ 0x80
 8002390:	0252      	lsls	r2, r2, #9
 8002392:	4313      	orrs	r3, r2
 8002394:	61bb      	str	r3, [r7, #24]
 8002396:	e00b      	b.n	80023b0 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800239c:	2220      	movs	r2, #32
 800239e:	431a      	orrs	r2, r3
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023a8:	2201      	movs	r2, #1
 80023aa:	431a      	orrs	r2, r3
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d00a      	beq.n	80023ce <HAL_ADC_Init+0x19e>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80023bc:	23e0      	movs	r3, #224	@ 0xe0
 80023be:	005b      	lsls	r3, r3, #1
 80023c0:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80023c6:	4313      	orrs	r3, r2
 80023c8:	69ba      	ldr	r2, [r7, #24]
 80023ca:	4313      	orrs	r3, r2
 80023cc:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	68db      	ldr	r3, [r3, #12]
 80023d4:	4a65      	ldr	r2, [pc, #404]	@ (800256c <HAL_ADC_Init+0x33c>)
 80023d6:	4013      	ands	r3, r2
 80023d8:	0019      	movs	r1, r3
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	69ba      	ldr	r2, [r7, #24]
 80023e0:	430a      	orrs	r2, r1
 80023e2:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	0f9b      	lsrs	r3, r3, #30
 80023ea:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80023f0:	4313      	orrs	r3, r2
 80023f2:	697a      	ldr	r2, [r7, #20]
 80023f4:	4313      	orrs	r3, r2
 80023f6:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	223c      	movs	r2, #60	@ 0x3c
 80023fc:	5c9b      	ldrb	r3, [r3, r2]
 80023fe:	2b01      	cmp	r3, #1
 8002400:	d111      	bne.n	8002426 <HAL_ADC_Init+0x1f6>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	0f9b      	lsrs	r3, r3, #30
 8002408:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800240e:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                      hadc->Init.Oversampling.Ratio         |
 8002414:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                      hadc->Init.Oversampling.RightBitShift |
 800241a:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	4313      	orrs	r3, r2
 8002420:	2201      	movs	r2, #1
 8002422:	4313      	orrs	r3, r2
 8002424:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	691b      	ldr	r3, [r3, #16]
 800242c:	4a50      	ldr	r2, [pc, #320]	@ (8002570 <HAL_ADC_Init+0x340>)
 800242e:	4013      	ands	r3, r2
 8002430:	0019      	movs	r1, r3
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	697a      	ldr	r2, [r7, #20]
 8002438:	430a      	orrs	r2, r1
 800243a:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	685a      	ldr	r2, [r3, #4]
 8002440:	23c0      	movs	r3, #192	@ 0xc0
 8002442:	061b      	lsls	r3, r3, #24
 8002444:	429a      	cmp	r2, r3
 8002446:	d018      	beq.n	800247a <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800244c:	2380      	movs	r3, #128	@ 0x80
 800244e:	05db      	lsls	r3, r3, #23
 8002450:	429a      	cmp	r2, r3
 8002452:	d012      	beq.n	800247a <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8002458:	2380      	movs	r3, #128	@ 0x80
 800245a:	061b      	lsls	r3, r3, #24
 800245c:	429a      	cmp	r2, r3
 800245e:	d00c      	beq.n	800247a <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8002460:	4b44      	ldr	r3, [pc, #272]	@ (8002574 <HAL_ADC_Init+0x344>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a44      	ldr	r2, [pc, #272]	@ (8002578 <HAL_ADC_Init+0x348>)
 8002466:	4013      	ands	r3, r2
 8002468:	0019      	movs	r1, r3
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	685a      	ldr	r2, [r3, #4]
 800246e:	23f0      	movs	r3, #240	@ 0xf0
 8002470:	039b      	lsls	r3, r3, #14
 8002472:	401a      	ands	r2, r3
 8002474:	4b3f      	ldr	r3, [pc, #252]	@ (8002574 <HAL_ADC_Init+0x344>)
 8002476:	430a      	orrs	r2, r1
 8002478:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6818      	ldr	r0, [r3, #0]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002482:	001a      	movs	r2, r3
 8002484:	2100      	movs	r1, #0
 8002486:	f7ff fdd8 	bl	800203a <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6818      	ldr	r0, [r3, #0]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002492:	493a      	ldr	r1, [pc, #232]	@ (800257c <HAL_ADC_Init+0x34c>)
 8002494:	001a      	movs	r2, r3
 8002496:	f7ff fdd0 	bl	800203a <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	691b      	ldr	r3, [r3, #16]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d109      	bne.n	80024b6 <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	2110      	movs	r1, #16
 80024ae:	4249      	negs	r1, r1
 80024b0:	430a      	orrs	r2, r1
 80024b2:	629a      	str	r2, [r3, #40]	@ 0x28
 80024b4:	e018      	b.n	80024e8 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	691a      	ldr	r2, [r3, #16]
 80024ba:	2380      	movs	r3, #128	@ 0x80
 80024bc:	039b      	lsls	r3, r3, #14
 80024be:	429a      	cmp	r2, r3
 80024c0:	d112      	bne.n	80024e8 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	69db      	ldr	r3, [r3, #28]
 80024cc:	3b01      	subs	r3, #1
 80024ce:	009b      	lsls	r3, r3, #2
 80024d0:	221c      	movs	r2, #28
 80024d2:	4013      	ands	r3, r2
 80024d4:	2210      	movs	r2, #16
 80024d6:	4252      	negs	r2, r2
 80024d8:	409a      	lsls	r2, r3
 80024da:	0011      	movs	r1, r2
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	430a      	orrs	r2, r1
 80024e6:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	2100      	movs	r1, #0
 80024ee:	0018      	movs	r0, r3
 80024f0:	f7ff fdc0 	bl	8002074 <LL_ADC_GetSamplingTimeCommonChannels>
 80024f4:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80024fa:	429a      	cmp	r2, r3
 80024fc:	d10b      	bne.n	8002516 <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2200      	movs	r2, #0
 8002502:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002508:	2203      	movs	r2, #3
 800250a:	4393      	bics	r3, r2
 800250c:	2201      	movs	r2, #1
 800250e:	431a      	orrs	r2, r3
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002514:	e01c      	b.n	8002550 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800251a:	2212      	movs	r2, #18
 800251c:	4393      	bics	r3, r2
 800251e:	2210      	movs	r2, #16
 8002520:	431a      	orrs	r2, r3
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800252a:	2201      	movs	r2, #1
 800252c:	431a      	orrs	r2, r3
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 8002532:	231f      	movs	r3, #31
 8002534:	18fb      	adds	r3, r7, r3
 8002536:	2201      	movs	r2, #1
 8002538:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800253a:	e009      	b.n	8002550 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002540:	2210      	movs	r2, #16
 8002542:	431a      	orrs	r2, r3
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002548:	231f      	movs	r3, #31
 800254a:	18fb      	adds	r3, r7, r3
 800254c:	2201      	movs	r2, #1
 800254e:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8002550:	231f      	movs	r3, #31
 8002552:	18fb      	adds	r3, r7, r3
 8002554:	781b      	ldrb	r3, [r3, #0]
}
 8002556:	0018      	movs	r0, r3
 8002558:	46bd      	mov	sp, r7
 800255a:	b008      	add	sp, #32
 800255c:	bd80      	pop	{r7, pc}
 800255e:	46c0      	nop			@ (mov r8, r8)
 8002560:	200000b8 	.word	0x200000b8
 8002564:	00030d40 	.word	0x00030d40
 8002568:	fffffefd 	.word	0xfffffefd
 800256c:	ffde0201 	.word	0xffde0201
 8002570:	1ffffc02 	.word	0x1ffffc02
 8002574:	40012708 	.word	0x40012708
 8002578:	ffc3ffff 	.word	0xffc3ffff
 800257c:	07ffff04 	.word	0x07ffff04

08002580 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b086      	sub	sp, #24
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002588:	2300      	movs	r3, #0
 800258a:	617b      	str	r3, [r7, #20]
  uint32_t tmp_isr = hadc->Instance->ISR;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	613b      	str	r3, [r7, #16]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800259c:	693b      	ldr	r3, [r7, #16]
 800259e:	2202      	movs	r2, #2
 80025a0:	4013      	ands	r3, r2
 80025a2:	d017      	beq.n	80025d4 <HAL_ADC_IRQHandler+0x54>
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	2202      	movs	r2, #2
 80025a8:	4013      	ands	r3, r2
 80025aa:	d013      	beq.n	80025d4 <HAL_ADC_IRQHandler+0x54>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025b0:	2210      	movs	r2, #16
 80025b2:	4013      	ands	r3, r2
 80025b4:	d106      	bne.n	80025c4 <HAL_ADC_IRQHandler+0x44>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025ba:	2280      	movs	r2, #128	@ 0x80
 80025bc:	0112      	lsls	r2, r2, #4
 80025be:	431a      	orrs	r2, r3
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	659a      	str	r2, [r3, #88]	@ 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	0018      	movs	r0, r3
 80025c8:	f000 faf2 	bl	8002bb0 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	2202      	movs	r2, #2
 80025d2:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80025d4:	693b      	ldr	r3, [r7, #16]
 80025d6:	2204      	movs	r2, #4
 80025d8:	4013      	ands	r3, r2
 80025da:	d003      	beq.n	80025e4 <HAL_ADC_IRQHandler+0x64>
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	2204      	movs	r2, #4
 80025e0:	4013      	ands	r3, r2
 80025e2:	d107      	bne.n	80025f4 <HAL_ADC_IRQHandler+0x74>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80025e4:	693b      	ldr	r3, [r7, #16]
 80025e6:	2208      	movs	r2, #8
 80025e8:	4013      	ands	r3, r2
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80025ea:	d04d      	beq.n	8002688 <HAL_ADC_IRQHandler+0x108>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	2208      	movs	r2, #8
 80025f0:	4013      	ands	r3, r2
 80025f2:	d049      	beq.n	8002688 <HAL_ADC_IRQHandler+0x108>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025f8:	2210      	movs	r2, #16
 80025fa:	4013      	ands	r3, r2
 80025fc:	d106      	bne.n	800260c <HAL_ADC_IRQHandler+0x8c>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002602:	2280      	movs	r2, #128	@ 0x80
 8002604:	0092      	lsls	r2, r2, #2
 8002606:	431a      	orrs	r2, r3
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	0018      	movs	r0, r3
 8002612:	f7ff fd46 	bl	80020a2 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002616:	1e03      	subs	r3, r0, #0
 8002618:	d02e      	beq.n	8002678 <HAL_ADC_IRQHandler+0xf8>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	7e9b      	ldrb	r3, [r3, #26]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d12a      	bne.n	8002678 <HAL_ADC_IRQHandler+0xf8>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	2208      	movs	r2, #8
 800262a:	4013      	ands	r3, r2
 800262c:	2b08      	cmp	r3, #8
 800262e:	d123      	bne.n	8002678 <HAL_ADC_IRQHandler+0xf8>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	0018      	movs	r0, r3
 8002636:	f7ff fdea 	bl	800220e <LL_ADC_REG_IsConversionOngoing>
 800263a:	1e03      	subs	r3, r0, #0
 800263c:	d110      	bne.n	8002660 <HAL_ADC_IRQHandler+0xe0>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	685a      	ldr	r2, [r3, #4]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	210c      	movs	r1, #12
 800264a:	438a      	bics	r2, r1
 800264c:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002652:	4a56      	ldr	r2, [pc, #344]	@ (80027ac <HAL_ADC_IRQHandler+0x22c>)
 8002654:	4013      	ands	r3, r2
 8002656:	2201      	movs	r2, #1
 8002658:	431a      	orrs	r2, r3
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	659a      	str	r2, [r3, #88]	@ 0x58
 800265e:	e00b      	b.n	8002678 <HAL_ADC_IRQHandler+0xf8>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002664:	2220      	movs	r2, #32
 8002666:	431a      	orrs	r2, r3
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002670:	2201      	movs	r2, #1
 8002672:	431a      	orrs	r2, r3
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	65da      	str	r2, [r3, #92]	@ 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	0018      	movs	r0, r3
 800267c:	f000 f898 	bl	80027b0 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	220c      	movs	r2, #12
 8002686:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002688:	693b      	ldr	r3, [r7, #16]
 800268a:	2280      	movs	r2, #128	@ 0x80
 800268c:	4013      	ands	r3, r2
 800268e:	d012      	beq.n	80026b6 <HAL_ADC_IRQHandler+0x136>
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	2280      	movs	r2, #128	@ 0x80
 8002694:	4013      	ands	r3, r2
 8002696:	d00e      	beq.n	80026b6 <HAL_ADC_IRQHandler+0x136>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800269c:	2280      	movs	r2, #128	@ 0x80
 800269e:	0252      	lsls	r2, r2, #9
 80026a0:	431a      	orrs	r2, r3
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	0018      	movs	r0, r3
 80026aa:	f000 f889 	bl	80027c0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	2280      	movs	r2, #128	@ 0x80
 80026b4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80026b6:	693a      	ldr	r2, [r7, #16]
 80026b8:	2380      	movs	r3, #128	@ 0x80
 80026ba:	005b      	lsls	r3, r3, #1
 80026bc:	4013      	ands	r3, r2
 80026be:	d014      	beq.n	80026ea <HAL_ADC_IRQHandler+0x16a>
 80026c0:	68fa      	ldr	r2, [r7, #12]
 80026c2:	2380      	movs	r3, #128	@ 0x80
 80026c4:	005b      	lsls	r3, r3, #1
 80026c6:	4013      	ands	r3, r2
 80026c8:	d00f      	beq.n	80026ea <HAL_ADC_IRQHandler+0x16a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026ce:	2280      	movs	r2, #128	@ 0x80
 80026d0:	0292      	lsls	r2, r2, #10
 80026d2:	431a      	orrs	r2, r3
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	0018      	movs	r0, r3
 80026dc:	f000 fa58 	bl	8002b90 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	2280      	movs	r2, #128	@ 0x80
 80026e6:	0052      	lsls	r2, r2, #1
 80026e8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80026ea:	693a      	ldr	r2, [r7, #16]
 80026ec:	2380      	movs	r3, #128	@ 0x80
 80026ee:	009b      	lsls	r3, r3, #2
 80026f0:	4013      	ands	r3, r2
 80026f2:	d014      	beq.n	800271e <HAL_ADC_IRQHandler+0x19e>
 80026f4:	68fa      	ldr	r2, [r7, #12]
 80026f6:	2380      	movs	r3, #128	@ 0x80
 80026f8:	009b      	lsls	r3, r3, #2
 80026fa:	4013      	ands	r3, r2
 80026fc:	d00f      	beq.n	800271e <HAL_ADC_IRQHandler+0x19e>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002702:	2280      	movs	r2, #128	@ 0x80
 8002704:	02d2      	lsls	r2, r2, #11
 8002706:	431a      	orrs	r2, r3
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	0018      	movs	r0, r3
 8002710:	f000 fa46 	bl	8002ba0 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	2280      	movs	r2, #128	@ 0x80
 800271a:	0092      	lsls	r2, r2, #2
 800271c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	2210      	movs	r2, #16
 8002722:	4013      	ands	r3, r2
 8002724:	d02b      	beq.n	800277e <HAL_ADC_IRQHandler+0x1fe>
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	2210      	movs	r2, #16
 800272a:	4013      	ands	r3, r2
 800272c:	d027      	beq.n	800277e <HAL_ADC_IRQHandler+0x1fe>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002732:	2b00      	cmp	r3, #0
 8002734:	d102      	bne.n	800273c <HAL_ADC_IRQHandler+0x1bc>
    {
      overrun_error = 1UL;
 8002736:	2301      	movs	r3, #1
 8002738:	617b      	str	r3, [r7, #20]
 800273a:	e008      	b.n	800274e <HAL_ADC_IRQHandler+0x1ce>
    }
    else
    {
      /* Check DMA configuration */
      if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	0018      	movs	r0, r3
 8002742:	f7ff fd02 	bl	800214a <LL_ADC_REG_GetDMATransfer>
 8002746:	1e03      	subs	r3, r0, #0
 8002748:	d001      	beq.n	800274e <HAL_ADC_IRQHandler+0x1ce>
      {
        overrun_error = 1UL;
 800274a:	2301      	movs	r3, #1
 800274c:	617b      	str	r3, [r7, #20]
      }
    }

    if (overrun_error == 1UL)
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	2b01      	cmp	r3, #1
 8002752:	d110      	bne.n	8002776 <HAL_ADC_IRQHandler+0x1f6>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002758:	2280      	movs	r2, #128	@ 0x80
 800275a:	00d2      	lsls	r2, r2, #3
 800275c:	431a      	orrs	r2, r3
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002766:	2202      	movs	r2, #2
 8002768:	431a      	orrs	r2, r3
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	65da      	str	r2, [r3, #92]	@ 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	0018      	movs	r0, r3
 8002772:	f000 f82d 	bl	80027d0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	2210      	movs	r2, #16
 800277c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check channel configuration ready flag ========== */
  if (((tmp_isr & ADC_FLAG_CCRDY) == ADC_FLAG_CCRDY) && ((tmp_ier & ADC_IT_CCRDY) == ADC_IT_CCRDY))
 800277e:	693a      	ldr	r2, [r7, #16]
 8002780:	2380      	movs	r3, #128	@ 0x80
 8002782:	019b      	lsls	r3, r3, #6
 8002784:	4013      	ands	r3, r2
 8002786:	d00d      	beq.n	80027a4 <HAL_ADC_IRQHandler+0x224>
 8002788:	68fa      	ldr	r2, [r7, #12]
 800278a:	2380      	movs	r3, #128	@ 0x80
 800278c:	019b      	lsls	r3, r3, #6
 800278e:	4013      	ands	r3, r2
 8002790:	d008      	beq.n	80027a4 <HAL_ADC_IRQHandler+0x224>
  {
    /* Channel configuration ready callback */
    HAL_ADCEx_ChannelConfigReadyCallback(hadc);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	0018      	movs	r0, r3
 8002796:	f000 fa13 	bl	8002bc0 <HAL_ADCEx_ChannelConfigReadyCallback>

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_CCRDY);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	2280      	movs	r2, #128	@ 0x80
 80027a0:	0192      	lsls	r2, r2, #6
 80027a2:	601a      	str	r2, [r3, #0]
  }
}
 80027a4:	46c0      	nop			@ (mov r8, r8)
 80027a6:	46bd      	mov	sp, r7
 80027a8:	b006      	add	sp, #24
 80027aa:	bd80      	pop	{r7, pc}
 80027ac:	fffffefe 	.word	0xfffffefe

080027b0 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b082      	sub	sp, #8
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80027b8:	46c0      	nop			@ (mov r8, r8)
 80027ba:	46bd      	mov	sp, r7
 80027bc:	b002      	add	sp, #8
 80027be:	bd80      	pop	{r7, pc}

080027c0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b082      	sub	sp, #8
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80027c8:	46c0      	nop			@ (mov r8, r8)
 80027ca:	46bd      	mov	sp, r7
 80027cc:	b002      	add	sp, #8
 80027ce:	bd80      	pop	{r7, pc}

080027d0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b082      	sub	sp, #8
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80027d8:	46c0      	nop			@ (mov r8, r8)
 80027da:	46bd      	mov	sp, r7
 80027dc:	b002      	add	sp, #8
 80027de:	bd80      	pop	{r7, pc}

080027e0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b086      	sub	sp, #24
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
 80027e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027ea:	2317      	movs	r3, #23
 80027ec:	18fb      	adds	r3, r7, r3
 80027ee:	2200      	movs	r2, #0
 80027f0:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80027f2:	2300      	movs	r3, #0
 80027f4:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2254      	movs	r2, #84	@ 0x54
 80027fa:	5c9b      	ldrb	r3, [r3, r2]
 80027fc:	2b01      	cmp	r3, #1
 80027fe:	d101      	bne.n	8002804 <HAL_ADC_ConfigChannel+0x24>
 8002800:	2302      	movs	r3, #2
 8002802:	e1c0      	b.n	8002b86 <HAL_ADC_ConfigChannel+0x3a6>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2254      	movs	r2, #84	@ 0x54
 8002808:	2101      	movs	r1, #1
 800280a:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	0018      	movs	r0, r3
 8002812:	f7ff fcfc 	bl	800220e <LL_ADC_REG_IsConversionOngoing>
 8002816:	1e03      	subs	r3, r0, #0
 8002818:	d000      	beq.n	800281c <HAL_ADC_ConfigChannel+0x3c>
 800281a:	e1a3      	b.n	8002b64 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	2b02      	cmp	r3, #2
 8002822:	d100      	bne.n	8002826 <HAL_ADC_ConfigChannel+0x46>
 8002824:	e143      	b.n	8002aae <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	691a      	ldr	r2, [r3, #16]
 800282a:	2380      	movs	r3, #128	@ 0x80
 800282c:	061b      	lsls	r3, r3, #24
 800282e:	429a      	cmp	r2, r3
 8002830:	d004      	beq.n	800283c <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002836:	4ac1      	ldr	r2, [pc, #772]	@ (8002b3c <HAL_ADC_ConfigChannel+0x35c>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d108      	bne.n	800284e <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681a      	ldr	r2, [r3, #0]
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	0019      	movs	r1, r3
 8002846:	0010      	movs	r0, r2
 8002848:	f7ff fc5c 	bl	8002104 <LL_ADC_REG_SetSequencerChAdd>
 800284c:	e0c9      	b.n	80029e2 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	211f      	movs	r1, #31
 8002858:	400b      	ands	r3, r1
 800285a:	210f      	movs	r1, #15
 800285c:	4099      	lsls	r1, r3
 800285e:	000b      	movs	r3, r1
 8002860:	43db      	mvns	r3, r3
 8002862:	4013      	ands	r3, r2
 8002864:	0019      	movs	r1, r3
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	035b      	lsls	r3, r3, #13
 800286c:	0b5b      	lsrs	r3, r3, #13
 800286e:	d105      	bne.n	800287c <HAL_ADC_ConfigChannel+0x9c>
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	0e9b      	lsrs	r3, r3, #26
 8002876:	221f      	movs	r2, #31
 8002878:	4013      	ands	r3, r2
 800287a:	e098      	b.n	80029ae <HAL_ADC_ConfigChannel+0x1ce>
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	2201      	movs	r2, #1
 8002882:	4013      	ands	r3, r2
 8002884:	d000      	beq.n	8002888 <HAL_ADC_ConfigChannel+0xa8>
 8002886:	e091      	b.n	80029ac <HAL_ADC_ConfigChannel+0x1cc>
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	2202      	movs	r2, #2
 800288e:	4013      	ands	r3, r2
 8002890:	d000      	beq.n	8002894 <HAL_ADC_ConfigChannel+0xb4>
 8002892:	e089      	b.n	80029a8 <HAL_ADC_ConfigChannel+0x1c8>
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	2204      	movs	r2, #4
 800289a:	4013      	ands	r3, r2
 800289c:	d000      	beq.n	80028a0 <HAL_ADC_ConfigChannel+0xc0>
 800289e:	e081      	b.n	80029a4 <HAL_ADC_ConfigChannel+0x1c4>
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	2208      	movs	r2, #8
 80028a6:	4013      	ands	r3, r2
 80028a8:	d000      	beq.n	80028ac <HAL_ADC_ConfigChannel+0xcc>
 80028aa:	e079      	b.n	80029a0 <HAL_ADC_ConfigChannel+0x1c0>
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	2210      	movs	r2, #16
 80028b2:	4013      	ands	r3, r2
 80028b4:	d000      	beq.n	80028b8 <HAL_ADC_ConfigChannel+0xd8>
 80028b6:	e071      	b.n	800299c <HAL_ADC_ConfigChannel+0x1bc>
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	2220      	movs	r2, #32
 80028be:	4013      	ands	r3, r2
 80028c0:	d000      	beq.n	80028c4 <HAL_ADC_ConfigChannel+0xe4>
 80028c2:	e069      	b.n	8002998 <HAL_ADC_ConfigChannel+0x1b8>
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	2240      	movs	r2, #64	@ 0x40
 80028ca:	4013      	ands	r3, r2
 80028cc:	d000      	beq.n	80028d0 <HAL_ADC_ConfigChannel+0xf0>
 80028ce:	e061      	b.n	8002994 <HAL_ADC_ConfigChannel+0x1b4>
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	2280      	movs	r2, #128	@ 0x80
 80028d6:	4013      	ands	r3, r2
 80028d8:	d000      	beq.n	80028dc <HAL_ADC_ConfigChannel+0xfc>
 80028da:	e059      	b.n	8002990 <HAL_ADC_ConfigChannel+0x1b0>
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	681a      	ldr	r2, [r3, #0]
 80028e0:	2380      	movs	r3, #128	@ 0x80
 80028e2:	005b      	lsls	r3, r3, #1
 80028e4:	4013      	ands	r3, r2
 80028e6:	d151      	bne.n	800298c <HAL_ADC_ConfigChannel+0x1ac>
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	681a      	ldr	r2, [r3, #0]
 80028ec:	2380      	movs	r3, #128	@ 0x80
 80028ee:	009b      	lsls	r3, r3, #2
 80028f0:	4013      	ands	r3, r2
 80028f2:	d149      	bne.n	8002988 <HAL_ADC_ConfigChannel+0x1a8>
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	681a      	ldr	r2, [r3, #0]
 80028f8:	2380      	movs	r3, #128	@ 0x80
 80028fa:	00db      	lsls	r3, r3, #3
 80028fc:	4013      	ands	r3, r2
 80028fe:	d141      	bne.n	8002984 <HAL_ADC_ConfigChannel+0x1a4>
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	681a      	ldr	r2, [r3, #0]
 8002904:	2380      	movs	r3, #128	@ 0x80
 8002906:	011b      	lsls	r3, r3, #4
 8002908:	4013      	ands	r3, r2
 800290a:	d139      	bne.n	8002980 <HAL_ADC_ConfigChannel+0x1a0>
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	681a      	ldr	r2, [r3, #0]
 8002910:	2380      	movs	r3, #128	@ 0x80
 8002912:	015b      	lsls	r3, r3, #5
 8002914:	4013      	ands	r3, r2
 8002916:	d131      	bne.n	800297c <HAL_ADC_ConfigChannel+0x19c>
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	681a      	ldr	r2, [r3, #0]
 800291c:	2380      	movs	r3, #128	@ 0x80
 800291e:	019b      	lsls	r3, r3, #6
 8002920:	4013      	ands	r3, r2
 8002922:	d129      	bne.n	8002978 <HAL_ADC_ConfigChannel+0x198>
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	681a      	ldr	r2, [r3, #0]
 8002928:	2380      	movs	r3, #128	@ 0x80
 800292a:	01db      	lsls	r3, r3, #7
 800292c:	4013      	ands	r3, r2
 800292e:	d121      	bne.n	8002974 <HAL_ADC_ConfigChannel+0x194>
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	681a      	ldr	r2, [r3, #0]
 8002934:	2380      	movs	r3, #128	@ 0x80
 8002936:	021b      	lsls	r3, r3, #8
 8002938:	4013      	ands	r3, r2
 800293a:	d119      	bne.n	8002970 <HAL_ADC_ConfigChannel+0x190>
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	681a      	ldr	r2, [r3, #0]
 8002940:	2380      	movs	r3, #128	@ 0x80
 8002942:	025b      	lsls	r3, r3, #9
 8002944:	4013      	ands	r3, r2
 8002946:	d111      	bne.n	800296c <HAL_ADC_ConfigChannel+0x18c>
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	681a      	ldr	r2, [r3, #0]
 800294c:	2380      	movs	r3, #128	@ 0x80
 800294e:	029b      	lsls	r3, r3, #10
 8002950:	4013      	ands	r3, r2
 8002952:	d109      	bne.n	8002968 <HAL_ADC_ConfigChannel+0x188>
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	681a      	ldr	r2, [r3, #0]
 8002958:	2380      	movs	r3, #128	@ 0x80
 800295a:	02db      	lsls	r3, r3, #11
 800295c:	4013      	ands	r3, r2
 800295e:	d001      	beq.n	8002964 <HAL_ADC_ConfigChannel+0x184>
 8002960:	2312      	movs	r3, #18
 8002962:	e024      	b.n	80029ae <HAL_ADC_ConfigChannel+0x1ce>
 8002964:	2300      	movs	r3, #0
 8002966:	e022      	b.n	80029ae <HAL_ADC_ConfigChannel+0x1ce>
 8002968:	2311      	movs	r3, #17
 800296a:	e020      	b.n	80029ae <HAL_ADC_ConfigChannel+0x1ce>
 800296c:	2310      	movs	r3, #16
 800296e:	e01e      	b.n	80029ae <HAL_ADC_ConfigChannel+0x1ce>
 8002970:	230f      	movs	r3, #15
 8002972:	e01c      	b.n	80029ae <HAL_ADC_ConfigChannel+0x1ce>
 8002974:	230e      	movs	r3, #14
 8002976:	e01a      	b.n	80029ae <HAL_ADC_ConfigChannel+0x1ce>
 8002978:	230d      	movs	r3, #13
 800297a:	e018      	b.n	80029ae <HAL_ADC_ConfigChannel+0x1ce>
 800297c:	230c      	movs	r3, #12
 800297e:	e016      	b.n	80029ae <HAL_ADC_ConfigChannel+0x1ce>
 8002980:	230b      	movs	r3, #11
 8002982:	e014      	b.n	80029ae <HAL_ADC_ConfigChannel+0x1ce>
 8002984:	230a      	movs	r3, #10
 8002986:	e012      	b.n	80029ae <HAL_ADC_ConfigChannel+0x1ce>
 8002988:	2309      	movs	r3, #9
 800298a:	e010      	b.n	80029ae <HAL_ADC_ConfigChannel+0x1ce>
 800298c:	2308      	movs	r3, #8
 800298e:	e00e      	b.n	80029ae <HAL_ADC_ConfigChannel+0x1ce>
 8002990:	2307      	movs	r3, #7
 8002992:	e00c      	b.n	80029ae <HAL_ADC_ConfigChannel+0x1ce>
 8002994:	2306      	movs	r3, #6
 8002996:	e00a      	b.n	80029ae <HAL_ADC_ConfigChannel+0x1ce>
 8002998:	2305      	movs	r3, #5
 800299a:	e008      	b.n	80029ae <HAL_ADC_ConfigChannel+0x1ce>
 800299c:	2304      	movs	r3, #4
 800299e:	e006      	b.n	80029ae <HAL_ADC_ConfigChannel+0x1ce>
 80029a0:	2303      	movs	r3, #3
 80029a2:	e004      	b.n	80029ae <HAL_ADC_ConfigChannel+0x1ce>
 80029a4:	2302      	movs	r3, #2
 80029a6:	e002      	b.n	80029ae <HAL_ADC_ConfigChannel+0x1ce>
 80029a8:	2301      	movs	r3, #1
 80029aa:	e000      	b.n	80029ae <HAL_ADC_ConfigChannel+0x1ce>
 80029ac:	2300      	movs	r3, #0
 80029ae:	683a      	ldr	r2, [r7, #0]
 80029b0:	6852      	ldr	r2, [r2, #4]
 80029b2:	201f      	movs	r0, #31
 80029b4:	4002      	ands	r2, r0
 80029b6:	4093      	lsls	r3, r2
 80029b8:	000a      	movs	r2, r1
 80029ba:	431a      	orrs	r2, r3
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	089b      	lsrs	r3, r3, #2
 80029c6:	1c5a      	adds	r2, r3, #1
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	69db      	ldr	r3, [r3, #28]
 80029cc:	429a      	cmp	r2, r3
 80029ce:	d808      	bhi.n	80029e2 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6818      	ldr	r0, [r3, #0]
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	6859      	ldr	r1, [r3, #4]
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	001a      	movs	r2, r3
 80029de:	f7ff fb71 	bl	80020c4 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6818      	ldr	r0, [r3, #0]
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	6819      	ldr	r1, [r3, #0]
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	689b      	ldr	r3, [r3, #8]
 80029ee:	001a      	movs	r2, r3
 80029f0:	f7ff fbb8 	bl	8002164 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	db00      	blt.n	80029fe <HAL_ADC_ConfigChannel+0x21e>
 80029fc:	e0bc      	b.n	8002b78 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80029fe:	4b50      	ldr	r3, [pc, #320]	@ (8002b40 <HAL_ADC_ConfigChannel+0x360>)
 8002a00:	0018      	movs	r0, r3
 8002a02:	f7ff fb0d 	bl	8002020 <LL_ADC_GetCommonPathInternalCh>
 8002a06:	0003      	movs	r3, r0
 8002a08:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a4d      	ldr	r2, [pc, #308]	@ (8002b44 <HAL_ADC_ConfigChannel+0x364>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d122      	bne.n	8002a5a <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002a14:	693a      	ldr	r2, [r7, #16]
 8002a16:	2380      	movs	r3, #128	@ 0x80
 8002a18:	041b      	lsls	r3, r3, #16
 8002a1a:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002a1c:	d11d      	bne.n	8002a5a <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002a1e:	693b      	ldr	r3, [r7, #16]
 8002a20:	2280      	movs	r2, #128	@ 0x80
 8002a22:	0412      	lsls	r2, r2, #16
 8002a24:	4313      	orrs	r3, r2
 8002a26:	4a46      	ldr	r2, [pc, #280]	@ (8002b40 <HAL_ADC_ConfigChannel+0x360>)
 8002a28:	0019      	movs	r1, r3
 8002a2a:	0010      	movs	r0, r2
 8002a2c:	f7ff fae4 	bl	8001ff8 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002a30:	4b45      	ldr	r3, [pc, #276]	@ (8002b48 <HAL_ADC_ConfigChannel+0x368>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4945      	ldr	r1, [pc, #276]	@ (8002b4c <HAL_ADC_ConfigChannel+0x36c>)
 8002a36:	0018      	movs	r0, r3
 8002a38:	f7fd fbbe 	bl	80001b8 <__udivsi3>
 8002a3c:	0003      	movs	r3, r0
 8002a3e:	1c5a      	adds	r2, r3, #1
 8002a40:	0013      	movs	r3, r2
 8002a42:	005b      	lsls	r3, r3, #1
 8002a44:	189b      	adds	r3, r3, r2
 8002a46:	009b      	lsls	r3, r3, #2
 8002a48:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002a4a:	e002      	b.n	8002a52 <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	3b01      	subs	r3, #1
 8002a50:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d1f9      	bne.n	8002a4c <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002a58:	e08e      	b.n	8002b78 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a3c      	ldr	r2, [pc, #240]	@ (8002b50 <HAL_ADC_ConfigChannel+0x370>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d10e      	bne.n	8002a82 <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002a64:	693a      	ldr	r2, [r7, #16]
 8002a66:	2380      	movs	r3, #128	@ 0x80
 8002a68:	045b      	lsls	r3, r3, #17
 8002a6a:	4013      	ands	r3, r2
 8002a6c:	d109      	bne.n	8002a82 <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002a6e:	693b      	ldr	r3, [r7, #16]
 8002a70:	2280      	movs	r2, #128	@ 0x80
 8002a72:	0452      	lsls	r2, r2, #17
 8002a74:	4313      	orrs	r3, r2
 8002a76:	4a32      	ldr	r2, [pc, #200]	@ (8002b40 <HAL_ADC_ConfigChannel+0x360>)
 8002a78:	0019      	movs	r1, r3
 8002a7a:	0010      	movs	r0, r2
 8002a7c:	f7ff fabc 	bl	8001ff8 <LL_ADC_SetCommonPathInternalCh>
 8002a80:	e07a      	b.n	8002b78 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a33      	ldr	r2, [pc, #204]	@ (8002b54 <HAL_ADC_ConfigChannel+0x374>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d000      	beq.n	8002a8e <HAL_ADC_ConfigChannel+0x2ae>
 8002a8c:	e074      	b.n	8002b78 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002a8e:	693a      	ldr	r2, [r7, #16]
 8002a90:	2380      	movs	r3, #128	@ 0x80
 8002a92:	03db      	lsls	r3, r3, #15
 8002a94:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002a96:	d000      	beq.n	8002a9a <HAL_ADC_ConfigChannel+0x2ba>
 8002a98:	e06e      	b.n	8002b78 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	2280      	movs	r2, #128	@ 0x80
 8002a9e:	03d2      	lsls	r2, r2, #15
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	4a27      	ldr	r2, [pc, #156]	@ (8002b40 <HAL_ADC_ConfigChannel+0x360>)
 8002aa4:	0019      	movs	r1, r3
 8002aa6:	0010      	movs	r0, r2
 8002aa8:	f7ff faa6 	bl	8001ff8 <LL_ADC_SetCommonPathInternalCh>
 8002aac:	e064      	b.n	8002b78 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	691a      	ldr	r2, [r3, #16]
 8002ab2:	2380      	movs	r3, #128	@ 0x80
 8002ab4:	061b      	lsls	r3, r3, #24
 8002ab6:	429a      	cmp	r2, r3
 8002ab8:	d004      	beq.n	8002ac4 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002abe:	4a1f      	ldr	r2, [pc, #124]	@ (8002b3c <HAL_ADC_ConfigChannel+0x35c>)
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d107      	bne.n	8002ad4 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681a      	ldr	r2, [r3, #0]
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	0019      	movs	r1, r3
 8002ace:	0010      	movs	r0, r2
 8002ad0:	f7ff fb29 	bl	8002126 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	da4d      	bge.n	8002b78 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002adc:	4b18      	ldr	r3, [pc, #96]	@ (8002b40 <HAL_ADC_ConfigChannel+0x360>)
 8002ade:	0018      	movs	r0, r3
 8002ae0:	f7ff fa9e 	bl	8002020 <LL_ADC_GetCommonPathInternalCh>
 8002ae4:	0003      	movs	r3, r0
 8002ae6:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a15      	ldr	r2, [pc, #84]	@ (8002b44 <HAL_ADC_ConfigChannel+0x364>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d108      	bne.n	8002b04 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	4a18      	ldr	r2, [pc, #96]	@ (8002b58 <HAL_ADC_ConfigChannel+0x378>)
 8002af6:	4013      	ands	r3, r2
 8002af8:	4a11      	ldr	r2, [pc, #68]	@ (8002b40 <HAL_ADC_ConfigChannel+0x360>)
 8002afa:	0019      	movs	r1, r3
 8002afc:	0010      	movs	r0, r2
 8002afe:	f7ff fa7b 	bl	8001ff8 <LL_ADC_SetCommonPathInternalCh>
 8002b02:	e039      	b.n	8002b78 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a11      	ldr	r2, [pc, #68]	@ (8002b50 <HAL_ADC_ConfigChannel+0x370>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d108      	bne.n	8002b20 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	4a12      	ldr	r2, [pc, #72]	@ (8002b5c <HAL_ADC_ConfigChannel+0x37c>)
 8002b12:	4013      	ands	r3, r2
 8002b14:	4a0a      	ldr	r2, [pc, #40]	@ (8002b40 <HAL_ADC_ConfigChannel+0x360>)
 8002b16:	0019      	movs	r1, r3
 8002b18:	0010      	movs	r0, r2
 8002b1a:	f7ff fa6d 	bl	8001ff8 <LL_ADC_SetCommonPathInternalCh>
 8002b1e:	e02b      	b.n	8002b78 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a0b      	ldr	r2, [pc, #44]	@ (8002b54 <HAL_ADC_ConfigChannel+0x374>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d126      	bne.n	8002b78 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002b2a:	693b      	ldr	r3, [r7, #16]
 8002b2c:	4a0c      	ldr	r2, [pc, #48]	@ (8002b60 <HAL_ADC_ConfigChannel+0x380>)
 8002b2e:	4013      	ands	r3, r2
 8002b30:	4a03      	ldr	r2, [pc, #12]	@ (8002b40 <HAL_ADC_ConfigChannel+0x360>)
 8002b32:	0019      	movs	r1, r3
 8002b34:	0010      	movs	r0, r2
 8002b36:	f7ff fa5f 	bl	8001ff8 <LL_ADC_SetCommonPathInternalCh>
 8002b3a:	e01d      	b.n	8002b78 <HAL_ADC_ConfigChannel+0x398>
 8002b3c:	80000004 	.word	0x80000004
 8002b40:	40012708 	.word	0x40012708
 8002b44:	b0001000 	.word	0xb0001000
 8002b48:	200000b8 	.word	0x200000b8
 8002b4c:	00030d40 	.word	0x00030d40
 8002b50:	b8004000 	.word	0xb8004000
 8002b54:	b4002000 	.word	0xb4002000
 8002b58:	ff7fffff 	.word	0xff7fffff
 8002b5c:	feffffff 	.word	0xfeffffff
 8002b60:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b68:	2220      	movs	r2, #32
 8002b6a:	431a      	orrs	r2, r3
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002b70:	2317      	movs	r3, #23
 8002b72:	18fb      	adds	r3, r7, r3
 8002b74:	2201      	movs	r2, #1
 8002b76:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2254      	movs	r2, #84	@ 0x54
 8002b7c:	2100      	movs	r1, #0
 8002b7e:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8002b80:	2317      	movs	r3, #23
 8002b82:	18fb      	adds	r3, r7, r3
 8002b84:	781b      	ldrb	r3, [r3, #0]
}
 8002b86:	0018      	movs	r0, r3
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	b006      	add	sp, #24
 8002b8c:	bd80      	pop	{r7, pc}
 8002b8e:	46c0      	nop			@ (mov r8, r8)

08002b90 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b082      	sub	sp, #8
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8002b98:	46c0      	nop			@ (mov r8, r8)
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	b002      	add	sp, #8
 8002b9e:	bd80      	pop	{r7, pc}

08002ba0 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b082      	sub	sp, #8
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8002ba8:	46c0      	nop			@ (mov r8, r8)
 8002baa:	46bd      	mov	sp, r7
 8002bac:	b002      	add	sp, #8
 8002bae:	bd80      	pop	{r7, pc}

08002bb0 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b082      	sub	sp, #8
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8002bb8:	46c0      	nop			@ (mov r8, r8)
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	b002      	add	sp, #8
 8002bbe:	bd80      	pop	{r7, pc}

08002bc0 <HAL_ADCEx_ChannelConfigReadyCallback>:
  * @brief  ADC channel configuration ready callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_ChannelConfigReadyCallback(ADC_HandleTypeDef *hadc)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b082      	sub	sp, #8
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_ChannelConfigReadyCallback must be implemented in the user file.
  */
}
 8002bc8:	46c0      	nop			@ (mov r8, r8)
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	b002      	add	sp, #8
 8002bce:	bd80      	pop	{r7, pc}

08002bd0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b082      	sub	sp, #8
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	0002      	movs	r2, r0
 8002bd8:	1dfb      	adds	r3, r7, #7
 8002bda:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002bdc:	1dfb      	adds	r3, r7, #7
 8002bde:	781b      	ldrb	r3, [r3, #0]
 8002be0:	2b7f      	cmp	r3, #127	@ 0x7f
 8002be2:	d809      	bhi.n	8002bf8 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002be4:	1dfb      	adds	r3, r7, #7
 8002be6:	781b      	ldrb	r3, [r3, #0]
 8002be8:	001a      	movs	r2, r3
 8002bea:	231f      	movs	r3, #31
 8002bec:	401a      	ands	r2, r3
 8002bee:	4b04      	ldr	r3, [pc, #16]	@ (8002c00 <__NVIC_EnableIRQ+0x30>)
 8002bf0:	2101      	movs	r1, #1
 8002bf2:	4091      	lsls	r1, r2
 8002bf4:	000a      	movs	r2, r1
 8002bf6:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8002bf8:	46c0      	nop			@ (mov r8, r8)
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	b002      	add	sp, #8
 8002bfe:	bd80      	pop	{r7, pc}
 8002c00:	e000e100 	.word	0xe000e100

08002c04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c04:	b590      	push	{r4, r7, lr}
 8002c06:	b083      	sub	sp, #12
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	0002      	movs	r2, r0
 8002c0c:	6039      	str	r1, [r7, #0]
 8002c0e:	1dfb      	adds	r3, r7, #7
 8002c10:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002c12:	1dfb      	adds	r3, r7, #7
 8002c14:	781b      	ldrb	r3, [r3, #0]
 8002c16:	2b7f      	cmp	r3, #127	@ 0x7f
 8002c18:	d828      	bhi.n	8002c6c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002c1a:	4a2f      	ldr	r2, [pc, #188]	@ (8002cd8 <__NVIC_SetPriority+0xd4>)
 8002c1c:	1dfb      	adds	r3, r7, #7
 8002c1e:	781b      	ldrb	r3, [r3, #0]
 8002c20:	b25b      	sxtb	r3, r3
 8002c22:	089b      	lsrs	r3, r3, #2
 8002c24:	33c0      	adds	r3, #192	@ 0xc0
 8002c26:	009b      	lsls	r3, r3, #2
 8002c28:	589b      	ldr	r3, [r3, r2]
 8002c2a:	1dfa      	adds	r2, r7, #7
 8002c2c:	7812      	ldrb	r2, [r2, #0]
 8002c2e:	0011      	movs	r1, r2
 8002c30:	2203      	movs	r2, #3
 8002c32:	400a      	ands	r2, r1
 8002c34:	00d2      	lsls	r2, r2, #3
 8002c36:	21ff      	movs	r1, #255	@ 0xff
 8002c38:	4091      	lsls	r1, r2
 8002c3a:	000a      	movs	r2, r1
 8002c3c:	43d2      	mvns	r2, r2
 8002c3e:	401a      	ands	r2, r3
 8002c40:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	019b      	lsls	r3, r3, #6
 8002c46:	22ff      	movs	r2, #255	@ 0xff
 8002c48:	401a      	ands	r2, r3
 8002c4a:	1dfb      	adds	r3, r7, #7
 8002c4c:	781b      	ldrb	r3, [r3, #0]
 8002c4e:	0018      	movs	r0, r3
 8002c50:	2303      	movs	r3, #3
 8002c52:	4003      	ands	r3, r0
 8002c54:	00db      	lsls	r3, r3, #3
 8002c56:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002c58:	481f      	ldr	r0, [pc, #124]	@ (8002cd8 <__NVIC_SetPriority+0xd4>)
 8002c5a:	1dfb      	adds	r3, r7, #7
 8002c5c:	781b      	ldrb	r3, [r3, #0]
 8002c5e:	b25b      	sxtb	r3, r3
 8002c60:	089b      	lsrs	r3, r3, #2
 8002c62:	430a      	orrs	r2, r1
 8002c64:	33c0      	adds	r3, #192	@ 0xc0
 8002c66:	009b      	lsls	r3, r3, #2
 8002c68:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002c6a:	e031      	b.n	8002cd0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002c6c:	4a1b      	ldr	r2, [pc, #108]	@ (8002cdc <__NVIC_SetPriority+0xd8>)
 8002c6e:	1dfb      	adds	r3, r7, #7
 8002c70:	781b      	ldrb	r3, [r3, #0]
 8002c72:	0019      	movs	r1, r3
 8002c74:	230f      	movs	r3, #15
 8002c76:	400b      	ands	r3, r1
 8002c78:	3b08      	subs	r3, #8
 8002c7a:	089b      	lsrs	r3, r3, #2
 8002c7c:	3306      	adds	r3, #6
 8002c7e:	009b      	lsls	r3, r3, #2
 8002c80:	18d3      	adds	r3, r2, r3
 8002c82:	3304      	adds	r3, #4
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	1dfa      	adds	r2, r7, #7
 8002c88:	7812      	ldrb	r2, [r2, #0]
 8002c8a:	0011      	movs	r1, r2
 8002c8c:	2203      	movs	r2, #3
 8002c8e:	400a      	ands	r2, r1
 8002c90:	00d2      	lsls	r2, r2, #3
 8002c92:	21ff      	movs	r1, #255	@ 0xff
 8002c94:	4091      	lsls	r1, r2
 8002c96:	000a      	movs	r2, r1
 8002c98:	43d2      	mvns	r2, r2
 8002c9a:	401a      	ands	r2, r3
 8002c9c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	019b      	lsls	r3, r3, #6
 8002ca2:	22ff      	movs	r2, #255	@ 0xff
 8002ca4:	401a      	ands	r2, r3
 8002ca6:	1dfb      	adds	r3, r7, #7
 8002ca8:	781b      	ldrb	r3, [r3, #0]
 8002caa:	0018      	movs	r0, r3
 8002cac:	2303      	movs	r3, #3
 8002cae:	4003      	ands	r3, r0
 8002cb0:	00db      	lsls	r3, r3, #3
 8002cb2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002cb4:	4809      	ldr	r0, [pc, #36]	@ (8002cdc <__NVIC_SetPriority+0xd8>)
 8002cb6:	1dfb      	adds	r3, r7, #7
 8002cb8:	781b      	ldrb	r3, [r3, #0]
 8002cba:	001c      	movs	r4, r3
 8002cbc:	230f      	movs	r3, #15
 8002cbe:	4023      	ands	r3, r4
 8002cc0:	3b08      	subs	r3, #8
 8002cc2:	089b      	lsrs	r3, r3, #2
 8002cc4:	430a      	orrs	r2, r1
 8002cc6:	3306      	adds	r3, #6
 8002cc8:	009b      	lsls	r3, r3, #2
 8002cca:	18c3      	adds	r3, r0, r3
 8002ccc:	3304      	adds	r3, #4
 8002cce:	601a      	str	r2, [r3, #0]
}
 8002cd0:	46c0      	nop			@ (mov r8, r8)
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	b003      	add	sp, #12
 8002cd6:	bd90      	pop	{r4, r7, pc}
 8002cd8:	e000e100 	.word	0xe000e100
 8002cdc:	e000ed00 	.word	0xe000ed00

08002ce0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b082      	sub	sp, #8
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	1e5a      	subs	r2, r3, #1
 8002cec:	2380      	movs	r3, #128	@ 0x80
 8002cee:	045b      	lsls	r3, r3, #17
 8002cf0:	429a      	cmp	r2, r3
 8002cf2:	d301      	bcc.n	8002cf8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	e010      	b.n	8002d1a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002cf8:	4b0a      	ldr	r3, [pc, #40]	@ (8002d24 <SysTick_Config+0x44>)
 8002cfa:	687a      	ldr	r2, [r7, #4]
 8002cfc:	3a01      	subs	r2, #1
 8002cfe:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d00:	2301      	movs	r3, #1
 8002d02:	425b      	negs	r3, r3
 8002d04:	2103      	movs	r1, #3
 8002d06:	0018      	movs	r0, r3
 8002d08:	f7ff ff7c 	bl	8002c04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d0c:	4b05      	ldr	r3, [pc, #20]	@ (8002d24 <SysTick_Config+0x44>)
 8002d0e:	2200      	movs	r2, #0
 8002d10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d12:	4b04      	ldr	r3, [pc, #16]	@ (8002d24 <SysTick_Config+0x44>)
 8002d14:	2207      	movs	r2, #7
 8002d16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d18:	2300      	movs	r3, #0
}
 8002d1a:	0018      	movs	r0, r3
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	b002      	add	sp, #8
 8002d20:	bd80      	pop	{r7, pc}
 8002d22:	46c0      	nop			@ (mov r8, r8)
 8002d24:	e000e010 	.word	0xe000e010

08002d28 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b084      	sub	sp, #16
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	60b9      	str	r1, [r7, #8]
 8002d30:	607a      	str	r2, [r7, #4]
 8002d32:	210f      	movs	r1, #15
 8002d34:	187b      	adds	r3, r7, r1
 8002d36:	1c02      	adds	r2, r0, #0
 8002d38:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8002d3a:	68ba      	ldr	r2, [r7, #8]
 8002d3c:	187b      	adds	r3, r7, r1
 8002d3e:	781b      	ldrb	r3, [r3, #0]
 8002d40:	b25b      	sxtb	r3, r3
 8002d42:	0011      	movs	r1, r2
 8002d44:	0018      	movs	r0, r3
 8002d46:	f7ff ff5d 	bl	8002c04 <__NVIC_SetPriority>
}
 8002d4a:	46c0      	nop			@ (mov r8, r8)
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	b004      	add	sp, #16
 8002d50:	bd80      	pop	{r7, pc}

08002d52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d52:	b580      	push	{r7, lr}
 8002d54:	b082      	sub	sp, #8
 8002d56:	af00      	add	r7, sp, #0
 8002d58:	0002      	movs	r2, r0
 8002d5a:	1dfb      	adds	r3, r7, #7
 8002d5c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d5e:	1dfb      	adds	r3, r7, #7
 8002d60:	781b      	ldrb	r3, [r3, #0]
 8002d62:	b25b      	sxtb	r3, r3
 8002d64:	0018      	movs	r0, r3
 8002d66:	f7ff ff33 	bl	8002bd0 <__NVIC_EnableIRQ>
}
 8002d6a:	46c0      	nop			@ (mov r8, r8)
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	b002      	add	sp, #8
 8002d70:	bd80      	pop	{r7, pc}

08002d72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d72:	b580      	push	{r7, lr}
 8002d74:	b082      	sub	sp, #8
 8002d76:	af00      	add	r7, sp, #0
 8002d78:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	0018      	movs	r0, r3
 8002d7e:	f7ff ffaf 	bl	8002ce0 <SysTick_Config>
 8002d82:	0003      	movs	r3, r0
}
 8002d84:	0018      	movs	r0, r3
 8002d86:	46bd      	mov	sp, r7
 8002d88:	b002      	add	sp, #8
 8002d8a:	bd80      	pop	{r7, pc}

08002d8c <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b082      	sub	sp, #8
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d101      	bne.n	8002d9e <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e050      	b.n	8002e40 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2225      	movs	r2, #37	@ 0x25
 8002da2:	5c9b      	ldrb	r3, [r3, r2]
 8002da4:	b2db      	uxtb	r3, r3
 8002da6:	2b02      	cmp	r3, #2
 8002da8:	d008      	beq.n	8002dbc <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2204      	movs	r2, #4
 8002dae:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2224      	movs	r2, #36	@ 0x24
 8002db4:	2100      	movs	r1, #0
 8002db6:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8002db8:	2301      	movs	r3, #1
 8002dba:	e041      	b.n	8002e40 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	681a      	ldr	r2, [r3, #0]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	210e      	movs	r1, #14
 8002dc8:	438a      	bics	r2, r1
 8002dca:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dd0:	681a      	ldr	r2, [r3, #0]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dd6:	491c      	ldr	r1, [pc, #112]	@ (8002e48 <HAL_DMA_Abort+0xbc>)
 8002dd8:	400a      	ands	r2, r1
 8002dda:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	681a      	ldr	r2, [r3, #0]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	2101      	movs	r1, #1
 8002de8:	438a      	bics	r2, r1
 8002dea:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 8002dec:	4b17      	ldr	r3, [pc, #92]	@ (8002e4c <HAL_DMA_Abort+0xc0>)
 8002dee:	6859      	ldr	r1, [r3, #4]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002df4:	221c      	movs	r2, #28
 8002df6:	4013      	ands	r3, r2
 8002df8:	2201      	movs	r2, #1
 8002dfa:	409a      	lsls	r2, r3
 8002dfc:	4b13      	ldr	r3, [pc, #76]	@ (8002e4c <HAL_DMA_Abort+0xc0>)
 8002dfe:	430a      	orrs	r2, r1
 8002e00:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e06:	687a      	ldr	r2, [r7, #4]
 8002e08:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002e0a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d00c      	beq.n	8002e2e <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e18:	681a      	ldr	r2, [r3, #0]
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e1e:	490a      	ldr	r1, [pc, #40]	@ (8002e48 <HAL_DMA_Abort+0xbc>)
 8002e20:	400a      	ands	r2, r1
 8002e22:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e28:	687a      	ldr	r2, [r7, #4]
 8002e2a:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8002e2c:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2225      	movs	r2, #37	@ 0x25
 8002e32:	2101      	movs	r1, #1
 8002e34:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2224      	movs	r2, #36	@ 0x24
 8002e3a:	2100      	movs	r1, #0
 8002e3c:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8002e3e:	2300      	movs	r3, #0
}
 8002e40:	0018      	movs	r0, r3
 8002e42:	46bd      	mov	sp, r7
 8002e44:	b002      	add	sp, #8
 8002e46:	bd80      	pop	{r7, pc}
 8002e48:	fffffeff 	.word	0xfffffeff
 8002e4c:	40020000 	.word	0x40020000

08002e50 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b084      	sub	sp, #16
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e58:	210f      	movs	r1, #15
 8002e5a:	187b      	adds	r3, r7, r1
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2225      	movs	r2, #37	@ 0x25
 8002e64:	5c9b      	ldrb	r3, [r3, r2]
 8002e66:	b2db      	uxtb	r3, r3
 8002e68:	2b02      	cmp	r3, #2
 8002e6a:	d006      	beq.n	8002e7a <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2204      	movs	r2, #4
 8002e70:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8002e72:	187b      	adds	r3, r7, r1
 8002e74:	2201      	movs	r2, #1
 8002e76:	701a      	strb	r2, [r3, #0]
 8002e78:	e049      	b.n	8002f0e <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	681a      	ldr	r2, [r3, #0]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	210e      	movs	r1, #14
 8002e86:	438a      	bics	r2, r1
 8002e88:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	681a      	ldr	r2, [r3, #0]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	2101      	movs	r1, #1
 8002e96:	438a      	bics	r2, r1
 8002e98:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e9e:	681a      	ldr	r2, [r3, #0]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ea4:	491d      	ldr	r1, [pc, #116]	@ (8002f1c <HAL_DMA_Abort_IT+0xcc>)
 8002ea6:	400a      	ands	r2, r1
 8002ea8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8002eaa:	4b1d      	ldr	r3, [pc, #116]	@ (8002f20 <HAL_DMA_Abort_IT+0xd0>)
 8002eac:	6859      	ldr	r1, [r3, #4]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eb2:	221c      	movs	r2, #28
 8002eb4:	4013      	ands	r3, r2
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	409a      	lsls	r2, r3
 8002eba:	4b19      	ldr	r3, [pc, #100]	@ (8002f20 <HAL_DMA_Abort_IT+0xd0>)
 8002ebc:	430a      	orrs	r2, r1
 8002ebe:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ec4:	687a      	ldr	r2, [r7, #4]
 8002ec6:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002ec8:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d00c      	beq.n	8002eec <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ed6:	681a      	ldr	r2, [r3, #0]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002edc:	490f      	ldr	r1, [pc, #60]	@ (8002f1c <HAL_DMA_Abort_IT+0xcc>)
 8002ede:	400a      	ands	r2, r1
 8002ee0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ee6:	687a      	ldr	r2, [r7, #4]
 8002ee8:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8002eea:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2225      	movs	r2, #37	@ 0x25
 8002ef0:	2101      	movs	r1, #1
 8002ef2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2224      	movs	r2, #36	@ 0x24
 8002ef8:	2100      	movs	r1, #0
 8002efa:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d004      	beq.n	8002f0e <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f08:	687a      	ldr	r2, [r7, #4]
 8002f0a:	0010      	movs	r0, r2
 8002f0c:	4798      	blx	r3
    }
  }
  return status;
 8002f0e:	230f      	movs	r3, #15
 8002f10:	18fb      	adds	r3, r7, r3
 8002f12:	781b      	ldrb	r3, [r3, #0]
}
 8002f14:	0018      	movs	r0, r3
 8002f16:	46bd      	mov	sp, r7
 8002f18:	b004      	add	sp, #16
 8002f1a:	bd80      	pop	{r7, pc}
 8002f1c:	fffffeff 	.word	0xfffffeff
 8002f20:	40020000 	.word	0x40020000

08002f24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b086      	sub	sp, #24
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
 8002f2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f32:	e147      	b.n	80031c4 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	2101      	movs	r1, #1
 8002f3a:	697a      	ldr	r2, [r7, #20]
 8002f3c:	4091      	lsls	r1, r2
 8002f3e:	000a      	movs	r2, r1
 8002f40:	4013      	ands	r3, r2
 8002f42:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d100      	bne.n	8002f4c <HAL_GPIO_Init+0x28>
 8002f4a:	e138      	b.n	80031be <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	2203      	movs	r2, #3
 8002f52:	4013      	ands	r3, r2
 8002f54:	2b01      	cmp	r3, #1
 8002f56:	d005      	beq.n	8002f64 <HAL_GPIO_Init+0x40>
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	2203      	movs	r2, #3
 8002f5e:	4013      	ands	r3, r2
 8002f60:	2b02      	cmp	r3, #2
 8002f62:	d130      	bne.n	8002fc6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	689b      	ldr	r3, [r3, #8]
 8002f68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002f6a:	697b      	ldr	r3, [r7, #20]
 8002f6c:	005b      	lsls	r3, r3, #1
 8002f6e:	2203      	movs	r2, #3
 8002f70:	409a      	lsls	r2, r3
 8002f72:	0013      	movs	r3, r2
 8002f74:	43da      	mvns	r2, r3
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	4013      	ands	r3, r2
 8002f7a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	68da      	ldr	r2, [r3, #12]
 8002f80:	697b      	ldr	r3, [r7, #20]
 8002f82:	005b      	lsls	r3, r3, #1
 8002f84:	409a      	lsls	r2, r3
 8002f86:	0013      	movs	r3, r2
 8002f88:	693a      	ldr	r2, [r7, #16]
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	693a      	ldr	r2, [r7, #16]
 8002f92:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	697b      	ldr	r3, [r7, #20]
 8002f9e:	409a      	lsls	r2, r3
 8002fa0:	0013      	movs	r3, r2
 8002fa2:	43da      	mvns	r2, r3
 8002fa4:	693b      	ldr	r3, [r7, #16]
 8002fa6:	4013      	ands	r3, r2
 8002fa8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	091b      	lsrs	r3, r3, #4
 8002fb0:	2201      	movs	r2, #1
 8002fb2:	401a      	ands	r2, r3
 8002fb4:	697b      	ldr	r3, [r7, #20]
 8002fb6:	409a      	lsls	r2, r3
 8002fb8:	0013      	movs	r3, r2
 8002fba:	693a      	ldr	r2, [r7, #16]
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	693a      	ldr	r2, [r7, #16]
 8002fc4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	2203      	movs	r2, #3
 8002fcc:	4013      	ands	r3, r2
 8002fce:	2b03      	cmp	r3, #3
 8002fd0:	d017      	beq.n	8003002 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	68db      	ldr	r3, [r3, #12]
 8002fd6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002fd8:	697b      	ldr	r3, [r7, #20]
 8002fda:	005b      	lsls	r3, r3, #1
 8002fdc:	2203      	movs	r2, #3
 8002fde:	409a      	lsls	r2, r3
 8002fe0:	0013      	movs	r3, r2
 8002fe2:	43da      	mvns	r2, r3
 8002fe4:	693b      	ldr	r3, [r7, #16]
 8002fe6:	4013      	ands	r3, r2
 8002fe8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	689a      	ldr	r2, [r3, #8]
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	005b      	lsls	r3, r3, #1
 8002ff2:	409a      	lsls	r2, r3
 8002ff4:	0013      	movs	r3, r2
 8002ff6:	693a      	ldr	r2, [r7, #16]
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	693a      	ldr	r2, [r7, #16]
 8003000:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	2203      	movs	r2, #3
 8003008:	4013      	ands	r3, r2
 800300a:	2b02      	cmp	r3, #2
 800300c:	d123      	bne.n	8003056 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	08da      	lsrs	r2, r3, #3
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	3208      	adds	r2, #8
 8003016:	0092      	lsls	r2, r2, #2
 8003018:	58d3      	ldr	r3, [r2, r3]
 800301a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	2207      	movs	r2, #7
 8003020:	4013      	ands	r3, r2
 8003022:	009b      	lsls	r3, r3, #2
 8003024:	220f      	movs	r2, #15
 8003026:	409a      	lsls	r2, r3
 8003028:	0013      	movs	r3, r2
 800302a:	43da      	mvns	r2, r3
 800302c:	693b      	ldr	r3, [r7, #16]
 800302e:	4013      	ands	r3, r2
 8003030:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	691a      	ldr	r2, [r3, #16]
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	2107      	movs	r1, #7
 800303a:	400b      	ands	r3, r1
 800303c:	009b      	lsls	r3, r3, #2
 800303e:	409a      	lsls	r2, r3
 8003040:	0013      	movs	r3, r2
 8003042:	693a      	ldr	r2, [r7, #16]
 8003044:	4313      	orrs	r3, r2
 8003046:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003048:	697b      	ldr	r3, [r7, #20]
 800304a:	08da      	lsrs	r2, r3, #3
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	3208      	adds	r2, #8
 8003050:	0092      	lsls	r2, r2, #2
 8003052:	6939      	ldr	r1, [r7, #16]
 8003054:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	005b      	lsls	r3, r3, #1
 8003060:	2203      	movs	r2, #3
 8003062:	409a      	lsls	r2, r3
 8003064:	0013      	movs	r3, r2
 8003066:	43da      	mvns	r2, r3
 8003068:	693b      	ldr	r3, [r7, #16]
 800306a:	4013      	ands	r3, r2
 800306c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	2203      	movs	r2, #3
 8003074:	401a      	ands	r2, r3
 8003076:	697b      	ldr	r3, [r7, #20]
 8003078:	005b      	lsls	r3, r3, #1
 800307a:	409a      	lsls	r2, r3
 800307c:	0013      	movs	r3, r2
 800307e:	693a      	ldr	r2, [r7, #16]
 8003080:	4313      	orrs	r3, r2
 8003082:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	693a      	ldr	r2, [r7, #16]
 8003088:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	685a      	ldr	r2, [r3, #4]
 800308e:	23c0      	movs	r3, #192	@ 0xc0
 8003090:	029b      	lsls	r3, r3, #10
 8003092:	4013      	ands	r3, r2
 8003094:	d100      	bne.n	8003098 <HAL_GPIO_Init+0x174>
 8003096:	e092      	b.n	80031be <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8003098:	4a50      	ldr	r2, [pc, #320]	@ (80031dc <HAL_GPIO_Init+0x2b8>)
 800309a:	697b      	ldr	r3, [r7, #20]
 800309c:	089b      	lsrs	r3, r3, #2
 800309e:	3318      	adds	r3, #24
 80030a0:	009b      	lsls	r3, r3, #2
 80030a2:	589b      	ldr	r3, [r3, r2]
 80030a4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80030a6:	697b      	ldr	r3, [r7, #20]
 80030a8:	2203      	movs	r2, #3
 80030aa:	4013      	ands	r3, r2
 80030ac:	00db      	lsls	r3, r3, #3
 80030ae:	220f      	movs	r2, #15
 80030b0:	409a      	lsls	r2, r3
 80030b2:	0013      	movs	r3, r2
 80030b4:	43da      	mvns	r2, r3
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	4013      	ands	r3, r2
 80030ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80030bc:	687a      	ldr	r2, [r7, #4]
 80030be:	23a0      	movs	r3, #160	@ 0xa0
 80030c0:	05db      	lsls	r3, r3, #23
 80030c2:	429a      	cmp	r2, r3
 80030c4:	d013      	beq.n	80030ee <HAL_GPIO_Init+0x1ca>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	4a45      	ldr	r2, [pc, #276]	@ (80031e0 <HAL_GPIO_Init+0x2bc>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d00d      	beq.n	80030ea <HAL_GPIO_Init+0x1c6>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	4a44      	ldr	r2, [pc, #272]	@ (80031e4 <HAL_GPIO_Init+0x2c0>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d007      	beq.n	80030e6 <HAL_GPIO_Init+0x1c2>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	4a43      	ldr	r2, [pc, #268]	@ (80031e8 <HAL_GPIO_Init+0x2c4>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d101      	bne.n	80030e2 <HAL_GPIO_Init+0x1be>
 80030de:	2303      	movs	r3, #3
 80030e0:	e006      	b.n	80030f0 <HAL_GPIO_Init+0x1cc>
 80030e2:	2305      	movs	r3, #5
 80030e4:	e004      	b.n	80030f0 <HAL_GPIO_Init+0x1cc>
 80030e6:	2302      	movs	r3, #2
 80030e8:	e002      	b.n	80030f0 <HAL_GPIO_Init+0x1cc>
 80030ea:	2301      	movs	r3, #1
 80030ec:	e000      	b.n	80030f0 <HAL_GPIO_Init+0x1cc>
 80030ee:	2300      	movs	r3, #0
 80030f0:	697a      	ldr	r2, [r7, #20]
 80030f2:	2103      	movs	r1, #3
 80030f4:	400a      	ands	r2, r1
 80030f6:	00d2      	lsls	r2, r2, #3
 80030f8:	4093      	lsls	r3, r2
 80030fa:	693a      	ldr	r2, [r7, #16]
 80030fc:	4313      	orrs	r3, r2
 80030fe:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8003100:	4936      	ldr	r1, [pc, #216]	@ (80031dc <HAL_GPIO_Init+0x2b8>)
 8003102:	697b      	ldr	r3, [r7, #20]
 8003104:	089b      	lsrs	r3, r3, #2
 8003106:	3318      	adds	r3, #24
 8003108:	009b      	lsls	r3, r3, #2
 800310a:	693a      	ldr	r2, [r7, #16]
 800310c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800310e:	4b33      	ldr	r3, [pc, #204]	@ (80031dc <HAL_GPIO_Init+0x2b8>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	43da      	mvns	r2, r3
 8003118:	693b      	ldr	r3, [r7, #16]
 800311a:	4013      	ands	r3, r2
 800311c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	685a      	ldr	r2, [r3, #4]
 8003122:	2380      	movs	r3, #128	@ 0x80
 8003124:	035b      	lsls	r3, r3, #13
 8003126:	4013      	ands	r3, r2
 8003128:	d003      	beq.n	8003132 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 800312a:	693a      	ldr	r2, [r7, #16]
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	4313      	orrs	r3, r2
 8003130:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003132:	4b2a      	ldr	r3, [pc, #168]	@ (80031dc <HAL_GPIO_Init+0x2b8>)
 8003134:	693a      	ldr	r2, [r7, #16]
 8003136:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8003138:	4b28      	ldr	r3, [pc, #160]	@ (80031dc <HAL_GPIO_Init+0x2b8>)
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	43da      	mvns	r2, r3
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	4013      	ands	r3, r2
 8003146:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	685a      	ldr	r2, [r3, #4]
 800314c:	2380      	movs	r3, #128	@ 0x80
 800314e:	039b      	lsls	r3, r3, #14
 8003150:	4013      	ands	r3, r2
 8003152:	d003      	beq.n	800315c <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8003154:	693a      	ldr	r2, [r7, #16]
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	4313      	orrs	r3, r2
 800315a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800315c:	4b1f      	ldr	r3, [pc, #124]	@ (80031dc <HAL_GPIO_Init+0x2b8>)
 800315e:	693a      	ldr	r2, [r7, #16]
 8003160:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003162:	4a1e      	ldr	r2, [pc, #120]	@ (80031dc <HAL_GPIO_Init+0x2b8>)
 8003164:	2384      	movs	r3, #132	@ 0x84
 8003166:	58d3      	ldr	r3, [r2, r3]
 8003168:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	43da      	mvns	r2, r3
 800316e:	693b      	ldr	r3, [r7, #16]
 8003170:	4013      	ands	r3, r2
 8003172:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	685a      	ldr	r2, [r3, #4]
 8003178:	2380      	movs	r3, #128	@ 0x80
 800317a:	029b      	lsls	r3, r3, #10
 800317c:	4013      	ands	r3, r2
 800317e:	d003      	beq.n	8003188 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8003180:	693a      	ldr	r2, [r7, #16]
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	4313      	orrs	r3, r2
 8003186:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003188:	4914      	ldr	r1, [pc, #80]	@ (80031dc <HAL_GPIO_Init+0x2b8>)
 800318a:	2284      	movs	r2, #132	@ 0x84
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8003190:	4a12      	ldr	r2, [pc, #72]	@ (80031dc <HAL_GPIO_Init+0x2b8>)
 8003192:	2380      	movs	r3, #128	@ 0x80
 8003194:	58d3      	ldr	r3, [r2, r3]
 8003196:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	43da      	mvns	r2, r3
 800319c:	693b      	ldr	r3, [r7, #16]
 800319e:	4013      	ands	r3, r2
 80031a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	685a      	ldr	r2, [r3, #4]
 80031a6:	2380      	movs	r3, #128	@ 0x80
 80031a8:	025b      	lsls	r3, r3, #9
 80031aa:	4013      	ands	r3, r2
 80031ac:	d003      	beq.n	80031b6 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 80031ae:	693a      	ldr	r2, [r7, #16]
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	4313      	orrs	r3, r2
 80031b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80031b6:	4909      	ldr	r1, [pc, #36]	@ (80031dc <HAL_GPIO_Init+0x2b8>)
 80031b8:	2280      	movs	r2, #128	@ 0x80
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80031be:	697b      	ldr	r3, [r7, #20]
 80031c0:	3301      	adds	r3, #1
 80031c2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	681a      	ldr	r2, [r3, #0]
 80031c8:	697b      	ldr	r3, [r7, #20]
 80031ca:	40da      	lsrs	r2, r3
 80031cc:	1e13      	subs	r3, r2, #0
 80031ce:	d000      	beq.n	80031d2 <HAL_GPIO_Init+0x2ae>
 80031d0:	e6b0      	b.n	8002f34 <HAL_GPIO_Init+0x10>
  }
}
 80031d2:	46c0      	nop			@ (mov r8, r8)
 80031d4:	46c0      	nop			@ (mov r8, r8)
 80031d6:	46bd      	mov	sp, r7
 80031d8:	b006      	add	sp, #24
 80031da:	bd80      	pop	{r7, pc}
 80031dc:	40021800 	.word	0x40021800
 80031e0:	50000400 	.word	0x50000400
 80031e4:	50000800 	.word	0x50000800
 80031e8:	50000c00 	.word	0x50000c00

080031ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b082      	sub	sp, #8
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
 80031f4:	0008      	movs	r0, r1
 80031f6:	0011      	movs	r1, r2
 80031f8:	1cbb      	adds	r3, r7, #2
 80031fa:	1c02      	adds	r2, r0, #0
 80031fc:	801a      	strh	r2, [r3, #0]
 80031fe:	1c7b      	adds	r3, r7, #1
 8003200:	1c0a      	adds	r2, r1, #0
 8003202:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003204:	1c7b      	adds	r3, r7, #1
 8003206:	781b      	ldrb	r3, [r3, #0]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d004      	beq.n	8003216 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800320c:	1cbb      	adds	r3, r7, #2
 800320e:	881a      	ldrh	r2, [r3, #0]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003214:	e003      	b.n	800321e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003216:	1cbb      	adds	r3, r7, #2
 8003218:	881a      	ldrh	r2, [r3, #0]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800321e:	46c0      	nop			@ (mov r8, r8)
 8003220:	46bd      	mov	sp, r7
 8003222:	b002      	add	sp, #8
 8003224:	bd80      	pop	{r7, pc}
	...

08003228 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b082      	sub	sp, #8
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d101      	bne.n	800323a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003236:	2301      	movs	r3, #1
 8003238:	e08f      	b.n	800335a <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2241      	movs	r2, #65	@ 0x41
 800323e:	5c9b      	ldrb	r3, [r3, r2]
 8003240:	b2db      	uxtb	r3, r3
 8003242:	2b00      	cmp	r3, #0
 8003244:	d107      	bne.n	8003256 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2240      	movs	r2, #64	@ 0x40
 800324a:	2100      	movs	r1, #0
 800324c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	0018      	movs	r0, r3
 8003252:	f7fd ff7f 	bl	8001154 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2241      	movs	r2, #65	@ 0x41
 800325a:	2124      	movs	r1, #36	@ 0x24
 800325c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	681a      	ldr	r2, [r3, #0]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	2101      	movs	r1, #1
 800326a:	438a      	bics	r2, r1
 800326c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	685a      	ldr	r2, [r3, #4]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	493b      	ldr	r1, [pc, #236]	@ (8003364 <HAL_I2C_Init+0x13c>)
 8003278:	400a      	ands	r2, r1
 800327a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	689a      	ldr	r2, [r3, #8]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4938      	ldr	r1, [pc, #224]	@ (8003368 <HAL_I2C_Init+0x140>)
 8003288:	400a      	ands	r2, r1
 800328a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	68db      	ldr	r3, [r3, #12]
 8003290:	2b01      	cmp	r3, #1
 8003292:	d108      	bne.n	80032a6 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	689a      	ldr	r2, [r3, #8]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	2180      	movs	r1, #128	@ 0x80
 800329e:	0209      	lsls	r1, r1, #8
 80032a0:	430a      	orrs	r2, r1
 80032a2:	609a      	str	r2, [r3, #8]
 80032a4:	e007      	b.n	80032b6 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	689a      	ldr	r2, [r3, #8]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	2184      	movs	r1, #132	@ 0x84
 80032b0:	0209      	lsls	r1, r1, #8
 80032b2:	430a      	orrs	r2, r1
 80032b4:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	68db      	ldr	r3, [r3, #12]
 80032ba:	2b02      	cmp	r3, #2
 80032bc:	d109      	bne.n	80032d2 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	685a      	ldr	r2, [r3, #4]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	2180      	movs	r1, #128	@ 0x80
 80032ca:	0109      	lsls	r1, r1, #4
 80032cc:	430a      	orrs	r2, r1
 80032ce:	605a      	str	r2, [r3, #4]
 80032d0:	e007      	b.n	80032e2 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	685a      	ldr	r2, [r3, #4]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4923      	ldr	r1, [pc, #140]	@ (800336c <HAL_I2C_Init+0x144>)
 80032de:	400a      	ands	r2, r1
 80032e0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	685a      	ldr	r2, [r3, #4]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4920      	ldr	r1, [pc, #128]	@ (8003370 <HAL_I2C_Init+0x148>)
 80032ee:	430a      	orrs	r2, r1
 80032f0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	68da      	ldr	r2, [r3, #12]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	491a      	ldr	r1, [pc, #104]	@ (8003368 <HAL_I2C_Init+0x140>)
 80032fe:	400a      	ands	r2, r1
 8003300:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	691a      	ldr	r2, [r3, #16]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	695b      	ldr	r3, [r3, #20]
 800330a:	431a      	orrs	r2, r3
 800330c:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	699b      	ldr	r3, [r3, #24]
 8003312:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	430a      	orrs	r2, r1
 800331a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	69d9      	ldr	r1, [r3, #28]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6a1a      	ldr	r2, [r3, #32]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	430a      	orrs	r2, r1
 800332a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	681a      	ldr	r2, [r3, #0]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	2101      	movs	r1, #1
 8003338:	430a      	orrs	r2, r1
 800333a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2200      	movs	r2, #0
 8003340:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2241      	movs	r2, #65	@ 0x41
 8003346:	2120      	movs	r1, #32
 8003348:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2200      	movs	r2, #0
 800334e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2242      	movs	r2, #66	@ 0x42
 8003354:	2100      	movs	r1, #0
 8003356:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003358:	2300      	movs	r3, #0
}
 800335a:	0018      	movs	r0, r3
 800335c:	46bd      	mov	sp, r7
 800335e:	b002      	add	sp, #8
 8003360:	bd80      	pop	{r7, pc}
 8003362:	46c0      	nop			@ (mov r8, r8)
 8003364:	f0ffffff 	.word	0xf0ffffff
 8003368:	ffff7fff 	.word	0xffff7fff
 800336c:	fffff7ff 	.word	0xfffff7ff
 8003370:	02008000 	.word	0x02008000

08003374 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b082      	sub	sp, #8
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
 800337c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2241      	movs	r2, #65	@ 0x41
 8003382:	5c9b      	ldrb	r3, [r3, r2]
 8003384:	b2db      	uxtb	r3, r3
 8003386:	2b20      	cmp	r3, #32
 8003388:	d138      	bne.n	80033fc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2240      	movs	r2, #64	@ 0x40
 800338e:	5c9b      	ldrb	r3, [r3, r2]
 8003390:	2b01      	cmp	r3, #1
 8003392:	d101      	bne.n	8003398 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003394:	2302      	movs	r3, #2
 8003396:	e032      	b.n	80033fe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2240      	movs	r2, #64	@ 0x40
 800339c:	2101      	movs	r1, #1
 800339e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2241      	movs	r2, #65	@ 0x41
 80033a4:	2124      	movs	r1, #36	@ 0x24
 80033a6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	681a      	ldr	r2, [r3, #0]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	2101      	movs	r1, #1
 80033b4:	438a      	bics	r2, r1
 80033b6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	681a      	ldr	r2, [r3, #0]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4911      	ldr	r1, [pc, #68]	@ (8003408 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80033c4:	400a      	ands	r2, r1
 80033c6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	6819      	ldr	r1, [r3, #0]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	683a      	ldr	r2, [r7, #0]
 80033d4:	430a      	orrs	r2, r1
 80033d6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	681a      	ldr	r2, [r3, #0]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	2101      	movs	r1, #1
 80033e4:	430a      	orrs	r2, r1
 80033e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2241      	movs	r2, #65	@ 0x41
 80033ec:	2120      	movs	r1, #32
 80033ee:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2240      	movs	r2, #64	@ 0x40
 80033f4:	2100      	movs	r1, #0
 80033f6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80033f8:	2300      	movs	r3, #0
 80033fa:	e000      	b.n	80033fe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80033fc:	2302      	movs	r3, #2
  }
}
 80033fe:	0018      	movs	r0, r3
 8003400:	46bd      	mov	sp, r7
 8003402:	b002      	add	sp, #8
 8003404:	bd80      	pop	{r7, pc}
 8003406:	46c0      	nop			@ (mov r8, r8)
 8003408:	ffffefff 	.word	0xffffefff

0800340c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b084      	sub	sp, #16
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
 8003414:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2241      	movs	r2, #65	@ 0x41
 800341a:	5c9b      	ldrb	r3, [r3, r2]
 800341c:	b2db      	uxtb	r3, r3
 800341e:	2b20      	cmp	r3, #32
 8003420:	d139      	bne.n	8003496 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2240      	movs	r2, #64	@ 0x40
 8003426:	5c9b      	ldrb	r3, [r3, r2]
 8003428:	2b01      	cmp	r3, #1
 800342a:	d101      	bne.n	8003430 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800342c:	2302      	movs	r3, #2
 800342e:	e033      	b.n	8003498 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2240      	movs	r2, #64	@ 0x40
 8003434:	2101      	movs	r1, #1
 8003436:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2241      	movs	r2, #65	@ 0x41
 800343c:	2124      	movs	r1, #36	@ 0x24
 800343e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	681a      	ldr	r2, [r3, #0]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	2101      	movs	r1, #1
 800344c:	438a      	bics	r2, r1
 800344e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	4a11      	ldr	r2, [pc, #68]	@ (80034a0 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 800345c:	4013      	ands	r3, r2
 800345e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	021b      	lsls	r3, r3, #8
 8003464:	68fa      	ldr	r2, [r7, #12]
 8003466:	4313      	orrs	r3, r2
 8003468:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	68fa      	ldr	r2, [r7, #12]
 8003470:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	681a      	ldr	r2, [r3, #0]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	2101      	movs	r1, #1
 800347e:	430a      	orrs	r2, r1
 8003480:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2241      	movs	r2, #65	@ 0x41
 8003486:	2120      	movs	r1, #32
 8003488:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2240      	movs	r2, #64	@ 0x40
 800348e:	2100      	movs	r1, #0
 8003490:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003492:	2300      	movs	r3, #0
 8003494:	e000      	b.n	8003498 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003496:	2302      	movs	r3, #2
  }
}
 8003498:	0018      	movs	r0, r3
 800349a:	46bd      	mov	sp, r7
 800349c:	b004      	add	sp, #16
 800349e:	bd80      	pop	{r7, pc}
 80034a0:	fffff0ff 	.word	0xfffff0ff

080034a4 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b084      	sub	sp, #16
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d101      	bne.n	80034b6 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 80034b2:	2301      	movs	r3, #1
 80034b4:	e03d      	b.n	8003532 <HAL_IWDG_Init+0x8e>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a20      	ldr	r2, [pc, #128]	@ (800353c <HAL_IWDG_Init+0x98>)
 80034bc:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4a1f      	ldr	r2, [pc, #124]	@ (8003540 <HAL_IWDG_Init+0x9c>)
 80034c4:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	687a      	ldr	r2, [r7, #4]
 80034cc:	6852      	ldr	r2, [r2, #4]
 80034ce:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	687a      	ldr	r2, [r7, #4]
 80034d6:	6892      	ldr	r2, [r2, #8]
 80034d8:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 80034da:	f7fe fd6d 	bl	8001fb8 <HAL_GetTick>
 80034de:	0003      	movs	r3, r0
 80034e0:	60fb      	str	r3, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80034e2:	e00e      	b.n	8003502 <HAL_IWDG_Init+0x5e>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 80034e4:	f7fe fd68 	bl	8001fb8 <HAL_GetTick>
 80034e8:	0002      	movs	r2, r0
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	1ad3      	subs	r3, r2, r3
 80034ee:	2b31      	cmp	r3, #49	@ 0x31
 80034f0:	d907      	bls.n	8003502 <HAL_IWDG_Init+0x5e>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	68db      	ldr	r3, [r3, #12]
 80034f8:	2207      	movs	r2, #7
 80034fa:	4013      	ands	r3, r2
 80034fc:	d001      	beq.n	8003502 <HAL_IWDG_Init+0x5e>
      {
        return HAL_TIMEOUT;
 80034fe:	2303      	movs	r3, #3
 8003500:	e017      	b.n	8003532 <HAL_IWDG_Init+0x8e>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	68db      	ldr	r3, [r3, #12]
 8003508:	2207      	movs	r2, #7
 800350a:	4013      	ands	r3, r2
 800350c:	d1ea      	bne.n	80034e4 <HAL_IWDG_Init+0x40>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	691a      	ldr	r2, [r3, #16]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	68db      	ldr	r3, [r3, #12]
 8003518:	429a      	cmp	r2, r3
 800351a:	d005      	beq.n	8003528 <HAL_IWDG_Init+0x84>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	687a      	ldr	r2, [r7, #4]
 8003522:	68d2      	ldr	r2, [r2, #12]
 8003524:	611a      	str	r2, [r3, #16]
 8003526:	e003      	b.n	8003530 <HAL_IWDG_Init+0x8c>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a05      	ldr	r2, [pc, #20]	@ (8003544 <HAL_IWDG_Init+0xa0>)
 800352e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003530:	2300      	movs	r3, #0
}
 8003532:	0018      	movs	r0, r3
 8003534:	46bd      	mov	sp, r7
 8003536:	b004      	add	sp, #16
 8003538:	bd80      	pop	{r7, pc}
 800353a:	46c0      	nop			@ (mov r8, r8)
 800353c:	0000cccc 	.word	0x0000cccc
 8003540:	00005555 	.word	0x00005555
 8003544:	0000aaaa 	.word	0x0000aaaa

08003548 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b082      	sub	sp, #8
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a03      	ldr	r2, [pc, #12]	@ (8003564 <HAL_IWDG_Refresh+0x1c>)
 8003556:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003558:	2300      	movs	r3, #0
}
 800355a:	0018      	movs	r0, r3
 800355c:	46bd      	mov	sp, r7
 800355e:	b002      	add	sp, #8
 8003560:	bd80      	pop	{r7, pc}
 8003562:	46c0      	nop			@ (mov r8, r8)
 8003564:	0000aaaa 	.word	0x0000aaaa

08003568 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b084      	sub	sp, #16
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8003570:	4b19      	ldr	r3, [pc, #100]	@ (80035d8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a19      	ldr	r2, [pc, #100]	@ (80035dc <HAL_PWREx_ControlVoltageScaling+0x74>)
 8003576:	4013      	ands	r3, r2
 8003578:	0019      	movs	r1, r3
 800357a:	4b17      	ldr	r3, [pc, #92]	@ (80035d8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800357c:	687a      	ldr	r2, [r7, #4]
 800357e:	430a      	orrs	r2, r1
 8003580:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003582:	687a      	ldr	r2, [r7, #4]
 8003584:	2380      	movs	r3, #128	@ 0x80
 8003586:	009b      	lsls	r3, r3, #2
 8003588:	429a      	cmp	r2, r3
 800358a:	d11f      	bne.n	80035cc <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 800358c:	4b14      	ldr	r3, [pc, #80]	@ (80035e0 <HAL_PWREx_ControlVoltageScaling+0x78>)
 800358e:	681a      	ldr	r2, [r3, #0]
 8003590:	0013      	movs	r3, r2
 8003592:	005b      	lsls	r3, r3, #1
 8003594:	189b      	adds	r3, r3, r2
 8003596:	005b      	lsls	r3, r3, #1
 8003598:	4912      	ldr	r1, [pc, #72]	@ (80035e4 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800359a:	0018      	movs	r0, r3
 800359c:	f7fc fe0c 	bl	80001b8 <__udivsi3>
 80035a0:	0003      	movs	r3, r0
 80035a2:	3301      	adds	r3, #1
 80035a4:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80035a6:	e008      	b.n	80035ba <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d003      	beq.n	80035b6 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	3b01      	subs	r3, #1
 80035b2:	60fb      	str	r3, [r7, #12]
 80035b4:	e001      	b.n	80035ba <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80035b6:	2303      	movs	r3, #3
 80035b8:	e009      	b.n	80035ce <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80035ba:	4b07      	ldr	r3, [pc, #28]	@ (80035d8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80035bc:	695a      	ldr	r2, [r3, #20]
 80035be:	2380      	movs	r3, #128	@ 0x80
 80035c0:	00db      	lsls	r3, r3, #3
 80035c2:	401a      	ands	r2, r3
 80035c4:	2380      	movs	r3, #128	@ 0x80
 80035c6:	00db      	lsls	r3, r3, #3
 80035c8:	429a      	cmp	r2, r3
 80035ca:	d0ed      	beq.n	80035a8 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80035cc:	2300      	movs	r3, #0
}
 80035ce:	0018      	movs	r0, r3
 80035d0:	46bd      	mov	sp, r7
 80035d2:	b004      	add	sp, #16
 80035d4:	bd80      	pop	{r7, pc}
 80035d6:	46c0      	nop			@ (mov r8, r8)
 80035d8:	40007000 	.word	0x40007000
 80035dc:	fffff9ff 	.word	0xfffff9ff
 80035e0:	200000b8 	.word	0x200000b8
 80035e4:	000f4240 	.word	0x000f4240

080035e8 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80035ec:	4b03      	ldr	r3, [pc, #12]	@ (80035fc <LL_RCC_GetAPB1Prescaler+0x14>)
 80035ee:	689a      	ldr	r2, [r3, #8]
 80035f0:	23e0      	movs	r3, #224	@ 0xe0
 80035f2:	01db      	lsls	r3, r3, #7
 80035f4:	4013      	ands	r3, r2
}
 80035f6:	0018      	movs	r0, r3
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bd80      	pop	{r7, pc}
 80035fc:	40021000 	.word	0x40021000

08003600 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b088      	sub	sp, #32
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d101      	bne.n	8003612 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800360e:	2301      	movs	r3, #1
 8003610:	e2f3      	b.n	8003bfa <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	2201      	movs	r2, #1
 8003618:	4013      	ands	r3, r2
 800361a:	d100      	bne.n	800361e <HAL_RCC_OscConfig+0x1e>
 800361c:	e07c      	b.n	8003718 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800361e:	4bc3      	ldr	r3, [pc, #780]	@ (800392c <HAL_RCC_OscConfig+0x32c>)
 8003620:	689b      	ldr	r3, [r3, #8]
 8003622:	2238      	movs	r2, #56	@ 0x38
 8003624:	4013      	ands	r3, r2
 8003626:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003628:	4bc0      	ldr	r3, [pc, #768]	@ (800392c <HAL_RCC_OscConfig+0x32c>)
 800362a:	68db      	ldr	r3, [r3, #12]
 800362c:	2203      	movs	r2, #3
 800362e:	4013      	ands	r3, r2
 8003630:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8003632:	69bb      	ldr	r3, [r7, #24]
 8003634:	2b10      	cmp	r3, #16
 8003636:	d102      	bne.n	800363e <HAL_RCC_OscConfig+0x3e>
 8003638:	697b      	ldr	r3, [r7, #20]
 800363a:	2b03      	cmp	r3, #3
 800363c:	d002      	beq.n	8003644 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800363e:	69bb      	ldr	r3, [r7, #24]
 8003640:	2b08      	cmp	r3, #8
 8003642:	d10b      	bne.n	800365c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003644:	4bb9      	ldr	r3, [pc, #740]	@ (800392c <HAL_RCC_OscConfig+0x32c>)
 8003646:	681a      	ldr	r2, [r3, #0]
 8003648:	2380      	movs	r3, #128	@ 0x80
 800364a:	029b      	lsls	r3, r3, #10
 800364c:	4013      	ands	r3, r2
 800364e:	d062      	beq.n	8003716 <HAL_RCC_OscConfig+0x116>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d15e      	bne.n	8003716 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8003658:	2301      	movs	r3, #1
 800365a:	e2ce      	b.n	8003bfa <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	685a      	ldr	r2, [r3, #4]
 8003660:	2380      	movs	r3, #128	@ 0x80
 8003662:	025b      	lsls	r3, r3, #9
 8003664:	429a      	cmp	r2, r3
 8003666:	d107      	bne.n	8003678 <HAL_RCC_OscConfig+0x78>
 8003668:	4bb0      	ldr	r3, [pc, #704]	@ (800392c <HAL_RCC_OscConfig+0x32c>)
 800366a:	681a      	ldr	r2, [r3, #0]
 800366c:	4baf      	ldr	r3, [pc, #700]	@ (800392c <HAL_RCC_OscConfig+0x32c>)
 800366e:	2180      	movs	r1, #128	@ 0x80
 8003670:	0249      	lsls	r1, r1, #9
 8003672:	430a      	orrs	r2, r1
 8003674:	601a      	str	r2, [r3, #0]
 8003676:	e020      	b.n	80036ba <HAL_RCC_OscConfig+0xba>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	685a      	ldr	r2, [r3, #4]
 800367c:	23a0      	movs	r3, #160	@ 0xa0
 800367e:	02db      	lsls	r3, r3, #11
 8003680:	429a      	cmp	r2, r3
 8003682:	d10e      	bne.n	80036a2 <HAL_RCC_OscConfig+0xa2>
 8003684:	4ba9      	ldr	r3, [pc, #676]	@ (800392c <HAL_RCC_OscConfig+0x32c>)
 8003686:	681a      	ldr	r2, [r3, #0]
 8003688:	4ba8      	ldr	r3, [pc, #672]	@ (800392c <HAL_RCC_OscConfig+0x32c>)
 800368a:	2180      	movs	r1, #128	@ 0x80
 800368c:	02c9      	lsls	r1, r1, #11
 800368e:	430a      	orrs	r2, r1
 8003690:	601a      	str	r2, [r3, #0]
 8003692:	4ba6      	ldr	r3, [pc, #664]	@ (800392c <HAL_RCC_OscConfig+0x32c>)
 8003694:	681a      	ldr	r2, [r3, #0]
 8003696:	4ba5      	ldr	r3, [pc, #660]	@ (800392c <HAL_RCC_OscConfig+0x32c>)
 8003698:	2180      	movs	r1, #128	@ 0x80
 800369a:	0249      	lsls	r1, r1, #9
 800369c:	430a      	orrs	r2, r1
 800369e:	601a      	str	r2, [r3, #0]
 80036a0:	e00b      	b.n	80036ba <HAL_RCC_OscConfig+0xba>
 80036a2:	4ba2      	ldr	r3, [pc, #648]	@ (800392c <HAL_RCC_OscConfig+0x32c>)
 80036a4:	681a      	ldr	r2, [r3, #0]
 80036a6:	4ba1      	ldr	r3, [pc, #644]	@ (800392c <HAL_RCC_OscConfig+0x32c>)
 80036a8:	49a1      	ldr	r1, [pc, #644]	@ (8003930 <HAL_RCC_OscConfig+0x330>)
 80036aa:	400a      	ands	r2, r1
 80036ac:	601a      	str	r2, [r3, #0]
 80036ae:	4b9f      	ldr	r3, [pc, #636]	@ (800392c <HAL_RCC_OscConfig+0x32c>)
 80036b0:	681a      	ldr	r2, [r3, #0]
 80036b2:	4b9e      	ldr	r3, [pc, #632]	@ (800392c <HAL_RCC_OscConfig+0x32c>)
 80036b4:	499f      	ldr	r1, [pc, #636]	@ (8003934 <HAL_RCC_OscConfig+0x334>)
 80036b6:	400a      	ands	r2, r1
 80036b8:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d014      	beq.n	80036ec <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036c2:	f7fe fc79 	bl	8001fb8 <HAL_GetTick>
 80036c6:	0003      	movs	r3, r0
 80036c8:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80036ca:	e008      	b.n	80036de <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036cc:	f7fe fc74 	bl	8001fb8 <HAL_GetTick>
 80036d0:	0002      	movs	r2, r0
 80036d2:	693b      	ldr	r3, [r7, #16]
 80036d4:	1ad3      	subs	r3, r2, r3
 80036d6:	2b64      	cmp	r3, #100	@ 0x64
 80036d8:	d901      	bls.n	80036de <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80036da:	2303      	movs	r3, #3
 80036dc:	e28d      	b.n	8003bfa <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80036de:	4b93      	ldr	r3, [pc, #588]	@ (800392c <HAL_RCC_OscConfig+0x32c>)
 80036e0:	681a      	ldr	r2, [r3, #0]
 80036e2:	2380      	movs	r3, #128	@ 0x80
 80036e4:	029b      	lsls	r3, r3, #10
 80036e6:	4013      	ands	r3, r2
 80036e8:	d0f0      	beq.n	80036cc <HAL_RCC_OscConfig+0xcc>
 80036ea:	e015      	b.n	8003718 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036ec:	f7fe fc64 	bl	8001fb8 <HAL_GetTick>
 80036f0:	0003      	movs	r3, r0
 80036f2:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80036f4:	e008      	b.n	8003708 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036f6:	f7fe fc5f 	bl	8001fb8 <HAL_GetTick>
 80036fa:	0002      	movs	r2, r0
 80036fc:	693b      	ldr	r3, [r7, #16]
 80036fe:	1ad3      	subs	r3, r2, r3
 8003700:	2b64      	cmp	r3, #100	@ 0x64
 8003702:	d901      	bls.n	8003708 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003704:	2303      	movs	r3, #3
 8003706:	e278      	b.n	8003bfa <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003708:	4b88      	ldr	r3, [pc, #544]	@ (800392c <HAL_RCC_OscConfig+0x32c>)
 800370a:	681a      	ldr	r2, [r3, #0]
 800370c:	2380      	movs	r3, #128	@ 0x80
 800370e:	029b      	lsls	r3, r3, #10
 8003710:	4013      	ands	r3, r2
 8003712:	d1f0      	bne.n	80036f6 <HAL_RCC_OscConfig+0xf6>
 8003714:	e000      	b.n	8003718 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003716:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	2202      	movs	r2, #2
 800371e:	4013      	ands	r3, r2
 8003720:	d100      	bne.n	8003724 <HAL_RCC_OscConfig+0x124>
 8003722:	e099      	b.n	8003858 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003724:	4b81      	ldr	r3, [pc, #516]	@ (800392c <HAL_RCC_OscConfig+0x32c>)
 8003726:	689b      	ldr	r3, [r3, #8]
 8003728:	2238      	movs	r2, #56	@ 0x38
 800372a:	4013      	ands	r3, r2
 800372c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800372e:	4b7f      	ldr	r3, [pc, #508]	@ (800392c <HAL_RCC_OscConfig+0x32c>)
 8003730:	68db      	ldr	r3, [r3, #12]
 8003732:	2203      	movs	r2, #3
 8003734:	4013      	ands	r3, r2
 8003736:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8003738:	69bb      	ldr	r3, [r7, #24]
 800373a:	2b10      	cmp	r3, #16
 800373c:	d102      	bne.n	8003744 <HAL_RCC_OscConfig+0x144>
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	2b02      	cmp	r3, #2
 8003742:	d002      	beq.n	800374a <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8003744:	69bb      	ldr	r3, [r7, #24]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d135      	bne.n	80037b6 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800374a:	4b78      	ldr	r3, [pc, #480]	@ (800392c <HAL_RCC_OscConfig+0x32c>)
 800374c:	681a      	ldr	r2, [r3, #0]
 800374e:	2380      	movs	r3, #128	@ 0x80
 8003750:	00db      	lsls	r3, r3, #3
 8003752:	4013      	ands	r3, r2
 8003754:	d005      	beq.n	8003762 <HAL_RCC_OscConfig+0x162>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	68db      	ldr	r3, [r3, #12]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d101      	bne.n	8003762 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800375e:	2301      	movs	r3, #1
 8003760:	e24b      	b.n	8003bfa <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003762:	4b72      	ldr	r3, [pc, #456]	@ (800392c <HAL_RCC_OscConfig+0x32c>)
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	4a74      	ldr	r2, [pc, #464]	@ (8003938 <HAL_RCC_OscConfig+0x338>)
 8003768:	4013      	ands	r3, r2
 800376a:	0019      	movs	r1, r3
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	695b      	ldr	r3, [r3, #20]
 8003770:	021a      	lsls	r2, r3, #8
 8003772:	4b6e      	ldr	r3, [pc, #440]	@ (800392c <HAL_RCC_OscConfig+0x32c>)
 8003774:	430a      	orrs	r2, r1
 8003776:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003778:	69bb      	ldr	r3, [r7, #24]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d112      	bne.n	80037a4 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800377e:	4b6b      	ldr	r3, [pc, #428]	@ (800392c <HAL_RCC_OscConfig+0x32c>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a6e      	ldr	r2, [pc, #440]	@ (800393c <HAL_RCC_OscConfig+0x33c>)
 8003784:	4013      	ands	r3, r2
 8003786:	0019      	movs	r1, r3
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	691a      	ldr	r2, [r3, #16]
 800378c:	4b67      	ldr	r3, [pc, #412]	@ (800392c <HAL_RCC_OscConfig+0x32c>)
 800378e:	430a      	orrs	r2, r1
 8003790:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8003792:	4b66      	ldr	r3, [pc, #408]	@ (800392c <HAL_RCC_OscConfig+0x32c>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	0adb      	lsrs	r3, r3, #11
 8003798:	2207      	movs	r2, #7
 800379a:	4013      	ands	r3, r2
 800379c:	4a68      	ldr	r2, [pc, #416]	@ (8003940 <HAL_RCC_OscConfig+0x340>)
 800379e:	40da      	lsrs	r2, r3
 80037a0:	4b68      	ldr	r3, [pc, #416]	@ (8003944 <HAL_RCC_OscConfig+0x344>)
 80037a2:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80037a4:	4b68      	ldr	r3, [pc, #416]	@ (8003948 <HAL_RCC_OscConfig+0x348>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	0018      	movs	r0, r3
 80037aa:	f7fe fba9 	bl	8001f00 <HAL_InitTick>
 80037ae:	1e03      	subs	r3, r0, #0
 80037b0:	d051      	beq.n	8003856 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80037b2:	2301      	movs	r3, #1
 80037b4:	e221      	b.n	8003bfa <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	68db      	ldr	r3, [r3, #12]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d030      	beq.n	8003820 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80037be:	4b5b      	ldr	r3, [pc, #364]	@ (800392c <HAL_RCC_OscConfig+0x32c>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a5e      	ldr	r2, [pc, #376]	@ (800393c <HAL_RCC_OscConfig+0x33c>)
 80037c4:	4013      	ands	r3, r2
 80037c6:	0019      	movs	r1, r3
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	691a      	ldr	r2, [r3, #16]
 80037cc:	4b57      	ldr	r3, [pc, #348]	@ (800392c <HAL_RCC_OscConfig+0x32c>)
 80037ce:	430a      	orrs	r2, r1
 80037d0:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80037d2:	4b56      	ldr	r3, [pc, #344]	@ (800392c <HAL_RCC_OscConfig+0x32c>)
 80037d4:	681a      	ldr	r2, [r3, #0]
 80037d6:	4b55      	ldr	r3, [pc, #340]	@ (800392c <HAL_RCC_OscConfig+0x32c>)
 80037d8:	2180      	movs	r1, #128	@ 0x80
 80037da:	0049      	lsls	r1, r1, #1
 80037dc:	430a      	orrs	r2, r1
 80037de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037e0:	f7fe fbea 	bl	8001fb8 <HAL_GetTick>
 80037e4:	0003      	movs	r3, r0
 80037e6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80037e8:	e008      	b.n	80037fc <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037ea:	f7fe fbe5 	bl	8001fb8 <HAL_GetTick>
 80037ee:	0002      	movs	r2, r0
 80037f0:	693b      	ldr	r3, [r7, #16]
 80037f2:	1ad3      	subs	r3, r2, r3
 80037f4:	2b02      	cmp	r3, #2
 80037f6:	d901      	bls.n	80037fc <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80037f8:	2303      	movs	r3, #3
 80037fa:	e1fe      	b.n	8003bfa <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80037fc:	4b4b      	ldr	r3, [pc, #300]	@ (800392c <HAL_RCC_OscConfig+0x32c>)
 80037fe:	681a      	ldr	r2, [r3, #0]
 8003800:	2380      	movs	r3, #128	@ 0x80
 8003802:	00db      	lsls	r3, r3, #3
 8003804:	4013      	ands	r3, r2
 8003806:	d0f0      	beq.n	80037ea <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003808:	4b48      	ldr	r3, [pc, #288]	@ (800392c <HAL_RCC_OscConfig+0x32c>)
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	4a4a      	ldr	r2, [pc, #296]	@ (8003938 <HAL_RCC_OscConfig+0x338>)
 800380e:	4013      	ands	r3, r2
 8003810:	0019      	movs	r1, r3
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	695b      	ldr	r3, [r3, #20]
 8003816:	021a      	lsls	r2, r3, #8
 8003818:	4b44      	ldr	r3, [pc, #272]	@ (800392c <HAL_RCC_OscConfig+0x32c>)
 800381a:	430a      	orrs	r2, r1
 800381c:	605a      	str	r2, [r3, #4]
 800381e:	e01b      	b.n	8003858 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8003820:	4b42      	ldr	r3, [pc, #264]	@ (800392c <HAL_RCC_OscConfig+0x32c>)
 8003822:	681a      	ldr	r2, [r3, #0]
 8003824:	4b41      	ldr	r3, [pc, #260]	@ (800392c <HAL_RCC_OscConfig+0x32c>)
 8003826:	4949      	ldr	r1, [pc, #292]	@ (800394c <HAL_RCC_OscConfig+0x34c>)
 8003828:	400a      	ands	r2, r1
 800382a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800382c:	f7fe fbc4 	bl	8001fb8 <HAL_GetTick>
 8003830:	0003      	movs	r3, r0
 8003832:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003834:	e008      	b.n	8003848 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003836:	f7fe fbbf 	bl	8001fb8 <HAL_GetTick>
 800383a:	0002      	movs	r2, r0
 800383c:	693b      	ldr	r3, [r7, #16]
 800383e:	1ad3      	subs	r3, r2, r3
 8003840:	2b02      	cmp	r3, #2
 8003842:	d901      	bls.n	8003848 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003844:	2303      	movs	r3, #3
 8003846:	e1d8      	b.n	8003bfa <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003848:	4b38      	ldr	r3, [pc, #224]	@ (800392c <HAL_RCC_OscConfig+0x32c>)
 800384a:	681a      	ldr	r2, [r3, #0]
 800384c:	2380      	movs	r3, #128	@ 0x80
 800384e:	00db      	lsls	r3, r3, #3
 8003850:	4013      	ands	r3, r2
 8003852:	d1f0      	bne.n	8003836 <HAL_RCC_OscConfig+0x236>
 8003854:	e000      	b.n	8003858 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003856:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	2208      	movs	r2, #8
 800385e:	4013      	ands	r3, r2
 8003860:	d047      	beq.n	80038f2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003862:	4b32      	ldr	r3, [pc, #200]	@ (800392c <HAL_RCC_OscConfig+0x32c>)
 8003864:	689b      	ldr	r3, [r3, #8]
 8003866:	2238      	movs	r2, #56	@ 0x38
 8003868:	4013      	ands	r3, r2
 800386a:	2b18      	cmp	r3, #24
 800386c:	d10a      	bne.n	8003884 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800386e:	4b2f      	ldr	r3, [pc, #188]	@ (800392c <HAL_RCC_OscConfig+0x32c>)
 8003870:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003872:	2202      	movs	r2, #2
 8003874:	4013      	ands	r3, r2
 8003876:	d03c      	beq.n	80038f2 <HAL_RCC_OscConfig+0x2f2>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	699b      	ldr	r3, [r3, #24]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d138      	bne.n	80038f2 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8003880:	2301      	movs	r3, #1
 8003882:	e1ba      	b.n	8003bfa <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	699b      	ldr	r3, [r3, #24]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d019      	beq.n	80038c0 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800388c:	4b27      	ldr	r3, [pc, #156]	@ (800392c <HAL_RCC_OscConfig+0x32c>)
 800388e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003890:	4b26      	ldr	r3, [pc, #152]	@ (800392c <HAL_RCC_OscConfig+0x32c>)
 8003892:	2101      	movs	r1, #1
 8003894:	430a      	orrs	r2, r1
 8003896:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003898:	f7fe fb8e 	bl	8001fb8 <HAL_GetTick>
 800389c:	0003      	movs	r3, r0
 800389e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80038a0:	e008      	b.n	80038b4 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038a2:	f7fe fb89 	bl	8001fb8 <HAL_GetTick>
 80038a6:	0002      	movs	r2, r0
 80038a8:	693b      	ldr	r3, [r7, #16]
 80038aa:	1ad3      	subs	r3, r2, r3
 80038ac:	2b02      	cmp	r3, #2
 80038ae:	d901      	bls.n	80038b4 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80038b0:	2303      	movs	r3, #3
 80038b2:	e1a2      	b.n	8003bfa <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80038b4:	4b1d      	ldr	r3, [pc, #116]	@ (800392c <HAL_RCC_OscConfig+0x32c>)
 80038b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038b8:	2202      	movs	r2, #2
 80038ba:	4013      	ands	r3, r2
 80038bc:	d0f1      	beq.n	80038a2 <HAL_RCC_OscConfig+0x2a2>
 80038be:	e018      	b.n	80038f2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80038c0:	4b1a      	ldr	r3, [pc, #104]	@ (800392c <HAL_RCC_OscConfig+0x32c>)
 80038c2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80038c4:	4b19      	ldr	r3, [pc, #100]	@ (800392c <HAL_RCC_OscConfig+0x32c>)
 80038c6:	2101      	movs	r1, #1
 80038c8:	438a      	bics	r2, r1
 80038ca:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038cc:	f7fe fb74 	bl	8001fb8 <HAL_GetTick>
 80038d0:	0003      	movs	r3, r0
 80038d2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80038d4:	e008      	b.n	80038e8 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038d6:	f7fe fb6f 	bl	8001fb8 <HAL_GetTick>
 80038da:	0002      	movs	r2, r0
 80038dc:	693b      	ldr	r3, [r7, #16]
 80038de:	1ad3      	subs	r3, r2, r3
 80038e0:	2b02      	cmp	r3, #2
 80038e2:	d901      	bls.n	80038e8 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80038e4:	2303      	movs	r3, #3
 80038e6:	e188      	b.n	8003bfa <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80038e8:	4b10      	ldr	r3, [pc, #64]	@ (800392c <HAL_RCC_OscConfig+0x32c>)
 80038ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038ec:	2202      	movs	r2, #2
 80038ee:	4013      	ands	r3, r2
 80038f0:	d1f1      	bne.n	80038d6 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	2204      	movs	r2, #4
 80038f8:	4013      	ands	r3, r2
 80038fa:	d100      	bne.n	80038fe <HAL_RCC_OscConfig+0x2fe>
 80038fc:	e0c6      	b.n	8003a8c <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038fe:	231f      	movs	r3, #31
 8003900:	18fb      	adds	r3, r7, r3
 8003902:	2200      	movs	r2, #0
 8003904:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003906:	4b09      	ldr	r3, [pc, #36]	@ (800392c <HAL_RCC_OscConfig+0x32c>)
 8003908:	689b      	ldr	r3, [r3, #8]
 800390a:	2238      	movs	r2, #56	@ 0x38
 800390c:	4013      	ands	r3, r2
 800390e:	2b20      	cmp	r3, #32
 8003910:	d11e      	bne.n	8003950 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8003912:	4b06      	ldr	r3, [pc, #24]	@ (800392c <HAL_RCC_OscConfig+0x32c>)
 8003914:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003916:	2202      	movs	r2, #2
 8003918:	4013      	ands	r3, r2
 800391a:	d100      	bne.n	800391e <HAL_RCC_OscConfig+0x31e>
 800391c:	e0b6      	b.n	8003a8c <HAL_RCC_OscConfig+0x48c>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	689b      	ldr	r3, [r3, #8]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d000      	beq.n	8003928 <HAL_RCC_OscConfig+0x328>
 8003926:	e0b1      	b.n	8003a8c <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8003928:	2301      	movs	r3, #1
 800392a:	e166      	b.n	8003bfa <HAL_RCC_OscConfig+0x5fa>
 800392c:	40021000 	.word	0x40021000
 8003930:	fffeffff 	.word	0xfffeffff
 8003934:	fffbffff 	.word	0xfffbffff
 8003938:	ffff80ff 	.word	0xffff80ff
 800393c:	ffffc7ff 	.word	0xffffc7ff
 8003940:	00f42400 	.word	0x00f42400
 8003944:	200000b8 	.word	0x200000b8
 8003948:	200000bc 	.word	0x200000bc
 800394c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003950:	4bac      	ldr	r3, [pc, #688]	@ (8003c04 <HAL_RCC_OscConfig+0x604>)
 8003952:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003954:	2380      	movs	r3, #128	@ 0x80
 8003956:	055b      	lsls	r3, r3, #21
 8003958:	4013      	ands	r3, r2
 800395a:	d101      	bne.n	8003960 <HAL_RCC_OscConfig+0x360>
 800395c:	2301      	movs	r3, #1
 800395e:	e000      	b.n	8003962 <HAL_RCC_OscConfig+0x362>
 8003960:	2300      	movs	r3, #0
 8003962:	2b00      	cmp	r3, #0
 8003964:	d011      	beq.n	800398a <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8003966:	4ba7      	ldr	r3, [pc, #668]	@ (8003c04 <HAL_RCC_OscConfig+0x604>)
 8003968:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800396a:	4ba6      	ldr	r3, [pc, #664]	@ (8003c04 <HAL_RCC_OscConfig+0x604>)
 800396c:	2180      	movs	r1, #128	@ 0x80
 800396e:	0549      	lsls	r1, r1, #21
 8003970:	430a      	orrs	r2, r1
 8003972:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003974:	4ba3      	ldr	r3, [pc, #652]	@ (8003c04 <HAL_RCC_OscConfig+0x604>)
 8003976:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003978:	2380      	movs	r3, #128	@ 0x80
 800397a:	055b      	lsls	r3, r3, #21
 800397c:	4013      	ands	r3, r2
 800397e:	60fb      	str	r3, [r7, #12]
 8003980:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8003982:	231f      	movs	r3, #31
 8003984:	18fb      	adds	r3, r7, r3
 8003986:	2201      	movs	r2, #1
 8003988:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800398a:	4b9f      	ldr	r3, [pc, #636]	@ (8003c08 <HAL_RCC_OscConfig+0x608>)
 800398c:	681a      	ldr	r2, [r3, #0]
 800398e:	2380      	movs	r3, #128	@ 0x80
 8003990:	005b      	lsls	r3, r3, #1
 8003992:	4013      	ands	r3, r2
 8003994:	d11a      	bne.n	80039cc <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003996:	4b9c      	ldr	r3, [pc, #624]	@ (8003c08 <HAL_RCC_OscConfig+0x608>)
 8003998:	681a      	ldr	r2, [r3, #0]
 800399a:	4b9b      	ldr	r3, [pc, #620]	@ (8003c08 <HAL_RCC_OscConfig+0x608>)
 800399c:	2180      	movs	r1, #128	@ 0x80
 800399e:	0049      	lsls	r1, r1, #1
 80039a0:	430a      	orrs	r2, r1
 80039a2:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80039a4:	f7fe fb08 	bl	8001fb8 <HAL_GetTick>
 80039a8:	0003      	movs	r3, r0
 80039aa:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80039ac:	e008      	b.n	80039c0 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039ae:	f7fe fb03 	bl	8001fb8 <HAL_GetTick>
 80039b2:	0002      	movs	r2, r0
 80039b4:	693b      	ldr	r3, [r7, #16]
 80039b6:	1ad3      	subs	r3, r2, r3
 80039b8:	2b02      	cmp	r3, #2
 80039ba:	d901      	bls.n	80039c0 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80039bc:	2303      	movs	r3, #3
 80039be:	e11c      	b.n	8003bfa <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80039c0:	4b91      	ldr	r3, [pc, #580]	@ (8003c08 <HAL_RCC_OscConfig+0x608>)
 80039c2:	681a      	ldr	r2, [r3, #0]
 80039c4:	2380      	movs	r3, #128	@ 0x80
 80039c6:	005b      	lsls	r3, r3, #1
 80039c8:	4013      	ands	r3, r2
 80039ca:	d0f0      	beq.n	80039ae <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	689b      	ldr	r3, [r3, #8]
 80039d0:	2b01      	cmp	r3, #1
 80039d2:	d106      	bne.n	80039e2 <HAL_RCC_OscConfig+0x3e2>
 80039d4:	4b8b      	ldr	r3, [pc, #556]	@ (8003c04 <HAL_RCC_OscConfig+0x604>)
 80039d6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80039d8:	4b8a      	ldr	r3, [pc, #552]	@ (8003c04 <HAL_RCC_OscConfig+0x604>)
 80039da:	2101      	movs	r1, #1
 80039dc:	430a      	orrs	r2, r1
 80039de:	65da      	str	r2, [r3, #92]	@ 0x5c
 80039e0:	e01c      	b.n	8003a1c <HAL_RCC_OscConfig+0x41c>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	689b      	ldr	r3, [r3, #8]
 80039e6:	2b05      	cmp	r3, #5
 80039e8:	d10c      	bne.n	8003a04 <HAL_RCC_OscConfig+0x404>
 80039ea:	4b86      	ldr	r3, [pc, #536]	@ (8003c04 <HAL_RCC_OscConfig+0x604>)
 80039ec:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80039ee:	4b85      	ldr	r3, [pc, #532]	@ (8003c04 <HAL_RCC_OscConfig+0x604>)
 80039f0:	2104      	movs	r1, #4
 80039f2:	430a      	orrs	r2, r1
 80039f4:	65da      	str	r2, [r3, #92]	@ 0x5c
 80039f6:	4b83      	ldr	r3, [pc, #524]	@ (8003c04 <HAL_RCC_OscConfig+0x604>)
 80039f8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80039fa:	4b82      	ldr	r3, [pc, #520]	@ (8003c04 <HAL_RCC_OscConfig+0x604>)
 80039fc:	2101      	movs	r1, #1
 80039fe:	430a      	orrs	r2, r1
 8003a00:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003a02:	e00b      	b.n	8003a1c <HAL_RCC_OscConfig+0x41c>
 8003a04:	4b7f      	ldr	r3, [pc, #508]	@ (8003c04 <HAL_RCC_OscConfig+0x604>)
 8003a06:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003a08:	4b7e      	ldr	r3, [pc, #504]	@ (8003c04 <HAL_RCC_OscConfig+0x604>)
 8003a0a:	2101      	movs	r1, #1
 8003a0c:	438a      	bics	r2, r1
 8003a0e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003a10:	4b7c      	ldr	r3, [pc, #496]	@ (8003c04 <HAL_RCC_OscConfig+0x604>)
 8003a12:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003a14:	4b7b      	ldr	r3, [pc, #492]	@ (8003c04 <HAL_RCC_OscConfig+0x604>)
 8003a16:	2104      	movs	r1, #4
 8003a18:	438a      	bics	r2, r1
 8003a1a:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	689b      	ldr	r3, [r3, #8]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d014      	beq.n	8003a4e <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a24:	f7fe fac8 	bl	8001fb8 <HAL_GetTick>
 8003a28:	0003      	movs	r3, r0
 8003a2a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a2c:	e009      	b.n	8003a42 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a2e:	f7fe fac3 	bl	8001fb8 <HAL_GetTick>
 8003a32:	0002      	movs	r2, r0
 8003a34:	693b      	ldr	r3, [r7, #16]
 8003a36:	1ad3      	subs	r3, r2, r3
 8003a38:	4a74      	ldr	r2, [pc, #464]	@ (8003c0c <HAL_RCC_OscConfig+0x60c>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d901      	bls.n	8003a42 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8003a3e:	2303      	movs	r3, #3
 8003a40:	e0db      	b.n	8003bfa <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a42:	4b70      	ldr	r3, [pc, #448]	@ (8003c04 <HAL_RCC_OscConfig+0x604>)
 8003a44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a46:	2202      	movs	r2, #2
 8003a48:	4013      	ands	r3, r2
 8003a4a:	d0f0      	beq.n	8003a2e <HAL_RCC_OscConfig+0x42e>
 8003a4c:	e013      	b.n	8003a76 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a4e:	f7fe fab3 	bl	8001fb8 <HAL_GetTick>
 8003a52:	0003      	movs	r3, r0
 8003a54:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003a56:	e009      	b.n	8003a6c <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a58:	f7fe faae 	bl	8001fb8 <HAL_GetTick>
 8003a5c:	0002      	movs	r2, r0
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	1ad3      	subs	r3, r2, r3
 8003a62:	4a6a      	ldr	r2, [pc, #424]	@ (8003c0c <HAL_RCC_OscConfig+0x60c>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d901      	bls.n	8003a6c <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8003a68:	2303      	movs	r3, #3
 8003a6a:	e0c6      	b.n	8003bfa <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003a6c:	4b65      	ldr	r3, [pc, #404]	@ (8003c04 <HAL_RCC_OscConfig+0x604>)
 8003a6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a70:	2202      	movs	r2, #2
 8003a72:	4013      	ands	r3, r2
 8003a74:	d1f0      	bne.n	8003a58 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8003a76:	231f      	movs	r3, #31
 8003a78:	18fb      	adds	r3, r7, r3
 8003a7a:	781b      	ldrb	r3, [r3, #0]
 8003a7c:	2b01      	cmp	r3, #1
 8003a7e:	d105      	bne.n	8003a8c <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8003a80:	4b60      	ldr	r3, [pc, #384]	@ (8003c04 <HAL_RCC_OscConfig+0x604>)
 8003a82:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003a84:	4b5f      	ldr	r3, [pc, #380]	@ (8003c04 <HAL_RCC_OscConfig+0x604>)
 8003a86:	4962      	ldr	r1, [pc, #392]	@ (8003c10 <HAL_RCC_OscConfig+0x610>)
 8003a88:	400a      	ands	r2, r1
 8003a8a:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	69db      	ldr	r3, [r3, #28]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d100      	bne.n	8003a96 <HAL_RCC_OscConfig+0x496>
 8003a94:	e0b0      	b.n	8003bf8 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003a96:	4b5b      	ldr	r3, [pc, #364]	@ (8003c04 <HAL_RCC_OscConfig+0x604>)
 8003a98:	689b      	ldr	r3, [r3, #8]
 8003a9a:	2238      	movs	r2, #56	@ 0x38
 8003a9c:	4013      	ands	r3, r2
 8003a9e:	2b10      	cmp	r3, #16
 8003aa0:	d100      	bne.n	8003aa4 <HAL_RCC_OscConfig+0x4a4>
 8003aa2:	e078      	b.n	8003b96 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	69db      	ldr	r3, [r3, #28]
 8003aa8:	2b02      	cmp	r3, #2
 8003aaa:	d153      	bne.n	8003b54 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003aac:	4b55      	ldr	r3, [pc, #340]	@ (8003c04 <HAL_RCC_OscConfig+0x604>)
 8003aae:	681a      	ldr	r2, [r3, #0]
 8003ab0:	4b54      	ldr	r3, [pc, #336]	@ (8003c04 <HAL_RCC_OscConfig+0x604>)
 8003ab2:	4958      	ldr	r1, [pc, #352]	@ (8003c14 <HAL_RCC_OscConfig+0x614>)
 8003ab4:	400a      	ands	r2, r1
 8003ab6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ab8:	f7fe fa7e 	bl	8001fb8 <HAL_GetTick>
 8003abc:	0003      	movs	r3, r0
 8003abe:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ac0:	e008      	b.n	8003ad4 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ac2:	f7fe fa79 	bl	8001fb8 <HAL_GetTick>
 8003ac6:	0002      	movs	r2, r0
 8003ac8:	693b      	ldr	r3, [r7, #16]
 8003aca:	1ad3      	subs	r3, r2, r3
 8003acc:	2b02      	cmp	r3, #2
 8003ace:	d901      	bls.n	8003ad4 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8003ad0:	2303      	movs	r3, #3
 8003ad2:	e092      	b.n	8003bfa <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ad4:	4b4b      	ldr	r3, [pc, #300]	@ (8003c04 <HAL_RCC_OscConfig+0x604>)
 8003ad6:	681a      	ldr	r2, [r3, #0]
 8003ad8:	2380      	movs	r3, #128	@ 0x80
 8003ada:	049b      	lsls	r3, r3, #18
 8003adc:	4013      	ands	r3, r2
 8003ade:	d1f0      	bne.n	8003ac2 <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ae0:	4b48      	ldr	r3, [pc, #288]	@ (8003c04 <HAL_RCC_OscConfig+0x604>)
 8003ae2:	68db      	ldr	r3, [r3, #12]
 8003ae4:	4a4c      	ldr	r2, [pc, #304]	@ (8003c18 <HAL_RCC_OscConfig+0x618>)
 8003ae6:	4013      	ands	r3, r2
 8003ae8:	0019      	movs	r1, r3
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6a1a      	ldr	r2, [r3, #32]
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003af2:	431a      	orrs	r2, r3
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003af8:	021b      	lsls	r3, r3, #8
 8003afa:	431a      	orrs	r2, r3
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b00:	431a      	orrs	r2, r3
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b06:	431a      	orrs	r2, r3
 8003b08:	4b3e      	ldr	r3, [pc, #248]	@ (8003c04 <HAL_RCC_OscConfig+0x604>)
 8003b0a:	430a      	orrs	r2, r1
 8003b0c:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b0e:	4b3d      	ldr	r3, [pc, #244]	@ (8003c04 <HAL_RCC_OscConfig+0x604>)
 8003b10:	681a      	ldr	r2, [r3, #0]
 8003b12:	4b3c      	ldr	r3, [pc, #240]	@ (8003c04 <HAL_RCC_OscConfig+0x604>)
 8003b14:	2180      	movs	r1, #128	@ 0x80
 8003b16:	0449      	lsls	r1, r1, #17
 8003b18:	430a      	orrs	r2, r1
 8003b1a:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8003b1c:	4b39      	ldr	r3, [pc, #228]	@ (8003c04 <HAL_RCC_OscConfig+0x604>)
 8003b1e:	68da      	ldr	r2, [r3, #12]
 8003b20:	4b38      	ldr	r3, [pc, #224]	@ (8003c04 <HAL_RCC_OscConfig+0x604>)
 8003b22:	2180      	movs	r1, #128	@ 0x80
 8003b24:	0549      	lsls	r1, r1, #21
 8003b26:	430a      	orrs	r2, r1
 8003b28:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b2a:	f7fe fa45 	bl	8001fb8 <HAL_GetTick>
 8003b2e:	0003      	movs	r3, r0
 8003b30:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b32:	e008      	b.n	8003b46 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b34:	f7fe fa40 	bl	8001fb8 <HAL_GetTick>
 8003b38:	0002      	movs	r2, r0
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	1ad3      	subs	r3, r2, r3
 8003b3e:	2b02      	cmp	r3, #2
 8003b40:	d901      	bls.n	8003b46 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8003b42:	2303      	movs	r3, #3
 8003b44:	e059      	b.n	8003bfa <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b46:	4b2f      	ldr	r3, [pc, #188]	@ (8003c04 <HAL_RCC_OscConfig+0x604>)
 8003b48:	681a      	ldr	r2, [r3, #0]
 8003b4a:	2380      	movs	r3, #128	@ 0x80
 8003b4c:	049b      	lsls	r3, r3, #18
 8003b4e:	4013      	ands	r3, r2
 8003b50:	d0f0      	beq.n	8003b34 <HAL_RCC_OscConfig+0x534>
 8003b52:	e051      	b.n	8003bf8 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b54:	4b2b      	ldr	r3, [pc, #172]	@ (8003c04 <HAL_RCC_OscConfig+0x604>)
 8003b56:	681a      	ldr	r2, [r3, #0]
 8003b58:	4b2a      	ldr	r3, [pc, #168]	@ (8003c04 <HAL_RCC_OscConfig+0x604>)
 8003b5a:	492e      	ldr	r1, [pc, #184]	@ (8003c14 <HAL_RCC_OscConfig+0x614>)
 8003b5c:	400a      	ands	r2, r1
 8003b5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b60:	f7fe fa2a 	bl	8001fb8 <HAL_GetTick>
 8003b64:	0003      	movs	r3, r0
 8003b66:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b68:	e008      	b.n	8003b7c <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b6a:	f7fe fa25 	bl	8001fb8 <HAL_GetTick>
 8003b6e:	0002      	movs	r2, r0
 8003b70:	693b      	ldr	r3, [r7, #16]
 8003b72:	1ad3      	subs	r3, r2, r3
 8003b74:	2b02      	cmp	r3, #2
 8003b76:	d901      	bls.n	8003b7c <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8003b78:	2303      	movs	r3, #3
 8003b7a:	e03e      	b.n	8003bfa <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b7c:	4b21      	ldr	r3, [pc, #132]	@ (8003c04 <HAL_RCC_OscConfig+0x604>)
 8003b7e:	681a      	ldr	r2, [r3, #0]
 8003b80:	2380      	movs	r3, #128	@ 0x80
 8003b82:	049b      	lsls	r3, r3, #18
 8003b84:	4013      	ands	r3, r2
 8003b86:	d1f0      	bne.n	8003b6a <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8003b88:	4b1e      	ldr	r3, [pc, #120]	@ (8003c04 <HAL_RCC_OscConfig+0x604>)
 8003b8a:	68da      	ldr	r2, [r3, #12]
 8003b8c:	4b1d      	ldr	r3, [pc, #116]	@ (8003c04 <HAL_RCC_OscConfig+0x604>)
 8003b8e:	4923      	ldr	r1, [pc, #140]	@ (8003c1c <HAL_RCC_OscConfig+0x61c>)
 8003b90:	400a      	ands	r2, r1
 8003b92:	60da      	str	r2, [r3, #12]
 8003b94:	e030      	b.n	8003bf8 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	69db      	ldr	r3, [r3, #28]
 8003b9a:	2b01      	cmp	r3, #1
 8003b9c:	d101      	bne.n	8003ba2 <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	e02b      	b.n	8003bfa <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8003ba2:	4b18      	ldr	r3, [pc, #96]	@ (8003c04 <HAL_RCC_OscConfig+0x604>)
 8003ba4:	68db      	ldr	r3, [r3, #12]
 8003ba6:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ba8:	697b      	ldr	r3, [r7, #20]
 8003baa:	2203      	movs	r2, #3
 8003bac:	401a      	ands	r2, r3
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6a1b      	ldr	r3, [r3, #32]
 8003bb2:	429a      	cmp	r2, r3
 8003bb4:	d11e      	bne.n	8003bf4 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	2270      	movs	r2, #112	@ 0x70
 8003bba:	401a      	ands	r2, r3
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bc0:	429a      	cmp	r2, r3
 8003bc2:	d117      	bne.n	8003bf4 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003bc4:	697a      	ldr	r2, [r7, #20]
 8003bc6:	23fe      	movs	r3, #254	@ 0xfe
 8003bc8:	01db      	lsls	r3, r3, #7
 8003bca:	401a      	ands	r2, r3
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bd0:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003bd2:	429a      	cmp	r2, r3
 8003bd4:	d10e      	bne.n	8003bf4 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003bd6:	697a      	ldr	r2, [r7, #20]
 8003bd8:	23f8      	movs	r3, #248	@ 0xf8
 8003bda:	039b      	lsls	r3, r3, #14
 8003bdc:	401a      	ands	r2, r3
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003be2:	429a      	cmp	r2, r3
 8003be4:	d106      	bne.n	8003bf4 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8003be6:	697b      	ldr	r3, [r7, #20]
 8003be8:	0f5b      	lsrs	r3, r3, #29
 8003bea:	075a      	lsls	r2, r3, #29
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003bf0:	429a      	cmp	r2, r3
 8003bf2:	d001      	beq.n	8003bf8 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	e000      	b.n	8003bfa <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8003bf8:	2300      	movs	r3, #0
}
 8003bfa:	0018      	movs	r0, r3
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	b008      	add	sp, #32
 8003c00:	bd80      	pop	{r7, pc}
 8003c02:	46c0      	nop			@ (mov r8, r8)
 8003c04:	40021000 	.word	0x40021000
 8003c08:	40007000 	.word	0x40007000
 8003c0c:	00001388 	.word	0x00001388
 8003c10:	efffffff 	.word	0xefffffff
 8003c14:	feffffff 	.word	0xfeffffff
 8003c18:	1fc1808c 	.word	0x1fc1808c
 8003c1c:	effefffc 	.word	0xeffefffc

08003c20 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b084      	sub	sp, #16
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
 8003c28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d101      	bne.n	8003c34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c30:	2301      	movs	r3, #1
 8003c32:	e0e9      	b.n	8003e08 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003c34:	4b76      	ldr	r3, [pc, #472]	@ (8003e10 <HAL_RCC_ClockConfig+0x1f0>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	2207      	movs	r2, #7
 8003c3a:	4013      	ands	r3, r2
 8003c3c:	683a      	ldr	r2, [r7, #0]
 8003c3e:	429a      	cmp	r2, r3
 8003c40:	d91e      	bls.n	8003c80 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c42:	4b73      	ldr	r3, [pc, #460]	@ (8003e10 <HAL_RCC_ClockConfig+0x1f0>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	2207      	movs	r2, #7
 8003c48:	4393      	bics	r3, r2
 8003c4a:	0019      	movs	r1, r3
 8003c4c:	4b70      	ldr	r3, [pc, #448]	@ (8003e10 <HAL_RCC_ClockConfig+0x1f0>)
 8003c4e:	683a      	ldr	r2, [r7, #0]
 8003c50:	430a      	orrs	r2, r1
 8003c52:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003c54:	f7fe f9b0 	bl	8001fb8 <HAL_GetTick>
 8003c58:	0003      	movs	r3, r0
 8003c5a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003c5c:	e009      	b.n	8003c72 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c5e:	f7fe f9ab 	bl	8001fb8 <HAL_GetTick>
 8003c62:	0002      	movs	r2, r0
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	1ad3      	subs	r3, r2, r3
 8003c68:	4a6a      	ldr	r2, [pc, #424]	@ (8003e14 <HAL_RCC_ClockConfig+0x1f4>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d901      	bls.n	8003c72 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8003c6e:	2303      	movs	r3, #3
 8003c70:	e0ca      	b.n	8003e08 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003c72:	4b67      	ldr	r3, [pc, #412]	@ (8003e10 <HAL_RCC_ClockConfig+0x1f0>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	2207      	movs	r2, #7
 8003c78:	4013      	ands	r3, r2
 8003c7a:	683a      	ldr	r2, [r7, #0]
 8003c7c:	429a      	cmp	r2, r3
 8003c7e:	d1ee      	bne.n	8003c5e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	2202      	movs	r2, #2
 8003c86:	4013      	ands	r3, r2
 8003c88:	d015      	beq.n	8003cb6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	2204      	movs	r2, #4
 8003c90:	4013      	ands	r3, r2
 8003c92:	d006      	beq.n	8003ca2 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003c94:	4b60      	ldr	r3, [pc, #384]	@ (8003e18 <HAL_RCC_ClockConfig+0x1f8>)
 8003c96:	689a      	ldr	r2, [r3, #8]
 8003c98:	4b5f      	ldr	r3, [pc, #380]	@ (8003e18 <HAL_RCC_ClockConfig+0x1f8>)
 8003c9a:	21e0      	movs	r1, #224	@ 0xe0
 8003c9c:	01c9      	lsls	r1, r1, #7
 8003c9e:	430a      	orrs	r2, r1
 8003ca0:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ca2:	4b5d      	ldr	r3, [pc, #372]	@ (8003e18 <HAL_RCC_ClockConfig+0x1f8>)
 8003ca4:	689b      	ldr	r3, [r3, #8]
 8003ca6:	4a5d      	ldr	r2, [pc, #372]	@ (8003e1c <HAL_RCC_ClockConfig+0x1fc>)
 8003ca8:	4013      	ands	r3, r2
 8003caa:	0019      	movs	r1, r3
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	689a      	ldr	r2, [r3, #8]
 8003cb0:	4b59      	ldr	r3, [pc, #356]	@ (8003e18 <HAL_RCC_ClockConfig+0x1f8>)
 8003cb2:	430a      	orrs	r2, r1
 8003cb4:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	2201      	movs	r2, #1
 8003cbc:	4013      	ands	r3, r2
 8003cbe:	d057      	beq.n	8003d70 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	2b01      	cmp	r3, #1
 8003cc6:	d107      	bne.n	8003cd8 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003cc8:	4b53      	ldr	r3, [pc, #332]	@ (8003e18 <HAL_RCC_ClockConfig+0x1f8>)
 8003cca:	681a      	ldr	r2, [r3, #0]
 8003ccc:	2380      	movs	r3, #128	@ 0x80
 8003cce:	029b      	lsls	r3, r3, #10
 8003cd0:	4013      	ands	r3, r2
 8003cd2:	d12b      	bne.n	8003d2c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	e097      	b.n	8003e08 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	2b02      	cmp	r3, #2
 8003cde:	d107      	bne.n	8003cf0 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ce0:	4b4d      	ldr	r3, [pc, #308]	@ (8003e18 <HAL_RCC_ClockConfig+0x1f8>)
 8003ce2:	681a      	ldr	r2, [r3, #0]
 8003ce4:	2380      	movs	r3, #128	@ 0x80
 8003ce6:	049b      	lsls	r3, r3, #18
 8003ce8:	4013      	ands	r3, r2
 8003cea:	d11f      	bne.n	8003d2c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003cec:	2301      	movs	r3, #1
 8003cee:	e08b      	b.n	8003e08 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d107      	bne.n	8003d08 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003cf8:	4b47      	ldr	r3, [pc, #284]	@ (8003e18 <HAL_RCC_ClockConfig+0x1f8>)
 8003cfa:	681a      	ldr	r2, [r3, #0]
 8003cfc:	2380      	movs	r3, #128	@ 0x80
 8003cfe:	00db      	lsls	r3, r3, #3
 8003d00:	4013      	ands	r3, r2
 8003d02:	d113      	bne.n	8003d2c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003d04:	2301      	movs	r3, #1
 8003d06:	e07f      	b.n	8003e08 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	2b03      	cmp	r3, #3
 8003d0e:	d106      	bne.n	8003d1e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003d10:	4b41      	ldr	r3, [pc, #260]	@ (8003e18 <HAL_RCC_ClockConfig+0x1f8>)
 8003d12:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d14:	2202      	movs	r2, #2
 8003d16:	4013      	ands	r3, r2
 8003d18:	d108      	bne.n	8003d2c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	e074      	b.n	8003e08 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d1e:	4b3e      	ldr	r3, [pc, #248]	@ (8003e18 <HAL_RCC_ClockConfig+0x1f8>)
 8003d20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d22:	2202      	movs	r2, #2
 8003d24:	4013      	ands	r3, r2
 8003d26:	d101      	bne.n	8003d2c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003d28:	2301      	movs	r3, #1
 8003d2a:	e06d      	b.n	8003e08 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003d2c:	4b3a      	ldr	r3, [pc, #232]	@ (8003e18 <HAL_RCC_ClockConfig+0x1f8>)
 8003d2e:	689b      	ldr	r3, [r3, #8]
 8003d30:	2207      	movs	r2, #7
 8003d32:	4393      	bics	r3, r2
 8003d34:	0019      	movs	r1, r3
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	685a      	ldr	r2, [r3, #4]
 8003d3a:	4b37      	ldr	r3, [pc, #220]	@ (8003e18 <HAL_RCC_ClockConfig+0x1f8>)
 8003d3c:	430a      	orrs	r2, r1
 8003d3e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d40:	f7fe f93a 	bl	8001fb8 <HAL_GetTick>
 8003d44:	0003      	movs	r3, r0
 8003d46:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d48:	e009      	b.n	8003d5e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d4a:	f7fe f935 	bl	8001fb8 <HAL_GetTick>
 8003d4e:	0002      	movs	r2, r0
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	1ad3      	subs	r3, r2, r3
 8003d54:	4a2f      	ldr	r2, [pc, #188]	@ (8003e14 <HAL_RCC_ClockConfig+0x1f4>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d901      	bls.n	8003d5e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8003d5a:	2303      	movs	r3, #3
 8003d5c:	e054      	b.n	8003e08 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d5e:	4b2e      	ldr	r3, [pc, #184]	@ (8003e18 <HAL_RCC_ClockConfig+0x1f8>)
 8003d60:	689b      	ldr	r3, [r3, #8]
 8003d62:	2238      	movs	r2, #56	@ 0x38
 8003d64:	401a      	ands	r2, r3
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	00db      	lsls	r3, r3, #3
 8003d6c:	429a      	cmp	r2, r3
 8003d6e:	d1ec      	bne.n	8003d4a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003d70:	4b27      	ldr	r3, [pc, #156]	@ (8003e10 <HAL_RCC_ClockConfig+0x1f0>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	2207      	movs	r2, #7
 8003d76:	4013      	ands	r3, r2
 8003d78:	683a      	ldr	r2, [r7, #0]
 8003d7a:	429a      	cmp	r2, r3
 8003d7c:	d21e      	bcs.n	8003dbc <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d7e:	4b24      	ldr	r3, [pc, #144]	@ (8003e10 <HAL_RCC_ClockConfig+0x1f0>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	2207      	movs	r2, #7
 8003d84:	4393      	bics	r3, r2
 8003d86:	0019      	movs	r1, r3
 8003d88:	4b21      	ldr	r3, [pc, #132]	@ (8003e10 <HAL_RCC_ClockConfig+0x1f0>)
 8003d8a:	683a      	ldr	r2, [r7, #0]
 8003d8c:	430a      	orrs	r2, r1
 8003d8e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003d90:	f7fe f912 	bl	8001fb8 <HAL_GetTick>
 8003d94:	0003      	movs	r3, r0
 8003d96:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003d98:	e009      	b.n	8003dae <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d9a:	f7fe f90d 	bl	8001fb8 <HAL_GetTick>
 8003d9e:	0002      	movs	r2, r0
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	1ad3      	subs	r3, r2, r3
 8003da4:	4a1b      	ldr	r2, [pc, #108]	@ (8003e14 <HAL_RCC_ClockConfig+0x1f4>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d901      	bls.n	8003dae <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8003daa:	2303      	movs	r3, #3
 8003dac:	e02c      	b.n	8003e08 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003dae:	4b18      	ldr	r3, [pc, #96]	@ (8003e10 <HAL_RCC_ClockConfig+0x1f0>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	2207      	movs	r2, #7
 8003db4:	4013      	ands	r3, r2
 8003db6:	683a      	ldr	r2, [r7, #0]
 8003db8:	429a      	cmp	r2, r3
 8003dba:	d1ee      	bne.n	8003d9a <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	2204      	movs	r2, #4
 8003dc2:	4013      	ands	r3, r2
 8003dc4:	d009      	beq.n	8003dda <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003dc6:	4b14      	ldr	r3, [pc, #80]	@ (8003e18 <HAL_RCC_ClockConfig+0x1f8>)
 8003dc8:	689b      	ldr	r3, [r3, #8]
 8003dca:	4a15      	ldr	r2, [pc, #84]	@ (8003e20 <HAL_RCC_ClockConfig+0x200>)
 8003dcc:	4013      	ands	r3, r2
 8003dce:	0019      	movs	r1, r3
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	68da      	ldr	r2, [r3, #12]
 8003dd4:	4b10      	ldr	r3, [pc, #64]	@ (8003e18 <HAL_RCC_ClockConfig+0x1f8>)
 8003dd6:	430a      	orrs	r2, r1
 8003dd8:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8003dda:	f000 f829 	bl	8003e30 <HAL_RCC_GetSysClockFreq>
 8003dde:	0001      	movs	r1, r0
 8003de0:	4b0d      	ldr	r3, [pc, #52]	@ (8003e18 <HAL_RCC_ClockConfig+0x1f8>)
 8003de2:	689b      	ldr	r3, [r3, #8]
 8003de4:	0a1b      	lsrs	r3, r3, #8
 8003de6:	220f      	movs	r2, #15
 8003de8:	401a      	ands	r2, r3
 8003dea:	4b0e      	ldr	r3, [pc, #56]	@ (8003e24 <HAL_RCC_ClockConfig+0x204>)
 8003dec:	0092      	lsls	r2, r2, #2
 8003dee:	58d3      	ldr	r3, [r2, r3]
 8003df0:	221f      	movs	r2, #31
 8003df2:	4013      	ands	r3, r2
 8003df4:	000a      	movs	r2, r1
 8003df6:	40da      	lsrs	r2, r3
 8003df8:	4b0b      	ldr	r3, [pc, #44]	@ (8003e28 <HAL_RCC_ClockConfig+0x208>)
 8003dfa:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003dfc:	4b0b      	ldr	r3, [pc, #44]	@ (8003e2c <HAL_RCC_ClockConfig+0x20c>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	0018      	movs	r0, r3
 8003e02:	f7fe f87d 	bl	8001f00 <HAL_InitTick>
 8003e06:	0003      	movs	r3, r0
}
 8003e08:	0018      	movs	r0, r3
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	b004      	add	sp, #16
 8003e0e:	bd80      	pop	{r7, pc}
 8003e10:	40022000 	.word	0x40022000
 8003e14:	00001388 	.word	0x00001388
 8003e18:	40021000 	.word	0x40021000
 8003e1c:	fffff0ff 	.word	0xfffff0ff
 8003e20:	ffff8fff 	.word	0xffff8fff
 8003e24:	08007dc0 	.word	0x08007dc0
 8003e28:	200000b8 	.word	0x200000b8
 8003e2c:	200000bc 	.word	0x200000bc

08003e30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b086      	sub	sp, #24
 8003e34:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003e36:	4b3c      	ldr	r3, [pc, #240]	@ (8003f28 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003e38:	689b      	ldr	r3, [r3, #8]
 8003e3a:	2238      	movs	r2, #56	@ 0x38
 8003e3c:	4013      	ands	r3, r2
 8003e3e:	d10f      	bne.n	8003e60 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8003e40:	4b39      	ldr	r3, [pc, #228]	@ (8003f28 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	0adb      	lsrs	r3, r3, #11
 8003e46:	2207      	movs	r2, #7
 8003e48:	4013      	ands	r3, r2
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	409a      	lsls	r2, r3
 8003e4e:	0013      	movs	r3, r2
 8003e50:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8003e52:	6839      	ldr	r1, [r7, #0]
 8003e54:	4835      	ldr	r0, [pc, #212]	@ (8003f2c <HAL_RCC_GetSysClockFreq+0xfc>)
 8003e56:	f7fc f9af 	bl	80001b8 <__udivsi3>
 8003e5a:	0003      	movs	r3, r0
 8003e5c:	613b      	str	r3, [r7, #16]
 8003e5e:	e05d      	b.n	8003f1c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003e60:	4b31      	ldr	r3, [pc, #196]	@ (8003f28 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003e62:	689b      	ldr	r3, [r3, #8]
 8003e64:	2238      	movs	r2, #56	@ 0x38
 8003e66:	4013      	ands	r3, r2
 8003e68:	2b08      	cmp	r3, #8
 8003e6a:	d102      	bne.n	8003e72 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003e6c:	4b30      	ldr	r3, [pc, #192]	@ (8003f30 <HAL_RCC_GetSysClockFreq+0x100>)
 8003e6e:	613b      	str	r3, [r7, #16]
 8003e70:	e054      	b.n	8003f1c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003e72:	4b2d      	ldr	r3, [pc, #180]	@ (8003f28 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003e74:	689b      	ldr	r3, [r3, #8]
 8003e76:	2238      	movs	r2, #56	@ 0x38
 8003e78:	4013      	ands	r3, r2
 8003e7a:	2b10      	cmp	r3, #16
 8003e7c:	d138      	bne.n	8003ef0 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8003e7e:	4b2a      	ldr	r3, [pc, #168]	@ (8003f28 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003e80:	68db      	ldr	r3, [r3, #12]
 8003e82:	2203      	movs	r2, #3
 8003e84:	4013      	ands	r3, r2
 8003e86:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003e88:	4b27      	ldr	r3, [pc, #156]	@ (8003f28 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003e8a:	68db      	ldr	r3, [r3, #12]
 8003e8c:	091b      	lsrs	r3, r3, #4
 8003e8e:	2207      	movs	r2, #7
 8003e90:	4013      	ands	r3, r2
 8003e92:	3301      	adds	r3, #1
 8003e94:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	2b03      	cmp	r3, #3
 8003e9a:	d10d      	bne.n	8003eb8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003e9c:	68b9      	ldr	r1, [r7, #8]
 8003e9e:	4824      	ldr	r0, [pc, #144]	@ (8003f30 <HAL_RCC_GetSysClockFreq+0x100>)
 8003ea0:	f7fc f98a 	bl	80001b8 <__udivsi3>
 8003ea4:	0003      	movs	r3, r0
 8003ea6:	0019      	movs	r1, r3
 8003ea8:	4b1f      	ldr	r3, [pc, #124]	@ (8003f28 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003eaa:	68db      	ldr	r3, [r3, #12]
 8003eac:	0a1b      	lsrs	r3, r3, #8
 8003eae:	227f      	movs	r2, #127	@ 0x7f
 8003eb0:	4013      	ands	r3, r2
 8003eb2:	434b      	muls	r3, r1
 8003eb4:	617b      	str	r3, [r7, #20]
        break;
 8003eb6:	e00d      	b.n	8003ed4 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8003eb8:	68b9      	ldr	r1, [r7, #8]
 8003eba:	481c      	ldr	r0, [pc, #112]	@ (8003f2c <HAL_RCC_GetSysClockFreq+0xfc>)
 8003ebc:	f7fc f97c 	bl	80001b8 <__udivsi3>
 8003ec0:	0003      	movs	r3, r0
 8003ec2:	0019      	movs	r1, r3
 8003ec4:	4b18      	ldr	r3, [pc, #96]	@ (8003f28 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003ec6:	68db      	ldr	r3, [r3, #12]
 8003ec8:	0a1b      	lsrs	r3, r3, #8
 8003eca:	227f      	movs	r2, #127	@ 0x7f
 8003ecc:	4013      	ands	r3, r2
 8003ece:	434b      	muls	r3, r1
 8003ed0:	617b      	str	r3, [r7, #20]
        break;
 8003ed2:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8003ed4:	4b14      	ldr	r3, [pc, #80]	@ (8003f28 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003ed6:	68db      	ldr	r3, [r3, #12]
 8003ed8:	0f5b      	lsrs	r3, r3, #29
 8003eda:	2207      	movs	r2, #7
 8003edc:	4013      	ands	r3, r2
 8003ede:	3301      	adds	r3, #1
 8003ee0:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8003ee2:	6879      	ldr	r1, [r7, #4]
 8003ee4:	6978      	ldr	r0, [r7, #20]
 8003ee6:	f7fc f967 	bl	80001b8 <__udivsi3>
 8003eea:	0003      	movs	r3, r0
 8003eec:	613b      	str	r3, [r7, #16]
 8003eee:	e015      	b.n	8003f1c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003ef0:	4b0d      	ldr	r3, [pc, #52]	@ (8003f28 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003ef2:	689b      	ldr	r3, [r3, #8]
 8003ef4:	2238      	movs	r2, #56	@ 0x38
 8003ef6:	4013      	ands	r3, r2
 8003ef8:	2b20      	cmp	r3, #32
 8003efa:	d103      	bne.n	8003f04 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8003efc:	2380      	movs	r3, #128	@ 0x80
 8003efe:	021b      	lsls	r3, r3, #8
 8003f00:	613b      	str	r3, [r7, #16]
 8003f02:	e00b      	b.n	8003f1c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003f04:	4b08      	ldr	r3, [pc, #32]	@ (8003f28 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003f06:	689b      	ldr	r3, [r3, #8]
 8003f08:	2238      	movs	r2, #56	@ 0x38
 8003f0a:	4013      	ands	r3, r2
 8003f0c:	2b18      	cmp	r3, #24
 8003f0e:	d103      	bne.n	8003f18 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8003f10:	23fa      	movs	r3, #250	@ 0xfa
 8003f12:	01db      	lsls	r3, r3, #7
 8003f14:	613b      	str	r3, [r7, #16]
 8003f16:	e001      	b.n	8003f1c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8003f18:	2300      	movs	r3, #0
 8003f1a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003f1c:	693b      	ldr	r3, [r7, #16]
}
 8003f1e:	0018      	movs	r0, r3
 8003f20:	46bd      	mov	sp, r7
 8003f22:	b006      	add	sp, #24
 8003f24:	bd80      	pop	{r7, pc}
 8003f26:	46c0      	nop			@ (mov r8, r8)
 8003f28:	40021000 	.word	0x40021000
 8003f2c:	00f42400 	.word	0x00f42400
 8003f30:	007a1200 	.word	0x007a1200

08003f34 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f38:	4b02      	ldr	r3, [pc, #8]	@ (8003f44 <HAL_RCC_GetHCLKFreq+0x10>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
}
 8003f3c:	0018      	movs	r0, r3
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bd80      	pop	{r7, pc}
 8003f42:	46c0      	nop			@ (mov r8, r8)
 8003f44:	200000b8 	.word	0x200000b8

08003f48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f48:	b5b0      	push	{r4, r5, r7, lr}
 8003f4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003f4c:	f7ff fff2 	bl	8003f34 <HAL_RCC_GetHCLKFreq>
 8003f50:	0004      	movs	r4, r0
 8003f52:	f7ff fb49 	bl	80035e8 <LL_RCC_GetAPB1Prescaler>
 8003f56:	0003      	movs	r3, r0
 8003f58:	0b1a      	lsrs	r2, r3, #12
 8003f5a:	4b05      	ldr	r3, [pc, #20]	@ (8003f70 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003f5c:	0092      	lsls	r2, r2, #2
 8003f5e:	58d3      	ldr	r3, [r2, r3]
 8003f60:	221f      	movs	r2, #31
 8003f62:	4013      	ands	r3, r2
 8003f64:	40dc      	lsrs	r4, r3
 8003f66:	0023      	movs	r3, r4
}
 8003f68:	0018      	movs	r0, r3
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	bdb0      	pop	{r4, r5, r7, pc}
 8003f6e:	46c0      	nop			@ (mov r8, r8)
 8003f70:	08007e00 	.word	0x08007e00

08003f74 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b086      	sub	sp, #24
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8003f7c:	2313      	movs	r3, #19
 8003f7e:	18fb      	adds	r3, r7, r3
 8003f80:	2200      	movs	r2, #0
 8003f82:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003f84:	2312      	movs	r3, #18
 8003f86:	18fb      	adds	r3, r7, r3
 8003f88:	2200      	movs	r2, #0
 8003f8a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681a      	ldr	r2, [r3, #0]
 8003f90:	2380      	movs	r3, #128	@ 0x80
 8003f92:	029b      	lsls	r3, r3, #10
 8003f94:	4013      	ands	r3, r2
 8003f96:	d100      	bne.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0x26>
 8003f98:	e0a3      	b.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f9a:	2011      	movs	r0, #17
 8003f9c:	183b      	adds	r3, r7, r0
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003fa2:	4b86      	ldr	r3, [pc, #536]	@ (80041bc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003fa4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003fa6:	2380      	movs	r3, #128	@ 0x80
 8003fa8:	055b      	lsls	r3, r3, #21
 8003faa:	4013      	ands	r3, r2
 8003fac:	d110      	bne.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fae:	4b83      	ldr	r3, [pc, #524]	@ (80041bc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003fb0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003fb2:	4b82      	ldr	r3, [pc, #520]	@ (80041bc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003fb4:	2180      	movs	r1, #128	@ 0x80
 8003fb6:	0549      	lsls	r1, r1, #21
 8003fb8:	430a      	orrs	r2, r1
 8003fba:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003fbc:	4b7f      	ldr	r3, [pc, #508]	@ (80041bc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003fbe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003fc0:	2380      	movs	r3, #128	@ 0x80
 8003fc2:	055b      	lsls	r3, r3, #21
 8003fc4:	4013      	ands	r3, r2
 8003fc6:	60bb      	str	r3, [r7, #8]
 8003fc8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003fca:	183b      	adds	r3, r7, r0
 8003fcc:	2201      	movs	r2, #1
 8003fce:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003fd0:	4b7b      	ldr	r3, [pc, #492]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8003fd2:	681a      	ldr	r2, [r3, #0]
 8003fd4:	4b7a      	ldr	r3, [pc, #488]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8003fd6:	2180      	movs	r1, #128	@ 0x80
 8003fd8:	0049      	lsls	r1, r1, #1
 8003fda:	430a      	orrs	r2, r1
 8003fdc:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003fde:	f7fd ffeb 	bl	8001fb8 <HAL_GetTick>
 8003fe2:	0003      	movs	r3, r0
 8003fe4:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003fe6:	e00b      	b.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fe8:	f7fd ffe6 	bl	8001fb8 <HAL_GetTick>
 8003fec:	0002      	movs	r2, r0
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	1ad3      	subs	r3, r2, r3
 8003ff2:	2b02      	cmp	r3, #2
 8003ff4:	d904      	bls.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8003ff6:	2313      	movs	r3, #19
 8003ff8:	18fb      	adds	r3, r7, r3
 8003ffa:	2203      	movs	r2, #3
 8003ffc:	701a      	strb	r2, [r3, #0]
        break;
 8003ffe:	e005      	b.n	800400c <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004000:	4b6f      	ldr	r3, [pc, #444]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8004002:	681a      	ldr	r2, [r3, #0]
 8004004:	2380      	movs	r3, #128	@ 0x80
 8004006:	005b      	lsls	r3, r3, #1
 8004008:	4013      	ands	r3, r2
 800400a:	d0ed      	beq.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 800400c:	2313      	movs	r3, #19
 800400e:	18fb      	adds	r3, r7, r3
 8004010:	781b      	ldrb	r3, [r3, #0]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d154      	bne.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004016:	4b69      	ldr	r3, [pc, #420]	@ (80041bc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004018:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800401a:	23c0      	movs	r3, #192	@ 0xc0
 800401c:	009b      	lsls	r3, r3, #2
 800401e:	4013      	ands	r3, r2
 8004020:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004022:	697b      	ldr	r3, [r7, #20]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d019      	beq.n	800405c <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	699b      	ldr	r3, [r3, #24]
 800402c:	697a      	ldr	r2, [r7, #20]
 800402e:	429a      	cmp	r2, r3
 8004030:	d014      	beq.n	800405c <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004032:	4b62      	ldr	r3, [pc, #392]	@ (80041bc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004034:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004036:	4a63      	ldr	r2, [pc, #396]	@ (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8004038:	4013      	ands	r3, r2
 800403a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800403c:	4b5f      	ldr	r3, [pc, #380]	@ (80041bc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800403e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004040:	4b5e      	ldr	r3, [pc, #376]	@ (80041bc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004042:	2180      	movs	r1, #128	@ 0x80
 8004044:	0249      	lsls	r1, r1, #9
 8004046:	430a      	orrs	r2, r1
 8004048:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800404a:	4b5c      	ldr	r3, [pc, #368]	@ (80041bc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800404c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800404e:	4b5b      	ldr	r3, [pc, #364]	@ (80041bc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004050:	495d      	ldr	r1, [pc, #372]	@ (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004052:	400a      	ands	r2, r1
 8004054:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004056:	4b59      	ldr	r3, [pc, #356]	@ (80041bc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004058:	697a      	ldr	r2, [r7, #20]
 800405a:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800405c:	697b      	ldr	r3, [r7, #20]
 800405e:	2201      	movs	r2, #1
 8004060:	4013      	ands	r3, r2
 8004062:	d016      	beq.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004064:	f7fd ffa8 	bl	8001fb8 <HAL_GetTick>
 8004068:	0003      	movs	r3, r0
 800406a:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800406c:	e00c      	b.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800406e:	f7fd ffa3 	bl	8001fb8 <HAL_GetTick>
 8004072:	0002      	movs	r2, r0
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	1ad3      	subs	r3, r2, r3
 8004078:	4a54      	ldr	r2, [pc, #336]	@ (80041cc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d904      	bls.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800407e:	2313      	movs	r3, #19
 8004080:	18fb      	adds	r3, r7, r3
 8004082:	2203      	movs	r2, #3
 8004084:	701a      	strb	r2, [r3, #0]
            break;
 8004086:	e004      	b.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004088:	4b4c      	ldr	r3, [pc, #304]	@ (80041bc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800408a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800408c:	2202      	movs	r2, #2
 800408e:	4013      	ands	r3, r2
 8004090:	d0ed      	beq.n	800406e <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8004092:	2313      	movs	r3, #19
 8004094:	18fb      	adds	r3, r7, r3
 8004096:	781b      	ldrb	r3, [r3, #0]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d10a      	bne.n	80040b2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800409c:	4b47      	ldr	r3, [pc, #284]	@ (80041bc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800409e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040a0:	4a48      	ldr	r2, [pc, #288]	@ (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80040a2:	4013      	ands	r3, r2
 80040a4:	0019      	movs	r1, r3
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	699a      	ldr	r2, [r3, #24]
 80040aa:	4b44      	ldr	r3, [pc, #272]	@ (80041bc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80040ac:	430a      	orrs	r2, r1
 80040ae:	65da      	str	r2, [r3, #92]	@ 0x5c
 80040b0:	e00c      	b.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80040b2:	2312      	movs	r3, #18
 80040b4:	18fb      	adds	r3, r7, r3
 80040b6:	2213      	movs	r2, #19
 80040b8:	18ba      	adds	r2, r7, r2
 80040ba:	7812      	ldrb	r2, [r2, #0]
 80040bc:	701a      	strb	r2, [r3, #0]
 80040be:	e005      	b.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040c0:	2312      	movs	r3, #18
 80040c2:	18fb      	adds	r3, r7, r3
 80040c4:	2213      	movs	r2, #19
 80040c6:	18ba      	adds	r2, r7, r2
 80040c8:	7812      	ldrb	r2, [r2, #0]
 80040ca:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80040cc:	2311      	movs	r3, #17
 80040ce:	18fb      	adds	r3, r7, r3
 80040d0:	781b      	ldrb	r3, [r3, #0]
 80040d2:	2b01      	cmp	r3, #1
 80040d4:	d105      	bne.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040d6:	4b39      	ldr	r3, [pc, #228]	@ (80041bc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80040d8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80040da:	4b38      	ldr	r3, [pc, #224]	@ (80041bc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80040dc:	493c      	ldr	r1, [pc, #240]	@ (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80040de:	400a      	ands	r2, r1
 80040e0:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	2201      	movs	r2, #1
 80040e8:	4013      	ands	r3, r2
 80040ea:	d009      	beq.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80040ec:	4b33      	ldr	r3, [pc, #204]	@ (80041bc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80040ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040f0:	2203      	movs	r2, #3
 80040f2:	4393      	bics	r3, r2
 80040f4:	0019      	movs	r1, r3
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	685a      	ldr	r2, [r3, #4]
 80040fa:	4b30      	ldr	r3, [pc, #192]	@ (80041bc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80040fc:	430a      	orrs	r2, r1
 80040fe:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	2202      	movs	r2, #2
 8004106:	4013      	ands	r3, r2
 8004108:	d009      	beq.n	800411e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800410a:	4b2c      	ldr	r3, [pc, #176]	@ (80041bc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800410c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800410e:	220c      	movs	r2, #12
 8004110:	4393      	bics	r3, r2
 8004112:	0019      	movs	r1, r3
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	689a      	ldr	r2, [r3, #8]
 8004118:	4b28      	ldr	r3, [pc, #160]	@ (80041bc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800411a:	430a      	orrs	r2, r1
 800411c:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	2220      	movs	r2, #32
 8004124:	4013      	ands	r3, r2
 8004126:	d009      	beq.n	800413c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004128:	4b24      	ldr	r3, [pc, #144]	@ (80041bc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800412a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800412c:	4a29      	ldr	r2, [pc, #164]	@ (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800412e:	4013      	ands	r3, r2
 8004130:	0019      	movs	r1, r3
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	68da      	ldr	r2, [r3, #12]
 8004136:	4b21      	ldr	r3, [pc, #132]	@ (80041bc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004138:	430a      	orrs	r2, r1
 800413a:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681a      	ldr	r2, [r3, #0]
 8004140:	2380      	movs	r3, #128	@ 0x80
 8004142:	01db      	lsls	r3, r3, #7
 8004144:	4013      	ands	r3, r2
 8004146:	d015      	beq.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004148:	4b1c      	ldr	r3, [pc, #112]	@ (80041bc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800414a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800414c:	009b      	lsls	r3, r3, #2
 800414e:	0899      	lsrs	r1, r3, #2
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	695a      	ldr	r2, [r3, #20]
 8004154:	4b19      	ldr	r3, [pc, #100]	@ (80041bc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004156:	430a      	orrs	r2, r1
 8004158:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	695a      	ldr	r2, [r3, #20]
 800415e:	2380      	movs	r3, #128	@ 0x80
 8004160:	05db      	lsls	r3, r3, #23
 8004162:	429a      	cmp	r2, r3
 8004164:	d106      	bne.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004166:	4b15      	ldr	r3, [pc, #84]	@ (80041bc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004168:	68da      	ldr	r2, [r3, #12]
 800416a:	4b14      	ldr	r3, [pc, #80]	@ (80041bc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800416c:	2180      	movs	r1, #128	@ 0x80
 800416e:	0249      	lsls	r1, r1, #9
 8004170:	430a      	orrs	r2, r1
 8004172:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681a      	ldr	r2, [r3, #0]
 8004178:	2380      	movs	r3, #128	@ 0x80
 800417a:	011b      	lsls	r3, r3, #4
 800417c:	4013      	ands	r3, r2
 800417e:	d016      	beq.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8004180:	4b0e      	ldr	r3, [pc, #56]	@ (80041bc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004182:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004184:	4a14      	ldr	r2, [pc, #80]	@ (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004186:	4013      	ands	r3, r2
 8004188:	0019      	movs	r1, r3
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	691a      	ldr	r2, [r3, #16]
 800418e:	4b0b      	ldr	r3, [pc, #44]	@ (80041bc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004190:	430a      	orrs	r2, r1
 8004192:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	691a      	ldr	r2, [r3, #16]
 8004198:	2380      	movs	r3, #128	@ 0x80
 800419a:	01db      	lsls	r3, r3, #7
 800419c:	429a      	cmp	r2, r3
 800419e:	d106      	bne.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0x23a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80041a0:	4b06      	ldr	r3, [pc, #24]	@ (80041bc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80041a2:	68da      	ldr	r2, [r3, #12]
 80041a4:	4b05      	ldr	r3, [pc, #20]	@ (80041bc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80041a6:	2180      	movs	r1, #128	@ 0x80
 80041a8:	0249      	lsls	r1, r1, #9
 80041aa:	430a      	orrs	r2, r1
 80041ac:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80041ae:	2312      	movs	r3, #18
 80041b0:	18fb      	adds	r3, r7, r3
 80041b2:	781b      	ldrb	r3, [r3, #0]
}
 80041b4:	0018      	movs	r0, r3
 80041b6:	46bd      	mov	sp, r7
 80041b8:	b006      	add	sp, #24
 80041ba:	bd80      	pop	{r7, pc}
 80041bc:	40021000 	.word	0x40021000
 80041c0:	40007000 	.word	0x40007000
 80041c4:	fffffcff 	.word	0xfffffcff
 80041c8:	fffeffff 	.word	0xfffeffff
 80041cc:	00001388 	.word	0x00001388
 80041d0:	efffffff 	.word	0xefffffff
 80041d4:	ffffcfff 	.word	0xffffcfff
 80041d8:	ffff3fff 	.word	0xffff3fff

080041dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b082      	sub	sp, #8
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d101      	bne.n	80041ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80041ea:	2301      	movs	r3, #1
 80041ec:	e04a      	b.n	8004284 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	223d      	movs	r2, #61	@ 0x3d
 80041f2:	5c9b      	ldrb	r3, [r3, r2]
 80041f4:	b2db      	uxtb	r3, r3
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d107      	bne.n	800420a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	223c      	movs	r2, #60	@ 0x3c
 80041fe:	2100      	movs	r1, #0
 8004200:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	0018      	movs	r0, r3
 8004206:	f7fd fc2f 	bl	8001a68 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	223d      	movs	r2, #61	@ 0x3d
 800420e:	2102      	movs	r1, #2
 8004210:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681a      	ldr	r2, [r3, #0]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	3304      	adds	r3, #4
 800421a:	0019      	movs	r1, r3
 800421c:	0010      	movs	r0, r2
 800421e:	f000 fa6b 	bl	80046f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2248      	movs	r2, #72	@ 0x48
 8004226:	2101      	movs	r1, #1
 8004228:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	223e      	movs	r2, #62	@ 0x3e
 800422e:	2101      	movs	r1, #1
 8004230:	5499      	strb	r1, [r3, r2]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	223f      	movs	r2, #63	@ 0x3f
 8004236:	2101      	movs	r1, #1
 8004238:	5499      	strb	r1, [r3, r2]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2240      	movs	r2, #64	@ 0x40
 800423e:	2101      	movs	r1, #1
 8004240:	5499      	strb	r1, [r3, r2]
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2241      	movs	r2, #65	@ 0x41
 8004246:	2101      	movs	r1, #1
 8004248:	5499      	strb	r1, [r3, r2]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2242      	movs	r2, #66	@ 0x42
 800424e:	2101      	movs	r1, #1
 8004250:	5499      	strb	r1, [r3, r2]
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2243      	movs	r2, #67	@ 0x43
 8004256:	2101      	movs	r1, #1
 8004258:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2244      	movs	r2, #68	@ 0x44
 800425e:	2101      	movs	r1, #1
 8004260:	5499      	strb	r1, [r3, r2]
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2245      	movs	r2, #69	@ 0x45
 8004266:	2101      	movs	r1, #1
 8004268:	5499      	strb	r1, [r3, r2]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2246      	movs	r2, #70	@ 0x46
 800426e:	2101      	movs	r1, #1
 8004270:	5499      	strb	r1, [r3, r2]
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2247      	movs	r2, #71	@ 0x47
 8004276:	2101      	movs	r1, #1
 8004278:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	223d      	movs	r2, #61	@ 0x3d
 800427e:	2101      	movs	r1, #1
 8004280:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004282:	2300      	movs	r3, #0
}
 8004284:	0018      	movs	r0, r3
 8004286:	46bd      	mov	sp, r7
 8004288:	b002      	add	sp, #8
 800428a:	bd80      	pop	{r7, pc}

0800428c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b082      	sub	sp, #8
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d101      	bne.n	800429e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800429a:	2301      	movs	r3, #1
 800429c:	e04a      	b.n	8004334 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	223d      	movs	r2, #61	@ 0x3d
 80042a2:	5c9b      	ldrb	r3, [r3, r2]
 80042a4:	b2db      	uxtb	r3, r3
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d107      	bne.n	80042ba <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	223c      	movs	r2, #60	@ 0x3c
 80042ae:	2100      	movs	r1, #0
 80042b0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	0018      	movs	r0, r3
 80042b6:	f000 f841 	bl	800433c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	223d      	movs	r2, #61	@ 0x3d
 80042be:	2102      	movs	r1, #2
 80042c0:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681a      	ldr	r2, [r3, #0]
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	3304      	adds	r3, #4
 80042ca:	0019      	movs	r1, r3
 80042cc:	0010      	movs	r0, r2
 80042ce:	f000 fa13 	bl	80046f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2248      	movs	r2, #72	@ 0x48
 80042d6:	2101      	movs	r1, #1
 80042d8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	223e      	movs	r2, #62	@ 0x3e
 80042de:	2101      	movs	r1, #1
 80042e0:	5499      	strb	r1, [r3, r2]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	223f      	movs	r2, #63	@ 0x3f
 80042e6:	2101      	movs	r1, #1
 80042e8:	5499      	strb	r1, [r3, r2]
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2240      	movs	r2, #64	@ 0x40
 80042ee:	2101      	movs	r1, #1
 80042f0:	5499      	strb	r1, [r3, r2]
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2241      	movs	r2, #65	@ 0x41
 80042f6:	2101      	movs	r1, #1
 80042f8:	5499      	strb	r1, [r3, r2]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2242      	movs	r2, #66	@ 0x42
 80042fe:	2101      	movs	r1, #1
 8004300:	5499      	strb	r1, [r3, r2]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2243      	movs	r2, #67	@ 0x43
 8004306:	2101      	movs	r1, #1
 8004308:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2244      	movs	r2, #68	@ 0x44
 800430e:	2101      	movs	r1, #1
 8004310:	5499      	strb	r1, [r3, r2]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2245      	movs	r2, #69	@ 0x45
 8004316:	2101      	movs	r1, #1
 8004318:	5499      	strb	r1, [r3, r2]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2246      	movs	r2, #70	@ 0x46
 800431e:	2101      	movs	r1, #1
 8004320:	5499      	strb	r1, [r3, r2]
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2247      	movs	r2, #71	@ 0x47
 8004326:	2101      	movs	r1, #1
 8004328:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	223d      	movs	r2, #61	@ 0x3d
 800432e:	2101      	movs	r1, #1
 8004330:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004332:	2300      	movs	r3, #0
}
 8004334:	0018      	movs	r0, r3
 8004336:	46bd      	mov	sp, r7
 8004338:	b002      	add	sp, #8
 800433a:	bd80      	pop	{r7, pc}

0800433c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b082      	sub	sp, #8
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004344:	46c0      	nop			@ (mov r8, r8)
 8004346:	46bd      	mov	sp, r7
 8004348:	b002      	add	sp, #8
 800434a:	bd80      	pop	{r7, pc}

0800434c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b086      	sub	sp, #24
 8004350:	af00      	add	r7, sp, #0
 8004352:	60f8      	str	r0, [r7, #12]
 8004354:	60b9      	str	r1, [r7, #8]
 8004356:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004358:	2317      	movs	r3, #23
 800435a:	18fb      	adds	r3, r7, r3
 800435c:	2200      	movs	r2, #0
 800435e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	223c      	movs	r2, #60	@ 0x3c
 8004364:	5c9b      	ldrb	r3, [r3, r2]
 8004366:	2b01      	cmp	r3, #1
 8004368:	d101      	bne.n	800436e <HAL_TIM_PWM_ConfigChannel+0x22>
 800436a:	2302      	movs	r3, #2
 800436c:	e0e5      	b.n	800453a <HAL_TIM_PWM_ConfigChannel+0x1ee>
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	223c      	movs	r2, #60	@ 0x3c
 8004372:	2101      	movs	r1, #1
 8004374:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2b14      	cmp	r3, #20
 800437a:	d900      	bls.n	800437e <HAL_TIM_PWM_ConfigChannel+0x32>
 800437c:	e0d1      	b.n	8004522 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	009a      	lsls	r2, r3, #2
 8004382:	4b70      	ldr	r3, [pc, #448]	@ (8004544 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8004384:	18d3      	adds	r3, r2, r3
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	68ba      	ldr	r2, [r7, #8]
 8004390:	0011      	movs	r1, r2
 8004392:	0018      	movs	r0, r3
 8004394:	f000 fa34 	bl	8004800 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	699a      	ldr	r2, [r3, #24]
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	2108      	movs	r1, #8
 80043a4:	430a      	orrs	r2, r1
 80043a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	699a      	ldr	r2, [r3, #24]
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	2104      	movs	r1, #4
 80043b4:	438a      	bics	r2, r1
 80043b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	6999      	ldr	r1, [r3, #24]
 80043be:	68bb      	ldr	r3, [r7, #8]
 80043c0:	691a      	ldr	r2, [r3, #16]
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	430a      	orrs	r2, r1
 80043c8:	619a      	str	r2, [r3, #24]
      break;
 80043ca:	e0af      	b.n	800452c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	68ba      	ldr	r2, [r7, #8]
 80043d2:	0011      	movs	r1, r2
 80043d4:	0018      	movs	r0, r3
 80043d6:	f000 fa9d 	bl	8004914 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	699a      	ldr	r2, [r3, #24]
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	2180      	movs	r1, #128	@ 0x80
 80043e6:	0109      	lsls	r1, r1, #4
 80043e8:	430a      	orrs	r2, r1
 80043ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	699a      	ldr	r2, [r3, #24]
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4954      	ldr	r1, [pc, #336]	@ (8004548 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80043f8:	400a      	ands	r2, r1
 80043fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	6999      	ldr	r1, [r3, #24]
 8004402:	68bb      	ldr	r3, [r7, #8]
 8004404:	691b      	ldr	r3, [r3, #16]
 8004406:	021a      	lsls	r2, r3, #8
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	430a      	orrs	r2, r1
 800440e:	619a      	str	r2, [r3, #24]
      break;
 8004410:	e08c      	b.n	800452c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	68ba      	ldr	r2, [r7, #8]
 8004418:	0011      	movs	r1, r2
 800441a:	0018      	movs	r0, r3
 800441c:	f000 fafe 	bl	8004a1c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	69da      	ldr	r2, [r3, #28]
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	2108      	movs	r1, #8
 800442c:	430a      	orrs	r2, r1
 800442e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	69da      	ldr	r2, [r3, #28]
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	2104      	movs	r1, #4
 800443c:	438a      	bics	r2, r1
 800443e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	69d9      	ldr	r1, [r3, #28]
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	691a      	ldr	r2, [r3, #16]
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	430a      	orrs	r2, r1
 8004450:	61da      	str	r2, [r3, #28]
      break;
 8004452:	e06b      	b.n	800452c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	68ba      	ldr	r2, [r7, #8]
 800445a:	0011      	movs	r1, r2
 800445c:	0018      	movs	r0, r3
 800445e:	f000 fb65 	bl	8004b2c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	69da      	ldr	r2, [r3, #28]
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	2180      	movs	r1, #128	@ 0x80
 800446e:	0109      	lsls	r1, r1, #4
 8004470:	430a      	orrs	r2, r1
 8004472:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	69da      	ldr	r2, [r3, #28]
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4932      	ldr	r1, [pc, #200]	@ (8004548 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8004480:	400a      	ands	r2, r1
 8004482:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	69d9      	ldr	r1, [r3, #28]
 800448a:	68bb      	ldr	r3, [r7, #8]
 800448c:	691b      	ldr	r3, [r3, #16]
 800448e:	021a      	lsls	r2, r3, #8
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	430a      	orrs	r2, r1
 8004496:	61da      	str	r2, [r3, #28]
      break;
 8004498:	e048      	b.n	800452c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	68ba      	ldr	r2, [r7, #8]
 80044a0:	0011      	movs	r1, r2
 80044a2:	0018      	movs	r0, r3
 80044a4:	f000 fbac 	bl	8004c00 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	2108      	movs	r1, #8
 80044b4:	430a      	orrs	r2, r1
 80044b6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	2104      	movs	r1, #4
 80044c4:	438a      	bics	r2, r1
 80044c6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80044ce:	68bb      	ldr	r3, [r7, #8]
 80044d0:	691a      	ldr	r2, [r3, #16]
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	430a      	orrs	r2, r1
 80044d8:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80044da:	e027      	b.n	800452c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	68ba      	ldr	r2, [r7, #8]
 80044e2:	0011      	movs	r1, r2
 80044e4:	0018      	movs	r0, r3
 80044e6:	f000 fbeb 	bl	8004cc0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	2180      	movs	r1, #128	@ 0x80
 80044f6:	0109      	lsls	r1, r1, #4
 80044f8:	430a      	orrs	r2, r1
 80044fa:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4910      	ldr	r1, [pc, #64]	@ (8004548 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8004508:	400a      	ands	r2, r1
 800450a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004512:	68bb      	ldr	r3, [r7, #8]
 8004514:	691b      	ldr	r3, [r3, #16]
 8004516:	021a      	lsls	r2, r3, #8
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	430a      	orrs	r2, r1
 800451e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004520:	e004      	b.n	800452c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8004522:	2317      	movs	r3, #23
 8004524:	18fb      	adds	r3, r7, r3
 8004526:	2201      	movs	r2, #1
 8004528:	701a      	strb	r2, [r3, #0]
      break;
 800452a:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	223c      	movs	r2, #60	@ 0x3c
 8004530:	2100      	movs	r1, #0
 8004532:	5499      	strb	r1, [r3, r2]

  return status;
 8004534:	2317      	movs	r3, #23
 8004536:	18fb      	adds	r3, r7, r3
 8004538:	781b      	ldrb	r3, [r3, #0]
}
 800453a:	0018      	movs	r0, r3
 800453c:	46bd      	mov	sp, r7
 800453e:	b006      	add	sp, #24
 8004540:	bd80      	pop	{r7, pc}
 8004542:	46c0      	nop			@ (mov r8, r8)
 8004544:	08007e20 	.word	0x08007e20
 8004548:	fffffbff 	.word	0xfffffbff

0800454c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b084      	sub	sp, #16
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
 8004554:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004556:	230f      	movs	r3, #15
 8004558:	18fb      	adds	r3, r7, r3
 800455a:	2200      	movs	r2, #0
 800455c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	223c      	movs	r2, #60	@ 0x3c
 8004562:	5c9b      	ldrb	r3, [r3, r2]
 8004564:	2b01      	cmp	r3, #1
 8004566:	d101      	bne.n	800456c <HAL_TIM_ConfigClockSource+0x20>
 8004568:	2302      	movs	r3, #2
 800456a:	e0bc      	b.n	80046e6 <HAL_TIM_ConfigClockSource+0x19a>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	223c      	movs	r2, #60	@ 0x3c
 8004570:	2101      	movs	r1, #1
 8004572:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	223d      	movs	r2, #61	@ 0x3d
 8004578:	2102      	movs	r1, #2
 800457a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	689b      	ldr	r3, [r3, #8]
 8004582:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004584:	68bb      	ldr	r3, [r7, #8]
 8004586:	4a5a      	ldr	r2, [pc, #360]	@ (80046f0 <HAL_TIM_ConfigClockSource+0x1a4>)
 8004588:	4013      	ands	r3, r2
 800458a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	4a59      	ldr	r2, [pc, #356]	@ (80046f4 <HAL_TIM_ConfigClockSource+0x1a8>)
 8004590:	4013      	ands	r3, r2
 8004592:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	68ba      	ldr	r2, [r7, #8]
 800459a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	2280      	movs	r2, #128	@ 0x80
 80045a2:	0192      	lsls	r2, r2, #6
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d040      	beq.n	800462a <HAL_TIM_ConfigClockSource+0xde>
 80045a8:	2280      	movs	r2, #128	@ 0x80
 80045aa:	0192      	lsls	r2, r2, #6
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d900      	bls.n	80045b2 <HAL_TIM_ConfigClockSource+0x66>
 80045b0:	e088      	b.n	80046c4 <HAL_TIM_ConfigClockSource+0x178>
 80045b2:	2280      	movs	r2, #128	@ 0x80
 80045b4:	0152      	lsls	r2, r2, #5
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d100      	bne.n	80045bc <HAL_TIM_ConfigClockSource+0x70>
 80045ba:	e088      	b.n	80046ce <HAL_TIM_ConfigClockSource+0x182>
 80045bc:	2280      	movs	r2, #128	@ 0x80
 80045be:	0152      	lsls	r2, r2, #5
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d900      	bls.n	80045c6 <HAL_TIM_ConfigClockSource+0x7a>
 80045c4:	e07e      	b.n	80046c4 <HAL_TIM_ConfigClockSource+0x178>
 80045c6:	2b70      	cmp	r3, #112	@ 0x70
 80045c8:	d018      	beq.n	80045fc <HAL_TIM_ConfigClockSource+0xb0>
 80045ca:	d900      	bls.n	80045ce <HAL_TIM_ConfigClockSource+0x82>
 80045cc:	e07a      	b.n	80046c4 <HAL_TIM_ConfigClockSource+0x178>
 80045ce:	2b60      	cmp	r3, #96	@ 0x60
 80045d0:	d04f      	beq.n	8004672 <HAL_TIM_ConfigClockSource+0x126>
 80045d2:	d900      	bls.n	80045d6 <HAL_TIM_ConfigClockSource+0x8a>
 80045d4:	e076      	b.n	80046c4 <HAL_TIM_ConfigClockSource+0x178>
 80045d6:	2b50      	cmp	r3, #80	@ 0x50
 80045d8:	d03b      	beq.n	8004652 <HAL_TIM_ConfigClockSource+0x106>
 80045da:	d900      	bls.n	80045de <HAL_TIM_ConfigClockSource+0x92>
 80045dc:	e072      	b.n	80046c4 <HAL_TIM_ConfigClockSource+0x178>
 80045de:	2b40      	cmp	r3, #64	@ 0x40
 80045e0:	d057      	beq.n	8004692 <HAL_TIM_ConfigClockSource+0x146>
 80045e2:	d900      	bls.n	80045e6 <HAL_TIM_ConfigClockSource+0x9a>
 80045e4:	e06e      	b.n	80046c4 <HAL_TIM_ConfigClockSource+0x178>
 80045e6:	2b30      	cmp	r3, #48	@ 0x30
 80045e8:	d063      	beq.n	80046b2 <HAL_TIM_ConfigClockSource+0x166>
 80045ea:	d86b      	bhi.n	80046c4 <HAL_TIM_ConfigClockSource+0x178>
 80045ec:	2b20      	cmp	r3, #32
 80045ee:	d060      	beq.n	80046b2 <HAL_TIM_ConfigClockSource+0x166>
 80045f0:	d868      	bhi.n	80046c4 <HAL_TIM_ConfigClockSource+0x178>
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d05d      	beq.n	80046b2 <HAL_TIM_ConfigClockSource+0x166>
 80045f6:	2b10      	cmp	r3, #16
 80045f8:	d05b      	beq.n	80046b2 <HAL_TIM_ConfigClockSource+0x166>
 80045fa:	e063      	b.n	80046c4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800460c:	f000 fc38 	bl	8004e80 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	689b      	ldr	r3, [r3, #8]
 8004616:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004618:	68bb      	ldr	r3, [r7, #8]
 800461a:	2277      	movs	r2, #119	@ 0x77
 800461c:	4313      	orrs	r3, r2
 800461e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	68ba      	ldr	r2, [r7, #8]
 8004626:	609a      	str	r2, [r3, #8]
      break;
 8004628:	e052      	b.n	80046d0 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800463a:	f000 fc21 	bl	8004e80 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	689a      	ldr	r2, [r3, #8]
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	2180      	movs	r1, #128	@ 0x80
 800464a:	01c9      	lsls	r1, r1, #7
 800464c:	430a      	orrs	r2, r1
 800464e:	609a      	str	r2, [r3, #8]
      break;
 8004650:	e03e      	b.n	80046d0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800465e:	001a      	movs	r2, r3
 8004660:	f000 fb92 	bl	8004d88 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	2150      	movs	r1, #80	@ 0x50
 800466a:	0018      	movs	r0, r3
 800466c:	f000 fbec 	bl	8004e48 <TIM_ITRx_SetConfig>
      break;
 8004670:	e02e      	b.n	80046d0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800467e:	001a      	movs	r2, r3
 8004680:	f000 fbb0 	bl	8004de4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	2160      	movs	r1, #96	@ 0x60
 800468a:	0018      	movs	r0, r3
 800468c:	f000 fbdc 	bl	8004e48 <TIM_ITRx_SetConfig>
      break;
 8004690:	e01e      	b.n	80046d0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800469e:	001a      	movs	r2, r3
 80046a0:	f000 fb72 	bl	8004d88 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	2140      	movs	r1, #64	@ 0x40
 80046aa:	0018      	movs	r0, r3
 80046ac:	f000 fbcc 	bl	8004e48 <TIM_ITRx_SetConfig>
      break;
 80046b0:	e00e      	b.n	80046d0 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681a      	ldr	r2, [r3, #0]
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	0019      	movs	r1, r3
 80046bc:	0010      	movs	r0, r2
 80046be:	f000 fbc3 	bl	8004e48 <TIM_ITRx_SetConfig>
      break;
 80046c2:	e005      	b.n	80046d0 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80046c4:	230f      	movs	r3, #15
 80046c6:	18fb      	adds	r3, r7, r3
 80046c8:	2201      	movs	r2, #1
 80046ca:	701a      	strb	r2, [r3, #0]
      break;
 80046cc:	e000      	b.n	80046d0 <HAL_TIM_ConfigClockSource+0x184>
      break;
 80046ce:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	223d      	movs	r2, #61	@ 0x3d
 80046d4:	2101      	movs	r1, #1
 80046d6:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	223c      	movs	r2, #60	@ 0x3c
 80046dc:	2100      	movs	r1, #0
 80046de:	5499      	strb	r1, [r3, r2]

  return status;
 80046e0:	230f      	movs	r3, #15
 80046e2:	18fb      	adds	r3, r7, r3
 80046e4:	781b      	ldrb	r3, [r3, #0]
}
 80046e6:	0018      	movs	r0, r3
 80046e8:	46bd      	mov	sp, r7
 80046ea:	b004      	add	sp, #16
 80046ec:	bd80      	pop	{r7, pc}
 80046ee:	46c0      	nop			@ (mov r8, r8)
 80046f0:	ffceff88 	.word	0xffceff88
 80046f4:	ffff00ff 	.word	0xffff00ff

080046f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b084      	sub	sp, #16
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
 8004700:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	4a36      	ldr	r2, [pc, #216]	@ (80047e4 <TIM_Base_SetConfig+0xec>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d003      	beq.n	8004718 <TIM_Base_SetConfig+0x20>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	4a35      	ldr	r2, [pc, #212]	@ (80047e8 <TIM_Base_SetConfig+0xf0>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d108      	bne.n	800472a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	2270      	movs	r2, #112	@ 0x70
 800471c:	4393      	bics	r3, r2
 800471e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	68fa      	ldr	r2, [r7, #12]
 8004726:	4313      	orrs	r3, r2
 8004728:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	4a2d      	ldr	r2, [pc, #180]	@ (80047e4 <TIM_Base_SetConfig+0xec>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d013      	beq.n	800475a <TIM_Base_SetConfig+0x62>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	4a2c      	ldr	r2, [pc, #176]	@ (80047e8 <TIM_Base_SetConfig+0xf0>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d00f      	beq.n	800475a <TIM_Base_SetConfig+0x62>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	4a2b      	ldr	r2, [pc, #172]	@ (80047ec <TIM_Base_SetConfig+0xf4>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d00b      	beq.n	800475a <TIM_Base_SetConfig+0x62>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	4a2a      	ldr	r2, [pc, #168]	@ (80047f0 <TIM_Base_SetConfig+0xf8>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d007      	beq.n	800475a <TIM_Base_SetConfig+0x62>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	4a29      	ldr	r2, [pc, #164]	@ (80047f4 <TIM_Base_SetConfig+0xfc>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d003      	beq.n	800475a <TIM_Base_SetConfig+0x62>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	4a28      	ldr	r2, [pc, #160]	@ (80047f8 <TIM_Base_SetConfig+0x100>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d108      	bne.n	800476c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	4a27      	ldr	r2, [pc, #156]	@ (80047fc <TIM_Base_SetConfig+0x104>)
 800475e:	4013      	ands	r3, r2
 8004760:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	68db      	ldr	r3, [r3, #12]
 8004766:	68fa      	ldr	r2, [r7, #12]
 8004768:	4313      	orrs	r3, r2
 800476a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	2280      	movs	r2, #128	@ 0x80
 8004770:	4393      	bics	r3, r2
 8004772:	001a      	movs	r2, r3
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	695b      	ldr	r3, [r3, #20]
 8004778:	4313      	orrs	r3, r2
 800477a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	68fa      	ldr	r2, [r7, #12]
 8004780:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	689a      	ldr	r2, [r3, #8]
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	681a      	ldr	r2, [r3, #0]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	4a13      	ldr	r2, [pc, #76]	@ (80047e4 <TIM_Base_SetConfig+0xec>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d00b      	beq.n	80047b2 <TIM_Base_SetConfig+0xba>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	4a14      	ldr	r2, [pc, #80]	@ (80047f0 <TIM_Base_SetConfig+0xf8>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d007      	beq.n	80047b2 <TIM_Base_SetConfig+0xba>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	4a13      	ldr	r2, [pc, #76]	@ (80047f4 <TIM_Base_SetConfig+0xfc>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d003      	beq.n	80047b2 <TIM_Base_SetConfig+0xba>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	4a12      	ldr	r2, [pc, #72]	@ (80047f8 <TIM_Base_SetConfig+0x100>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d103      	bne.n	80047ba <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	691a      	ldr	r2, [r3, #16]
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2201      	movs	r2, #1
 80047be:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	691b      	ldr	r3, [r3, #16]
 80047c4:	2201      	movs	r2, #1
 80047c6:	4013      	ands	r3, r2
 80047c8:	2b01      	cmp	r3, #1
 80047ca:	d106      	bne.n	80047da <TIM_Base_SetConfig+0xe2>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	691b      	ldr	r3, [r3, #16]
 80047d0:	2201      	movs	r2, #1
 80047d2:	4393      	bics	r3, r2
 80047d4:	001a      	movs	r2, r3
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	611a      	str	r2, [r3, #16]
  }
}
 80047da:	46c0      	nop			@ (mov r8, r8)
 80047dc:	46bd      	mov	sp, r7
 80047de:	b004      	add	sp, #16
 80047e0:	bd80      	pop	{r7, pc}
 80047e2:	46c0      	nop			@ (mov r8, r8)
 80047e4:	40012c00 	.word	0x40012c00
 80047e8:	40000400 	.word	0x40000400
 80047ec:	40002000 	.word	0x40002000
 80047f0:	40014000 	.word	0x40014000
 80047f4:	40014400 	.word	0x40014400
 80047f8:	40014800 	.word	0x40014800
 80047fc:	fffffcff 	.word	0xfffffcff

08004800 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b086      	sub	sp, #24
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
 8004808:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6a1b      	ldr	r3, [r3, #32]
 800480e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6a1b      	ldr	r3, [r3, #32]
 8004814:	2201      	movs	r2, #1
 8004816:	4393      	bics	r3, r2
 8004818:	001a      	movs	r2, r3
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	699b      	ldr	r3, [r3, #24]
 8004828:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	4a32      	ldr	r2, [pc, #200]	@ (80048f8 <TIM_OC1_SetConfig+0xf8>)
 800482e:	4013      	ands	r3, r2
 8004830:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	2203      	movs	r2, #3
 8004836:	4393      	bics	r3, r2
 8004838:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	68fa      	ldr	r2, [r7, #12]
 8004840:	4313      	orrs	r3, r2
 8004842:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004844:	697b      	ldr	r3, [r7, #20]
 8004846:	2202      	movs	r2, #2
 8004848:	4393      	bics	r3, r2
 800484a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	689b      	ldr	r3, [r3, #8]
 8004850:	697a      	ldr	r2, [r7, #20]
 8004852:	4313      	orrs	r3, r2
 8004854:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	4a28      	ldr	r2, [pc, #160]	@ (80048fc <TIM_OC1_SetConfig+0xfc>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d00b      	beq.n	8004876 <TIM_OC1_SetConfig+0x76>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	4a27      	ldr	r2, [pc, #156]	@ (8004900 <TIM_OC1_SetConfig+0x100>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d007      	beq.n	8004876 <TIM_OC1_SetConfig+0x76>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	4a26      	ldr	r2, [pc, #152]	@ (8004904 <TIM_OC1_SetConfig+0x104>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d003      	beq.n	8004876 <TIM_OC1_SetConfig+0x76>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	4a25      	ldr	r2, [pc, #148]	@ (8004908 <TIM_OC1_SetConfig+0x108>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d10c      	bne.n	8004890 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004876:	697b      	ldr	r3, [r7, #20]
 8004878:	2208      	movs	r2, #8
 800487a:	4393      	bics	r3, r2
 800487c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	68db      	ldr	r3, [r3, #12]
 8004882:	697a      	ldr	r2, [r7, #20]
 8004884:	4313      	orrs	r3, r2
 8004886:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004888:	697b      	ldr	r3, [r7, #20]
 800488a:	2204      	movs	r2, #4
 800488c:	4393      	bics	r3, r2
 800488e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	4a1a      	ldr	r2, [pc, #104]	@ (80048fc <TIM_OC1_SetConfig+0xfc>)
 8004894:	4293      	cmp	r3, r2
 8004896:	d00b      	beq.n	80048b0 <TIM_OC1_SetConfig+0xb0>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	4a19      	ldr	r2, [pc, #100]	@ (8004900 <TIM_OC1_SetConfig+0x100>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d007      	beq.n	80048b0 <TIM_OC1_SetConfig+0xb0>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	4a18      	ldr	r2, [pc, #96]	@ (8004904 <TIM_OC1_SetConfig+0x104>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d003      	beq.n	80048b0 <TIM_OC1_SetConfig+0xb0>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	4a17      	ldr	r2, [pc, #92]	@ (8004908 <TIM_OC1_SetConfig+0x108>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d111      	bne.n	80048d4 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80048b0:	693b      	ldr	r3, [r7, #16]
 80048b2:	4a16      	ldr	r2, [pc, #88]	@ (800490c <TIM_OC1_SetConfig+0x10c>)
 80048b4:	4013      	ands	r3, r2
 80048b6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80048b8:	693b      	ldr	r3, [r7, #16]
 80048ba:	4a15      	ldr	r2, [pc, #84]	@ (8004910 <TIM_OC1_SetConfig+0x110>)
 80048bc:	4013      	ands	r3, r2
 80048be:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	695b      	ldr	r3, [r3, #20]
 80048c4:	693a      	ldr	r2, [r7, #16]
 80048c6:	4313      	orrs	r3, r2
 80048c8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	699b      	ldr	r3, [r3, #24]
 80048ce:	693a      	ldr	r2, [r7, #16]
 80048d0:	4313      	orrs	r3, r2
 80048d2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	693a      	ldr	r2, [r7, #16]
 80048d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	68fa      	ldr	r2, [r7, #12]
 80048de:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	685a      	ldr	r2, [r3, #4]
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	697a      	ldr	r2, [r7, #20]
 80048ec:	621a      	str	r2, [r3, #32]
}
 80048ee:	46c0      	nop			@ (mov r8, r8)
 80048f0:	46bd      	mov	sp, r7
 80048f2:	b006      	add	sp, #24
 80048f4:	bd80      	pop	{r7, pc}
 80048f6:	46c0      	nop			@ (mov r8, r8)
 80048f8:	fffeff8f 	.word	0xfffeff8f
 80048fc:	40012c00 	.word	0x40012c00
 8004900:	40014000 	.word	0x40014000
 8004904:	40014400 	.word	0x40014400
 8004908:	40014800 	.word	0x40014800
 800490c:	fffffeff 	.word	0xfffffeff
 8004910:	fffffdff 	.word	0xfffffdff

08004914 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b086      	sub	sp, #24
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
 800491c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6a1b      	ldr	r3, [r3, #32]
 8004922:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6a1b      	ldr	r3, [r3, #32]
 8004928:	2210      	movs	r2, #16
 800492a:	4393      	bics	r3, r2
 800492c:	001a      	movs	r2, r3
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	699b      	ldr	r3, [r3, #24]
 800493c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	4a2e      	ldr	r2, [pc, #184]	@ (80049fc <TIM_OC2_SetConfig+0xe8>)
 8004942:	4013      	ands	r3, r2
 8004944:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	4a2d      	ldr	r2, [pc, #180]	@ (8004a00 <TIM_OC2_SetConfig+0xec>)
 800494a:	4013      	ands	r3, r2
 800494c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	021b      	lsls	r3, r3, #8
 8004954:	68fa      	ldr	r2, [r7, #12]
 8004956:	4313      	orrs	r3, r2
 8004958:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800495a:	697b      	ldr	r3, [r7, #20]
 800495c:	2220      	movs	r2, #32
 800495e:	4393      	bics	r3, r2
 8004960:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	689b      	ldr	r3, [r3, #8]
 8004966:	011b      	lsls	r3, r3, #4
 8004968:	697a      	ldr	r2, [r7, #20]
 800496a:	4313      	orrs	r3, r2
 800496c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	4a24      	ldr	r2, [pc, #144]	@ (8004a04 <TIM_OC2_SetConfig+0xf0>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d10d      	bne.n	8004992 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004976:	697b      	ldr	r3, [r7, #20]
 8004978:	2280      	movs	r2, #128	@ 0x80
 800497a:	4393      	bics	r3, r2
 800497c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	68db      	ldr	r3, [r3, #12]
 8004982:	011b      	lsls	r3, r3, #4
 8004984:	697a      	ldr	r2, [r7, #20]
 8004986:	4313      	orrs	r3, r2
 8004988:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800498a:	697b      	ldr	r3, [r7, #20]
 800498c:	2240      	movs	r2, #64	@ 0x40
 800498e:	4393      	bics	r3, r2
 8004990:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	4a1b      	ldr	r2, [pc, #108]	@ (8004a04 <TIM_OC2_SetConfig+0xf0>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d00b      	beq.n	80049b2 <TIM_OC2_SetConfig+0x9e>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	4a1a      	ldr	r2, [pc, #104]	@ (8004a08 <TIM_OC2_SetConfig+0xf4>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d007      	beq.n	80049b2 <TIM_OC2_SetConfig+0x9e>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	4a19      	ldr	r2, [pc, #100]	@ (8004a0c <TIM_OC2_SetConfig+0xf8>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d003      	beq.n	80049b2 <TIM_OC2_SetConfig+0x9e>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	4a18      	ldr	r2, [pc, #96]	@ (8004a10 <TIM_OC2_SetConfig+0xfc>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d113      	bne.n	80049da <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80049b2:	693b      	ldr	r3, [r7, #16]
 80049b4:	4a17      	ldr	r2, [pc, #92]	@ (8004a14 <TIM_OC2_SetConfig+0x100>)
 80049b6:	4013      	ands	r3, r2
 80049b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80049ba:	693b      	ldr	r3, [r7, #16]
 80049bc:	4a16      	ldr	r2, [pc, #88]	@ (8004a18 <TIM_OC2_SetConfig+0x104>)
 80049be:	4013      	ands	r3, r2
 80049c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	695b      	ldr	r3, [r3, #20]
 80049c6:	009b      	lsls	r3, r3, #2
 80049c8:	693a      	ldr	r2, [r7, #16]
 80049ca:	4313      	orrs	r3, r2
 80049cc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	699b      	ldr	r3, [r3, #24]
 80049d2:	009b      	lsls	r3, r3, #2
 80049d4:	693a      	ldr	r2, [r7, #16]
 80049d6:	4313      	orrs	r3, r2
 80049d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	693a      	ldr	r2, [r7, #16]
 80049de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	68fa      	ldr	r2, [r7, #12]
 80049e4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	685a      	ldr	r2, [r3, #4]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	697a      	ldr	r2, [r7, #20]
 80049f2:	621a      	str	r2, [r3, #32]
}
 80049f4:	46c0      	nop			@ (mov r8, r8)
 80049f6:	46bd      	mov	sp, r7
 80049f8:	b006      	add	sp, #24
 80049fa:	bd80      	pop	{r7, pc}
 80049fc:	feff8fff 	.word	0xfeff8fff
 8004a00:	fffffcff 	.word	0xfffffcff
 8004a04:	40012c00 	.word	0x40012c00
 8004a08:	40014000 	.word	0x40014000
 8004a0c:	40014400 	.word	0x40014400
 8004a10:	40014800 	.word	0x40014800
 8004a14:	fffffbff 	.word	0xfffffbff
 8004a18:	fffff7ff 	.word	0xfffff7ff

08004a1c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b086      	sub	sp, #24
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
 8004a24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6a1b      	ldr	r3, [r3, #32]
 8004a2a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6a1b      	ldr	r3, [r3, #32]
 8004a30:	4a33      	ldr	r2, [pc, #204]	@ (8004b00 <TIM_OC3_SetConfig+0xe4>)
 8004a32:	401a      	ands	r2, r3
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	685b      	ldr	r3, [r3, #4]
 8004a3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	69db      	ldr	r3, [r3, #28]
 8004a42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	4a2f      	ldr	r2, [pc, #188]	@ (8004b04 <TIM_OC3_SetConfig+0xe8>)
 8004a48:	4013      	ands	r3, r2
 8004a4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	2203      	movs	r2, #3
 8004a50:	4393      	bics	r3, r2
 8004a52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	68fa      	ldr	r2, [r7, #12]
 8004a5a:	4313      	orrs	r3, r2
 8004a5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004a5e:	697b      	ldr	r3, [r7, #20]
 8004a60:	4a29      	ldr	r2, [pc, #164]	@ (8004b08 <TIM_OC3_SetConfig+0xec>)
 8004a62:	4013      	ands	r3, r2
 8004a64:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	689b      	ldr	r3, [r3, #8]
 8004a6a:	021b      	lsls	r3, r3, #8
 8004a6c:	697a      	ldr	r2, [r7, #20]
 8004a6e:	4313      	orrs	r3, r2
 8004a70:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	4a25      	ldr	r2, [pc, #148]	@ (8004b0c <TIM_OC3_SetConfig+0xf0>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d10d      	bne.n	8004a96 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004a7a:	697b      	ldr	r3, [r7, #20]
 8004a7c:	4a24      	ldr	r2, [pc, #144]	@ (8004b10 <TIM_OC3_SetConfig+0xf4>)
 8004a7e:	4013      	ands	r3, r2
 8004a80:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	68db      	ldr	r3, [r3, #12]
 8004a86:	021b      	lsls	r3, r3, #8
 8004a88:	697a      	ldr	r2, [r7, #20]
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004a8e:	697b      	ldr	r3, [r7, #20]
 8004a90:	4a20      	ldr	r2, [pc, #128]	@ (8004b14 <TIM_OC3_SetConfig+0xf8>)
 8004a92:	4013      	ands	r3, r2
 8004a94:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	4a1c      	ldr	r2, [pc, #112]	@ (8004b0c <TIM_OC3_SetConfig+0xf0>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d00b      	beq.n	8004ab6 <TIM_OC3_SetConfig+0x9a>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	4a1d      	ldr	r2, [pc, #116]	@ (8004b18 <TIM_OC3_SetConfig+0xfc>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d007      	beq.n	8004ab6 <TIM_OC3_SetConfig+0x9a>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	4a1c      	ldr	r2, [pc, #112]	@ (8004b1c <TIM_OC3_SetConfig+0x100>)
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d003      	beq.n	8004ab6 <TIM_OC3_SetConfig+0x9a>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	4a1b      	ldr	r2, [pc, #108]	@ (8004b20 <TIM_OC3_SetConfig+0x104>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d113      	bne.n	8004ade <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004ab6:	693b      	ldr	r3, [r7, #16]
 8004ab8:	4a1a      	ldr	r2, [pc, #104]	@ (8004b24 <TIM_OC3_SetConfig+0x108>)
 8004aba:	4013      	ands	r3, r2
 8004abc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004abe:	693b      	ldr	r3, [r7, #16]
 8004ac0:	4a19      	ldr	r2, [pc, #100]	@ (8004b28 <TIM_OC3_SetConfig+0x10c>)
 8004ac2:	4013      	ands	r3, r2
 8004ac4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	695b      	ldr	r3, [r3, #20]
 8004aca:	011b      	lsls	r3, r3, #4
 8004acc:	693a      	ldr	r2, [r7, #16]
 8004ace:	4313      	orrs	r3, r2
 8004ad0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	699b      	ldr	r3, [r3, #24]
 8004ad6:	011b      	lsls	r3, r3, #4
 8004ad8:	693a      	ldr	r2, [r7, #16]
 8004ada:	4313      	orrs	r3, r2
 8004adc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	693a      	ldr	r2, [r7, #16]
 8004ae2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	68fa      	ldr	r2, [r7, #12]
 8004ae8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	685a      	ldr	r2, [r3, #4]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	697a      	ldr	r2, [r7, #20]
 8004af6:	621a      	str	r2, [r3, #32]
}
 8004af8:	46c0      	nop			@ (mov r8, r8)
 8004afa:	46bd      	mov	sp, r7
 8004afc:	b006      	add	sp, #24
 8004afe:	bd80      	pop	{r7, pc}
 8004b00:	fffffeff 	.word	0xfffffeff
 8004b04:	fffeff8f 	.word	0xfffeff8f
 8004b08:	fffffdff 	.word	0xfffffdff
 8004b0c:	40012c00 	.word	0x40012c00
 8004b10:	fffff7ff 	.word	0xfffff7ff
 8004b14:	fffffbff 	.word	0xfffffbff
 8004b18:	40014000 	.word	0x40014000
 8004b1c:	40014400 	.word	0x40014400
 8004b20:	40014800 	.word	0x40014800
 8004b24:	ffffefff 	.word	0xffffefff
 8004b28:	ffffdfff 	.word	0xffffdfff

08004b2c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b086      	sub	sp, #24
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
 8004b34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6a1b      	ldr	r3, [r3, #32]
 8004b3a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6a1b      	ldr	r3, [r3, #32]
 8004b40:	4a26      	ldr	r2, [pc, #152]	@ (8004bdc <TIM_OC4_SetConfig+0xb0>)
 8004b42:	401a      	ands	r2, r3
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	685b      	ldr	r3, [r3, #4]
 8004b4c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	69db      	ldr	r3, [r3, #28]
 8004b52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	4a22      	ldr	r2, [pc, #136]	@ (8004be0 <TIM_OC4_SetConfig+0xb4>)
 8004b58:	4013      	ands	r3, r2
 8004b5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	4a21      	ldr	r2, [pc, #132]	@ (8004be4 <TIM_OC4_SetConfig+0xb8>)
 8004b60:	4013      	ands	r3, r2
 8004b62:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	021b      	lsls	r3, r3, #8
 8004b6a:	68fa      	ldr	r2, [r7, #12]
 8004b6c:	4313      	orrs	r3, r2
 8004b6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004b70:	693b      	ldr	r3, [r7, #16]
 8004b72:	4a1d      	ldr	r2, [pc, #116]	@ (8004be8 <TIM_OC4_SetConfig+0xbc>)
 8004b74:	4013      	ands	r3, r2
 8004b76:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	689b      	ldr	r3, [r3, #8]
 8004b7c:	031b      	lsls	r3, r3, #12
 8004b7e:	693a      	ldr	r2, [r7, #16]
 8004b80:	4313      	orrs	r3, r2
 8004b82:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	4a19      	ldr	r2, [pc, #100]	@ (8004bec <TIM_OC4_SetConfig+0xc0>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d00b      	beq.n	8004ba4 <TIM_OC4_SetConfig+0x78>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	4a18      	ldr	r2, [pc, #96]	@ (8004bf0 <TIM_OC4_SetConfig+0xc4>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d007      	beq.n	8004ba4 <TIM_OC4_SetConfig+0x78>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	4a17      	ldr	r2, [pc, #92]	@ (8004bf4 <TIM_OC4_SetConfig+0xc8>)
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d003      	beq.n	8004ba4 <TIM_OC4_SetConfig+0x78>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	4a16      	ldr	r2, [pc, #88]	@ (8004bf8 <TIM_OC4_SetConfig+0xcc>)
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d109      	bne.n	8004bb8 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004ba4:	697b      	ldr	r3, [r7, #20]
 8004ba6:	4a15      	ldr	r2, [pc, #84]	@ (8004bfc <TIM_OC4_SetConfig+0xd0>)
 8004ba8:	4013      	ands	r3, r2
 8004baa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	695b      	ldr	r3, [r3, #20]
 8004bb0:	019b      	lsls	r3, r3, #6
 8004bb2:	697a      	ldr	r2, [r7, #20]
 8004bb4:	4313      	orrs	r3, r2
 8004bb6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	697a      	ldr	r2, [r7, #20]
 8004bbc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	68fa      	ldr	r2, [r7, #12]
 8004bc2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	685a      	ldr	r2, [r3, #4]
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	693a      	ldr	r2, [r7, #16]
 8004bd0:	621a      	str	r2, [r3, #32]
}
 8004bd2:	46c0      	nop			@ (mov r8, r8)
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	b006      	add	sp, #24
 8004bd8:	bd80      	pop	{r7, pc}
 8004bda:	46c0      	nop			@ (mov r8, r8)
 8004bdc:	ffffefff 	.word	0xffffefff
 8004be0:	feff8fff 	.word	0xfeff8fff
 8004be4:	fffffcff 	.word	0xfffffcff
 8004be8:	ffffdfff 	.word	0xffffdfff
 8004bec:	40012c00 	.word	0x40012c00
 8004bf0:	40014000 	.word	0x40014000
 8004bf4:	40014400 	.word	0x40014400
 8004bf8:	40014800 	.word	0x40014800
 8004bfc:	ffffbfff 	.word	0xffffbfff

08004c00 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b086      	sub	sp, #24
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
 8004c08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6a1b      	ldr	r3, [r3, #32]
 8004c0e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6a1b      	ldr	r3, [r3, #32]
 8004c14:	4a23      	ldr	r2, [pc, #140]	@ (8004ca4 <TIM_OC5_SetConfig+0xa4>)
 8004c16:	401a      	ands	r2, r3
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	4a1f      	ldr	r2, [pc, #124]	@ (8004ca8 <TIM_OC5_SetConfig+0xa8>)
 8004c2c:	4013      	ands	r3, r2
 8004c2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	68fa      	ldr	r2, [r7, #12]
 8004c36:	4313      	orrs	r3, r2
 8004c38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004c3a:	693b      	ldr	r3, [r7, #16]
 8004c3c:	4a1b      	ldr	r2, [pc, #108]	@ (8004cac <TIM_OC5_SetConfig+0xac>)
 8004c3e:	4013      	ands	r3, r2
 8004c40:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	689b      	ldr	r3, [r3, #8]
 8004c46:	041b      	lsls	r3, r3, #16
 8004c48:	693a      	ldr	r2, [r7, #16]
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	4a17      	ldr	r2, [pc, #92]	@ (8004cb0 <TIM_OC5_SetConfig+0xb0>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d00b      	beq.n	8004c6e <TIM_OC5_SetConfig+0x6e>
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	4a16      	ldr	r2, [pc, #88]	@ (8004cb4 <TIM_OC5_SetConfig+0xb4>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d007      	beq.n	8004c6e <TIM_OC5_SetConfig+0x6e>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	4a15      	ldr	r2, [pc, #84]	@ (8004cb8 <TIM_OC5_SetConfig+0xb8>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d003      	beq.n	8004c6e <TIM_OC5_SetConfig+0x6e>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	4a14      	ldr	r2, [pc, #80]	@ (8004cbc <TIM_OC5_SetConfig+0xbc>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d109      	bne.n	8004c82 <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004c6e:	697b      	ldr	r3, [r7, #20]
 8004c70:	4a0c      	ldr	r2, [pc, #48]	@ (8004ca4 <TIM_OC5_SetConfig+0xa4>)
 8004c72:	4013      	ands	r3, r2
 8004c74:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	695b      	ldr	r3, [r3, #20]
 8004c7a:	021b      	lsls	r3, r3, #8
 8004c7c:	697a      	ldr	r2, [r7, #20]
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	697a      	ldr	r2, [r7, #20]
 8004c86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	68fa      	ldr	r2, [r7, #12]
 8004c8c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	685a      	ldr	r2, [r3, #4]
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	693a      	ldr	r2, [r7, #16]
 8004c9a:	621a      	str	r2, [r3, #32]
}
 8004c9c:	46c0      	nop			@ (mov r8, r8)
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	b006      	add	sp, #24
 8004ca2:	bd80      	pop	{r7, pc}
 8004ca4:	fffeffff 	.word	0xfffeffff
 8004ca8:	fffeff8f 	.word	0xfffeff8f
 8004cac:	fffdffff 	.word	0xfffdffff
 8004cb0:	40012c00 	.word	0x40012c00
 8004cb4:	40014000 	.word	0x40014000
 8004cb8:	40014400 	.word	0x40014400
 8004cbc:	40014800 	.word	0x40014800

08004cc0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b086      	sub	sp, #24
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
 8004cc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6a1b      	ldr	r3, [r3, #32]
 8004cce:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6a1b      	ldr	r3, [r3, #32]
 8004cd4:	4a24      	ldr	r2, [pc, #144]	@ (8004d68 <TIM_OC6_SetConfig+0xa8>)
 8004cd6:	401a      	ands	r2, r3
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	685b      	ldr	r3, [r3, #4]
 8004ce0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ce6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	4a20      	ldr	r2, [pc, #128]	@ (8004d6c <TIM_OC6_SetConfig+0xac>)
 8004cec:	4013      	ands	r3, r2
 8004cee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	021b      	lsls	r3, r3, #8
 8004cf6:	68fa      	ldr	r2, [r7, #12]
 8004cf8:	4313      	orrs	r3, r2
 8004cfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004cfc:	693b      	ldr	r3, [r7, #16]
 8004cfe:	4a1c      	ldr	r2, [pc, #112]	@ (8004d70 <TIM_OC6_SetConfig+0xb0>)
 8004d00:	4013      	ands	r3, r2
 8004d02:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	689b      	ldr	r3, [r3, #8]
 8004d08:	051b      	lsls	r3, r3, #20
 8004d0a:	693a      	ldr	r2, [r7, #16]
 8004d0c:	4313      	orrs	r3, r2
 8004d0e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	4a18      	ldr	r2, [pc, #96]	@ (8004d74 <TIM_OC6_SetConfig+0xb4>)
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d00b      	beq.n	8004d30 <TIM_OC6_SetConfig+0x70>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	4a17      	ldr	r2, [pc, #92]	@ (8004d78 <TIM_OC6_SetConfig+0xb8>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d007      	beq.n	8004d30 <TIM_OC6_SetConfig+0x70>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	4a16      	ldr	r2, [pc, #88]	@ (8004d7c <TIM_OC6_SetConfig+0xbc>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d003      	beq.n	8004d30 <TIM_OC6_SetConfig+0x70>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	4a15      	ldr	r2, [pc, #84]	@ (8004d80 <TIM_OC6_SetConfig+0xc0>)
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d109      	bne.n	8004d44 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004d30:	697b      	ldr	r3, [r7, #20]
 8004d32:	4a14      	ldr	r2, [pc, #80]	@ (8004d84 <TIM_OC6_SetConfig+0xc4>)
 8004d34:	4013      	ands	r3, r2
 8004d36:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	695b      	ldr	r3, [r3, #20]
 8004d3c:	029b      	lsls	r3, r3, #10
 8004d3e:	697a      	ldr	r2, [r7, #20]
 8004d40:	4313      	orrs	r3, r2
 8004d42:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	697a      	ldr	r2, [r7, #20]
 8004d48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	68fa      	ldr	r2, [r7, #12]
 8004d4e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	685a      	ldr	r2, [r3, #4]
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	693a      	ldr	r2, [r7, #16]
 8004d5c:	621a      	str	r2, [r3, #32]
}
 8004d5e:	46c0      	nop			@ (mov r8, r8)
 8004d60:	46bd      	mov	sp, r7
 8004d62:	b006      	add	sp, #24
 8004d64:	bd80      	pop	{r7, pc}
 8004d66:	46c0      	nop			@ (mov r8, r8)
 8004d68:	ffefffff 	.word	0xffefffff
 8004d6c:	feff8fff 	.word	0xfeff8fff
 8004d70:	ffdfffff 	.word	0xffdfffff
 8004d74:	40012c00 	.word	0x40012c00
 8004d78:	40014000 	.word	0x40014000
 8004d7c:	40014400 	.word	0x40014400
 8004d80:	40014800 	.word	0x40014800
 8004d84:	fffbffff 	.word	0xfffbffff

08004d88 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b086      	sub	sp, #24
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	60f8      	str	r0, [r7, #12]
 8004d90:	60b9      	str	r1, [r7, #8]
 8004d92:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	6a1b      	ldr	r3, [r3, #32]
 8004d98:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	6a1b      	ldr	r3, [r3, #32]
 8004d9e:	2201      	movs	r2, #1
 8004da0:	4393      	bics	r3, r2
 8004da2:	001a      	movs	r2, r3
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	699b      	ldr	r3, [r3, #24]
 8004dac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004dae:	693b      	ldr	r3, [r7, #16]
 8004db0:	22f0      	movs	r2, #240	@ 0xf0
 8004db2:	4393      	bics	r3, r2
 8004db4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	011b      	lsls	r3, r3, #4
 8004dba:	693a      	ldr	r2, [r7, #16]
 8004dbc:	4313      	orrs	r3, r2
 8004dbe:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004dc0:	697b      	ldr	r3, [r7, #20]
 8004dc2:	220a      	movs	r2, #10
 8004dc4:	4393      	bics	r3, r2
 8004dc6:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004dc8:	697a      	ldr	r2, [r7, #20]
 8004dca:	68bb      	ldr	r3, [r7, #8]
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	693a      	ldr	r2, [r7, #16]
 8004dd4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	697a      	ldr	r2, [r7, #20]
 8004dda:	621a      	str	r2, [r3, #32]
}
 8004ddc:	46c0      	nop			@ (mov r8, r8)
 8004dde:	46bd      	mov	sp, r7
 8004de0:	b006      	add	sp, #24
 8004de2:	bd80      	pop	{r7, pc}

08004de4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b086      	sub	sp, #24
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	60f8      	str	r0, [r7, #12]
 8004dec:	60b9      	str	r1, [r7, #8]
 8004dee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	6a1b      	ldr	r3, [r3, #32]
 8004df4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	6a1b      	ldr	r3, [r3, #32]
 8004dfa:	2210      	movs	r2, #16
 8004dfc:	4393      	bics	r3, r2
 8004dfe:	001a      	movs	r2, r3
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	699b      	ldr	r3, [r3, #24]
 8004e08:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004e0a:	693b      	ldr	r3, [r7, #16]
 8004e0c:	4a0d      	ldr	r2, [pc, #52]	@ (8004e44 <TIM_TI2_ConfigInputStage+0x60>)
 8004e0e:	4013      	ands	r3, r2
 8004e10:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	031b      	lsls	r3, r3, #12
 8004e16:	693a      	ldr	r2, [r7, #16]
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004e1c:	697b      	ldr	r3, [r7, #20]
 8004e1e:	22a0      	movs	r2, #160	@ 0xa0
 8004e20:	4393      	bics	r3, r2
 8004e22:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004e24:	68bb      	ldr	r3, [r7, #8]
 8004e26:	011b      	lsls	r3, r3, #4
 8004e28:	697a      	ldr	r2, [r7, #20]
 8004e2a:	4313      	orrs	r3, r2
 8004e2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	693a      	ldr	r2, [r7, #16]
 8004e32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	697a      	ldr	r2, [r7, #20]
 8004e38:	621a      	str	r2, [r3, #32]
}
 8004e3a:	46c0      	nop			@ (mov r8, r8)
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	b006      	add	sp, #24
 8004e40:	bd80      	pop	{r7, pc}
 8004e42:	46c0      	nop			@ (mov r8, r8)
 8004e44:	ffff0fff 	.word	0xffff0fff

08004e48 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b084      	sub	sp, #16
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
 8004e50:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	689b      	ldr	r3, [r3, #8]
 8004e56:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	4a08      	ldr	r2, [pc, #32]	@ (8004e7c <TIM_ITRx_SetConfig+0x34>)
 8004e5c:	4013      	ands	r3, r2
 8004e5e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004e60:	683a      	ldr	r2, [r7, #0]
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	4313      	orrs	r3, r2
 8004e66:	2207      	movs	r2, #7
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	68fa      	ldr	r2, [r7, #12]
 8004e70:	609a      	str	r2, [r3, #8]
}
 8004e72:	46c0      	nop			@ (mov r8, r8)
 8004e74:	46bd      	mov	sp, r7
 8004e76:	b004      	add	sp, #16
 8004e78:	bd80      	pop	{r7, pc}
 8004e7a:	46c0      	nop			@ (mov r8, r8)
 8004e7c:	ffcfff8f 	.word	0xffcfff8f

08004e80 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b086      	sub	sp, #24
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	60f8      	str	r0, [r7, #12]
 8004e88:	60b9      	str	r1, [r7, #8]
 8004e8a:	607a      	str	r2, [r7, #4]
 8004e8c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	689b      	ldr	r3, [r3, #8]
 8004e92:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e94:	697b      	ldr	r3, [r7, #20]
 8004e96:	4a09      	ldr	r2, [pc, #36]	@ (8004ebc <TIM_ETR_SetConfig+0x3c>)
 8004e98:	4013      	ands	r3, r2
 8004e9a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	021a      	lsls	r2, r3, #8
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	431a      	orrs	r2, r3
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	4313      	orrs	r3, r2
 8004ea8:	697a      	ldr	r2, [r7, #20]
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	697a      	ldr	r2, [r7, #20]
 8004eb2:	609a      	str	r2, [r3, #8]
}
 8004eb4:	46c0      	nop			@ (mov r8, r8)
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	b006      	add	sp, #24
 8004eba:	bd80      	pop	{r7, pc}
 8004ebc:	ffff00ff 	.word	0xffff00ff

08004ec0 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b084      	sub	sp, #16
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
 8004ec8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d108      	bne.n	8004ee2 <HAL_TIMEx_PWMN_Start+0x22>
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2244      	movs	r2, #68	@ 0x44
 8004ed4:	5c9b      	ldrb	r3, [r3, r2]
 8004ed6:	b2db      	uxtb	r3, r3
 8004ed8:	3b01      	subs	r3, #1
 8004eda:	1e5a      	subs	r2, r3, #1
 8004edc:	4193      	sbcs	r3, r2
 8004ede:	b2db      	uxtb	r3, r3
 8004ee0:	e01f      	b.n	8004f22 <HAL_TIMEx_PWMN_Start+0x62>
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	2b04      	cmp	r3, #4
 8004ee6:	d108      	bne.n	8004efa <HAL_TIMEx_PWMN_Start+0x3a>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2245      	movs	r2, #69	@ 0x45
 8004eec:	5c9b      	ldrb	r3, [r3, r2]
 8004eee:	b2db      	uxtb	r3, r3
 8004ef0:	3b01      	subs	r3, #1
 8004ef2:	1e5a      	subs	r2, r3, #1
 8004ef4:	4193      	sbcs	r3, r2
 8004ef6:	b2db      	uxtb	r3, r3
 8004ef8:	e013      	b.n	8004f22 <HAL_TIMEx_PWMN_Start+0x62>
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	2b08      	cmp	r3, #8
 8004efe:	d108      	bne.n	8004f12 <HAL_TIMEx_PWMN_Start+0x52>
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2246      	movs	r2, #70	@ 0x46
 8004f04:	5c9b      	ldrb	r3, [r3, r2]
 8004f06:	b2db      	uxtb	r3, r3
 8004f08:	3b01      	subs	r3, #1
 8004f0a:	1e5a      	subs	r2, r3, #1
 8004f0c:	4193      	sbcs	r3, r2
 8004f0e:	b2db      	uxtb	r3, r3
 8004f10:	e007      	b.n	8004f22 <HAL_TIMEx_PWMN_Start+0x62>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2247      	movs	r2, #71	@ 0x47
 8004f16:	5c9b      	ldrb	r3, [r3, r2]
 8004f18:	b2db      	uxtb	r3, r3
 8004f1a:	3b01      	subs	r3, #1
 8004f1c:	1e5a      	subs	r2, r3, #1
 8004f1e:	4193      	sbcs	r3, r2
 8004f20:	b2db      	uxtb	r3, r3
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d001      	beq.n	8004f2a <HAL_TIMEx_PWMN_Start+0x6a>
  {
    return HAL_ERROR;
 8004f26:	2301      	movs	r3, #1
 8004f28:	e05c      	b.n	8004fe4 <HAL_TIMEx_PWMN_Start+0x124>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d104      	bne.n	8004f3a <HAL_TIMEx_PWMN_Start+0x7a>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2244      	movs	r2, #68	@ 0x44
 8004f34:	2102      	movs	r1, #2
 8004f36:	5499      	strb	r1, [r3, r2]
 8004f38:	e013      	b.n	8004f62 <HAL_TIMEx_PWMN_Start+0xa2>
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	2b04      	cmp	r3, #4
 8004f3e:	d104      	bne.n	8004f4a <HAL_TIMEx_PWMN_Start+0x8a>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2245      	movs	r2, #69	@ 0x45
 8004f44:	2102      	movs	r1, #2
 8004f46:	5499      	strb	r1, [r3, r2]
 8004f48:	e00b      	b.n	8004f62 <HAL_TIMEx_PWMN_Start+0xa2>
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	2b08      	cmp	r3, #8
 8004f4e:	d104      	bne.n	8004f5a <HAL_TIMEx_PWMN_Start+0x9a>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2246      	movs	r2, #70	@ 0x46
 8004f54:	2102      	movs	r1, #2
 8004f56:	5499      	strb	r1, [r3, r2]
 8004f58:	e003      	b.n	8004f62 <HAL_TIMEx_PWMN_Start+0xa2>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2247      	movs	r2, #71	@ 0x47
 8004f5e:	2102      	movs	r1, #2
 8004f60:	5499      	strb	r1, [r3, r2]

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	6839      	ldr	r1, [r7, #0]
 8004f68:	2204      	movs	r2, #4
 8004f6a:	0018      	movs	r0, r3
 8004f6c:	f000 f9a6 	bl	80052bc <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	2180      	movs	r1, #128	@ 0x80
 8004f7c:	0209      	lsls	r1, r1, #8
 8004f7e:	430a      	orrs	r2, r1
 8004f80:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4a19      	ldr	r2, [pc, #100]	@ (8004fec <HAL_TIMEx_PWMN_Start+0x12c>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d009      	beq.n	8004fa0 <HAL_TIMEx_PWMN_Start+0xe0>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	4a17      	ldr	r2, [pc, #92]	@ (8004ff0 <HAL_TIMEx_PWMN_Start+0x130>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d004      	beq.n	8004fa0 <HAL_TIMEx_PWMN_Start+0xe0>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	4a16      	ldr	r2, [pc, #88]	@ (8004ff4 <HAL_TIMEx_PWMN_Start+0x134>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d116      	bne.n	8004fce <HAL_TIMEx_PWMN_Start+0x10e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	689b      	ldr	r3, [r3, #8]
 8004fa6:	4a14      	ldr	r2, [pc, #80]	@ (8004ff8 <HAL_TIMEx_PWMN_Start+0x138>)
 8004fa8:	4013      	ands	r3, r2
 8004faa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	2b06      	cmp	r3, #6
 8004fb0:	d016      	beq.n	8004fe0 <HAL_TIMEx_PWMN_Start+0x120>
 8004fb2:	68fa      	ldr	r2, [r7, #12]
 8004fb4:	2380      	movs	r3, #128	@ 0x80
 8004fb6:	025b      	lsls	r3, r3, #9
 8004fb8:	429a      	cmp	r2, r3
 8004fba:	d011      	beq.n	8004fe0 <HAL_TIMEx_PWMN_Start+0x120>
    {
      __HAL_TIM_ENABLE(htim);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	681a      	ldr	r2, [r3, #0]
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	2101      	movs	r1, #1
 8004fc8:	430a      	orrs	r2, r1
 8004fca:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fcc:	e008      	b.n	8004fe0 <HAL_TIMEx_PWMN_Start+0x120>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	681a      	ldr	r2, [r3, #0]
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	2101      	movs	r1, #1
 8004fda:	430a      	orrs	r2, r1
 8004fdc:	601a      	str	r2, [r3, #0]
 8004fde:	e000      	b.n	8004fe2 <HAL_TIMEx_PWMN_Start+0x122>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fe0:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8004fe2:	2300      	movs	r3, #0
}
 8004fe4:	0018      	movs	r0, r3
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	b004      	add	sp, #16
 8004fea:	bd80      	pop	{r7, pc}
 8004fec:	40012c00 	.word	0x40012c00
 8004ff0:	40000400 	.word	0x40000400
 8004ff4:	40014000 	.word	0x40014000
 8004ff8:	00010007 	.word	0x00010007

08004ffc <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b082      	sub	sp, #8
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
 8005004:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	6839      	ldr	r1, [r7, #0]
 800500c:	2200      	movs	r2, #0
 800500e:	0018      	movs	r0, r3
 8005010:	f000 f954 	bl	80052bc <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	6a1b      	ldr	r3, [r3, #32]
 800501a:	4a23      	ldr	r2, [pc, #140]	@ (80050a8 <HAL_TIMEx_PWMN_Stop+0xac>)
 800501c:	4013      	ands	r3, r2
 800501e:	d10d      	bne.n	800503c <HAL_TIMEx_PWMN_Stop+0x40>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	6a1b      	ldr	r3, [r3, #32]
 8005026:	4a21      	ldr	r2, [pc, #132]	@ (80050ac <HAL_TIMEx_PWMN_Stop+0xb0>)
 8005028:	4013      	ands	r3, r2
 800502a:	d107      	bne.n	800503c <HAL_TIMEx_PWMN_Stop+0x40>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	491e      	ldr	r1, [pc, #120]	@ (80050b0 <HAL_TIMEx_PWMN_Stop+0xb4>)
 8005038:	400a      	ands	r2, r1
 800503a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	6a1b      	ldr	r3, [r3, #32]
 8005042:	4a19      	ldr	r2, [pc, #100]	@ (80050a8 <HAL_TIMEx_PWMN_Stop+0xac>)
 8005044:	4013      	ands	r3, r2
 8005046:	d10d      	bne.n	8005064 <HAL_TIMEx_PWMN_Stop+0x68>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	6a1b      	ldr	r3, [r3, #32]
 800504e:	4a17      	ldr	r2, [pc, #92]	@ (80050ac <HAL_TIMEx_PWMN_Stop+0xb0>)
 8005050:	4013      	ands	r3, r2
 8005052:	d107      	bne.n	8005064 <HAL_TIMEx_PWMN_Stop+0x68>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	681a      	ldr	r2, [r3, #0]
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	2101      	movs	r1, #1
 8005060:	438a      	bics	r2, r1
 8005062:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d104      	bne.n	8005074 <HAL_TIMEx_PWMN_Stop+0x78>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2244      	movs	r2, #68	@ 0x44
 800506e:	2101      	movs	r1, #1
 8005070:	5499      	strb	r1, [r3, r2]
 8005072:	e013      	b.n	800509c <HAL_TIMEx_PWMN_Stop+0xa0>
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	2b04      	cmp	r3, #4
 8005078:	d104      	bne.n	8005084 <HAL_TIMEx_PWMN_Stop+0x88>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2245      	movs	r2, #69	@ 0x45
 800507e:	2101      	movs	r1, #1
 8005080:	5499      	strb	r1, [r3, r2]
 8005082:	e00b      	b.n	800509c <HAL_TIMEx_PWMN_Stop+0xa0>
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	2b08      	cmp	r3, #8
 8005088:	d104      	bne.n	8005094 <HAL_TIMEx_PWMN_Stop+0x98>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2246      	movs	r2, #70	@ 0x46
 800508e:	2101      	movs	r1, #1
 8005090:	5499      	strb	r1, [r3, r2]
 8005092:	e003      	b.n	800509c <HAL_TIMEx_PWMN_Stop+0xa0>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2247      	movs	r2, #71	@ 0x47
 8005098:	2101      	movs	r1, #1
 800509a:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800509c:	2300      	movs	r3, #0
}
 800509e:	0018      	movs	r0, r3
 80050a0:	46bd      	mov	sp, r7
 80050a2:	b002      	add	sp, #8
 80050a4:	bd80      	pop	{r7, pc}
 80050a6:	46c0      	nop			@ (mov r8, r8)
 80050a8:	00001111 	.word	0x00001111
 80050ac:	00000444 	.word	0x00000444
 80050b0:	ffff7fff 	.word	0xffff7fff

080050b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b084      	sub	sp, #16
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
 80050bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	223c      	movs	r2, #60	@ 0x3c
 80050c2:	5c9b      	ldrb	r3, [r3, r2]
 80050c4:	2b01      	cmp	r3, #1
 80050c6:	d101      	bne.n	80050cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80050c8:	2302      	movs	r3, #2
 80050ca:	e04f      	b.n	800516c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	223c      	movs	r2, #60	@ 0x3c
 80050d0:	2101      	movs	r1, #1
 80050d2:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	223d      	movs	r2, #61	@ 0x3d
 80050d8:	2102      	movs	r1, #2
 80050da:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	685b      	ldr	r3, [r3, #4]
 80050e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	689b      	ldr	r3, [r3, #8]
 80050ea:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4a20      	ldr	r2, [pc, #128]	@ (8005174 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d108      	bne.n	8005108 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	4a1f      	ldr	r2, [pc, #124]	@ (8005178 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80050fa:	4013      	ands	r3, r2
 80050fc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	685b      	ldr	r3, [r3, #4]
 8005102:	68fa      	ldr	r2, [r7, #12]
 8005104:	4313      	orrs	r3, r2
 8005106:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	2270      	movs	r2, #112	@ 0x70
 800510c:	4393      	bics	r3, r2
 800510e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	68fa      	ldr	r2, [r7, #12]
 8005116:	4313      	orrs	r3, r2
 8005118:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	68fa      	ldr	r2, [r7, #12]
 8005120:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	4a13      	ldr	r2, [pc, #76]	@ (8005174 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8005128:	4293      	cmp	r3, r2
 800512a:	d009      	beq.n	8005140 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4a12      	ldr	r2, [pc, #72]	@ (800517c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d004      	beq.n	8005140 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4a11      	ldr	r2, [pc, #68]	@ (8005180 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d10c      	bne.n	800515a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005140:	68bb      	ldr	r3, [r7, #8]
 8005142:	2280      	movs	r2, #128	@ 0x80
 8005144:	4393      	bics	r3, r2
 8005146:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	689b      	ldr	r3, [r3, #8]
 800514c:	68ba      	ldr	r2, [r7, #8]
 800514e:	4313      	orrs	r3, r2
 8005150:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	68ba      	ldr	r2, [r7, #8]
 8005158:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	223d      	movs	r2, #61	@ 0x3d
 800515e:	2101      	movs	r1, #1
 8005160:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	223c      	movs	r2, #60	@ 0x3c
 8005166:	2100      	movs	r1, #0
 8005168:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800516a:	2300      	movs	r3, #0
}
 800516c:	0018      	movs	r0, r3
 800516e:	46bd      	mov	sp, r7
 8005170:	b004      	add	sp, #16
 8005172:	bd80      	pop	{r7, pc}
 8005174:	40012c00 	.word	0x40012c00
 8005178:	ff0fffff 	.word	0xff0fffff
 800517c:	40000400 	.word	0x40000400
 8005180:	40014000 	.word	0x40014000

08005184 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b084      	sub	sp, #16
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
 800518c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800518e:	2300      	movs	r3, #0
 8005190:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	223c      	movs	r2, #60	@ 0x3c
 8005196:	5c9b      	ldrb	r3, [r3, r2]
 8005198:	2b01      	cmp	r3, #1
 800519a:	d101      	bne.n	80051a0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800519c:	2302      	movs	r3, #2
 800519e:	e06f      	b.n	8005280 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	223c      	movs	r2, #60	@ 0x3c
 80051a4:	2101      	movs	r1, #1
 80051a6:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	22ff      	movs	r2, #255	@ 0xff
 80051ac:	4393      	bics	r3, r2
 80051ae:	001a      	movs	r2, r3
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	68db      	ldr	r3, [r3, #12]
 80051b4:	4313      	orrs	r3, r2
 80051b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	4a33      	ldr	r2, [pc, #204]	@ (8005288 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 80051bc:	401a      	ands	r2, r3
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	689b      	ldr	r3, [r3, #8]
 80051c2:	4313      	orrs	r3, r2
 80051c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	4a30      	ldr	r2, [pc, #192]	@ (800528c <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 80051ca:	401a      	ands	r2, r3
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	685b      	ldr	r3, [r3, #4]
 80051d0:	4313      	orrs	r3, r2
 80051d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	4a2e      	ldr	r2, [pc, #184]	@ (8005290 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>)
 80051d8:	401a      	ands	r2, r3
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	4313      	orrs	r3, r2
 80051e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	4a2b      	ldr	r2, [pc, #172]	@ (8005294 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 80051e6:	401a      	ands	r2, r3
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	691b      	ldr	r3, [r3, #16]
 80051ec:	4313      	orrs	r3, r2
 80051ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	4a29      	ldr	r2, [pc, #164]	@ (8005298 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 80051f4:	401a      	ands	r2, r3
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	695b      	ldr	r3, [r3, #20]
 80051fa:	4313      	orrs	r3, r2
 80051fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	4a26      	ldr	r2, [pc, #152]	@ (800529c <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8005202:	401a      	ands	r2, r3
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005208:	4313      	orrs	r3, r2
 800520a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	4a24      	ldr	r2, [pc, #144]	@ (80052a0 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8005210:	401a      	ands	r2, r3
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	699b      	ldr	r3, [r3, #24]
 8005216:	041b      	lsls	r3, r3, #16
 8005218:	4313      	orrs	r3, r2
 800521a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	4a21      	ldr	r2, [pc, #132]	@ (80052a4 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8005220:	401a      	ands	r2, r3
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	69db      	ldr	r3, [r3, #28]
 8005226:	4313      	orrs	r3, r2
 8005228:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	4a1e      	ldr	r2, [pc, #120]	@ (80052a8 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d11c      	bne.n	800526e <HAL_TIMEx_ConfigBreakDeadTime+0xea>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	4a1d      	ldr	r2, [pc, #116]	@ (80052ac <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8005238:	401a      	ands	r2, r3
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800523e:	051b      	lsls	r3, r3, #20
 8005240:	4313      	orrs	r3, r2
 8005242:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	4a1a      	ldr	r2, [pc, #104]	@ (80052b0 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8005248:	401a      	ands	r2, r3
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	6a1b      	ldr	r3, [r3, #32]
 800524e:	4313      	orrs	r3, r2
 8005250:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	4a17      	ldr	r2, [pc, #92]	@ (80052b4 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8005256:	401a      	ands	r2, r3
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800525c:	4313      	orrs	r3, r2
 800525e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	4a15      	ldr	r2, [pc, #84]	@ (80052b8 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8005264:	401a      	ands	r2, r3
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800526a:	4313      	orrs	r3, r2
 800526c:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	68fa      	ldr	r2, [r7, #12]
 8005274:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	223c      	movs	r2, #60	@ 0x3c
 800527a:	2100      	movs	r1, #0
 800527c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800527e:	2300      	movs	r3, #0
}
 8005280:	0018      	movs	r0, r3
 8005282:	46bd      	mov	sp, r7
 8005284:	b004      	add	sp, #16
 8005286:	bd80      	pop	{r7, pc}
 8005288:	fffffcff 	.word	0xfffffcff
 800528c:	fffffbff 	.word	0xfffffbff
 8005290:	fffff7ff 	.word	0xfffff7ff
 8005294:	ffffefff 	.word	0xffffefff
 8005298:	ffffdfff 	.word	0xffffdfff
 800529c:	ffffbfff 	.word	0xffffbfff
 80052a0:	fff0ffff 	.word	0xfff0ffff
 80052a4:	efffffff 	.word	0xefffffff
 80052a8:	40012c00 	.word	0x40012c00
 80052ac:	ff0fffff 	.word	0xff0fffff
 80052b0:	feffffff 	.word	0xfeffffff
 80052b4:	fdffffff 	.word	0xfdffffff
 80052b8:	dfffffff 	.word	0xdfffffff

080052bc <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b086      	sub	sp, #24
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	60f8      	str	r0, [r7, #12]
 80052c4:	60b9      	str	r1, [r7, #8]
 80052c6:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 80052c8:	68bb      	ldr	r3, [r7, #8]
 80052ca:	220f      	movs	r2, #15
 80052cc:	4013      	ands	r3, r2
 80052ce:	2204      	movs	r2, #4
 80052d0:	409a      	lsls	r2, r3
 80052d2:	0013      	movs	r3, r2
 80052d4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	6a1b      	ldr	r3, [r3, #32]
 80052da:	697a      	ldr	r2, [r7, #20]
 80052dc:	43d2      	mvns	r2, r2
 80052de:	401a      	ands	r2, r3
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	6a1a      	ldr	r2, [r3, #32]
 80052e8:	68bb      	ldr	r3, [r7, #8]
 80052ea:	210f      	movs	r1, #15
 80052ec:	400b      	ands	r3, r1
 80052ee:	6879      	ldr	r1, [r7, #4]
 80052f0:	4099      	lsls	r1, r3
 80052f2:	000b      	movs	r3, r1
 80052f4:	431a      	orrs	r2, r3
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	621a      	str	r2, [r3, #32]
}
 80052fa:	46c0      	nop			@ (mov r8, r8)
 80052fc:	46bd      	mov	sp, r7
 80052fe:	b006      	add	sp, #24
 8005300:	bd80      	pop	{r7, pc}
	...

08005304 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005304:	b580      	push	{r7, lr}
 8005306:	b082      	sub	sp, #8
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d101      	bne.n	8005316 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005312:	2301      	movs	r3, #1
 8005314:	e046      	b.n	80053a4 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2288      	movs	r2, #136	@ 0x88
 800531a:	589b      	ldr	r3, [r3, r2]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d107      	bne.n	8005330 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2284      	movs	r2, #132	@ 0x84
 8005324:	2100      	movs	r1, #0
 8005326:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	0018      	movs	r0, r3
 800532c:	f7fc fd18 	bl	8001d60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2288      	movs	r2, #136	@ 0x88
 8005334:	2124      	movs	r1, #36	@ 0x24
 8005336:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	681a      	ldr	r2, [r3, #0]
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	2101      	movs	r1, #1
 8005344:	438a      	bics	r2, r1
 8005346:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800534c:	2b00      	cmp	r3, #0
 800534e:	d003      	beq.n	8005358 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	0018      	movs	r0, r3
 8005354:	f000 fd12 	bl	8005d7c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	0018      	movs	r0, r3
 800535c:	f000 fb6a 	bl	8005a34 <UART_SetConfig>
 8005360:	0003      	movs	r3, r0
 8005362:	2b01      	cmp	r3, #1
 8005364:	d101      	bne.n	800536a <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8005366:	2301      	movs	r3, #1
 8005368:	e01c      	b.n	80053a4 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	685a      	ldr	r2, [r3, #4]
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	490d      	ldr	r1, [pc, #52]	@ (80053ac <HAL_UART_Init+0xa8>)
 8005376:	400a      	ands	r2, r1
 8005378:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	689a      	ldr	r2, [r3, #8]
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	212a      	movs	r1, #42	@ 0x2a
 8005386:	438a      	bics	r2, r1
 8005388:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	681a      	ldr	r2, [r3, #0]
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	2101      	movs	r1, #1
 8005396:	430a      	orrs	r2, r1
 8005398:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	0018      	movs	r0, r3
 800539e:	f000 fda1 	bl	8005ee4 <UART_CheckIdleState>
 80053a2:	0003      	movs	r3, r0
}
 80053a4:	0018      	movs	r0, r3
 80053a6:	46bd      	mov	sp, r7
 80053a8:	b002      	add	sp, #8
 80053aa:	bd80      	pop	{r7, pc}
 80053ac:	ffffb7ff 	.word	0xffffb7ff

080053b0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80053b0:	b5b0      	push	{r4, r5, r7, lr}
 80053b2:	b0aa      	sub	sp, #168	@ 0xa8
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	69db      	ldr	r3, [r3, #28]
 80053be:	22a4      	movs	r2, #164	@ 0xa4
 80053c0:	18b9      	adds	r1, r7, r2
 80053c2:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	20a0      	movs	r0, #160	@ 0xa0
 80053cc:	1839      	adds	r1, r7, r0
 80053ce:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	689b      	ldr	r3, [r3, #8]
 80053d6:	249c      	movs	r4, #156	@ 0x9c
 80053d8:	1939      	adds	r1, r7, r4
 80053da:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80053dc:	0011      	movs	r1, r2
 80053de:	18bb      	adds	r3, r7, r2
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	4aa2      	ldr	r2, [pc, #648]	@ (800566c <HAL_UART_IRQHandler+0x2bc>)
 80053e4:	4013      	ands	r3, r2
 80053e6:	2298      	movs	r2, #152	@ 0x98
 80053e8:	18bd      	adds	r5, r7, r2
 80053ea:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 80053ec:	18bb      	adds	r3, r7, r2
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d11a      	bne.n	800542a <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80053f4:	187b      	adds	r3, r7, r1
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	2220      	movs	r2, #32
 80053fa:	4013      	ands	r3, r2
 80053fc:	d015      	beq.n	800542a <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80053fe:	183b      	adds	r3, r7, r0
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	2220      	movs	r2, #32
 8005404:	4013      	ands	r3, r2
 8005406:	d105      	bne.n	8005414 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005408:	193b      	adds	r3, r7, r4
 800540a:	681a      	ldr	r2, [r3, #0]
 800540c:	2380      	movs	r3, #128	@ 0x80
 800540e:	055b      	lsls	r3, r3, #21
 8005410:	4013      	ands	r3, r2
 8005412:	d00a      	beq.n	800542a <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005418:	2b00      	cmp	r3, #0
 800541a:	d100      	bne.n	800541e <HAL_UART_IRQHandler+0x6e>
 800541c:	e2dc      	b.n	80059d8 <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005422:	687a      	ldr	r2, [r7, #4]
 8005424:	0010      	movs	r0, r2
 8005426:	4798      	blx	r3
      }
      return;
 8005428:	e2d6      	b.n	80059d8 <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800542a:	2398      	movs	r3, #152	@ 0x98
 800542c:	18fb      	adds	r3, r7, r3
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d100      	bne.n	8005436 <HAL_UART_IRQHandler+0x86>
 8005434:	e122      	b.n	800567c <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005436:	239c      	movs	r3, #156	@ 0x9c
 8005438:	18fb      	adds	r3, r7, r3
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	4a8c      	ldr	r2, [pc, #560]	@ (8005670 <HAL_UART_IRQHandler+0x2c0>)
 800543e:	4013      	ands	r3, r2
 8005440:	d106      	bne.n	8005450 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005442:	23a0      	movs	r3, #160	@ 0xa0
 8005444:	18fb      	adds	r3, r7, r3
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	4a8a      	ldr	r2, [pc, #552]	@ (8005674 <HAL_UART_IRQHandler+0x2c4>)
 800544a:	4013      	ands	r3, r2
 800544c:	d100      	bne.n	8005450 <HAL_UART_IRQHandler+0xa0>
 800544e:	e115      	b.n	800567c <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005450:	23a4      	movs	r3, #164	@ 0xa4
 8005452:	18fb      	adds	r3, r7, r3
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	2201      	movs	r2, #1
 8005458:	4013      	ands	r3, r2
 800545a:	d012      	beq.n	8005482 <HAL_UART_IRQHandler+0xd2>
 800545c:	23a0      	movs	r3, #160	@ 0xa0
 800545e:	18fb      	adds	r3, r7, r3
 8005460:	681a      	ldr	r2, [r3, #0]
 8005462:	2380      	movs	r3, #128	@ 0x80
 8005464:	005b      	lsls	r3, r3, #1
 8005466:	4013      	ands	r3, r2
 8005468:	d00b      	beq.n	8005482 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	2201      	movs	r2, #1
 8005470:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2290      	movs	r2, #144	@ 0x90
 8005476:	589b      	ldr	r3, [r3, r2]
 8005478:	2201      	movs	r2, #1
 800547a:	431a      	orrs	r2, r3
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2190      	movs	r1, #144	@ 0x90
 8005480:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005482:	23a4      	movs	r3, #164	@ 0xa4
 8005484:	18fb      	adds	r3, r7, r3
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	2202      	movs	r2, #2
 800548a:	4013      	ands	r3, r2
 800548c:	d011      	beq.n	80054b2 <HAL_UART_IRQHandler+0x102>
 800548e:	239c      	movs	r3, #156	@ 0x9c
 8005490:	18fb      	adds	r3, r7, r3
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	2201      	movs	r2, #1
 8005496:	4013      	ands	r3, r2
 8005498:	d00b      	beq.n	80054b2 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	2202      	movs	r2, #2
 80054a0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	2290      	movs	r2, #144	@ 0x90
 80054a6:	589b      	ldr	r3, [r3, r2]
 80054a8:	2204      	movs	r2, #4
 80054aa:	431a      	orrs	r2, r3
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2190      	movs	r1, #144	@ 0x90
 80054b0:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80054b2:	23a4      	movs	r3, #164	@ 0xa4
 80054b4:	18fb      	adds	r3, r7, r3
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	2204      	movs	r2, #4
 80054ba:	4013      	ands	r3, r2
 80054bc:	d011      	beq.n	80054e2 <HAL_UART_IRQHandler+0x132>
 80054be:	239c      	movs	r3, #156	@ 0x9c
 80054c0:	18fb      	adds	r3, r7, r3
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	2201      	movs	r2, #1
 80054c6:	4013      	ands	r3, r2
 80054c8:	d00b      	beq.n	80054e2 <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	2204      	movs	r2, #4
 80054d0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2290      	movs	r2, #144	@ 0x90
 80054d6:	589b      	ldr	r3, [r3, r2]
 80054d8:	2202      	movs	r2, #2
 80054da:	431a      	orrs	r2, r3
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2190      	movs	r1, #144	@ 0x90
 80054e0:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80054e2:	23a4      	movs	r3, #164	@ 0xa4
 80054e4:	18fb      	adds	r3, r7, r3
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	2208      	movs	r2, #8
 80054ea:	4013      	ands	r3, r2
 80054ec:	d017      	beq.n	800551e <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80054ee:	23a0      	movs	r3, #160	@ 0xa0
 80054f0:	18fb      	adds	r3, r7, r3
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	2220      	movs	r2, #32
 80054f6:	4013      	ands	r3, r2
 80054f8:	d105      	bne.n	8005506 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80054fa:	239c      	movs	r3, #156	@ 0x9c
 80054fc:	18fb      	adds	r3, r7, r3
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	4a5b      	ldr	r2, [pc, #364]	@ (8005670 <HAL_UART_IRQHandler+0x2c0>)
 8005502:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005504:	d00b      	beq.n	800551e <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	2208      	movs	r2, #8
 800550c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2290      	movs	r2, #144	@ 0x90
 8005512:	589b      	ldr	r3, [r3, r2]
 8005514:	2208      	movs	r2, #8
 8005516:	431a      	orrs	r2, r3
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2190      	movs	r1, #144	@ 0x90
 800551c:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800551e:	23a4      	movs	r3, #164	@ 0xa4
 8005520:	18fb      	adds	r3, r7, r3
 8005522:	681a      	ldr	r2, [r3, #0]
 8005524:	2380      	movs	r3, #128	@ 0x80
 8005526:	011b      	lsls	r3, r3, #4
 8005528:	4013      	ands	r3, r2
 800552a:	d013      	beq.n	8005554 <HAL_UART_IRQHandler+0x1a4>
 800552c:	23a0      	movs	r3, #160	@ 0xa0
 800552e:	18fb      	adds	r3, r7, r3
 8005530:	681a      	ldr	r2, [r3, #0]
 8005532:	2380      	movs	r3, #128	@ 0x80
 8005534:	04db      	lsls	r3, r3, #19
 8005536:	4013      	ands	r3, r2
 8005538:	d00c      	beq.n	8005554 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	2280      	movs	r2, #128	@ 0x80
 8005540:	0112      	lsls	r2, r2, #4
 8005542:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2290      	movs	r2, #144	@ 0x90
 8005548:	589b      	ldr	r3, [r3, r2]
 800554a:	2220      	movs	r2, #32
 800554c:	431a      	orrs	r2, r3
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2190      	movs	r1, #144	@ 0x90
 8005552:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2290      	movs	r2, #144	@ 0x90
 8005558:	589b      	ldr	r3, [r3, r2]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d100      	bne.n	8005560 <HAL_UART_IRQHandler+0x1b0>
 800555e:	e23d      	b.n	80059dc <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005560:	23a4      	movs	r3, #164	@ 0xa4
 8005562:	18fb      	adds	r3, r7, r3
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	2220      	movs	r2, #32
 8005568:	4013      	ands	r3, r2
 800556a:	d015      	beq.n	8005598 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800556c:	23a0      	movs	r3, #160	@ 0xa0
 800556e:	18fb      	adds	r3, r7, r3
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	2220      	movs	r2, #32
 8005574:	4013      	ands	r3, r2
 8005576:	d106      	bne.n	8005586 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005578:	239c      	movs	r3, #156	@ 0x9c
 800557a:	18fb      	adds	r3, r7, r3
 800557c:	681a      	ldr	r2, [r3, #0]
 800557e:	2380      	movs	r3, #128	@ 0x80
 8005580:	055b      	lsls	r3, r3, #21
 8005582:	4013      	ands	r3, r2
 8005584:	d008      	beq.n	8005598 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800558a:	2b00      	cmp	r3, #0
 800558c:	d004      	beq.n	8005598 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005592:	687a      	ldr	r2, [r7, #4]
 8005594:	0010      	movs	r0, r2
 8005596:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2290      	movs	r2, #144	@ 0x90
 800559c:	589b      	ldr	r3, [r3, r2]
 800559e:	2194      	movs	r1, #148	@ 0x94
 80055a0:	187a      	adds	r2, r7, r1
 80055a2:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	689b      	ldr	r3, [r3, #8]
 80055aa:	2240      	movs	r2, #64	@ 0x40
 80055ac:	4013      	ands	r3, r2
 80055ae:	2b40      	cmp	r3, #64	@ 0x40
 80055b0:	d004      	beq.n	80055bc <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80055b2:	187b      	adds	r3, r7, r1
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	2228      	movs	r2, #40	@ 0x28
 80055b8:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80055ba:	d04c      	beq.n	8005656 <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	0018      	movs	r0, r3
 80055c0:	f000 fdaa 	bl	8006118 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	689b      	ldr	r3, [r3, #8]
 80055ca:	2240      	movs	r2, #64	@ 0x40
 80055cc:	4013      	ands	r3, r2
 80055ce:	2b40      	cmp	r3, #64	@ 0x40
 80055d0:	d13c      	bne.n	800564c <HAL_UART_IRQHandler+0x29c>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80055d2:	f3ef 8310 	mrs	r3, PRIMASK
 80055d6:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 80055d8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80055da:	2090      	movs	r0, #144	@ 0x90
 80055dc:	183a      	adds	r2, r7, r0
 80055de:	6013      	str	r3, [r2, #0]
 80055e0:	2301      	movs	r3, #1
 80055e2:	667b      	str	r3, [r7, #100]	@ 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055e4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80055e6:	f383 8810 	msr	PRIMASK, r3
}
 80055ea:	46c0      	nop			@ (mov r8, r8)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	689a      	ldr	r2, [r3, #8]
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	2140      	movs	r1, #64	@ 0x40
 80055f8:	438a      	bics	r2, r1
 80055fa:	609a      	str	r2, [r3, #8]
 80055fc:	183b      	adds	r3, r7, r0
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005602:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005604:	f383 8810 	msr	PRIMASK, r3
}
 8005608:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2280      	movs	r2, #128	@ 0x80
 800560e:	589b      	ldr	r3, [r3, r2]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d016      	beq.n	8005642 <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2280      	movs	r2, #128	@ 0x80
 8005618:	589b      	ldr	r3, [r3, r2]
 800561a:	4a17      	ldr	r2, [pc, #92]	@ (8005678 <HAL_UART_IRQHandler+0x2c8>)
 800561c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2280      	movs	r2, #128	@ 0x80
 8005622:	589b      	ldr	r3, [r3, r2]
 8005624:	0018      	movs	r0, r3
 8005626:	f7fd fc13 	bl	8002e50 <HAL_DMA_Abort_IT>
 800562a:	1e03      	subs	r3, r0, #0
 800562c:	d01c      	beq.n	8005668 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2280      	movs	r2, #128	@ 0x80
 8005632:	589b      	ldr	r3, [r3, r2]
 8005634:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005636:	687a      	ldr	r2, [r7, #4]
 8005638:	2180      	movs	r1, #128	@ 0x80
 800563a:	5852      	ldr	r2, [r2, r1]
 800563c:	0010      	movs	r0, r2
 800563e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005640:	e012      	b.n	8005668 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	0018      	movs	r0, r3
 8005646:	f000 f9e1 	bl	8005a0c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800564a:	e00d      	b.n	8005668 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	0018      	movs	r0, r3
 8005650:	f000 f9dc 	bl	8005a0c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005654:	e008      	b.n	8005668 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	0018      	movs	r0, r3
 800565a:	f000 f9d7 	bl	8005a0c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2290      	movs	r2, #144	@ 0x90
 8005662:	2100      	movs	r1, #0
 8005664:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8005666:	e1b9      	b.n	80059dc <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005668:	46c0      	nop			@ (mov r8, r8)
    return;
 800566a:	e1b7      	b.n	80059dc <HAL_UART_IRQHandler+0x62c>
 800566c:	0000080f 	.word	0x0000080f
 8005670:	10000001 	.word	0x10000001
 8005674:	04000120 	.word	0x04000120
 8005678:	080061e5 	.word	0x080061e5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005680:	2b01      	cmp	r3, #1
 8005682:	d000      	beq.n	8005686 <HAL_UART_IRQHandler+0x2d6>
 8005684:	e13e      	b.n	8005904 <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005686:	23a4      	movs	r3, #164	@ 0xa4
 8005688:	18fb      	adds	r3, r7, r3
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	2210      	movs	r2, #16
 800568e:	4013      	ands	r3, r2
 8005690:	d100      	bne.n	8005694 <HAL_UART_IRQHandler+0x2e4>
 8005692:	e137      	b.n	8005904 <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005694:	23a0      	movs	r3, #160	@ 0xa0
 8005696:	18fb      	adds	r3, r7, r3
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	2210      	movs	r2, #16
 800569c:	4013      	ands	r3, r2
 800569e:	d100      	bne.n	80056a2 <HAL_UART_IRQHandler+0x2f2>
 80056a0:	e130      	b.n	8005904 <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	2210      	movs	r2, #16
 80056a8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	689b      	ldr	r3, [r3, #8]
 80056b0:	2240      	movs	r2, #64	@ 0x40
 80056b2:	4013      	ands	r3, r2
 80056b4:	2b40      	cmp	r3, #64	@ 0x40
 80056b6:	d000      	beq.n	80056ba <HAL_UART_IRQHandler+0x30a>
 80056b8:	e0a4      	b.n	8005804 <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2280      	movs	r2, #128	@ 0x80
 80056be:	589b      	ldr	r3, [r3, r2]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	685a      	ldr	r2, [r3, #4]
 80056c4:	217e      	movs	r1, #126	@ 0x7e
 80056c6:	187b      	adds	r3, r7, r1
 80056c8:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80056ca:	187b      	adds	r3, r7, r1
 80056cc:	881b      	ldrh	r3, [r3, #0]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d100      	bne.n	80056d4 <HAL_UART_IRQHandler+0x324>
 80056d2:	e185      	b.n	80059e0 <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	225c      	movs	r2, #92	@ 0x5c
 80056d8:	5a9b      	ldrh	r3, [r3, r2]
 80056da:	187a      	adds	r2, r7, r1
 80056dc:	8812      	ldrh	r2, [r2, #0]
 80056de:	429a      	cmp	r2, r3
 80056e0:	d300      	bcc.n	80056e4 <HAL_UART_IRQHandler+0x334>
 80056e2:	e17d      	b.n	80059e0 <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	187a      	adds	r2, r7, r1
 80056e8:	215e      	movs	r1, #94	@ 0x5e
 80056ea:	8812      	ldrh	r2, [r2, #0]
 80056ec:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2280      	movs	r2, #128	@ 0x80
 80056f2:	589b      	ldr	r3, [r3, r2]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	2220      	movs	r2, #32
 80056fa:	4013      	ands	r3, r2
 80056fc:	d170      	bne.n	80057e0 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80056fe:	f3ef 8310 	mrs	r3, PRIMASK
 8005702:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8005704:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005706:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005708:	2301      	movs	r3, #1
 800570a:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800570c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800570e:	f383 8810 	msr	PRIMASK, r3
}
 8005712:	46c0      	nop			@ (mov r8, r8)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	681a      	ldr	r2, [r3, #0]
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	49b4      	ldr	r1, [pc, #720]	@ (80059f0 <HAL_UART_IRQHandler+0x640>)
 8005720:	400a      	ands	r2, r1
 8005722:	601a      	str	r2, [r3, #0]
 8005724:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005726:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005728:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800572a:	f383 8810 	msr	PRIMASK, r3
}
 800572e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005730:	f3ef 8310 	mrs	r3, PRIMASK
 8005734:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8005736:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005738:	677b      	str	r3, [r7, #116]	@ 0x74
 800573a:	2301      	movs	r3, #1
 800573c:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800573e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005740:	f383 8810 	msr	PRIMASK, r3
}
 8005744:	46c0      	nop			@ (mov r8, r8)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	689a      	ldr	r2, [r3, #8]
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	2101      	movs	r1, #1
 8005752:	438a      	bics	r2, r1
 8005754:	609a      	str	r2, [r3, #8]
 8005756:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005758:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800575a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800575c:	f383 8810 	msr	PRIMASK, r3
}
 8005760:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005762:	f3ef 8310 	mrs	r3, PRIMASK
 8005766:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8005768:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800576a:	673b      	str	r3, [r7, #112]	@ 0x70
 800576c:	2301      	movs	r3, #1
 800576e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005770:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005772:	f383 8810 	msr	PRIMASK, r3
}
 8005776:	46c0      	nop			@ (mov r8, r8)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	689a      	ldr	r2, [r3, #8]
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	2140      	movs	r1, #64	@ 0x40
 8005784:	438a      	bics	r2, r1
 8005786:	609a      	str	r2, [r3, #8]
 8005788:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800578a:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800578c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800578e:	f383 8810 	msr	PRIMASK, r3
}
 8005792:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	228c      	movs	r2, #140	@ 0x8c
 8005798:	2120      	movs	r1, #32
 800579a:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2200      	movs	r2, #0
 80057a0:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80057a2:	f3ef 8310 	mrs	r3, PRIMASK
 80057a6:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 80057a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057aa:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80057ac:	2301      	movs	r3, #1
 80057ae:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057b0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80057b2:	f383 8810 	msr	PRIMASK, r3
}
 80057b6:	46c0      	nop			@ (mov r8, r8)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	681a      	ldr	r2, [r3, #0]
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	2110      	movs	r1, #16
 80057c4:	438a      	bics	r2, r1
 80057c6:	601a      	str	r2, [r3, #0]
 80057c8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80057ca:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057cc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80057ce:	f383 8810 	msr	PRIMASK, r3
}
 80057d2:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2280      	movs	r2, #128	@ 0x80
 80057d8:	589b      	ldr	r3, [r3, r2]
 80057da:	0018      	movs	r0, r3
 80057dc:	f7fd fad6 	bl	8002d8c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2202      	movs	r2, #2
 80057e4:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	225c      	movs	r2, #92	@ 0x5c
 80057ea:	5a9a      	ldrh	r2, [r3, r2]
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	215e      	movs	r1, #94	@ 0x5e
 80057f0:	5a5b      	ldrh	r3, [r3, r1]
 80057f2:	b29b      	uxth	r3, r3
 80057f4:	1ad3      	subs	r3, r2, r3
 80057f6:	b29a      	uxth	r2, r3
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	0011      	movs	r1, r2
 80057fc:	0018      	movs	r0, r3
 80057fe:	f000 f90d 	bl	8005a1c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005802:	e0ed      	b.n	80059e0 <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	225c      	movs	r2, #92	@ 0x5c
 8005808:	5a99      	ldrh	r1, [r3, r2]
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	225e      	movs	r2, #94	@ 0x5e
 800580e:	5a9b      	ldrh	r3, [r3, r2]
 8005810:	b29a      	uxth	r2, r3
 8005812:	208e      	movs	r0, #142	@ 0x8e
 8005814:	183b      	adds	r3, r7, r0
 8005816:	1a8a      	subs	r2, r1, r2
 8005818:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	225e      	movs	r2, #94	@ 0x5e
 800581e:	5a9b      	ldrh	r3, [r3, r2]
 8005820:	b29b      	uxth	r3, r3
 8005822:	2b00      	cmp	r3, #0
 8005824:	d100      	bne.n	8005828 <HAL_UART_IRQHandler+0x478>
 8005826:	e0dd      	b.n	80059e4 <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 8005828:	183b      	adds	r3, r7, r0
 800582a:	881b      	ldrh	r3, [r3, #0]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d100      	bne.n	8005832 <HAL_UART_IRQHandler+0x482>
 8005830:	e0d8      	b.n	80059e4 <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005832:	f3ef 8310 	mrs	r3, PRIMASK
 8005836:	60fb      	str	r3, [r7, #12]
  return(result);
 8005838:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800583a:	2488      	movs	r4, #136	@ 0x88
 800583c:	193a      	adds	r2, r7, r4
 800583e:	6013      	str	r3, [r2, #0]
 8005840:	2301      	movs	r3, #1
 8005842:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005844:	693b      	ldr	r3, [r7, #16]
 8005846:	f383 8810 	msr	PRIMASK, r3
}
 800584a:	46c0      	nop			@ (mov r8, r8)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	681a      	ldr	r2, [r3, #0]
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	4967      	ldr	r1, [pc, #412]	@ (80059f4 <HAL_UART_IRQHandler+0x644>)
 8005858:	400a      	ands	r2, r1
 800585a:	601a      	str	r2, [r3, #0]
 800585c:	193b      	adds	r3, r7, r4
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005862:	697b      	ldr	r3, [r7, #20]
 8005864:	f383 8810 	msr	PRIMASK, r3
}
 8005868:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800586a:	f3ef 8310 	mrs	r3, PRIMASK
 800586e:	61bb      	str	r3, [r7, #24]
  return(result);
 8005870:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005872:	2484      	movs	r4, #132	@ 0x84
 8005874:	193a      	adds	r2, r7, r4
 8005876:	6013      	str	r3, [r2, #0]
 8005878:	2301      	movs	r3, #1
 800587a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800587c:	69fb      	ldr	r3, [r7, #28]
 800587e:	f383 8810 	msr	PRIMASK, r3
}
 8005882:	46c0      	nop			@ (mov r8, r8)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	689a      	ldr	r2, [r3, #8]
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	495a      	ldr	r1, [pc, #360]	@ (80059f8 <HAL_UART_IRQHandler+0x648>)
 8005890:	400a      	ands	r2, r1
 8005892:	609a      	str	r2, [r3, #8]
 8005894:	193b      	adds	r3, r7, r4
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800589a:	6a3b      	ldr	r3, [r7, #32]
 800589c:	f383 8810 	msr	PRIMASK, r3
}
 80058a0:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	228c      	movs	r2, #140	@ 0x8c
 80058a6:	2120      	movs	r1, #32
 80058a8:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2200      	movs	r2, #0
 80058ae:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2200      	movs	r2, #0
 80058b4:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80058b6:	f3ef 8310 	mrs	r3, PRIMASK
 80058ba:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80058bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058be:	2480      	movs	r4, #128	@ 0x80
 80058c0:	193a      	adds	r2, r7, r4
 80058c2:	6013      	str	r3, [r2, #0]
 80058c4:	2301      	movs	r3, #1
 80058c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058ca:	f383 8810 	msr	PRIMASK, r3
}
 80058ce:	46c0      	nop			@ (mov r8, r8)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	681a      	ldr	r2, [r3, #0]
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	2110      	movs	r1, #16
 80058dc:	438a      	bics	r2, r1
 80058de:	601a      	str	r2, [r3, #0]
 80058e0:	193b      	adds	r3, r7, r4
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058e8:	f383 8810 	msr	PRIMASK, r3
}
 80058ec:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2202      	movs	r2, #2
 80058f2:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80058f4:	183b      	adds	r3, r7, r0
 80058f6:	881a      	ldrh	r2, [r3, #0]
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	0011      	movs	r1, r2
 80058fc:	0018      	movs	r0, r3
 80058fe:	f000 f88d 	bl	8005a1c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005902:	e06f      	b.n	80059e4 <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005904:	23a4      	movs	r3, #164	@ 0xa4
 8005906:	18fb      	adds	r3, r7, r3
 8005908:	681a      	ldr	r2, [r3, #0]
 800590a:	2380      	movs	r3, #128	@ 0x80
 800590c:	035b      	lsls	r3, r3, #13
 800590e:	4013      	ands	r3, r2
 8005910:	d010      	beq.n	8005934 <HAL_UART_IRQHandler+0x584>
 8005912:	239c      	movs	r3, #156	@ 0x9c
 8005914:	18fb      	adds	r3, r7, r3
 8005916:	681a      	ldr	r2, [r3, #0]
 8005918:	2380      	movs	r3, #128	@ 0x80
 800591a:	03db      	lsls	r3, r3, #15
 800591c:	4013      	ands	r3, r2
 800591e:	d009      	beq.n	8005934 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	2280      	movs	r2, #128	@ 0x80
 8005926:	0352      	lsls	r2, r2, #13
 8005928:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	0018      	movs	r0, r3
 800592e:	f000 fc9c 	bl	800626a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005932:	e05a      	b.n	80059ea <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005934:	23a4      	movs	r3, #164	@ 0xa4
 8005936:	18fb      	adds	r3, r7, r3
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	2280      	movs	r2, #128	@ 0x80
 800593c:	4013      	ands	r3, r2
 800593e:	d016      	beq.n	800596e <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005940:	23a0      	movs	r3, #160	@ 0xa0
 8005942:	18fb      	adds	r3, r7, r3
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	2280      	movs	r2, #128	@ 0x80
 8005948:	4013      	ands	r3, r2
 800594a:	d106      	bne.n	800595a <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800594c:	239c      	movs	r3, #156	@ 0x9c
 800594e:	18fb      	adds	r3, r7, r3
 8005950:	681a      	ldr	r2, [r3, #0]
 8005952:	2380      	movs	r3, #128	@ 0x80
 8005954:	041b      	lsls	r3, r3, #16
 8005956:	4013      	ands	r3, r2
 8005958:	d009      	beq.n	800596e <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800595e:	2b00      	cmp	r3, #0
 8005960:	d042      	beq.n	80059e8 <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005966:	687a      	ldr	r2, [r7, #4]
 8005968:	0010      	movs	r0, r2
 800596a:	4798      	blx	r3
    }
    return;
 800596c:	e03c      	b.n	80059e8 <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800596e:	23a4      	movs	r3, #164	@ 0xa4
 8005970:	18fb      	adds	r3, r7, r3
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	2240      	movs	r2, #64	@ 0x40
 8005976:	4013      	ands	r3, r2
 8005978:	d00a      	beq.n	8005990 <HAL_UART_IRQHandler+0x5e0>
 800597a:	23a0      	movs	r3, #160	@ 0xa0
 800597c:	18fb      	adds	r3, r7, r3
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	2240      	movs	r2, #64	@ 0x40
 8005982:	4013      	ands	r3, r2
 8005984:	d004      	beq.n	8005990 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	0018      	movs	r0, r3
 800598a:	f000 fc42 	bl	8006212 <UART_EndTransmit_IT>
    return;
 800598e:	e02c      	b.n	80059ea <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005990:	23a4      	movs	r3, #164	@ 0xa4
 8005992:	18fb      	adds	r3, r7, r3
 8005994:	681a      	ldr	r2, [r3, #0]
 8005996:	2380      	movs	r3, #128	@ 0x80
 8005998:	041b      	lsls	r3, r3, #16
 800599a:	4013      	ands	r3, r2
 800599c:	d00b      	beq.n	80059b6 <HAL_UART_IRQHandler+0x606>
 800599e:	23a0      	movs	r3, #160	@ 0xa0
 80059a0:	18fb      	adds	r3, r7, r3
 80059a2:	681a      	ldr	r2, [r3, #0]
 80059a4:	2380      	movs	r3, #128	@ 0x80
 80059a6:	05db      	lsls	r3, r3, #23
 80059a8:	4013      	ands	r3, r2
 80059aa:	d004      	beq.n	80059b6 <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	0018      	movs	r0, r3
 80059b0:	f000 fc6b 	bl	800628a <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80059b4:	e019      	b.n	80059ea <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80059b6:	23a4      	movs	r3, #164	@ 0xa4
 80059b8:	18fb      	adds	r3, r7, r3
 80059ba:	681a      	ldr	r2, [r3, #0]
 80059bc:	2380      	movs	r3, #128	@ 0x80
 80059be:	045b      	lsls	r3, r3, #17
 80059c0:	4013      	ands	r3, r2
 80059c2:	d012      	beq.n	80059ea <HAL_UART_IRQHandler+0x63a>
 80059c4:	23a0      	movs	r3, #160	@ 0xa0
 80059c6:	18fb      	adds	r3, r7, r3
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	da0d      	bge.n	80059ea <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	0018      	movs	r0, r3
 80059d2:	f000 fc52 	bl	800627a <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80059d6:	e008      	b.n	80059ea <HAL_UART_IRQHandler+0x63a>
      return;
 80059d8:	46c0      	nop			@ (mov r8, r8)
 80059da:	e006      	b.n	80059ea <HAL_UART_IRQHandler+0x63a>
    return;
 80059dc:	46c0      	nop			@ (mov r8, r8)
 80059de:	e004      	b.n	80059ea <HAL_UART_IRQHandler+0x63a>
      return;
 80059e0:	46c0      	nop			@ (mov r8, r8)
 80059e2:	e002      	b.n	80059ea <HAL_UART_IRQHandler+0x63a>
      return;
 80059e4:	46c0      	nop			@ (mov r8, r8)
 80059e6:	e000      	b.n	80059ea <HAL_UART_IRQHandler+0x63a>
    return;
 80059e8:	46c0      	nop			@ (mov r8, r8)
  }
}
 80059ea:	46bd      	mov	sp, r7
 80059ec:	b02a      	add	sp, #168	@ 0xa8
 80059ee:	bdb0      	pop	{r4, r5, r7, pc}
 80059f0:	fffffeff 	.word	0xfffffeff
 80059f4:	fffffedf 	.word	0xfffffedf
 80059f8:	effffffe 	.word	0xeffffffe

080059fc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b082      	sub	sp, #8
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005a04:	46c0      	nop			@ (mov r8, r8)
 8005a06:	46bd      	mov	sp, r7
 8005a08:	b002      	add	sp, #8
 8005a0a:	bd80      	pop	{r7, pc}

08005a0c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b082      	sub	sp, #8
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005a14:	46c0      	nop			@ (mov r8, r8)
 8005a16:	46bd      	mov	sp, r7
 8005a18:	b002      	add	sp, #8
 8005a1a:	bd80      	pop	{r7, pc}

08005a1c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b082      	sub	sp, #8
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
 8005a24:	000a      	movs	r2, r1
 8005a26:	1cbb      	adds	r3, r7, #2
 8005a28:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005a2a:	46c0      	nop			@ (mov r8, r8)
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	b002      	add	sp, #8
 8005a30:	bd80      	pop	{r7, pc}
	...

08005a34 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b088      	sub	sp, #32
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005a3c:	231a      	movs	r3, #26
 8005a3e:	18fb      	adds	r3, r7, r3
 8005a40:	2200      	movs	r2, #0
 8005a42:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	689a      	ldr	r2, [r3, #8]
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	691b      	ldr	r3, [r3, #16]
 8005a4c:	431a      	orrs	r2, r3
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	695b      	ldr	r3, [r3, #20]
 8005a52:	431a      	orrs	r2, r3
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	69db      	ldr	r3, [r3, #28]
 8005a58:	4313      	orrs	r3, r2
 8005a5a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	4abc      	ldr	r2, [pc, #752]	@ (8005d54 <UART_SetConfig+0x320>)
 8005a64:	4013      	ands	r3, r2
 8005a66:	0019      	movs	r1, r3
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	69fa      	ldr	r2, [r7, #28]
 8005a6e:	430a      	orrs	r2, r1
 8005a70:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	685b      	ldr	r3, [r3, #4]
 8005a78:	4ab7      	ldr	r2, [pc, #732]	@ (8005d58 <UART_SetConfig+0x324>)
 8005a7a:	4013      	ands	r3, r2
 8005a7c:	0019      	movs	r1, r3
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	68da      	ldr	r2, [r3, #12]
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	430a      	orrs	r2, r1
 8005a88:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	699b      	ldr	r3, [r3, #24]
 8005a8e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	6a1b      	ldr	r3, [r3, #32]
 8005a94:	69fa      	ldr	r2, [r7, #28]
 8005a96:	4313      	orrs	r3, r2
 8005a98:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	689b      	ldr	r3, [r3, #8]
 8005aa0:	4aae      	ldr	r2, [pc, #696]	@ (8005d5c <UART_SetConfig+0x328>)
 8005aa2:	4013      	ands	r3, r2
 8005aa4:	0019      	movs	r1, r3
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	69fa      	ldr	r2, [r7, #28]
 8005aac:	430a      	orrs	r2, r1
 8005aae:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ab6:	220f      	movs	r2, #15
 8005ab8:	4393      	bics	r3, r2
 8005aba:	0019      	movs	r1, r3
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	430a      	orrs	r2, r1
 8005ac6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	4aa4      	ldr	r2, [pc, #656]	@ (8005d60 <UART_SetConfig+0x32c>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d127      	bne.n	8005b22 <UART_SetConfig+0xee>
 8005ad2:	4ba4      	ldr	r3, [pc, #656]	@ (8005d64 <UART_SetConfig+0x330>)
 8005ad4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ad6:	2203      	movs	r2, #3
 8005ad8:	4013      	ands	r3, r2
 8005ada:	2b03      	cmp	r3, #3
 8005adc:	d017      	beq.n	8005b0e <UART_SetConfig+0xda>
 8005ade:	d81b      	bhi.n	8005b18 <UART_SetConfig+0xe4>
 8005ae0:	2b02      	cmp	r3, #2
 8005ae2:	d00a      	beq.n	8005afa <UART_SetConfig+0xc6>
 8005ae4:	d818      	bhi.n	8005b18 <UART_SetConfig+0xe4>
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d002      	beq.n	8005af0 <UART_SetConfig+0xbc>
 8005aea:	2b01      	cmp	r3, #1
 8005aec:	d00a      	beq.n	8005b04 <UART_SetConfig+0xd0>
 8005aee:	e013      	b.n	8005b18 <UART_SetConfig+0xe4>
 8005af0:	231b      	movs	r3, #27
 8005af2:	18fb      	adds	r3, r7, r3
 8005af4:	2200      	movs	r2, #0
 8005af6:	701a      	strb	r2, [r3, #0]
 8005af8:	e058      	b.n	8005bac <UART_SetConfig+0x178>
 8005afa:	231b      	movs	r3, #27
 8005afc:	18fb      	adds	r3, r7, r3
 8005afe:	2202      	movs	r2, #2
 8005b00:	701a      	strb	r2, [r3, #0]
 8005b02:	e053      	b.n	8005bac <UART_SetConfig+0x178>
 8005b04:	231b      	movs	r3, #27
 8005b06:	18fb      	adds	r3, r7, r3
 8005b08:	2204      	movs	r2, #4
 8005b0a:	701a      	strb	r2, [r3, #0]
 8005b0c:	e04e      	b.n	8005bac <UART_SetConfig+0x178>
 8005b0e:	231b      	movs	r3, #27
 8005b10:	18fb      	adds	r3, r7, r3
 8005b12:	2208      	movs	r2, #8
 8005b14:	701a      	strb	r2, [r3, #0]
 8005b16:	e049      	b.n	8005bac <UART_SetConfig+0x178>
 8005b18:	231b      	movs	r3, #27
 8005b1a:	18fb      	adds	r3, r7, r3
 8005b1c:	2210      	movs	r2, #16
 8005b1e:	701a      	strb	r2, [r3, #0]
 8005b20:	e044      	b.n	8005bac <UART_SetConfig+0x178>
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	4a90      	ldr	r2, [pc, #576]	@ (8005d68 <UART_SetConfig+0x334>)
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d127      	bne.n	8005b7c <UART_SetConfig+0x148>
 8005b2c:	4b8d      	ldr	r3, [pc, #564]	@ (8005d64 <UART_SetConfig+0x330>)
 8005b2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b30:	220c      	movs	r2, #12
 8005b32:	4013      	ands	r3, r2
 8005b34:	2b0c      	cmp	r3, #12
 8005b36:	d017      	beq.n	8005b68 <UART_SetConfig+0x134>
 8005b38:	d81b      	bhi.n	8005b72 <UART_SetConfig+0x13e>
 8005b3a:	2b08      	cmp	r3, #8
 8005b3c:	d00a      	beq.n	8005b54 <UART_SetConfig+0x120>
 8005b3e:	d818      	bhi.n	8005b72 <UART_SetConfig+0x13e>
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d002      	beq.n	8005b4a <UART_SetConfig+0x116>
 8005b44:	2b04      	cmp	r3, #4
 8005b46:	d00a      	beq.n	8005b5e <UART_SetConfig+0x12a>
 8005b48:	e013      	b.n	8005b72 <UART_SetConfig+0x13e>
 8005b4a:	231b      	movs	r3, #27
 8005b4c:	18fb      	adds	r3, r7, r3
 8005b4e:	2200      	movs	r2, #0
 8005b50:	701a      	strb	r2, [r3, #0]
 8005b52:	e02b      	b.n	8005bac <UART_SetConfig+0x178>
 8005b54:	231b      	movs	r3, #27
 8005b56:	18fb      	adds	r3, r7, r3
 8005b58:	2202      	movs	r2, #2
 8005b5a:	701a      	strb	r2, [r3, #0]
 8005b5c:	e026      	b.n	8005bac <UART_SetConfig+0x178>
 8005b5e:	231b      	movs	r3, #27
 8005b60:	18fb      	adds	r3, r7, r3
 8005b62:	2204      	movs	r2, #4
 8005b64:	701a      	strb	r2, [r3, #0]
 8005b66:	e021      	b.n	8005bac <UART_SetConfig+0x178>
 8005b68:	231b      	movs	r3, #27
 8005b6a:	18fb      	adds	r3, r7, r3
 8005b6c:	2208      	movs	r2, #8
 8005b6e:	701a      	strb	r2, [r3, #0]
 8005b70:	e01c      	b.n	8005bac <UART_SetConfig+0x178>
 8005b72:	231b      	movs	r3, #27
 8005b74:	18fb      	adds	r3, r7, r3
 8005b76:	2210      	movs	r2, #16
 8005b78:	701a      	strb	r2, [r3, #0]
 8005b7a:	e017      	b.n	8005bac <UART_SetConfig+0x178>
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	4a7a      	ldr	r2, [pc, #488]	@ (8005d6c <UART_SetConfig+0x338>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d104      	bne.n	8005b90 <UART_SetConfig+0x15c>
 8005b86:	231b      	movs	r3, #27
 8005b88:	18fb      	adds	r3, r7, r3
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	701a      	strb	r2, [r3, #0]
 8005b8e:	e00d      	b.n	8005bac <UART_SetConfig+0x178>
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	4a76      	ldr	r2, [pc, #472]	@ (8005d70 <UART_SetConfig+0x33c>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d104      	bne.n	8005ba4 <UART_SetConfig+0x170>
 8005b9a:	231b      	movs	r3, #27
 8005b9c:	18fb      	adds	r3, r7, r3
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	701a      	strb	r2, [r3, #0]
 8005ba2:	e003      	b.n	8005bac <UART_SetConfig+0x178>
 8005ba4:	231b      	movs	r3, #27
 8005ba6:	18fb      	adds	r3, r7, r3
 8005ba8:	2210      	movs	r2, #16
 8005baa:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	69da      	ldr	r2, [r3, #28]
 8005bb0:	2380      	movs	r3, #128	@ 0x80
 8005bb2:	021b      	lsls	r3, r3, #8
 8005bb4:	429a      	cmp	r2, r3
 8005bb6:	d000      	beq.n	8005bba <UART_SetConfig+0x186>
 8005bb8:	e065      	b.n	8005c86 <UART_SetConfig+0x252>
  {
    switch (clocksource)
 8005bba:	231b      	movs	r3, #27
 8005bbc:	18fb      	adds	r3, r7, r3
 8005bbe:	781b      	ldrb	r3, [r3, #0]
 8005bc0:	2b08      	cmp	r3, #8
 8005bc2:	d015      	beq.n	8005bf0 <UART_SetConfig+0x1bc>
 8005bc4:	dc18      	bgt.n	8005bf8 <UART_SetConfig+0x1c4>
 8005bc6:	2b04      	cmp	r3, #4
 8005bc8:	d00d      	beq.n	8005be6 <UART_SetConfig+0x1b2>
 8005bca:	dc15      	bgt.n	8005bf8 <UART_SetConfig+0x1c4>
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d002      	beq.n	8005bd6 <UART_SetConfig+0x1a2>
 8005bd0:	2b02      	cmp	r3, #2
 8005bd2:	d005      	beq.n	8005be0 <UART_SetConfig+0x1ac>
 8005bd4:	e010      	b.n	8005bf8 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005bd6:	f7fe f9b7 	bl	8003f48 <HAL_RCC_GetPCLK1Freq>
 8005bda:	0003      	movs	r3, r0
 8005bdc:	617b      	str	r3, [r7, #20]
        break;
 8005bde:	e012      	b.n	8005c06 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005be0:	4b64      	ldr	r3, [pc, #400]	@ (8005d74 <UART_SetConfig+0x340>)
 8005be2:	617b      	str	r3, [r7, #20]
        break;
 8005be4:	e00f      	b.n	8005c06 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005be6:	f7fe f923 	bl	8003e30 <HAL_RCC_GetSysClockFreq>
 8005bea:	0003      	movs	r3, r0
 8005bec:	617b      	str	r3, [r7, #20]
        break;
 8005bee:	e00a      	b.n	8005c06 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005bf0:	2380      	movs	r3, #128	@ 0x80
 8005bf2:	021b      	lsls	r3, r3, #8
 8005bf4:	617b      	str	r3, [r7, #20]
        break;
 8005bf6:	e006      	b.n	8005c06 <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005bfc:	231a      	movs	r3, #26
 8005bfe:	18fb      	adds	r3, r7, r3
 8005c00:	2201      	movs	r2, #1
 8005c02:	701a      	strb	r2, [r3, #0]
        break;
 8005c04:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005c06:	697b      	ldr	r3, [r7, #20]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d100      	bne.n	8005c0e <UART_SetConfig+0x1da>
 8005c0c:	e08d      	b.n	8005d2a <UART_SetConfig+0x2f6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005c12:	4b59      	ldr	r3, [pc, #356]	@ (8005d78 <UART_SetConfig+0x344>)
 8005c14:	0052      	lsls	r2, r2, #1
 8005c16:	5ad3      	ldrh	r3, [r2, r3]
 8005c18:	0019      	movs	r1, r3
 8005c1a:	6978      	ldr	r0, [r7, #20]
 8005c1c:	f7fa facc 	bl	80001b8 <__udivsi3>
 8005c20:	0003      	movs	r3, r0
 8005c22:	005a      	lsls	r2, r3, #1
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	685b      	ldr	r3, [r3, #4]
 8005c28:	085b      	lsrs	r3, r3, #1
 8005c2a:	18d2      	adds	r2, r2, r3
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	685b      	ldr	r3, [r3, #4]
 8005c30:	0019      	movs	r1, r3
 8005c32:	0010      	movs	r0, r2
 8005c34:	f7fa fac0 	bl	80001b8 <__udivsi3>
 8005c38:	0003      	movs	r3, r0
 8005c3a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c3c:	693b      	ldr	r3, [r7, #16]
 8005c3e:	2b0f      	cmp	r3, #15
 8005c40:	d91c      	bls.n	8005c7c <UART_SetConfig+0x248>
 8005c42:	693a      	ldr	r2, [r7, #16]
 8005c44:	2380      	movs	r3, #128	@ 0x80
 8005c46:	025b      	lsls	r3, r3, #9
 8005c48:	429a      	cmp	r2, r3
 8005c4a:	d217      	bcs.n	8005c7c <UART_SetConfig+0x248>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005c4c:	693b      	ldr	r3, [r7, #16]
 8005c4e:	b29a      	uxth	r2, r3
 8005c50:	200e      	movs	r0, #14
 8005c52:	183b      	adds	r3, r7, r0
 8005c54:	210f      	movs	r1, #15
 8005c56:	438a      	bics	r2, r1
 8005c58:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005c5a:	693b      	ldr	r3, [r7, #16]
 8005c5c:	085b      	lsrs	r3, r3, #1
 8005c5e:	b29b      	uxth	r3, r3
 8005c60:	2207      	movs	r2, #7
 8005c62:	4013      	ands	r3, r2
 8005c64:	b299      	uxth	r1, r3
 8005c66:	183b      	adds	r3, r7, r0
 8005c68:	183a      	adds	r2, r7, r0
 8005c6a:	8812      	ldrh	r2, [r2, #0]
 8005c6c:	430a      	orrs	r2, r1
 8005c6e:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	183a      	adds	r2, r7, r0
 8005c76:	8812      	ldrh	r2, [r2, #0]
 8005c78:	60da      	str	r2, [r3, #12]
 8005c7a:	e056      	b.n	8005d2a <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 8005c7c:	231a      	movs	r3, #26
 8005c7e:	18fb      	adds	r3, r7, r3
 8005c80:	2201      	movs	r2, #1
 8005c82:	701a      	strb	r2, [r3, #0]
 8005c84:	e051      	b.n	8005d2a <UART_SetConfig+0x2f6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005c86:	231b      	movs	r3, #27
 8005c88:	18fb      	adds	r3, r7, r3
 8005c8a:	781b      	ldrb	r3, [r3, #0]
 8005c8c:	2b08      	cmp	r3, #8
 8005c8e:	d015      	beq.n	8005cbc <UART_SetConfig+0x288>
 8005c90:	dc18      	bgt.n	8005cc4 <UART_SetConfig+0x290>
 8005c92:	2b04      	cmp	r3, #4
 8005c94:	d00d      	beq.n	8005cb2 <UART_SetConfig+0x27e>
 8005c96:	dc15      	bgt.n	8005cc4 <UART_SetConfig+0x290>
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d002      	beq.n	8005ca2 <UART_SetConfig+0x26e>
 8005c9c:	2b02      	cmp	r3, #2
 8005c9e:	d005      	beq.n	8005cac <UART_SetConfig+0x278>
 8005ca0:	e010      	b.n	8005cc4 <UART_SetConfig+0x290>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ca2:	f7fe f951 	bl	8003f48 <HAL_RCC_GetPCLK1Freq>
 8005ca6:	0003      	movs	r3, r0
 8005ca8:	617b      	str	r3, [r7, #20]
        break;
 8005caa:	e012      	b.n	8005cd2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005cac:	4b31      	ldr	r3, [pc, #196]	@ (8005d74 <UART_SetConfig+0x340>)
 8005cae:	617b      	str	r3, [r7, #20]
        break;
 8005cb0:	e00f      	b.n	8005cd2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005cb2:	f7fe f8bd 	bl	8003e30 <HAL_RCC_GetSysClockFreq>
 8005cb6:	0003      	movs	r3, r0
 8005cb8:	617b      	str	r3, [r7, #20]
        break;
 8005cba:	e00a      	b.n	8005cd2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005cbc:	2380      	movs	r3, #128	@ 0x80
 8005cbe:	021b      	lsls	r3, r3, #8
 8005cc0:	617b      	str	r3, [r7, #20]
        break;
 8005cc2:	e006      	b.n	8005cd2 <UART_SetConfig+0x29e>
      default:
        pclk = 0U;
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005cc8:	231a      	movs	r3, #26
 8005cca:	18fb      	adds	r3, r7, r3
 8005ccc:	2201      	movs	r2, #1
 8005cce:	701a      	strb	r2, [r3, #0]
        break;
 8005cd0:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8005cd2:	697b      	ldr	r3, [r7, #20]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d028      	beq.n	8005d2a <UART_SetConfig+0x2f6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005cdc:	4b26      	ldr	r3, [pc, #152]	@ (8005d78 <UART_SetConfig+0x344>)
 8005cde:	0052      	lsls	r2, r2, #1
 8005ce0:	5ad3      	ldrh	r3, [r2, r3]
 8005ce2:	0019      	movs	r1, r3
 8005ce4:	6978      	ldr	r0, [r7, #20]
 8005ce6:	f7fa fa67 	bl	80001b8 <__udivsi3>
 8005cea:	0003      	movs	r3, r0
 8005cec:	001a      	movs	r2, r3
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	685b      	ldr	r3, [r3, #4]
 8005cf2:	085b      	lsrs	r3, r3, #1
 8005cf4:	18d2      	adds	r2, r2, r3
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	685b      	ldr	r3, [r3, #4]
 8005cfa:	0019      	movs	r1, r3
 8005cfc:	0010      	movs	r0, r2
 8005cfe:	f7fa fa5b 	bl	80001b8 <__udivsi3>
 8005d02:	0003      	movs	r3, r0
 8005d04:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005d06:	693b      	ldr	r3, [r7, #16]
 8005d08:	2b0f      	cmp	r3, #15
 8005d0a:	d90a      	bls.n	8005d22 <UART_SetConfig+0x2ee>
 8005d0c:	693a      	ldr	r2, [r7, #16]
 8005d0e:	2380      	movs	r3, #128	@ 0x80
 8005d10:	025b      	lsls	r3, r3, #9
 8005d12:	429a      	cmp	r2, r3
 8005d14:	d205      	bcs.n	8005d22 <UART_SetConfig+0x2ee>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005d16:	693b      	ldr	r3, [r7, #16]
 8005d18:	b29a      	uxth	r2, r3
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	60da      	str	r2, [r3, #12]
 8005d20:	e003      	b.n	8005d2a <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 8005d22:	231a      	movs	r3, #26
 8005d24:	18fb      	adds	r3, r7, r3
 8005d26:	2201      	movs	r2, #1
 8005d28:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	226a      	movs	r2, #106	@ 0x6a
 8005d2e:	2101      	movs	r1, #1
 8005d30:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	2268      	movs	r2, #104	@ 0x68
 8005d36:	2101      	movs	r1, #1
 8005d38:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2200      	movs	r2, #0
 8005d44:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005d46:	231a      	movs	r3, #26
 8005d48:	18fb      	adds	r3, r7, r3
 8005d4a:	781b      	ldrb	r3, [r3, #0]
}
 8005d4c:	0018      	movs	r0, r3
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	b008      	add	sp, #32
 8005d52:	bd80      	pop	{r7, pc}
 8005d54:	cfff69f3 	.word	0xcfff69f3
 8005d58:	ffffcfff 	.word	0xffffcfff
 8005d5c:	11fff4ff 	.word	0x11fff4ff
 8005d60:	40013800 	.word	0x40013800
 8005d64:	40021000 	.word	0x40021000
 8005d68:	40004400 	.word	0x40004400
 8005d6c:	40004800 	.word	0x40004800
 8005d70:	40004c00 	.word	0x40004c00
 8005d74:	00f42400 	.word	0x00f42400
 8005d78:	08007e74 	.word	0x08007e74

08005d7c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b082      	sub	sp, #8
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d88:	2208      	movs	r2, #8
 8005d8a:	4013      	ands	r3, r2
 8005d8c:	d00b      	beq.n	8005da6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	685b      	ldr	r3, [r3, #4]
 8005d94:	4a4a      	ldr	r2, [pc, #296]	@ (8005ec0 <UART_AdvFeatureConfig+0x144>)
 8005d96:	4013      	ands	r3, r2
 8005d98:	0019      	movs	r1, r3
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	430a      	orrs	r2, r1
 8005da4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005daa:	2201      	movs	r2, #1
 8005dac:	4013      	ands	r3, r2
 8005dae:	d00b      	beq.n	8005dc8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	685b      	ldr	r3, [r3, #4]
 8005db6:	4a43      	ldr	r2, [pc, #268]	@ (8005ec4 <UART_AdvFeatureConfig+0x148>)
 8005db8:	4013      	ands	r3, r2
 8005dba:	0019      	movs	r1, r3
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	430a      	orrs	r2, r1
 8005dc6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005dcc:	2202      	movs	r2, #2
 8005dce:	4013      	ands	r3, r2
 8005dd0:	d00b      	beq.n	8005dea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	685b      	ldr	r3, [r3, #4]
 8005dd8:	4a3b      	ldr	r2, [pc, #236]	@ (8005ec8 <UART_AdvFeatureConfig+0x14c>)
 8005dda:	4013      	ands	r3, r2
 8005ddc:	0019      	movs	r1, r3
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	430a      	orrs	r2, r1
 8005de8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005dee:	2204      	movs	r2, #4
 8005df0:	4013      	ands	r3, r2
 8005df2:	d00b      	beq.n	8005e0c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	685b      	ldr	r3, [r3, #4]
 8005dfa:	4a34      	ldr	r2, [pc, #208]	@ (8005ecc <UART_AdvFeatureConfig+0x150>)
 8005dfc:	4013      	ands	r3, r2
 8005dfe:	0019      	movs	r1, r3
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	430a      	orrs	r2, r1
 8005e0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e10:	2210      	movs	r2, #16
 8005e12:	4013      	ands	r3, r2
 8005e14:	d00b      	beq.n	8005e2e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	689b      	ldr	r3, [r3, #8]
 8005e1c:	4a2c      	ldr	r2, [pc, #176]	@ (8005ed0 <UART_AdvFeatureConfig+0x154>)
 8005e1e:	4013      	ands	r3, r2
 8005e20:	0019      	movs	r1, r3
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	430a      	orrs	r2, r1
 8005e2c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e32:	2220      	movs	r2, #32
 8005e34:	4013      	ands	r3, r2
 8005e36:	d00b      	beq.n	8005e50 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	689b      	ldr	r3, [r3, #8]
 8005e3e:	4a25      	ldr	r2, [pc, #148]	@ (8005ed4 <UART_AdvFeatureConfig+0x158>)
 8005e40:	4013      	ands	r3, r2
 8005e42:	0019      	movs	r1, r3
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	430a      	orrs	r2, r1
 8005e4e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e54:	2240      	movs	r2, #64	@ 0x40
 8005e56:	4013      	ands	r3, r2
 8005e58:	d01d      	beq.n	8005e96 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	685b      	ldr	r3, [r3, #4]
 8005e60:	4a1d      	ldr	r2, [pc, #116]	@ (8005ed8 <UART_AdvFeatureConfig+0x15c>)
 8005e62:	4013      	ands	r3, r2
 8005e64:	0019      	movs	r1, r3
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	430a      	orrs	r2, r1
 8005e70:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005e76:	2380      	movs	r3, #128	@ 0x80
 8005e78:	035b      	lsls	r3, r3, #13
 8005e7a:	429a      	cmp	r2, r3
 8005e7c:	d10b      	bne.n	8005e96 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	685b      	ldr	r3, [r3, #4]
 8005e84:	4a15      	ldr	r2, [pc, #84]	@ (8005edc <UART_AdvFeatureConfig+0x160>)
 8005e86:	4013      	ands	r3, r2
 8005e88:	0019      	movs	r1, r3
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	430a      	orrs	r2, r1
 8005e94:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e9a:	2280      	movs	r2, #128	@ 0x80
 8005e9c:	4013      	ands	r3, r2
 8005e9e:	d00b      	beq.n	8005eb8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	685b      	ldr	r3, [r3, #4]
 8005ea6:	4a0e      	ldr	r2, [pc, #56]	@ (8005ee0 <UART_AdvFeatureConfig+0x164>)
 8005ea8:	4013      	ands	r3, r2
 8005eaa:	0019      	movs	r1, r3
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	430a      	orrs	r2, r1
 8005eb6:	605a      	str	r2, [r3, #4]
  }
}
 8005eb8:	46c0      	nop			@ (mov r8, r8)
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	b002      	add	sp, #8
 8005ebe:	bd80      	pop	{r7, pc}
 8005ec0:	ffff7fff 	.word	0xffff7fff
 8005ec4:	fffdffff 	.word	0xfffdffff
 8005ec8:	fffeffff 	.word	0xfffeffff
 8005ecc:	fffbffff 	.word	0xfffbffff
 8005ed0:	ffffefff 	.word	0xffffefff
 8005ed4:	ffffdfff 	.word	0xffffdfff
 8005ed8:	ffefffff 	.word	0xffefffff
 8005edc:	ff9fffff 	.word	0xff9fffff
 8005ee0:	fff7ffff 	.word	0xfff7ffff

08005ee4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b092      	sub	sp, #72	@ 0x48
 8005ee8:	af02      	add	r7, sp, #8
 8005eea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2290      	movs	r2, #144	@ 0x90
 8005ef0:	2100      	movs	r1, #0
 8005ef2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005ef4:	f7fc f860 	bl	8001fb8 <HAL_GetTick>
 8005ef8:	0003      	movs	r3, r0
 8005efa:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	2208      	movs	r2, #8
 8005f04:	4013      	ands	r3, r2
 8005f06:	2b08      	cmp	r3, #8
 8005f08:	d12d      	bne.n	8005f66 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f0c:	2280      	movs	r2, #128	@ 0x80
 8005f0e:	0391      	lsls	r1, r2, #14
 8005f10:	6878      	ldr	r0, [r7, #4]
 8005f12:	4a47      	ldr	r2, [pc, #284]	@ (8006030 <UART_CheckIdleState+0x14c>)
 8005f14:	9200      	str	r2, [sp, #0]
 8005f16:	2200      	movs	r2, #0
 8005f18:	f000 f88e 	bl	8006038 <UART_WaitOnFlagUntilTimeout>
 8005f1c:	1e03      	subs	r3, r0, #0
 8005f1e:	d022      	beq.n	8005f66 <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f20:	f3ef 8310 	mrs	r3, PRIMASK
 8005f24:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8005f26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005f28:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005f2a:	2301      	movs	r3, #1
 8005f2c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f30:	f383 8810 	msr	PRIMASK, r3
}
 8005f34:	46c0      	nop			@ (mov r8, r8)
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	681a      	ldr	r2, [r3, #0]
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	2180      	movs	r1, #128	@ 0x80
 8005f42:	438a      	bics	r2, r1
 8005f44:	601a      	str	r2, [r3, #0]
 8005f46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f48:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f4c:	f383 8810 	msr	PRIMASK, r3
}
 8005f50:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2288      	movs	r2, #136	@ 0x88
 8005f56:	2120      	movs	r1, #32
 8005f58:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	2284      	movs	r2, #132	@ 0x84
 8005f5e:	2100      	movs	r1, #0
 8005f60:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005f62:	2303      	movs	r3, #3
 8005f64:	e060      	b.n	8006028 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	2204      	movs	r2, #4
 8005f6e:	4013      	ands	r3, r2
 8005f70:	2b04      	cmp	r3, #4
 8005f72:	d146      	bne.n	8006002 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f76:	2280      	movs	r2, #128	@ 0x80
 8005f78:	03d1      	lsls	r1, r2, #15
 8005f7a:	6878      	ldr	r0, [r7, #4]
 8005f7c:	4a2c      	ldr	r2, [pc, #176]	@ (8006030 <UART_CheckIdleState+0x14c>)
 8005f7e:	9200      	str	r2, [sp, #0]
 8005f80:	2200      	movs	r2, #0
 8005f82:	f000 f859 	bl	8006038 <UART_WaitOnFlagUntilTimeout>
 8005f86:	1e03      	subs	r3, r0, #0
 8005f88:	d03b      	beq.n	8006002 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f8a:	f3ef 8310 	mrs	r3, PRIMASK
 8005f8e:	60fb      	str	r3, [r7, #12]
  return(result);
 8005f90:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005f92:	637b      	str	r3, [r7, #52]	@ 0x34
 8005f94:	2301      	movs	r3, #1
 8005f96:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f98:	693b      	ldr	r3, [r7, #16]
 8005f9a:	f383 8810 	msr	PRIMASK, r3
}
 8005f9e:	46c0      	nop			@ (mov r8, r8)
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	681a      	ldr	r2, [r3, #0]
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	4922      	ldr	r1, [pc, #136]	@ (8006034 <UART_CheckIdleState+0x150>)
 8005fac:	400a      	ands	r2, r1
 8005fae:	601a      	str	r2, [r3, #0]
 8005fb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005fb2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005fb4:	697b      	ldr	r3, [r7, #20]
 8005fb6:	f383 8810 	msr	PRIMASK, r3
}
 8005fba:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005fbc:	f3ef 8310 	mrs	r3, PRIMASK
 8005fc0:	61bb      	str	r3, [r7, #24]
  return(result);
 8005fc2:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fc4:	633b      	str	r3, [r7, #48]	@ 0x30
 8005fc6:	2301      	movs	r3, #1
 8005fc8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005fca:	69fb      	ldr	r3, [r7, #28]
 8005fcc:	f383 8810 	msr	PRIMASK, r3
}
 8005fd0:	46c0      	nop			@ (mov r8, r8)
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	689a      	ldr	r2, [r3, #8]
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	2101      	movs	r1, #1
 8005fde:	438a      	bics	r2, r1
 8005fe0:	609a      	str	r2, [r3, #8]
 8005fe2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fe4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005fe6:	6a3b      	ldr	r3, [r7, #32]
 8005fe8:	f383 8810 	msr	PRIMASK, r3
}
 8005fec:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	228c      	movs	r2, #140	@ 0x8c
 8005ff2:	2120      	movs	r1, #32
 8005ff4:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	2284      	movs	r2, #132	@ 0x84
 8005ffa:	2100      	movs	r1, #0
 8005ffc:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005ffe:	2303      	movs	r3, #3
 8006000:	e012      	b.n	8006028 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2288      	movs	r2, #136	@ 0x88
 8006006:	2120      	movs	r1, #32
 8006008:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	228c      	movs	r2, #140	@ 0x8c
 800600e:	2120      	movs	r1, #32
 8006010:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2200      	movs	r2, #0
 8006016:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2200      	movs	r2, #0
 800601c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	2284      	movs	r2, #132	@ 0x84
 8006022:	2100      	movs	r1, #0
 8006024:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006026:	2300      	movs	r3, #0
}
 8006028:	0018      	movs	r0, r3
 800602a:	46bd      	mov	sp, r7
 800602c:	b010      	add	sp, #64	@ 0x40
 800602e:	bd80      	pop	{r7, pc}
 8006030:	01ffffff 	.word	0x01ffffff
 8006034:	fffffedf 	.word	0xfffffedf

08006038 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006038:	b580      	push	{r7, lr}
 800603a:	b084      	sub	sp, #16
 800603c:	af00      	add	r7, sp, #0
 800603e:	60f8      	str	r0, [r7, #12]
 8006040:	60b9      	str	r1, [r7, #8]
 8006042:	603b      	str	r3, [r7, #0]
 8006044:	1dfb      	adds	r3, r7, #7
 8006046:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006048:	e051      	b.n	80060ee <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800604a:	69bb      	ldr	r3, [r7, #24]
 800604c:	3301      	adds	r3, #1
 800604e:	d04e      	beq.n	80060ee <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006050:	f7fb ffb2 	bl	8001fb8 <HAL_GetTick>
 8006054:	0002      	movs	r2, r0
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	1ad3      	subs	r3, r2, r3
 800605a:	69ba      	ldr	r2, [r7, #24]
 800605c:	429a      	cmp	r2, r3
 800605e:	d302      	bcc.n	8006066 <UART_WaitOnFlagUntilTimeout+0x2e>
 8006060:	69bb      	ldr	r3, [r7, #24]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d101      	bne.n	800606a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8006066:	2303      	movs	r3, #3
 8006068:	e051      	b.n	800610e <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	2204      	movs	r2, #4
 8006072:	4013      	ands	r3, r2
 8006074:	d03b      	beq.n	80060ee <UART_WaitOnFlagUntilTimeout+0xb6>
 8006076:	68bb      	ldr	r3, [r7, #8]
 8006078:	2b80      	cmp	r3, #128	@ 0x80
 800607a:	d038      	beq.n	80060ee <UART_WaitOnFlagUntilTimeout+0xb6>
 800607c:	68bb      	ldr	r3, [r7, #8]
 800607e:	2b40      	cmp	r3, #64	@ 0x40
 8006080:	d035      	beq.n	80060ee <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	69db      	ldr	r3, [r3, #28]
 8006088:	2208      	movs	r2, #8
 800608a:	4013      	ands	r3, r2
 800608c:	2b08      	cmp	r3, #8
 800608e:	d111      	bne.n	80060b4 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	2208      	movs	r2, #8
 8006096:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	0018      	movs	r0, r3
 800609c:	f000 f83c 	bl	8006118 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	2290      	movs	r2, #144	@ 0x90
 80060a4:	2108      	movs	r1, #8
 80060a6:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	2284      	movs	r2, #132	@ 0x84
 80060ac:	2100      	movs	r1, #0
 80060ae:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80060b0:	2301      	movs	r3, #1
 80060b2:	e02c      	b.n	800610e <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	69da      	ldr	r2, [r3, #28]
 80060ba:	2380      	movs	r3, #128	@ 0x80
 80060bc:	011b      	lsls	r3, r3, #4
 80060be:	401a      	ands	r2, r3
 80060c0:	2380      	movs	r3, #128	@ 0x80
 80060c2:	011b      	lsls	r3, r3, #4
 80060c4:	429a      	cmp	r2, r3
 80060c6:	d112      	bne.n	80060ee <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	2280      	movs	r2, #128	@ 0x80
 80060ce:	0112      	lsls	r2, r2, #4
 80060d0:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	0018      	movs	r0, r3
 80060d6:	f000 f81f 	bl	8006118 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	2290      	movs	r2, #144	@ 0x90
 80060de:	2120      	movs	r1, #32
 80060e0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	2284      	movs	r2, #132	@ 0x84
 80060e6:	2100      	movs	r1, #0
 80060e8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80060ea:	2303      	movs	r3, #3
 80060ec:	e00f      	b.n	800610e <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	69db      	ldr	r3, [r3, #28]
 80060f4:	68ba      	ldr	r2, [r7, #8]
 80060f6:	4013      	ands	r3, r2
 80060f8:	68ba      	ldr	r2, [r7, #8]
 80060fa:	1ad3      	subs	r3, r2, r3
 80060fc:	425a      	negs	r2, r3
 80060fe:	4153      	adcs	r3, r2
 8006100:	b2db      	uxtb	r3, r3
 8006102:	001a      	movs	r2, r3
 8006104:	1dfb      	adds	r3, r7, #7
 8006106:	781b      	ldrb	r3, [r3, #0]
 8006108:	429a      	cmp	r2, r3
 800610a:	d09e      	beq.n	800604a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800610c:	2300      	movs	r3, #0
}
 800610e:	0018      	movs	r0, r3
 8006110:	46bd      	mov	sp, r7
 8006112:	b004      	add	sp, #16
 8006114:	bd80      	pop	{r7, pc}
	...

08006118 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006118:	b580      	push	{r7, lr}
 800611a:	b08e      	sub	sp, #56	@ 0x38
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006120:	f3ef 8310 	mrs	r3, PRIMASK
 8006124:	617b      	str	r3, [r7, #20]
  return(result);
 8006126:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006128:	637b      	str	r3, [r7, #52]	@ 0x34
 800612a:	2301      	movs	r3, #1
 800612c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800612e:	69bb      	ldr	r3, [r7, #24]
 8006130:	f383 8810 	msr	PRIMASK, r3
}
 8006134:	46c0      	nop			@ (mov r8, r8)
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	681a      	ldr	r2, [r3, #0]
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	4926      	ldr	r1, [pc, #152]	@ (80061dc <UART_EndRxTransfer+0xc4>)
 8006142:	400a      	ands	r2, r1
 8006144:	601a      	str	r2, [r3, #0]
 8006146:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006148:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800614a:	69fb      	ldr	r3, [r7, #28]
 800614c:	f383 8810 	msr	PRIMASK, r3
}
 8006150:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006152:	f3ef 8310 	mrs	r3, PRIMASK
 8006156:	623b      	str	r3, [r7, #32]
  return(result);
 8006158:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800615a:	633b      	str	r3, [r7, #48]	@ 0x30
 800615c:	2301      	movs	r3, #1
 800615e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006160:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006162:	f383 8810 	msr	PRIMASK, r3
}
 8006166:	46c0      	nop			@ (mov r8, r8)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	689a      	ldr	r2, [r3, #8]
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	491b      	ldr	r1, [pc, #108]	@ (80061e0 <UART_EndRxTransfer+0xc8>)
 8006174:	400a      	ands	r2, r1
 8006176:	609a      	str	r2, [r3, #8]
 8006178:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800617a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800617c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800617e:	f383 8810 	msr	PRIMASK, r3
}
 8006182:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006188:	2b01      	cmp	r3, #1
 800618a:	d118      	bne.n	80061be <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800618c:	f3ef 8310 	mrs	r3, PRIMASK
 8006190:	60bb      	str	r3, [r7, #8]
  return(result);
 8006192:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006194:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006196:	2301      	movs	r3, #1
 8006198:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	f383 8810 	msr	PRIMASK, r3
}
 80061a0:	46c0      	nop			@ (mov r8, r8)
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	681a      	ldr	r2, [r3, #0]
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	2110      	movs	r1, #16
 80061ae:	438a      	bics	r2, r1
 80061b0:	601a      	str	r2, [r3, #0]
 80061b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061b4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80061b6:	693b      	ldr	r3, [r7, #16]
 80061b8:	f383 8810 	msr	PRIMASK, r3
}
 80061bc:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	228c      	movs	r2, #140	@ 0x8c
 80061c2:	2120      	movs	r1, #32
 80061c4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	2200      	movs	r2, #0
 80061ca:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2200      	movs	r2, #0
 80061d0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80061d2:	46c0      	nop			@ (mov r8, r8)
 80061d4:	46bd      	mov	sp, r7
 80061d6:	b00e      	add	sp, #56	@ 0x38
 80061d8:	bd80      	pop	{r7, pc}
 80061da:	46c0      	nop			@ (mov r8, r8)
 80061dc:	fffffedf 	.word	0xfffffedf
 80061e0:	effffffe 	.word	0xeffffffe

080061e4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80061e4:	b580      	push	{r7, lr}
 80061e6:	b084      	sub	sp, #16
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061f0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	225e      	movs	r2, #94	@ 0x5e
 80061f6:	2100      	movs	r1, #0
 80061f8:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	2256      	movs	r2, #86	@ 0x56
 80061fe:	2100      	movs	r1, #0
 8006200:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	0018      	movs	r0, r3
 8006206:	f7ff fc01 	bl	8005a0c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800620a:	46c0      	nop			@ (mov r8, r8)
 800620c:	46bd      	mov	sp, r7
 800620e:	b004      	add	sp, #16
 8006210:	bd80      	pop	{r7, pc}

08006212 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006212:	b580      	push	{r7, lr}
 8006214:	b086      	sub	sp, #24
 8006216:	af00      	add	r7, sp, #0
 8006218:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800621a:	f3ef 8310 	mrs	r3, PRIMASK
 800621e:	60bb      	str	r3, [r7, #8]
  return(result);
 8006220:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006222:	617b      	str	r3, [r7, #20]
 8006224:	2301      	movs	r3, #1
 8006226:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	f383 8810 	msr	PRIMASK, r3
}
 800622e:	46c0      	nop			@ (mov r8, r8)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	681a      	ldr	r2, [r3, #0]
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	2140      	movs	r1, #64	@ 0x40
 800623c:	438a      	bics	r2, r1
 800623e:	601a      	str	r2, [r3, #0]
 8006240:	697b      	ldr	r3, [r7, #20]
 8006242:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006244:	693b      	ldr	r3, [r7, #16]
 8006246:	f383 8810 	msr	PRIMASK, r3
}
 800624a:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2288      	movs	r2, #136	@ 0x88
 8006250:	2120      	movs	r1, #32
 8006252:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2200      	movs	r2, #0
 8006258:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	0018      	movs	r0, r3
 800625e:	f7ff fbcd 	bl	80059fc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006262:	46c0      	nop			@ (mov r8, r8)
 8006264:	46bd      	mov	sp, r7
 8006266:	b006      	add	sp, #24
 8006268:	bd80      	pop	{r7, pc}

0800626a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800626a:	b580      	push	{r7, lr}
 800626c:	b082      	sub	sp, #8
 800626e:	af00      	add	r7, sp, #0
 8006270:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006272:	46c0      	nop			@ (mov r8, r8)
 8006274:	46bd      	mov	sp, r7
 8006276:	b002      	add	sp, #8
 8006278:	bd80      	pop	{r7, pc}

0800627a <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800627a:	b580      	push	{r7, lr}
 800627c:	b082      	sub	sp, #8
 800627e:	af00      	add	r7, sp, #0
 8006280:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8006282:	46c0      	nop			@ (mov r8, r8)
 8006284:	46bd      	mov	sp, r7
 8006286:	b002      	add	sp, #8
 8006288:	bd80      	pop	{r7, pc}

0800628a <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800628a:	b580      	push	{r7, lr}
 800628c:	b082      	sub	sp, #8
 800628e:	af00      	add	r7, sp, #0
 8006290:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8006292:	46c0      	nop			@ (mov r8, r8)
 8006294:	46bd      	mov	sp, r7
 8006296:	b002      	add	sp, #8
 8006298:	bd80      	pop	{r7, pc}
	...

0800629c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800629c:	b580      	push	{r7, lr}
 800629e:	b084      	sub	sp, #16
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2284      	movs	r2, #132	@ 0x84
 80062a8:	5c9b      	ldrb	r3, [r3, r2]
 80062aa:	2b01      	cmp	r3, #1
 80062ac:	d101      	bne.n	80062b2 <HAL_UARTEx_DisableFifoMode+0x16>
 80062ae:	2302      	movs	r3, #2
 80062b0:	e027      	b.n	8006302 <HAL_UARTEx_DisableFifoMode+0x66>
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	2284      	movs	r2, #132	@ 0x84
 80062b6:	2101      	movs	r1, #1
 80062b8:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	2288      	movs	r2, #136	@ 0x88
 80062be:	2124      	movs	r1, #36	@ 0x24
 80062c0:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	681a      	ldr	r2, [r3, #0]
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	2101      	movs	r1, #1
 80062d6:	438a      	bics	r2, r1
 80062d8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	4a0b      	ldr	r2, [pc, #44]	@ (800630c <HAL_UARTEx_DisableFifoMode+0x70>)
 80062de:	4013      	ands	r3, r2
 80062e0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	2200      	movs	r2, #0
 80062e6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	68fa      	ldr	r2, [r7, #12]
 80062ee:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2288      	movs	r2, #136	@ 0x88
 80062f4:	2120      	movs	r1, #32
 80062f6:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2284      	movs	r2, #132	@ 0x84
 80062fc:	2100      	movs	r1, #0
 80062fe:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006300:	2300      	movs	r3, #0
}
 8006302:	0018      	movs	r0, r3
 8006304:	46bd      	mov	sp, r7
 8006306:	b004      	add	sp, #16
 8006308:	bd80      	pop	{r7, pc}
 800630a:	46c0      	nop			@ (mov r8, r8)
 800630c:	dfffffff 	.word	0xdfffffff

08006310 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006310:	b580      	push	{r7, lr}
 8006312:	b084      	sub	sp, #16
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
 8006318:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2284      	movs	r2, #132	@ 0x84
 800631e:	5c9b      	ldrb	r3, [r3, r2]
 8006320:	2b01      	cmp	r3, #1
 8006322:	d101      	bne.n	8006328 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006324:	2302      	movs	r3, #2
 8006326:	e02e      	b.n	8006386 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2284      	movs	r2, #132	@ 0x84
 800632c:	2101      	movs	r1, #1
 800632e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2288      	movs	r2, #136	@ 0x88
 8006334:	2124      	movs	r1, #36	@ 0x24
 8006336:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	681a      	ldr	r2, [r3, #0]
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	2101      	movs	r1, #1
 800634c:	438a      	bics	r2, r1
 800634e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	689b      	ldr	r3, [r3, #8]
 8006356:	00db      	lsls	r3, r3, #3
 8006358:	08d9      	lsrs	r1, r3, #3
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	683a      	ldr	r2, [r7, #0]
 8006360:	430a      	orrs	r2, r1
 8006362:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	0018      	movs	r0, r3
 8006368:	f000 f854 	bl	8006414 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	68fa      	ldr	r2, [r7, #12]
 8006372:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2288      	movs	r2, #136	@ 0x88
 8006378:	2120      	movs	r1, #32
 800637a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2284      	movs	r2, #132	@ 0x84
 8006380:	2100      	movs	r1, #0
 8006382:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006384:	2300      	movs	r3, #0
}
 8006386:	0018      	movs	r0, r3
 8006388:	46bd      	mov	sp, r7
 800638a:	b004      	add	sp, #16
 800638c:	bd80      	pop	{r7, pc}
	...

08006390 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006390:	b580      	push	{r7, lr}
 8006392:	b084      	sub	sp, #16
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
 8006398:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2284      	movs	r2, #132	@ 0x84
 800639e:	5c9b      	ldrb	r3, [r3, r2]
 80063a0:	2b01      	cmp	r3, #1
 80063a2:	d101      	bne.n	80063a8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80063a4:	2302      	movs	r3, #2
 80063a6:	e02f      	b.n	8006408 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2284      	movs	r2, #132	@ 0x84
 80063ac:	2101      	movs	r1, #1
 80063ae:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2288      	movs	r2, #136	@ 0x88
 80063b4:	2124      	movs	r1, #36	@ 0x24
 80063b6:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	681a      	ldr	r2, [r3, #0]
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	2101      	movs	r1, #1
 80063cc:	438a      	bics	r2, r1
 80063ce:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	689b      	ldr	r3, [r3, #8]
 80063d6:	4a0e      	ldr	r2, [pc, #56]	@ (8006410 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 80063d8:	4013      	ands	r3, r2
 80063da:	0019      	movs	r1, r3
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	683a      	ldr	r2, [r7, #0]
 80063e2:	430a      	orrs	r2, r1
 80063e4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	0018      	movs	r0, r3
 80063ea:	f000 f813 	bl	8006414 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	68fa      	ldr	r2, [r7, #12]
 80063f4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	2288      	movs	r2, #136	@ 0x88
 80063fa:	2120      	movs	r1, #32
 80063fc:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	2284      	movs	r2, #132	@ 0x84
 8006402:	2100      	movs	r1, #0
 8006404:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006406:	2300      	movs	r3, #0
}
 8006408:	0018      	movs	r0, r3
 800640a:	46bd      	mov	sp, r7
 800640c:	b004      	add	sp, #16
 800640e:	bd80      	pop	{r7, pc}
 8006410:	f1ffffff 	.word	0xf1ffffff

08006414 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006414:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006416:	b085      	sub	sp, #20
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006420:	2b00      	cmp	r3, #0
 8006422:	d108      	bne.n	8006436 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	226a      	movs	r2, #106	@ 0x6a
 8006428:	2101      	movs	r1, #1
 800642a:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2268      	movs	r2, #104	@ 0x68
 8006430:	2101      	movs	r1, #1
 8006432:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006434:	e043      	b.n	80064be <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006436:	260f      	movs	r6, #15
 8006438:	19bb      	adds	r3, r7, r6
 800643a:	2208      	movs	r2, #8
 800643c:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800643e:	200e      	movs	r0, #14
 8006440:	183b      	adds	r3, r7, r0
 8006442:	2208      	movs	r2, #8
 8006444:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	689b      	ldr	r3, [r3, #8]
 800644c:	0e5b      	lsrs	r3, r3, #25
 800644e:	b2da      	uxtb	r2, r3
 8006450:	240d      	movs	r4, #13
 8006452:	193b      	adds	r3, r7, r4
 8006454:	2107      	movs	r1, #7
 8006456:	400a      	ands	r2, r1
 8006458:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	689b      	ldr	r3, [r3, #8]
 8006460:	0f5b      	lsrs	r3, r3, #29
 8006462:	b2da      	uxtb	r2, r3
 8006464:	250c      	movs	r5, #12
 8006466:	197b      	adds	r3, r7, r5
 8006468:	2107      	movs	r1, #7
 800646a:	400a      	ands	r2, r1
 800646c:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800646e:	183b      	adds	r3, r7, r0
 8006470:	781b      	ldrb	r3, [r3, #0]
 8006472:	197a      	adds	r2, r7, r5
 8006474:	7812      	ldrb	r2, [r2, #0]
 8006476:	4914      	ldr	r1, [pc, #80]	@ (80064c8 <UARTEx_SetNbDataToProcess+0xb4>)
 8006478:	5c8a      	ldrb	r2, [r1, r2]
 800647a:	435a      	muls	r2, r3
 800647c:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800647e:	197b      	adds	r3, r7, r5
 8006480:	781b      	ldrb	r3, [r3, #0]
 8006482:	4a12      	ldr	r2, [pc, #72]	@ (80064cc <UARTEx_SetNbDataToProcess+0xb8>)
 8006484:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006486:	0019      	movs	r1, r3
 8006488:	f7f9 ff20 	bl	80002cc <__divsi3>
 800648c:	0003      	movs	r3, r0
 800648e:	b299      	uxth	r1, r3
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	226a      	movs	r2, #106	@ 0x6a
 8006494:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006496:	19bb      	adds	r3, r7, r6
 8006498:	781b      	ldrb	r3, [r3, #0]
 800649a:	193a      	adds	r2, r7, r4
 800649c:	7812      	ldrb	r2, [r2, #0]
 800649e:	490a      	ldr	r1, [pc, #40]	@ (80064c8 <UARTEx_SetNbDataToProcess+0xb4>)
 80064a0:	5c8a      	ldrb	r2, [r1, r2]
 80064a2:	435a      	muls	r2, r3
 80064a4:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 80064a6:	193b      	adds	r3, r7, r4
 80064a8:	781b      	ldrb	r3, [r3, #0]
 80064aa:	4a08      	ldr	r2, [pc, #32]	@ (80064cc <UARTEx_SetNbDataToProcess+0xb8>)
 80064ac:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80064ae:	0019      	movs	r1, r3
 80064b0:	f7f9 ff0c 	bl	80002cc <__divsi3>
 80064b4:	0003      	movs	r3, r0
 80064b6:	b299      	uxth	r1, r3
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2268      	movs	r2, #104	@ 0x68
 80064bc:	5299      	strh	r1, [r3, r2]
}
 80064be:	46c0      	nop			@ (mov r8, r8)
 80064c0:	46bd      	mov	sp, r7
 80064c2:	b005      	add	sp, #20
 80064c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80064c6:	46c0      	nop			@ (mov r8, r8)
 80064c8:	08007e8c 	.word	0x08007e8c
 80064cc:	08007e94 	.word	0x08007e94

080064d0 <Reset_Handler>:



extern void Reset_Handler(void) __attribute__((__interrupt__));
void Reset_Handler(void)
{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b082      	sub	sp, #8
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	4b13      	ldr	r3, [pc, #76]	@ (8006524 <Reset_Handler+0x54>)
 80064d8:	607b      	str	r3, [r7, #4]
 80064da:	4b13      	ldr	r3, [pc, #76]	@ (8006528 <Reset_Handler+0x58>)
 80064dc:	603b      	str	r3, [r7, #0]
 80064de:	e007      	b.n	80064f0 <Reset_Handler+0x20>
 80064e0:	687a      	ldr	r2, [r7, #4]
 80064e2:	1d13      	adds	r3, r2, #4
 80064e4:	607b      	str	r3, [r7, #4]
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	1d19      	adds	r1, r3, #4
 80064ea:	6039      	str	r1, [r7, #0]
 80064ec:	6812      	ldr	r2, [r2, #0]
 80064ee:	601a      	str	r2, [r3, #0]
 80064f0:	683a      	ldr	r2, [r7, #0]
 80064f2:	4b0e      	ldr	r3, [pc, #56]	@ (800652c <Reset_Handler+0x5c>)
 80064f4:	429a      	cmp	r2, r3
 80064f6:	d3f3      	bcc.n	80064e0 <Reset_Handler+0x10>
 80064f8:	4b0d      	ldr	r3, [pc, #52]	@ (8006530 <Reset_Handler+0x60>)
 80064fa:	603b      	str	r3, [r7, #0]
 80064fc:	e004      	b.n	8006508 <Reset_Handler+0x38>
 80064fe:	683b      	ldr	r3, [r7, #0]
 8006500:	1d1a      	adds	r2, r3, #4
 8006502:	603a      	str	r2, [r7, #0]
 8006504:	2200      	movs	r2, #0
 8006506:	601a      	str	r2, [r3, #0]
 8006508:	683a      	ldr	r2, [r7, #0]
    while (dst < &_edata)
        *dst++ = *src++;

    // Zero out the .bss segment
    dst = &_sbss;
    while (dst < &_ebss)
 800650a:	4b0a      	ldr	r3, [pc, #40]	@ (8006534 <Reset_Handler+0x64>)
 800650c:	429a      	cmp	r2, r3
 800650e:	d3f6      	bcc.n	80064fe <Reset_Handler+0x2e>
        *dst++ = 0;

    VTOR_REG = (uint32_t)vectors;
 8006510:	4b09      	ldr	r3, [pc, #36]	@ (8006538 <Reset_Handler+0x68>)
 8006512:	4a0a      	ldr	r2, [pc, #40]	@ (800653c <Reset_Handler+0x6c>)
 8006514:	601a      	str	r2, [r3, #0]

    //__libc_init_array();

    main();
 8006516:	f7fa fe9f 	bl	8001258 <main>
}
 800651a:	46c0      	nop			@ (mov r8, r8)
 800651c:	46bd      	mov	sp, r7
 800651e:	b002      	add	sp, #8
 8006520:	bd80      	pop	{r7, pc}
 8006522:	46c0      	nop			@ (mov r8, r8)
 8006524:	0800806c 	.word	0x0800806c
 8006528:	20000000 	.word	0x20000000
 800652c:	20000138 	.word	0x20000138
 8006530:	20000138 	.word	0x20000138
 8006534:	20000740 	.word	0x20000740
 8006538:	e000ed08 	.word	0xe000ed08
 800653c:	080000b8 	.word	0x080000b8

08006540 <cyclic_fifo_queue_add_item>:
    queue->output_byte = 0x00;
}


unsigned int cyclic_fifo_queue_add_item(cyclic_fifo_queue_struct* queue, const void* new_item)
{
 8006540:	b580      	push	{r7, lr}
 8006542:	b084      	sub	sp, #16
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
 8006548:	6039      	str	r1, [r7, #0]
    if((queue->input + 1 != queue->output) && /* If there is one item's worth of room between the input and output indices. */
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	1c5a      	adds	r2, r3, #1
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	685b      	ldr	r3, [r3, #4]
 8006554:	429a      	cmp	r2, r3
 8006556:	d033      	beq.n	80065c0 <cyclic_fifo_queue_add_item+0x80>
       !((queue->input == queue->elements_in_array_minus_one) && (queue->output == 0))) /* Check for room again, this time accounting for a possible array wraparound. */
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681a      	ldr	r2, [r3, #0]
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	695b      	ldr	r3, [r3, #20]
    if((queue->input + 1 != queue->output) && /* If there is one item's worth of room between the input and output indices. */
 8006560:	429a      	cmp	r2, r3
 8006562:	d103      	bne.n	800656c <cyclic_fifo_queue_add_item+0x2c>
       !((queue->input == queue->elements_in_array_minus_one) && (queue->output == 0))) /* Check for room again, this time accounting for a possible array wraparound. */
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	685b      	ldr	r3, [r3, #4]
 8006568:	2b00      	cmp	r3, #0
 800656a:	d029      	beq.n	80065c0 <cyclic_fifo_queue_add_item+0x80>
    {
        /* We treat the void pointers as arrays of uint8_t. */
        uint8_t* array      = queue->array;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	699b      	ldr	r3, [r3, #24]
 8006570:	60fb      	str	r3, [r7, #12]
        const uint8_t* item = new_item;
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	60bb      	str	r3, [r7, #8]

        /* Copy the new item into the array. */
        (void)memcpy(&array[queue->input_byte], item, queue->item_size);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	689b      	ldr	r3, [r3, #8]
 800657a:	68fa      	ldr	r2, [r7, #12]
 800657c:	18d0      	adds	r0, r2, r3
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	691a      	ldr	r2, [r3, #16]
 8006582:	68bb      	ldr	r3, [r7, #8]
 8006584:	0019      	movs	r1, r3
 8006586:	f001 fbe5 	bl	8007d54 <memcpy>

        /* Increment the input index. */
        if(queue->input >= queue->elements_in_array_minus_one)
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681a      	ldr	r2, [r3, #0]
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	695b      	ldr	r3, [r3, #20]
 8006592:	429a      	cmp	r2, r3
 8006594:	d306      	bcc.n	80065a4 <cyclic_fifo_queue_add_item+0x64>
        {
            /* The input index has run past the end of the array, so we're 
             * wrapping it around to 0.
             */
            queue->input      = 0;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	2200      	movs	r2, #0
 800659a:	601a      	str	r2, [r3, #0]
            queue->input_byte = 0;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2200      	movs	r2, #0
 80065a0:	609a      	str	r2, [r3, #8]
 80065a2:	e00b      	b.n	80065bc <cyclic_fifo_queue_add_item+0x7c>
        }
        else
        {
            queue->input++;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	1c5a      	adds	r2, r3, #1
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	601a      	str	r2, [r3, #0]

            /* Keep track of input * item_size to avoid a multiplication in the memcpy(). */
            queue->input_byte += queue->item_size; 
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	689a      	ldr	r2, [r3, #8]
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	691b      	ldr	r3, [r3, #16]
 80065b6:	18d2      	adds	r2, r2, r3
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	609a      	str	r2, [r3, #8]
        }

        return 0; /* success */
 80065bc:	2300      	movs	r3, #0
 80065be:	e000      	b.n	80065c2 <cyclic_fifo_queue_add_item+0x82>
    }

    return 1; /* failure: queue full */
 80065c0:	2301      	movs	r3, #1
}
 80065c2:	0018      	movs	r0, r3
 80065c4:	46bd      	mov	sp, r7
 80065c6:	b004      	add	sp, #16
 80065c8:	bd80      	pop	{r7, pc}

080065ca <cyclic_fifo_queue_get_item>:


unsigned int cyclic_fifo_queue_get_item(cyclic_fifo_queue_struct* queue, void* item)
{
 80065ca:	b580      	push	{r7, lr}
 80065cc:	b084      	sub	sp, #16
 80065ce:	af00      	add	r7, sp, #0
 80065d0:	6078      	str	r0, [r7, #4]
 80065d2:	6039      	str	r1, [r7, #0]
    if(queue->input == queue->output)
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681a      	ldr	r2, [r3, #0]
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	685b      	ldr	r3, [r3, #4]
 80065dc:	429a      	cmp	r2, r3
 80065de:	d101      	bne.n	80065e4 <cyclic_fifo_queue_get_item+0x1a>
    {
        return 1; /* failure: queue empty */
 80065e0:	2301      	movs	r3, #1
 80065e2:	e028      	b.n	8006636 <cyclic_fifo_queue_get_item+0x6c>
    }
    else
    {
        /* We treat the void pointers as arrays of uint8_t. */
        uint8_t* array = queue->array;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	699b      	ldr	r3, [r3, #24]
 80065e8:	60fb      	str	r3, [r7, #12]
        uint8_t* output_item = item;
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	60bb      	str	r3, [r7, #8]

        /* Copy the next item from the array into the output variable. */
        (void)memcpy(output_item, &array[queue->output_byte], queue->item_size);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	68db      	ldr	r3, [r3, #12]
 80065f2:	68fa      	ldr	r2, [r7, #12]
 80065f4:	18d1      	adds	r1, r2, r3
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	691a      	ldr	r2, [r3, #16]
 80065fa:	68bb      	ldr	r3, [r7, #8]
 80065fc:	0018      	movs	r0, r3
 80065fe:	f001 fba9 	bl	8007d54 <memcpy>

        /* Increment the output index. */
        if(queue->output >= queue->elements_in_array_minus_one)
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	685a      	ldr	r2, [r3, #4]
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	695b      	ldr	r3, [r3, #20]
 800660a:	429a      	cmp	r2, r3
 800660c:	d306      	bcc.n	800661c <cyclic_fifo_queue_get_item+0x52>
        {
            /* The output index has run past the end of the array, so we're 
             * wrapping it around to 0.
             */
            queue->output      = 0;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	2200      	movs	r2, #0
 8006612:	605a      	str	r2, [r3, #4]
            queue->output_byte = 0;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2200      	movs	r2, #0
 8006618:	60da      	str	r2, [r3, #12]
 800661a:	e00b      	b.n	8006634 <cyclic_fifo_queue_get_item+0x6a>
        }
        else
        {
            queue->output++;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	685b      	ldr	r3, [r3, #4]
 8006620:	1c5a      	adds	r2, r3, #1
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	605a      	str	r2, [r3, #4]

            /* Keep track of output * item_size to avoid a multiplication in the memcpy(). */
            queue->output_byte += queue->item_size;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	68da      	ldr	r2, [r3, #12]
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	691b      	ldr	r3, [r3, #16]
 800662e:	18d2      	adds	r2, r2, r3
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	60da      	str	r2, [r3, #12]
        }
    }

    return 0; /* success */
 8006634:	2300      	movs	r3, #0
}
 8006636:	0018      	movs	r0, r3
 8006638:	46bd      	mov	sp, r7
 800663a:	b004      	add	sp, #16
 800663c:	bd80      	pop	{r7, pc}

0800663e <read_mem>:
#define NOT_INVALIDATED_MARKER      0xFF

typedef uint32_t key_t;				/* Assume key's will never be larger than 32 bits. This is mainly for reading. fcs->bytes_per_key is used for writing */

static void read_mem( const flash_controller_struct *fcs, const uint8_t *start, uint8_t *buffer, size_t length_minus_one )
{
 800663e:	b580      	push	{r7, lr}
 8006640:	b084      	sub	sp, #16
 8006642:	af00      	add	r7, sp, #0
 8006644:	60f8      	str	r0, [r7, #12]
 8006646:	60b9      	str	r1, [r7, #8]
 8006648:	607a      	str	r2, [r7, #4]
 800664a:	603b      	str	r3, [r7, #0]
	// Flash callback can be for external memory or it can be just direct access to internal memory
	if( fcs->flash_read_callback )
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	699b      	ldr	r3, [r3, #24]
 8006650:	2b00      	cmp	r3, #0
 8006652:	d006      	beq.n	8006662 <read_mem+0x24>
	{
		fcs->flash_read_callback( (uint8_t*)start, buffer, length_minus_one );
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	699b      	ldr	r3, [r3, #24]
 8006658:	683a      	ldr	r2, [r7, #0]
 800665a:	6879      	ldr	r1, [r7, #4]
 800665c:	68b8      	ldr	r0, [r7, #8]
 800665e:	4798      	blx	r3
	else
	{
		// If no callback is provided, assume we are on internal flash and memory is directly accessible by a pointer as originally designed
		memcpy( buffer, start, length_minus_one + 1);
	}
}
 8006660:	e006      	b.n	8006670 <read_mem+0x32>
		memcpy( buffer, start, length_minus_one + 1);
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	1c5a      	adds	r2, r3, #1
 8006666:	68b9      	ldr	r1, [r7, #8]
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	0018      	movs	r0, r3
 800666c:	f001 fb72 	bl	8007d54 <memcpy>
}
 8006670:	46c0      	nop			@ (mov r8, r8)
 8006672:	46bd      	mov	sp, r7
 8006674:	b004      	add	sp, #16
 8006676:	bd80      	pop	{r7, pc}

08006678 <point_to_value_from_index>:

static const uint8_t* point_to_value_from_index(const flash_controller_struct *fcs,
                                                const uint8_t *index,
                                                const uint8_t* sector_group_start)
{
 8006678:	b580      	push	{r7, lr}
 800667a:	b086      	sub	sp, #24
 800667c:	af00      	add	r7, sp, #0
 800667e:	60f8      	str	r0, [r7, #12]
 8006680:	60b9      	str	r1, [r7, #8]
 8006682:	607a      	str	r2, [r7, #4]
    uint16_t offset; /* offset is stored as 2 bytes, big-endian */

    read_mem( fcs, index + (fcs->minimum_writeable_bytes * 2) + fcs->bytes_per_key, fcs->scratchpadBuffer, sizeof(offset) - 1);
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	791b      	ldrb	r3, [r3, #4]
 8006688:	005b      	lsls	r3, r3, #1
 800668a:	001a      	movs	r2, r3
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	795b      	ldrb	r3, [r3, #5]
 8006690:	18d3      	adds	r3, r2, r3
 8006692:	68ba      	ldr	r2, [r7, #8]
 8006694:	18d1      	adds	r1, r2, r3
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800669a:	68f8      	ldr	r0, [r7, #12]
 800669c:	2301      	movs	r3, #1
 800669e:	f7ff ffce 	bl	800663e <read_mem>

    /* convert big-endian bytes into one uint16_t */
    offset = (fcs->scratchpadBuffer[0] << 8) | fcs->scratchpadBuffer[1];
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80066a6:	781b      	ldrb	r3, [r3, #0]
 80066a8:	b21b      	sxth	r3, r3
 80066aa:	021b      	lsls	r3, r3, #8
 80066ac:	b21a      	sxth	r2, r3
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80066b2:	3301      	adds	r3, #1
 80066b4:	781b      	ldrb	r3, [r3, #0]
 80066b6:	b21b      	sxth	r3, r3
 80066b8:	4313      	orrs	r3, r2
 80066ba:	b21a      	sxth	r2, r3
 80066bc:	2116      	movs	r1, #22
 80066be:	187b      	adds	r3, r7, r1
 80066c0:	801a      	strh	r2, [r3, #0]

    /* The offset is an offset from the beginning of the sector group.  So
     * convert the two byte offset into an actual address.
     */
    return sector_group_start + offset;
 80066c2:	187b      	adds	r3, r7, r1
 80066c4:	881b      	ldrh	r3, [r3, #0]
 80066c6:	687a      	ldr	r2, [r7, #4]
 80066c8:	18d3      	adds	r3, r2, r3
}
 80066ca:	0018      	movs	r0, r3
 80066cc:	46bd      	mov	sp, r7
 80066ce:	b006      	add	sp, #24
 80066d0:	bd80      	pop	{r7, pc}

080066d2 <get_active_sector_group_address>:


static const uint8_t* get_active_sector_group_address(const flash_controller_struct *fcs)
{
 80066d2:	b580      	push	{r7, lr}
 80066d4:	b082      	sub	sp, #8
 80066d6:	af00      	add	r7, sp, #0
 80066d8:	6078      	str	r0, [r7, #4]
	read_mem( fcs, fcs->second_sector_group_start, &fcs->scratchpadBuffer[0], 0);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	68d9      	ldr	r1, [r3, #12]
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80066e2:	6878      	ldr	r0, [r7, #4]
 80066e4:	2300      	movs	r3, #0
 80066e6:	f7ff ffaa 	bl	800663e <read_mem>

	return fcs->scratchpadBuffer[0] /*fcs->second_sector_group_start[0]*/ != NOT_VALIDATED_MARKER ? fcs->second_sector_group_start : fcs->first_sector_group_start;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80066ee:	781b      	ldrb	r3, [r3, #0]
 80066f0:	2bff      	cmp	r3, #255	@ 0xff
 80066f2:	d002      	beq.n	80066fa <get_active_sector_group_address+0x28>
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	68db      	ldr	r3, [r3, #12]
 80066f8:	e001      	b.n	80066fe <get_active_sector_group_address+0x2c>
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	689b      	ldr	r3, [r3, #8]
}
 80066fe:	0018      	movs	r0, r3
 8006700:	46bd      	mov	sp, r7
 8006702:	b002      	add	sp, #8
 8006704:	bd80      	pop	{r7, pc}

08006706 <get_last_address_of_sector_group>:


static const uint8_t* get_last_address_of_sector_group(const flash_controller_struct *fcs, const uint8_t* sector_group_start)
{
 8006706:	b580      	push	{r7, lr}
 8006708:	b082      	sub	sp, #8
 800670a:	af00      	add	r7, sp, #0
 800670c:	6078      	str	r0, [r7, #4]
 800670e:	6039      	str	r1, [r7, #0]
    return sector_group_start + fcs->sector_group_length_minus_one;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	683a      	ldr	r2, [r7, #0]
 8006716:	18d3      	adds	r3, r2, r3
}
 8006718:	0018      	movs	r0, r3
 800671a:	46bd      	mov	sp, r7
 800671c:	b002      	add	sp, #8
 800671e:	bd80      	pop	{r7, pc}

08006720 <get_sizeof_index_location>:


static size_t get_sizeof_index_location(const flash_controller_struct *fcs)
{
 8006720:	b580      	push	{r7, lr}
 8006722:	b084      	sub	sp, #16
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
	// The size of the index location must be a multiple of fcs->minimum_writeable_bytes.

	// Start by calculating the size of the information to be written into the index location:
	size_t indexLocationSize = (fcs->minimum_writeable_bytes * 2) + fcs->bytes_per_key + BYTES_OF_OFFSET_FIELD + BYTES_OF_LENGTH_FIELD;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	791b      	ldrb	r3, [r3, #4]
 800672c:	005b      	lsls	r3, r3, #1
 800672e:	687a      	ldr	r2, [r7, #4]
 8006730:	7952      	ldrb	r2, [r2, #5]
 8006732:	189b      	adds	r3, r3, r2
 8006734:	3303      	adds	r3, #3
 8006736:	60fb      	str	r3, [r7, #12]

	// Now if necessary, add bytes to the length until it is a multiple of fcs->minimum_writeable_bytes:
	while (indexLocationSize & (fcs->minimum_writeable_bytes - 1))
 8006738:	e002      	b.n	8006740 <get_sizeof_index_location+0x20>
	{
		// indexLocationSize isn't a multiple of fcs->minimum_writeable_bytes yet so add one to the size and check again.
		++indexLocationSize;
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	3301      	adds	r3, #1
 800673e:	60fb      	str	r3, [r7, #12]
	while (indexLocationSize & (fcs->minimum_writeable_bytes - 1))
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	791b      	ldrb	r3, [r3, #4]
 8006744:	3b01      	subs	r3, #1
 8006746:	001a      	movs	r2, r3
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	4013      	ands	r3, r2
 800674c:	d1f5      	bne.n	800673a <get_sizeof_index_location+0x1a>
	}

    return indexLocationSize;
 800674e:	68fb      	ldr	r3, [r7, #12]
}
 8006750:	0018      	movs	r0, r3
 8006752:	46bd      	mov	sp, r7
 8006754:	b004      	add	sp, #16
 8006756:	bd80      	pop	{r7, pc}

08006758 <is_all_0xFFs>:

static unsigned int is_all_0xFFs(const flash_controller_struct *fcs, const uint8_t start[], size_t length_minus_one)
{
 8006758:	b580      	push	{r7, lr}
 800675a:	b088      	sub	sp, #32
 800675c:	af00      	add	r7, sp, #0
 800675e:	60f8      	str	r0, [r7, #12]
 8006760:	60b9      	str	r1, [r7, #8]
 8006762:	607a      	str	r2, [r7, #4]
	size_t locLength = length_minus_one;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	61fb      	str	r3, [r7, #28]
	size_t readSize;
	size_t i = 0;
 8006768:	2300      	movs	r3, #0
 800676a:	617b      	str	r3, [r7, #20]

	while( locLength )
 800676c:	e02d      	b.n	80067ca <is_all_0xFFs+0x72>
	{
		readSize = locLength > fcs->scratchpadBufferSz ? fcs->scratchpadBufferSz : locLength;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006772:	69fb      	ldr	r3, [r7, #28]
 8006774:	4293      	cmp	r3, r2
 8006776:	d900      	bls.n	800677a <is_all_0xFFs+0x22>
 8006778:	0013      	movs	r3, r2
 800677a:	61bb      	str	r3, [r7, #24]
		read_mem( fcs, start, fcs->scratchpadBuffer, readSize-1);
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006780:	69bb      	ldr	r3, [r7, #24]
 8006782:	3b01      	subs	r3, #1
 8006784:	68b9      	ldr	r1, [r7, #8]
 8006786:	68f8      	ldr	r0, [r7, #12]
 8006788:	f7ff ff59 	bl	800663e <read_mem>
		locLength = locLength > fcs->scratchpadBufferSz ? locLength - fcs->scratchpadBufferSz : 0;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006790:	69fa      	ldr	r2, [r7, #28]
 8006792:	429a      	cmp	r2, r3
 8006794:	d904      	bls.n	80067a0 <is_all_0xFFs+0x48>
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800679a:	69fa      	ldr	r2, [r7, #28]
 800679c:	1ad3      	subs	r3, r2, r3
 800679e:	e000      	b.n	80067a2 <is_all_0xFFs+0x4a>
 80067a0:	2300      	movs	r3, #0
 80067a2:	61fb      	str	r3, [r7, #28]
		i = 0;
 80067a4:	2300      	movs	r3, #0
 80067a6:	617b      	str	r3, [r7, #20]
		// Check for all 0xFF
	    do
	    {
	        if(fcs->scratchpadBuffer[i++] != 0xFF)
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80067ac:	697b      	ldr	r3, [r7, #20]
 80067ae:	1c59      	adds	r1, r3, #1
 80067b0:	6179      	str	r1, [r7, #20]
 80067b2:	18d3      	adds	r3, r2, r3
 80067b4:	781b      	ldrb	r3, [r3, #0]
 80067b6:	2bff      	cmp	r3, #255	@ 0xff
 80067b8:	d001      	beq.n	80067be <is_all_0xFFs+0x66>
	        {
	            return 0; /* not all 0xFFs */
 80067ba:	2300      	movs	r3, #0
 80067bc:	e009      	b.n	80067d2 <is_all_0xFFs+0x7a>
	        }
	    } while(--readSize > 0);
 80067be:	69bb      	ldr	r3, [r7, #24]
 80067c0:	3b01      	subs	r3, #1
 80067c2:	61bb      	str	r3, [r7, #24]
 80067c4:	69bb      	ldr	r3, [r7, #24]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d1ee      	bne.n	80067a8 <is_all_0xFFs+0x50>
	while( locLength )
 80067ca:	69fb      	ldr	r3, [r7, #28]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d1ce      	bne.n	800676e <is_all_0xFFs+0x16>
	}
    return 1; /* all 0xFFs */
 80067d0:	2301      	movs	r3, #1
}
 80067d2:	0018      	movs	r0, r3
 80067d4:	46bd      	mov	sp, r7
 80067d6:	b008      	add	sp, #32
 80067d8:	bd80      	pop	{r7, pc}

080067da <is_index_location_empty>:


static unsigned int is_index_location_empty(const flash_controller_struct *fcs,
                                            const uint8_t *location)
{
 80067da:	b580      	push	{r7, lr}
 80067dc:	b082      	sub	sp, #8
 80067de:	af00      	add	r7, sp, #0
 80067e0:	6078      	str	r0, [r7, #4]
 80067e2:	6039      	str	r1, [r7, #0]
    /* Make sure all the bytes are unwritten. */
    return is_all_0xFFs(fcs, location, get_sizeof_index_location(fcs) - 1);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	0018      	movs	r0, r3
 80067e8:	f7ff ff9a 	bl	8006720 <get_sizeof_index_location>
 80067ec:	0003      	movs	r3, r0
 80067ee:	1e5a      	subs	r2, r3, #1
 80067f0:	6839      	ldr	r1, [r7, #0]
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	0018      	movs	r0, r3
 80067f6:	f7ff ffaf 	bl	8006758 <is_all_0xFFs>
 80067fa:	0003      	movs	r3, r0
}
 80067fc:	0018      	movs	r0, r3
 80067fe:	46bd      	mov	sp, r7
 8006800:	b002      	add	sp, #8
 8006802:	bd80      	pop	{r7, pc}

08006804 <get_next_index_location>:


/* Used or unused.  Might not even be valid! */
static const uint8_t* get_next_index_location(const flash_controller_struct *fcs, const uint8_t *index)
{
 8006804:	b580      	push	{r7, lr}
 8006806:	b082      	sub	sp, #8
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
 800680c:	6039      	str	r1, [r7, #0]
    return index + get_sizeof_index_location(fcs);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	0018      	movs	r0, r3
 8006812:	f7ff ff85 	bl	8006720 <get_sizeof_index_location>
 8006816:	0002      	movs	r2, r0
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	189b      	adds	r3, r3, r2
}
 800681c:	0018      	movs	r0, r3
 800681e:	46bd      	mov	sp, r7
 8006820:	b002      	add	sp, #8
 8006822:	bd80      	pop	{r7, pc}

08006824 <get_prev_index_location>:

static const uint8_t* get_prev_index_location(const flash_controller_struct *fcs, const uint8_t *index)
{
 8006824:	b580      	push	{r7, lr}
 8006826:	b082      	sub	sp, #8
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
 800682c:	6039      	str	r1, [r7, #0]
	return index - get_sizeof_index_location(fcs);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	0018      	movs	r0, r3
 8006832:	f7ff ff75 	bl	8006720 <get_sizeof_index_location>
 8006836:	0003      	movs	r3, r0
 8006838:	425b      	negs	r3, r3
 800683a:	683a      	ldr	r2, [r7, #0]
 800683c:	18d3      	adds	r3, r2, r3
}
 800683e:	0018      	movs	r0, r3
 8006840:	46bd      	mov	sp, r7
 8006842:	b002      	add	sp, #8
 8006844:	bd80      	pop	{r7, pc}

08006846 <get_next_unused_index_location>:

/* Next unused slot for a index record*/
static const uint8_t* get_next_unused_index_location(const flash_controller_struct *fcs, const uint8_t* sector_group_start)
{
 8006846:	b580      	push	{r7, lr}
 8006848:	b084      	sub	sp, #16
 800684a:	af00      	add	r7, sp, #0
 800684c:	6078      	str	r0, [r7, #4]
 800684e:	6039      	str	r1, [r7, #0]
    const uint8_t *index;
    const uint8_t *last_sector_address = sector_group_start + fcs->sector_group_length_minus_one;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	683a      	ldr	r2, [r7, #0]
 8006856:	18d3      	adds	r3, r2, r3
 8006858:	60bb      	str	r3, [r7, #8]
    index = sector_group_start;
 800685a:	683b      	ldr	r3, [r7, #0]
 800685c:	60fb      	str	r3, [r7, #12]

    while(index <= last_sector_address)
 800685e:	e00f      	b.n	8006880 <get_next_unused_index_location+0x3a>
    {
        if(0 != is_index_location_empty(fcs, index))
 8006860:	68fa      	ldr	r2, [r7, #12]
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	0011      	movs	r1, r2
 8006866:	0018      	movs	r0, r3
 8006868:	f7ff ffb7 	bl	80067da <is_index_location_empty>
 800686c:	1e03      	subs	r3, r0, #0
 800686e:	d10c      	bne.n	800688a <get_next_unused_index_location+0x44>
        {
            break;
        }
        
        index = get_next_index_location(fcs, index);
 8006870:	68fa      	ldr	r2, [r7, #12]
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	0011      	movs	r1, r2
 8006876:	0018      	movs	r0, r3
 8006878:	f7ff ffc4 	bl	8006804 <get_next_index_location>
 800687c:	0003      	movs	r3, r0
 800687e:	60fb      	str	r3, [r7, #12]
    while(index <= last_sector_address)
 8006880:	68fa      	ldr	r2, [r7, #12]
 8006882:	68bb      	ldr	r3, [r7, #8]
 8006884:	429a      	cmp	r2, r3
 8006886:	d9eb      	bls.n	8006860 <get_next_unused_index_location+0x1a>
 8006888:	e000      	b.n	800688c <get_next_unused_index_location+0x46>
            break;
 800688a:	46c0      	nop			@ (mov r8, r8)
    }

    return index;
 800688c:	68fb      	ldr	r3, [r7, #12]
}
 800688e:	0018      	movs	r0, r3
 8006890:	46bd      	mov	sp, r7
 8006892:	b004      	add	sp, #16
 8006894:	bd80      	pop	{r7, pc}

08006896 <is_index_valid>:

static unsigned int is_index_valid(const flash_controller_struct *fcs, const uint8_t *index)
{
 8006896:	b5b0      	push	{r4, r5, r7, lr}
 8006898:	b084      	sub	sp, #16
 800689a:	af00      	add	r7, sp, #0
 800689c:	6078      	str	r0, [r7, #4]
 800689e:	6039      	str	r1, [r7, #0]
	uint8_t index_data;
	uint8_t index_plus_min_byte_offset;

	read_mem( fcs, index, &index_data, 0);
 80068a0:	240f      	movs	r4, #15
 80068a2:	193a      	adds	r2, r7, r4
 80068a4:	6839      	ldr	r1, [r7, #0]
 80068a6:	6878      	ldr	r0, [r7, #4]
 80068a8:	2300      	movs	r3, #0
 80068aa:	f7ff fec8 	bl	800663e <read_mem>
	read_mem( fcs, index + fcs->minimum_writeable_bytes, &index_plus_min_byte_offset, 0);
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	791b      	ldrb	r3, [r3, #4]
 80068b2:	001a      	movs	r2, r3
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	1899      	adds	r1, r3, r2
 80068b8:	250e      	movs	r5, #14
 80068ba:	197a      	adds	r2, r7, r5
 80068bc:	6878      	ldr	r0, [r7, #4]
 80068be:	2300      	movs	r3, #0
 80068c0:	f7ff febd 	bl	800663e <read_mem>

	return ( index_data/*index[0]*/ != NOT_VALIDATED_MARKER) && ( index_plus_min_byte_offset /*index[fcs->minimum_writeable_bytes]*/ == NOT_INVALIDATED_MARKER);
 80068c4:	193b      	adds	r3, r7, r4
 80068c6:	781b      	ldrb	r3, [r3, #0]
 80068c8:	2bff      	cmp	r3, #255	@ 0xff
 80068ca:	d005      	beq.n	80068d8 <is_index_valid+0x42>
 80068cc:	197b      	adds	r3, r7, r5
 80068ce:	781b      	ldrb	r3, [r3, #0]
 80068d0:	2bff      	cmp	r3, #255	@ 0xff
 80068d2:	d101      	bne.n	80068d8 <is_index_valid+0x42>
 80068d4:	2301      	movs	r3, #1
 80068d6:	e000      	b.n	80068da <is_index_valid+0x44>
 80068d8:	2300      	movs	r3, #0
}
 80068da:	0018      	movs	r0, r3
 80068dc:	46bd      	mov	sp, r7
 80068de:	b004      	add	sp, #16
 80068e0:	bdb0      	pop	{r4, r5, r7, pc}

080068e2 <has_index_ever_been_used>:

static unsigned int has_index_ever_been_used(const flash_controller_struct *fcs, const uint8_t *index)
{
 80068e2:	b580      	push	{r7, lr}
 80068e4:	b082      	sub	sp, #8
 80068e6:	af00      	add	r7, sp, #0
 80068e8:	6078      	str	r0, [r7, #4]
 80068ea:	6039      	str	r1, [r7, #0]
	if (fcs->migration.migrationInProgress == 0 || (fcs->migration.migrationInProgress == 1 && index != fcs->migration.firstIndexInNewGroup ))
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	7f1b      	ldrb	r3, [r3, #28]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d008      	beq.n	8006906 <has_index_ever_been_used+0x24>
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	7f1b      	ldrb	r3, [r3, #28]
 80068f8:	2b01      	cmp	r3, #1
 80068fa:	d10a      	bne.n	8006912 <has_index_ever_been_used+0x30>
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	6a1b      	ldr	r3, [r3, #32]
 8006900:	683a      	ldr	r2, [r7, #0]
 8006902:	429a      	cmp	r2, r3
 8006904:	d005      	beq.n	8006912 <has_index_ever_been_used+0x30>
		Validation = 0x00  Invalidation = 0xFF: This is a valid record
		Validation = 0x00  Invalidation = 0x00: This is an "invalid" record. This was old data and is safe to use.
		Any other value than 0xFF or 0x00 is technically invalid as it could be a bad write.
		*/
        /*return (index[0] != NOT_VALIDATED_MARKER);*/	/* Only need to check the validation field for this. Anything other than 0xFF then it should be usable*/
		return (index[0] == !NOT_VALIDATED_MARKER);	/* Only need to check the validation field for this. Anything other than 0xFF then it should be usable*/
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	781b      	ldrb	r3, [r3, #0]
 800690a:	425a      	negs	r2, r3
 800690c:	4153      	adcs	r3, r2
 800690e:	b2db      	uxtb	r3, r3
 8006910:	e000      	b.n	8006914 <has_index_ever_been_used+0x32>
	}
	/* If we are migrating, the first index will always fail this test so we just have to hope it is correct. */
	return 1;		
 8006912:	2301      	movs	r3, #1
}
 8006914:	0018      	movs	r0, r3
 8006916:	46bd      	mov	sp, r7
 8006918:	b002      	add	sp, #8
 800691a:	bd80      	pop	{r7, pc}

0800691c <get_last_used_index_location>:
}


/* returns void pointer if no indices are used yet */
static const uint8_t* get_last_used_index_location(const flash_controller_struct *fcs, const uint8_t* sector_group_start)
{
 800691c:	b580      	push	{r7, lr}
 800691e:	b084      	sub	sp, #16
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
 8006924:	6039      	str	r1, [r7, #0]
    /* Basically, just get the first unused one... */
    const uint8_t *index = get_next_unused_index_location(fcs, sector_group_start);
 8006926:	683a      	ldr	r2, [r7, #0]
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	0011      	movs	r1, r2
 800692c:	0018      	movs	r0, r3
 800692e:	f7ff ff8a 	bl	8006846 <get_next_unused_index_location>
 8006932:	0003      	movs	r3, r0
 8006934:	60fb      	str	r3, [r7, #12]

    /* ...and if this isn't the very first index, then... */
    if(sector_group_start != index)
 8006936:	683a      	ldr	r2, [r7, #0]
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	429a      	cmp	r2, r3
 800693c:	d028      	beq.n	8006990 <get_last_used_index_location+0x74>
    {
		// Start walking backwards to get the last good record. There could be corruption...
		// At the start of this loop, index is pointing to a group of blank erased bytes due to the call of get_next_unused_index_location		
		while (index != sector_group_start)
 800693e:	e023      	b.n	8006988 <get_last_used_index_location+0x6c>
		{
			index = get_prev_index_location(fcs, index);	/* ...go backwards one index. */
 8006940:	68fa      	ldr	r2, [r7, #12]
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	0011      	movs	r1, r2
 8006946:	0018      	movs	r0, r3
 8006948:	f7ff ff6c 	bl	8006824 <get_prev_index_location>
 800694c:	0003      	movs	r3, r0
 800694e:	60fb      	str	r3, [r7, #12]
			if (has_index_ever_been_used(fcs, index))
 8006950:	68fa      	ldr	r2, [r7, #12]
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	0011      	movs	r1, r2
 8006956:	0018      	movs	r0, r3
 8006958:	f7ff ffc3 	bl	80068e2 <has_index_ever_been_used>
 800695c:	1e03      	subs	r3, r0, #0
 800695e:	d013      	beq.n	8006988 <get_last_used_index_location+0x6c>
			{
				// In some cases, the validation field might be okay but the offset is invalid. We need to check bounds.
				const uint8_t *data_loc = point_to_value_from_index(fcs, index, sector_group_start);
 8006960:	683a      	ldr	r2, [r7, #0]
 8006962:	68f9      	ldr	r1, [r7, #12]
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	0018      	movs	r0, r3
 8006968:	f7ff fe86 	bl	8006678 <point_to_value_from_index>
 800696c:	0003      	movs	r3, r0
 800696e:	60bb      	str	r3, [r7, #8]
				if (!(data_loc > get_last_address_of_sector_group(fcs, sector_group_start)))
 8006970:	683a      	ldr	r2, [r7, #0]
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	0011      	movs	r1, r2
 8006976:	0018      	movs	r0, r3
 8006978:	f7ff fec5 	bl	8006706 <get_last_address_of_sector_group>
 800697c:	0002      	movs	r2, r0
 800697e:	68bb      	ldr	r3, [r7, #8]
 8006980:	4293      	cmp	r3, r2
 8006982:	d801      	bhi.n	8006988 <get_last_used_index_location+0x6c>
				{
					return index;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	e004      	b.n	8006992 <get_last_used_index_location+0x76>
		while (index != sector_group_start)
 8006988:	68fa      	ldr	r2, [r7, #12]
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	429a      	cmp	r2, r3
 800698e:	d1d7      	bne.n	8006940 <get_last_used_index_location+0x24>
#endif
			}
		}
    }

    return (void*)0; /* We found the very first index, which means no indices are used yet. */
 8006990:	2300      	movs	r3, #0
}
 8006992:	0018      	movs	r0, r3
 8006994:	46bd      	mov	sp, r7
 8006996:	b004      	add	sp, #16
 8006998:	bd80      	pop	{r7, pc}

0800699a <read_key_from_index>:
{
    return index + (fcs->minimum_writeable_bytes * 2);
}

static key_t read_key_from_index(const flash_controller_struct *fcs, const uint8_t *index)
{
 800699a:	b580      	push	{r7, lr}
 800699c:	b084      	sub	sp, #16
 800699e:	af00      	add	r7, sp, #0
 80069a0:	6078      	str	r0, [r7, #4]
 80069a2:	6039      	str	r1, [r7, #0]
	key_t key = 0;
 80069a4:	2300      	movs	r3, #0
 80069a6:	60fb      	str	r3, [r7, #12]
	read_mem( fcs, index + (fcs->minimum_writeable_bytes * 2), (uint8_t*)&key, fcs->bytes_per_key - 1);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	791b      	ldrb	r3, [r3, #4]
 80069ac:	005b      	lsls	r3, r3, #1
 80069ae:	001a      	movs	r2, r3
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	1899      	adds	r1, r3, r2
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	795b      	ldrb	r3, [r3, #5]
 80069b8:	3b01      	subs	r3, #1
 80069ba:	220c      	movs	r2, #12
 80069bc:	18ba      	adds	r2, r7, r2
 80069be:	6878      	ldr	r0, [r7, #4]
 80069c0:	f7ff fe3d 	bl	800663e <read_mem>
    //return &index[(fcs->minimum_writeable_bytes * 2)];
	return key;
 80069c4:	68fb      	ldr	r3, [r7, #12]
}
 80069c6:	0018      	movs	r0, r3
 80069c8:	46bd      	mov	sp, r7
 80069ca:	b004      	add	sp, #16
 80069cc:	bd80      	pop	{r7, pc}

080069ce <get_length_from_index>:

/* TODO: generalize to lengths other than one byte wide */
static size_t get_length_from_index(const flash_controller_struct *fcs,
                                    const uint8_t *index)
{
 80069ce:	b590      	push	{r4, r7, lr}
 80069d0:	b085      	sub	sp, #20
 80069d2:	af00      	add	r7, sp, #0
 80069d4:	6078      	str	r0, [r7, #4]
 80069d6:	6039      	str	r1, [r7, #0]
	uint8_t length;

	read_mem( fcs, index + (fcs->minimum_writeable_bytes * 2) + fcs->bytes_per_key + BYTES_OF_OFFSET_FIELD, &length, 0);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	791b      	ldrb	r3, [r3, #4]
 80069dc:	005b      	lsls	r3, r3, #1
 80069de:	001a      	movs	r2, r3
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	795b      	ldrb	r3, [r3, #5]
 80069e4:	18d3      	adds	r3, r2, r3
 80069e6:	3302      	adds	r3, #2
 80069e8:	683a      	ldr	r2, [r7, #0]
 80069ea:	18d1      	adds	r1, r2, r3
 80069ec:	240f      	movs	r4, #15
 80069ee:	193a      	adds	r2, r7, r4
 80069f0:	6878      	ldr	r0, [r7, #4]
 80069f2:	2300      	movs	r3, #0
 80069f4:	f7ff fe23 	bl	800663e <read_mem>
	return length;
 80069f8:	193b      	adds	r3, r7, r4
 80069fa:	781b      	ldrb	r3, [r3, #0]
//    return index[(fcs->minimum_writeable_bytes * 2) + fcs->bytes_per_key + BYTES_OF_OFFSET_FIELD];
}
 80069fc:	0018      	movs	r0, r3
 80069fe:	46bd      	mov	sp, r7
 8006a00:	b005      	add	sp, #20
 8006a02:	bd90      	pop	{r4, r7, pc}

08006a04 <convertKeyPtrToValue>:
    /* end of free space - start of free space gives us the size of the free space */
    return (size_t)(get_next_unused_value_location(fcs, sector_group_start) - get_next_unused_index_location(fcs, sector_group_start));
}

static key_t convertKeyPtrToValue( const flash_controller_struct *fcs, const uint8_t key[] )
{
 8006a04:	b580      	push	{r7, lr}
 8006a06:	b086      	sub	sp, #24
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
 8006a0c:	6039      	str	r1, [r7, #0]
    int i = 1;
 8006a0e:	2301      	movs	r3, #1
 8006a10:	60fb      	str	r3, [r7, #12]
    char *p = (char *)&i;
 8006a12:	230c      	movs	r3, #12
 8006a14:	18fb      	adds	r3, r7, r3
 8006a16:	613b      	str	r3, [r7, #16]
    key_t keyVal = 0;
 8006a18:	2300      	movs	r3, #0
 8006a1a:	617b      	str	r3, [r7, #20]
    if (p[0] == 1)	/*Little Endian*/
 8006a1c:	693b      	ldr	r3, [r7, #16]
 8006a1e:	781b      	ldrb	r3, [r3, #0]
 8006a20:	2b01      	cmp	r3, #1
 8006a22:	d129      	bne.n	8006a78 <convertKeyPtrToValue+0x74>
    {
    	switch( fcs->bytes_per_key )
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	795b      	ldrb	r3, [r3, #5]
 8006a28:	2b04      	cmp	r3, #4
 8006a2a:	d012      	beq.n	8006a52 <convertKeyPtrToValue+0x4e>
 8006a2c:	dc4e      	bgt.n	8006acc <convertKeyPtrToValue+0xc8>
 8006a2e:	2b01      	cmp	r3, #1
 8006a30:	d002      	beq.n	8006a38 <convertKeyPtrToValue+0x34>
 8006a32:	2b02      	cmp	r3, #2
 8006a34:	d004      	beq.n	8006a40 <convertKeyPtrToValue+0x3c>
 8006a36:	e049      	b.n	8006acc <convertKeyPtrToValue+0xc8>
    	{
    		case 1:	keyVal = *key;	break;
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	781b      	ldrb	r3, [r3, #0]
 8006a3c:	617b      	str	r3, [r7, #20]
 8006a3e:	e045      	b.n	8006acc <convertKeyPtrToValue+0xc8>
    		case 2: keyVal = ((*key + 1 ) << 8) | *key;	break;
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	781b      	ldrb	r3, [r3, #0]
 8006a44:	3301      	adds	r3, #1
 8006a46:	021b      	lsls	r3, r3, #8
 8006a48:	683a      	ldr	r2, [r7, #0]
 8006a4a:	7812      	ldrb	r2, [r2, #0]
 8006a4c:	4313      	orrs	r3, r2
 8006a4e:	617b      	str	r3, [r7, #20]
 8006a50:	e03c      	b.n	8006acc <convertKeyPtrToValue+0xc8>
    		case 4: keyVal = ((*(key + 3) ) << 24) | ((*(key + 2) ) << 16) | ((*(key + 1) ) << 8) | *key;	break;
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	3303      	adds	r3, #3
 8006a56:	781b      	ldrb	r3, [r3, #0]
 8006a58:	061a      	lsls	r2, r3, #24
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	3302      	adds	r3, #2
 8006a5e:	781b      	ldrb	r3, [r3, #0]
 8006a60:	041b      	lsls	r3, r3, #16
 8006a62:	431a      	orrs	r2, r3
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	3301      	adds	r3, #1
 8006a68:	781b      	ldrb	r3, [r3, #0]
 8006a6a:	021b      	lsls	r3, r3, #8
 8006a6c:	4313      	orrs	r3, r2
 8006a6e:	683a      	ldr	r2, [r7, #0]
 8006a70:	7812      	ldrb	r2, [r2, #0]
 8006a72:	4313      	orrs	r3, r2
 8006a74:	617b      	str	r3, [r7, #20]
 8006a76:	e029      	b.n	8006acc <convertKeyPtrToValue+0xc8>
    	}
    }
    else
    {
    	switch( fcs->bytes_per_key )
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	795b      	ldrb	r3, [r3, #5]
 8006a7c:	2b04      	cmp	r3, #4
 8006a7e:	d012      	beq.n	8006aa6 <convertKeyPtrToValue+0xa2>
 8006a80:	dc24      	bgt.n	8006acc <convertKeyPtrToValue+0xc8>
 8006a82:	2b01      	cmp	r3, #1
 8006a84:	d002      	beq.n	8006a8c <convertKeyPtrToValue+0x88>
 8006a86:	2b02      	cmp	r3, #2
 8006a88:	d004      	beq.n	8006a94 <convertKeyPtrToValue+0x90>
 8006a8a:	e01f      	b.n	8006acc <convertKeyPtrToValue+0xc8>
    	{
    		case 1:	keyVal = *key;	break;
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	781b      	ldrb	r3, [r3, #0]
 8006a90:	617b      	str	r3, [r7, #20]
 8006a92:	e01b      	b.n	8006acc <convertKeyPtrToValue+0xc8>
    		case 2: keyVal = ((*key ) << 8) | (*key + 1);	break;
 8006a94:	683b      	ldr	r3, [r7, #0]
 8006a96:	781b      	ldrb	r3, [r3, #0]
 8006a98:	021a      	lsls	r2, r3, #8
 8006a9a:	683b      	ldr	r3, [r7, #0]
 8006a9c:	781b      	ldrb	r3, [r3, #0]
 8006a9e:	3301      	adds	r3, #1
 8006aa0:	4313      	orrs	r3, r2
 8006aa2:	617b      	str	r3, [r7, #20]
 8006aa4:	e012      	b.n	8006acc <convertKeyPtrToValue+0xc8>
    		case 4: keyVal = ((*key ) << 24) | ((*(key + 1) ) << 16) | ((*(key + 2) ) << 8) | *(key + 3);	break;
 8006aa6:	683b      	ldr	r3, [r7, #0]
 8006aa8:	781b      	ldrb	r3, [r3, #0]
 8006aaa:	061a      	lsls	r2, r3, #24
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	3301      	adds	r3, #1
 8006ab0:	781b      	ldrb	r3, [r3, #0]
 8006ab2:	041b      	lsls	r3, r3, #16
 8006ab4:	431a      	orrs	r2, r3
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	3302      	adds	r3, #2
 8006aba:	781b      	ldrb	r3, [r3, #0]
 8006abc:	021b      	lsls	r3, r3, #8
 8006abe:	4313      	orrs	r3, r2
 8006ac0:	683a      	ldr	r2, [r7, #0]
 8006ac2:	3203      	adds	r2, #3
 8006ac4:	7812      	ldrb	r2, [r2, #0]
 8006ac6:	4313      	orrs	r3, r2
 8006ac8:	617b      	str	r3, [r7, #20]
 8006aca:	46c0      	nop			@ (mov r8, r8)
    	}
    }
    return keyVal;
 8006acc:	697b      	ldr	r3, [r7, #20]
}
 8006ace:	0018      	movs	r0, r3
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	b006      	add	sp, #24
 8006ad4:	bd80      	pop	{r7, pc}

08006ad6 <read>:
                   const uint8_t   key[],
                   uint8_t         value[],
                   size_t          value_size,
                   const uint8_t*  sector_group_start,
                   const uint8_t** index_location)
{
 8006ad6:	b590      	push	{r4, r7, lr}
 8006ad8:	b08b      	sub	sp, #44	@ 0x2c
 8006ada:	af00      	add	r7, sp, #0
 8006adc:	60f8      	str	r0, [r7, #12]
 8006ade:	60b9      	str	r1, [r7, #8]
 8006ae0:	607a      	str	r2, [r7, #4]
 8006ae2:	603b      	str	r3, [r7, #0]
    const uint8_t *last_address;
    const uint8_t *index = sector_group_start;
 8006ae4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ae6:	627b      	str	r3, [r7, #36]	@ 0x24
    last_address         = get_last_used_index_location(fcs, sector_group_start);
 8006ae8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	0011      	movs	r1, r2
 8006aee:	0018      	movs	r0, r3
 8006af0:	f7ff ff14 	bl	800691c <get_last_used_index_location>
 8006af4:	0003      	movs	r3, r0
 8006af6:	623b      	str	r3, [r7, #32]
    key_t readKey;
    key_t searchKey = convertKeyPtrToValue( fcs, key);
 8006af8:	68ba      	ldr	r2, [r7, #8]
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	0011      	movs	r1, r2
 8006afe:	0018      	movs	r0, r3
 8006b00:	f7ff ff80 	bl	8006a04 <convertKeyPtrToValue>
 8006b04:	0003      	movs	r3, r0
 8006b06:	61fb      	str	r3, [r7, #28]

    while(index <= last_address)
 8006b08:	e052      	b.n	8006bb0 <read+0xda>
    {
        /* if the index location's key matches our desired key */
    	readKey = read_key_from_index( fcs, index );
 8006b0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	0011      	movs	r1, r2
 8006b10:	0018      	movs	r0, r3
 8006b12:	f7ff ff42 	bl	800699a <read_key_from_index>
 8006b16:	0003      	movs	r3, r0
 8006b18:	61bb      	str	r3, [r7, #24]
    	if( readKey == searchKey )
 8006b1a:	69ba      	ldr	r2, [r7, #24]
 8006b1c:	69fb      	ldr	r3, [r7, #28]
 8006b1e:	429a      	cmp	r2, r3
 8006b20:	d13e      	bne.n	8006ba0 <read+0xca>
        {
            if(is_index_valid(fcs, index))
 8006b22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	0011      	movs	r1, r2
 8006b28:	0018      	movs	r0, r3
 8006b2a:	f7ff feb4 	bl	8006896 <is_index_valid>
 8006b2e:	1e03      	subs	r3, r0, #0
 8006b30:	d036      	beq.n	8006ba0 <read+0xca>
            {
                /* then copy the data and exit */
                size_t data_length = get_length_from_index(fcs, index);
 8006b32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	0011      	movs	r1, r2
 8006b38:	0018      	movs	r0, r3
 8006b3a:	f7ff ff48 	bl	80069ce <get_length_from_index>
 8006b3e:	0003      	movs	r3, r0
 8006b40:	617b      	str	r3, [r7, #20]
                value_size = value_size <= data_length ? value_size : data_length;
 8006b42:	697a      	ldr	r2, [r7, #20]
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	4293      	cmp	r3, r2
 8006b48:	d900      	bls.n	8006b4c <read+0x76>
 8006b4a:	0013      	movs	r3, r2
 8006b4c:	603b      	str	r3, [r7, #0]
                
                const uint8_t * data_ptr = point_to_value_from_index(fcs, index, sector_group_start);
 8006b4e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006b50:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	0018      	movs	r0, r3
 8006b56:	f7ff fd8f 	bl	8006678 <point_to_value_from_index>
 8006b5a:	0003      	movs	r3, r0
 8006b5c:	613b      	str	r3, [r7, #16]
				// Sanity check the memory address so we do not attempt to access invalid memory
                if( (( data_ptr + value_size )-1) > get_last_address_of_sector_group(fcs, sector_group_start))
 8006b5e:	683b      	ldr	r3, [r7, #0]
 8006b60:	3b01      	subs	r3, #1
 8006b62:	693a      	ldr	r2, [r7, #16]
 8006b64:	18d4      	adds	r4, r2, r3
 8006b66:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	0011      	movs	r1, r2
 8006b6c:	0018      	movs	r0, r3
 8006b6e:	f7ff fdca 	bl	8006706 <get_last_address_of_sector_group>
 8006b72:	0003      	movs	r3, r0
 8006b74:	429c      	cmp	r4, r3
 8006b76:	d901      	bls.n	8006b7c <read+0xa6>
                {
#if defined _MSC_VER || defined _WIN32 || defined __linux__ || defined linux /* On PC? */
                	printf("NVM appears corrupted. Data index 0x%X outside of 1K. Line %u in %s\r\n", (unsigned int)data_ptr, __LINE__, __func__);
#endif
					return 0; /* Error: could not find key */
 8006b78:	2300      	movs	r3, #0
 8006b7a:	e01e      	b.n	8006bba <read+0xe4>
                }

                /* The follow read replaces a memcpy. read_mem wants length -1 but this so adjust value_size for that*/
                read_mem( fcs, point_to_value_from_index(fcs, index, sector_group_start), value, value_size-1);
 8006b7c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006b7e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	0018      	movs	r0, r3
 8006b84:	f7ff fd78 	bl	8006678 <point_to_value_from_index>
 8006b88:	0001      	movs	r1, r0
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	3b01      	subs	r3, #1
 8006b8e:	687a      	ldr	r2, [r7, #4]
 8006b90:	68f8      	ldr	r0, [r7, #12]
 8006b92:	f7ff fd54 	bl	800663e <read_mem>
                *index_location = index;
 8006b96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b98:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006b9a:	601a      	str	r2, [r3, #0]
                return value_size;
 8006b9c:	683b      	ldr	r3, [r7, #0]
 8006b9e:	e00c      	b.n	8006bba <read+0xe4>
            }
        }

        index = get_next_index_location(fcs, index);
 8006ba0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	0011      	movs	r1, r2
 8006ba6:	0018      	movs	r0, r3
 8006ba8:	f7ff fe2c 	bl	8006804 <get_next_index_location>
 8006bac:	0003      	movs	r3, r0
 8006bae:	627b      	str	r3, [r7, #36]	@ 0x24
    while(index <= last_address)
 8006bb0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006bb2:	6a3b      	ldr	r3, [r7, #32]
 8006bb4:	429a      	cmp	r2, r3
 8006bb6:	d9a8      	bls.n	8006b0a <read+0x34>
    }

    return 0; /* Error: could not find key */
 8006bb8:	2300      	movs	r3, #0
}
 8006bba:	0018      	movs	r0, r3
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	b00b      	add	sp, #44	@ 0x2c
 8006bc0:	bd90      	pop	{r4, r7, pc}

08006bc2 <flash_controller_read>:

size_t flash_controller_read(const flash_controller_struct *fcs,
                             const uint8_t key[],
                             uint8_t       value[],
                             size_t        value_size)
{
 8006bc2:	b5b0      	push	{r4, r5, r7, lr}
 8006bc4:	b088      	sub	sp, #32
 8006bc6:	af02      	add	r7, sp, #8
 8006bc8:	60f8      	str	r0, [r7, #12]
 8006bca:	60b9      	str	r1, [r7, #8]
 8006bcc:	607a      	str	r2, [r7, #4]
 8006bce:	603b      	str	r3, [r7, #0]
    const uint8_t* dummy_index; /* not used, but can't be a void pointer */
    return read(fcs, key, value, value_size, get_active_sector_group_address(fcs), &dummy_index);
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	0018      	movs	r0, r3
 8006bd4:	f7ff fd7d 	bl	80066d2 <get_active_sector_group_address>
 8006bd8:	0005      	movs	r5, r0
 8006bda:	683c      	ldr	r4, [r7, #0]
 8006bdc:	687a      	ldr	r2, [r7, #4]
 8006bde:	68b9      	ldr	r1, [r7, #8]
 8006be0:	68f8      	ldr	r0, [r7, #12]
 8006be2:	2314      	movs	r3, #20
 8006be4:	18fb      	adds	r3, r7, r3
 8006be6:	9301      	str	r3, [sp, #4]
 8006be8:	9500      	str	r5, [sp, #0]
 8006bea:	0023      	movs	r3, r4
 8006bec:	f7ff ff73 	bl	8006ad6 <read>
 8006bf0:	0003      	movs	r3, r0
}
 8006bf2:	0018      	movs	r0, r3
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	b006      	add	sp, #24
 8006bf8:	bdb0      	pop	{r4, r5, r7, pc}
	...

08006bfc <uart_driver_init_this_uart>:
static void uartd_driver_buffered_byte_rx(uint8_t byte_rx);
static uint8_t uartd_driver_buffered_byte_tx(uint8_t* byte_to_tx);
#endif

uart_driver_t* uart_driver_init_this_uart(uint8_t thisUartNumber)
{
 8006bfc:	b590      	push	{r4, r7, lr}
 8006bfe:	b085      	sub	sp, #20
 8006c00:	af02      	add	r7, sp, #8
 8006c02:	0002      	movs	r2, r0
 8006c04:	1dfb      	adds	r3, r7, #7
 8006c06:	701a      	strb	r2, [r3, #0]
	return uart_driver_init(thisUartNumber,
				           (uart_hal_t*) &uart_defs[thisUartNumber].uart_hal,
 8006c08:	1dfb      	adds	r3, r7, #7
 8006c0a:	781a      	ldrb	r2, [r3, #0]
	return uart_driver_init(thisUartNumber,
 8006c0c:	0013      	movs	r3, r2
 8006c0e:	005b      	lsls	r3, r3, #1
 8006c10:	189b      	adds	r3, r3, r2
 8006c12:	00db      	lsls	r3, r3, #3
 8006c14:	4a0d      	ldr	r2, [pc, #52]	@ (8006c4c <uart_driver_init_this_uart+0x50>)
 8006c16:	1899      	adds	r1, r3, r2
						   uartDriverRxBuffers[thisUartNumber].rx_buf,
 8006c18:	1dfb      	adds	r3, r7, #7
 8006c1a:	781b      	ldrb	r3, [r3, #0]
 8006c1c:	01da      	lsls	r2, r3, #7
 8006c1e:	4b0c      	ldr	r3, [pc, #48]	@ (8006c50 <uart_driver_init_this_uart+0x54>)
 8006c20:	18d4      	adds	r4, r2, r3
						   RX_BUF_SIZE,
						   uartDriverRxBuffers[thisUartNumber].tx_buf,
 8006c22:	1dfb      	adds	r3, r7, #7
 8006c24:	781b      	ldrb	r3, [r3, #0]
 8006c26:	01db      	lsls	r3, r3, #7
 8006c28:	3340      	adds	r3, #64	@ 0x40
 8006c2a:	001a      	movs	r2, r3
 8006c2c:	4b08      	ldr	r3, [pc, #32]	@ (8006c50 <uart_driver_init_this_uart+0x54>)
 8006c2e:	18d3      	adds	r3, r2, r3
	return uart_driver_init(thisUartNumber,
 8006c30:	1dfa      	adds	r2, r7, #7
 8006c32:	7810      	ldrb	r0, [r2, #0]
 8006c34:	2240      	movs	r2, #64	@ 0x40
 8006c36:	9201      	str	r2, [sp, #4]
 8006c38:	9300      	str	r3, [sp, #0]
 8006c3a:	2340      	movs	r3, #64	@ 0x40
 8006c3c:	0022      	movs	r2, r4
 8006c3e:	f000 f809 	bl	8006c54 <uart_driver_init>
 8006c42:	0003      	movs	r3, r0
						   TX_BUF_SIZE);
}
 8006c44:	0018      	movs	r0, r3
 8006c46:	46bd      	mov	sp, r7
 8006c48:	b003      	add	sp, #12
 8006c4a:	bd90      	pop	{r4, r7, pc}
 8006c4c:	20000104 	.word	0x20000104
 8006c50:	2000060c 	.word	0x2000060c

08006c54 <uart_driver_init>:
  uart_hal_t* uart_hal,
  uint8_t* rx_buf,
  size_t rx_buf_size,
  uint8_t* tx_buf,
  size_t tx_buf_size)
{
 8006c54:	b590      	push	{r4, r7, lr}
 8006c56:	b085      	sub	sp, #20
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	60b9      	str	r1, [r7, #8]
 8006c5c:	607a      	str	r2, [r7, #4]
 8006c5e:	603b      	str	r3, [r7, #0]
 8006c60:	240f      	movs	r4, #15
 8006c62:	193b      	adds	r3, r7, r4
 8006c64:	1c02      	adds	r2, r0, #0
 8006c66:	701a      	strb	r2, [r3, #0]
	/* set the local member's pointer to the HAL config */
	inst_uart[uartIndex].uart_hal = uart_hal;
 8006c68:	193b      	adds	r3, r7, r4
 8006c6a:	781a      	ldrb	r2, [r3, #0]
 8006c6c:	4983      	ldr	r1, [pc, #524]	@ (8006e7c <uart_driver_init+0x228>)
 8006c6e:	0013      	movs	r3, r2
 8006c70:	011b      	lsls	r3, r3, #4
 8006c72:	189b      	adds	r3, r3, r2
 8006c74:	009b      	lsls	r3, r3, #2
 8006c76:	68ba      	ldr	r2, [r7, #8]
 8006c78:	505a      	str	r2, [r3, r1]

    /* Initialize RX Queue */
	inst_uart[uartIndex].rx_buf = rx_buf;
 8006c7a:	193b      	adds	r3, r7, r4
 8006c7c:	781a      	ldrb	r2, [r3, #0]
 8006c7e:	497f      	ldr	r1, [pc, #508]	@ (8006e7c <uart_driver_init+0x228>)
 8006c80:	0013      	movs	r3, r2
 8006c82:	011b      	lsls	r3, r3, #4
 8006c84:	189b      	adds	r3, r3, r2
 8006c86:	009b      	lsls	r3, r3, #2
 8006c88:	18cb      	adds	r3, r1, r3
 8006c8a:	3304      	adds	r3, #4
 8006c8c:	687a      	ldr	r2, [r7, #4]
 8006c8e:	601a      	str	r2, [r3, #0]
	inst_uart[uartIndex].rx_queue.input = 0U;
 8006c90:	193b      	adds	r3, r7, r4
 8006c92:	781a      	ldrb	r2, [r3, #0]
 8006c94:	4979      	ldr	r1, [pc, #484]	@ (8006e7c <uart_driver_init+0x228>)
 8006c96:	0013      	movs	r3, r2
 8006c98:	011b      	lsls	r3, r3, #4
 8006c9a:	189b      	adds	r3, r3, r2
 8006c9c:	009b      	lsls	r3, r3, #2
 8006c9e:	18cb      	adds	r3, r1, r3
 8006ca0:	330c      	adds	r3, #12
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	601a      	str	r2, [r3, #0]
	inst_uart[uartIndex].rx_queue.output = 0U;
 8006ca6:	193b      	adds	r3, r7, r4
 8006ca8:	781a      	ldrb	r2, [r3, #0]
 8006caa:	4974      	ldr	r1, [pc, #464]	@ (8006e7c <uart_driver_init+0x228>)
 8006cac:	0013      	movs	r3, r2
 8006cae:	011b      	lsls	r3, r3, #4
 8006cb0:	189b      	adds	r3, r3, r2
 8006cb2:	009b      	lsls	r3, r3, #2
 8006cb4:	18cb      	adds	r3, r1, r3
 8006cb6:	3310      	adds	r3, #16
 8006cb8:	2200      	movs	r2, #0
 8006cba:	601a      	str	r2, [r3, #0]
	inst_uart[uartIndex].rx_queue.input_byte = 0U;
 8006cbc:	193b      	adds	r3, r7, r4
 8006cbe:	781a      	ldrb	r2, [r3, #0]
 8006cc0:	496e      	ldr	r1, [pc, #440]	@ (8006e7c <uart_driver_init+0x228>)
 8006cc2:	0013      	movs	r3, r2
 8006cc4:	011b      	lsls	r3, r3, #4
 8006cc6:	189b      	adds	r3, r3, r2
 8006cc8:	009b      	lsls	r3, r3, #2
 8006cca:	18cb      	adds	r3, r1, r3
 8006ccc:	3314      	adds	r3, #20
 8006cce:	2200      	movs	r2, #0
 8006cd0:	601a      	str	r2, [r3, #0]
	inst_uart[uartIndex].rx_queue.output_byte = 0U;
 8006cd2:	193b      	adds	r3, r7, r4
 8006cd4:	781a      	ldrb	r2, [r3, #0]
 8006cd6:	4969      	ldr	r1, [pc, #420]	@ (8006e7c <uart_driver_init+0x228>)
 8006cd8:	0013      	movs	r3, r2
 8006cda:	011b      	lsls	r3, r3, #4
 8006cdc:	189b      	adds	r3, r3, r2
 8006cde:	009b      	lsls	r3, r3, #2
 8006ce0:	18cb      	adds	r3, r1, r3
 8006ce2:	3318      	adds	r3, #24
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	601a      	str	r2, [r3, #0]
	inst_uart[uartIndex].rx_queue.item_size = sizeof(inst_uart[uartIndex].rx_buf[0U]);
 8006ce8:	193b      	adds	r3, r7, r4
 8006cea:	781a      	ldrb	r2, [r3, #0]
 8006cec:	4963      	ldr	r1, [pc, #396]	@ (8006e7c <uart_driver_init+0x228>)
 8006cee:	0013      	movs	r3, r2
 8006cf0:	011b      	lsls	r3, r3, #4
 8006cf2:	189b      	adds	r3, r3, r2
 8006cf4:	009b      	lsls	r3, r3, #2
 8006cf6:	18cb      	adds	r3, r1, r3
 8006cf8:	331c      	adds	r3, #28
 8006cfa:	2201      	movs	r2, #1
 8006cfc:	601a      	str	r2, [r3, #0]
	inst_uart[uartIndex].rx_queue.elements_in_array_minus_one = rx_buf_size - 1U;
 8006cfe:	193b      	adds	r3, r7, r4
 8006d00:	781a      	ldrb	r2, [r3, #0]
 8006d02:	683b      	ldr	r3, [r7, #0]
 8006d04:	1e59      	subs	r1, r3, #1
 8006d06:	485d      	ldr	r0, [pc, #372]	@ (8006e7c <uart_driver_init+0x228>)
 8006d08:	0013      	movs	r3, r2
 8006d0a:	011b      	lsls	r3, r3, #4
 8006d0c:	189b      	adds	r3, r3, r2
 8006d0e:	009b      	lsls	r3, r3, #2
 8006d10:	18c3      	adds	r3, r0, r3
 8006d12:	3320      	adds	r3, #32
 8006d14:	6019      	str	r1, [r3, #0]
	inst_uart[uartIndex].rx_queue.array = inst_uart[uartIndex].rx_buf;
 8006d16:	193b      	adds	r3, r7, r4
 8006d18:	7819      	ldrb	r1, [r3, #0]
 8006d1a:	193b      	adds	r3, r7, r4
 8006d1c:	781a      	ldrb	r2, [r3, #0]
 8006d1e:	4857      	ldr	r0, [pc, #348]	@ (8006e7c <uart_driver_init+0x228>)
 8006d20:	000b      	movs	r3, r1
 8006d22:	011b      	lsls	r3, r3, #4
 8006d24:	185b      	adds	r3, r3, r1
 8006d26:	009b      	lsls	r3, r3, #2
 8006d28:	18c3      	adds	r3, r0, r3
 8006d2a:	3304      	adds	r3, #4
 8006d2c:	6819      	ldr	r1, [r3, #0]
 8006d2e:	4853      	ldr	r0, [pc, #332]	@ (8006e7c <uart_driver_init+0x228>)
 8006d30:	0013      	movs	r3, r2
 8006d32:	011b      	lsls	r3, r3, #4
 8006d34:	189b      	adds	r3, r3, r2
 8006d36:	009b      	lsls	r3, r3, #2
 8006d38:	18c3      	adds	r3, r0, r3
 8006d3a:	3324      	adds	r3, #36	@ 0x24
 8006d3c:	6019      	str	r1, [r3, #0]

    /* Initialize TX Queue */
	inst_uart[uartIndex].tx_buf = tx_buf;
 8006d3e:	193b      	adds	r3, r7, r4
 8006d40:	781a      	ldrb	r2, [r3, #0]
 8006d42:	494e      	ldr	r1, [pc, #312]	@ (8006e7c <uart_driver_init+0x228>)
 8006d44:	0013      	movs	r3, r2
 8006d46:	011b      	lsls	r3, r3, #4
 8006d48:	189b      	adds	r3, r3, r2
 8006d4a:	009b      	lsls	r3, r3, #2
 8006d4c:	18cb      	adds	r3, r1, r3
 8006d4e:	3308      	adds	r3, #8
 8006d50:	6a3a      	ldr	r2, [r7, #32]
 8006d52:	601a      	str	r2, [r3, #0]
	inst_uart[uartIndex].tx_queue.input = 0U;
 8006d54:	193b      	adds	r3, r7, r4
 8006d56:	781a      	ldrb	r2, [r3, #0]
 8006d58:	4948      	ldr	r1, [pc, #288]	@ (8006e7c <uart_driver_init+0x228>)
 8006d5a:	0013      	movs	r3, r2
 8006d5c:	011b      	lsls	r3, r3, #4
 8006d5e:	189b      	adds	r3, r3, r2
 8006d60:	009b      	lsls	r3, r3, #2
 8006d62:	18cb      	adds	r3, r1, r3
 8006d64:	3328      	adds	r3, #40	@ 0x28
 8006d66:	2200      	movs	r2, #0
 8006d68:	601a      	str	r2, [r3, #0]
	inst_uart[uartIndex].tx_queue.output = 0U;
 8006d6a:	193b      	adds	r3, r7, r4
 8006d6c:	781a      	ldrb	r2, [r3, #0]
 8006d6e:	4943      	ldr	r1, [pc, #268]	@ (8006e7c <uart_driver_init+0x228>)
 8006d70:	0013      	movs	r3, r2
 8006d72:	011b      	lsls	r3, r3, #4
 8006d74:	189b      	adds	r3, r3, r2
 8006d76:	009b      	lsls	r3, r3, #2
 8006d78:	18cb      	adds	r3, r1, r3
 8006d7a:	332c      	adds	r3, #44	@ 0x2c
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	601a      	str	r2, [r3, #0]
	inst_uart[uartIndex].tx_queue.input_byte = 0U;
 8006d80:	193b      	adds	r3, r7, r4
 8006d82:	781a      	ldrb	r2, [r3, #0]
 8006d84:	493d      	ldr	r1, [pc, #244]	@ (8006e7c <uart_driver_init+0x228>)
 8006d86:	0013      	movs	r3, r2
 8006d88:	011b      	lsls	r3, r3, #4
 8006d8a:	189b      	adds	r3, r3, r2
 8006d8c:	009b      	lsls	r3, r3, #2
 8006d8e:	18cb      	adds	r3, r1, r3
 8006d90:	3330      	adds	r3, #48	@ 0x30
 8006d92:	2200      	movs	r2, #0
 8006d94:	601a      	str	r2, [r3, #0]
	inst_uart[uartIndex].tx_queue.output_byte = 0U;
 8006d96:	193b      	adds	r3, r7, r4
 8006d98:	781a      	ldrb	r2, [r3, #0]
 8006d9a:	4938      	ldr	r1, [pc, #224]	@ (8006e7c <uart_driver_init+0x228>)
 8006d9c:	0013      	movs	r3, r2
 8006d9e:	011b      	lsls	r3, r3, #4
 8006da0:	189b      	adds	r3, r3, r2
 8006da2:	009b      	lsls	r3, r3, #2
 8006da4:	18cb      	adds	r3, r1, r3
 8006da6:	3334      	adds	r3, #52	@ 0x34
 8006da8:	2200      	movs	r2, #0
 8006daa:	601a      	str	r2, [r3, #0]
	inst_uart[uartIndex].tx_queue.item_size = sizeof(inst_uart[uartIndex].tx_buf[0U]);
 8006dac:	193b      	adds	r3, r7, r4
 8006dae:	781a      	ldrb	r2, [r3, #0]
 8006db0:	4932      	ldr	r1, [pc, #200]	@ (8006e7c <uart_driver_init+0x228>)
 8006db2:	0013      	movs	r3, r2
 8006db4:	011b      	lsls	r3, r3, #4
 8006db6:	189b      	adds	r3, r3, r2
 8006db8:	009b      	lsls	r3, r3, #2
 8006dba:	18cb      	adds	r3, r1, r3
 8006dbc:	3338      	adds	r3, #56	@ 0x38
 8006dbe:	2201      	movs	r2, #1
 8006dc0:	601a      	str	r2, [r3, #0]
	inst_uart[uartIndex].tx_queue.elements_in_array_minus_one = (tx_buf_size/inst_uart[uartIndex].tx_queue.item_size) - 1U;
 8006dc2:	193b      	adds	r3, r7, r4
 8006dc4:	781a      	ldrb	r2, [r3, #0]
 8006dc6:	492d      	ldr	r1, [pc, #180]	@ (8006e7c <uart_driver_init+0x228>)
 8006dc8:	0013      	movs	r3, r2
 8006dca:	011b      	lsls	r3, r3, #4
 8006dcc:	189b      	adds	r3, r3, r2
 8006dce:	009b      	lsls	r3, r3, #2
 8006dd0:	18cb      	adds	r3, r1, r3
 8006dd2:	3338      	adds	r3, #56	@ 0x38
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	0019      	movs	r1, r3
 8006dd8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006dda:	f7f9 f9ed 	bl	80001b8 <__udivsi3>
 8006dde:	0003      	movs	r3, r0
 8006de0:	0019      	movs	r1, r3
 8006de2:	193b      	adds	r3, r7, r4
 8006de4:	781a      	ldrb	r2, [r3, #0]
 8006de6:	3901      	subs	r1, #1
 8006de8:	4824      	ldr	r0, [pc, #144]	@ (8006e7c <uart_driver_init+0x228>)
 8006dea:	0013      	movs	r3, r2
 8006dec:	011b      	lsls	r3, r3, #4
 8006dee:	189b      	adds	r3, r3, r2
 8006df0:	009b      	lsls	r3, r3, #2
 8006df2:	18c3      	adds	r3, r0, r3
 8006df4:	333c      	adds	r3, #60	@ 0x3c
 8006df6:	6019      	str	r1, [r3, #0]
	inst_uart[uartIndex].tx_queue.array = inst_uart[uartIndex].tx_buf;
 8006df8:	193b      	adds	r3, r7, r4
 8006dfa:	7819      	ldrb	r1, [r3, #0]
 8006dfc:	193b      	adds	r3, r7, r4
 8006dfe:	781a      	ldrb	r2, [r3, #0]
 8006e00:	481e      	ldr	r0, [pc, #120]	@ (8006e7c <uart_driver_init+0x228>)
 8006e02:	000b      	movs	r3, r1
 8006e04:	011b      	lsls	r3, r3, #4
 8006e06:	185b      	adds	r3, r3, r1
 8006e08:	009b      	lsls	r3, r3, #2
 8006e0a:	18c3      	adds	r3, r0, r3
 8006e0c:	3308      	adds	r3, #8
 8006e0e:	6819      	ldr	r1, [r3, #0]
 8006e10:	481a      	ldr	r0, [pc, #104]	@ (8006e7c <uart_driver_init+0x228>)
 8006e12:	0013      	movs	r3, r2
 8006e14:	011b      	lsls	r3, r3, #4
 8006e16:	189b      	adds	r3, r3, r2
 8006e18:	009b      	lsls	r3, r3, #2
 8006e1a:	18c3      	adds	r3, r0, r3
 8006e1c:	3340      	adds	r3, #64	@ 0x40
 8006e1e:	6019      	str	r1, [r3, #0]

	if (UART1INDX == uartIndex)
 8006e20:	193b      	adds	r3, r7, r4
 8006e22:	781b      	ldrb	r3, [r3, #0]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d106      	bne.n	8006e36 <uart_driver_init+0x1e2>
	{
		/* tie the UARTA driver call-backs to the HAL ISRs */
		hal_uartA_callback_init(uarta_driver_buffered_byte_tx,
 8006e28:	4a15      	ldr	r2, [pc, #84]	@ (8006e80 <uart_driver_init+0x22c>)
 8006e2a:	4b16      	ldr	r3, [pc, #88]	@ (8006e84 <uart_driver_init+0x230>)
 8006e2c:	0011      	movs	r1, r2
 8006e2e:	0018      	movs	r0, r3
 8006e30:	f000 fdc8 	bl	80079c4 <hal_uartA_callback_init>
 8006e34:	e00a      	b.n	8006e4c <uart_driver_init+0x1f8>
								uarta_driver_buffered_byte_rx);
	}
#ifdef UART2INDX
	else if (UART2INDX == uartIndex)
 8006e36:	230f      	movs	r3, #15
 8006e38:	18fb      	adds	r3, r7, r3
 8006e3a:	781b      	ldrb	r3, [r3, #0]
 8006e3c:	2b01      	cmp	r3, #1
 8006e3e:	d105      	bne.n	8006e4c <uart_driver_init+0x1f8>
	{
		/* tie the UARTB driver call-backs to the HAL ISRs */
		hal_uartB_callback_init(uartb_driver_buffered_byte_tx,
 8006e40:	4a11      	ldr	r2, [pc, #68]	@ (8006e88 <uart_driver_init+0x234>)
 8006e42:	4b12      	ldr	r3, [pc, #72]	@ (8006e8c <uart_driver_init+0x238>)
 8006e44:	0011      	movs	r1, r2
 8006e46:	0018      	movs	r0, r3
 8006e48:	f000 fdd0 	bl	80079ec <hal_uartB_callback_init>
								uartd_driver_buffered_byte_rx);
	}
#endif

	// Initialize the UART
	uart_defs[uartIndex].uart_hal.uart_init();
 8006e4c:	240f      	movs	r4, #15
 8006e4e:	193b      	adds	r3, r7, r4
 8006e50:	781a      	ldrb	r2, [r3, #0]
 8006e52:	490f      	ldr	r1, [pc, #60]	@ (8006e90 <uart_driver_init+0x23c>)
 8006e54:	0013      	movs	r3, r2
 8006e56:	005b      	lsls	r3, r3, #1
 8006e58:	189b      	adds	r3, r3, r2
 8006e5a:	00db      	lsls	r3, r3, #3
 8006e5c:	18cb      	adds	r3, r1, r3
 8006e5e:	3304      	adds	r3, #4
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	4798      	blx	r3

	return &inst_uart[uartIndex];
 8006e64:	193b      	adds	r3, r7, r4
 8006e66:	781a      	ldrb	r2, [r3, #0]
 8006e68:	0013      	movs	r3, r2
 8006e6a:	011b      	lsls	r3, r3, #4
 8006e6c:	189b      	adds	r3, r3, r2
 8006e6e:	009b      	lsls	r3, r3, #2
 8006e70:	4a02      	ldr	r2, [pc, #8]	@ (8006e7c <uart_driver_init+0x228>)
 8006e72:	189b      	adds	r3, r3, r2
}
 8006e74:	0018      	movs	r0, r3
 8006e76:	46bd      	mov	sp, r7
 8006e78:	b005      	add	sp, #20
 8006e7a:	bd90      	pop	{r4, r7, pc}
 8006e7c:	20000584 	.word	0x20000584
 8006e80:	08006e95 	.word	0x08006e95
 8006e84:	08006eb9 	.word	0x08006eb9
 8006e88:	08006ee1 	.word	0x08006ee1
 8006e8c:	08006f05 	.word	0x08006f05
 8006e90:	20000104 	.word	0x20000104

08006e94 <uarta_driver_buffered_byte_rx>:


static void uarta_driver_buffered_byte_rx(uint8_t byte_rx)
{
 8006e94:	b580      	push	{r7, lr}
 8006e96:	b082      	sub	sp, #8
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	0002      	movs	r2, r0
 8006e9c:	1dfb      	adds	r3, r7, #7
 8006e9e:	701a      	strb	r2, [r3, #0]
	(void)cyclic_fifo_queue_add_item(&(inst_uart[UART1INDX].rx_queue), &byte_rx);
 8006ea0:	1dfa      	adds	r2, r7, #7
 8006ea2:	4b04      	ldr	r3, [pc, #16]	@ (8006eb4 <uarta_driver_buffered_byte_rx+0x20>)
 8006ea4:	0011      	movs	r1, r2
 8006ea6:	0018      	movs	r0, r3
 8006ea8:	f7ff fb4a 	bl	8006540 <cyclic_fifo_queue_add_item>
}
 8006eac:	46c0      	nop			@ (mov r8, r8)
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	b002      	add	sp, #8
 8006eb2:	bd80      	pop	{r7, pc}
 8006eb4:	20000590 	.word	0x20000590

08006eb8 <uarta_driver_buffered_byte_tx>:
static uint8_t uarta_driver_buffered_byte_tx(uint8_t* byte_to_tx)
{
 8006eb8:	b580      	push	{r7, lr}
 8006eba:	b082      	sub	sp, #8
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
	return( cyclic_fifo_queue_get_item(&(inst_uart[UART1INDX].tx_queue), byte_to_tx) == (unsigned int)0);
 8006ec0:	687a      	ldr	r2, [r7, #4]
 8006ec2:	4b06      	ldr	r3, [pc, #24]	@ (8006edc <uarta_driver_buffered_byte_tx+0x24>)
 8006ec4:	0011      	movs	r1, r2
 8006ec6:	0018      	movs	r0, r3
 8006ec8:	f7ff fb7f 	bl	80065ca <cyclic_fifo_queue_get_item>
 8006ecc:	0003      	movs	r3, r0
 8006ece:	425a      	negs	r2, r3
 8006ed0:	4153      	adcs	r3, r2
 8006ed2:	b2db      	uxtb	r3, r3
}
 8006ed4:	0018      	movs	r0, r3
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	b002      	add	sp, #8
 8006eda:	bd80      	pop	{r7, pc}
 8006edc:	200005ac 	.word	0x200005ac

08006ee0 <uartb_driver_buffered_byte_rx>:

#ifdef UART2INDX
static void uartb_driver_buffered_byte_rx(uint8_t byte_rx)
{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b082      	sub	sp, #8
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	0002      	movs	r2, r0
 8006ee8:	1dfb      	adds	r3, r7, #7
 8006eea:	701a      	strb	r2, [r3, #0]
	(void)cyclic_fifo_queue_add_item(&(inst_uart[UART2INDX].rx_queue), &byte_rx);
 8006eec:	1dfa      	adds	r2, r7, #7
 8006eee:	4b04      	ldr	r3, [pc, #16]	@ (8006f00 <uartb_driver_buffered_byte_rx+0x20>)
 8006ef0:	0011      	movs	r1, r2
 8006ef2:	0018      	movs	r0, r3
 8006ef4:	f7ff fb24 	bl	8006540 <cyclic_fifo_queue_add_item>
}
 8006ef8:	46c0      	nop			@ (mov r8, r8)
 8006efa:	46bd      	mov	sp, r7
 8006efc:	b002      	add	sp, #8
 8006efe:	bd80      	pop	{r7, pc}
 8006f00:	200005d4 	.word	0x200005d4

08006f04 <uartb_driver_buffered_byte_tx>:
static uint8_t uartb_driver_buffered_byte_tx(uint8_t* byte_to_tx)
{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	b082      	sub	sp, #8
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
	return( cyclic_fifo_queue_get_item(&(inst_uart[UART2INDX].tx_queue), byte_to_tx) == (unsigned int)0);
 8006f0c:	687a      	ldr	r2, [r7, #4]
 8006f0e:	4b06      	ldr	r3, [pc, #24]	@ (8006f28 <uartb_driver_buffered_byte_tx+0x24>)
 8006f10:	0011      	movs	r1, r2
 8006f12:	0018      	movs	r0, r3
 8006f14:	f7ff fb59 	bl	80065ca <cyclic_fifo_queue_get_item>
 8006f18:	0003      	movs	r3, r0
 8006f1a:	425a      	negs	r2, r3
 8006f1c:	4153      	adcs	r3, r2
 8006f1e:	b2db      	uxtb	r3, r3
}
 8006f20:	0018      	movs	r0, r3
 8006f22:	46bd      	mov	sp, r7
 8006f24:	b002      	add	sp, #8
 8006f26:	bd80      	pop	{r7, pc}
 8006f28:	200005f0 	.word	0x200005f0

08006f2c <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b084      	sub	sp, #16
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	60f8      	str	r0, [r7, #12]
 8006f34:	60b9      	str	r1, [r7, #8]
 8006f36:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	6819      	ldr	r1, [r3, #0]
 8006f3c:	68bb      	ldr	r3, [r7, #8]
 8006f3e:	435b      	muls	r3, r3
 8006f40:	001a      	movs	r2, r3
 8006f42:	0013      	movs	r3, r2
 8006f44:	005b      	lsls	r3, r3, #1
 8006f46:	189b      	adds	r3, r3, r2
 8006f48:	43db      	mvns	r3, r3
 8006f4a:	400b      	ands	r3, r1
 8006f4c:	001a      	movs	r2, r3
 8006f4e:	68bb      	ldr	r3, [r7, #8]
 8006f50:	435b      	muls	r3, r3
 8006f52:	6879      	ldr	r1, [r7, #4]
 8006f54:	434b      	muls	r3, r1
 8006f56:	431a      	orrs	r2, r3
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	601a      	str	r2, [r3, #0]
}
 8006f5c:	46c0      	nop			@ (mov r8, r8)
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	b004      	add	sp, #16
 8006f62:	bd80      	pop	{r7, pc}

08006f64 <LL_GPIO_ReadInputPort>:
  * @rmtoll IDR          IDy           LL_GPIO_ReadInputPort
  * @param  GPIOx GPIO Port
  * @retval Input data register value of port
  */
__STATIC_INLINE uint32_t LL_GPIO_ReadInputPort(GPIO_TypeDef *GPIOx)
{
 8006f64:	b580      	push	{r7, lr}
 8006f66:	b082      	sub	sp, #8
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(GPIOx->IDR));
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	691b      	ldr	r3, [r3, #16]
}
 8006f70:	0018      	movs	r0, r3
 8006f72:	46bd      	mov	sp, r7
 8006f74:	b002      	add	sp, #8
 8006f76:	bd80      	pop	{r7, pc}

08006f78 <hal_gpio_init>:
#include "stm32g0xx_ll_gpio.h"
#include "main.h"
#include "gpio.h"

void hal_gpio_init(void)
{
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	af00      	add	r7, sp, #0
	// Call the GPIO initialization function setup by the STM32CubeIDE Device Configuration Tool:
	MX_GPIO_Init();
 8006f7c:	f7f9 ffb0 	bl	8000ee0 <MX_GPIO_Init>
}
 8006f80:	46c0      	nop			@ (mov r8, r8)
 8006f82:	46bd      	mov	sp, r7
 8006f84:	bd80      	pop	{r7, pc}
	...

08006f88 <hal_gpio_set_output>:
{
  return HAL_GPIO_ReadPin(port_defs[id], pin_defs[id].Pin);
}

void hal_gpio_set_output(enum pin_id id, bool value)
{
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	b082      	sub	sp, #8
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	0002      	movs	r2, r0
 8006f90:	1dfb      	adds	r3, r7, #7
 8006f92:	701a      	strb	r2, [r3, #0]
 8006f94:	1dbb      	adds	r3, r7, #6
 8006f96:	1c0a      	adds	r2, r1, #0
 8006f98:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin(port_defs[id], pin_defs[id].Pin, (GPIO_PinState)(value != false));
 8006f9a:	1dfb      	adds	r3, r7, #7
 8006f9c:	781a      	ldrb	r2, [r3, #0]
 8006f9e:	4b0a      	ldr	r3, [pc, #40]	@ (8006fc8 <hal_gpio_set_output+0x40>)
 8006fa0:	0092      	lsls	r2, r2, #2
 8006fa2:	58d0      	ldr	r0, [r2, r3]
 8006fa4:	1dfb      	adds	r3, r7, #7
 8006fa6:	781a      	ldrb	r2, [r3, #0]
 8006fa8:	4908      	ldr	r1, [pc, #32]	@ (8006fcc <hal_gpio_set_output+0x44>)
 8006faa:	0013      	movs	r3, r2
 8006fac:	009b      	lsls	r3, r3, #2
 8006fae:	189b      	adds	r3, r3, r2
 8006fb0:	009b      	lsls	r3, r3, #2
 8006fb2:	585b      	ldr	r3, [r3, r1]
 8006fb4:	b299      	uxth	r1, r3
 8006fb6:	1dbb      	adds	r3, r7, #6
 8006fb8:	781b      	ldrb	r3, [r3, #0]
 8006fba:	001a      	movs	r2, r3
 8006fbc:	f7fc f916 	bl	80031ec <HAL_GPIO_WritePin>
}
 8006fc0:	46c0      	nop			@ (mov r8, r8)
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	b002      	add	sp, #8
 8006fc6:	bd80      	pop	{r7, pc}
 8006fc8:	08007fbc 	.word	0x08007fbc
 8006fcc:	08007ea4 	.word	0x08007ea4

08006fd0 <hal_gpio_set_pin_mode>:
void hal_gpio_set_pull(enum pin_id id, uint32_t pull)
{
  LL_GPIO_SetPinPull(port_defs[id], pin_defs[id].Pin, pull);
}
void hal_gpio_set_pin_mode(enum pin_id id, uint32_t mode)
{
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b082      	sub	sp, #8
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	0002      	movs	r2, r0
 8006fd8:	6039      	str	r1, [r7, #0]
 8006fda:	1dfb      	adds	r3, r7, #7
 8006fdc:	701a      	strb	r2, [r3, #0]
	LL_GPIO_SetPinMode(port_defs[id], pin_defs[id].Pin, mode);
 8006fde:	1dfb      	adds	r3, r7, #7
 8006fe0:	781a      	ldrb	r2, [r3, #0]
 8006fe2:	4b09      	ldr	r3, [pc, #36]	@ (8007008 <hal_gpio_set_pin_mode+0x38>)
 8006fe4:	0092      	lsls	r2, r2, #2
 8006fe6:	58d0      	ldr	r0, [r2, r3]
 8006fe8:	1dfb      	adds	r3, r7, #7
 8006fea:	781a      	ldrb	r2, [r3, #0]
 8006fec:	4907      	ldr	r1, [pc, #28]	@ (800700c <hal_gpio_set_pin_mode+0x3c>)
 8006fee:	0013      	movs	r3, r2
 8006ff0:	009b      	lsls	r3, r3, #2
 8006ff2:	189b      	adds	r3, r3, r2
 8006ff4:	009b      	lsls	r3, r3, #2
 8006ff6:	585b      	ldr	r3, [r3, r1]
 8006ff8:	683a      	ldr	r2, [r7, #0]
 8006ffa:	0019      	movs	r1, r3
 8006ffc:	f7ff ff96 	bl	8006f2c <LL_GPIO_SetPinMode>
}
 8007000:	46c0      	nop			@ (mov r8, r8)
 8007002:	46bd      	mov	sp, r7
 8007004:	b002      	add	sp, #8
 8007006:	bd80      	pop	{r7, pc}
 8007008:	08007fbc 	.word	0x08007fbc
 800700c:	08007ea4 	.word	0x08007ea4

08007010 <hal_gpio_read_port>:
	return LL_GPIO_GetPinMode(port_defs[id], pin_defs[id].Pin);
}

// Returns the bitmap of the pin values within the specified GPIO Port.
uint32_t hal_gpio_read_port(pin_port_t* GpioPort)
{
 8007010:	b580      	push	{r7, lr}
 8007012:	b082      	sub	sp, #8
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]
	return LL_GPIO_ReadInputPort(GpioPort);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	0018      	movs	r0, r3
 800701c:	f7ff ffa2 	bl	8006f64 <LL_GPIO_ReadInputPort>
 8007020:	0003      	movs	r3, r0
}
 8007022:	0018      	movs	r0, r3
 8007024:	46bd      	mov	sp, r7
 8007026:	b002      	add	sp, #8
 8007028:	bd80      	pop	{r7, pc}

0800702a <hal_timer_get_systick>:
*
*  return values:  The current 1 millisecond systick count
*  remarks:
*********************************************************************************/
uint32_t hal_timer_get_systick(void)
{
 800702a:	b580      	push	{r7, lr}
 800702c:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800702e:	f7fa ffc3 	bl	8001fb8 <HAL_GetTick>
 8007032:	0003      	movs	r3, r0
}
 8007034:	0018      	movs	r0, r3
 8007036:	46bd      	mov	sp, r7
 8007038:	bd80      	pop	{r7, pc}

0800703a <hal_timer_get_ticks_since_count>:
*
*  remarks:
*********************************************************************************/

uint32_t hal_timer_get_ticks_since_count(uint32_t lastCount)
{
 800703a:	b580      	push	{r7, lr}
 800703c:	b084      	sub	sp, #16
 800703e:	af00      	add	r7, sp, #0
 8007040:	6078      	str	r0, [r7, #4]
    uint32_t result;
    uint32_t currentCount = hal_timer_get_systick();
 8007042:	f7ff fff2 	bl	800702a <hal_timer_get_systick>
 8007046:	0003      	movs	r3, r0
 8007048:	60bb      	str	r3, [r7, #8]

    // Check if the counter rolled over:
    if (currentCount >= lastCount)
 800704a:	68ba      	ldr	r2, [r7, #8]
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	429a      	cmp	r2, r3
 8007050:	d304      	bcc.n	800705c <hal_timer_get_ticks_since_count+0x22>
    {
        //Counter has not rolled over.
        result = currentCount - lastCount;
 8007052:	68ba      	ldr	r2, [r7, #8]
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	1ad3      	subs	r3, r2, r3
 8007058:	60fb      	str	r3, [r7, #12]
 800705a:	e004      	b.n	8007066 <hal_timer_get_ticks_since_count+0x2c>
    }
    else
    {
        // The counter rolled over / overflowed. Deal with it:
        result = UINT32_MAX - lastCount + currentCount;
 800705c:	68ba      	ldr	r2, [r7, #8]
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	1ad3      	subs	r3, r2, r3
 8007062:	3b01      	subs	r3, #1
 8007064:	60fb      	str	r3, [r7, #12]
    }

    return result;
 8007066:	68fb      	ldr	r3, [r7, #12]
}
 8007068:	0018      	movs	r0, r3
 800706a:	46bd      	mov	sp, r7
 800706c:	b004      	add	sp, #16
 800706e:	bd80      	pop	{r7, pc}

08007070 <hal_timer_init>:
{
	SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk; /* disable systick */
}

void hal_timer_init(void)
{
 8007070:	b580      	push	{r7, lr}
 8007072:	af00      	add	r7, sp, #0

	  // Note that the following "USING" macros are defined in perphdefs.h
#if defined  USING_TIM1
	  MX_TIM1_Init();
 8007074:	f7fa faba 	bl	80015ec <MX_TIM1_Init>
#endif
#if defined  USING_TIM3
	  MX_TIM3_Init();
 8007078:	f7fa fb82 	bl	8001780 <MX_TIM3_Init>
#endif
#if defined  USING_TIM6
	  MX_TIM6_Init();
 800707c:	f7fa fc00 	bl	8001880 <MX_TIM6_Init>
#endif
#if defined  USING_TIM14
	  MX_TIM14_Init();
#endif
#if defined  USING_TIM15
	  MX_TIM15_Init();
 8007080:	f7fa fc38 	bl	80018f4 <MX_TIM15_Init>
#endif
#if defined  USING_TIM17
	  MX_TIM17_Init();
#endif

    hal_timer_set_timer_for_blocking_delays(TIMER_BLOCKING_DELAY);
 8007084:	2003      	movs	r0, #3
 8007086:	f000 fbf7 	bl	8007878 <hal_timer_set_timer_for_blocking_delays>

}
 800708a:	46c0      	nop			@ (mov r8, r8)
 800708c:	46bd      	mov	sp, r7
 800708e:	bd80      	pop	{r7, pc}

08007090 <hal_timer_RunPwAtDutyCycle>:

	return TimerIsRunning;
}

void hal_timer_RunPwAtDutyCycle(enum timer_id id, uint16_t dutyCyclePct)
{
 8007090:	b590      	push	{r4, r7, lr}
 8007092:	b085      	sub	sp, #20
 8007094:	af00      	add	r7, sp, #0
 8007096:	0002      	movs	r2, r0
 8007098:	1dfb      	adds	r3, r7, #7
 800709a:	701a      	strb	r2, [r3, #0]
 800709c:	1d3b      	adds	r3, r7, #4
 800709e:	1c0a      	adds	r2, r1, #0
 80070a0:	801a      	strh	r2, [r3, #0]
	// Make sure that we aren't going to overrun our arrays:
	if (NUMBER_OF_TIMERS > id)
 80070a2:	1dfb      	adds	r3, r7, #7
 80070a4:	781b      	ldrb	r3, [r3, #0]
 80070a6:	2b03      	cmp	r3, #3
 80070a8:	d826      	bhi.n	80070f8 <hal_timer_RunPwAtDutyCycle+0x68>
	{
		// Check the the auto reload register value to see if it is zero:
		if (TimerArrValue[id] != 0)
 80070aa:	1dfb      	adds	r3, r7, #7
 80070ac:	781a      	ldrb	r2, [r3, #0]
 80070ae:	4b14      	ldr	r3, [pc, #80]	@ (8007100 <hal_timer_RunPwAtDutyCycle+0x70>)
 80070b0:	0052      	lsls	r2, r2, #1
 80070b2:	5ad3      	ldrh	r3, [r2, r3]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d01f      	beq.n	80070f8 <hal_timer_RunPwAtDutyCycle+0x68>
		{
			uint16_t arrValue = TimerArrValue[id];
 80070b8:	1dfb      	adds	r3, r7, #7
 80070ba:	7819      	ldrb	r1, [r3, #0]
 80070bc:	240e      	movs	r4, #14
 80070be:	193b      	adds	r3, r7, r4
 80070c0:	4a0f      	ldr	r2, [pc, #60]	@ (8007100 <hal_timer_RunPwAtDutyCycle+0x70>)
 80070c2:	0049      	lsls	r1, r1, #1
 80070c4:	5a8a      	ldrh	r2, [r1, r2]
 80070c6:	801a      	strh	r2, [r3, #0]

			uint16_t on_time = (uint16_t)((((uint32_t)arrValue + 1) * (uint32_t)dutyCyclePct)/ 100 );
 80070c8:	193b      	adds	r3, r7, r4
 80070ca:	881b      	ldrh	r3, [r3, #0]
 80070cc:	3301      	adds	r3, #1
 80070ce:	1d3a      	adds	r2, r7, #4
 80070d0:	8812      	ldrh	r2, [r2, #0]
 80070d2:	4353      	muls	r3, r2
 80070d4:	2164      	movs	r1, #100	@ 0x64
 80070d6:	0018      	movs	r0, r3
 80070d8:	f7f9 f86e 	bl	80001b8 <__udivsi3>
 80070dc:	0003      	movs	r3, r0
 80070de:	001a      	movs	r2, r3
 80070e0:	210c      	movs	r1, #12
 80070e2:	187b      	adds	r3, r7, r1
 80070e4:	801a      	strh	r2, [r3, #0]

			hal_timer_set_pwm_output_period(id, arrValue, on_time);
 80070e6:	187b      	adds	r3, r7, r1
 80070e8:	881a      	ldrh	r2, [r3, #0]
 80070ea:	193b      	adds	r3, r7, r4
 80070ec:	8819      	ldrh	r1, [r3, #0]
 80070ee:	1dfb      	adds	r3, r7, #7
 80070f0:	781b      	ldrb	r3, [r3, #0]
 80070f2:	0018      	movs	r0, r3
 80070f4:	f000 f818 	bl	8007128 <hal_timer_set_pwm_output_period>
		}
	}
}
 80070f8:	46c0      	nop			@ (mov r8, r8)
 80070fa:	46bd      	mov	sp, r7
 80070fc:	b005      	add	sp, #20
 80070fe:	bd90      	pop	{r4, r7, pc}
 8007100:	08007e9c 	.word	0x08007e9c

08007104 <hal_timer_StopPwmOutput>:

void hal_timer_StopPwmOutput(enum timer_id id)
{
 8007104:	b580      	push	{r7, lr}
 8007106:	b082      	sub	sp, #8
 8007108:	af00      	add	r7, sp, #0
 800710a:	0002      	movs	r2, r0
 800710c:	1dfb      	adds	r3, r7, #7
 800710e:	701a      	strb	r2, [r3, #0]
	// Calling hal_timer_set_pwm_output_period() with a zero in either the period or the on_time
	//turns off the PWM output.
	hal_timer_set_pwm_output_period(id, 0, 0);
 8007110:	1dfb      	adds	r3, r7, #7
 8007112:	781b      	ldrb	r3, [r3, #0]
 8007114:	2200      	movs	r2, #0
 8007116:	2100      	movs	r1, #0
 8007118:	0018      	movs	r0, r3
 800711a:	f000 f805 	bl	8007128 <hal_timer_set_pwm_output_period>
}
 800711e:	46c0      	nop			@ (mov r8, r8)
 8007120:	46bd      	mov	sp, r7
 8007122:	b002      	add	sp, #8
 8007124:	bd80      	pop	{r7, pc}
	...

08007128 <hal_timer_set_pwm_output_period>:

void hal_timer_set_pwm_output_period(enum timer_id id, uint16_t period, uint16_t on_time)
{
 8007128:	b590      	push	{r4, r7, lr}
 800712a:	b085      	sub	sp, #20
 800712c:	af00      	add	r7, sp, #0
 800712e:	0004      	movs	r4, r0
 8007130:	0008      	movs	r0, r1
 8007132:	0011      	movs	r1, r2
 8007134:	1dfb      	adds	r3, r7, #7
 8007136:	1c22      	adds	r2, r4, #0
 8007138:	701a      	strb	r2, [r3, #0]
 800713a:	1d3b      	adds	r3, r7, #4
 800713c:	1c02      	adds	r2, r0, #0
 800713e:	801a      	strh	r2, [r3, #0]
 8007140:	1cbb      	adds	r3, r7, #2
 8007142:	1c0a      	adds	r2, r1, #0
 8007144:	801a      	strh	r2, [r3, #0]
	// TODO: Write function hal_timer_set_pwm_output_period()

    if(DUMMY_TIMER == timer_defs[id].timer)
 8007146:	1dfb      	adds	r3, r7, #7
 8007148:	781a      	ldrb	r2, [r3, #0]
 800714a:	4bc3      	ldr	r3, [pc, #780]	@ (8007458 <hal_timer_set_pwm_output_period+0x330>)
 800714c:	0112      	lsls	r2, r2, #4
 800714e:	58d3      	ldr	r3, [r2, r3]
 8007150:	2b00      	cmp	r3, #0
 8007152:	d100      	bne.n	8007156 <hal_timer_set_pwm_output_period+0x2e>
 8007154:	e37c      	b.n	8007850 <hal_timer_set_pwm_output_period+0x728>
    {
    	// No timer pointer was defined for this timer_defs member.
        return;
    }

    if((period == 0) || (on_time == 0))
 8007156:	1d3b      	adds	r3, r7, #4
 8007158:	881b      	ldrh	r3, [r3, #0]
 800715a:	2b00      	cmp	r3, #0
 800715c:	d004      	beq.n	8007168 <hal_timer_set_pwm_output_period+0x40>
 800715e:	1cbb      	adds	r3, r7, #2
 8007160:	881b      	ldrh	r3, [r3, #0]
 8007162:	2b00      	cmp	r3, #0
 8007164:	d000      	beq.n	8007168 <hal_timer_set_pwm_output_period+0x40>
 8007166:	e09b      	b.n	80072a0 <hal_timer_set_pwm_output_period+0x178>
        	/* disable the timer */
        	((LPTIM_TypeDef*)(timer_defs[id].timer))->CR &= ~LPTIM_CR_ENABLE;
        }
        else
#endif
        if( (timer_defs[id].type == TIM_BASIC) || (timer_defs[id].type == TIM_GEN_PURPOSE) )
 8007168:	1dfb      	adds	r3, r7, #7
 800716a:	781b      	ldrb	r3, [r3, #0]
 800716c:	4aba      	ldr	r2, [pc, #744]	@ (8007458 <hal_timer_set_pwm_output_period+0x330>)
 800716e:	011b      	lsls	r3, r3, #4
 8007170:	18d3      	adds	r3, r2, r3
 8007172:	3304      	adds	r3, #4
 8007174:	781b      	ldrb	r3, [r3, #0]
 8007176:	2b01      	cmp	r3, #1
 8007178:	d009      	beq.n	800718e <hal_timer_set_pwm_output_period+0x66>
 800717a:	1dfb      	adds	r3, r7, #7
 800717c:	781b      	ldrb	r3, [r3, #0]
 800717e:	4ab6      	ldr	r2, [pc, #728]	@ (8007458 <hal_timer_set_pwm_output_period+0x330>)
 8007180:	011b      	lsls	r3, r3, #4
 8007182:	18d3      	adds	r3, r2, r3
 8007184:	3304      	adds	r3, #4
 8007186:	781b      	ldrb	r3, [r3, #0]
 8007188:	2b00      	cmp	r3, #0
 800718a:	d000      	beq.n	800718e <hal_timer_set_pwm_output_period+0x66>
 800718c:	e362      	b.n	8007854 <hal_timer_set_pwm_output_period+0x72c>
        {
        	if( timer_defs[id].channel < NumTimerChannels)
 800718e:	1dfb      	adds	r3, r7, #7
 8007190:	781b      	ldrb	r3, [r3, #0]
 8007192:	4ab1      	ldr	r2, [pc, #708]	@ (8007458 <hal_timer_set_pwm_output_period+0x330>)
 8007194:	011b      	lsls	r3, r3, #4
 8007196:	18d3      	adds	r3, r2, r3
 8007198:	3305      	adds	r3, #5
 800719a:	781b      	ldrb	r3, [r3, #0]
 800719c:	2b06      	cmp	r3, #6
 800719e:	d818      	bhi.n	80071d2 <hal_timer_set_pwm_output_period+0xaa>
        	{
        		((TIM_TypeDef *)(timer_defs[id].timer))->CCER  &=  ~ChannelCaptureCompareBits[timer_defs[id].channel].ChannelCCxE;	// Disable the channel.
 80071a0:	1dfb      	adds	r3, r7, #7
 80071a2:	781a      	ldrb	r2, [r3, #0]
 80071a4:	4bac      	ldr	r3, [pc, #688]	@ (8007458 <hal_timer_set_pwm_output_period+0x330>)
 80071a6:	0112      	lsls	r2, r2, #4
 80071a8:	58d3      	ldr	r3, [r2, r3]
 80071aa:	6a1a      	ldr	r2, [r3, #32]
 80071ac:	1dfb      	adds	r3, r7, #7
 80071ae:	781b      	ldrb	r3, [r3, #0]
 80071b0:	49a9      	ldr	r1, [pc, #676]	@ (8007458 <hal_timer_set_pwm_output_period+0x330>)
 80071b2:	011b      	lsls	r3, r3, #4
 80071b4:	18cb      	adds	r3, r1, r3
 80071b6:	3305      	adds	r3, #5
 80071b8:	781b      	ldrb	r3, [r3, #0]
 80071ba:	0019      	movs	r1, r3
 80071bc:	4ba7      	ldr	r3, [pc, #668]	@ (800745c <hal_timer_set_pwm_output_period+0x334>)
 80071be:	0109      	lsls	r1, r1, #4
 80071c0:	58cb      	ldr	r3, [r1, r3]
 80071c2:	43d9      	mvns	r1, r3
 80071c4:	1dfb      	adds	r3, r7, #7
 80071c6:	7818      	ldrb	r0, [r3, #0]
 80071c8:	4ba3      	ldr	r3, [pc, #652]	@ (8007458 <hal_timer_set_pwm_output_period+0x330>)
 80071ca:	0100      	lsls	r0, r0, #4
 80071cc:	58c3      	ldr	r3, [r0, r3]
 80071ce:	400a      	ands	r2, r1
 80071d0:	621a      	str	r2, [r3, #32]
        	}

        	uint32_t allChannelEnableBits = 0;
 80071d2:	2300      	movs	r3, #0
 80071d4:	60fb      	str	r3, [r7, #12]

        	for (enum timer_channel ch = TIMER_CH0;ch < NumTimerChannels;ch++)
 80071d6:	230b      	movs	r3, #11
 80071d8:	18fb      	adds	r3, r7, r3
 80071da:	2200      	movs	r2, #0
 80071dc:	701a      	strb	r2, [r3, #0]
 80071de:	e013      	b.n	8007208 <hal_timer_set_pwm_output_period+0xe0>
        	{
        		allChannelEnableBits |= ChannelCaptureCompareBits[timer_defs[id].channel].ChannelCCxE;
 80071e0:	1dfb      	adds	r3, r7, #7
 80071e2:	781b      	ldrb	r3, [r3, #0]
 80071e4:	4a9c      	ldr	r2, [pc, #624]	@ (8007458 <hal_timer_set_pwm_output_period+0x330>)
 80071e6:	011b      	lsls	r3, r3, #4
 80071e8:	18d3      	adds	r3, r2, r3
 80071ea:	3305      	adds	r3, #5
 80071ec:	781b      	ldrb	r3, [r3, #0]
 80071ee:	001a      	movs	r2, r3
 80071f0:	4b9a      	ldr	r3, [pc, #616]	@ (800745c <hal_timer_set_pwm_output_period+0x334>)
 80071f2:	0112      	lsls	r2, r2, #4
 80071f4:	58d3      	ldr	r3, [r2, r3]
 80071f6:	68fa      	ldr	r2, [r7, #12]
 80071f8:	4313      	orrs	r3, r2
 80071fa:	60fb      	str	r3, [r7, #12]
        	for (enum timer_channel ch = TIMER_CH0;ch < NumTimerChannels;ch++)
 80071fc:	210b      	movs	r1, #11
 80071fe:	187b      	adds	r3, r7, r1
 8007200:	781a      	ldrb	r2, [r3, #0]
 8007202:	187b      	adds	r3, r7, r1
 8007204:	3201      	adds	r2, #1
 8007206:	701a      	strb	r2, [r3, #0]
 8007208:	230b      	movs	r3, #11
 800720a:	18fb      	adds	r3, r7, r3
 800720c:	781b      	ldrb	r3, [r3, #0]
 800720e:	2b06      	cmp	r3, #6
 8007210:	d9e6      	bls.n	80071e0 <hal_timer_set_pwm_output_period+0xb8>
        	}
			/* If all channels are disabled, disable the timer too (note: reading channels 3 and 4 on tim21/22 will return 0 so that's okay) */
			if( (((TIM_TypeDef *)(timer_defs[id].timer))->CCER & allChannelEnableBits ) == 0 )
 8007212:	1dfb      	adds	r3, r7, #7
 8007214:	781a      	ldrb	r2, [r3, #0]
 8007216:	4b90      	ldr	r3, [pc, #576]	@ (8007458 <hal_timer_set_pwm_output_period+0x330>)
 8007218:	0112      	lsls	r2, r2, #4
 800721a:	58d3      	ldr	r3, [r2, r3]
 800721c:	6a1b      	ldr	r3, [r3, #32]
 800721e:	68fa      	ldr	r2, [r7, #12]
 8007220:	4013      	ands	r3, r2
 8007222:	d000      	beq.n	8007226 <hal_timer_set_pwm_output_period+0xfe>
 8007224:	e316      	b.n	8007854 <hal_timer_set_pwm_output_period+0x72c>
			{
				if( IS_TIM_BREAK_INSTANCE(timer_defs[id].timer))		/* Special consideration for timers with the break dead-time feature for PWM */
 8007226:	1dfb      	adds	r3, r7, #7
 8007228:	781a      	ldrb	r2, [r3, #0]
 800722a:	4b8b      	ldr	r3, [pc, #556]	@ (8007458 <hal_timer_set_pwm_output_period+0x330>)
 800722c:	0112      	lsls	r2, r2, #4
 800722e:	58d3      	ldr	r3, [r2, r3]
 8007230:	4a8b      	ldr	r2, [pc, #556]	@ (8007460 <hal_timer_set_pwm_output_period+0x338>)
 8007232:	4293      	cmp	r3, r2
 8007234:	d017      	beq.n	8007266 <hal_timer_set_pwm_output_period+0x13e>
 8007236:	1dfb      	adds	r3, r7, #7
 8007238:	781a      	ldrb	r2, [r3, #0]
 800723a:	4b87      	ldr	r3, [pc, #540]	@ (8007458 <hal_timer_set_pwm_output_period+0x330>)
 800723c:	0112      	lsls	r2, r2, #4
 800723e:	58d3      	ldr	r3, [r2, r3]
 8007240:	4a88      	ldr	r2, [pc, #544]	@ (8007464 <hal_timer_set_pwm_output_period+0x33c>)
 8007242:	4293      	cmp	r3, r2
 8007244:	d00f      	beq.n	8007266 <hal_timer_set_pwm_output_period+0x13e>
 8007246:	1dfb      	adds	r3, r7, #7
 8007248:	781a      	ldrb	r2, [r3, #0]
 800724a:	4b83      	ldr	r3, [pc, #524]	@ (8007458 <hal_timer_set_pwm_output_period+0x330>)
 800724c:	0112      	lsls	r2, r2, #4
 800724e:	58d3      	ldr	r3, [r2, r3]
 8007250:	4a85      	ldr	r2, [pc, #532]	@ (8007468 <hal_timer_set_pwm_output_period+0x340>)
 8007252:	4293      	cmp	r3, r2
 8007254:	d007      	beq.n	8007266 <hal_timer_set_pwm_output_period+0x13e>
 8007256:	1dfb      	adds	r3, r7, #7
 8007258:	781a      	ldrb	r2, [r3, #0]
 800725a:	4b7f      	ldr	r3, [pc, #508]	@ (8007458 <hal_timer_set_pwm_output_period+0x330>)
 800725c:	0112      	lsls	r2, r2, #4
 800725e:	58d3      	ldr	r3, [r2, r3]
 8007260:	4a82      	ldr	r2, [pc, #520]	@ (800746c <hal_timer_set_pwm_output_period+0x344>)
 8007262:	4293      	cmp	r3, r2
 8007264:	d10d      	bne.n	8007282 <hal_timer_set_pwm_output_period+0x15a>
				{
					// See the break and dead-time register section of the Reference Manual for details of the meaning of these bits.
					((TIM_TypeDef *)(timer_defs[id].timer))->BDTR &= ~(TIM_BDTR_MOE | TIM_BDTR_OSSI | TIM_BDTR_OSSR);	// Off-state is a don't care so leave it blank
 8007266:	1dfb      	adds	r3, r7, #7
 8007268:	781a      	ldrb	r2, [r3, #0]
 800726a:	4b7b      	ldr	r3, [pc, #492]	@ (8007458 <hal_timer_set_pwm_output_period+0x330>)
 800726c:	0112      	lsls	r2, r2, #4
 800726e:	58d3      	ldr	r3, [r2, r3]
 8007270:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007272:	1dfb      	adds	r3, r7, #7
 8007274:	7819      	ldrb	r1, [r3, #0]
 8007276:	4b78      	ldr	r3, [pc, #480]	@ (8007458 <hal_timer_set_pwm_output_period+0x330>)
 8007278:	0109      	lsls	r1, r1, #4
 800727a:	58cb      	ldr	r3, [r1, r3]
 800727c:	497c      	ldr	r1, [pc, #496]	@ (8007470 <hal_timer_set_pwm_output_period+0x348>)
 800727e:	400a      	ands	r2, r1
 8007280:	645a      	str	r2, [r3, #68]	@ 0x44
				}

				/* disable the timer */
				((TIM_TypeDef *)(timer_defs[id].timer))->CR1 &= ~(TIM_CR1_ARPE | TIM_CR1_CEN);
 8007282:	1dfb      	adds	r3, r7, #7
 8007284:	781a      	ldrb	r2, [r3, #0]
 8007286:	4b74      	ldr	r3, [pc, #464]	@ (8007458 <hal_timer_set_pwm_output_period+0x330>)
 8007288:	0112      	lsls	r2, r2, #4
 800728a:	58d3      	ldr	r3, [r2, r3]
 800728c:	681a      	ldr	r2, [r3, #0]
 800728e:	1dfb      	adds	r3, r7, #7
 8007290:	7819      	ldrb	r1, [r3, #0]
 8007292:	4b71      	ldr	r3, [pc, #452]	@ (8007458 <hal_timer_set_pwm_output_period+0x330>)
 8007294:	0109      	lsls	r1, r1, #4
 8007296:	58cb      	ldr	r3, [r1, r3]
 8007298:	2181      	movs	r1, #129	@ 0x81
 800729a:	438a      	bics	r2, r1
 800729c:	601a      	str	r2, [r3, #0]
        }
        else
        {
            // No other timers supported
        }
        return;
 800729e:	e2d9      	b.n	8007854 <hal_timer_set_pwm_output_period+0x72c>
			((LPTIM_TypeDef*)(timer_defs[id].timer))->CR   |= LPTIM_CR_CNTSTRT_Msk;
        }
        else
#endif

        if( (timer_defs[id].type == TIM_BASIC) || (timer_defs[id].type == TIM_GEN_PURPOSE) )
 80072a0:	1dfb      	adds	r3, r7, #7
 80072a2:	781b      	ldrb	r3, [r3, #0]
 80072a4:	4a6c      	ldr	r2, [pc, #432]	@ (8007458 <hal_timer_set_pwm_output_period+0x330>)
 80072a6:	011b      	lsls	r3, r3, #4
 80072a8:	18d3      	adds	r3, r2, r3
 80072aa:	3304      	adds	r3, #4
 80072ac:	781b      	ldrb	r3, [r3, #0]
 80072ae:	2b01      	cmp	r3, #1
 80072b0:	d009      	beq.n	80072c6 <hal_timer_set_pwm_output_period+0x19e>
 80072b2:	1dfb      	adds	r3, r7, #7
 80072b4:	781b      	ldrb	r3, [r3, #0]
 80072b6:	4a68      	ldr	r2, [pc, #416]	@ (8007458 <hal_timer_set_pwm_output_period+0x330>)
 80072b8:	011b      	lsls	r3, r3, #4
 80072ba:	18d3      	adds	r3, r2, r3
 80072bc:	3304      	adds	r3, #4
 80072be:	781b      	ldrb	r3, [r3, #0]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d000      	beq.n	80072c6 <hal_timer_set_pwm_output_period+0x19e>
 80072c4:	e2c7      	b.n	8007856 <hal_timer_set_pwm_output_period+0x72e>
        {
        	((TIM_TypeDef *)(timer_defs[id].timer))->ARR = period;         // set the period.
 80072c6:	1dfb      	adds	r3, r7, #7
 80072c8:	781a      	ldrb	r2, [r3, #0]
 80072ca:	4b63      	ldr	r3, [pc, #396]	@ (8007458 <hal_timer_set_pwm_output_period+0x330>)
 80072cc:	0112      	lsls	r2, r2, #4
 80072ce:	58d3      	ldr	r3, [r2, r3]
 80072d0:	1d3a      	adds	r2, r7, #4
 80072d2:	8812      	ldrh	r2, [r2, #0]
 80072d4:	62da      	str	r2, [r3, #44]	@ 0x2c
        	if( timer_defs[id].channel == TIMER_CH1)
 80072d6:	1dfb      	adds	r3, r7, #7
 80072d8:	781b      	ldrb	r3, [r3, #0]
 80072da:	4a5f      	ldr	r2, [pc, #380]	@ (8007458 <hal_timer_set_pwm_output_period+0x330>)
 80072dc:	011b      	lsls	r3, r3, #4
 80072de:	18d3      	adds	r3, r2, r3
 80072e0:	3305      	adds	r3, #5
 80072e2:	781b      	ldrb	r3, [r3, #0]
 80072e4:	2b01      	cmp	r3, #1
 80072e6:	d14a      	bne.n	800737e <hal_timer_set_pwm_output_period+0x256>
        	{
            	((TIM_TypeDef *)(timer_defs[id].timer))->CCR1 = on_time;        // ..and on time
 80072e8:	1dfb      	adds	r3, r7, #7
 80072ea:	781a      	ldrb	r2, [r3, #0]
 80072ec:	4b5a      	ldr	r3, [pc, #360]	@ (8007458 <hal_timer_set_pwm_output_period+0x330>)
 80072ee:	0112      	lsls	r2, r2, #4
 80072f0:	58d3      	ldr	r3, [r2, r3]
 80072f2:	1cba      	adds	r2, r7, #2
 80072f4:	8812      	ldrh	r2, [r2, #0]
 80072f6:	635a      	str	r2, [r3, #52]	@ 0x34
            	if( (((TIM_TypeDef *)(timer_defs[id].timer))->CCER & TIM_CCER_CC1E) == 0 )	 /* Channel is currently off */
 80072f8:	1dfb      	adds	r3, r7, #7
 80072fa:	781a      	ldrb	r2, [r3, #0]
 80072fc:	4b56      	ldr	r3, [pc, #344]	@ (8007458 <hal_timer_set_pwm_output_period+0x330>)
 80072fe:	0112      	lsls	r2, r2, #4
 8007300:	58d3      	ldr	r3, [r2, r3]
 8007302:	6a1b      	ldr	r3, [r3, #32]
 8007304:	2201      	movs	r2, #1
 8007306:	4013      	ands	r3, r2
 8007308:	d000      	beq.n	800730c <hal_timer_set_pwm_output_period+0x1e4>
 800730a:	e252      	b.n	80077b2 <hal_timer_set_pwm_output_period+0x68a>
				{
                    ((TIM_TypeDef *)(timer_defs[id].timer))->CCMR1 &= ~(TIM_CCMR1_OC1M | TIM_CCMR1_OC1FE);			/* Clear Output compare mode and the fast enable bits*/
 800730c:	1dfb      	adds	r3, r7, #7
 800730e:	781a      	ldrb	r2, [r3, #0]
 8007310:	4b51      	ldr	r3, [pc, #324]	@ (8007458 <hal_timer_set_pwm_output_period+0x330>)
 8007312:	0112      	lsls	r2, r2, #4
 8007314:	58d3      	ldr	r3, [r2, r3]
 8007316:	699a      	ldr	r2, [r3, #24]
 8007318:	1dfb      	adds	r3, r7, #7
 800731a:	7819      	ldrb	r1, [r3, #0]
 800731c:	4b4e      	ldr	r3, [pc, #312]	@ (8007458 <hal_timer_set_pwm_output_period+0x330>)
 800731e:	0109      	lsls	r1, r1, #4
 8007320:	58cb      	ldr	r3, [r1, r3]
 8007322:	4954      	ldr	r1, [pc, #336]	@ (8007474 <hal_timer_set_pwm_output_period+0x34c>)
 8007324:	400a      	ands	r2, r1
 8007326:	619a      	str	r2, [r3, #24]
                    ((TIM_TypeDef *)(timer_defs[id].timer))->CCMR1 |=  (TIM_CCMR1_OC1CE | 	 						/* Set the clear enable */
 8007328:	1dfb      	adds	r3, r7, #7
 800732a:	781a      	ldrb	r2, [r3, #0]
 800732c:	4b4a      	ldr	r3, [pc, #296]	@ (8007458 <hal_timer_set_pwm_output_period+0x330>)
 800732e:	0112      	lsls	r2, r2, #4
 8007330:	58d3      	ldr	r3, [r2, r3]
 8007332:	699a      	ldr	r2, [r3, #24]
 8007334:	1dfb      	adds	r3, r7, #7
 8007336:	7819      	ldrb	r1, [r3, #0]
 8007338:	4b47      	ldr	r3, [pc, #284]	@ (8007458 <hal_timer_set_pwm_output_period+0x330>)
 800733a:	0109      	lsls	r1, r1, #4
 800733c:	58cb      	ldr	r3, [r1, r3]
 800733e:	21e8      	movs	r1, #232	@ 0xe8
 8007340:	430a      	orrs	r2, r1
 8007342:	619a      	str	r2, [r3, #24]
                    													(TIM_CCMR1_OC1M_2 | TIM_CCMR1_OC1M_1) | 	/* Set the PWM Mode 1*/
    																	TIM_CCMR1_OC1PE);							/* Set the Fast Enable bit */
                    ((TIM_TypeDef *)(timer_defs[id].timer))->CCER  &= ~(TIM_CCER_CC1NP | TIM_CCER_CC1P);			/* Clear the channel 2 output polarity flags: OC2 will be active high */
 8007344:	1dfb      	adds	r3, r7, #7
 8007346:	781a      	ldrb	r2, [r3, #0]
 8007348:	4b43      	ldr	r3, [pc, #268]	@ (8007458 <hal_timer_set_pwm_output_period+0x330>)
 800734a:	0112      	lsls	r2, r2, #4
 800734c:	58d3      	ldr	r3, [r2, r3]
 800734e:	6a1a      	ldr	r2, [r3, #32]
 8007350:	1dfb      	adds	r3, r7, #7
 8007352:	7819      	ldrb	r1, [r3, #0]
 8007354:	4b40      	ldr	r3, [pc, #256]	@ (8007458 <hal_timer_set_pwm_output_period+0x330>)
 8007356:	0109      	lsls	r1, r1, #4
 8007358:	58cb      	ldr	r3, [r1, r3]
 800735a:	210a      	movs	r1, #10
 800735c:	438a      	bics	r2, r1
 800735e:	621a      	str	r2, [r3, #32]
                    ((TIM_TypeDef *)(timer_defs[id].timer))->CCER  |=  TIM_CCER_CC1E;								/* Enable channel 2 */
 8007360:	1dfb      	adds	r3, r7, #7
 8007362:	781a      	ldrb	r2, [r3, #0]
 8007364:	4b3c      	ldr	r3, [pc, #240]	@ (8007458 <hal_timer_set_pwm_output_period+0x330>)
 8007366:	0112      	lsls	r2, r2, #4
 8007368:	58d3      	ldr	r3, [r2, r3]
 800736a:	6a1a      	ldr	r2, [r3, #32]
 800736c:	1dfb      	adds	r3, r7, #7
 800736e:	7819      	ldrb	r1, [r3, #0]
 8007370:	4b39      	ldr	r3, [pc, #228]	@ (8007458 <hal_timer_set_pwm_output_period+0x330>)
 8007372:	0109      	lsls	r1, r1, #4
 8007374:	58cb      	ldr	r3, [r1, r3]
 8007376:	2101      	movs	r1, #1
 8007378:	430a      	orrs	r2, r1
 800737a:	621a      	str	r2, [r3, #32]
 800737c:	e219      	b.n	80077b2 <hal_timer_set_pwm_output_period+0x68a>
				}
        	}
        	else if (IS_TIM_CC2_INSTANCE(timer_defs[id].timer) && timer_defs[id].channel == TIMER_CH2)						/* Does the timer have channels?*/
 800737e:	1dfb      	adds	r3, r7, #7
 8007380:	781a      	ldrb	r2, [r3, #0]
 8007382:	4b35      	ldr	r3, [pc, #212]	@ (8007458 <hal_timer_set_pwm_output_period+0x330>)
 8007384:	0112      	lsls	r2, r2, #4
 8007386:	58d3      	ldr	r3, [r2, r3]
 8007388:	4a35      	ldr	r2, [pc, #212]	@ (8007460 <hal_timer_set_pwm_output_period+0x338>)
 800738a:	4293      	cmp	r3, r2
 800738c:	d00f      	beq.n	80073ae <hal_timer_set_pwm_output_period+0x286>
 800738e:	1dfb      	adds	r3, r7, #7
 8007390:	781a      	ldrb	r2, [r3, #0]
 8007392:	4b31      	ldr	r3, [pc, #196]	@ (8007458 <hal_timer_set_pwm_output_period+0x330>)
 8007394:	0112      	lsls	r2, r2, #4
 8007396:	58d3      	ldr	r3, [r2, r3]
 8007398:	4a37      	ldr	r2, [pc, #220]	@ (8007478 <hal_timer_set_pwm_output_period+0x350>)
 800739a:	4293      	cmp	r3, r2
 800739c:	d007      	beq.n	80073ae <hal_timer_set_pwm_output_period+0x286>
 800739e:	1dfb      	adds	r3, r7, #7
 80073a0:	781a      	ldrb	r2, [r3, #0]
 80073a2:	4b2d      	ldr	r3, [pc, #180]	@ (8007458 <hal_timer_set_pwm_output_period+0x330>)
 80073a4:	0112      	lsls	r2, r2, #4
 80073a6:	58d3      	ldr	r3, [r2, r3]
 80073a8:	4a2e      	ldr	r2, [pc, #184]	@ (8007464 <hal_timer_set_pwm_output_period+0x33c>)
 80073aa:	4293      	cmp	r3, r2
 80073ac:	d168      	bne.n	8007480 <hal_timer_set_pwm_output_period+0x358>
 80073ae:	1dfb      	adds	r3, r7, #7
 80073b0:	781b      	ldrb	r3, [r3, #0]
 80073b2:	4a29      	ldr	r2, [pc, #164]	@ (8007458 <hal_timer_set_pwm_output_period+0x330>)
 80073b4:	011b      	lsls	r3, r3, #4
 80073b6:	18d3      	adds	r3, r2, r3
 80073b8:	3305      	adds	r3, #5
 80073ba:	781b      	ldrb	r3, [r3, #0]
 80073bc:	2b02      	cmp	r3, #2
 80073be:	d15f      	bne.n	8007480 <hal_timer_set_pwm_output_period+0x358>
            {
            	((TIM_TypeDef *)(timer_defs[id].timer))->CCR2 = on_time;        // ..and on time
 80073c0:	1dfb      	adds	r3, r7, #7
 80073c2:	781a      	ldrb	r2, [r3, #0]
 80073c4:	4b24      	ldr	r3, [pc, #144]	@ (8007458 <hal_timer_set_pwm_output_period+0x330>)
 80073c6:	0112      	lsls	r2, r2, #4
 80073c8:	58d3      	ldr	r3, [r2, r3]
 80073ca:	1cba      	adds	r2, r7, #2
 80073cc:	8812      	ldrh	r2, [r2, #0]
 80073ce:	639a      	str	r2, [r3, #56]	@ 0x38
            	if( (((TIM_TypeDef *)(timer_defs[id].timer))->CCER & TIM_CCER_CC2E) == 0 )	 /* Channel is currently off */
 80073d0:	1dfb      	adds	r3, r7, #7
 80073d2:	781a      	ldrb	r2, [r3, #0]
 80073d4:	4b20      	ldr	r3, [pc, #128]	@ (8007458 <hal_timer_set_pwm_output_period+0x330>)
 80073d6:	0112      	lsls	r2, r2, #4
 80073d8:	58d3      	ldr	r3, [r2, r3]
 80073da:	6a1b      	ldr	r3, [r3, #32]
 80073dc:	2210      	movs	r2, #16
 80073de:	4013      	ands	r3, r2
 80073e0:	d000      	beq.n	80073e4 <hal_timer_set_pwm_output_period+0x2bc>
 80073e2:	e1e6      	b.n	80077b2 <hal_timer_set_pwm_output_period+0x68a>
				{
                    ((TIM_TypeDef *)(timer_defs[id].timer))->CCMR1 &= ~(TIM_CCMR1_OC2M | TIM_CCMR1_OC2FE);			/* Clear Output compare mode and the fast enable bits*/
 80073e4:	1dfb      	adds	r3, r7, #7
 80073e6:	781a      	ldrb	r2, [r3, #0]
 80073e8:	4b1b      	ldr	r3, [pc, #108]	@ (8007458 <hal_timer_set_pwm_output_period+0x330>)
 80073ea:	0112      	lsls	r2, r2, #4
 80073ec:	58d3      	ldr	r3, [r2, r3]
 80073ee:	699a      	ldr	r2, [r3, #24]
 80073f0:	1dfb      	adds	r3, r7, #7
 80073f2:	7819      	ldrb	r1, [r3, #0]
 80073f4:	4b18      	ldr	r3, [pc, #96]	@ (8007458 <hal_timer_set_pwm_output_period+0x330>)
 80073f6:	0109      	lsls	r1, r1, #4
 80073f8:	58cb      	ldr	r3, [r1, r3]
 80073fa:	4920      	ldr	r1, [pc, #128]	@ (800747c <hal_timer_set_pwm_output_period+0x354>)
 80073fc:	400a      	ands	r2, r1
 80073fe:	619a      	str	r2, [r3, #24]
                    ((TIM_TypeDef *)(timer_defs[id].timer))->CCMR1 |=  (TIM_CCMR1_OC2CE | 	 						/* Set the clear enable */
 8007400:	1dfb      	adds	r3, r7, #7
 8007402:	781a      	ldrb	r2, [r3, #0]
 8007404:	4b14      	ldr	r3, [pc, #80]	@ (8007458 <hal_timer_set_pwm_output_period+0x330>)
 8007406:	0112      	lsls	r2, r2, #4
 8007408:	58d3      	ldr	r3, [r2, r3]
 800740a:	699a      	ldr	r2, [r3, #24]
 800740c:	1dfb      	adds	r3, r7, #7
 800740e:	7819      	ldrb	r1, [r3, #0]
 8007410:	4b11      	ldr	r3, [pc, #68]	@ (8007458 <hal_timer_set_pwm_output_period+0x330>)
 8007412:	0109      	lsls	r1, r1, #4
 8007414:	58cb      	ldr	r3, [r1, r3]
 8007416:	21e8      	movs	r1, #232	@ 0xe8
 8007418:	0209      	lsls	r1, r1, #8
 800741a:	430a      	orrs	r2, r1
 800741c:	619a      	str	r2, [r3, #24]
                    													(TIM_CCMR1_OC2M_2 | TIM_CCMR1_OC2M_1) | 	/* Set the PWM Mode 1*/
    																	TIM_CCMR1_OC2PE);							/* Set the Fast Enable bit */
                    ((TIM_TypeDef *)(timer_defs[id].timer))->CCER  &= ~(TIM_CCER_CC2NP | TIM_CCER_CC2P);			/* Clear the channel 2 output polarity flags: OC2 will be active high */
 800741e:	1dfb      	adds	r3, r7, #7
 8007420:	781a      	ldrb	r2, [r3, #0]
 8007422:	4b0d      	ldr	r3, [pc, #52]	@ (8007458 <hal_timer_set_pwm_output_period+0x330>)
 8007424:	0112      	lsls	r2, r2, #4
 8007426:	58d3      	ldr	r3, [r2, r3]
 8007428:	6a1a      	ldr	r2, [r3, #32]
 800742a:	1dfb      	adds	r3, r7, #7
 800742c:	7819      	ldrb	r1, [r3, #0]
 800742e:	4b0a      	ldr	r3, [pc, #40]	@ (8007458 <hal_timer_set_pwm_output_period+0x330>)
 8007430:	0109      	lsls	r1, r1, #4
 8007432:	58cb      	ldr	r3, [r1, r3]
 8007434:	21a0      	movs	r1, #160	@ 0xa0
 8007436:	438a      	bics	r2, r1
 8007438:	621a      	str	r2, [r3, #32]
                    ((TIM_TypeDef *)(timer_defs[id].timer))->CCER  |=  TIM_CCER_CC2E;								/* Enable channel 2 */
 800743a:	1dfb      	adds	r3, r7, #7
 800743c:	781a      	ldrb	r2, [r3, #0]
 800743e:	4b06      	ldr	r3, [pc, #24]	@ (8007458 <hal_timer_set_pwm_output_period+0x330>)
 8007440:	0112      	lsls	r2, r2, #4
 8007442:	58d3      	ldr	r3, [r2, r3]
 8007444:	6a1a      	ldr	r2, [r3, #32]
 8007446:	1dfb      	adds	r3, r7, #7
 8007448:	7819      	ldrb	r1, [r3, #0]
 800744a:	4b03      	ldr	r3, [pc, #12]	@ (8007458 <hal_timer_set_pwm_output_period+0x330>)
 800744c:	0109      	lsls	r1, r1, #4
 800744e:	58cb      	ldr	r3, [r1, r3]
 8007450:	2110      	movs	r1, #16
 8007452:	430a      	orrs	r2, r1
 8007454:	621a      	str	r2, [r3, #32]
            	if( (((TIM_TypeDef *)(timer_defs[id].timer))->CCER & TIM_CCER_CC2E) == 0 )	 /* Channel is currently off */
 8007456:	e1ac      	b.n	80077b2 <hal_timer_set_pwm_output_period+0x68a>
 8007458:	200000c4 	.word	0x200000c4
 800745c:	08007ff4 	.word	0x08007ff4
 8007460:	40012c00 	.word	0x40012c00
 8007464:	40014000 	.word	0x40014000
 8007468:	40014400 	.word	0x40014400
 800746c:	40014800 	.word	0x40014800
 8007470:	ffff73ff 	.word	0xffff73ff
 8007474:	fffeff8b 	.word	0xfffeff8b
 8007478:	40000400 	.word	0x40000400
 800747c:	feff8bff 	.word	0xfeff8bff
				}
            }
        	else if (IS_TIM_CC3_INSTANCE(timer_defs[id].timer) && timer_defs[id].channel == TIMER_CH3)						/* Does the timer have channels?*/
 8007480:	1dfb      	adds	r3, r7, #7
 8007482:	781a      	ldrb	r2, [r3, #0]
 8007484:	4b94      	ldr	r3, [pc, #592]	@ (80076d8 <hal_timer_set_pwm_output_period+0x5b0>)
 8007486:	0112      	lsls	r2, r2, #4
 8007488:	58d3      	ldr	r3, [r2, r3]
 800748a:	4a94      	ldr	r2, [pc, #592]	@ (80076dc <hal_timer_set_pwm_output_period+0x5b4>)
 800748c:	4293      	cmp	r3, r2
 800748e:	d007      	beq.n	80074a0 <hal_timer_set_pwm_output_period+0x378>
 8007490:	1dfb      	adds	r3, r7, #7
 8007492:	781a      	ldrb	r2, [r3, #0]
 8007494:	4b90      	ldr	r3, [pc, #576]	@ (80076d8 <hal_timer_set_pwm_output_period+0x5b0>)
 8007496:	0112      	lsls	r2, r2, #4
 8007498:	58d3      	ldr	r3, [r2, r3]
 800749a:	4a91      	ldr	r2, [pc, #580]	@ (80076e0 <hal_timer_set_pwm_output_period+0x5b8>)
 800749c:	4293      	cmp	r3, r2
 800749e:	d155      	bne.n	800754c <hal_timer_set_pwm_output_period+0x424>
 80074a0:	1dfb      	adds	r3, r7, #7
 80074a2:	781b      	ldrb	r3, [r3, #0]
 80074a4:	4a8c      	ldr	r2, [pc, #560]	@ (80076d8 <hal_timer_set_pwm_output_period+0x5b0>)
 80074a6:	011b      	lsls	r3, r3, #4
 80074a8:	18d3      	adds	r3, r2, r3
 80074aa:	3305      	adds	r3, #5
 80074ac:	781b      	ldrb	r3, [r3, #0]
 80074ae:	2b03      	cmp	r3, #3
 80074b0:	d14c      	bne.n	800754c <hal_timer_set_pwm_output_period+0x424>
            {
				((TIM_TypeDef *)(timer_defs[id].timer))->CCR3 = on_time;        // ..and on time
 80074b2:	1dfb      	adds	r3, r7, #7
 80074b4:	781a      	ldrb	r2, [r3, #0]
 80074b6:	4b88      	ldr	r3, [pc, #544]	@ (80076d8 <hal_timer_set_pwm_output_period+0x5b0>)
 80074b8:	0112      	lsls	r2, r2, #4
 80074ba:	58d3      	ldr	r3, [r2, r3]
 80074bc:	1cba      	adds	r2, r7, #2
 80074be:	8812      	ldrh	r2, [r2, #0]
 80074c0:	63da      	str	r2, [r3, #60]	@ 0x3c
				if( (((TIM_TypeDef *)(timer_defs[id].timer))->CCER & TIM_CCER_CC3E) == 0 )	 /* Channel is currently off */
 80074c2:	1dfb      	adds	r3, r7, #7
 80074c4:	781a      	ldrb	r2, [r3, #0]
 80074c6:	4b84      	ldr	r3, [pc, #528]	@ (80076d8 <hal_timer_set_pwm_output_period+0x5b0>)
 80074c8:	0112      	lsls	r2, r2, #4
 80074ca:	58d3      	ldr	r3, [r2, r3]
 80074cc:	6a1a      	ldr	r2, [r3, #32]
 80074ce:	2380      	movs	r3, #128	@ 0x80
 80074d0:	005b      	lsls	r3, r3, #1
 80074d2:	4013      	ands	r3, r2
 80074d4:	d000      	beq.n	80074d8 <hal_timer_set_pwm_output_period+0x3b0>
 80074d6:	e16c      	b.n	80077b2 <hal_timer_set_pwm_output_period+0x68a>
				{
					((TIM_TypeDef *)(timer_defs[id].timer))->CCMR2 &= ~(TIM_CCMR2_OC3M | TIM_CCMR2_OC3FE);			/* Clear Output compare mode and the fast enable bits*/
 80074d8:	1dfb      	adds	r3, r7, #7
 80074da:	781a      	ldrb	r2, [r3, #0]
 80074dc:	4b7e      	ldr	r3, [pc, #504]	@ (80076d8 <hal_timer_set_pwm_output_period+0x5b0>)
 80074de:	0112      	lsls	r2, r2, #4
 80074e0:	58d3      	ldr	r3, [r2, r3]
 80074e2:	69da      	ldr	r2, [r3, #28]
 80074e4:	1dfb      	adds	r3, r7, #7
 80074e6:	7819      	ldrb	r1, [r3, #0]
 80074e8:	4b7b      	ldr	r3, [pc, #492]	@ (80076d8 <hal_timer_set_pwm_output_period+0x5b0>)
 80074ea:	0109      	lsls	r1, r1, #4
 80074ec:	58cb      	ldr	r3, [r1, r3]
 80074ee:	497d      	ldr	r1, [pc, #500]	@ (80076e4 <hal_timer_set_pwm_output_period+0x5bc>)
 80074f0:	400a      	ands	r2, r1
 80074f2:	61da      	str	r2, [r3, #28]
					((TIM_TypeDef *)(timer_defs[id].timer))->CCMR2 |=  (TIM_CCMR2_OC3CE | 	 						/* Set the clear enable */
 80074f4:	1dfb      	adds	r3, r7, #7
 80074f6:	781a      	ldrb	r2, [r3, #0]
 80074f8:	4b77      	ldr	r3, [pc, #476]	@ (80076d8 <hal_timer_set_pwm_output_period+0x5b0>)
 80074fa:	0112      	lsls	r2, r2, #4
 80074fc:	58d3      	ldr	r3, [r2, r3]
 80074fe:	69da      	ldr	r2, [r3, #28]
 8007500:	1dfb      	adds	r3, r7, #7
 8007502:	7819      	ldrb	r1, [r3, #0]
 8007504:	4b74      	ldr	r3, [pc, #464]	@ (80076d8 <hal_timer_set_pwm_output_period+0x5b0>)
 8007506:	0109      	lsls	r1, r1, #4
 8007508:	58cb      	ldr	r3, [r1, r3]
 800750a:	21e8      	movs	r1, #232	@ 0xe8
 800750c:	430a      	orrs	r2, r1
 800750e:	61da      	str	r2, [r3, #28]
																		(TIM_CCMR2_OC3M_2 | TIM_CCMR2_OC3M_1) | 	/* Set the PWM Mode 1*/
																		TIM_CCMR2_OC3PE);							/* Set the Fast Enable bit */
					((TIM_TypeDef *)(timer_defs[id].timer))->CCER  &= ~(TIM_CCER_CC3NP | TIM_CCER_CC3P);			/* Clear the channel 2 output polarity flags: OC2 will be active high */
 8007510:	1dfb      	adds	r3, r7, #7
 8007512:	781a      	ldrb	r2, [r3, #0]
 8007514:	4b70      	ldr	r3, [pc, #448]	@ (80076d8 <hal_timer_set_pwm_output_period+0x5b0>)
 8007516:	0112      	lsls	r2, r2, #4
 8007518:	58d3      	ldr	r3, [r2, r3]
 800751a:	6a1a      	ldr	r2, [r3, #32]
 800751c:	1dfb      	adds	r3, r7, #7
 800751e:	7819      	ldrb	r1, [r3, #0]
 8007520:	4b6d      	ldr	r3, [pc, #436]	@ (80076d8 <hal_timer_set_pwm_output_period+0x5b0>)
 8007522:	0109      	lsls	r1, r1, #4
 8007524:	58cb      	ldr	r3, [r1, r3]
 8007526:	4970      	ldr	r1, [pc, #448]	@ (80076e8 <hal_timer_set_pwm_output_period+0x5c0>)
 8007528:	400a      	ands	r2, r1
 800752a:	621a      	str	r2, [r3, #32]
					((TIM_TypeDef *)(timer_defs[id].timer))->CCER  |=  TIM_CCER_CC3E;								/* Enable channel 2 */
 800752c:	1dfb      	adds	r3, r7, #7
 800752e:	781a      	ldrb	r2, [r3, #0]
 8007530:	4b69      	ldr	r3, [pc, #420]	@ (80076d8 <hal_timer_set_pwm_output_period+0x5b0>)
 8007532:	0112      	lsls	r2, r2, #4
 8007534:	58d3      	ldr	r3, [r2, r3]
 8007536:	6a1a      	ldr	r2, [r3, #32]
 8007538:	1dfb      	adds	r3, r7, #7
 800753a:	7819      	ldrb	r1, [r3, #0]
 800753c:	4b66      	ldr	r3, [pc, #408]	@ (80076d8 <hal_timer_set_pwm_output_period+0x5b0>)
 800753e:	0109      	lsls	r1, r1, #4
 8007540:	58cb      	ldr	r3, [r1, r3]
 8007542:	2180      	movs	r1, #128	@ 0x80
 8007544:	0049      	lsls	r1, r1, #1
 8007546:	430a      	orrs	r2, r1
 8007548:	621a      	str	r2, [r3, #32]
				if( (((TIM_TypeDef *)(timer_defs[id].timer))->CCER & TIM_CCER_CC3E) == 0 )	 /* Channel is currently off */
 800754a:	e132      	b.n	80077b2 <hal_timer_set_pwm_output_period+0x68a>
				}
            }
        	else if (IS_TIM_CC4_INSTANCE(timer_defs[id].timer) && timer_defs[id].channel == TIMER_CH4)						/* Does the timer have channels?*/
 800754c:	1dfb      	adds	r3, r7, #7
 800754e:	781a      	ldrb	r2, [r3, #0]
 8007550:	4b61      	ldr	r3, [pc, #388]	@ (80076d8 <hal_timer_set_pwm_output_period+0x5b0>)
 8007552:	0112      	lsls	r2, r2, #4
 8007554:	58d3      	ldr	r3, [r2, r3]
 8007556:	4a61      	ldr	r2, [pc, #388]	@ (80076dc <hal_timer_set_pwm_output_period+0x5b4>)
 8007558:	4293      	cmp	r3, r2
 800755a:	d007      	beq.n	800756c <hal_timer_set_pwm_output_period+0x444>
 800755c:	1dfb      	adds	r3, r7, #7
 800755e:	781a      	ldrb	r2, [r3, #0]
 8007560:	4b5d      	ldr	r3, [pc, #372]	@ (80076d8 <hal_timer_set_pwm_output_period+0x5b0>)
 8007562:	0112      	lsls	r2, r2, #4
 8007564:	58d3      	ldr	r3, [r2, r3]
 8007566:	4a5e      	ldr	r2, [pc, #376]	@ (80076e0 <hal_timer_set_pwm_output_period+0x5b8>)
 8007568:	4293      	cmp	r3, r2
 800756a:	d156      	bne.n	800761a <hal_timer_set_pwm_output_period+0x4f2>
 800756c:	1dfb      	adds	r3, r7, #7
 800756e:	781b      	ldrb	r3, [r3, #0]
 8007570:	4a59      	ldr	r2, [pc, #356]	@ (80076d8 <hal_timer_set_pwm_output_period+0x5b0>)
 8007572:	011b      	lsls	r3, r3, #4
 8007574:	18d3      	adds	r3, r2, r3
 8007576:	3305      	adds	r3, #5
 8007578:	781b      	ldrb	r3, [r3, #0]
 800757a:	2b04      	cmp	r3, #4
 800757c:	d14d      	bne.n	800761a <hal_timer_set_pwm_output_period+0x4f2>
            {
				((TIM_TypeDef *)(timer_defs[id].timer))->CCR4 = on_time;        // ..and on time
 800757e:	1dfb      	adds	r3, r7, #7
 8007580:	781a      	ldrb	r2, [r3, #0]
 8007582:	4b55      	ldr	r3, [pc, #340]	@ (80076d8 <hal_timer_set_pwm_output_period+0x5b0>)
 8007584:	0112      	lsls	r2, r2, #4
 8007586:	58d3      	ldr	r3, [r2, r3]
 8007588:	1cba      	adds	r2, r7, #2
 800758a:	8812      	ldrh	r2, [r2, #0]
 800758c:	641a      	str	r2, [r3, #64]	@ 0x40
				if( (((TIM_TypeDef *)(timer_defs[id].timer))->CCER & TIM_CCER_CC4E) == 0 )	 /* Channel is currently off */
 800758e:	1dfb      	adds	r3, r7, #7
 8007590:	781a      	ldrb	r2, [r3, #0]
 8007592:	4b51      	ldr	r3, [pc, #324]	@ (80076d8 <hal_timer_set_pwm_output_period+0x5b0>)
 8007594:	0112      	lsls	r2, r2, #4
 8007596:	58d3      	ldr	r3, [r2, r3]
 8007598:	6a1a      	ldr	r2, [r3, #32]
 800759a:	2380      	movs	r3, #128	@ 0x80
 800759c:	015b      	lsls	r3, r3, #5
 800759e:	4013      	ands	r3, r2
 80075a0:	d000      	beq.n	80075a4 <hal_timer_set_pwm_output_period+0x47c>
 80075a2:	e106      	b.n	80077b2 <hal_timer_set_pwm_output_period+0x68a>
				{
					((TIM_TypeDef *)(timer_defs[id].timer))->CCMR2 &= ~(TIM_CCMR2_OC4M | TIM_CCMR2_OC4FE);			/* Clear Output compare mode and the fast enable bits*/
 80075a4:	1dfb      	adds	r3, r7, #7
 80075a6:	781a      	ldrb	r2, [r3, #0]
 80075a8:	4b4b      	ldr	r3, [pc, #300]	@ (80076d8 <hal_timer_set_pwm_output_period+0x5b0>)
 80075aa:	0112      	lsls	r2, r2, #4
 80075ac:	58d3      	ldr	r3, [r2, r3]
 80075ae:	69da      	ldr	r2, [r3, #28]
 80075b0:	1dfb      	adds	r3, r7, #7
 80075b2:	7819      	ldrb	r1, [r3, #0]
 80075b4:	4b48      	ldr	r3, [pc, #288]	@ (80076d8 <hal_timer_set_pwm_output_period+0x5b0>)
 80075b6:	0109      	lsls	r1, r1, #4
 80075b8:	58cb      	ldr	r3, [r1, r3]
 80075ba:	494c      	ldr	r1, [pc, #304]	@ (80076ec <hal_timer_set_pwm_output_period+0x5c4>)
 80075bc:	400a      	ands	r2, r1
 80075be:	61da      	str	r2, [r3, #28]
					((TIM_TypeDef *)(timer_defs[id].timer))->CCMR2 |=  (TIM_CCMR2_OC4CE | 	 						/* Set the clear enable */
 80075c0:	1dfb      	adds	r3, r7, #7
 80075c2:	781a      	ldrb	r2, [r3, #0]
 80075c4:	4b44      	ldr	r3, [pc, #272]	@ (80076d8 <hal_timer_set_pwm_output_period+0x5b0>)
 80075c6:	0112      	lsls	r2, r2, #4
 80075c8:	58d3      	ldr	r3, [r2, r3]
 80075ca:	69da      	ldr	r2, [r3, #28]
 80075cc:	1dfb      	adds	r3, r7, #7
 80075ce:	7819      	ldrb	r1, [r3, #0]
 80075d0:	4b41      	ldr	r3, [pc, #260]	@ (80076d8 <hal_timer_set_pwm_output_period+0x5b0>)
 80075d2:	0109      	lsls	r1, r1, #4
 80075d4:	58cb      	ldr	r3, [r1, r3]
 80075d6:	21e8      	movs	r1, #232	@ 0xe8
 80075d8:	0209      	lsls	r1, r1, #8
 80075da:	430a      	orrs	r2, r1
 80075dc:	61da      	str	r2, [r3, #28]
																		(TIM_CCMR2_OC4M_2 | TIM_CCMR2_OC4M_1) | 	/* Set the PWM Mode 1*/
																		TIM_CCMR2_OC4PE);							/* Set the Fast Enable bit */
					((TIM_TypeDef *)(timer_defs[id].timer))->CCER  &= ~(TIM_CCER_CC4NP | TIM_CCER_CC4P);			/* Clear the channel 2 output polarity flags: OC2 will be active high */
 80075de:	1dfb      	adds	r3, r7, #7
 80075e0:	781a      	ldrb	r2, [r3, #0]
 80075e2:	4b3d      	ldr	r3, [pc, #244]	@ (80076d8 <hal_timer_set_pwm_output_period+0x5b0>)
 80075e4:	0112      	lsls	r2, r2, #4
 80075e6:	58d3      	ldr	r3, [r2, r3]
 80075e8:	6a1a      	ldr	r2, [r3, #32]
 80075ea:	1dfb      	adds	r3, r7, #7
 80075ec:	7819      	ldrb	r1, [r3, #0]
 80075ee:	4b3a      	ldr	r3, [pc, #232]	@ (80076d8 <hal_timer_set_pwm_output_period+0x5b0>)
 80075f0:	0109      	lsls	r1, r1, #4
 80075f2:	58cb      	ldr	r3, [r1, r3]
 80075f4:	493e      	ldr	r1, [pc, #248]	@ (80076f0 <hal_timer_set_pwm_output_period+0x5c8>)
 80075f6:	400a      	ands	r2, r1
 80075f8:	621a      	str	r2, [r3, #32]
					((TIM_TypeDef *)(timer_defs[id].timer))->CCER  |=  TIM_CCER_CC4E;								/* Enable channel 2 */
 80075fa:	1dfb      	adds	r3, r7, #7
 80075fc:	781a      	ldrb	r2, [r3, #0]
 80075fe:	4b36      	ldr	r3, [pc, #216]	@ (80076d8 <hal_timer_set_pwm_output_period+0x5b0>)
 8007600:	0112      	lsls	r2, r2, #4
 8007602:	58d3      	ldr	r3, [r2, r3]
 8007604:	6a1a      	ldr	r2, [r3, #32]
 8007606:	1dfb      	adds	r3, r7, #7
 8007608:	7819      	ldrb	r1, [r3, #0]
 800760a:	4b33      	ldr	r3, [pc, #204]	@ (80076d8 <hal_timer_set_pwm_output_period+0x5b0>)
 800760c:	0109      	lsls	r1, r1, #4
 800760e:	58cb      	ldr	r3, [r1, r3]
 8007610:	2180      	movs	r1, #128	@ 0x80
 8007612:	0149      	lsls	r1, r1, #5
 8007614:	430a      	orrs	r2, r1
 8007616:	621a      	str	r2, [r3, #32]
				if( (((TIM_TypeDef *)(timer_defs[id].timer))->CCER & TIM_CCER_CC4E) == 0 )	 /* Channel is currently off */
 8007618:	e0cb      	b.n	80077b2 <hal_timer_set_pwm_output_period+0x68a>
				}
            }
        	else if (IS_TIM_CC5_INSTANCE(timer_defs[id].timer) && timer_defs[id].channel == TIMER_CH5)						/* Does the timer have channels?*/
 800761a:	1dfb      	adds	r3, r7, #7
 800761c:	781a      	ldrb	r2, [r3, #0]
 800761e:	4b2e      	ldr	r3, [pc, #184]	@ (80076d8 <hal_timer_set_pwm_output_period+0x5b0>)
 8007620:	0112      	lsls	r2, r2, #4
 8007622:	58d3      	ldr	r3, [r2, r3]
 8007624:	4a2d      	ldr	r2, [pc, #180]	@ (80076dc <hal_timer_set_pwm_output_period+0x5b4>)
 8007626:	4293      	cmp	r3, r2
 8007628:	d166      	bne.n	80076f8 <hal_timer_set_pwm_output_period+0x5d0>
 800762a:	1dfb      	adds	r3, r7, #7
 800762c:	781b      	ldrb	r3, [r3, #0]
 800762e:	4a2a      	ldr	r2, [pc, #168]	@ (80076d8 <hal_timer_set_pwm_output_period+0x5b0>)
 8007630:	011b      	lsls	r3, r3, #4
 8007632:	18d3      	adds	r3, r2, r3
 8007634:	3305      	adds	r3, #5
 8007636:	781b      	ldrb	r3, [r3, #0]
 8007638:	2b05      	cmp	r3, #5
 800763a:	d15d      	bne.n	80076f8 <hal_timer_set_pwm_output_period+0x5d0>
            {
				((TIM_TypeDef *)(timer_defs[id].timer))->CCR5 = on_time;        // ..and on time
 800763c:	1dfb      	adds	r3, r7, #7
 800763e:	781a      	ldrb	r2, [r3, #0]
 8007640:	4b25      	ldr	r3, [pc, #148]	@ (80076d8 <hal_timer_set_pwm_output_period+0x5b0>)
 8007642:	0112      	lsls	r2, r2, #4
 8007644:	58d3      	ldr	r3, [r2, r3]
 8007646:	1cba      	adds	r2, r7, #2
 8007648:	8812      	ldrh	r2, [r2, #0]
 800764a:	659a      	str	r2, [r3, #88]	@ 0x58
				if( (((TIM_TypeDef *)(timer_defs[id].timer))->CCER & TIM_CCER_CC5E) == 0 )	 /* Channel is currently off */
 800764c:	1dfb      	adds	r3, r7, #7
 800764e:	781a      	ldrb	r2, [r3, #0]
 8007650:	4b21      	ldr	r3, [pc, #132]	@ (80076d8 <hal_timer_set_pwm_output_period+0x5b0>)
 8007652:	0112      	lsls	r2, r2, #4
 8007654:	58d3      	ldr	r3, [r2, r3]
 8007656:	6a1a      	ldr	r2, [r3, #32]
 8007658:	2380      	movs	r3, #128	@ 0x80
 800765a:	025b      	lsls	r3, r3, #9
 800765c:	4013      	ands	r3, r2
 800765e:	d000      	beq.n	8007662 <hal_timer_set_pwm_output_period+0x53a>
 8007660:	e0a7      	b.n	80077b2 <hal_timer_set_pwm_output_period+0x68a>
				{
					((TIM_TypeDef *)(timer_defs[id].timer))->CCMR3 &= ~(TIM_CCMR3_OC5M | TIM_CCMR3_OC5FE);			/* Clear Output compare mode and the fast enable bits*/
 8007662:	1dfb      	adds	r3, r7, #7
 8007664:	781a      	ldrb	r2, [r3, #0]
 8007666:	4b1c      	ldr	r3, [pc, #112]	@ (80076d8 <hal_timer_set_pwm_output_period+0x5b0>)
 8007668:	0112      	lsls	r2, r2, #4
 800766a:	58d3      	ldr	r3, [r2, r3]
 800766c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800766e:	1dfb      	adds	r3, r7, #7
 8007670:	7819      	ldrb	r1, [r3, #0]
 8007672:	4b19      	ldr	r3, [pc, #100]	@ (80076d8 <hal_timer_set_pwm_output_period+0x5b0>)
 8007674:	0109      	lsls	r1, r1, #4
 8007676:	58cb      	ldr	r3, [r1, r3]
 8007678:	491a      	ldr	r1, [pc, #104]	@ (80076e4 <hal_timer_set_pwm_output_period+0x5bc>)
 800767a:	400a      	ands	r2, r1
 800767c:	655a      	str	r2, [r3, #84]	@ 0x54
					((TIM_TypeDef *)(timer_defs[id].timer))->CCMR3 |=  (TIM_CCMR3_OC5CE | 	 						/* Set the clear enable */
 800767e:	1dfb      	adds	r3, r7, #7
 8007680:	781a      	ldrb	r2, [r3, #0]
 8007682:	4b15      	ldr	r3, [pc, #84]	@ (80076d8 <hal_timer_set_pwm_output_period+0x5b0>)
 8007684:	0112      	lsls	r2, r2, #4
 8007686:	58d3      	ldr	r3, [r2, r3]
 8007688:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800768a:	1dfb      	adds	r3, r7, #7
 800768c:	7819      	ldrb	r1, [r3, #0]
 800768e:	4b12      	ldr	r3, [pc, #72]	@ (80076d8 <hal_timer_set_pwm_output_period+0x5b0>)
 8007690:	0109      	lsls	r1, r1, #4
 8007692:	58cb      	ldr	r3, [r1, r3]
 8007694:	21e8      	movs	r1, #232	@ 0xe8
 8007696:	430a      	orrs	r2, r1
 8007698:	655a      	str	r2, [r3, #84]	@ 0x54
																		(TIM_CCMR3_OC5M_2 | TIM_CCMR3_OC5M_1) | 	/* Set the PWM Mode 1*/
																		TIM_CCMR3_OC5PE);							/* Set the Fast Enable bit */
					((TIM_TypeDef *)(timer_defs[id].timer))->CCER  &= ~(TIM_CCER_CC5P);								/* Clear the channel 2 output polarity flags: OC2 will be active high */
 800769a:	1dfb      	adds	r3, r7, #7
 800769c:	781a      	ldrb	r2, [r3, #0]
 800769e:	4b0e      	ldr	r3, [pc, #56]	@ (80076d8 <hal_timer_set_pwm_output_period+0x5b0>)
 80076a0:	0112      	lsls	r2, r2, #4
 80076a2:	58d3      	ldr	r3, [r2, r3]
 80076a4:	6a1a      	ldr	r2, [r3, #32]
 80076a6:	1dfb      	adds	r3, r7, #7
 80076a8:	7819      	ldrb	r1, [r3, #0]
 80076aa:	4b0b      	ldr	r3, [pc, #44]	@ (80076d8 <hal_timer_set_pwm_output_period+0x5b0>)
 80076ac:	0109      	lsls	r1, r1, #4
 80076ae:	58cb      	ldr	r3, [r1, r3]
 80076b0:	4910      	ldr	r1, [pc, #64]	@ (80076f4 <hal_timer_set_pwm_output_period+0x5cc>)
 80076b2:	400a      	ands	r2, r1
 80076b4:	621a      	str	r2, [r3, #32]
					((TIM_TypeDef *)(timer_defs[id].timer))->CCER  |=  TIM_CCER_CC5E;								/* Enable channel 5 */
 80076b6:	1dfb      	adds	r3, r7, #7
 80076b8:	781a      	ldrb	r2, [r3, #0]
 80076ba:	4b07      	ldr	r3, [pc, #28]	@ (80076d8 <hal_timer_set_pwm_output_period+0x5b0>)
 80076bc:	0112      	lsls	r2, r2, #4
 80076be:	58d3      	ldr	r3, [r2, r3]
 80076c0:	6a1a      	ldr	r2, [r3, #32]
 80076c2:	1dfb      	adds	r3, r7, #7
 80076c4:	7819      	ldrb	r1, [r3, #0]
 80076c6:	4b04      	ldr	r3, [pc, #16]	@ (80076d8 <hal_timer_set_pwm_output_period+0x5b0>)
 80076c8:	0109      	lsls	r1, r1, #4
 80076ca:	58cb      	ldr	r3, [r1, r3]
 80076cc:	2180      	movs	r1, #128	@ 0x80
 80076ce:	0249      	lsls	r1, r1, #9
 80076d0:	430a      	orrs	r2, r1
 80076d2:	621a      	str	r2, [r3, #32]
				if( (((TIM_TypeDef *)(timer_defs[id].timer))->CCER & TIM_CCER_CC5E) == 0 )	 /* Channel is currently off */
 80076d4:	e06d      	b.n	80077b2 <hal_timer_set_pwm_output_period+0x68a>
 80076d6:	46c0      	nop			@ (mov r8, r8)
 80076d8:	200000c4 	.word	0x200000c4
 80076dc:	40012c00 	.word	0x40012c00
 80076e0:	40000400 	.word	0x40000400
 80076e4:	fffeff8b 	.word	0xfffeff8b
 80076e8:	fffff5ff 	.word	0xfffff5ff
 80076ec:	feff8bff 	.word	0xfeff8bff
 80076f0:	ffff5fff 	.word	0xffff5fff
 80076f4:	fffdffff 	.word	0xfffdffff
				}
            }
        	else if (IS_TIM_CC6_INSTANCE(timer_defs[id].timer) && timer_defs[id].channel == TIMER_CH6)						/* Does the timer have channels?*/
 80076f8:	1dfb      	adds	r3, r7, #7
 80076fa:	781a      	ldrb	r2, [r3, #0]
 80076fc:	4b57      	ldr	r3, [pc, #348]	@ (800785c <hal_timer_set_pwm_output_period+0x734>)
 80076fe:	0112      	lsls	r2, r2, #4
 8007700:	58d3      	ldr	r3, [r2, r3]
 8007702:	4a57      	ldr	r2, [pc, #348]	@ (8007860 <hal_timer_set_pwm_output_period+0x738>)
 8007704:	4293      	cmp	r3, r2
 8007706:	d154      	bne.n	80077b2 <hal_timer_set_pwm_output_period+0x68a>
 8007708:	1dfb      	adds	r3, r7, #7
 800770a:	781b      	ldrb	r3, [r3, #0]
 800770c:	4a53      	ldr	r2, [pc, #332]	@ (800785c <hal_timer_set_pwm_output_period+0x734>)
 800770e:	011b      	lsls	r3, r3, #4
 8007710:	18d3      	adds	r3, r2, r3
 8007712:	3305      	adds	r3, #5
 8007714:	781b      	ldrb	r3, [r3, #0]
 8007716:	2b06      	cmp	r3, #6
 8007718:	d14b      	bne.n	80077b2 <hal_timer_set_pwm_output_period+0x68a>
            {
				((TIM_TypeDef *)(timer_defs[id].timer))->CCR6 = on_time;        // ..and on time
 800771a:	1dfb      	adds	r3, r7, #7
 800771c:	781a      	ldrb	r2, [r3, #0]
 800771e:	4b4f      	ldr	r3, [pc, #316]	@ (800785c <hal_timer_set_pwm_output_period+0x734>)
 8007720:	0112      	lsls	r2, r2, #4
 8007722:	58d3      	ldr	r3, [r2, r3]
 8007724:	1cba      	adds	r2, r7, #2
 8007726:	8812      	ldrh	r2, [r2, #0]
 8007728:	65da      	str	r2, [r3, #92]	@ 0x5c
				if( (((TIM_TypeDef *)(timer_defs[id].timer))->CCER & TIM_CCER_CC6E) == 0 )	 /* Channel is currently off */
 800772a:	1dfb      	adds	r3, r7, #7
 800772c:	781a      	ldrb	r2, [r3, #0]
 800772e:	4b4b      	ldr	r3, [pc, #300]	@ (800785c <hal_timer_set_pwm_output_period+0x734>)
 8007730:	0112      	lsls	r2, r2, #4
 8007732:	58d3      	ldr	r3, [r2, r3]
 8007734:	6a1a      	ldr	r2, [r3, #32]
 8007736:	2380      	movs	r3, #128	@ 0x80
 8007738:	035b      	lsls	r3, r3, #13
 800773a:	4013      	ands	r3, r2
 800773c:	d139      	bne.n	80077b2 <hal_timer_set_pwm_output_period+0x68a>
				{
					((TIM_TypeDef *)(timer_defs[id].timer))->CCMR3 &= ~(TIM_CCMR3_OC6M | TIM_CCMR3_OC6FE);			/* Clear Output compare mode and the fast enable bits*/
 800773e:	1dfb      	adds	r3, r7, #7
 8007740:	781a      	ldrb	r2, [r3, #0]
 8007742:	4b46      	ldr	r3, [pc, #280]	@ (800785c <hal_timer_set_pwm_output_period+0x734>)
 8007744:	0112      	lsls	r2, r2, #4
 8007746:	58d3      	ldr	r3, [r2, r3]
 8007748:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800774a:	1dfb      	adds	r3, r7, #7
 800774c:	7819      	ldrb	r1, [r3, #0]
 800774e:	4b43      	ldr	r3, [pc, #268]	@ (800785c <hal_timer_set_pwm_output_period+0x734>)
 8007750:	0109      	lsls	r1, r1, #4
 8007752:	58cb      	ldr	r3, [r1, r3]
 8007754:	4943      	ldr	r1, [pc, #268]	@ (8007864 <hal_timer_set_pwm_output_period+0x73c>)
 8007756:	400a      	ands	r2, r1
 8007758:	655a      	str	r2, [r3, #84]	@ 0x54
					((TIM_TypeDef *)(timer_defs[id].timer))->CCMR3 |=  (TIM_CCMR3_OC6CE | 	 						/* Set the clear enable */
 800775a:	1dfb      	adds	r3, r7, #7
 800775c:	781a      	ldrb	r2, [r3, #0]
 800775e:	4b3f      	ldr	r3, [pc, #252]	@ (800785c <hal_timer_set_pwm_output_period+0x734>)
 8007760:	0112      	lsls	r2, r2, #4
 8007762:	58d3      	ldr	r3, [r2, r3]
 8007764:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007766:	1dfb      	adds	r3, r7, #7
 8007768:	7819      	ldrb	r1, [r3, #0]
 800776a:	4b3c      	ldr	r3, [pc, #240]	@ (800785c <hal_timer_set_pwm_output_period+0x734>)
 800776c:	0109      	lsls	r1, r1, #4
 800776e:	58cb      	ldr	r3, [r1, r3]
 8007770:	21e8      	movs	r1, #232	@ 0xe8
 8007772:	0209      	lsls	r1, r1, #8
 8007774:	430a      	orrs	r2, r1
 8007776:	655a      	str	r2, [r3, #84]	@ 0x54
																		(TIM_CCMR3_OC6M_2 | TIM_CCMR3_OC6M_1) | 	/* Set the PWM Mode 1*/
																		TIM_CCMR3_OC6PE);							/* Set the Fast Enable bit */
					((TIM_TypeDef *)(timer_defs[id].timer))->CCER  &= ~(TIM_CCER_CC6P);								/* Clear the channel 2 output polarity flags: OC2 will be active high */
 8007778:	1dfb      	adds	r3, r7, #7
 800777a:	781a      	ldrb	r2, [r3, #0]
 800777c:	4b37      	ldr	r3, [pc, #220]	@ (800785c <hal_timer_set_pwm_output_period+0x734>)
 800777e:	0112      	lsls	r2, r2, #4
 8007780:	58d3      	ldr	r3, [r2, r3]
 8007782:	6a1a      	ldr	r2, [r3, #32]
 8007784:	1dfb      	adds	r3, r7, #7
 8007786:	7819      	ldrb	r1, [r3, #0]
 8007788:	4b34      	ldr	r3, [pc, #208]	@ (800785c <hal_timer_set_pwm_output_period+0x734>)
 800778a:	0109      	lsls	r1, r1, #4
 800778c:	58cb      	ldr	r3, [r1, r3]
 800778e:	4936      	ldr	r1, [pc, #216]	@ (8007868 <hal_timer_set_pwm_output_period+0x740>)
 8007790:	400a      	ands	r2, r1
 8007792:	621a      	str	r2, [r3, #32]
					((TIM_TypeDef *)(timer_defs[id].timer))->CCER  |=  TIM_CCER_CC6E;								/* Enable channel 6 */
 8007794:	1dfb      	adds	r3, r7, #7
 8007796:	781a      	ldrb	r2, [r3, #0]
 8007798:	4b30      	ldr	r3, [pc, #192]	@ (800785c <hal_timer_set_pwm_output_period+0x734>)
 800779a:	0112      	lsls	r2, r2, #4
 800779c:	58d3      	ldr	r3, [r2, r3]
 800779e:	6a1a      	ldr	r2, [r3, #32]
 80077a0:	1dfb      	adds	r3, r7, #7
 80077a2:	7819      	ldrb	r1, [r3, #0]
 80077a4:	4b2d      	ldr	r3, [pc, #180]	@ (800785c <hal_timer_set_pwm_output_period+0x734>)
 80077a6:	0109      	lsls	r1, r1, #4
 80077a8:	58cb      	ldr	r3, [r1, r3]
 80077aa:	2180      	movs	r1, #128	@ 0x80
 80077ac:	0349      	lsls	r1, r1, #13
 80077ae:	430a      	orrs	r2, r1
 80077b0:	621a      	str	r2, [r3, #32]
				}
            }
			if(((((TIM_TypeDef *)(timer_defs[id].timer))->CR1 &  (TIM_CR1_ARPE | TIM_CR1_CEN)) !=  (TIM_CR1_ARPE | TIM_CR1_CEN)) )	/* If not enabled or auot-reload is not setup */
 80077b2:	1dfb      	adds	r3, r7, #7
 80077b4:	781a      	ldrb	r2, [r3, #0]
 80077b6:	4b29      	ldr	r3, [pc, #164]	@ (800785c <hal_timer_set_pwm_output_period+0x734>)
 80077b8:	0112      	lsls	r2, r2, #4
 80077ba:	58d3      	ldr	r3, [r2, r3]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	2281      	movs	r2, #129	@ 0x81
 80077c0:	4013      	ands	r3, r2
 80077c2:	2b81      	cmp	r3, #129	@ 0x81
 80077c4:	d00d      	beq.n	80077e2 <hal_timer_set_pwm_output_period+0x6ba>
			{
				((TIM_TypeDef *)(timer_defs[id].timer))->CR1   |=  (TIM_CR1_ARPE | TIM_CR1_CEN);				/* Enable Counter and enable buffered Tx_ARR register */
 80077c6:	1dfb      	adds	r3, r7, #7
 80077c8:	781a      	ldrb	r2, [r3, #0]
 80077ca:	4b24      	ldr	r3, [pc, #144]	@ (800785c <hal_timer_set_pwm_output_period+0x734>)
 80077cc:	0112      	lsls	r2, r2, #4
 80077ce:	58d3      	ldr	r3, [r2, r3]
 80077d0:	681a      	ldr	r2, [r3, #0]
 80077d2:	1dfb      	adds	r3, r7, #7
 80077d4:	7819      	ldrb	r1, [r3, #0]
 80077d6:	4b21      	ldr	r3, [pc, #132]	@ (800785c <hal_timer_set_pwm_output_period+0x734>)
 80077d8:	0109      	lsls	r1, r1, #4
 80077da:	58cb      	ldr	r3, [r1, r3]
 80077dc:	2181      	movs	r1, #129	@ 0x81
 80077de:	430a      	orrs	r2, r1
 80077e0:	601a      	str	r2, [r3, #0]
			}

			if( IS_TIM_BREAK_INSTANCE(timer_defs[id].timer))		/* Special consideration for timers with the break dead-time feature for PWM */
 80077e2:	1dfb      	adds	r3, r7, #7
 80077e4:	781a      	ldrb	r2, [r3, #0]
 80077e6:	4b1d      	ldr	r3, [pc, #116]	@ (800785c <hal_timer_set_pwm_output_period+0x734>)
 80077e8:	0112      	lsls	r2, r2, #4
 80077ea:	58d3      	ldr	r3, [r2, r3]
 80077ec:	4a1c      	ldr	r2, [pc, #112]	@ (8007860 <hal_timer_set_pwm_output_period+0x738>)
 80077ee:	4293      	cmp	r3, r2
 80077f0:	d017      	beq.n	8007822 <hal_timer_set_pwm_output_period+0x6fa>
 80077f2:	1dfb      	adds	r3, r7, #7
 80077f4:	781a      	ldrb	r2, [r3, #0]
 80077f6:	4b19      	ldr	r3, [pc, #100]	@ (800785c <hal_timer_set_pwm_output_period+0x734>)
 80077f8:	0112      	lsls	r2, r2, #4
 80077fa:	58d3      	ldr	r3, [r2, r3]
 80077fc:	4a1b      	ldr	r2, [pc, #108]	@ (800786c <hal_timer_set_pwm_output_period+0x744>)
 80077fe:	4293      	cmp	r3, r2
 8007800:	d00f      	beq.n	8007822 <hal_timer_set_pwm_output_period+0x6fa>
 8007802:	1dfb      	adds	r3, r7, #7
 8007804:	781a      	ldrb	r2, [r3, #0]
 8007806:	4b15      	ldr	r3, [pc, #84]	@ (800785c <hal_timer_set_pwm_output_period+0x734>)
 8007808:	0112      	lsls	r2, r2, #4
 800780a:	58d3      	ldr	r3, [r2, r3]
 800780c:	4a18      	ldr	r2, [pc, #96]	@ (8007870 <hal_timer_set_pwm_output_period+0x748>)
 800780e:	4293      	cmp	r3, r2
 8007810:	d007      	beq.n	8007822 <hal_timer_set_pwm_output_period+0x6fa>
 8007812:	1dfb      	adds	r3, r7, #7
 8007814:	781a      	ldrb	r2, [r3, #0]
 8007816:	4b11      	ldr	r3, [pc, #68]	@ (800785c <hal_timer_set_pwm_output_period+0x734>)
 8007818:	0112      	lsls	r2, r2, #4
 800781a:	58d3      	ldr	r3, [r2, r3]
 800781c:	4a15      	ldr	r2, [pc, #84]	@ (8007874 <hal_timer_set_pwm_output_period+0x74c>)
 800781e:	4293      	cmp	r3, r2
 8007820:	d107      	bne.n	8007832 <hal_timer_set_pwm_output_period+0x70a>
			{
				// See page 817 in the RM for the truth table
				((TIM_TypeDef *)(timer_defs[id].timer))->BDTR = (TIM_BDTR_MOE | TIM_BDTR_AOE);		// Enable output, all other bits are 0
 8007822:	1dfb      	adds	r3, r7, #7
 8007824:	781a      	ldrb	r2, [r3, #0]
 8007826:	4b0d      	ldr	r3, [pc, #52]	@ (800785c <hal_timer_set_pwm_output_period+0x734>)
 8007828:	0112      	lsls	r2, r2, #4
 800782a:	58d3      	ldr	r3, [r2, r3]
 800782c:	22c0      	movs	r2, #192	@ 0xc0
 800782e:	0212      	lsls	r2, r2, #8
 8007830:	645a      	str	r2, [r3, #68]	@ 0x44
//				((TIM_TypeDef *)(timer_defs[id].timer))->BDTR &= ~(TIM_BDTR_OSSI | TIM_BDTR_OSSR);	// Off-state is a don't care so leave it blank
			}

			/* Generate an update event to reload the Prescaler and the repetition counter value immediately */
			((TIM_TypeDef *)(timer_defs[id].timer))->EGR |= TIM_EGR_UG;
 8007832:	1dfb      	adds	r3, r7, #7
 8007834:	781a      	ldrb	r2, [r3, #0]
 8007836:	4b09      	ldr	r3, [pc, #36]	@ (800785c <hal_timer_set_pwm_output_period+0x734>)
 8007838:	0112      	lsls	r2, r2, #4
 800783a:	58d3      	ldr	r3, [r2, r3]
 800783c:	695a      	ldr	r2, [r3, #20]
 800783e:	1dfb      	adds	r3, r7, #7
 8007840:	7819      	ldrb	r1, [r3, #0]
 8007842:	4b06      	ldr	r3, [pc, #24]	@ (800785c <hal_timer_set_pwm_output_period+0x734>)
 8007844:	0109      	lsls	r1, r1, #4
 8007846:	58cb      	ldr	r3, [r1, r3]
 8007848:	2101      	movs	r1, #1
 800784a:	430a      	orrs	r2, r1
 800784c:	615a      	str	r2, [r3, #20]
 800784e:	e002      	b.n	8007856 <hal_timer_set_pwm_output_period+0x72e>
        return;
 8007850:	46c0      	nop			@ (mov r8, r8)
 8007852:	e000      	b.n	8007856 <hal_timer_set_pwm_output_period+0x72e>
        return;
 8007854:	46c0      	nop			@ (mov r8, r8)
    }
    else
    {
        // No other timers supported
    }
}
 8007856:	46bd      	mov	sp, r7
 8007858:	b005      	add	sp, #20
 800785a:	bd90      	pop	{r4, r7, pc}
 800785c:	200000c4 	.word	0x200000c4
 8007860:	40012c00 	.word	0x40012c00
 8007864:	feff8bff 	.word	0xfeff8bff
 8007868:	ffdfffff 	.word	0xffdfffff
 800786c:	40014000 	.word	0x40014000
 8007870:	40014400 	.word	0x40014400
 8007874:	40014800 	.word	0x40014800

08007878 <hal_timer_set_timer_for_blocking_delays>:
const uint16_t counts_per_50usec	= ((50  * (BLOCKING_TIMER_CLK_FREQ / 1000000 )) - 1);
const uint16_t counts_per_100usec	= ((100  * (BLOCKING_TIMER_CLK_FREQ / 1000000 )) - 1);
const uint16_t counts_per_152usec	= ((152 * (BLOCKING_TIMER_CLK_FREQ / 1000000 )) - 1);

void hal_timer_set_timer_for_blocking_delays(enum timer_id timer_for_blocking_delays)
{
 8007878:	b580      	push	{r7, lr}
 800787a:	b082      	sub	sp, #8
 800787c:	af00      	add	r7, sp, #0
 800787e:	0002      	movs	r2, r0
 8007880:	1dfb      	adds	r3, r7, #7
 8007882:	701a      	strb	r2, [r3, #0]
	/* a basic or general timer must be used for blocking delay functions */
	if ((timer_defs[timer_for_blocking_delays].type != TIM_BASIC) &&
 8007884:	1dfb      	adds	r3, r7, #7
 8007886:	781b      	ldrb	r3, [r3, #0]
 8007888:	4a12      	ldr	r2, [pc, #72]	@ (80078d4 <hal_timer_set_timer_for_blocking_delays+0x5c>)
 800788a:	011b      	lsls	r3, r3, #4
 800788c:	18d3      	adds	r3, r2, r3
 800788e:	3304      	adds	r3, #4
 8007890:	781b      	ldrb	r3, [r3, #0]
 8007892:	2b01      	cmp	r3, #1
 8007894:	d008      	beq.n	80078a8 <hal_timer_set_timer_for_blocking_delays+0x30>
		(timer_defs[timer_for_blocking_delays].type != TIM_GEN_PURPOSE))
 8007896:	1dfb      	adds	r3, r7, #7
 8007898:	781b      	ldrb	r3, [r3, #0]
 800789a:	4a0e      	ldr	r2, [pc, #56]	@ (80078d4 <hal_timer_set_timer_for_blocking_delays+0x5c>)
 800789c:	011b      	lsls	r3, r3, #4
 800789e:	18d3      	adds	r3, r2, r3
 80078a0:	3304      	adds	r3, #4
 80078a2:	781b      	ldrb	r3, [r3, #0]
	if ((timer_defs[timer_for_blocking_delays].type != TIM_BASIC) &&
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d110      	bne.n	80078ca <hal_timer_set_timer_for_blocking_delays+0x52>
	{
		return;
	}

	blocking_delay_timer_ptr          = (TIM_TypeDef*)timer_defs[timer_for_blocking_delays].timer;
 80078a8:	1dfb      	adds	r3, r7, #7
 80078aa:	781a      	ldrb	r2, [r3, #0]
 80078ac:	4b09      	ldr	r3, [pc, #36]	@ (80078d4 <hal_timer_set_timer_for_blocking_delays+0x5c>)
 80078ae:	0112      	lsls	r2, r2, #4
 80078b0:	58d2      	ldr	r2, [r2, r3]
 80078b2:	4b09      	ldr	r3, [pc, #36]	@ (80078d8 <hal_timer_set_timer_for_blocking_delays+0x60>)
 80078b4:	601a      	str	r2, [r3, #0]

	//blocking_delay_prescaler_pwr_of_2 = timer_defs[timer_for_blocking_delays].prescale_powers_of_2;

	// The STM32G070 uses a 16bit prescaler.
	blocking_delay_prescaler_16b = timer_defs[timer_for_blocking_delays].prescaler_16b;
 80078b6:	1dfb      	adds	r3, r7, #7
 80078b8:	781b      	ldrb	r3, [r3, #0]
 80078ba:	4a06      	ldr	r2, [pc, #24]	@ (80078d4 <hal_timer_set_timer_for_blocking_delays+0x5c>)
 80078bc:	011b      	lsls	r3, r3, #4
 80078be:	18d3      	adds	r3, r2, r3
 80078c0:	3306      	adds	r3, #6
 80078c2:	881a      	ldrh	r2, [r3, #0]
 80078c4:	4b05      	ldr	r3, [pc, #20]	@ (80078dc <hal_timer_set_timer_for_blocking_delays+0x64>)
 80078c6:	801a      	strh	r2, [r3, #0]
 80078c8:	e000      	b.n	80078cc <hal_timer_set_timer_for_blocking_delays+0x54>
		return;
 80078ca:	46c0      	nop			@ (mov r8, r8)

}
 80078cc:	46bd      	mov	sp, r7
 80078ce:	b002      	add	sp, #8
 80078d0:	bd80      	pop	{r7, pc}
 80078d2:	46c0      	nop			@ (mov r8, r8)
 80078d4:	200000c4 	.word	0x200000c4
 80078d8:	2000070c 	.word	0x2000070c
 80078dc:	20000710 	.word	0x20000710

080078e0 <hal_timer_blocking_delay_for_152us>:
	/* disable timer */
	blocking_delay_timer_ptr->CR1 &= ~TIM_CR1_CEN;
}

void hal_timer_blocking_delay_for_152us(void)
{
 80078e0:	b580      	push	{r7, lr}
 80078e2:	af00      	add	r7, sp, #0
	/* disable timer */
	blocking_delay_timer_ptr->CR1 &= ~TIM_CR1_CEN;
 80078e4:	4b14      	ldr	r3, [pc, #80]	@ (8007938 <hal_timer_blocking_delay_for_152us+0x58>)
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	681a      	ldr	r2, [r3, #0]
 80078ea:	4b13      	ldr	r3, [pc, #76]	@ (8007938 <hal_timer_blocking_delay_for_152us+0x58>)
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	2101      	movs	r1, #1
 80078f0:	438a      	bics	r2, r1
 80078f2:	601a      	str	r2, [r3, #0]

	/* set the count */
	blocking_delay_timer_ptr->ARR = counts_per_152usec;
 80078f4:	4a11      	ldr	r2, [pc, #68]	@ (800793c <hal_timer_blocking_delay_for_152us+0x5c>)
 80078f6:	4b10      	ldr	r3, [pc, #64]	@ (8007938 <hal_timer_blocking_delay_for_152us+0x58>)
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	62da      	str	r2, [r3, #44]	@ 0x2c

	/* ensure the flag is cleared */
	blocking_delay_timer_ptr->SR = 0;
 80078fc:	4b0e      	ldr	r3, [pc, #56]	@ (8007938 <hal_timer_blocking_delay_for_152us+0x58>)
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	2200      	movs	r2, #0
 8007902:	611a      	str	r2, [r3, #16]

	/* enable timer */
	blocking_delay_timer_ptr->CR1 |= TIM_CR1_CEN;
 8007904:	4b0c      	ldr	r3, [pc, #48]	@ (8007938 <hal_timer_blocking_delay_for_152us+0x58>)
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	681a      	ldr	r2, [r3, #0]
 800790a:	4b0b      	ldr	r3, [pc, #44]	@ (8007938 <hal_timer_blocking_delay_for_152us+0x58>)
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	2101      	movs	r1, #1
 8007910:	430a      	orrs	r2, r1
 8007912:	601a      	str	r2, [r3, #0]

	/* wait until the timer expires*/
	while(!(blocking_delay_timer_ptr->SR)) {}
 8007914:	46c0      	nop			@ (mov r8, r8)
 8007916:	4b08      	ldr	r3, [pc, #32]	@ (8007938 <hal_timer_blocking_delay_for_152us+0x58>)
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	691b      	ldr	r3, [r3, #16]
 800791c:	2b00      	cmp	r3, #0
 800791e:	d0fa      	beq.n	8007916 <hal_timer_blocking_delay_for_152us+0x36>

	/* disable timer */
	blocking_delay_timer_ptr->CR1 &= ~TIM_CR1_CEN;
 8007920:	4b05      	ldr	r3, [pc, #20]	@ (8007938 <hal_timer_blocking_delay_for_152us+0x58>)
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	681a      	ldr	r2, [r3, #0]
 8007926:	4b04      	ldr	r3, [pc, #16]	@ (8007938 <hal_timer_blocking_delay_for_152us+0x58>)
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	2101      	movs	r1, #1
 800792c:	438a      	bics	r2, r1
 800792e:	601a      	str	r2, [r3, #0]
}
 8007930:	46c0      	nop			@ (mov r8, r8)
 8007932:	46bd      	mov	sp, r7
 8007934:	bd80      	pop	{r7, pc}
 8007936:	46c0      	nop			@ (mov r8, r8)
 8007938:	2000070c 	.word	0x2000070c
 800793c:	0000200f 	.word	0x0000200f

08007940 <irq_cb>:
	blocking_delay_timer_ptr->CR1 &= ~TIM_CR1_CEN;
}

#if defined TIM15
static void irq_cb(TIM_TypeDef *tmr)
{
 8007940:	b580      	push	{r7, lr}
 8007942:	b084      	sub	sp, #16
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]
	for (uint8_t i=0u; i < NUMBER_OF_TIMERS; i++)
 8007948:	230f      	movs	r3, #15
 800794a:	18fb      	adds	r3, r7, r3
 800794c:	2200      	movs	r2, #0
 800794e:	701a      	strb	r2, [r3, #0]
 8007950:	e020      	b.n	8007994 <irq_cb+0x54>
	{
		if (timer_defs[i].timer == tmr)
 8007952:	210f      	movs	r1, #15
 8007954:	187b      	adds	r3, r7, r1
 8007956:	781a      	ldrb	r2, [r3, #0]
 8007958:	4b13      	ldr	r3, [pc, #76]	@ (80079a8 <irq_cb+0x68>)
 800795a:	0112      	lsls	r2, r2, #4
 800795c:	58d3      	ldr	r3, [r2, r3]
 800795e:	687a      	ldr	r2, [r7, #4]
 8007960:	429a      	cmp	r2, r3
 8007962:	d111      	bne.n	8007988 <irq_cb+0x48>
		{
			if (timer_defs[i].timer_irq_cb != NULL)
 8007964:	187b      	adds	r3, r7, r1
 8007966:	781b      	ldrb	r3, [r3, #0]
 8007968:	4a0f      	ldr	r2, [pc, #60]	@ (80079a8 <irq_cb+0x68>)
 800796a:	011b      	lsls	r3, r3, #4
 800796c:	18d3      	adds	r3, r2, r3
 800796e:	3308      	adds	r3, #8
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	2b00      	cmp	r3, #0
 8007974:	d008      	beq.n	8007988 <irq_cb+0x48>
			{
				timer_defs[i].timer_irq_cb(0 /* dummy value for now, since this isn't implemented */);
 8007976:	187b      	adds	r3, r7, r1
 8007978:	781b      	ldrb	r3, [r3, #0]
 800797a:	4a0b      	ldr	r2, [pc, #44]	@ (80079a8 <irq_cb+0x68>)
 800797c:	011b      	lsls	r3, r3, #4
 800797e:	18d3      	adds	r3, r2, r3
 8007980:	3308      	adds	r3, #8
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	2000      	movs	r0, #0
 8007986:	4798      	blx	r3
	for (uint8_t i=0u; i < NUMBER_OF_TIMERS; i++)
 8007988:	210f      	movs	r1, #15
 800798a:	187b      	adds	r3, r7, r1
 800798c:	781a      	ldrb	r2, [r3, #0]
 800798e:	187b      	adds	r3, r7, r1
 8007990:	3201      	adds	r2, #1
 8007992:	701a      	strb	r2, [r3, #0]
 8007994:	230f      	movs	r3, #15
 8007996:	18fb      	adds	r3, r7, r3
 8007998:	781b      	ldrb	r3, [r3, #0]
 800799a:	2b03      	cmp	r3, #3
 800799c:	d9d9      	bls.n	8007952 <irq_cb+0x12>
			}
		}
	}
}
 800799e:	46c0      	nop			@ (mov r8, r8)
 80079a0:	46c0      	nop			@ (mov r8, r8)
 80079a2:	46bd      	mov	sp, r7
 80079a4:	b004      	add	sp, #16
 80079a6:	bd80      	pop	{r7, pc}
 80079a8:	200000c4 	.word	0x200000c4

080079ac <TIM15_IRQHandler>:

void TIM15_IRQHandler(void)
{
 80079ac:	b580      	push	{r7, lr}
 80079ae:	af00      	add	r7, sp, #0
	irq_cb(TIM15);
 80079b0:	4b03      	ldr	r3, [pc, #12]	@ (80079c0 <TIM15_IRQHandler+0x14>)
 80079b2:	0018      	movs	r0, r3
 80079b4:	f7ff ffc4 	bl	8007940 <irq_cb>
}
 80079b8:	46c0      	nop			@ (mov r8, r8)
 80079ba:	46bd      	mov	sp, r7
 80079bc:	bd80      	pop	{r7, pc}
 80079be:	46c0      	nop			@ (mov r8, r8)
 80079c0:	40014000 	.word	0x40014000

080079c4 <hal_uartA_callback_init>:



void hal_uartA_callback_init(uint8_t (*tx_ready)     (uint8_t* byte_to_tx),
			                 void    (*byte_received)(uint8_t  byte_in))
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b082      	sub	sp, #8
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
 80079cc:	6039      	str	r1, [r7, #0]
	usart1_transmit_ready_callback = tx_ready;
 80079ce:	4b05      	ldr	r3, [pc, #20]	@ (80079e4 <hal_uartA_callback_init+0x20>)
 80079d0:	687a      	ldr	r2, [r7, #4]
 80079d2:	601a      	str	r2, [r3, #0]
	usart1_byte_received_callback  = byte_received;
 80079d4:	4b04      	ldr	r3, [pc, #16]	@ (80079e8 <hal_uartA_callback_init+0x24>)
 80079d6:	683a      	ldr	r2, [r7, #0]
 80079d8:	601a      	str	r2, [r3, #0]
}
 80079da:	46c0      	nop			@ (mov r8, r8)
 80079dc:	46bd      	mov	sp, r7
 80079de:	b002      	add	sp, #8
 80079e0:	bd80      	pop	{r7, pc}
 80079e2:	46c0      	nop			@ (mov r8, r8)
 80079e4:	20000714 	.word	0x20000714
 80079e8:	20000718 	.word	0x20000718

080079ec <hal_uartB_callback_init>:

void hal_uartB_callback_init(uint8_t (*tx_ready)     (uint8_t* byte_to_tx),
			                 void    (*byte_received)(uint8_t  byte_in))
{
 80079ec:	b580      	push	{r7, lr}
 80079ee:	b082      	sub	sp, #8
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	6078      	str	r0, [r7, #4]
 80079f4:	6039      	str	r1, [r7, #0]
	usart2_transmit_ready_callback = tx_ready;
 80079f6:	4b05      	ldr	r3, [pc, #20]	@ (8007a0c <hal_uartB_callback_init+0x20>)
 80079f8:	687a      	ldr	r2, [r7, #4]
 80079fa:	601a      	str	r2, [r3, #0]
	usart2_byte_received_callback  = byte_received;
 80079fc:	4b04      	ldr	r3, [pc, #16]	@ (8007a10 <hal_uartB_callback_init+0x24>)
 80079fe:	683a      	ldr	r2, [r7, #0]
 8007a00:	601a      	str	r2, [r3, #0]
}
 8007a02:	46c0      	nop			@ (mov r8, r8)
 8007a04:	46bd      	mov	sp, r7
 8007a06:	b002      	add	sp, #8
 8007a08:	bd80      	pop	{r7, pc}
 8007a0a:	46c0      	nop			@ (mov r8, r8)
 8007a0c:	2000071c 	.word	0x2000071c
 8007a10:	20000720 	.word	0x20000720

08007a14 <hal_uart_disable_tx>:
	// UART initialization is being handled in function uart_driver_init()
#endif
}

void hal_uart_disable_tx(uart_hal_t* uart_hal)
{
 8007a14:	b580      	push	{r7, lr}
 8007a16:	b082      	sub	sp, #8
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	6078      	str	r0, [r7, #4]
	if ((UART_TYPE_USART == uart_hal->uart_type) || (UART_TYPE_LPUART == uart_hal->uart_type))
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	7a1b      	ldrb	r3, [r3, #8]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d003      	beq.n	8007a2c <hal_uart_disable_tx+0x18>
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	7a1b      	ldrb	r3, [r3, #8]
 8007a28:	2b01      	cmp	r3, #1
 8007a2a:	d108      	bne.n	8007a3e <hal_uart_disable_tx+0x2a>
	{
		/* Disable Transmitter */
		uart_hal->uart_module->CR1 &= ~USART_CR1_TE;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	681a      	ldr	r2, [r3, #0]
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	2108      	movs	r1, #8
 8007a38:	438a      	bics	r2, r1
 8007a3a:	601a      	str	r2, [r3, #0]
 8007a3c:	e000      	b.n	8007a40 <hal_uart_disable_tx+0x2c>
	}
	else
	{
		/* No other types supported, silently fail */
		return;
 8007a3e:	46c0      	nop			@ (mov r8, r8)
	}
}
 8007a40:	46bd      	mov	sp, r7
 8007a42:	b002      	add	sp, #8
 8007a44:	bd80      	pop	{r7, pc}

08007a46 <hal_uart_enable_rx>:

void hal_uart_enable_rx(uart_hal_t* uart_hal)
{
 8007a46:	b580      	push	{r7, lr}
 8007a48:	b082      	sub	sp, #8
 8007a4a:	af00      	add	r7, sp, #0
 8007a4c:	6078      	str	r0, [r7, #4]
	if ((UART_TYPE_USART == uart_hal->uart_type) || (UART_TYPE_LPUART == uart_hal->uart_type))
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	7a1b      	ldrb	r3, [r3, #8]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d003      	beq.n	8007a5e <hal_uart_enable_rx+0x18>
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	7a1b      	ldrb	r3, [r3, #8]
 8007a5a:	2b01      	cmp	r3, #1
 8007a5c:	d108      	bne.n	8007a70 <hal_uart_enable_rx+0x2a>
	{
		/* Enable Receiver and Rx Data Available Interrupt */
		uart_hal->uart_module->CR1 |= (USART_CR1_RE | USART_CR1_RXNEIE_RXFNEIE);
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	681a      	ldr	r2, [r3, #0]
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	2124      	movs	r1, #36	@ 0x24
 8007a6a:	430a      	orrs	r2, r1
 8007a6c:	601a      	str	r2, [r3, #0]
 8007a6e:	e000      	b.n	8007a72 <hal_uart_enable_rx+0x2c>
	}
	else
	{
		/* No other types supported, silently fail */
		return;
 8007a70:	46c0      	nop			@ (mov r8, r8)
	}
}
 8007a72:	46bd      	mov	sp, r7
 8007a74:	b002      	add	sp, #8
 8007a76:	bd80      	pop	{r7, pc}

08007a78 <uart_irq_handler>:
{
	return ((uart_hal->uart_module->CR1 & USART_CR1_TCIE) != 0);
}

void uart_irq_handler(USART_TypeDef* uart_module)
{
 8007a78:	b590      	push	{r4, r7, lr}
 8007a7a:	b085      	sub	sp, #20
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	6078      	str	r0, [r7, #4]
	uint8_t byte_to_tx;

    /* if there are any error flags AND if in RX mode rather than Tx mode */
	if (uart_module->ISR & (USART_ISR_ORE /*| USART_ISR_NE | USART_ISR_FE*/) && (uart_module->CR2 & USART_CR2_SWAP))
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	69db      	ldr	r3, [r3, #28]
 8007a84:	2208      	movs	r2, #8
 8007a86:	4013      	ands	r3, r2
 8007a88:	d018      	beq.n	8007abc <uart_irq_handler+0x44>
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	685a      	ldr	r2, [r3, #4]
 8007a8e:	2380      	movs	r3, #128	@ 0x80
 8007a90:	021b      	lsls	r3, r3, #8
 8007a92:	4013      	ands	r3, r2
 8007a94:	d012      	beq.n	8007abc <uart_irq_handler+0x44>
	{
		if (uart_module->ISR & USART_ISR_RXNE_RXFNE)
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	69db      	ldr	r3, [r3, #28]
 8007a9a:	2220      	movs	r2, #32
 8007a9c:	4013      	ands	r3, r2
 8007a9e:	d00d      	beq.n	8007abc <uart_irq_handler+0x44>
			 * TWICE here because there's an overrun error which means we have TWO bytes 
			 * received, one in the RDR register, and then as soon as we read that once,
			 * there's a byte that gets shifted into the RDR register from the
			 * non-memory-mapped shift register.
			 */
			usart1_byte_received_callback(uart_module->RDR);
 8007aa0:	4b78      	ldr	r3, [pc, #480]	@ (8007c84 <uart_irq_handler+0x20c>)
 8007aa2:	681a      	ldr	r2, [r3, #0]
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007aa8:	b2db      	uxtb	r3, r3
 8007aaa:	0018      	movs	r0, r3
 8007aac:	4790      	blx	r2
			usart1_byte_received_callback(uart_module->RDR);
 8007aae:	4b75      	ldr	r3, [pc, #468]	@ (8007c84 <uart_irq_handler+0x20c>)
 8007ab0:	681a      	ldr	r2, [r3, #0]
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ab6:	b2db      	uxtb	r3, r3
 8007ab8:	0018      	movs	r0, r3
 8007aba:	4790      	blx	r2
		}
	}
		uart_module->ICR |= (USART_ICR_ORECF | USART_ICR_NECF | USART_ICR_FECF);
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	6a1b      	ldr	r3, [r3, #32]
 8007ac0:	220e      	movs	r2, #14
 8007ac2:	431a      	orrs	r2, r3
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	621a      	str	r2, [r3, #32]

    /* if a byte has been received AND if in Rx mode rather than Tx mode */
	if ((uart_module->ISR & USART_ISR_RXNE_RXFNE) && (uart_module->CR2 & USART_CR2_SWAP))
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	69db      	ldr	r3, [r3, #28]
 8007acc:	2220      	movs	r2, #32
 8007ace:	4013      	ands	r3, r2
 8007ad0:	d01c      	beq.n	8007b0c <uart_irq_handler+0x94>
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	685a      	ldr	r2, [r3, #4]
 8007ad6:	2380      	movs	r3, #128	@ 0x80
 8007ad8:	021b      	lsls	r3, r3, #8
 8007ada:	4013      	ands	r3, r2
 8007adc:	d016      	beq.n	8007b0c <uart_irq_handler+0x94>
	{
		/* Note that reading the RDR register clears the RXNE flag. */

		if (USART1 == uart_module)
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	4a69      	ldr	r2, [pc, #420]	@ (8007c88 <uart_irq_handler+0x210>)
 8007ae2:	4293      	cmp	r3, r2
 8007ae4:	d107      	bne.n	8007af6 <uart_irq_handler+0x7e>
		{
			/* call the USART1 received callback, passing it the received data */
			usart1_byte_received_callback(uart_module->RDR);
 8007ae6:	4b67      	ldr	r3, [pc, #412]	@ (8007c84 <uart_irq_handler+0x20c>)
 8007ae8:	681a      	ldr	r2, [r3, #0]
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007aee:	b2db      	uxtb	r3, r3
 8007af0:	0018      	movs	r0, r3
 8007af2:	4790      	blx	r2
 8007af4:	e00a      	b.n	8007b0c <uart_irq_handler+0x94>
		}
		else if (USART2 == uart_module)
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	4a64      	ldr	r2, [pc, #400]	@ (8007c8c <uart_irq_handler+0x214>)
 8007afa:	4293      	cmp	r3, r2
 8007afc:	d106      	bne.n	8007b0c <uart_irq_handler+0x94>
		{
			/* call the USART2 received callback, passing it the received data */
			usart2_byte_received_callback(uart_module->RDR);
 8007afe:	4b64      	ldr	r3, [pc, #400]	@ (8007c90 <uart_irq_handler+0x218>)
 8007b00:	681a      	ldr	r2, [r3, #0]
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b06:	b2db      	uxtb	r3, r3
 8007b08:	0018      	movs	r0, r3
 8007b0a:	4790      	blx	r2
		uart_module->ICR |= USART_ICR_WUCF;
	}
#endif

    /* if the transmit buffer is empty AND we're set to Tx rather than Rx */
	if ((uart_module->ISR & USART_ISR_TXE_TXFNF) && !(uart_module->CR2 & USART_CR2_SWAP))
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	69db      	ldr	r3, [r3, #28]
 8007b10:	2280      	movs	r2, #128	@ 0x80
 8007b12:	4013      	ands	r3, r2
 8007b14:	d038      	beq.n	8007b88 <uart_irq_handler+0x110>
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	685a      	ldr	r2, [r3, #4]
 8007b1a:	2380      	movs	r3, #128	@ 0x80
 8007b1c:	021b      	lsls	r3, r3, #8
 8007b1e:	4013      	ands	r3, r2
 8007b20:	d132      	bne.n	8007b88 <uart_irq_handler+0x110>
	{
		if (USART1 == uart_module)
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	4a58      	ldr	r2, [pc, #352]	@ (8007c88 <uart_irq_handler+0x210>)
 8007b26:	4293      	cmp	r3, r2
 8007b28:	d115      	bne.n	8007b56 <uart_irq_handler+0xde>
		{
			/* call the USART1 transmit callback to get the byte to Tx */
			if (usart1_transmit_ready_callback(&byte_to_tx))
 8007b2a:	4b5a      	ldr	r3, [pc, #360]	@ (8007c94 <uart_irq_handler+0x21c>)
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	240e      	movs	r4, #14
 8007b30:	193a      	adds	r2, r7, r4
 8007b32:	0010      	movs	r0, r2
 8007b34:	4798      	blx	r3
 8007b36:	1e03      	subs	r3, r0, #0
 8007b38:	d005      	beq.n	8007b46 <uart_irq_handler+0xce>
			{
				/* transmit the byte */
				uart_module->TDR = byte_to_tx;
 8007b3a:	193b      	adds	r3, r7, r4
 8007b3c:	781b      	ldrb	r3, [r3, #0]
 8007b3e:	001a      	movs	r2, r3
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	629a      	str	r2, [r3, #40]	@ 0x28
 8007b44:	e020      	b.n	8007b88 <uart_irq_handler+0x110>
			}
			else
			{
				/* disable the 'Tx buffer empty' interrupt */
				uart_module->CR1 &= ~USART_CR1_TXEIE_TXFNFIE;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	2280      	movs	r2, #128	@ 0x80
 8007b4c:	4393      	bics	r3, r2
 8007b4e:	001a      	movs	r2, r3
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	601a      	str	r2, [r3, #0]
 8007b54:	e018      	b.n	8007b88 <uart_irq_handler+0x110>
			}
		}
		else if (USART2 == uart_module)
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	4a4c      	ldr	r2, [pc, #304]	@ (8007c8c <uart_irq_handler+0x214>)
 8007b5a:	4293      	cmp	r3, r2
 8007b5c:	d114      	bne.n	8007b88 <uart_irq_handler+0x110>
		{
			/* call the USART2 transmit callback to get the byte to Tx */
			if (usart2_transmit_ready_callback(&byte_to_tx))
 8007b5e:	4b4e      	ldr	r3, [pc, #312]	@ (8007c98 <uart_irq_handler+0x220>)
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	240e      	movs	r4, #14
 8007b64:	193a      	adds	r2, r7, r4
 8007b66:	0010      	movs	r0, r2
 8007b68:	4798      	blx	r3
 8007b6a:	1e03      	subs	r3, r0, #0
 8007b6c:	d005      	beq.n	8007b7a <uart_irq_handler+0x102>
			{
				/* transmit the byte */
				uart_module->TDR = byte_to_tx;
 8007b6e:	193b      	adds	r3, r7, r4
 8007b70:	781b      	ldrb	r3, [r3, #0]
 8007b72:	001a      	movs	r2, r3
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	629a      	str	r2, [r3, #40]	@ 0x28
 8007b78:	e006      	b.n	8007b88 <uart_irq_handler+0x110>
			}
			else
			{
				/* disable the 'Tx buffer empty' interrupt */
				uart_module->CR1 &= ~USART_CR1_TXEIE_TXFNFIE;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	2280      	movs	r2, #128	@ 0x80
 8007b80:	4393      	bics	r3, r2
 8007b82:	001a      	movs	r2, r3
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	601a      	str	r2, [r3, #0]
		}
	}

/* TODO - need a callback in the UART driver for the 152 usec delay */
    /* if the transmission complete flag is set AND we're set to Tx rather than Rx */
	if ((uart_module->ISR & USART_ISR_TC) && !(uart_module->CR2 & USART_CR2_SWAP))
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	69db      	ldr	r3, [r3, #28]
 8007b8c:	2240      	movs	r2, #64	@ 0x40
 8007b8e:	4013      	ands	r3, r2
 8007b90:	d100      	bne.n	8007b94 <uart_irq_handler+0x11c>
 8007b92:	e072      	b.n	8007c7a <uart_irq_handler+0x202>
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	685a      	ldr	r2, [r3, #4]
 8007b98:	2380      	movs	r3, #128	@ 0x80
 8007b9a:	021b      	lsls	r3, r3, #8
 8007b9c:	4013      	ands	r3, r2
 8007b9e:	d000      	beq.n	8007ba2 <uart_irq_handler+0x12a>
 8007ba0:	e06b      	b.n	8007c7a <uart_irq_handler+0x202>
	{
		if (USART1 == uart_module)
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	4a38      	ldr	r2, [pc, #224]	@ (8007c88 <uart_irq_handler+0x210>)
 8007ba6:	4293      	cmp	r3, r2
 8007ba8:	d107      	bne.n	8007bba <uart_irq_handler+0x142>
		{
			if (usart1_blocking_delay)
 8007baa:	4b3c      	ldr	r3, [pc, #240]	@ (8007c9c <uart_irq_handler+0x224>)
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d00e      	beq.n	8007bd0 <uart_irq_handler+0x158>
			{
				/* delay to ride through the IR1 key glitch */
				usart1_blocking_delay();
 8007bb2:	4b3a      	ldr	r3, [pc, #232]	@ (8007c9c <uart_irq_handler+0x224>)
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	4798      	blx	r3
 8007bb8:	e00a      	b.n	8007bd0 <uart_irq_handler+0x158>
			}
		}
		else if (USART2 == uart_module)
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	4a33      	ldr	r2, [pc, #204]	@ (8007c8c <uart_irq_handler+0x214>)
 8007bbe:	4293      	cmp	r3, r2
 8007bc0:	d106      	bne.n	8007bd0 <uart_irq_handler+0x158>
		{
			if (usart2_blocking_delay)
 8007bc2:	4b37      	ldr	r3, [pc, #220]	@ (8007ca0 <uart_irq_handler+0x228>)
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d002      	beq.n	8007bd0 <uart_irq_handler+0x158>
			{
				/* delay to ride through the IR1 key glitch */
				usart2_blocking_delay();
 8007bca:	4b35      	ldr	r3, [pc, #212]	@ (8007ca0 <uart_irq_handler+0x228>)
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	4798      	blx	r3

		/* switch tx/rx pin to rx if needed */
		{
			uart_mode_t uart_mode;

			if (USART1 == uart_module)
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	4a2d      	ldr	r2, [pc, #180]	@ (8007c88 <uart_irq_handler+0x210>)
 8007bd4:	4293      	cmp	r3, r2
 8007bd6:	d105      	bne.n	8007be4 <uart_irq_handler+0x16c>
			{
				uart_mode = usart1_mode;
 8007bd8:	230f      	movs	r3, #15
 8007bda:	18fb      	adds	r3, r7, r3
 8007bdc:	4a31      	ldr	r2, [pc, #196]	@ (8007ca4 <uart_irq_handler+0x22c>)
 8007bde:	7812      	ldrb	r2, [r2, #0]
 8007be0:	701a      	strb	r2, [r3, #0]
 8007be2:	e017      	b.n	8007c14 <uart_irq_handler+0x19c>
			}
			else if (USART2 == uart_module)
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	4a29      	ldr	r2, [pc, #164]	@ (8007c8c <uart_irq_handler+0x214>)
 8007be8:	4293      	cmp	r3, r2
 8007bea:	d105      	bne.n	8007bf8 <uart_irq_handler+0x180>
			{
				uart_mode = usart2_mode;
 8007bec:	230f      	movs	r3, #15
 8007bee:	18fb      	adds	r3, r7, r3
 8007bf0:	4a2d      	ldr	r2, [pc, #180]	@ (8007ca8 <uart_irq_handler+0x230>)
 8007bf2:	7812      	ldrb	r2, [r2, #0]
 8007bf4:	701a      	strb	r2, [r3, #0]
 8007bf6:	e00d      	b.n	8007c14 <uart_irq_handler+0x19c>
			}
			else if (USART3 == uart_module)
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	4a2c      	ldr	r2, [pc, #176]	@ (8007cac <uart_irq_handler+0x234>)
 8007bfc:	4293      	cmp	r3, r2
 8007bfe:	d105      	bne.n	8007c0c <uart_irq_handler+0x194>
			{
				uart_mode = usart3_mode;
 8007c00:	230f      	movs	r3, #15
 8007c02:	18fb      	adds	r3, r7, r3
 8007c04:	4a2a      	ldr	r2, [pc, #168]	@ (8007cb0 <uart_irq_handler+0x238>)
 8007c06:	7812      	ldrb	r2, [r2, #0]
 8007c08:	701a      	strb	r2, [r3, #0]
 8007c0a:	e003      	b.n	8007c14 <uart_irq_handler+0x19c>
				uart_mode = lpuart1_mode;
			}
#endif
			else
			{
				uart_mode = 0; /* Should never get here!  This line is just to ensure consistency on failure. */
 8007c0c:	230f      	movs	r3, #15
 8007c0e:	18fb      	adds	r3, r7, r3
 8007c10:	2200      	movs	r2, #0
 8007c12:	701a      	strb	r2, [r3, #0]
			}

			if ((ONE_WIRE_NO_EXTERNAL_PULLUP == uart_mode) || (ONE_WIRE == uart_mode))
 8007c14:	220f      	movs	r2, #15
 8007c16:	18bb      	adds	r3, r7, r2
 8007c18:	781b      	ldrb	r3, [r3, #0]
 8007c1a:	2b03      	cmp	r3, #3
 8007c1c:	d003      	beq.n	8007c26 <uart_irq_handler+0x1ae>
 8007c1e:	18bb      	adds	r3, r7, r2
 8007c20:	781b      	ldrb	r3, [r3, #0]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d119      	bne.n	8007c5a <uart_irq_handler+0x1e2>
			{
				/* if tx/rx pin is set to tx... */
				if (!(uart_module->CR2 & USART_CR2_SWAP))
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	685a      	ldr	r2, [r3, #4]
 8007c2a:	2380      	movs	r3, #128	@ 0x80
 8007c2c:	021b      	lsls	r3, r3, #8
 8007c2e:	4013      	ands	r3, r2
 8007c30:	d113      	bne.n	8007c5a <uart_irq_handler+0x1e2>
				{
					/* ...then set pin to rx */
					uart_module->CR1 &= ~USART_CR1_UE;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	2201      	movs	r2, #1
 8007c38:	4393      	bics	r3, r2
 8007c3a:	001a      	movs	r2, r3
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	601a      	str	r2, [r3, #0]
					uart_module->CR2 |=  USART_CR2_SWAP; /* can only modify CR2 when UE is 0 */
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	685b      	ldr	r3, [r3, #4]
 8007c44:	2280      	movs	r2, #128	@ 0x80
 8007c46:	0212      	lsls	r2, r2, #8
 8007c48:	431a      	orrs	r2, r3
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	605a      	str	r2, [r3, #4]
					uart_module->CR1 |=  USART_CR1_UE;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	2201      	movs	r2, #1
 8007c54:	431a      	orrs	r2, r3
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	601a      	str	r2, [r3, #0]
				}
			}
		}

		/* re-enable the receiver and receive interrupt */
		uart_module->CR1 |= (USART_CR1_RE | USART_CR1_RXNEIE_RXFNEIE);
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	2224      	movs	r2, #36	@ 0x24
 8007c60:	431a      	orrs	r2, r3
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	601a      	str	r2, [r3, #0]

		/* disable the 'Tx complete' interrupt */
		uart_module->CR1 &= ~USART_CR1_TCIE;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	2240      	movs	r2, #64	@ 0x40
 8007c6c:	4393      	bics	r3, r2
 8007c6e:	001a      	movs	r2, r3
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	601a      	str	r2, [r3, #0]

		/* clear the TC bit */
		uart_module->ICR = USART_ICR_TCCF;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	2240      	movs	r2, #64	@ 0x40
 8007c78:	621a      	str	r2, [r3, #32]
	}
}
 8007c7a:	46c0      	nop			@ (mov r8, r8)
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	b005      	add	sp, #20
 8007c80:	bd90      	pop	{r4, r7, pc}
 8007c82:	46c0      	nop			@ (mov r8, r8)
 8007c84:	20000718 	.word	0x20000718
 8007c88:	40013800 	.word	0x40013800
 8007c8c:	40004400 	.word	0x40004400
 8007c90:	20000720 	.word	0x20000720
 8007c94:	20000714 	.word	0x20000714
 8007c98:	2000071c 	.word	0x2000071c
 8007c9c:	20000724 	.word	0x20000724
 8007ca0:	20000728 	.word	0x20000728
 8007ca4:	20000134 	.word	0x20000134
 8007ca8:	2000072c 	.word	0x2000072c
 8007cac:	40004800 	.word	0x40004800
 8007cb0:	20000135 	.word	0x20000135

08007cb4 <USART1_IRQHandler>:


#ifndef USART1_IRQHandler
void USART1_IRQHandler(void)
{
 8007cb4:	b580      	push	{r7, lr}
 8007cb6:	af00      	add	r7, sp, #0
	uart_irq_handler(USART1);
 8007cb8:	4b03      	ldr	r3, [pc, #12]	@ (8007cc8 <USART1_IRQHandler+0x14>)
 8007cba:	0018      	movs	r0, r3
 8007cbc:	f7ff fedc 	bl	8007a78 <uart_irq_handler>
}
 8007cc0:	46c0      	nop			@ (mov r8, r8)
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	bd80      	pop	{r7, pc}
 8007cc6:	46c0      	nop			@ (mov r8, r8)
 8007cc8:	40013800 	.word	0x40013800

08007ccc <USART2_IRQHandler>:
#endif

#ifndef USART2_IRQHandler

void USART2_IRQHandler(void)
{
 8007ccc:	b580      	push	{r7, lr}
 8007cce:	af00      	add	r7, sp, #0
	uart_irq_handler(USART2);
 8007cd0:	4b03      	ldr	r3, [pc, #12]	@ (8007ce0 <USART2_IRQHandler+0x14>)
 8007cd2:	0018      	movs	r0, r3
 8007cd4:	f7ff fed0 	bl	8007a78 <uart_irq_handler>
}
 8007cd8:	46c0      	nop			@ (mov r8, r8)
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	bd80      	pop	{r7, pc}
 8007cde:	46c0      	nop			@ (mov r8, r8)
 8007ce0:	40004400 	.word	0x40004400

08007ce4 <hal_watchdog_init>:


static IWDG_HandleTypeDef wdg_hdl = {0};

void hal_watchdog_init(void)
{
 8007ce4:	b5b0      	push	{r4, r5, r7, lr}
 8007ce6:	af00      	add	r7, sp, #0
    // Call the watch dog initialization function that was created by the hardware configuration tool.
	MX_IWDG_Init();
 8007ce8:	f7f9 fa96 	bl	8001218 <MX_IWDG_Init>

	wdg_hdl = hiwdg; // Use the watch dog handle created by the STM32 Hardware Configuration Tool.
 8007cec:	4b04      	ldr	r3, [pc, #16]	@ (8007d00 <hal_watchdog_init+0x1c>)
 8007cee:	4a05      	ldr	r2, [pc, #20]	@ (8007d04 <hal_watchdog_init+0x20>)
 8007cf0:	ca13      	ldmia	r2!, {r0, r1, r4}
 8007cf2:	c313      	stmia	r3!, {r0, r1, r4}
 8007cf4:	6812      	ldr	r2, [r2, #0]
 8007cf6:	601a      	str	r2, [r3, #0]

}
 8007cf8:	46c0      	nop			@ (mov r8, r8)
 8007cfa:	46bd      	mov	sp, r7
 8007cfc:	bdb0      	pop	{r4, r5, r7, pc}
 8007cfe:	46c0      	nop			@ (mov r8, r8)
 8007d00:	20000730 	.word	0x20000730
 8007d04:	20000308 	.word	0x20000308

08007d08 <hal_watchdog_reset>:
{

}

void hal_watchdog_reset(void)
{
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	af00      	add	r7, sp, #0
	if( wdg_hdl.Instance != NULL )			// Bootloader was resetting wdt but it was never initialized. This resulted in a null pointer access in HAL functions which impacted FLASH-SR CFGBSY Flag
 8007d0c:	4b05      	ldr	r3, [pc, #20]	@ (8007d24 <hal_watchdog_reset+0x1c>)
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d003      	beq.n	8007d1c <hal_watchdog_reset+0x14>
	{
		/* reload the WDT */
		HAL_IWDG_Refresh(&wdg_hdl);
 8007d14:	4b03      	ldr	r3, [pc, #12]	@ (8007d24 <hal_watchdog_reset+0x1c>)
 8007d16:	0018      	movs	r0, r3
 8007d18:	f7fb fc16 	bl	8003548 <HAL_IWDG_Refresh>
	}
}
 8007d1c:	46c0      	nop			@ (mov r8, r8)
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	bd80      	pop	{r7, pc}
 8007d22:	46c0      	nop			@ (mov r8, r8)
 8007d24:	20000730 	.word	0x20000730

08007d28 <memcmp>:
 8007d28:	b530      	push	{r4, r5, lr}
 8007d2a:	2400      	movs	r4, #0
 8007d2c:	3901      	subs	r1, #1
 8007d2e:	42a2      	cmp	r2, r4
 8007d30:	d101      	bne.n	8007d36 <memcmp+0xe>
 8007d32:	2000      	movs	r0, #0
 8007d34:	e005      	b.n	8007d42 <memcmp+0x1a>
 8007d36:	5d03      	ldrb	r3, [r0, r4]
 8007d38:	3401      	adds	r4, #1
 8007d3a:	5d0d      	ldrb	r5, [r1, r4]
 8007d3c:	42ab      	cmp	r3, r5
 8007d3e:	d0f6      	beq.n	8007d2e <memcmp+0x6>
 8007d40:	1b58      	subs	r0, r3, r5
 8007d42:	bd30      	pop	{r4, r5, pc}

08007d44 <memset>:
 8007d44:	0003      	movs	r3, r0
 8007d46:	1882      	adds	r2, r0, r2
 8007d48:	4293      	cmp	r3, r2
 8007d4a:	d100      	bne.n	8007d4e <memset+0xa>
 8007d4c:	4770      	bx	lr
 8007d4e:	7019      	strb	r1, [r3, #0]
 8007d50:	3301      	adds	r3, #1
 8007d52:	e7f9      	b.n	8007d48 <memset+0x4>

08007d54 <memcpy>:
 8007d54:	2300      	movs	r3, #0
 8007d56:	b510      	push	{r4, lr}
 8007d58:	429a      	cmp	r2, r3
 8007d5a:	d100      	bne.n	8007d5e <memcpy+0xa>
 8007d5c:	bd10      	pop	{r4, pc}
 8007d5e:	5ccc      	ldrb	r4, [r1, r3]
 8007d60:	54c4      	strb	r4, [r0, r3]
 8007d62:	3301      	adds	r3, #1
 8007d64:	e7f8      	b.n	8007d58 <memcpy+0x4>
	...

08007d68 <_init>:
 8007d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d6a:	46c0      	nop			@ (mov r8, r8)
 8007d6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d6e:	bc08      	pop	{r3}
 8007d70:	469e      	mov	lr, r3
 8007d72:	4770      	bx	lr

08007d74 <_fini>:
 8007d74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d76:	46c0      	nop			@ (mov r8, r8)
 8007d78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d7a:	bc08      	pop	{r3}
 8007d7c:	469e      	mov	lr, r3
 8007d7e:	4770      	bx	lr
