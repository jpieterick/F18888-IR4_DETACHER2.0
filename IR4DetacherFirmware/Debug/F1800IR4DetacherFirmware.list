
F1800IR4DetacherFirmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000170  08000000  08000000  00001000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009f60  08000170  08000170  00001170  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000bec  0800a0d0  0800a0d0  0000b0d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800acbc  0800acbc  0000c13c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800acbc  0800acbc  0000c13c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800acbc  0800acbc  0000c13c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800acbc  0800acbc  0000bcbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800acc0  0800acc0  0000bcc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000013c  20000000  0800acc4  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000510  2000013c  0800ae00  0000c13c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000064c  0800ae00  0000c64c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000c13c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f48c  00000000  00000000  0000c164  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005bfb  00000000  00000000  0002b5f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b80  00000000  00000000  000311f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000150c  00000000  00000000  00032d70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c1e4  00000000  00000000  0003427c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002b1c7  00000000  00000000  00050460  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a5507  00000000  00000000  0007b627  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00120b2e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005fc0  00000000  00000000  00120b74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000009e  00000000  00000000  00126b34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000170 <__do_global_dtors_aux>:
 8000170:	b510      	push	{r4, lr}
 8000172:	4c06      	ldr	r4, [pc, #24]	@ (800018c <__do_global_dtors_aux+0x1c>)
 8000174:	7823      	ldrb	r3, [r4, #0]
 8000176:	2b00      	cmp	r3, #0
 8000178:	d107      	bne.n	800018a <__do_global_dtors_aux+0x1a>
 800017a:	4b05      	ldr	r3, [pc, #20]	@ (8000190 <__do_global_dtors_aux+0x20>)
 800017c:	2b00      	cmp	r3, #0
 800017e:	d002      	beq.n	8000186 <__do_global_dtors_aux+0x16>
 8000180:	4804      	ldr	r0, [pc, #16]	@ (8000194 <__do_global_dtors_aux+0x24>)
 8000182:	e000      	b.n	8000186 <__do_global_dtors_aux+0x16>
 8000184:	bf00      	nop
 8000186:	2301      	movs	r3, #1
 8000188:	7023      	strb	r3, [r4, #0]
 800018a:	bd10      	pop	{r4, pc}
 800018c:	2000013c 	.word	0x2000013c
 8000190:	00000000 	.word	0x00000000
 8000194:	0800a0b8 	.word	0x0800a0b8

08000198 <frame_dummy>:
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <frame_dummy+0x14>)
 800019a:	b510      	push	{r4, lr}
 800019c:	2b00      	cmp	r3, #0
 800019e:	d003      	beq.n	80001a8 <frame_dummy+0x10>
 80001a0:	4903      	ldr	r1, [pc, #12]	@ (80001b0 <frame_dummy+0x18>)
 80001a2:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <frame_dummy+0x1c>)
 80001a4:	e000      	b.n	80001a8 <frame_dummy+0x10>
 80001a6:	bf00      	nop
 80001a8:	bd10      	pop	{r4, pc}
 80001aa:	46c0      	nop			@ (mov r8, r8)
 80001ac:	00000000 	.word	0x00000000
 80001b0:	20000140 	.word	0x20000140
 80001b4:	0800a0b8 	.word	0x0800a0b8

080001b8 <__udivsi3>:
 80001b8:	2200      	movs	r2, #0
 80001ba:	0843      	lsrs	r3, r0, #1
 80001bc:	428b      	cmp	r3, r1
 80001be:	d374      	bcc.n	80002aa <__udivsi3+0xf2>
 80001c0:	0903      	lsrs	r3, r0, #4
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d35f      	bcc.n	8000286 <__udivsi3+0xce>
 80001c6:	0a03      	lsrs	r3, r0, #8
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d344      	bcc.n	8000256 <__udivsi3+0x9e>
 80001cc:	0b03      	lsrs	r3, r0, #12
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d328      	bcc.n	8000224 <__udivsi3+0x6c>
 80001d2:	0c03      	lsrs	r3, r0, #16
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d30d      	bcc.n	80001f4 <__udivsi3+0x3c>
 80001d8:	22ff      	movs	r2, #255	@ 0xff
 80001da:	0209      	lsls	r1, r1, #8
 80001dc:	ba12      	rev	r2, r2
 80001de:	0c03      	lsrs	r3, r0, #16
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d302      	bcc.n	80001ea <__udivsi3+0x32>
 80001e4:	1212      	asrs	r2, r2, #8
 80001e6:	0209      	lsls	r1, r1, #8
 80001e8:	d065      	beq.n	80002b6 <__udivsi3+0xfe>
 80001ea:	0b03      	lsrs	r3, r0, #12
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d319      	bcc.n	8000224 <__udivsi3+0x6c>
 80001f0:	e000      	b.n	80001f4 <__udivsi3+0x3c>
 80001f2:	0a09      	lsrs	r1, r1, #8
 80001f4:	0bc3      	lsrs	r3, r0, #15
 80001f6:	428b      	cmp	r3, r1
 80001f8:	d301      	bcc.n	80001fe <__udivsi3+0x46>
 80001fa:	03cb      	lsls	r3, r1, #15
 80001fc:	1ac0      	subs	r0, r0, r3
 80001fe:	4152      	adcs	r2, r2
 8000200:	0b83      	lsrs	r3, r0, #14
 8000202:	428b      	cmp	r3, r1
 8000204:	d301      	bcc.n	800020a <__udivsi3+0x52>
 8000206:	038b      	lsls	r3, r1, #14
 8000208:	1ac0      	subs	r0, r0, r3
 800020a:	4152      	adcs	r2, r2
 800020c:	0b43      	lsrs	r3, r0, #13
 800020e:	428b      	cmp	r3, r1
 8000210:	d301      	bcc.n	8000216 <__udivsi3+0x5e>
 8000212:	034b      	lsls	r3, r1, #13
 8000214:	1ac0      	subs	r0, r0, r3
 8000216:	4152      	adcs	r2, r2
 8000218:	0b03      	lsrs	r3, r0, #12
 800021a:	428b      	cmp	r3, r1
 800021c:	d301      	bcc.n	8000222 <__udivsi3+0x6a>
 800021e:	030b      	lsls	r3, r1, #12
 8000220:	1ac0      	subs	r0, r0, r3
 8000222:	4152      	adcs	r2, r2
 8000224:	0ac3      	lsrs	r3, r0, #11
 8000226:	428b      	cmp	r3, r1
 8000228:	d301      	bcc.n	800022e <__udivsi3+0x76>
 800022a:	02cb      	lsls	r3, r1, #11
 800022c:	1ac0      	subs	r0, r0, r3
 800022e:	4152      	adcs	r2, r2
 8000230:	0a83      	lsrs	r3, r0, #10
 8000232:	428b      	cmp	r3, r1
 8000234:	d301      	bcc.n	800023a <__udivsi3+0x82>
 8000236:	028b      	lsls	r3, r1, #10
 8000238:	1ac0      	subs	r0, r0, r3
 800023a:	4152      	adcs	r2, r2
 800023c:	0a43      	lsrs	r3, r0, #9
 800023e:	428b      	cmp	r3, r1
 8000240:	d301      	bcc.n	8000246 <__udivsi3+0x8e>
 8000242:	024b      	lsls	r3, r1, #9
 8000244:	1ac0      	subs	r0, r0, r3
 8000246:	4152      	adcs	r2, r2
 8000248:	0a03      	lsrs	r3, r0, #8
 800024a:	428b      	cmp	r3, r1
 800024c:	d301      	bcc.n	8000252 <__udivsi3+0x9a>
 800024e:	020b      	lsls	r3, r1, #8
 8000250:	1ac0      	subs	r0, r0, r3
 8000252:	4152      	adcs	r2, r2
 8000254:	d2cd      	bcs.n	80001f2 <__udivsi3+0x3a>
 8000256:	09c3      	lsrs	r3, r0, #7
 8000258:	428b      	cmp	r3, r1
 800025a:	d301      	bcc.n	8000260 <__udivsi3+0xa8>
 800025c:	01cb      	lsls	r3, r1, #7
 800025e:	1ac0      	subs	r0, r0, r3
 8000260:	4152      	adcs	r2, r2
 8000262:	0983      	lsrs	r3, r0, #6
 8000264:	428b      	cmp	r3, r1
 8000266:	d301      	bcc.n	800026c <__udivsi3+0xb4>
 8000268:	018b      	lsls	r3, r1, #6
 800026a:	1ac0      	subs	r0, r0, r3
 800026c:	4152      	adcs	r2, r2
 800026e:	0943      	lsrs	r3, r0, #5
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__udivsi3+0xc0>
 8000274:	014b      	lsls	r3, r1, #5
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0903      	lsrs	r3, r0, #4
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__udivsi3+0xcc>
 8000280:	010b      	lsls	r3, r1, #4
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	08c3      	lsrs	r3, r0, #3
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__udivsi3+0xd8>
 800028c:	00cb      	lsls	r3, r1, #3
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0883      	lsrs	r3, r0, #2
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__udivsi3+0xe4>
 8000298:	008b      	lsls	r3, r1, #2
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0843      	lsrs	r3, r0, #1
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__udivsi3+0xf0>
 80002a4:	004b      	lsls	r3, r1, #1
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	1a41      	subs	r1, r0, r1
 80002ac:	d200      	bcs.n	80002b0 <__udivsi3+0xf8>
 80002ae:	4601      	mov	r1, r0
 80002b0:	4152      	adcs	r2, r2
 80002b2:	4610      	mov	r0, r2
 80002b4:	4770      	bx	lr
 80002b6:	e7ff      	b.n	80002b8 <__udivsi3+0x100>
 80002b8:	b501      	push	{r0, lr}
 80002ba:	2000      	movs	r0, #0
 80002bc:	f000 f8f0 	bl	80004a0 <__aeabi_idiv0>
 80002c0:	bd02      	pop	{r1, pc}
 80002c2:	46c0      	nop			@ (mov r8, r8)

080002c4 <__aeabi_uidivmod>:
 80002c4:	2900      	cmp	r1, #0
 80002c6:	d0f7      	beq.n	80002b8 <__udivsi3+0x100>
 80002c8:	e776      	b.n	80001b8 <__udivsi3>
 80002ca:	4770      	bx	lr

080002cc <__divsi3>:
 80002cc:	4603      	mov	r3, r0
 80002ce:	430b      	orrs	r3, r1
 80002d0:	d47f      	bmi.n	80003d2 <__divsi3+0x106>
 80002d2:	2200      	movs	r2, #0
 80002d4:	0843      	lsrs	r3, r0, #1
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d374      	bcc.n	80003c4 <__divsi3+0xf8>
 80002da:	0903      	lsrs	r3, r0, #4
 80002dc:	428b      	cmp	r3, r1
 80002de:	d35f      	bcc.n	80003a0 <__divsi3+0xd4>
 80002e0:	0a03      	lsrs	r3, r0, #8
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d344      	bcc.n	8000370 <__divsi3+0xa4>
 80002e6:	0b03      	lsrs	r3, r0, #12
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d328      	bcc.n	800033e <__divsi3+0x72>
 80002ec:	0c03      	lsrs	r3, r0, #16
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d30d      	bcc.n	800030e <__divsi3+0x42>
 80002f2:	22ff      	movs	r2, #255	@ 0xff
 80002f4:	0209      	lsls	r1, r1, #8
 80002f6:	ba12      	rev	r2, r2
 80002f8:	0c03      	lsrs	r3, r0, #16
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d302      	bcc.n	8000304 <__divsi3+0x38>
 80002fe:	1212      	asrs	r2, r2, #8
 8000300:	0209      	lsls	r1, r1, #8
 8000302:	d065      	beq.n	80003d0 <__divsi3+0x104>
 8000304:	0b03      	lsrs	r3, r0, #12
 8000306:	428b      	cmp	r3, r1
 8000308:	d319      	bcc.n	800033e <__divsi3+0x72>
 800030a:	e000      	b.n	800030e <__divsi3+0x42>
 800030c:	0a09      	lsrs	r1, r1, #8
 800030e:	0bc3      	lsrs	r3, r0, #15
 8000310:	428b      	cmp	r3, r1
 8000312:	d301      	bcc.n	8000318 <__divsi3+0x4c>
 8000314:	03cb      	lsls	r3, r1, #15
 8000316:	1ac0      	subs	r0, r0, r3
 8000318:	4152      	adcs	r2, r2
 800031a:	0b83      	lsrs	r3, r0, #14
 800031c:	428b      	cmp	r3, r1
 800031e:	d301      	bcc.n	8000324 <__divsi3+0x58>
 8000320:	038b      	lsls	r3, r1, #14
 8000322:	1ac0      	subs	r0, r0, r3
 8000324:	4152      	adcs	r2, r2
 8000326:	0b43      	lsrs	r3, r0, #13
 8000328:	428b      	cmp	r3, r1
 800032a:	d301      	bcc.n	8000330 <__divsi3+0x64>
 800032c:	034b      	lsls	r3, r1, #13
 800032e:	1ac0      	subs	r0, r0, r3
 8000330:	4152      	adcs	r2, r2
 8000332:	0b03      	lsrs	r3, r0, #12
 8000334:	428b      	cmp	r3, r1
 8000336:	d301      	bcc.n	800033c <__divsi3+0x70>
 8000338:	030b      	lsls	r3, r1, #12
 800033a:	1ac0      	subs	r0, r0, r3
 800033c:	4152      	adcs	r2, r2
 800033e:	0ac3      	lsrs	r3, r0, #11
 8000340:	428b      	cmp	r3, r1
 8000342:	d301      	bcc.n	8000348 <__divsi3+0x7c>
 8000344:	02cb      	lsls	r3, r1, #11
 8000346:	1ac0      	subs	r0, r0, r3
 8000348:	4152      	adcs	r2, r2
 800034a:	0a83      	lsrs	r3, r0, #10
 800034c:	428b      	cmp	r3, r1
 800034e:	d301      	bcc.n	8000354 <__divsi3+0x88>
 8000350:	028b      	lsls	r3, r1, #10
 8000352:	1ac0      	subs	r0, r0, r3
 8000354:	4152      	adcs	r2, r2
 8000356:	0a43      	lsrs	r3, r0, #9
 8000358:	428b      	cmp	r3, r1
 800035a:	d301      	bcc.n	8000360 <__divsi3+0x94>
 800035c:	024b      	lsls	r3, r1, #9
 800035e:	1ac0      	subs	r0, r0, r3
 8000360:	4152      	adcs	r2, r2
 8000362:	0a03      	lsrs	r3, r0, #8
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0xa0>
 8000368:	020b      	lsls	r3, r1, #8
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	d2cd      	bcs.n	800030c <__divsi3+0x40>
 8000370:	09c3      	lsrs	r3, r0, #7
 8000372:	428b      	cmp	r3, r1
 8000374:	d301      	bcc.n	800037a <__divsi3+0xae>
 8000376:	01cb      	lsls	r3, r1, #7
 8000378:	1ac0      	subs	r0, r0, r3
 800037a:	4152      	adcs	r2, r2
 800037c:	0983      	lsrs	r3, r0, #6
 800037e:	428b      	cmp	r3, r1
 8000380:	d301      	bcc.n	8000386 <__divsi3+0xba>
 8000382:	018b      	lsls	r3, r1, #6
 8000384:	1ac0      	subs	r0, r0, r3
 8000386:	4152      	adcs	r2, r2
 8000388:	0943      	lsrs	r3, r0, #5
 800038a:	428b      	cmp	r3, r1
 800038c:	d301      	bcc.n	8000392 <__divsi3+0xc6>
 800038e:	014b      	lsls	r3, r1, #5
 8000390:	1ac0      	subs	r0, r0, r3
 8000392:	4152      	adcs	r2, r2
 8000394:	0903      	lsrs	r3, r0, #4
 8000396:	428b      	cmp	r3, r1
 8000398:	d301      	bcc.n	800039e <__divsi3+0xd2>
 800039a:	010b      	lsls	r3, r1, #4
 800039c:	1ac0      	subs	r0, r0, r3
 800039e:	4152      	adcs	r2, r2
 80003a0:	08c3      	lsrs	r3, r0, #3
 80003a2:	428b      	cmp	r3, r1
 80003a4:	d301      	bcc.n	80003aa <__divsi3+0xde>
 80003a6:	00cb      	lsls	r3, r1, #3
 80003a8:	1ac0      	subs	r0, r0, r3
 80003aa:	4152      	adcs	r2, r2
 80003ac:	0883      	lsrs	r3, r0, #2
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0xea>
 80003b2:	008b      	lsls	r3, r1, #2
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	0843      	lsrs	r3, r0, #1
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d301      	bcc.n	80003c2 <__divsi3+0xf6>
 80003be:	004b      	lsls	r3, r1, #1
 80003c0:	1ac0      	subs	r0, r0, r3
 80003c2:	4152      	adcs	r2, r2
 80003c4:	1a41      	subs	r1, r0, r1
 80003c6:	d200      	bcs.n	80003ca <__divsi3+0xfe>
 80003c8:	4601      	mov	r1, r0
 80003ca:	4152      	adcs	r2, r2
 80003cc:	4610      	mov	r0, r2
 80003ce:	4770      	bx	lr
 80003d0:	e05d      	b.n	800048e <__divsi3+0x1c2>
 80003d2:	0fca      	lsrs	r2, r1, #31
 80003d4:	d000      	beq.n	80003d8 <__divsi3+0x10c>
 80003d6:	4249      	negs	r1, r1
 80003d8:	1003      	asrs	r3, r0, #32
 80003da:	d300      	bcc.n	80003de <__divsi3+0x112>
 80003dc:	4240      	negs	r0, r0
 80003de:	4053      	eors	r3, r2
 80003e0:	2200      	movs	r2, #0
 80003e2:	469c      	mov	ip, r3
 80003e4:	0903      	lsrs	r3, r0, #4
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d32d      	bcc.n	8000446 <__divsi3+0x17a>
 80003ea:	0a03      	lsrs	r3, r0, #8
 80003ec:	428b      	cmp	r3, r1
 80003ee:	d312      	bcc.n	8000416 <__divsi3+0x14a>
 80003f0:	22fc      	movs	r2, #252	@ 0xfc
 80003f2:	0189      	lsls	r1, r1, #6
 80003f4:	ba12      	rev	r2, r2
 80003f6:	0a03      	lsrs	r3, r0, #8
 80003f8:	428b      	cmp	r3, r1
 80003fa:	d30c      	bcc.n	8000416 <__divsi3+0x14a>
 80003fc:	0189      	lsls	r1, r1, #6
 80003fe:	1192      	asrs	r2, r2, #6
 8000400:	428b      	cmp	r3, r1
 8000402:	d308      	bcc.n	8000416 <__divsi3+0x14a>
 8000404:	0189      	lsls	r1, r1, #6
 8000406:	1192      	asrs	r2, r2, #6
 8000408:	428b      	cmp	r3, r1
 800040a:	d304      	bcc.n	8000416 <__divsi3+0x14a>
 800040c:	0189      	lsls	r1, r1, #6
 800040e:	d03a      	beq.n	8000486 <__divsi3+0x1ba>
 8000410:	1192      	asrs	r2, r2, #6
 8000412:	e000      	b.n	8000416 <__divsi3+0x14a>
 8000414:	0989      	lsrs	r1, r1, #6
 8000416:	09c3      	lsrs	r3, r0, #7
 8000418:	428b      	cmp	r3, r1
 800041a:	d301      	bcc.n	8000420 <__divsi3+0x154>
 800041c:	01cb      	lsls	r3, r1, #7
 800041e:	1ac0      	subs	r0, r0, r3
 8000420:	4152      	adcs	r2, r2
 8000422:	0983      	lsrs	r3, r0, #6
 8000424:	428b      	cmp	r3, r1
 8000426:	d301      	bcc.n	800042c <__divsi3+0x160>
 8000428:	018b      	lsls	r3, r1, #6
 800042a:	1ac0      	subs	r0, r0, r3
 800042c:	4152      	adcs	r2, r2
 800042e:	0943      	lsrs	r3, r0, #5
 8000430:	428b      	cmp	r3, r1
 8000432:	d301      	bcc.n	8000438 <__divsi3+0x16c>
 8000434:	014b      	lsls	r3, r1, #5
 8000436:	1ac0      	subs	r0, r0, r3
 8000438:	4152      	adcs	r2, r2
 800043a:	0903      	lsrs	r3, r0, #4
 800043c:	428b      	cmp	r3, r1
 800043e:	d301      	bcc.n	8000444 <__divsi3+0x178>
 8000440:	010b      	lsls	r3, r1, #4
 8000442:	1ac0      	subs	r0, r0, r3
 8000444:	4152      	adcs	r2, r2
 8000446:	08c3      	lsrs	r3, r0, #3
 8000448:	428b      	cmp	r3, r1
 800044a:	d301      	bcc.n	8000450 <__divsi3+0x184>
 800044c:	00cb      	lsls	r3, r1, #3
 800044e:	1ac0      	subs	r0, r0, r3
 8000450:	4152      	adcs	r2, r2
 8000452:	0883      	lsrs	r3, r0, #2
 8000454:	428b      	cmp	r3, r1
 8000456:	d301      	bcc.n	800045c <__divsi3+0x190>
 8000458:	008b      	lsls	r3, r1, #2
 800045a:	1ac0      	subs	r0, r0, r3
 800045c:	4152      	adcs	r2, r2
 800045e:	d2d9      	bcs.n	8000414 <__divsi3+0x148>
 8000460:	0843      	lsrs	r3, r0, #1
 8000462:	428b      	cmp	r3, r1
 8000464:	d301      	bcc.n	800046a <__divsi3+0x19e>
 8000466:	004b      	lsls	r3, r1, #1
 8000468:	1ac0      	subs	r0, r0, r3
 800046a:	4152      	adcs	r2, r2
 800046c:	1a41      	subs	r1, r0, r1
 800046e:	d200      	bcs.n	8000472 <__divsi3+0x1a6>
 8000470:	4601      	mov	r1, r0
 8000472:	4663      	mov	r3, ip
 8000474:	4152      	adcs	r2, r2
 8000476:	105b      	asrs	r3, r3, #1
 8000478:	4610      	mov	r0, r2
 800047a:	d301      	bcc.n	8000480 <__divsi3+0x1b4>
 800047c:	4240      	negs	r0, r0
 800047e:	2b00      	cmp	r3, #0
 8000480:	d500      	bpl.n	8000484 <__divsi3+0x1b8>
 8000482:	4249      	negs	r1, r1
 8000484:	4770      	bx	lr
 8000486:	4663      	mov	r3, ip
 8000488:	105b      	asrs	r3, r3, #1
 800048a:	d300      	bcc.n	800048e <__divsi3+0x1c2>
 800048c:	4240      	negs	r0, r0
 800048e:	b501      	push	{r0, lr}
 8000490:	2000      	movs	r0, #0
 8000492:	f000 f805 	bl	80004a0 <__aeabi_idiv0>
 8000496:	bd02      	pop	{r1, pc}

08000498 <__aeabi_idivmod>:
 8000498:	2900      	cmp	r1, #0
 800049a:	d0f8      	beq.n	800048e <__divsi3+0x1c2>
 800049c:	e716      	b.n	80002cc <__divsi3>
 800049e:	4770      	bx	lr

080004a0 <__aeabi_idiv0>:
 80004a0:	4770      	bx	lr
 80004a2:	46c0      	nop			@ (mov r8, r8)

080004a4 <ac_buzzer_inactive>:
	unlocked_tone[1].pwm_dc = mFREQ_TO_DUTY_CYC_COUNTS(unlocked_tone[1].pwm_period, dutyCyclePCT );
	unlocked_tone[2].pwm_dc = mFREQ_TO_DUTY_CYC_COUNTS(unlocked_tone[2].pwm_period, dutyCyclePCT );
}

bool ac_buzzer_inactive(void)
{
 80004a4:	b580      	push	{r7, lr}
 80004a6:	af00      	add	r7, sp, #0
	return ( ( chirp_counter == 0 ) && ( alarm_active == false ) && ( pwm_output_enabled == false ) && (error_counter == 0 ) && ( notifications.count == 0) );
 80004a8:	4b11      	ldr	r3, [pc, #68]	@ (80004f0 <ac_buzzer_inactive+0x4c>)
 80004aa:	781b      	ldrb	r3, [r3, #0]
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	d117      	bne.n	80004e0 <ac_buzzer_inactive+0x3c>
 80004b0:	4b10      	ldr	r3, [pc, #64]	@ (80004f4 <ac_buzzer_inactive+0x50>)
 80004b2:	781b      	ldrb	r3, [r3, #0]
 80004b4:	2201      	movs	r2, #1
 80004b6:	4053      	eors	r3, r2
 80004b8:	b2db      	uxtb	r3, r3
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d010      	beq.n	80004e0 <ac_buzzer_inactive+0x3c>
 80004be:	4b0e      	ldr	r3, [pc, #56]	@ (80004f8 <ac_buzzer_inactive+0x54>)
 80004c0:	781b      	ldrb	r3, [r3, #0]
 80004c2:	2201      	movs	r2, #1
 80004c4:	4053      	eors	r3, r2
 80004c6:	b2db      	uxtb	r3, r3
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	d009      	beq.n	80004e0 <ac_buzzer_inactive+0x3c>
 80004cc:	4b0b      	ldr	r3, [pc, #44]	@ (80004fc <ac_buzzer_inactive+0x58>)
 80004ce:	781b      	ldrb	r3, [r3, #0]
 80004d0:	2b00      	cmp	r3, #0
 80004d2:	d105      	bne.n	80004e0 <ac_buzzer_inactive+0x3c>
 80004d4:	4b0a      	ldr	r3, [pc, #40]	@ (8000500 <ac_buzzer_inactive+0x5c>)
 80004d6:	785b      	ldrb	r3, [r3, #1]
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d101      	bne.n	80004e0 <ac_buzzer_inactive+0x3c>
 80004dc:	2301      	movs	r3, #1
 80004de:	e000      	b.n	80004e2 <ac_buzzer_inactive+0x3e>
 80004e0:	2300      	movs	r3, #0
 80004e2:	1c1a      	adds	r2, r3, #0
 80004e4:	2301      	movs	r3, #1
 80004e6:	4013      	ands	r3, r2
 80004e8:	b2db      	uxtb	r3, r3
}
 80004ea:	0018      	movs	r0, r3
 80004ec:	46bd      	mov	sp, r7
 80004ee:	bd80      	pop	{r7, pc}
 80004f0:	20000158 	.word	0x20000158
 80004f4:	2000015b 	.word	0x2000015b
 80004f8:	2000015d 	.word	0x2000015d
 80004fc:	20000159 	.word	0x20000159
 8000500:	20000160 	.word	0x20000160

08000504 <ac_chirp>:
//		}
//	}
//}

void ac_chirp(uint8_t num_chirps)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b082      	sub	sp, #8
 8000508:	af00      	add	r7, sp, #0
 800050a:	0002      	movs	r2, r0
 800050c:	1dfb      	adds	r3, r7, #7
 800050e:	701a      	strb	r2, [r3, #0]
	chirp_counter += num_chirps;
 8000510:	4b09      	ldr	r3, [pc, #36]	@ (8000538 <ac_chirp+0x34>)
 8000512:	781a      	ldrb	r2, [r3, #0]
 8000514:	1dfb      	adds	r3, r7, #7
 8000516:	781b      	ldrb	r3, [r3, #0]
 8000518:	18d3      	adds	r3, r2, r3
 800051a:	b2da      	uxtb	r2, r3
 800051c:	4b06      	ldr	r3, [pc, #24]	@ (8000538 <ac_chirp+0x34>)
 800051e:	701a      	strb	r2, [r3, #0]
	chirp_counter &= 0x0F; // limit to 15 chirps
 8000520:	4b05      	ldr	r3, [pc, #20]	@ (8000538 <ac_chirp+0x34>)
 8000522:	781b      	ldrb	r3, [r3, #0]
 8000524:	220f      	movs	r2, #15
 8000526:	4013      	ands	r3, r2
 8000528:	b2da      	uxtb	r2, r3
 800052a:	4b03      	ldr	r3, [pc, #12]	@ (8000538 <ac_chirp+0x34>)
 800052c:	701a      	strb	r2, [r3, #0]
}
 800052e:	46c0      	nop			@ (mov r8, r8)
 8000530:	46bd      	mov	sp, r7
 8000532:	b002      	add	sp, #8
 8000534:	bd80      	pop	{r7, pc}
 8000536:	46c0      	nop			@ (mov r8, r8)
 8000538:	20000158 	.word	0x20000158

0800053c <ac_error_tone>:

void ac_error_tone( uint8_t num_repeat)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b082      	sub	sp, #8
 8000540:	af00      	add	r7, sp, #0
 8000542:	0002      	movs	r2, r0
 8000544:	1dfb      	adds	r3, r7, #7
 8000546:	701a      	strb	r2, [r3, #0]
	error_counter += num_repeat;
 8000548:	4b09      	ldr	r3, [pc, #36]	@ (8000570 <ac_error_tone+0x34>)
 800054a:	781a      	ldrb	r2, [r3, #0]
 800054c:	1dfb      	adds	r3, r7, #7
 800054e:	781b      	ldrb	r3, [r3, #0]
 8000550:	18d3      	adds	r3, r2, r3
 8000552:	b2da      	uxtb	r2, r3
 8000554:	4b06      	ldr	r3, [pc, #24]	@ (8000570 <ac_error_tone+0x34>)
 8000556:	701a      	strb	r2, [r3, #0]
	error_counter &= 0x0F; // limit to 15 chirps
 8000558:	4b05      	ldr	r3, [pc, #20]	@ (8000570 <ac_error_tone+0x34>)
 800055a:	781b      	ldrb	r3, [r3, #0]
 800055c:	220f      	movs	r2, #15
 800055e:	4013      	ands	r3, r2
 8000560:	b2da      	uxtb	r2, r3
 8000562:	4b03      	ldr	r3, [pc, #12]	@ (8000570 <ac_error_tone+0x34>)
 8000564:	701a      	strb	r2, [r3, #0]
}
 8000566:	46c0      	nop			@ (mov r8, r8)
 8000568:	46bd      	mov	sp, r7
 800056a:	b002      	add	sp, #8
 800056c:	bd80      	pop	{r7, pc}
 800056e:	46c0      	nop			@ (mov r8, r8)
 8000570:	20000159 	.word	0x20000159

08000574 <ac_audio_controller>:
		notifications.tone = unlocked_tone;
	}
}

void ac_audio_controller(uint16_t time_since_last_called_msec)
{
 8000574:	b5b0      	push	{r4, r5, r7, lr}
 8000576:	b084      	sub	sp, #16
 8000578:	af00      	add	r7, sp, #0
 800057a:	0002      	movs	r2, r0
 800057c:	1dbb      	adds	r3, r7, #6
 800057e:	801a      	strh	r2, [r3, #0]
	static uint8_t  current_step = 0;
	static uint16_t time_since_last_tone        = 0;
	static uint16_t time_since_last_chirp_start = 0;
	static uint16_t time_since_last_chirp_stop  = 0;
    /* handle the AUDIO output pin definition to ensure the pin is driven LOW when inactive */
	if (ac_buzzer_inactive())
 8000580:	f7ff ff90 	bl	80004a4 <ac_buzzer_inactive>
 8000584:	1e03      	subs	r3, r0, #0
 8000586:	d016      	beq.n	80005b6 <ac_audio_controller+0x42>
	{
		/* ensure the pin is a digital output and set LOW */
		hal_gpio_set_output(timer_defs[TIMER_PIEZO_PWM].pin_id, false);
 8000588:	4bdb      	ldr	r3, [pc, #876]	@ (80008f8 <ac_audio_controller+0x384>)
 800058a:	68db      	ldr	r3, [r3, #12]
 800058c:	b2db      	uxtb	r3, r3
 800058e:	2100      	movs	r1, #0
 8000590:	0018      	movs	r0, r3
 8000592:	f006 ff07 	bl	80073a4 <hal_gpio_set_output>
		hal_gpio_set_pin_mode(timer_defs[TIMER_PIEZO_PWM].pin_id, pin_defs[ timer_defs[TIMER_PIEZO_PWM].pin_id ].Mode );
 8000596:	4bd8      	ldr	r3, [pc, #864]	@ (80008f8 <ac_audio_controller+0x384>)
 8000598:	68db      	ldr	r3, [r3, #12]
 800059a:	b2d8      	uxtb	r0, r3
 800059c:	4bd6      	ldr	r3, [pc, #856]	@ (80008f8 <ac_audio_controller+0x384>)
 800059e:	68da      	ldr	r2, [r3, #12]
 80005a0:	49d6      	ldr	r1, [pc, #856]	@ (80008fc <ac_audio_controller+0x388>)
 80005a2:	0013      	movs	r3, r2
 80005a4:	009b      	lsls	r3, r3, #2
 80005a6:	189b      	adds	r3, r3, r2
 80005a8:	009b      	lsls	r3, r3, #2
 80005aa:	18cb      	adds	r3, r1, r3
 80005ac:	3304      	adds	r3, #4
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	0019      	movs	r1, r3
 80005b2:	f006 ff1b 	bl	80073ec <hal_gpio_set_pin_mode>
		/* ensure the pin is in PWM mode */
//		hal_gpio_set_pin_mode(IO_AUDIO, GPIO_AF2_LPTIM1);
	}

	/* if a manual PWM command has been initiated */
	if (pwm_override_active)
 80005b6:	4bd2      	ldr	r3, [pc, #840]	@ (8000900 <ac_audio_controller+0x38c>)
 80005b8:	781b      	ldrb	r3, [r3, #0]
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d000      	beq.n	80005c0 <ac_audio_controller+0x4c>
 80005be:	e1bf      	b.n	8000940 <ac_audio_controller+0x3cc>
	{
		return;
	}

	/* update the local timers */
	time_since_last_tone        += time_since_last_called_msec;
 80005c0:	4bd0      	ldr	r3, [pc, #832]	@ (8000904 <ac_audio_controller+0x390>)
 80005c2:	881a      	ldrh	r2, [r3, #0]
 80005c4:	1dbb      	adds	r3, r7, #6
 80005c6:	881b      	ldrh	r3, [r3, #0]
 80005c8:	18d3      	adds	r3, r2, r3
 80005ca:	b29a      	uxth	r2, r3
 80005cc:	4bcd      	ldr	r3, [pc, #820]	@ (8000904 <ac_audio_controller+0x390>)
 80005ce:	801a      	strh	r2, [r3, #0]
	time_since_last_chirp_start += time_since_last_called_msec;
 80005d0:	4bcd      	ldr	r3, [pc, #820]	@ (8000908 <ac_audio_controller+0x394>)
 80005d2:	881a      	ldrh	r2, [r3, #0]
 80005d4:	1dbb      	adds	r3, r7, #6
 80005d6:	881b      	ldrh	r3, [r3, #0]
 80005d8:	18d3      	adds	r3, r2, r3
 80005da:	b29a      	uxth	r2, r3
 80005dc:	4bca      	ldr	r3, [pc, #808]	@ (8000908 <ac_audio_controller+0x394>)
 80005de:	801a      	strh	r2, [r3, #0]
	time_since_last_chirp_stop  += time_since_last_called_msec;
 80005e0:	4bca      	ldr	r3, [pc, #808]	@ (800090c <ac_audio_controller+0x398>)
 80005e2:	881a      	ldrh	r2, [r3, #0]
 80005e4:	1dbb      	adds	r3, r7, #6
 80005e6:	881b      	ldrh	r3, [r3, #0]
 80005e8:	18d3      	adds	r3, r2, r3
 80005ea:	b29a      	uxth	r2, r3
 80005ec:	4bc7      	ldr	r3, [pc, #796]	@ (800090c <ac_audio_controller+0x398>)
 80005ee:	801a      	strh	r2, [r3, #0]

	if (alarm_active)
 80005f0:	4bc7      	ldr	r3, [pc, #796]	@ (8000910 <ac_audio_controller+0x39c>)
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d041      	beq.n	800067c <ac_audio_controller+0x108>
	{
		/* reset the number of chirps during an active alarm state to prevent
		 * any pending chirps from sounding after the alarm ends */
		chirp_counter = 0;
 80005f8:	4bc6      	ldr	r3, [pc, #792]	@ (8000914 <ac_audio_controller+0x3a0>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	701a      	strb	r2, [r3, #0]
		error_counter = 0;
 80005fe:	4bc6      	ldr	r3, [pc, #792]	@ (8000918 <ac_audio_controller+0x3a4>)
 8000600:	2200      	movs	r2, #0
 8000602:	701a      	strb	r2, [r3, #0]
		notifications.count = 0;
 8000604:	4bc5      	ldr	r3, [pc, #788]	@ (800091c <ac_audio_controller+0x3a8>)
 8000606:	2200      	movs	r2, #0
 8000608:	705a      	strb	r2, [r3, #1]
		if ((time_since_last_tone >= ALARM_TONE_TIME_MSEC))
 800060a:	4bbe      	ldr	r3, [pc, #760]	@ (8000904 <ac_audio_controller+0x390>)
 800060c:	881b      	ldrh	r3, [r3, #0]
 800060e:	2b0e      	cmp	r3, #14
 8000610:	d800      	bhi.n	8000614 <ac_audio_controller+0xa0>
 8000612:	e198      	b.n	8000946 <ac_audio_controller+0x3d2>
		{
			/* update the step */
			current_step = (current_step < (NUM_ALARM_TONES - 1)) ? (current_step + 1) : 0;
 8000614:	4bc2      	ldr	r3, [pc, #776]	@ (8000920 <ac_audio_controller+0x3ac>)
 8000616:	781b      	ldrb	r3, [r3, #0]
 8000618:	2b06      	cmp	r3, #6
 800061a:	d804      	bhi.n	8000626 <ac_audio_controller+0xb2>
 800061c:	4bc0      	ldr	r3, [pc, #768]	@ (8000920 <ac_audio_controller+0x3ac>)
 800061e:	781b      	ldrb	r3, [r3, #0]
 8000620:	3301      	adds	r3, #1
 8000622:	b2da      	uxtb	r2, r3
 8000624:	e000      	b.n	8000628 <ac_audio_controller+0xb4>
 8000626:	2200      	movs	r2, #0
 8000628:	4bbd      	ldr	r3, [pc, #756]	@ (8000920 <ac_audio_controller+0x3ac>)
 800062a:	701a      	strb	r2, [r3, #0]

			/* set the PWM timer */
			uint16_t on_time =  ac_adjust_alarm_audio_level(alarm_tone[current_step].pwm_dc);
 800062c:	4bbc      	ldr	r3, [pc, #752]	@ (8000920 <ac_audio_controller+0x3ac>)
 800062e:	781b      	ldrb	r3, [r3, #0]
 8000630:	0019      	movs	r1, r3
 8000632:	4abc      	ldr	r2, [pc, #752]	@ (8000924 <ac_audio_controller+0x3b0>)
 8000634:	000b      	movs	r3, r1
 8000636:	005b      	lsls	r3, r3, #1
 8000638:	185b      	adds	r3, r3, r1
 800063a:	005b      	lsls	r3, r3, #1
 800063c:	18d3      	adds	r3, r2, r3
 800063e:	3302      	adds	r3, #2
 8000640:	881b      	ldrh	r3, [r3, #0]
 8000642:	250e      	movs	r5, #14
 8000644:	197c      	adds	r4, r7, r5
 8000646:	0018      	movs	r0, r3
 8000648:	f000 f980 	bl	800094c <ac_adjust_alarm_audio_level>
 800064c:	0003      	movs	r3, r0
 800064e:	8023      	strh	r3, [r4, #0]
			hal_timer_set_pwm_output_period(TIMER_PIEZO_PWM, alarm_tone[current_step].pwm_period, on_time);
 8000650:	4bb3      	ldr	r3, [pc, #716]	@ (8000920 <ac_audio_controller+0x3ac>)
 8000652:	781b      	ldrb	r3, [r3, #0]
 8000654:	0019      	movs	r1, r3
 8000656:	4ab3      	ldr	r2, [pc, #716]	@ (8000924 <ac_audio_controller+0x3b0>)
 8000658:	000b      	movs	r3, r1
 800065a:	005b      	lsls	r3, r3, #1
 800065c:	185b      	adds	r3, r3, r1
 800065e:	005b      	lsls	r3, r3, #1
 8000660:	5a99      	ldrh	r1, [r3, r2]
 8000662:	197b      	adds	r3, r7, r5
 8000664:	881b      	ldrh	r3, [r3, #0]
 8000666:	001a      	movs	r2, r3
 8000668:	2000      	movs	r0, #0
 800066a:	f006 ff6b 	bl	8007544 <hal_timer_set_pwm_output_period>
			pwm_output_enabled = true;
 800066e:	4bae      	ldr	r3, [pc, #696]	@ (8000928 <ac_audio_controller+0x3b4>)
 8000670:	2201      	movs	r2, #1
 8000672:	701a      	strb	r2, [r3, #0]
			/* reset the state timer */
			time_since_last_tone = 0;
 8000674:	4ba3      	ldr	r3, [pc, #652]	@ (8000904 <ac_audio_controller+0x390>)
 8000676:	2200      	movs	r2, #0
 8000678:	801a      	strh	r2, [r3, #0]
 800067a:	e164      	b.n	8000946 <ac_audio_controller+0x3d2>
		}
	}
	else
	{
		/* if there are pending chirps */
		if (chirp_counter > 0)
 800067c:	4ba5      	ldr	r3, [pc, #660]	@ (8000914 <ac_audio_controller+0x3a0>)
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	2b00      	cmp	r3, #0
 8000682:	d04e      	beq.n	8000722 <ac_audio_controller+0x1ae>
		{
			if (!chirp_active)
 8000684:	4ba9      	ldr	r3, [pc, #676]	@ (800092c <ac_audio_controller+0x3b8>)
 8000686:	781b      	ldrb	r3, [r3, #0]
 8000688:	2201      	movs	r2, #1
 800068a:	4053      	eors	r3, r2
 800068c:	b2db      	uxtb	r3, r3
 800068e:	2b00      	cmp	r3, #0
 8000690:	d02d      	beq.n	80006ee <ac_audio_controller+0x17a>
			{
				/* if time to start a chirp */
				if (time_since_last_chirp_stop >= CHIRP_QUIET_TIME_MSEC)
 8000692:	4b9e      	ldr	r3, [pc, #632]	@ (800090c <ac_audio_controller+0x398>)
 8000694:	881b      	ldrh	r3, [r3, #0]
 8000696:	2b4a      	cmp	r3, #74	@ 0x4a
 8000698:	d800      	bhi.n	800069c <ac_audio_controller+0x128>
 800069a:	e154      	b.n	8000946 <ac_audio_controller+0x3d2>
				{
					if (chirp_low)
 800069c:	4ba4      	ldr	r3, [pc, #656]	@ (8000930 <ac_audio_controller+0x3bc>)
 800069e:	781b      	ldrb	r3, [r3, #0]
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d00d      	beq.n	80006c0 <ac_audio_controller+0x14c>
					{
						hal_timer_set_pwm_output_period(TIMER_PIEZO_PWM, chirp_tone_low.pwm_period, ac_adjust_alarm_audio_level(chirp_tone_low.pwm_dc));
 80006a4:	4ba3      	ldr	r3, [pc, #652]	@ (8000934 <ac_audio_controller+0x3c0>)
 80006a6:	881c      	ldrh	r4, [r3, #0]
 80006a8:	4ba2      	ldr	r3, [pc, #648]	@ (8000934 <ac_audio_controller+0x3c0>)
 80006aa:	885b      	ldrh	r3, [r3, #2]
 80006ac:	0018      	movs	r0, r3
 80006ae:	f000 f94d 	bl	800094c <ac_adjust_alarm_audio_level>
 80006b2:	0003      	movs	r3, r0
 80006b4:	001a      	movs	r2, r3
 80006b6:	0021      	movs	r1, r4
 80006b8:	2000      	movs	r0, #0
 80006ba:	f006 ff43 	bl	8007544 <hal_timer_set_pwm_output_period>
 80006be:	e00c      	b.n	80006da <ac_audio_controller+0x166>
					}
					else
					{
						hal_timer_set_pwm_output_period(TIMER_PIEZO_PWM, chirp_tone.pwm_period, ac_adjust_alarm_audio_level(chirp_tone.pwm_dc));
 80006c0:	4b9d      	ldr	r3, [pc, #628]	@ (8000938 <ac_audio_controller+0x3c4>)
 80006c2:	881c      	ldrh	r4, [r3, #0]
 80006c4:	4b9c      	ldr	r3, [pc, #624]	@ (8000938 <ac_audio_controller+0x3c4>)
 80006c6:	885b      	ldrh	r3, [r3, #2]
 80006c8:	0018      	movs	r0, r3
 80006ca:	f000 f93f 	bl	800094c <ac_adjust_alarm_audio_level>
 80006ce:	0003      	movs	r3, r0
 80006d0:	001a      	movs	r2, r3
 80006d2:	0021      	movs	r1, r4
 80006d4:	2000      	movs	r0, #0
 80006d6:	f006 ff35 	bl	8007544 <hal_timer_set_pwm_output_period>
					}
					pwm_output_enabled = true;
 80006da:	4b93      	ldr	r3, [pc, #588]	@ (8000928 <ac_audio_controller+0x3b4>)
 80006dc:	2201      	movs	r2, #1
 80006de:	701a      	strb	r2, [r3, #0]
					time_since_last_chirp_start = 0;
 80006e0:	4b89      	ldr	r3, [pc, #548]	@ (8000908 <ac_audio_controller+0x394>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	801a      	strh	r2, [r3, #0]
					chirp_active                = true;
 80006e6:	4b91      	ldr	r3, [pc, #580]	@ (800092c <ac_audio_controller+0x3b8>)
 80006e8:	2201      	movs	r2, #1
 80006ea:	701a      	strb	r2, [r3, #0]
 80006ec:	e12b      	b.n	8000946 <ac_audio_controller+0x3d2>
				}
			}
			else
			{
				/* if time to end the chirp */
				if (time_since_last_chirp_start >= CHIRP_TONE_TIME_MSEC)
 80006ee:	4b86      	ldr	r3, [pc, #536]	@ (8000908 <ac_audio_controller+0x394>)
 80006f0:	881b      	ldrh	r3, [r3, #0]
 80006f2:	2b4a      	cmp	r3, #74	@ 0x4a
 80006f4:	d800      	bhi.n	80006f8 <ac_audio_controller+0x184>
 80006f6:	e126      	b.n	8000946 <ac_audio_controller+0x3d2>
				{
					hal_timer_set_pwm_output_period(TIMER_PIEZO_PWM, 0, 0);
 80006f8:	2200      	movs	r2, #0
 80006fa:	2100      	movs	r1, #0
 80006fc:	2000      	movs	r0, #0
 80006fe:	f006 ff21 	bl	8007544 <hal_timer_set_pwm_output_period>
					pwm_output_enabled = false;
 8000702:	4b89      	ldr	r3, [pc, #548]	@ (8000928 <ac_audio_controller+0x3b4>)
 8000704:	2200      	movs	r2, #0
 8000706:	701a      	strb	r2, [r3, #0]
					time_since_last_chirp_stop = 0;
 8000708:	4b80      	ldr	r3, [pc, #512]	@ (800090c <ac_audio_controller+0x398>)
 800070a:	2200      	movs	r2, #0
 800070c:	801a      	strh	r2, [r3, #0]
					chirp_active = false;
 800070e:	4b87      	ldr	r3, [pc, #540]	@ (800092c <ac_audio_controller+0x3b8>)
 8000710:	2200      	movs	r2, #0
 8000712:	701a      	strb	r2, [r3, #0]
					--chirp_counter;
 8000714:	4b7f      	ldr	r3, [pc, #508]	@ (8000914 <ac_audio_controller+0x3a0>)
 8000716:	781b      	ldrb	r3, [r3, #0]
 8000718:	3b01      	subs	r3, #1
 800071a:	b2da      	uxtb	r2, r3
 800071c:	4b7d      	ldr	r3, [pc, #500]	@ (8000914 <ac_audio_controller+0x3a0>)
 800071e:	701a      	strb	r2, [r3, #0]
 8000720:	e111      	b.n	8000946 <ac_audio_controller+0x3d2>
				}
			}
		}
		else if (error_counter > 0)
 8000722:	4b7d      	ldr	r3, [pc, #500]	@ (8000918 <ac_audio_controller+0x3a4>)
 8000724:	781b      	ldrb	r3, [r3, #0]
 8000726:	2b00      	cmp	r3, #0
 8000728:	d03c      	beq.n	80007a4 <ac_audio_controller+0x230>
		{
			if (!chirp_active)
 800072a:	4b80      	ldr	r3, [pc, #512]	@ (800092c <ac_audio_controller+0x3b8>)
 800072c:	781b      	ldrb	r3, [r3, #0]
 800072e:	2201      	movs	r2, #1
 8000730:	4053      	eors	r3, r2
 8000732:	b2db      	uxtb	r3, r3
 8000734:	2b00      	cmp	r3, #0
 8000736:	d01b      	beq.n	8000770 <ac_audio_controller+0x1fc>
			{
				/* if time to start a chirp */
				if (time_since_last_chirp_stop >= CHIRP_QUIET_TIME_MSEC)
 8000738:	4b74      	ldr	r3, [pc, #464]	@ (800090c <ac_audio_controller+0x398>)
 800073a:	881b      	ldrh	r3, [r3, #0]
 800073c:	2b4a      	cmp	r3, #74	@ 0x4a
 800073e:	d800      	bhi.n	8000742 <ac_audio_controller+0x1ce>
 8000740:	e101      	b.n	8000946 <ac_audio_controller+0x3d2>
				{
					hal_timer_set_pwm_output_period(TIMER_PIEZO_PWM, buzz_tone.pwm_period, ac_adjust_alarm_audio_level(buzz_tone.pwm_dc));
 8000742:	4b7e      	ldr	r3, [pc, #504]	@ (800093c <ac_audio_controller+0x3c8>)
 8000744:	881c      	ldrh	r4, [r3, #0]
 8000746:	4b7d      	ldr	r3, [pc, #500]	@ (800093c <ac_audio_controller+0x3c8>)
 8000748:	885b      	ldrh	r3, [r3, #2]
 800074a:	0018      	movs	r0, r3
 800074c:	f000 f8fe 	bl	800094c <ac_adjust_alarm_audio_level>
 8000750:	0003      	movs	r3, r0
 8000752:	001a      	movs	r2, r3
 8000754:	0021      	movs	r1, r4
 8000756:	2000      	movs	r0, #0
 8000758:	f006 fef4 	bl	8007544 <hal_timer_set_pwm_output_period>
					pwm_output_enabled = true;
 800075c:	4b72      	ldr	r3, [pc, #456]	@ (8000928 <ac_audio_controller+0x3b4>)
 800075e:	2201      	movs	r2, #1
 8000760:	701a      	strb	r2, [r3, #0]
					time_since_last_chirp_start = 0;
 8000762:	4b69      	ldr	r3, [pc, #420]	@ (8000908 <ac_audio_controller+0x394>)
 8000764:	2200      	movs	r2, #0
 8000766:	801a      	strh	r2, [r3, #0]
					chirp_active                = true;
 8000768:	4b70      	ldr	r3, [pc, #448]	@ (800092c <ac_audio_controller+0x3b8>)
 800076a:	2201      	movs	r2, #1
 800076c:	701a      	strb	r2, [r3, #0]
 800076e:	e0ea      	b.n	8000946 <ac_audio_controller+0x3d2>
				}
			}
			else
			{
				/* if time to end the chirp */
				if (time_since_last_chirp_start >= ERROR_BUZZ_DURATION_MSEC)
 8000770:	4b65      	ldr	r3, [pc, #404]	@ (8000908 <ac_audio_controller+0x394>)
 8000772:	881b      	ldrh	r3, [r3, #0]
 8000774:	2b63      	cmp	r3, #99	@ 0x63
 8000776:	d800      	bhi.n	800077a <ac_audio_controller+0x206>
 8000778:	e0e5      	b.n	8000946 <ac_audio_controller+0x3d2>
				{
					hal_timer_set_pwm_output_period(TIMER_PIEZO_PWM, 0, 0);
 800077a:	2200      	movs	r2, #0
 800077c:	2100      	movs	r1, #0
 800077e:	2000      	movs	r0, #0
 8000780:	f006 fee0 	bl	8007544 <hal_timer_set_pwm_output_period>
					pwm_output_enabled = false;
 8000784:	4b68      	ldr	r3, [pc, #416]	@ (8000928 <ac_audio_controller+0x3b4>)
 8000786:	2200      	movs	r2, #0
 8000788:	701a      	strb	r2, [r3, #0]
					time_since_last_chirp_stop = 0;
 800078a:	4b60      	ldr	r3, [pc, #384]	@ (800090c <ac_audio_controller+0x398>)
 800078c:	2200      	movs	r2, #0
 800078e:	801a      	strh	r2, [r3, #0]
					chirp_active = false;
 8000790:	4b66      	ldr	r3, [pc, #408]	@ (800092c <ac_audio_controller+0x3b8>)
 8000792:	2200      	movs	r2, #0
 8000794:	701a      	strb	r2, [r3, #0]
					--error_counter;
 8000796:	4b60      	ldr	r3, [pc, #384]	@ (8000918 <ac_audio_controller+0x3a4>)
 8000798:	781b      	ldrb	r3, [r3, #0]
 800079a:	3b01      	subs	r3, #1
 800079c:	b2da      	uxtb	r2, r3
 800079e:	4b5e      	ldr	r3, [pc, #376]	@ (8000918 <ac_audio_controller+0x3a4>)
 80007a0:	701a      	strb	r2, [r3, #0]
 80007a2:	e0d0      	b.n	8000946 <ac_audio_controller+0x3d2>
				}
			}
		}
		else if( notifications.count > 0 && notifications.type != NOTIFY_IDLE )
 80007a4:	4b5d      	ldr	r3, [pc, #372]	@ (800091c <ac_audio_controller+0x3a8>)
 80007a6:	785b      	ldrb	r3, [r3, #1]
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d100      	bne.n	80007ae <ac_audio_controller+0x23a>
 80007ac:	e097      	b.n	80008de <ac_audio_controller+0x36a>
 80007ae:	4b5b      	ldr	r3, [pc, #364]	@ (800091c <ac_audio_controller+0x3a8>)
 80007b0:	781b      	ldrb	r3, [r3, #0]
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d100      	bne.n	80007b8 <ac_audio_controller+0x244>
 80007b6:	e092      	b.n	80008de <ac_audio_controller+0x36a>
		{
			if( pwm_output_enabled == false )
 80007b8:	4b5b      	ldr	r3, [pc, #364]	@ (8000928 <ac_audio_controller+0x3b4>)
 80007ba:	781b      	ldrb	r3, [r3, #0]
 80007bc:	2201      	movs	r2, #1
 80007be:	4053      	eors	r3, r2
 80007c0:	b2db      	uxtb	r3, r3
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d028      	beq.n	8000818 <ac_audio_controller+0x2a4>
			{
				current_step = 0;
 80007c6:	4b56      	ldr	r3, [pc, #344]	@ (8000920 <ac_audio_controller+0x3ac>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	701a      	strb	r2, [r3, #0]
				pwm_output_enabled = true;
 80007cc:	4b56      	ldr	r3, [pc, #344]	@ (8000928 <ac_audio_controller+0x3b4>)
 80007ce:	2201      	movs	r2, #1
 80007d0:	701a      	strb	r2, [r3, #0]
				time_since_last_tone = 0;
 80007d2:	4b4c      	ldr	r3, [pc, #304]	@ (8000904 <ac_audio_controller+0x390>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	801a      	strh	r2, [r3, #0]
				hal_timer_set_pwm_output_period(TIMER_PIEZO_PWM, notifications.tone[current_step].pwm_period, ac_adjust_alarm_audio_level(notifications.tone[current_step].pwm_dc));
 80007d8:	4b50      	ldr	r3, [pc, #320]	@ (800091c <ac_audio_controller+0x3a8>)
 80007da:	685a      	ldr	r2, [r3, #4]
 80007dc:	4b50      	ldr	r3, [pc, #320]	@ (8000920 <ac_audio_controller+0x3ac>)
 80007de:	781b      	ldrb	r3, [r3, #0]
 80007e0:	0019      	movs	r1, r3
 80007e2:	000b      	movs	r3, r1
 80007e4:	005b      	lsls	r3, r3, #1
 80007e6:	185b      	adds	r3, r3, r1
 80007e8:	005b      	lsls	r3, r3, #1
 80007ea:	18d3      	adds	r3, r2, r3
 80007ec:	881c      	ldrh	r4, [r3, #0]
 80007ee:	4b4b      	ldr	r3, [pc, #300]	@ (800091c <ac_audio_controller+0x3a8>)
 80007f0:	685a      	ldr	r2, [r3, #4]
 80007f2:	4b4b      	ldr	r3, [pc, #300]	@ (8000920 <ac_audio_controller+0x3ac>)
 80007f4:	781b      	ldrb	r3, [r3, #0]
 80007f6:	0019      	movs	r1, r3
 80007f8:	000b      	movs	r3, r1
 80007fa:	005b      	lsls	r3, r3, #1
 80007fc:	185b      	adds	r3, r3, r1
 80007fe:	005b      	lsls	r3, r3, #1
 8000800:	18d3      	adds	r3, r2, r3
 8000802:	885b      	ldrh	r3, [r3, #2]
 8000804:	0018      	movs	r0, r3
 8000806:	f000 f8a1 	bl	800094c <ac_adjust_alarm_audio_level>
 800080a:	0003      	movs	r3, r0
 800080c:	001a      	movs	r2, r3
 800080e:	0021      	movs	r1, r4
 8000810:	2000      	movs	r0, #0
 8000812:	f006 fe97 	bl	8007544 <hal_timer_set_pwm_output_period>
			if( pwm_output_enabled == false )
 8000816:	e095      	b.n	8000944 <ac_audio_controller+0x3d0>
			}
			else
			{
				if ((time_since_last_tone >= notifications.tone[current_step].duration))
 8000818:	4b40      	ldr	r3, [pc, #256]	@ (800091c <ac_audio_controller+0x3a8>)
 800081a:	685a      	ldr	r2, [r3, #4]
 800081c:	4b40      	ldr	r3, [pc, #256]	@ (8000920 <ac_audio_controller+0x3ac>)
 800081e:	781b      	ldrb	r3, [r3, #0]
 8000820:	0019      	movs	r1, r3
 8000822:	000b      	movs	r3, r1
 8000824:	005b      	lsls	r3, r3, #1
 8000826:	185b      	adds	r3, r3, r1
 8000828:	005b      	lsls	r3, r3, #1
 800082a:	18d3      	adds	r3, r2, r3
 800082c:	889a      	ldrh	r2, [r3, #4]
 800082e:	4b35      	ldr	r3, [pc, #212]	@ (8000904 <ac_audio_controller+0x390>)
 8000830:	881b      	ldrh	r3, [r3, #0]
 8000832:	429a      	cmp	r2, r3
 8000834:	d900      	bls.n	8000838 <ac_audio_controller+0x2c4>
 8000836:	e085      	b.n	8000944 <ac_audio_controller+0x3d0>
				{
					if( ++current_step >= NUM_MOTOR_TONES )
 8000838:	4b39      	ldr	r3, [pc, #228]	@ (8000920 <ac_audio_controller+0x3ac>)
 800083a:	781b      	ldrb	r3, [r3, #0]
 800083c:	3301      	adds	r3, #1
 800083e:	b2da      	uxtb	r2, r3
 8000840:	4b37      	ldr	r3, [pc, #220]	@ (8000920 <ac_audio_controller+0x3ac>)
 8000842:	701a      	strb	r2, [r3, #0]
 8000844:	4b36      	ldr	r3, [pc, #216]	@ (8000920 <ac_audio_controller+0x3ac>)
 8000846:	781b      	ldrb	r3, [r3, #0]
 8000848:	2b04      	cmp	r3, #4
 800084a:	d91e      	bls.n	800088a <ac_audio_controller+0x316>
					{
						current_step = 0;
 800084c:	4b34      	ldr	r3, [pc, #208]	@ (8000920 <ac_audio_controller+0x3ac>)
 800084e:	2200      	movs	r2, #0
 8000850:	701a      	strb	r2, [r3, #0]
						if( notifications.count > 1 )
 8000852:	4b32      	ldr	r3, [pc, #200]	@ (800091c <ac_audio_controller+0x3a8>)
 8000854:	785b      	ldrb	r3, [r3, #1]
 8000856:	2b01      	cmp	r3, #1
 8000858:	d906      	bls.n	8000868 <ac_audio_controller+0x2f4>
						{
							notifications.count--;
 800085a:	4b30      	ldr	r3, [pc, #192]	@ (800091c <ac_audio_controller+0x3a8>)
 800085c:	785b      	ldrb	r3, [r3, #1]
 800085e:	3b01      	subs	r3, #1
 8000860:	b2da      	uxtb	r2, r3
 8000862:	4b2e      	ldr	r3, [pc, #184]	@ (800091c <ac_audio_controller+0x3a8>)
 8000864:	705a      	strb	r2, [r3, #1]
 8000866:	e010      	b.n	800088a <ac_audio_controller+0x316>
						}
						else
						{
							notifications.count = 0;
 8000868:	4b2c      	ldr	r3, [pc, #176]	@ (800091c <ac_audio_controller+0x3a8>)
 800086a:	2200      	movs	r2, #0
 800086c:	705a      	strb	r2, [r3, #1]
							hal_timer_set_pwm_output_period(TIMER_PIEZO_PWM, 0, 0);
 800086e:	2200      	movs	r2, #0
 8000870:	2100      	movs	r1, #0
 8000872:	2000      	movs	r0, #0
 8000874:	f006 fe66 	bl	8007544 <hal_timer_set_pwm_output_period>
							pwm_output_enabled = false;
 8000878:	4b2b      	ldr	r3, [pc, #172]	@ (8000928 <ac_audio_controller+0x3b4>)
 800087a:	2200      	movs	r2, #0
 800087c:	701a      	strb	r2, [r3, #0]
							notifications.tone = NULL;
 800087e:	4b27      	ldr	r3, [pc, #156]	@ (800091c <ac_audio_controller+0x3a8>)
 8000880:	2200      	movs	r2, #0
 8000882:	605a      	str	r2, [r3, #4]
							notifications.type = NOTIFY_IDLE;
 8000884:	4b25      	ldr	r3, [pc, #148]	@ (800091c <ac_audio_controller+0x3a8>)
 8000886:	2200      	movs	r2, #0
 8000888:	701a      	strb	r2, [r3, #0]
						}
					}
					if( notifications.count )
 800088a:	4b24      	ldr	r3, [pc, #144]	@ (800091c <ac_audio_controller+0x3a8>)
 800088c:	785b      	ldrb	r3, [r3, #1]
 800088e:	2b00      	cmp	r3, #0
 8000890:	d058      	beq.n	8000944 <ac_audio_controller+0x3d0>
					{
						/* set the PWM timer */
						hal_timer_set_pwm_output_period(TIMER_PIEZO_PWM, notifications.tone[current_step].pwm_period, ac_adjust_alarm_audio_level(notifications.tone[current_step].pwm_dc));
 8000892:	4b22      	ldr	r3, [pc, #136]	@ (800091c <ac_audio_controller+0x3a8>)
 8000894:	685a      	ldr	r2, [r3, #4]
 8000896:	4b22      	ldr	r3, [pc, #136]	@ (8000920 <ac_audio_controller+0x3ac>)
 8000898:	781b      	ldrb	r3, [r3, #0]
 800089a:	0019      	movs	r1, r3
 800089c:	000b      	movs	r3, r1
 800089e:	005b      	lsls	r3, r3, #1
 80008a0:	185b      	adds	r3, r3, r1
 80008a2:	005b      	lsls	r3, r3, #1
 80008a4:	18d3      	adds	r3, r2, r3
 80008a6:	881c      	ldrh	r4, [r3, #0]
 80008a8:	4b1c      	ldr	r3, [pc, #112]	@ (800091c <ac_audio_controller+0x3a8>)
 80008aa:	685a      	ldr	r2, [r3, #4]
 80008ac:	4b1c      	ldr	r3, [pc, #112]	@ (8000920 <ac_audio_controller+0x3ac>)
 80008ae:	781b      	ldrb	r3, [r3, #0]
 80008b0:	0019      	movs	r1, r3
 80008b2:	000b      	movs	r3, r1
 80008b4:	005b      	lsls	r3, r3, #1
 80008b6:	185b      	adds	r3, r3, r1
 80008b8:	005b      	lsls	r3, r3, #1
 80008ba:	18d3      	adds	r3, r2, r3
 80008bc:	885b      	ldrh	r3, [r3, #2]
 80008be:	0018      	movs	r0, r3
 80008c0:	f000 f844 	bl	800094c <ac_adjust_alarm_audio_level>
 80008c4:	0003      	movs	r3, r0
 80008c6:	001a      	movs	r2, r3
 80008c8:	0021      	movs	r1, r4
 80008ca:	2000      	movs	r0, #0
 80008cc:	f006 fe3a 	bl	8007544 <hal_timer_set_pwm_output_period>
						pwm_output_enabled = true;
 80008d0:	4b15      	ldr	r3, [pc, #84]	@ (8000928 <ac_audio_controller+0x3b4>)
 80008d2:	2201      	movs	r2, #1
 80008d4:	701a      	strb	r2, [r3, #0]
						/* reset the state timer */
						time_since_last_tone = 0;
 80008d6:	4b0b      	ldr	r3, [pc, #44]	@ (8000904 <ac_audio_controller+0x390>)
 80008d8:	2200      	movs	r2, #0
 80008da:	801a      	strh	r2, [r3, #0]
			if( pwm_output_enabled == false )
 80008dc:	e032      	b.n	8000944 <ac_audio_controller+0x3d0>
				}
			}
		}
		else
		{
			chirp_low = false;
 80008de:	4b14      	ldr	r3, [pc, #80]	@ (8000930 <ac_audio_controller+0x3bc>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	701a      	strb	r2, [r3, #0]
			hal_timer_set_pwm_output_period(TIMER_PIEZO_PWM, 0, 0);
 80008e4:	2200      	movs	r2, #0
 80008e6:	2100      	movs	r1, #0
 80008e8:	2000      	movs	r0, #0
 80008ea:	f006 fe2b 	bl	8007544 <hal_timer_set_pwm_output_period>
			pwm_output_enabled = false;
 80008ee:	4b0e      	ldr	r3, [pc, #56]	@ (8000928 <ac_audio_controller+0x3b4>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	701a      	strb	r2, [r3, #0]
 80008f4:	e027      	b.n	8000946 <ac_audio_controller+0x3d2>
 80008f6:	46c0      	nop			@ (mov r8, r8)
 80008f8:	200000fc 	.word	0x200000fc
 80008fc:	0800a1fc 	.word	0x0800a1fc
 8000900:	2000015c 	.word	0x2000015c
 8000904:	20000168 	.word	0x20000168
 8000908:	2000016a 	.word	0x2000016a
 800090c:	2000016c 	.word	0x2000016c
 8000910:	2000015b 	.word	0x2000015b
 8000914:	20000158 	.word	0x20000158
 8000918:	20000159 	.word	0x20000159
 800091c:	20000160 	.word	0x20000160
 8000920:	2000016e 	.word	0x2000016e
 8000924:	0800a0d0 	.word	0x0800a0d0
 8000928:	2000015d 	.word	0x2000015d
 800092c:	2000016f 	.word	0x2000016f
 8000930:	2000015a 	.word	0x2000015a
 8000934:	20000008 	.word	0x20000008
 8000938:	20000000 	.word	0x20000000
 800093c:	20000010 	.word	0x20000010
		return;
 8000940:	46c0      	nop			@ (mov r8, r8)
 8000942:	e000      	b.n	8000946 <ac_audio_controller+0x3d2>
			if( pwm_output_enabled == false )
 8000944:	46c0      	nop			@ (mov r8, r8)
		}
	}
}
 8000946:	46bd      	mov	sp, r7
 8000948:	b004      	add	sp, #16
 800094a:	bdb0      	pop	{r4, r5, r7, pc}

0800094c <ac_adjust_alarm_audio_level>:

static uint16_t ac_adjust_alarm_audio_level(uint32_t duty_cycle_count)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
	return duty_cycle_count;
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	b29b      	uxth	r3, r3
}
 8000958:	0018      	movs	r0, r3
 800095a:	46bd      	mov	sp, r7
 800095c:	b002      	add	sp, #8
 800095e:	bd80      	pop	{r7, pc}

08000960 <UtilDebounceReadAndDebounceInputs>:
static uint32_t DebouncedReadings[NUM_PORT_2_DEBOUNCE][2];

static uint8_t ThisReading = 0;

void UtilDebounceReadAndDebounceInputs(void)
{
 8000960:	b5b0      	push	{r4, r5, r7, lr}
 8000962:	b082      	sub	sp, #8
 8000964:	af00      	add	r7, sp, #0
	  uint8_t thisPort;
	  	uint16_t i;

	// Now debounce the inputs by anding and oring the members of the readings array.
	for (thisPort = 0;NUM_PORT_2_DEBOUNCE > thisPort; thisPort++)
 8000966:	1dfb      	adds	r3, r7, #7
 8000968:	2200      	movs	r2, #0
 800096a:	701a      	strb	r2, [r3, #0]
 800096c:	e05f      	b.n	8000a2e <UtilDebounceReadAndDebounceInputs+0xce>
	{
	   // Add this reading to the port readings array.
	   PortReadings[thisPort][ThisReading] = hal_gpio_read_port(Ports2Debounce[thisPort]);
 800096e:	1dfb      	adds	r3, r7, #7
 8000970:	781a      	ldrb	r2, [r3, #0]
 8000972:	4b39      	ldr	r3, [pc, #228]	@ (8000a58 <UtilDebounceReadAndDebounceInputs+0xf8>)
 8000974:	0092      	lsls	r2, r2, #2
 8000976:	58d2      	ldr	r2, [r2, r3]
 8000978:	1dfb      	adds	r3, r7, #7
 800097a:	781c      	ldrb	r4, [r3, #0]
 800097c:	4b37      	ldr	r3, [pc, #220]	@ (8000a5c <UtilDebounceReadAndDebounceInputs+0xfc>)
 800097e:	781b      	ldrb	r3, [r3, #0]
 8000980:	001d      	movs	r5, r3
 8000982:	0010      	movs	r0, r2
 8000984:	f006 fd52 	bl	800742c <hal_gpio_read_port>
 8000988:	0001      	movs	r1, r0
 800098a:	4b35      	ldr	r3, [pc, #212]	@ (8000a60 <UtilDebounceReadAndDebounceInputs+0x100>)
 800098c:	0122      	lsls	r2, r4, #4
 800098e:	1952      	adds	r2, r2, r5
 8000990:	0092      	lsls	r2, r2, #2
 8000992:	50d1      	str	r1, [r2, r3]

	   DebouncedReadings[thisPort][0] = 0;
 8000994:	1dfb      	adds	r3, r7, #7
 8000996:	781a      	ldrb	r2, [r3, #0]
 8000998:	4b32      	ldr	r3, [pc, #200]	@ (8000a64 <UtilDebounceReadAndDebounceInputs+0x104>)
 800099a:	00d2      	lsls	r2, r2, #3
 800099c:	2100      	movs	r1, #0
 800099e:	50d1      	str	r1, [r2, r3]
	   DebouncedReadings[thisPort][1] = 0xFFFFFFFF;
 80009a0:	1dfb      	adds	r3, r7, #7
 80009a2:	781b      	ldrb	r3, [r3, #0]
 80009a4:	4a2f      	ldr	r2, [pc, #188]	@ (8000a64 <UtilDebounceReadAndDebounceInputs+0x104>)
 80009a6:	00db      	lsls	r3, r3, #3
 80009a8:	18d3      	adds	r3, r2, r3
 80009aa:	3304      	adds	r3, #4
 80009ac:	2201      	movs	r2, #1
 80009ae:	4252      	negs	r2, r2
 80009b0:	601a      	str	r2, [r3, #0]

	   for (i = 0;DEBOUNCE_DEPTH > i;i++)
 80009b2:	1d3b      	adds	r3, r7, #4
 80009b4:	2200      	movs	r2, #0
 80009b6:	801a      	strh	r2, [r3, #0]
 80009b8:	e030      	b.n	8000a1c <UtilDebounceReadAndDebounceInputs+0xbc>
	   {
		   // debounce this port for input state == zero. If all members of the Port Readings array have a 0 in
		   // a specific bit position, that bit will be 0 in DebouncedLow for that port.
		   DebouncedReadings[thisPort][0] |= PortReadings[thisPort][i];
 80009ba:	1dfb      	adds	r3, r7, #7
 80009bc:	781a      	ldrb	r2, [r3, #0]
 80009be:	4b29      	ldr	r3, [pc, #164]	@ (8000a64 <UtilDebounceReadAndDebounceInputs+0x104>)
 80009c0:	00d2      	lsls	r2, r2, #3
 80009c2:	58d1      	ldr	r1, [r2, r3]
 80009c4:	1dfb      	adds	r3, r7, #7
 80009c6:	7818      	ldrb	r0, [r3, #0]
 80009c8:	1d3b      	adds	r3, r7, #4
 80009ca:	881a      	ldrh	r2, [r3, #0]
 80009cc:	4b24      	ldr	r3, [pc, #144]	@ (8000a60 <UtilDebounceReadAndDebounceInputs+0x100>)
 80009ce:	0100      	lsls	r0, r0, #4
 80009d0:	1882      	adds	r2, r0, r2
 80009d2:	0092      	lsls	r2, r2, #2
 80009d4:	58d3      	ldr	r3, [r2, r3]
 80009d6:	1dfa      	adds	r2, r7, #7
 80009d8:	7812      	ldrb	r2, [r2, #0]
 80009da:	4319      	orrs	r1, r3
 80009dc:	4b21      	ldr	r3, [pc, #132]	@ (8000a64 <UtilDebounceReadAndDebounceInputs+0x104>)
 80009de:	00d2      	lsls	r2, r2, #3
 80009e0:	50d1      	str	r1, [r2, r3]

		   // debounce this port for input pin state == one. If all members of the Port Readings array have a 1 in
		   // a specific bit position, that bit will be 1 in DebouncedHigh for that port.
		   DebouncedReadings[thisPort][1] &= PortReadings[thisPort][i];
 80009e2:	1dfb      	adds	r3, r7, #7
 80009e4:	781b      	ldrb	r3, [r3, #0]
 80009e6:	4a1f      	ldr	r2, [pc, #124]	@ (8000a64 <UtilDebounceReadAndDebounceInputs+0x104>)
 80009e8:	00db      	lsls	r3, r3, #3
 80009ea:	18d3      	adds	r3, r2, r3
 80009ec:	3304      	adds	r3, #4
 80009ee:	681a      	ldr	r2, [r3, #0]
 80009f0:	1dfb      	adds	r3, r7, #7
 80009f2:	7818      	ldrb	r0, [r3, #0]
 80009f4:	1d3b      	adds	r3, r7, #4
 80009f6:	8819      	ldrh	r1, [r3, #0]
 80009f8:	4b19      	ldr	r3, [pc, #100]	@ (8000a60 <UtilDebounceReadAndDebounceInputs+0x100>)
 80009fa:	0100      	lsls	r0, r0, #4
 80009fc:	1841      	adds	r1, r0, r1
 80009fe:	0089      	lsls	r1, r1, #2
 8000a00:	58c9      	ldr	r1, [r1, r3]
 8000a02:	1dfb      	adds	r3, r7, #7
 8000a04:	781b      	ldrb	r3, [r3, #0]
 8000a06:	400a      	ands	r2, r1
 8000a08:	4916      	ldr	r1, [pc, #88]	@ (8000a64 <UtilDebounceReadAndDebounceInputs+0x104>)
 8000a0a:	00db      	lsls	r3, r3, #3
 8000a0c:	18cb      	adds	r3, r1, r3
 8000a0e:	3304      	adds	r3, #4
 8000a10:	601a      	str	r2, [r3, #0]
	   for (i = 0;DEBOUNCE_DEPTH > i;i++)
 8000a12:	1d3b      	adds	r3, r7, #4
 8000a14:	881a      	ldrh	r2, [r3, #0]
 8000a16:	1d3b      	adds	r3, r7, #4
 8000a18:	3201      	adds	r2, #1
 8000a1a:	801a      	strh	r2, [r3, #0]
 8000a1c:	1d3b      	adds	r3, r7, #4
 8000a1e:	881b      	ldrh	r3, [r3, #0]
 8000a20:	2b0f      	cmp	r3, #15
 8000a22:	d9ca      	bls.n	80009ba <UtilDebounceReadAndDebounceInputs+0x5a>
	for (thisPort = 0;NUM_PORT_2_DEBOUNCE > thisPort; thisPort++)
 8000a24:	1dfb      	adds	r3, r7, #7
 8000a26:	781a      	ldrb	r2, [r3, #0]
 8000a28:	1dfb      	adds	r3, r7, #7
 8000a2a:	3201      	adds	r2, #1
 8000a2c:	701a      	strb	r2, [r3, #0]
 8000a2e:	1dfb      	adds	r3, r7, #7
 8000a30:	781b      	ldrb	r3, [r3, #0]
 8000a32:	2b01      	cmp	r3, #1
 8000a34:	d99b      	bls.n	800096e <UtilDebounceReadAndDebounceInputs+0xe>
	   }

	}

	// Increment and wrap the reading number
	++ThisReading;
 8000a36:	4b09      	ldr	r3, [pc, #36]	@ (8000a5c <UtilDebounceReadAndDebounceInputs+0xfc>)
 8000a38:	781b      	ldrb	r3, [r3, #0]
 8000a3a:	3301      	adds	r3, #1
 8000a3c:	b2da      	uxtb	r2, r3
 8000a3e:	4b07      	ldr	r3, [pc, #28]	@ (8000a5c <UtilDebounceReadAndDebounceInputs+0xfc>)
 8000a40:	701a      	strb	r2, [r3, #0]
	ThisReading &= DEBOUNCE_WRAP; // This will cause the value of ThisReading to ngo back to zero when the value is incremented passed
 8000a42:	4b06      	ldr	r3, [pc, #24]	@ (8000a5c <UtilDebounceReadAndDebounceInputs+0xfc>)
 8000a44:	781b      	ldrb	r3, [r3, #0]
 8000a46:	220f      	movs	r2, #15
 8000a48:	4013      	ands	r3, r2
 8000a4a:	b2da      	uxtb	r2, r3
 8000a4c:	4b03      	ldr	r3, [pc, #12]	@ (8000a5c <UtilDebounceReadAndDebounceInputs+0xfc>)
 8000a4e:	701a      	strb	r2, [r3, #0]
									// the value of DEBOUNCE_WRAP.
}
 8000a50:	46c0      	nop			@ (mov r8, r8)
 8000a52:	46bd      	mov	sp, r7
 8000a54:	b002      	add	sp, #8
 8000a56:	bdb0      	pop	{r4, r5, r7, pc}
 8000a58:	0800a100 	.word	0x0800a100
 8000a5c:	20000200 	.word	0x20000200
 8000a60:	20000170 	.word	0x20000170
 8000a64:	200001f0 	.word	0x200001f0

08000a68 <UtilDebounceCheckPinState>:

// This function will return true if the specified pins state matches the indicated state.
bool UtilDebounceCheckPinState(enum pin_id pinId,bool state2BeChecked)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b084      	sub	sp, #16
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	0002      	movs	r2, r0
 8000a70:	1dfb      	adds	r3, r7, #7
 8000a72:	701a      	strb	r2, [r3, #0]
 8000a74:	1dbb      	adds	r3, r7, #6
 8000a76:	1c0a      	adds	r2, r1, #0
 8000a78:	701a      	strb	r2, [r3, #0]
	bool retVal = false;
 8000a7a:	230f      	movs	r3, #15
 8000a7c:	18fb      	adds	r3, r7, r3
 8000a7e:	2200      	movs	r2, #0
 8000a80:	701a      	strb	r2, [r3, #0]
	uint8_t thisPort;

	// Find this pins port in the Ports2Debounce array
	for (thisPort = 0;NUM_PORT_2_DEBOUNCE > thisPort; thisPort++)
 8000a82:	230e      	movs	r3, #14
 8000a84:	18fb      	adds	r3, r7, r3
 8000a86:	2200      	movs	r2, #0
 8000a88:	701a      	strb	r2, [r3, #0]
 8000a8a:	e011      	b.n	8000ab0 <UtilDebounceCheckPinState+0x48>
	{
		if (Ports2Debounce[thisPort] == port_defs[pinId])
 8000a8c:	200e      	movs	r0, #14
 8000a8e:	183b      	adds	r3, r7, r0
 8000a90:	781a      	ldrb	r2, [r3, #0]
 8000a92:	4b2e      	ldr	r3, [pc, #184]	@ (8000b4c <UtilDebounceCheckPinState+0xe4>)
 8000a94:	0092      	lsls	r2, r2, #2
 8000a96:	58d2      	ldr	r2, [r2, r3]
 8000a98:	1dfb      	adds	r3, r7, #7
 8000a9a:	7819      	ldrb	r1, [r3, #0]
 8000a9c:	4b2c      	ldr	r3, [pc, #176]	@ (8000b50 <UtilDebounceCheckPinState+0xe8>)
 8000a9e:	0089      	lsls	r1, r1, #2
 8000aa0:	58cb      	ldr	r3, [r1, r3]
 8000aa2:	429a      	cmp	r2, r3
 8000aa4:	d00a      	beq.n	8000abc <UtilDebounceCheckPinState+0x54>
	for (thisPort = 0;NUM_PORT_2_DEBOUNCE > thisPort; thisPort++)
 8000aa6:	183b      	adds	r3, r7, r0
 8000aa8:	781a      	ldrb	r2, [r3, #0]
 8000aaa:	183b      	adds	r3, r7, r0
 8000aac:	3201      	adds	r2, #1
 8000aae:	701a      	strb	r2, [r3, #0]
 8000ab0:	230e      	movs	r3, #14
 8000ab2:	18fb      	adds	r3, r7, r3
 8000ab4:	781b      	ldrb	r3, [r3, #0]
 8000ab6:	2b01      	cmp	r3, #1
 8000ab8:	d9e8      	bls.n	8000a8c <UtilDebounceCheckPinState+0x24>
 8000aba:	e000      	b.n	8000abe <UtilDebounceCheckPinState+0x56>
		{
			// We found the port. We need to stop now.
			break;
 8000abc:	46c0      	nop			@ (mov r8, r8)
		}
	}

	if (NUM_PORT_2_DEBOUNCE <= thisPort)
 8000abe:	230e      	movs	r3, #14
 8000ac0:	18fb      	adds	r3, r7, r3
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	2b01      	cmp	r3, #1
 8000ac6:	d901      	bls.n	8000acc <UtilDebounceCheckPinState+0x64>
	{
		// We did not find this pins port in the Ports2Debounce array
#if USE_RTT_FOR_DEBUGGING && DEBUG_DEBOUNCE // Note that both of these should be #defined to 1 in periphdefs.h.
		debug_rtt_printf("Pin id %i points to a port that is not in the Ports2Debounce array\r\n",pinId);
#endif
		while(1);
 8000ac8:	46c0      	nop			@ (mov r8, r8)
 8000aca:	e7fd      	b.n	8000ac8 <UtilDebounceCheckPinState+0x60>
	}
	else
	{
		if (true == state2BeChecked)
 8000acc:	1dbb      	adds	r3, r7, #6
 8000ace:	781b      	ldrb	r3, [r3, #0]
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d01f      	beq.n	8000b14 <UtilDebounceCheckPinState+0xac>
		{
			// Check for a one on the specified pins bit.
			if((DebouncedReadings[thisPort][1] & pin_defs[pinId].Pin) == pin_defs[pinId].Pin)
 8000ad4:	230e      	movs	r3, #14
 8000ad6:	18fb      	adds	r3, r7, r3
 8000ad8:	781b      	ldrb	r3, [r3, #0]
 8000ada:	4a1e      	ldr	r2, [pc, #120]	@ (8000b54 <UtilDebounceCheckPinState+0xec>)
 8000adc:	00db      	lsls	r3, r3, #3
 8000ade:	18d3      	adds	r3, r2, r3
 8000ae0:	3304      	adds	r3, #4
 8000ae2:	6819      	ldr	r1, [r3, #0]
 8000ae4:	1dfb      	adds	r3, r7, #7
 8000ae6:	781a      	ldrb	r2, [r3, #0]
 8000ae8:	481b      	ldr	r0, [pc, #108]	@ (8000b58 <UtilDebounceCheckPinState+0xf0>)
 8000aea:	0013      	movs	r3, r2
 8000aec:	009b      	lsls	r3, r3, #2
 8000aee:	189b      	adds	r3, r3, r2
 8000af0:	009b      	lsls	r3, r3, #2
 8000af2:	581b      	ldr	r3, [r3, r0]
 8000af4:	4019      	ands	r1, r3
 8000af6:	1dfb      	adds	r3, r7, #7
 8000af8:	781a      	ldrb	r2, [r3, #0]
 8000afa:	4817      	ldr	r0, [pc, #92]	@ (8000b58 <UtilDebounceCheckPinState+0xf0>)
 8000afc:	0013      	movs	r3, r2
 8000afe:	009b      	lsls	r3, r3, #2
 8000b00:	189b      	adds	r3, r3, r2
 8000b02:	009b      	lsls	r3, r3, #2
 8000b04:	581b      	ldr	r3, [r3, r0]
 8000b06:	4299      	cmp	r1, r3
 8000b08:	d118      	bne.n	8000b3c <UtilDebounceCheckPinState+0xd4>
			{
				// This pins bit was set to one in all members of the PortReading array so return true:
				retVal = true;
 8000b0a:	230f      	movs	r3, #15
 8000b0c:	18fb      	adds	r3, r7, r3
 8000b0e:	2201      	movs	r2, #1
 8000b10:	701a      	strb	r2, [r3, #0]
 8000b12:	e013      	b.n	8000b3c <UtilDebounceCheckPinState+0xd4>
			}
		}
		else
		{
			// Check for a zero on the specified pins bit.
			if((DebouncedReadings[thisPort][0] & pin_defs[pinId].Pin) == 0)
 8000b14:	230e      	movs	r3, #14
 8000b16:	18fb      	adds	r3, r7, r3
 8000b18:	781a      	ldrb	r2, [r3, #0]
 8000b1a:	4b0e      	ldr	r3, [pc, #56]	@ (8000b54 <UtilDebounceCheckPinState+0xec>)
 8000b1c:	00d2      	lsls	r2, r2, #3
 8000b1e:	58d1      	ldr	r1, [r2, r3]
 8000b20:	1dfb      	adds	r3, r7, #7
 8000b22:	781a      	ldrb	r2, [r3, #0]
 8000b24:	480c      	ldr	r0, [pc, #48]	@ (8000b58 <UtilDebounceCheckPinState+0xf0>)
 8000b26:	0013      	movs	r3, r2
 8000b28:	009b      	lsls	r3, r3, #2
 8000b2a:	189b      	adds	r3, r3, r2
 8000b2c:	009b      	lsls	r3, r3, #2
 8000b2e:	581b      	ldr	r3, [r3, r0]
 8000b30:	400b      	ands	r3, r1
 8000b32:	d103      	bne.n	8000b3c <UtilDebounceCheckPinState+0xd4>
			{
				// This pins bit was set to zero in all members of the PortReading array so return true:
				retVal = true;
 8000b34:	230f      	movs	r3, #15
 8000b36:	18fb      	adds	r3, r7, r3
 8000b38:	2201      	movs	r2, #1
 8000b3a:	701a      	strb	r2, [r3, #0]
			}
		}
	}

	return retVal;
 8000b3c:	230f      	movs	r3, #15
 8000b3e:	18fb      	adds	r3, r7, r3
 8000b40:	781b      	ldrb	r3, [r3, #0]
}
 8000b42:	0018      	movs	r0, r3
 8000b44:	46bd      	mov	sp, r7
 8000b46:	b004      	add	sp, #16
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	46c0      	nop			@ (mov r8, r8)
 8000b4c:	0800a100 	.word	0x0800a100
 8000b50:	0800a314 	.word	0x0800a314
 8000b54:	200001f0 	.word	0x200001f0
 8000b58:	0800a1fc 	.word	0x0800a1fc

08000b5c <subsat_u32>:
 *  @details 32-bit subtract and stop at 0
 *  @param[in] uint32_t_t a, uint32_t_t b
 *  @return uint32_t result
 */
uint32_t subsat_u32(uint32_t a, uint32_t b)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b082      	sub	sp, #8
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
 8000b64:	6039      	str	r1, [r7, #0]
    return  a > b ? a - b : 0;
 8000b66:	687a      	ldr	r2, [r7, #4]
 8000b68:	683b      	ldr	r3, [r7, #0]
 8000b6a:	429a      	cmp	r2, r3
 8000b6c:	d903      	bls.n	8000b76 <subsat_u32+0x1a>
 8000b6e:	687a      	ldr	r2, [r7, #4]
 8000b70:	683b      	ldr	r3, [r7, #0]
 8000b72:	1ad3      	subs	r3, r2, r3
 8000b74:	e000      	b.n	8000b78 <subsat_u32+0x1c>
 8000b76:	2300      	movs	r3, #0
}
 8000b78:	0018      	movs	r0, r3
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	b002      	add	sp, #8
 8000b7e:	bd80      	pop	{r7, pc}

08000b80 <addsat_u32>:
 *  @details 32-bit subtract and stop at 0
 *  @param[in] uint32_t_t a, uint32_t_t b
 *  @return uint32_t result
 */
uint32_t addsat_u32(uint32_t a, uint32_t b)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
 8000b88:	6039      	str	r1, [r7, #0]
    if( a > b )
 8000b8a:	687a      	ldr	r2, [r7, #4]
 8000b8c:	683b      	ldr	r3, [r7, #0]
 8000b8e:	429a      	cmp	r2, r3
 8000b90:	d908      	bls.n	8000ba4 <addsat_u32+0x24>
    {
    	if( (a - b > b ) )
 8000b92:	687a      	ldr	r2, [r7, #4]
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	1ad3      	subs	r3, r2, r3
 8000b98:	683a      	ldr	r2, [r7, #0]
 8000b9a:	429a      	cmp	r2, r3
 8000b9c:	d202      	bcs.n	8000ba4 <addsat_u32+0x24>
    	{
    		return UINT32_MAX;
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	425b      	negs	r3, r3
 8000ba2:	e002      	b.n	8000baa <addsat_u32+0x2a>
    	}
    }
    return a + b;
 8000ba4:	687a      	ldr	r2, [r7, #4]
 8000ba6:	683b      	ldr	r3, [r7, #0]
 8000ba8:	18d3      	adds	r3, r2, r3
}
 8000baa:	0018      	movs	r0, r3
 8000bac:	46bd      	mov	sp, r7
 8000bae:	b002      	add	sp, #8
 8000bb0:	bd80      	pop	{r7, pc}

08000bb2 <GetVBoostVboostPwmDutyCyclePctFromFlash>:
#include "VboostHandler.h"

static uint16_t VboostPwmDutyCyclePct = 50;

bool GetVBoostVboostPwmDutyCyclePctFromFlash(void)
{
 8000bb2:	b580      	push	{r7, lr}
 8000bb4:	af00      	add	r7, sp, #0
	// TODO: Write GetVBoostVboostPwmDutyCyclePctFromFlash()
	return false;
 8000bb6:	2300      	movs	r3, #0
}
 8000bb8:	0018      	movs	r0, r3
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
	...

08000bc0 <GetVboostPwmDutyCyclePct>:

uint16_t GetVboostPwmDutyCyclePct(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
	return VboostPwmDutyCyclePct;
 8000bc4:	4b02      	ldr	r3, [pc, #8]	@ (8000bd0 <GetVboostPwmDutyCyclePct+0x10>)
 8000bc6:	881b      	ldrh	r3, [r3, #0]
}
 8000bc8:	0018      	movs	r0, r3
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	46c0      	nop			@ (mov r8, r8)
 8000bd0:	20000016 	.word	0x20000016

08000bd4 <VboostStartPWM>:

void VboostStartPWM(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
	HAL_TIMEx_PWMN_Start(&htim15, TIM_CHANNEL_1);
 8000bd8:	4b03      	ldr	r3, [pc, #12]	@ (8000be8 <VboostStartPWM+0x14>)
 8000bda:	2100      	movs	r1, #0
 8000bdc:	0018      	movs	r0, r3
 8000bde:	f004 fe35 	bl	800584c <HAL_TIMEx_PWMN_Start>
}
 8000be2:	46c0      	nop			@ (mov r8, r8)
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	2000054c 	.word	0x2000054c

08000bec <VboostStopPWM>:

void VboostStopPWM(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
	HAL_TIMEx_PWMN_Stop(&htim15, TIM_CHANNEL_1);
 8000bf0:	4b03      	ldr	r3, [pc, #12]	@ (8000c00 <VboostStopPWM+0x14>)
 8000bf2:	2100      	movs	r1, #0
 8000bf4:	0018      	movs	r0, r3
 8000bf6:	f004 fec7 	bl	8005988 <HAL_TIMEx_PWMN_Stop>
}
 8000bfa:	46c0      	nop			@ (mov r8, r8)
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	2000054c 	.word	0x2000054c

08000c04 <WptControllerInit>:
*
* return values: None
*
* ****************************************************************/
void WptControllerInit(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
	// Get the Wireless Power Transfer percent duty cycle from flash
	// TODO: setup WPT duty cycle storage and retrieval to/from flash.


}
 8000c08:	46c0      	nop			@ (mov r8, r8)
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
	...

08000c10 <fcul_write>:
 *  @param[in] const uint8_t *value
 *  @param[in] size_t value_size
 *  @return size_t
 */
size_t fcul_write(_tFlash_Key key, const uint8_t *value, size_t value_size)
{
 8000c10:	b590      	push	{r4, r7, lr}
 8000c12:	b085      	sub	sp, #20
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	60b9      	str	r1, [r7, #8]
 8000c18:	607a      	str	r2, [r7, #4]
 8000c1a:	240f      	movs	r4, #15
 8000c1c:	193b      	adds	r3, r7, r4
 8000c1e:	1c02      	adds	r2, r0, #0
 8000c20:	701a      	strb	r2, [r3, #0]
	if( fcul_is_ready() )
 8000c22:	f000 f82d 	bl	8000c80 <fcul_is_ready>
 8000c26:	1e03      	subs	r3, r0, #0
 8000c28:	d007      	beq.n	8000c3a <fcul_write+0x2a>
	{
		return flash_controller_write(&fc, (uint8_t*)&key, value, value_size);
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	68ba      	ldr	r2, [r7, #8]
 8000c2e:	1939      	adds	r1, r7, r4
 8000c30:	4804      	ldr	r0, [pc, #16]	@ (8000c44 <fcul_write+0x34>)
 8000c32:	f006 fb57 	bl	80072e4 <flash_controller_write>
 8000c36:	0003      	movs	r3, r0
 8000c38:	e000      	b.n	8000c3c <fcul_write+0x2c>
		//battery_life_event(BATTERY_LIFE_EVENT_FLASH_WRITE);
	}
	return FLASH_WRITE_ERROR;
 8000c3a:	2300      	movs	r3, #0
}
 8000c3c:	0018      	movs	r0, r3
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	b005      	add	sp, #20
 8000c42:	bd90      	pop	{r4, r7, pc}
 8000c44:	20000204 	.word	0x20000204

08000c48 <fcul_read>:
 *  @param[in] uint8_t *value
 *  @param[in] size_t value_size
 *  @return size_t
 */
size_t fcul_read(_tFlash_Key key, uint8_t *value, size_t value_size)
{
 8000c48:	b590      	push	{r4, r7, lr}
 8000c4a:	b085      	sub	sp, #20
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	60b9      	str	r1, [r7, #8]
 8000c50:	607a      	str	r2, [r7, #4]
 8000c52:	240f      	movs	r4, #15
 8000c54:	193b      	adds	r3, r7, r4
 8000c56:	1c02      	adds	r2, r0, #0
 8000c58:	701a      	strb	r2, [r3, #0]
	if( fcul_is_ready() )
 8000c5a:	f000 f811 	bl	8000c80 <fcul_is_ready>
 8000c5e:	1e03      	subs	r3, r0, #0
 8000c60:	d007      	beq.n	8000c72 <fcul_read+0x2a>
	{
		return flash_controller_read(&fc, (uint8_t*)&key, value, value_size);
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	68ba      	ldr	r2, [r7, #8]
 8000c66:	1939      	adds	r1, r7, r4
 8000c68:	4804      	ldr	r0, [pc, #16]	@ (8000c7c <fcul_read+0x34>)
 8000c6a:	f006 fb1f 	bl	80072ac <flash_controller_read>
 8000c6e:	0003      	movs	r3, r0
 8000c70:	e000      	b.n	8000c74 <fcul_read+0x2c>
	}
	return FLASH_KEY_NOT_FOUND;
 8000c72:	2300      	movs	r3, #0
}
 8000c74:	0018      	movs	r0, r3
 8000c76:	46bd      	mov	sp, r7
 8000c78:	b005      	add	sp, #20
 8000c7a:	bd90      	pop	{r4, r7, pc}
 8000c7c:	20000204 	.word	0x20000204

08000c80 <fcul_is_ready>:
 *  @details
 *  @param[in] void
 *  @return bool
 */
bool fcul_is_ready( void )
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
	return (flash_controller_initialized > 0);
 8000c84:	4b03      	ldr	r3, [pc, #12]	@ (8000c94 <fcul_is_ready+0x14>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	1e5a      	subs	r2, r3, #1
 8000c8a:	4193      	sbcs	r3, r2
 8000c8c:	b2db      	uxtb	r3, r3
}
 8000c8e:	0018      	movs	r0, r3
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	20000240 	.word	0x20000240

08000c98 <get_IR4_info>:
static volatile uint32_t block_lp_for_IR_tmr = 0;
static volatile uint32_t IR_wait_for_rtl_active = false;


static void get_IR4_info(IR4_LockStatus_e *ir4_lockState, IR4_DeviceState *ir4_status)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
 8000ca0:	6039      	str	r1, [r7, #0]
    *ir4_lockState = IR4_LOCK_UNLOCK_SELF_LATCH;
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	2211      	movs	r2, #17
 8000ca6:	701a      	strb	r2, [r3, #0]
    *ir4_status = IR4_DeviceOk;
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	2200      	movs	r2, #0
 8000cac:	701a      	strb	r2, [r3, #0]
}
 8000cae:	46c0      	nop			@ (mov r8, r8)
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	b002      	add	sp, #8
 8000cb4:	bd80      	pop	{r7, pc}
	...

08000cb8 <irkey_gl_init>:
  // TODO: add in for erasing all encryption keys except for the factory keys.
  return true;
}

void irkey_gl_init(uint8_t key_uart)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b082      	sub	sp, #8
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	0002      	movs	r2, r0
 8000cc0:	1dfb      	adds	r3, r7, #7
 8000cc2:	701a      	strb	r2, [r3, #0]
	/* Register a callback for the IR key blocking delay */
	uart_defs[key_uart].uart_hal.blocking_delay = irKey_blocking_delay;
 8000cc4:	1dfb      	adds	r3, r7, #7
 8000cc6:	781a      	ldrb	r2, [r3, #0]
 8000cc8:	4928      	ldr	r1, [pc, #160]	@ (8000d6c <irkey_gl_init+0xb4>)
 8000cca:	0013      	movs	r3, r2
 8000ccc:	005b      	lsls	r3, r3, #1
 8000cce:	189b      	adds	r3, r3, r2
 8000cd0:	00db      	lsls	r3, r3, #3
 8000cd2:	18cb      	adds	r3, r1, r3
 8000cd4:	3314      	adds	r3, #20
 8000cd6:	4a26      	ldr	r2, [pc, #152]	@ (8000d70 <irkey_gl_init+0xb8>)
 8000cd8:	601a      	str	r2, [r3, #0]
	k_uart = AppUartDriver_init(uart_defs[key_uart].uart_bus_num, &(uart_defs[key_uart].uart_hal),
			                    rx_buffer, IR_MSG_MAX_LENGTH,
								tx_buffer, IR_MSG_MAX_LENGTH);
#endif

	k_uart = AppUartDriver_init_this_uart(key_uart);
 8000cda:	1dfb      	adds	r3, r7, #7
 8000cdc:	781b      	ldrb	r3, [r3, #0]
 8000cde:	0018      	movs	r0, r3
 8000ce0:	f000 fd28 	bl	8001734 <AppUartDriver_init_this_uart>
 8000ce4:	0002      	movs	r2, r0
 8000ce6:	4b23      	ldr	r3, [pc, #140]	@ (8000d74 <irkey_gl_init+0xbc>)
 8000ce8:	601a      	str	r2, [r3, #0]

    AppUart_disable_tx(  key_uart );
 8000cea:	1dfb      	adds	r3, r7, #7
 8000cec:	781b      	ldrb	r3, [r3, #0]
 8000cee:	0018      	movs	r0, r3
 8000cf0:	f000 fa5c 	bl	80011ac <AppUart_disable_tx>
    AppUart_enable_rx( key_uart );
 8000cf4:	1dfb      	adds	r3, r7, #7
 8000cf6:	781b      	ldrb	r3, [r3, #0]
 8000cf8:	0018      	movs	r0, r3
 8000cfa:	f000 fa71 	bl	80011e0 <AppUart_enable_rx>
	//hal_gpio_set_output(RX_EN, true);

	if( fcul_read(FLASH_KEY_SDC, sdc_ram_copy, SZ_OF_IR3_SDC) == FLASH_KEY_NOT_FOUND)
 8000cfe:	4b1e      	ldr	r3, [pc, #120]	@ (8000d78 <irkey_gl_init+0xc0>)
 8000d00:	2204      	movs	r2, #4
 8000d02:	0019      	movs	r1, r3
 8000d04:	2002      	movs	r0, #2
 8000d06:	f7ff ff9f 	bl	8000c48 <fcul_read>
 8000d0a:	1e03      	subs	r3, r0, #0
 8000d0c:	d105      	bne.n	8000d1a <irkey_gl_init+0x62>
	{
		memset( sdc_ram_copy, 0, SZ_OF_IR3_SDC);
 8000d0e:	4b1a      	ldr	r3, [pc, #104]	@ (8000d78 <irkey_gl_init+0xc0>)
 8000d10:	2204      	movs	r2, #4
 8000d12:	2100      	movs	r1, #0
 8000d14:	0018      	movs	r0, r3
 8000d16:	f009 f9bd 	bl	800a094 <memset>

	/*
	 * TODO: (JLT) Remove (by macro definition) when NFC is working
	 */
#if 1
	if( fcul_read(FLASH_KEY_SERIAL_NUMBER, our_serial_ram_copy, DEVICE_SN_BYTES) == FLASH_KEY_NOT_FOUND)
 8000d1a:	4b18      	ldr	r3, [pc, #96]	@ (8000d7c <irkey_gl_init+0xc4>)
 8000d1c:	2208      	movs	r2, #8
 8000d1e:	0019      	movs	r1, r3
 8000d20:	2001      	movs	r0, #1
 8000d22:	f7ff ff91 	bl	8000c48 <fcul_read>
 8000d26:	1e03      	subs	r3, r0, #0
 8000d28:	d104      	bne.n	8000d34 <irkey_gl_init+0x7c>
	{
#if defined(USE_TEST_SN)
		memcpy( our_serial_ram_copy,testSN, DEVICE_SN_BYTES);
 8000d2a:	4b14      	ldr	r3, [pc, #80]	@ (8000d7c <irkey_gl_init+0xc4>)
 8000d2c:	4a14      	ldr	r2, [pc, #80]	@ (8000d80 <irkey_gl_init+0xc8>)
 8000d2e:	ca03      	ldmia	r2!, {r0, r1}
 8000d30:	c303      	stmia	r3!, {r0, r1}
 8000d32:	e011      	b.n	8000d58 <irkey_gl_init+0xa0>

		/* there is no good way to handle this condition but, at this point, this is a true statement */
		ir_comm_ctx.is_my_sn_blank = true;
#endif
	}
	else if (0 == memcmp(our_serial_ram_copy, blanks.sn, DEVICE_SN_BYTES))
 8000d34:	4913      	ldr	r1, [pc, #76]	@ (8000d84 <irkey_gl_init+0xcc>)
 8000d36:	4b11      	ldr	r3, [pc, #68]	@ (8000d7c <irkey_gl_init+0xc4>)
 8000d38:	2208      	movs	r2, #8
 8000d3a:	0018      	movs	r0, r3
 8000d3c:	f009 f99c 	bl	800a078 <memcmp>
 8000d40:	1e03      	subs	r3, r0, #0
 8000d42:	d104      	bne.n	8000d4e <irkey_gl_init+0x96>
	{

		ir_comm_ctx.is_my_sn_blank = true;
 8000d44:	4b10      	ldr	r3, [pc, #64]	@ (8000d88 <irkey_gl_init+0xd0>)
 8000d46:	222e      	movs	r2, #46	@ 0x2e
 8000d48:	2101      	movs	r1, #1
 8000d4a:	5499      	strb	r1, [r3, r2]
 8000d4c:	e004      	b.n	8000d58 <irkey_gl_init+0xa0>
	}
	else
	{
		memcpy(ir_comm_ctx.my_sn, our_serial_ram_copy, DEVICE_SN_BYTES);
 8000d4e:	4b0e      	ldr	r3, [pc, #56]	@ (8000d88 <irkey_gl_init+0xd0>)
 8000d50:	4a0a      	ldr	r2, [pc, #40]	@ (8000d7c <irkey_gl_init+0xc4>)
 8000d52:	3308      	adds	r3, #8
 8000d54:	ca03      	ldmia	r2!, {r0, r1}
 8000d56:	c303      	stmia	r3!, {r0, r1}
			ir_comm_ctx.my_sn[6],
			ir_comm_ctx.my_sn[7]);
#endif
#endif

	ir_mode_ram_copy = IR4_NON_LIVE_ACCESS_MODE;
 8000d58:	4b0c      	ldr	r3, [pc, #48]	@ (8000d8c <irkey_gl_init+0xd4>)
 8000d5a:	2206      	movs	r2, #6
 8000d5c:	701a      	strb	r2, [r3, #0]
	ir_comm_ctx.ir_mode = IR4_NON_LIVE_ACCESS_MODE;
 8000d5e:	4b0a      	ldr	r3, [pc, #40]	@ (8000d88 <irkey_gl_init+0xd0>)
 8000d60:	2206      	movs	r2, #6
 8000d62:	709a      	strb	r2, [r3, #2]

#if USE_RTT_FOR_DEBUGGING && DEBUG_IRKEY_GLUE
	debug_rtt_printf("%s ir_mode_ram_copy %d\r\n", __FUNCTION__, ir_mode_ram_copy);
#endif
}
 8000d64:	46c0      	nop			@ (mov r8, r8)
 8000d66:	46bd      	mov	sp, r7
 8000d68:	b002      	add	sp, #8
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	200000c0 	.word	0x200000c0
 8000d70:	08001099 	.word	0x08001099
 8000d74:	20000244 	.word	0x20000244
 8000d78:	20000248 	.word	0x20000248
 8000d7c:	2000024c 	.word	0x2000024c
 8000d80:	20000018 	.word	0x20000018
 8000d84:	0800a108 	.word	0x0800a108
 8000d88:	20000024 	.word	0x20000024
 8000d8c:	20000020 	.word	0x20000020

08000d90 <irKey_gl_HandleTimers>:
*  Description:
*  parameters:  uint32_t elapsed_ms
*  return:        void
*****************************************************************/
void irKey_gl_HandleTimers( uint32_t elapsed_ms )
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b082      	sub	sp, #8
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
	// TODO: Rewrite irKey_gl_HandleTimers to use the systick functions.
#if 1
    block_lp_for_IR_tmr = subsat_u32( block_lp_for_IR_tmr, elapsed_ms );
 8000d98:	4b16      	ldr	r3, [pc, #88]	@ (8000df4 <irKey_gl_HandleTimers+0x64>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	687a      	ldr	r2, [r7, #4]
 8000d9e:	0011      	movs	r1, r2
 8000da0:	0018      	movs	r0, r3
 8000da2:	f7ff fedb 	bl	8000b5c <subsat_u32>
 8000da6:	0002      	movs	r2, r0
 8000da8:	4b12      	ldr	r3, [pc, #72]	@ (8000df4 <irKey_gl_HandleTimers+0x64>)
 8000daa:	601a      	str	r2, [r3, #0]
    if( rtl_received_flag == false)
 8000dac:	4b12      	ldr	r3, [pc, #72]	@ (8000df8 <irKey_gl_HandleTimers+0x68>)
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d109      	bne.n	8000dc8 <irKey_gl_HandleTimers+0x38>
    {
    	IR_wait_for_rtl_tmr = subsat_u32( IR_wait_for_rtl_tmr, elapsed_ms );
 8000db4:	4b11      	ldr	r3, [pc, #68]	@ (8000dfc <irKey_gl_HandleTimers+0x6c>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	687a      	ldr	r2, [r7, #4]
 8000dba:	0011      	movs	r1, r2
 8000dbc:	0018      	movs	r0, r3
 8000dbe:	f7ff fecd 	bl	8000b5c <subsat_u32>
 8000dc2:	0002      	movs	r2, r0
 8000dc4:	4b0d      	ldr	r3, [pc, #52]	@ (8000dfc <irKey_gl_HandleTimers+0x6c>)
 8000dc6:	601a      	str	r2, [r3, #0]
    }
    /* if a RTL was previously received */
    if (rtl_received_flag || blank_key_timer_msec > 0 )
 8000dc8:	4b0b      	ldr	r3, [pc, #44]	@ (8000df8 <irKey_gl_HandleTimers+0x68>)
 8000dca:	781b      	ldrb	r3, [r3, #0]
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d103      	bne.n	8000dd8 <irKey_gl_HandleTimers+0x48>
 8000dd0:	4b0b      	ldr	r3, [pc, #44]	@ (8000e00 <irKey_gl_HandleTimers+0x70>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d009      	beq.n	8000dec <irKey_gl_HandleTimers+0x5c>
    {
        blank_key_timer_msec = addsat_u32( blank_key_timer_msec, elapsed_ms );
 8000dd8:	4b09      	ldr	r3, [pc, #36]	@ (8000e00 <irKey_gl_HandleTimers+0x70>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	687a      	ldr	r2, [r7, #4]
 8000dde:	0011      	movs	r1, r2
 8000de0:	0018      	movs	r0, r3
 8000de2:	f7ff fecd 	bl	8000b80 <addsat_u32>
 8000de6:	0002      	movs	r2, r0
 8000de8:	4b05      	ldr	r3, [pc, #20]	@ (8000e00 <irKey_gl_HandleTimers+0x70>)
 8000dea:	601a      	str	r2, [r3, #0]
    }
#else
	subsat_u32(active_timer, elapsed_ms);
#endif
}
 8000dec:	46c0      	nop			@ (mov r8, r8)
 8000dee:	46bd      	mov	sp, r7
 8000df0:	b002      	add	sp, #8
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	20000264 	.word	0x20000264
 8000df8:	2000025c 	.word	0x2000025c
 8000dfc:	20000260 	.word	0x20000260
 8000e00:	20000254 	.word	0x20000254

08000e04 <irkey_gl_getRxbyte>:




uint32_t irkey_gl_getRxbyte( uint8_t *p_ReceivedByte )
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b082      	sub	sp, #8
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
	return AppUartDriver_byte_available(IR_INTERFACE_UART_INDEX, p_ReceivedByte);
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	0019      	movs	r1, r3
 8000e10:	2000      	movs	r0, #0
 8000e12:	f000 fd09 	bl	8001828 <AppUartDriver_byte_available>
 8000e16:	0003      	movs	r3, r0
}
 8000e18:	0018      	movs	r0, r3
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	b002      	add	sp, #8
 8000e1e:	bd80      	pop	{r7, pc}

08000e20 <irkey_gl_addTxByte>:

void irkey_gl_addTxByte( const uint8_t *p_TransmitByte )
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b082      	sub	sp, #8
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
#if USE_RTT_FOR_DEBUGGING && DEBUG_IRKEY_GLUE
	debug_rtt_printf("%s 0x%02x\r\n", __FUNCTION__, *p_TransmitByte);
#endif
	AppUartDriver_tx_add_byte(IR_INTERFACE_UART_INDEX, p_TransmitByte);
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	0019      	movs	r1, r3
 8000e2c:	2000      	movs	r0, #0
 8000e2e:	f000 fd19 	bl	8001864 <AppUartDriver_tx_add_byte>
}
 8000e32:	46c0      	nop			@ (mov r8, r8)
 8000e34:	46bd      	mov	sp, r7
 8000e36:	b002      	add	sp, #8
 8000e38:	bd80      	pop	{r7, pc}

08000e3a <irkey_gl_trigger_transmit>:

void irkey_gl_trigger_transmit( void )
{
 8000e3a:	b580      	push	{r7, lr}
 8000e3c:	af00      	add	r7, sp, #0
	AppUartDriver_start_transmit_if_stopped(IR_INTERFACE_UART_INDEX);
 8000e3e:	2000      	movs	r0, #0
 8000e40:	f000 fd2c 	bl	800189c <AppUartDriver_start_transmit_if_stopped>
}
 8000e44:	46c0      	nop			@ (mov r8, r8)
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
	...

08000e4c <irkey_gl_key_handler>:
    codeReaderData[7] = 0;	/* temperature */
    codeReaderData[8] = 0;	/* cal data    */
}

void  irkey_gl_key_handler(void)
{
 8000e4c:	b590      	push	{r4, r7, lr}
 8000e4e:	b08b      	sub	sp, #44	@ 0x2c
 8000e50:	af00      	add	r7, sp, #0
	uint8_t  received_byte              = 0;
 8000e52:	211a      	movs	r1, #26
 8000e54:	187b      	adds	r3, r7, r1
 8000e56:	2200      	movs	r2, #0
 8000e58:	701a      	strb	r2, [r3, #0]
	uint8_t  byte_available_flag        = 0;
 8000e5a:	2427      	movs	r4, #39	@ 0x27
 8000e5c:	193b      	adds	r3, r7, r4
 8000e5e:	2200      	movs	r2, #0
 8000e60:	701a      	strb	r2, [r3, #0]
	uint32_t tx_msg_length              = 0;
 8000e62:	2300      	movs	r3, #0
 8000e64:	623b      	str	r3, [r7, #32]
	uint8_t* ir_msg_out_ptr             = ir_comm_ctx._buffers.tx_buffer;
 8000e66:	4b50      	ldr	r3, [pc, #320]	@ (8000fa8 <irkey_gl_key_handler+0x15c>)
 8000e68:	61fb      	str	r3, [r7, #28]
	uint8_t* ir_msg_in_ptr              = 0;
	uint8_t  waiting_for_wipe_key_msec  = 0;
	uint8_t  legacy_code_reader_data[9] = { 0 };
	uint16_t fw_version_to_send;
#endif
	uint8_t  byte_out_cntr = 0;
 8000e6a:	2326      	movs	r3, #38	@ 0x26
 8000e6c:	18fb      	adds	r3, r7, r3
 8000e6e:	2200      	movs	r2, #0
 8000e70:	701a      	strb	r2, [r3, #0]
	invue_ir_mode_enum ir_mode_temp = 		(invue_ir_mode_enum)ir_mode_ram_copy;
 8000e72:	231b      	movs	r3, #27
 8000e74:	18fb      	adds	r3, r7, r3
 8000e76:	4a4d      	ldr	r2, [pc, #308]	@ (8000fac <irkey_gl_key_handler+0x160>)
 8000e78:	7812      	ldrb	r2, [r2, #0]
 8000e7a:	701a      	strb	r2, [r3, #0]
    _ir_comms_output_s output;

	/* if a byte is available */
	if (0 == irkey_gl_getRxbyte(&received_byte))
 8000e7c:	187b      	adds	r3, r7, r1
 8000e7e:	0018      	movs	r0, r3
 8000e80:	f7ff ffc0 	bl	8000e04 <irkey_gl_getRxbyte>
 8000e84:	1e03      	subs	r3, r0, #0
 8000e86:	d105      	bne.n	8000e94 <irkey_gl_key_handler+0x48>
	{
#if USE_RTT_FOR_DEBUGGING && DEBUG_IRKEY_GLUE
	debug_rtt_printf("%s 0x%02x\r\n", __FUNCTION__, received_byte);
#endif
		byte_available_flag      = 1;
 8000e88:	193b      	adds	r3, r7, r4
 8000e8a:	2201      	movs	r2, #1
 8000e8c:	701a      	strb	r2, [r3, #0]
		msec_since_last_rx       = 0;
 8000e8e:	4b48      	ldr	r3, [pc, #288]	@ (8000fb0 <irkey_gl_key_handler+0x164>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	601a      	str	r2, [r3, #0]
//		block_lp_for_IR_tmr = BLOCK_LP_FOR_IR_MAX_TIME_MS;						// Reset block_lp_for_IR_tmr each time a byte has been received & processed
	}
	/* call the byte handler; if the byte handler indicates a complete message is available */
	if (irComms_get_ir_key_packet(&ir_comm_ctx, msec_since_last_rx, byte_available_flag, received_byte))
 8000e94:	4b46      	ldr	r3, [pc, #280]	@ (8000fb0 <irkey_gl_key_handler+0x164>)
 8000e96:	6819      	ldr	r1, [r3, #0]
 8000e98:	2327      	movs	r3, #39	@ 0x27
 8000e9a:	18fb      	adds	r3, r7, r3
 8000e9c:	781b      	ldrb	r3, [r3, #0]
 8000e9e:	1e5a      	subs	r2, r3, #1
 8000ea0:	4193      	sbcs	r3, r2
 8000ea2:	b2da      	uxtb	r2, r3
 8000ea4:	231a      	movs	r3, #26
 8000ea6:	18fb      	adds	r3, r7, r3
 8000ea8:	781b      	ldrb	r3, [r3, #0]
 8000eaa:	4842      	ldr	r0, [pc, #264]	@ (8000fb4 <irkey_gl_key_handler+0x168>)
 8000eac:	f007 fa64 	bl	8008378 <irComms_get_ir_key_packet>
 8000eb0:	1e03      	subs	r3, r0, #0
 8000eb2:	d063      	beq.n	8000f7c <irkey_gl_key_handler+0x130>
	{
		// handle the IR key message
		tx_msg_length = irComms_handle_ir_key_message(&ir_comm_ctx, &output );
 8000eb4:	1d3a      	adds	r2, r7, #4
 8000eb6:	4b3f      	ldr	r3, [pc, #252]	@ (8000fb4 <irkey_gl_key_handler+0x168>)
 8000eb8:	0011      	movs	r1, r2
 8000eba:	0018      	movs	r0, r3
 8000ebc:	f007 fb74 	bl	80085a8 <irComms_handle_ir_key_message>
 8000ec0:	0003      	movs	r3, r0
 8000ec2:	623b      	str	r3, [r7, #32]

		if (output.rtl_received)
 8000ec4:	1d3b      	adds	r3, r7, #4
 8000ec6:	79db      	ldrb	r3, [r3, #7]
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d005      	beq.n	8000ed8 <irkey_gl_key_handler+0x8c>
		{
			rtl_received_flag = true;
 8000ecc:	4b3a      	ldr	r3, [pc, #232]	@ (8000fb8 <irkey_gl_key_handler+0x16c>)
 8000ece:	2201      	movs	r2, #1
 8000ed0:	701a      	strb	r2, [r3, #0]
            IR_wait_for_rtl_active = false;
 8000ed2:	4b3a      	ldr	r3, [pc, #232]	@ (8000fbc <irkey_gl_key_handler+0x170>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	601a      	str	r2, [r3, #0]
        }

		if (output.data_changed.sdc)
 8000ed8:	1d3b      	adds	r3, r7, #4
 8000eda:	781b      	ldrb	r3, [r3, #0]
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d011      	beq.n	8000f04 <irkey_gl_key_handler+0xb8>
		{
			if (!irKey_have_valid_SDC() || ir_comm_ctx.R_n_D_Key_supported)
 8000ee0:	f000 f878 	bl	8000fd4 <irKey_have_valid_SDC>
 8000ee4:	0003      	movs	r3, r0
 8000ee6:	001a      	movs	r2, r3
 8000ee8:	2301      	movs	r3, #1
 8000eea:	4053      	eors	r3, r2
 8000eec:	b2db      	uxtb	r3, r3
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d104      	bne.n	8000efc <irkey_gl_key_handler+0xb0>
 8000ef2:	4b30      	ldr	r3, [pc, #192]	@ (8000fb4 <irkey_gl_key_handler+0x168>)
 8000ef4:	222c      	movs	r2, #44	@ 0x2c
 8000ef6:	5c9b      	ldrb	r3, [r3, r2]
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d003      	beq.n	8000f04 <irkey_gl_key_handler+0xb8>
					ir_comm_ctx.sdc[0],
					ir_comm_ctx.sdc[1],
					ir_comm_ctx.sdc[2],
					ir_comm_ctx.sdc[3]);
#endif
				irKey_diff_sdc_and_update(ir_comm_ctx.sdc);			// Check if the SDC has changed
 8000efc:	4b30      	ldr	r3, [pc, #192]	@ (8000fc0 <irkey_gl_key_handler+0x174>)
 8000efe:	0018      	movs	r0, r3
 8000f00:	f000 f886 	bl	8001010 <irKey_diff_sdc_and_update>
			}
		}
#endif

		/* reset the blank key timer upon every received message */
		blank_key_timer_msec = 0;
 8000f04:	4b2f      	ldr	r3, [pc, #188]	@ (8000fc4 <irkey_gl_key_handler+0x178>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	601a      	str	r2, [r3, #0]

		// if there is data to transmit
		if (tx_msg_length > 0)
 8000f0a:	6a3b      	ldr	r3, [r7, #32]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d035      	beq.n	8000f7c <irkey_gl_key_handler+0x130>
		{
			AppUart_disable_rx( IR_INTERFACE_UART_INDEX );
 8000f10:	2000      	movs	r0, #0
 8000f12:	f000 f9b3 	bl	800127c <AppUart_disable_rx>
            /* From F1885: IR3 Test Key in IR1 mode wasn't getting some responses and would send retries. I found that the TX seemed to be turning on too fast for the IR Key on hand. Adding 1-bit time
             * of delay helped but didn't resolve the issue. 500uS seemed to resolve the issue but is loooong. 250uS seems stable too but has a few double chirps in 20 key presses.
             * I think I vaguely remember Mike W saying something about not responding too fast or it will cause IR3 Key to drop data.
             */
            hal_timer_blocking_delay_variable_usec(300);
 8000f16:	2396      	movs	r3, #150	@ 0x96
 8000f18:	005b      	lsls	r3, r3, #1
 8000f1a:	0018      	movs	r0, r3
 8000f1c:	f006 ff1c 	bl	8007d58 <hal_timer_blocking_delay_variable_usec>

			AppUart_enable_tx( IR_INTERFACE_UART_INDEX );
 8000f20:	2000      	movs	r0, #0
 8000f22:	f000 f8eb 	bl	80010fc <AppUart_enable_tx>

			AppUart_disable_rx( IR_INTERFACE_UART_INDEX );
 8000f26:	2000      	movs	r0, #0
 8000f28:	f000 f9a8 	bl	800127c <AppUart_disable_rx>

            /* Make sure we have a good valid front porch for start bit on response. Some keys are picky. We should provide at least 1 full frame = 1.52mS (10bits).
             * I usually use 2ms here but I dropped it to 1526us for 1 frame time */
			hal_timer_blocking_delay_variable_usec(IR_FRAME_TIME_USEC);
 8000f2c:	4b26      	ldr	r3, [pc, #152]	@ (8000fc8 <irkey_gl_key_handler+0x17c>)
 8000f2e:	0018      	movs	r0, r3
 8000f30:	f006 ff12 	bl	8007d58 <hal_timer_blocking_delay_variable_usec>

			/* transmit the packet */
			for (byte_out_cntr = 0; byte_out_cntr < tx_msg_length; ++byte_out_cntr)
 8000f34:	2326      	movs	r3, #38	@ 0x26
 8000f36:	18fb      	adds	r3, r7, r3
 8000f38:	2200      	movs	r2, #0
 8000f3a:	701a      	strb	r2, [r3, #0]
 8000f3c:	e00c      	b.n	8000f58 <irkey_gl_key_handler+0x10c>
			{
				irkey_gl_addTxByte(&ir_msg_out_ptr[byte_out_cntr]);
 8000f3e:	2426      	movs	r4, #38	@ 0x26
 8000f40:	193b      	adds	r3, r7, r4
 8000f42:	781b      	ldrb	r3, [r3, #0]
 8000f44:	69fa      	ldr	r2, [r7, #28]
 8000f46:	18d3      	adds	r3, r2, r3
 8000f48:	0018      	movs	r0, r3
 8000f4a:	f7ff ff69 	bl	8000e20 <irkey_gl_addTxByte>
			for (byte_out_cntr = 0; byte_out_cntr < tx_msg_length; ++byte_out_cntr)
 8000f4e:	193b      	adds	r3, r7, r4
 8000f50:	193a      	adds	r2, r7, r4
 8000f52:	7812      	ldrb	r2, [r2, #0]
 8000f54:	3201      	adds	r2, #1
 8000f56:	701a      	strb	r2, [r3, #0]
 8000f58:	2326      	movs	r3, #38	@ 0x26
 8000f5a:	18fb      	adds	r3, r7, r3
 8000f5c:	781b      	ldrb	r3, [r3, #0]
 8000f5e:	6a3a      	ldr	r2, [r7, #32]
 8000f60:	429a      	cmp	r2, r3
 8000f62:	d8ec      	bhi.n	8000f3e <irkey_gl_key_handler+0xf2>
			}
			block_lp_for_IR_tmr = BLOCK_LP_FOR_IR_MAX_TIME_MS;
 8000f64:	4b19      	ldr	r3, [pc, #100]	@ (8000fcc <irkey_gl_key_handler+0x180>)
 8000f66:	22fa      	movs	r2, #250	@ 0xfa
 8000f68:	0052      	lsls	r2, r2, #1
 8000f6a:	601a      	str	r2, [r3, #0]
			irkey_gl_trigger_transmit();
 8000f6c:	f7ff ff65 	bl	8000e3a <irkey_gl_trigger_transmit>

			AppUart_disable_tx( IR_INTERFACE_UART_INDEX );
 8000f70:	2000      	movs	r0, #0
 8000f72:	f000 f91b 	bl	80011ac <AppUart_disable_tx>


			AppUart_enable_rx( IR_INTERFACE_UART_INDEX );
 8000f76:	2000      	movs	r0, #0
 8000f78:	f000 f932 	bl	80011e0 <AppUart_enable_rx>
		}
	}
    /* if the blank key timeout has occurred */
    if (blank_key_timer_msec >= IR_RX_TIMEOUT_MSEC)
 8000f7c:	4b11      	ldr	r3, [pc, #68]	@ (8000fc4 <irkey_gl_key_handler+0x178>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	2b63      	cmp	r3, #99	@ 0x63
 8000f82:	d90d      	bls.n	8000fa0 <irkey_gl_key_handler+0x154>
    {
        // clear the RTL received flag
        rtl_received_flag = false;
 8000f84:	4b0c      	ldr	r3, [pc, #48]	@ (8000fb8 <irkey_gl_key_handler+0x16c>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	701a      	strb	r2, [r3, #0]

        /* clear the blank key timer */
        blank_key_timer_msec = 0;
 8000f8a:	4b0e      	ldr	r3, [pc, #56]	@ (8000fc4 <irkey_gl_key_handler+0x178>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	601a      	str	r2, [r3, #0]

        /* indicate a blank key is in use, passing in a pointer to the actual SDC in RAM */
        irComms_blank_key_used(ir_mode_temp, sdc_ram_copy);
 8000f90:	4a0f      	ldr	r2, [pc, #60]	@ (8000fd0 <irkey_gl_key_handler+0x184>)
 8000f92:	231b      	movs	r3, #27
 8000f94:	18fb      	adds	r3, r7, r3
 8000f96:	781b      	ldrb	r3, [r3, #0]
 8000f98:	0011      	movs	r1, r2
 8000f9a:	0018      	movs	r0, r3
 8000f9c:	f008 ff1c 	bl	8009dd8 <irComms_blank_key_used>
    }
}
 8000fa0:	46c0      	nop			@ (mov r8, r8)
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	b00b      	add	sp, #44	@ 0x2c
 8000fa6:	bd90      	pop	{r4, r7, pc}
 8000fa8:	20000074 	.word	0x20000074
 8000fac:	20000020 	.word	0x20000020
 8000fb0:	20000258 	.word	0x20000258
 8000fb4:	20000024 	.word	0x20000024
 8000fb8:	2000025c 	.word	0x2000025c
 8000fbc:	20000268 	.word	0x20000268
 8000fc0:	20000028 	.word	0x20000028
 8000fc4:	20000254 	.word	0x20000254
 8000fc8:	0000068e 	.word	0x0000068e
 8000fcc:	20000264 	.word	0x20000264
 8000fd0:	20000248 	.word	0x20000248

08000fd4 <irKey_have_valid_SDC>:
 *  @details
 *  @param[in] void
 *  @return bool: true if we have a SDC
 */
bool irKey_have_valid_SDC( void )
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
	return ( !(sdc_ram_copy[0] == 0 && sdc_ram_copy[1] == 0 && sdc_ram_copy[2] == 0 && sdc_ram_copy[3] == 0 ) );
 8000fd8:	4b0c      	ldr	r3, [pc, #48]	@ (800100c <irKey_have_valid_SDC+0x38>)
 8000fda:	781b      	ldrb	r3, [r3, #0]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d10b      	bne.n	8000ff8 <irKey_have_valid_SDC+0x24>
 8000fe0:	4b0a      	ldr	r3, [pc, #40]	@ (800100c <irKey_have_valid_SDC+0x38>)
 8000fe2:	785b      	ldrb	r3, [r3, #1]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d107      	bne.n	8000ff8 <irKey_have_valid_SDC+0x24>
 8000fe8:	4b08      	ldr	r3, [pc, #32]	@ (800100c <irKey_have_valid_SDC+0x38>)
 8000fea:	789b      	ldrb	r3, [r3, #2]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d103      	bne.n	8000ff8 <irKey_have_valid_SDC+0x24>
 8000ff0:	4b06      	ldr	r3, [pc, #24]	@ (800100c <irKey_have_valid_SDC+0x38>)
 8000ff2:	78db      	ldrb	r3, [r3, #3]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d001      	beq.n	8000ffc <irKey_have_valid_SDC+0x28>
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	e000      	b.n	8000ffe <irKey_have_valid_SDC+0x2a>
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	1c1a      	adds	r2, r3, #0
 8001000:	2301      	movs	r3, #1
 8001002:	4013      	ands	r3, r2
 8001004:	b2db      	uxtb	r3, r3
}
 8001006:	0018      	movs	r0, r3
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	20000248 	.word	0x20000248

08001010 <irKey_diff_sdc_and_update>:
 *  @details
 *  @param[in] uint8_t *_sdc
 *  @return void
 */
static void irKey_diff_sdc_and_update( uint8_t *_sdc)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
	if( memcmp( _sdc, sdc_ram_copy/*ram copy*/,SZ_OF_IR3_SDC ) != 0)
 8001018:	491d      	ldr	r1, [pc, #116]	@ (8001090 <irKey_diff_sdc_and_update+0x80>)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	2204      	movs	r2, #4
 800101e:	0018      	movs	r0, r3
 8001020:	f009 f82a 	bl	800a078 <memcmp>
 8001024:	1e03      	subs	r3, r0, #0
 8001026:	d02f      	beq.n	8001088 <irKey_diff_sdc_and_update+0x78>
	{
		if( ( irKey_have_valid_SDC() == false ) &&													// If current SDC is all 0's
 8001028:	f7ff ffd4 	bl	8000fd4 <irKey_have_valid_SDC>
 800102c:	0003      	movs	r3, r0
 800102e:	001a      	movs	r2, r3
 8001030:	2301      	movs	r3, #1
 8001032:	4053      	eors	r3, r2
 8001034:	b2db      	uxtb	r3, r3
 8001036:	2b00      	cmp	r3, #0
 8001038:	d015      	beq.n	8001066 <irKey_diff_sdc_and_update+0x56>
			( _sdc[0] != 0 ) && ( _sdc[1] != 0 ) && ( _sdc[2] != 0 ) && ( _sdc[3] == 0 )	)		// if received SDC is not all 0's
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	781b      	ldrb	r3, [r3, #0]
		if( ( irKey_have_valid_SDC() == false ) &&													// If current SDC is all 0's
 800103e:	2b00      	cmp	r3, #0
 8001040:	d011      	beq.n	8001066 <irKey_diff_sdc_and_update+0x56>
			( _sdc[0] != 0 ) && ( _sdc[1] != 0 ) && ( _sdc[2] != 0 ) && ( _sdc[3] == 0 )	)		// if received SDC is not all 0's
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	3301      	adds	r3, #1
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	2b00      	cmp	r3, #0
 800104a:	d00c      	beq.n	8001066 <irKey_diff_sdc_and_update+0x56>
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	3302      	adds	r3, #2
 8001050:	781b      	ldrb	r3, [r3, #0]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d007      	beq.n	8001066 <irKey_diff_sdc_and_update+0x56>
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	3303      	adds	r3, #3
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d102      	bne.n	8001066 <irKey_diff_sdc_and_update+0x56>
		{
			first_valid_authorized_key_used = true;
 8001060:	4b0c      	ldr	r3, [pc, #48]	@ (8001094 <irKey_diff_sdc_and_update+0x84>)
 8001062:	2201      	movs	r2, #1
 8001064:	701a      	strb	r2, [r3, #0]
		}
		if( fcul_write(FLASH_KEY_SDC, (const uint8_t*)_sdc, SZ_OF_IR3_SDC) == SZ_OF_IR3_SDC)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	2204      	movs	r2, #4
 800106a:	0019      	movs	r1, r3
 800106c:	2002      	movs	r0, #2
 800106e:	f7ff fdcf 	bl	8000c10 <fcul_write>
 8001072:	0003      	movs	r3, r0
 8001074:	2b04      	cmp	r3, #4
 8001076:	d107      	bne.n	8001088 <irKey_diff_sdc_and_update+0x78>
		{
			memcpy( sdc_ram_copy, _sdc, SZ_OF_IR3_SDC);
 8001078:	4a05      	ldr	r2, [pc, #20]	@ (8001090 <irKey_diff_sdc_and_update+0x80>)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	0010      	movs	r0, r2
 800107e:	0019      	movs	r1, r3
 8001080:	2304      	movs	r3, #4
 8001082:	001a      	movs	r2, r3
 8001084:	f009 f80e 	bl	800a0a4 <memcpy>
		}
	}
}
 8001088:	46c0      	nop			@ (mov r8, r8)
 800108a:	46bd      	mov	sp, r7
 800108c:	b002      	add	sp, #8
 800108e:	bd80      	pop	{r7, pc}
 8001090:	20000248 	.word	0x20000248
 8001094:	2000025d 	.word	0x2000025d

08001098 <irKey_blocking_delay>:
 *  @details 	Blocking delay after transmission complete. invue_ir1_ir2.h comments explain why this is needed
 *  @param[in] void
 *  @return void
 */
static void irKey_blocking_delay(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
	AppUart_disable_tx(IR_INTERFACE_UART_INDEX);
 800109c:	2000      	movs	r0, #0
 800109e:	f000 f885 	bl	80011ac <AppUart_disable_tx>
	hal_timer_blocking_delay_for_152us();
 80010a2:	f006 fe2b 	bl	8007cfc <hal_timer_blocking_delay_for_152us>
}
 80010a6:	46c0      	nop			@ (mov r8, r8)
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}

080010ac <AppUartA_callback_init>:



void AppUartA_callback_init(uint8_t (*tx_ready)     (uint8_t* byte_to_tx),
			                 void    (*byte_received)(uint8_t  byte_in))
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
 80010b4:	6039      	str	r1, [r7, #0]
	usart1_transmit_ready_callback = tx_ready;
 80010b6:	4b05      	ldr	r3, [pc, #20]	@ (80010cc <AppUartA_callback_init+0x20>)
 80010b8:	687a      	ldr	r2, [r7, #4]
 80010ba:	601a      	str	r2, [r3, #0]
	usart1_byte_received_callback  = byte_received;
 80010bc:	4b04      	ldr	r3, [pc, #16]	@ (80010d0 <AppUartA_callback_init+0x24>)
 80010be:	683a      	ldr	r2, [r7, #0]
 80010c0:	601a      	str	r2, [r3, #0]
}
 80010c2:	46c0      	nop			@ (mov r8, r8)
 80010c4:	46bd      	mov	sp, r7
 80010c6:	b002      	add	sp, #8
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	46c0      	nop			@ (mov r8, r8)
 80010cc:	2000026c 	.word	0x2000026c
 80010d0:	20000270 	.word	0x20000270

080010d4 <AppUartC_callback_init>:
#endif

#ifdef USING_UART3
void AppUartC_callback_init(uint8_t (*tx_ready)     (uint8_t* byte_to_tx),
			                 void    (*byte_received)(uint8_t  byte_in))
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
 80010dc:	6039      	str	r1, [r7, #0]
	usart3_transmit_ready_callback = tx_ready;
 80010de:	4b05      	ldr	r3, [pc, #20]	@ (80010f4 <AppUartC_callback_init+0x20>)
 80010e0:	687a      	ldr	r2, [r7, #4]
 80010e2:	601a      	str	r2, [r3, #0]
	usart3_byte_received_callback  = byte_received;
 80010e4:	4b04      	ldr	r3, [pc, #16]	@ (80010f8 <AppUartC_callback_init+0x24>)
 80010e6:	683a      	ldr	r2, [r7, #0]
 80010e8:	601a      	str	r2, [r3, #0]
}
 80010ea:	46c0      	nop			@ (mov r8, r8)
 80010ec:	46bd      	mov	sp, r7
 80010ee:	b002      	add	sp, #8
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	46c0      	nop			@ (mov r8, r8)
 80010f4:	20000274 	.word	0x20000274
 80010f8:	20000278 	.word	0x20000278

080010fc <AppUart_enable_tx>:
	return uart_defs[uartIndx];
}

// TODO: check to see if using the swap bit while in ONE_WIRE mode (as opposed to ONE_WIRE_NO_EXTERNAL_PULLUP) is going to cause problems.
void AppUart_enable_tx(uart_indx_t uartIndx)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
 8001102:	0002      	movs	r2, r0
 8001104:	1dfb      	adds	r3, r7, #7
 8001106:	701a      	strb	r2, [r3, #0]
#if 0
	// TODO: Decide if it is really necessary to check uart_type here.
	if ((UART_TYPE_USART == uart_hal->uart_type) || (UART_TYPE_LPUART == uart_hal->uart_type))
	{
#endif
		if (ONE_WIRE_NO_EXTERNAL_PULLUP == UartMode[uartIndx]) // Note that ONE_WIRE_NO_EXTERNAL_PULLUP is the only mode that uses the swap bit.
 8001108:	1dfb      	adds	r3, r7, #7
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	4a24      	ldr	r2, [pc, #144]	@ (80011a0 <AppUart_enable_tx+0xa4>)
 800110e:	5cd3      	ldrb	r3, [r2, r3]
 8001110:	2b04      	cmp	r3, #4
 8001112:	d133      	bne.n	800117c <AppUart_enable_tx+0x80>
		{
			/* if tx/rx pin is set to rx... */
			if (UART_ModulePtr[uartIndx]->CR2 & USART_CR2_SWAP)
 8001114:	1dfb      	adds	r3, r7, #7
 8001116:	781a      	ldrb	r2, [r3, #0]
 8001118:	4b22      	ldr	r3, [pc, #136]	@ (80011a4 <AppUart_enable_tx+0xa8>)
 800111a:	0092      	lsls	r2, r2, #2
 800111c:	58d3      	ldr	r3, [r2, r3]
 800111e:	685a      	ldr	r2, [r3, #4]
 8001120:	2380      	movs	r3, #128	@ 0x80
 8001122:	021b      	lsls	r3, r3, #8
 8001124:	4013      	ands	r3, r2
 8001126:	d029      	beq.n	800117c <AppUart_enable_tx+0x80>
			{
				// Set the swap bit to "not swapped" functionality (TX/RX line used for TX).
				UART_ModulePtr[uartIndx]->CR1 &= ~USART_CR1_UE;
 8001128:	1dfb      	adds	r3, r7, #7
 800112a:	781a      	ldrb	r2, [r3, #0]
 800112c:	4b1d      	ldr	r3, [pc, #116]	@ (80011a4 <AppUart_enable_tx+0xa8>)
 800112e:	0092      	lsls	r2, r2, #2
 8001130:	58d3      	ldr	r3, [r2, r3]
 8001132:	681a      	ldr	r2, [r3, #0]
 8001134:	1dfb      	adds	r3, r7, #7
 8001136:	7819      	ldrb	r1, [r3, #0]
 8001138:	4b1a      	ldr	r3, [pc, #104]	@ (80011a4 <AppUart_enable_tx+0xa8>)
 800113a:	0089      	lsls	r1, r1, #2
 800113c:	58cb      	ldr	r3, [r1, r3]
 800113e:	2101      	movs	r1, #1
 8001140:	438a      	bics	r2, r1
 8001142:	601a      	str	r2, [r3, #0]
				UART_ModulePtr[uartIndx]->CR2 &= ~USART_CR2_SWAP; /* can only modify CR2 when UE is 0 */
 8001144:	1dfb      	adds	r3, r7, #7
 8001146:	781a      	ldrb	r2, [r3, #0]
 8001148:	4b16      	ldr	r3, [pc, #88]	@ (80011a4 <AppUart_enable_tx+0xa8>)
 800114a:	0092      	lsls	r2, r2, #2
 800114c:	58d3      	ldr	r3, [r2, r3]
 800114e:	685a      	ldr	r2, [r3, #4]
 8001150:	1dfb      	adds	r3, r7, #7
 8001152:	7819      	ldrb	r1, [r3, #0]
 8001154:	4b13      	ldr	r3, [pc, #76]	@ (80011a4 <AppUart_enable_tx+0xa8>)
 8001156:	0089      	lsls	r1, r1, #2
 8001158:	58cb      	ldr	r3, [r1, r3]
 800115a:	4913      	ldr	r1, [pc, #76]	@ (80011a8 <AppUart_enable_tx+0xac>)
 800115c:	400a      	ands	r2, r1
 800115e:	605a      	str	r2, [r3, #4]

				UART_ModulePtr[uartIndx]->CR1 |=  USART_CR1_UE;
 8001160:	1dfb      	adds	r3, r7, #7
 8001162:	781a      	ldrb	r2, [r3, #0]
 8001164:	4b0f      	ldr	r3, [pc, #60]	@ (80011a4 <AppUart_enable_tx+0xa8>)
 8001166:	0092      	lsls	r2, r2, #2
 8001168:	58d3      	ldr	r3, [r2, r3]
 800116a:	681a      	ldr	r2, [r3, #0]
 800116c:	1dfb      	adds	r3, r7, #7
 800116e:	7819      	ldrb	r1, [r3, #0]
 8001170:	4b0c      	ldr	r3, [pc, #48]	@ (80011a4 <AppUart_enable_tx+0xa8>)
 8001172:	0089      	lsls	r1, r1, #2
 8001174:	58cb      	ldr	r3, [r1, r3]
 8001176:	2101      	movs	r1, #1
 8001178:	430a      	orrs	r2, r1
 800117a:	601a      	str	r2, [r3, #0]
			}
		}
		/* Enable Transmitter, transmit complete and transmitter empty interrupts */
		UART_ModulePtr[uartIndx]->CR1 |= (USART_CR1_TE | USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE);
 800117c:	1dfb      	adds	r3, r7, #7
 800117e:	781a      	ldrb	r2, [r3, #0]
 8001180:	4b08      	ldr	r3, [pc, #32]	@ (80011a4 <AppUart_enable_tx+0xa8>)
 8001182:	0092      	lsls	r2, r2, #2
 8001184:	58d3      	ldr	r3, [r2, r3]
 8001186:	681a      	ldr	r2, [r3, #0]
 8001188:	1dfb      	adds	r3, r7, #7
 800118a:	7819      	ldrb	r1, [r3, #0]
 800118c:	4b05      	ldr	r3, [pc, #20]	@ (80011a4 <AppUart_enable_tx+0xa8>)
 800118e:	0089      	lsls	r1, r1, #2
 8001190:	58cb      	ldr	r3, [r1, r3]
 8001192:	21c8      	movs	r1, #200	@ 0xc8
 8001194:	430a      	orrs	r2, r1
 8001196:	601a      	str	r2, [r3, #0]
	{
		/* No other types supported, silently fail */
		return;
	}
#endif
}
 8001198:	46c0      	nop			@ (mov r8, r8)
 800119a:	46bd      	mov	sp, r7
 800119c:	b002      	add	sp, #8
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	20000280 	.word	0x20000280
 80011a4:	0800a110 	.word	0x0800a110
 80011a8:	ffff7fff 	.word	0xffff7fff

080011ac <AppUart_disable_tx>:

void AppUart_disable_tx(uart_indx_t uartIndx)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	0002      	movs	r2, r0
 80011b4:	1dfb      	adds	r3, r7, #7
 80011b6:	701a      	strb	r2, [r3, #0]
	// TODO: Decide if it is really necessary to check uart_type here.
	if ((UART_TYPE_USART == uart_hal->uart_type) || (UART_TYPE_LPUART == uart_hal->uart_type))
	{
#endif
		/* Disable Transmitter */
		UART_ModulePtr[uartIndx]->CR1 &= ~USART_CR1_TE;
 80011b8:	1dfb      	adds	r3, r7, #7
 80011ba:	781a      	ldrb	r2, [r3, #0]
 80011bc:	4b07      	ldr	r3, [pc, #28]	@ (80011dc <AppUart_disable_tx+0x30>)
 80011be:	0092      	lsls	r2, r2, #2
 80011c0:	58d3      	ldr	r3, [r2, r3]
 80011c2:	681a      	ldr	r2, [r3, #0]
 80011c4:	1dfb      	adds	r3, r7, #7
 80011c6:	7819      	ldrb	r1, [r3, #0]
 80011c8:	4b04      	ldr	r3, [pc, #16]	@ (80011dc <AppUart_disable_tx+0x30>)
 80011ca:	0089      	lsls	r1, r1, #2
 80011cc:	58cb      	ldr	r3, [r1, r3]
 80011ce:	2108      	movs	r1, #8
 80011d0:	438a      	bics	r2, r1
 80011d2:	601a      	str	r2, [r3, #0]
	{
		/* No other types supported, silently fail */
		return;
	}
#endif
}
 80011d4:	46c0      	nop			@ (mov r8, r8)
 80011d6:	46bd      	mov	sp, r7
 80011d8:	b002      	add	sp, #8
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	0800a110 	.word	0x0800a110

080011e0 <AppUart_enable_rx>:

void AppUart_enable_rx(uart_indx_t uartIndx)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	0002      	movs	r2, r0
 80011e8:	1dfb      	adds	r3, r7, #7
 80011ea:	701a      	strb	r2, [r3, #0]
	// TODO: Decide if it is really necessary to check uart_type here.
	if ((UART_TYPE_USART == uart_hal->uart_type) || (UART_TYPE_LPUART == uart_hal->uart_type))
	{
#endif
		/* Enable Receiver and Rx Data Available Interrupt */
		UART_ModulePtr[uartIndx]->CR1 |= (USART_CR1_RE | USART_CR1_RXNEIE_RXFNEIE);
 80011ec:	1dfb      	adds	r3, r7, #7
 80011ee:	781a      	ldrb	r2, [r3, #0]
 80011f0:	4b20      	ldr	r3, [pc, #128]	@ (8001274 <AppUart_enable_rx+0x94>)
 80011f2:	0092      	lsls	r2, r2, #2
 80011f4:	58d3      	ldr	r3, [r2, r3]
 80011f6:	681a      	ldr	r2, [r3, #0]
 80011f8:	1dfb      	adds	r3, r7, #7
 80011fa:	7819      	ldrb	r1, [r3, #0]
 80011fc:	4b1d      	ldr	r3, [pc, #116]	@ (8001274 <AppUart_enable_rx+0x94>)
 80011fe:	0089      	lsls	r1, r1, #2
 8001200:	58cb      	ldr	r3, [r1, r3]
 8001202:	2124      	movs	r1, #36	@ 0x24
 8001204:	430a      	orrs	r2, r1
 8001206:	601a      	str	r2, [r3, #0]

		if (ONE_WIRE_NO_EXTERNAL_PULLUP == UartMode[uartIndx])
 8001208:	1dfb      	adds	r3, r7, #7
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	4a1a      	ldr	r2, [pc, #104]	@ (8001278 <AppUart_enable_rx+0x98>)
 800120e:	5cd3      	ldrb	r3, [r2, r3]
 8001210:	2b04      	cmp	r3, #4
 8001212:	d12a      	bne.n	800126a <AppUart_enable_rx+0x8a>
		{
			/* ...then set pin to Rx */
			UART_ModulePtr[uartIndx]->CR1 &= ~USART_CR1_UE; /* can only modify CR2 when UE is 0 */
 8001214:	1dfb      	adds	r3, r7, #7
 8001216:	781a      	ldrb	r2, [r3, #0]
 8001218:	4b16      	ldr	r3, [pc, #88]	@ (8001274 <AppUart_enable_rx+0x94>)
 800121a:	0092      	lsls	r2, r2, #2
 800121c:	58d3      	ldr	r3, [r2, r3]
 800121e:	681a      	ldr	r2, [r3, #0]
 8001220:	1dfb      	adds	r3, r7, #7
 8001222:	7819      	ldrb	r1, [r3, #0]
 8001224:	4b13      	ldr	r3, [pc, #76]	@ (8001274 <AppUart_enable_rx+0x94>)
 8001226:	0089      	lsls	r1, r1, #2
 8001228:	58cb      	ldr	r3, [r1, r3]
 800122a:	2101      	movs	r1, #1
 800122c:	438a      	bics	r2, r1
 800122e:	601a      	str	r2, [r3, #0]

			// Set the swap bit to "swapped" functionality (TX/RX line used for RX).
			UART_ModulePtr[uartIndx]->CR2 |= USART_CR2_SWAP;
 8001230:	1dfb      	adds	r3, r7, #7
 8001232:	781a      	ldrb	r2, [r3, #0]
 8001234:	4b0f      	ldr	r3, [pc, #60]	@ (8001274 <AppUart_enable_rx+0x94>)
 8001236:	0092      	lsls	r2, r2, #2
 8001238:	58d3      	ldr	r3, [r2, r3]
 800123a:	685a      	ldr	r2, [r3, #4]
 800123c:	1dfb      	adds	r3, r7, #7
 800123e:	7819      	ldrb	r1, [r3, #0]
 8001240:	4b0c      	ldr	r3, [pc, #48]	@ (8001274 <AppUart_enable_rx+0x94>)
 8001242:	0089      	lsls	r1, r1, #2
 8001244:	58cb      	ldr	r3, [r1, r3]
 8001246:	2180      	movs	r1, #128	@ 0x80
 8001248:	0209      	lsls	r1, r1, #8
 800124a:	430a      	orrs	r2, r1
 800124c:	605a      	str	r2, [r3, #4]

			// re-enable the UART
			UART_ModulePtr[uartIndx]->CR1 |= USART_CR1_UE;
 800124e:	1dfb      	adds	r3, r7, #7
 8001250:	781a      	ldrb	r2, [r3, #0]
 8001252:	4b08      	ldr	r3, [pc, #32]	@ (8001274 <AppUart_enable_rx+0x94>)
 8001254:	0092      	lsls	r2, r2, #2
 8001256:	58d3      	ldr	r3, [r2, r3]
 8001258:	681a      	ldr	r2, [r3, #0]
 800125a:	1dfb      	adds	r3, r7, #7
 800125c:	7819      	ldrb	r1, [r3, #0]
 800125e:	4b05      	ldr	r3, [pc, #20]	@ (8001274 <AppUart_enable_rx+0x94>)
 8001260:	0089      	lsls	r1, r1, #2
 8001262:	58cb      	ldr	r3, [r1, r3]
 8001264:	2101      	movs	r1, #1
 8001266:	430a      	orrs	r2, r1
 8001268:	601a      	str	r2, [r3, #0]
	{
		/* No other types supported, silently fail */
		return;
	}
#endif
}
 800126a:	46c0      	nop			@ (mov r8, r8)
 800126c:	46bd      	mov	sp, r7
 800126e:	b002      	add	sp, #8
 8001270:	bd80      	pop	{r7, pc}
 8001272:	46c0      	nop			@ (mov r8, r8)
 8001274:	0800a110 	.word	0x0800a110
 8001278:	20000280 	.word	0x20000280

0800127c <AppUart_disable_rx>:

void AppUart_disable_rx(uart_indx_t uartIndx)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
 8001282:	0002      	movs	r2, r0
 8001284:	1dfb      	adds	r3, r7, #7
 8001286:	701a      	strb	r2, [r3, #0]
	// TODO: Decide if it is really necessary to check uart_type here.
	if ((UART_TYPE_USART == uart_hal->uart_type) || (UART_TYPE_LPUART == uart_hal->uart_type))
	{
#endif
		/* Disable Receiver and Rx Data Available Interrupt */
		UART_ModulePtr[uartIndx]->CR1 &= ~(USART_CR1_RE | USART_CR1_RXNEIE_RXFNEIE);
 8001288:	1dfb      	adds	r3, r7, #7
 800128a:	781a      	ldrb	r2, [r3, #0]
 800128c:	4b07      	ldr	r3, [pc, #28]	@ (80012ac <AppUart_disable_rx+0x30>)
 800128e:	0092      	lsls	r2, r2, #2
 8001290:	58d3      	ldr	r3, [r2, r3]
 8001292:	681a      	ldr	r2, [r3, #0]
 8001294:	1dfb      	adds	r3, r7, #7
 8001296:	7819      	ldrb	r1, [r3, #0]
 8001298:	4b04      	ldr	r3, [pc, #16]	@ (80012ac <AppUart_disable_rx+0x30>)
 800129a:	0089      	lsls	r1, r1, #2
 800129c:	58cb      	ldr	r3, [r1, r3]
 800129e:	2124      	movs	r1, #36	@ 0x24
 80012a0:	438a      	bics	r2, r1
 80012a2:	601a      	str	r2, [r3, #0]
	{
		/* No other types supported, silently fail */
		return;
	}
#endif
}
 80012a4:	46c0      	nop			@ (mov r8, r8)
 80012a6:	46bd      	mov	sp, r7
 80012a8:	b002      	add	sp, #8
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	0800a110 	.word	0x0800a110

080012b0 <uart_irq_handler>:
{
	return ((UART_ModulePtr[uartIndx]->CR1 & USART_CR1_TCIE) != 0);
}

static void uart_irq_handler(USART_TypeDef* uart_module)
{
 80012b0:	b5b0      	push	{r4, r5, r7, lr}
 80012b2:	b084      	sub	sp, #16
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
	uint8_t byte_to_tx;

	uart_indx_t ThisUartIndx = 0;
 80012b8:	210f      	movs	r1, #15
 80012ba:	187b      	adds	r3, r7, r1
 80012bc:	2200      	movs	r2, #0
 80012be:	701a      	strb	r2, [r3, #0]

	if (USART1 == uart_module)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	4a7c      	ldr	r2, [pc, #496]	@ (80014b4 <uart_irq_handler+0x204>)
 80012c4:	4293      	cmp	r3, r2
 80012c6:	d103      	bne.n	80012d0 <uart_irq_handler+0x20>
	{
		ThisUartIndx = UART1INDX;
 80012c8:	187b      	adds	r3, r7, r1
 80012ca:	2200      	movs	r2, #0
 80012cc:	701a      	strb	r2, [r3, #0]
 80012ce:	e008      	b.n	80012e2 <uart_irq_handler+0x32>
	{
		ThisUartIndx = UART2INDX;
	}
#endif
#ifdef USING_UART3
	else if (USART3 == uart_module)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	4a79      	ldr	r2, [pc, #484]	@ (80014b8 <uart_irq_handler+0x208>)
 80012d4:	4293      	cmp	r3, r2
 80012d6:	d000      	beq.n	80012da <uart_irq_handler+0x2a>
 80012d8:	e0e7      	b.n	80014aa <uart_irq_handler+0x1fa>
	{
		ThisUartIndx = UART3INDX;
 80012da:	230f      	movs	r3, #15
 80012dc:	18fb      	adds	r3, r7, r3
 80012de:	2201      	movs	r2, #1
 80012e0:	701a      	strb	r2, [r3, #0]
		// We don't know what to do with this uart_module
		return;
	}
    /* if there are any error flags AND if in RX mode rather than Tx mode OR
     * if there are any error flags AND The current UART is USART1 AND it is in two wire mode */
	if (uart_module->ISR & (USART_ISR_ORE))
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	69db      	ldr	r3, [r3, #28]
 80012e6:	2208      	movs	r2, #8
 80012e8:	4013      	ands	r3, r2
 80012ea:	d01a      	beq.n	8001322 <uart_irq_handler+0x72>
	{
		if (uart_module->ISR & USART_ISR_RXNE_RXFNE)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	69db      	ldr	r3, [r3, #28]
 80012f0:	2220      	movs	r2, #32
 80012f2:	4013      	ands	r3, r2
 80012f4:	d015      	beq.n	8001322 <uart_irq_handler+0x72>
			 * received, one in the RDR register, and then as soon as we read that once,
			 * there's a byte that gets shifted into the RDR register from the
			 * non-memory-mapped shift register.
			 */

			if (USART1 == uart_module)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	4a6e      	ldr	r2, [pc, #440]	@ (80014b4 <uart_irq_handler+0x204>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d106      	bne.n	800130c <uart_irq_handler+0x5c>
			{
				usart1_byte_received_callback(uart_module->RDR);
 80012fe:	4b6f      	ldr	r3, [pc, #444]	@ (80014bc <uart_irq_handler+0x20c>)
 8001300:	681a      	ldr	r2, [r3, #0]
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001306:	b2db      	uxtb	r3, r3
 8001308:	0018      	movs	r0, r3
 800130a:	4790      	blx	r2
				usart2_byte_received_callback(uart_module->RDR);
				//usart2_byte_received_callback(uart_module->RDR);
			}
#endif
#ifdef USING_UART3
			if (USART3 == uart_module)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	4a6a      	ldr	r2, [pc, #424]	@ (80014b8 <uart_irq_handler+0x208>)
 8001310:	4293      	cmp	r3, r2
 8001312:	d106      	bne.n	8001322 <uart_irq_handler+0x72>
			{
				usart3_byte_received_callback(uart_module->RDR);
 8001314:	4b6a      	ldr	r3, [pc, #424]	@ (80014c0 <uart_irq_handler+0x210>)
 8001316:	681a      	ldr	r2, [r3, #0]
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800131c:	b2db      	uxtb	r3, r3
 800131e:	0018      	movs	r0, r3
 8001320:	4790      	blx	r2


	}
	volatile uint8_t junk;

	if (uart_module->ISR & (USART_ISR_NE | USART_ISR_FE))
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	69db      	ldr	r3, [r3, #28]
 8001326:	2206      	movs	r2, #6
 8001328:	4013      	ands	r3, r2
 800132a:	d007      	beq.n	800133c <uart_irq_handler+0x8c>
	{
		/* clear the Rx buffer and toss the data */
		junk = uart_module->RDR;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001330:	b2da      	uxtb	r2, r3
 8001332:	210d      	movs	r1, #13
 8001334:	187b      	adds	r3, r7, r1
 8001336:	701a      	strb	r2, [r3, #0]
		(void)junk;
 8001338:	187b      	adds	r3, r7, r1
 800133a:	781b      	ldrb	r3, [r3, #0]
	}

	// Clear out the overrun error flag, the Noise Detected error flag and the Framing Error flag
	uart_module->ICR |= (USART_ICR_ORECF | USART_ICR_NECF | USART_ICR_FECF);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6a1b      	ldr	r3, [r3, #32]
 8001340:	220e      	movs	r2, #14
 8001342:	431a      	orrs	r2, r3
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	621a      	str	r2, [r3, #32]

    /* if a byte has been received AND if in Rx mode rather than Tx mode OR
     * if a byte has been received AND this is USART1 AND it is in two wire mode */
	if ((uart_module->ISR & USART_ISR_RXNE_RXFNE) &&
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	69db      	ldr	r3, [r3, #28]
 800134c:	2220      	movs	r2, #32
 800134e:	4013      	ands	r3, r2
 8001350:	d023      	beq.n	800139a <uart_irq_handler+0xea>
	    ((uart_module->CR2 & USART_CR2_SWAP) ||  (TWO_WIRE == UartMode[ThisUartIndx])))
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	685a      	ldr	r2, [r3, #4]
 8001356:	2380      	movs	r3, #128	@ 0x80
 8001358:	021b      	lsls	r3, r3, #8
 800135a:	4013      	ands	r3, r2
	if ((uart_module->ISR & USART_ISR_RXNE_RXFNE) &&
 800135c:	d106      	bne.n	800136c <uart_irq_handler+0xbc>
	    ((uart_module->CR2 & USART_CR2_SWAP) ||  (TWO_WIRE == UartMode[ThisUartIndx])))
 800135e:	230f      	movs	r3, #15
 8001360:	18fb      	adds	r3, r7, r3
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	4a57      	ldr	r2, [pc, #348]	@ (80014c4 <uart_irq_handler+0x214>)
 8001366:	5cd3      	ldrb	r3, [r2, r3]
 8001368:	2b02      	cmp	r3, #2
 800136a:	d116      	bne.n	800139a <uart_irq_handler+0xea>
	{
		/* Note that reading the RDR register clears the RXNE flag. */

		if (USART1 == uart_module)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	4a51      	ldr	r2, [pc, #324]	@ (80014b4 <uart_irq_handler+0x204>)
 8001370:	4293      	cmp	r3, r2
 8001372:	d107      	bne.n	8001384 <uart_irq_handler+0xd4>
		{
			/* call the USART1 received callback, passing it the received data */
			usart1_byte_received_callback(uart_module->RDR);
 8001374:	4b51      	ldr	r3, [pc, #324]	@ (80014bc <uart_irq_handler+0x20c>)
 8001376:	681a      	ldr	r2, [r3, #0]
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800137c:	b2db      	uxtb	r3, r3
 800137e:	0018      	movs	r0, r3
 8001380:	4790      	blx	r2
 8001382:	e00a      	b.n	800139a <uart_irq_handler+0xea>
			/* call the USART2 received callback, passing it the received data */
			usart2_byte_received_callback(uart_module->RDR);
		}
#endif
#ifdef USING_UART3
		else if (USART3 == uart_module)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	4a4c      	ldr	r2, [pc, #304]	@ (80014b8 <uart_irq_handler+0x208>)
 8001388:	4293      	cmp	r3, r2
 800138a:	d106      	bne.n	800139a <uart_irq_handler+0xea>
		{
			/* call the USART3 received callback, passing it the received data */
			usart3_byte_received_callback(uart_module->RDR);
 800138c:	4b4c      	ldr	r3, [pc, #304]	@ (80014c0 <uart_irq_handler+0x210>)
 800138e:	681a      	ldr	r2, [r3, #0]
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001394:	b2db      	uxtb	r3, r3
 8001396:	0018      	movs	r0, r3
 8001398:	4790      	blx	r2
	}
#endif

    /* if the transmit buffer is empty AND we're set to Tx rather than Rx OR
     * if the transmit buffer is empty AND USART1 is in two wire mode */
	if ((uart_module->ISR & USART_ISR_TXE_TXFNF) &&
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	69db      	ldr	r3, [r3, #28]
 800139e:	2280      	movs	r2, #128	@ 0x80
 80013a0:	4013      	ands	r3, r2
 80013a2:	d04d      	beq.n	8001440 <uart_irq_handler+0x190>
	    ((!((uart_module->CR2 & USART_CR2_SWAP) == USART_CR2_SWAP)) ||
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	685a      	ldr	r2, [r3, #4]
 80013a8:	2380      	movs	r3, #128	@ 0x80
 80013aa:	021b      	lsls	r3, r3, #8
 80013ac:	401a      	ands	r2, r3
	if ((uart_module->ISR & USART_ISR_TXE_TXFNF) &&
 80013ae:	2380      	movs	r3, #128	@ 0x80
 80013b0:	021b      	lsls	r3, r3, #8
 80013b2:	429a      	cmp	r2, r3
 80013b4:	d106      	bne.n	80013c4 <uart_irq_handler+0x114>
		(TWO_WIRE == UartMode[ThisUartIndx])))
 80013b6:	230f      	movs	r3, #15
 80013b8:	18fb      	adds	r3, r7, r3
 80013ba:	781b      	ldrb	r3, [r3, #0]
 80013bc:	4a41      	ldr	r2, [pc, #260]	@ (80014c4 <uart_irq_handler+0x214>)
 80013be:	5cd3      	ldrb	r3, [r2, r3]
	    ((!((uart_module->CR2 & USART_CR2_SWAP) == USART_CR2_SWAP)) ||
 80013c0:	2b02      	cmp	r3, #2
 80013c2:	d13d      	bne.n	8001440 <uart_irq_handler+0x190>
	{
		// TODO: clean up this code to use ThisUartIndx and arrays to reduce the line count.
		if (USART1 == uart_module)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	4a3b      	ldr	r2, [pc, #236]	@ (80014b4 <uart_irq_handler+0x204>)
 80013c8:	4293      	cmp	r3, r2
 80013ca:	d115      	bne.n	80013f8 <uart_irq_handler+0x148>
		{
			/* call the USART1 transmit callback to get the byte to Tx */
			if (usart1_transmit_ready_callback(&byte_to_tx))
 80013cc:	4b3e      	ldr	r3, [pc, #248]	@ (80014c8 <uart_irq_handler+0x218>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	240e      	movs	r4, #14
 80013d2:	193a      	adds	r2, r7, r4
 80013d4:	0010      	movs	r0, r2
 80013d6:	4798      	blx	r3
 80013d8:	1e03      	subs	r3, r0, #0
 80013da:	d005      	beq.n	80013e8 <uart_irq_handler+0x138>
				// enable TX and disable RX on the UART1
				//AppUart_enable_tx(ThisUartIndx);
				//AppUart_disable_rx(ThisUartIndx);

				/* transmit the byte */
				uart_module->TDR = byte_to_tx;
 80013dc:	193b      	adds	r3, r7, r4
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	001a      	movs	r2, r3
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	629a      	str	r2, [r3, #40]	@ 0x28
 80013e6:	e02b      	b.n	8001440 <uart_irq_handler+0x190>
			}
			else
			{
				/* disable the 'Tx buffer empty' interrupt */
				uart_module->CR1 &= ~USART_CR1_TXEIE_TXFNFIE;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	2280      	movs	r2, #128	@ 0x80
 80013ee:	4393      	bics	r3, r2
 80013f0:	001a      	movs	r2, r3
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	601a      	str	r2, [r3, #0]
 80013f6:	e023      	b.n	8001440 <uart_irq_handler+0x190>
				uart_module->CR1 &= ~USART_CR1_TXEIE_TXFNFIE;
			}
		}
#endif
#ifdef USING_UART3
		else if (USART3 == uart_module)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	4a2f      	ldr	r2, [pc, #188]	@ (80014b8 <uart_irq_handler+0x208>)
 80013fc:	4293      	cmp	r3, r2
 80013fe:	d11f      	bne.n	8001440 <uart_irq_handler+0x190>
		{
			/* call the USART3 transmit callback to get the byte to Tx */
			if (usart3_transmit_ready_callback(&byte_to_tx))
 8001400:	4b32      	ldr	r3, [pc, #200]	@ (80014cc <uart_irq_handler+0x21c>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	240e      	movs	r4, #14
 8001406:	193a      	adds	r2, r7, r4
 8001408:	0010      	movs	r0, r2
 800140a:	4798      	blx	r3
 800140c:	1e03      	subs	r3, r0, #0
 800140e:	d010      	beq.n	8001432 <uart_irq_handler+0x182>
			{
				// enable TX and disable RX on the UART1
				AppUart_enable_tx(ThisUartIndx);
 8001410:	250f      	movs	r5, #15
 8001412:	197b      	adds	r3, r7, r5
 8001414:	781b      	ldrb	r3, [r3, #0]
 8001416:	0018      	movs	r0, r3
 8001418:	f7ff fe70 	bl	80010fc <AppUart_enable_tx>
				AppUart_disable_rx(ThisUartIndx);
 800141c:	197b      	adds	r3, r7, r5
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	0018      	movs	r0, r3
 8001422:	f7ff ff2b 	bl	800127c <AppUart_disable_rx>

				/* transmit the byte */
				uart_module->TDR = byte_to_tx;
 8001426:	193b      	adds	r3, r7, r4
 8001428:	781b      	ldrb	r3, [r3, #0]
 800142a:	001a      	movs	r2, r3
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	629a      	str	r2, [r3, #40]	@ 0x28
 8001430:	e006      	b.n	8001440 <uart_irq_handler+0x190>
			}
			else
			{
				/* disable the 'Tx buffer empty' interrupt */
				uart_module->CR1 &= ~USART_CR1_TXEIE_TXFNFIE;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	2280      	movs	r2, #128	@ 0x80
 8001438:	4393      	bics	r3, r2
 800143a:	001a      	movs	r2, r3
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	601a      	str	r2, [r3, #0]
		}
	}

/* TODO - need a callback in the UART driver for the 152 usec delay */
    /* if the transmission complete flag is set AND we're set to Tx rather than Rx */
	if ((uart_module->ISR & USART_ISR_TC) == USART_ISR_TC)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	69db      	ldr	r3, [r3, #28]
 8001444:	2240      	movs	r2, #64	@ 0x40
 8001446:	4013      	ands	r3, r2
 8001448:	2b40      	cmp	r3, #64	@ 0x40
 800144a:	d12f      	bne.n	80014ac <uart_irq_handler+0x1fc>
	{
        if (!((uart_module->CR2 & USART_CR2_SWAP) == USART_CR2_SWAP))
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	685a      	ldr	r2, [r3, #4]
 8001450:	2380      	movs	r3, #128	@ 0x80
 8001452:	021b      	lsls	r3, r3, #8
 8001454:	401a      	ands	r2, r3
 8001456:	2380      	movs	r3, #128	@ 0x80
 8001458:	021b      	lsls	r3, r3, #8
 800145a:	429a      	cmp	r2, r3
 800145c:	d026      	beq.n	80014ac <uart_irq_handler+0x1fc>
		{
			if (USART1 == uart_module)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	4a14      	ldr	r2, [pc, #80]	@ (80014b4 <uart_irq_handler+0x204>)
 8001462:	4293      	cmp	r3, r2
 8001464:	d106      	bne.n	8001474 <uart_irq_handler+0x1c4>
			{
				if (usart1_blocking_delay)
 8001466:	4b1a      	ldr	r3, [pc, #104]	@ (80014d0 <uart_irq_handler+0x220>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d002      	beq.n	8001474 <uart_irq_handler+0x1c4>
				{
					/* delay to ride through the IR1 key glitch */
					usart1_blocking_delay();
 800146e:	4b18      	ldr	r3, [pc, #96]	@ (80014d0 <uart_irq_handler+0x220>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4798      	blx	r3
			}
#endif


			/* disable the 'Tx complete' interrupt */
			uart_module->CR1 &= ~USART_CR1_TCIE;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	2240      	movs	r2, #64	@ 0x40
 800147a:	4393      	bics	r3, r2
 800147c:	001a      	movs	r2, r3
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	601a      	str	r2, [r3, #0]

			/* clear the TC bit */
			uart_module->ICR = USART_ICR_TCCF;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	2240      	movs	r2, #64	@ 0x40
 8001486:	621a      	str	r2, [r3, #32]

			if (USART2 == uart_module)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	4a12      	ldr	r2, [pc, #72]	@ (80014d4 <uart_irq_handler+0x224>)
 800148c:	4293      	cmp	r3, r2
 800148e:	d105      	bne.n	800149c <uart_irq_handler+0x1ec>
			{
				// disable TX on the IR_DOT UART
				AppUart_disable_tx(ThisUartIndx);
 8001490:	230f      	movs	r3, #15
 8001492:	18fb      	adds	r3, r7, r3
 8001494:	781b      	ldrb	r3, [r3, #0]
 8001496:	0018      	movs	r0, r3
 8001498:	f7ff fe88 	bl	80011ac <AppUart_disable_tx>

			}

			// re-enable the receiver for all UARTs.
			AppUart_enable_rx(ThisUartIndx);
 800149c:	230f      	movs	r3, #15
 800149e:	18fb      	adds	r3, r7, r3
 80014a0:	781b      	ldrb	r3, [r3, #0]
 80014a2:	0018      	movs	r0, r3
 80014a4:	f7ff fe9c 	bl	80011e0 <AppUart_enable_rx>
 80014a8:	e000      	b.n	80014ac <uart_irq_handler+0x1fc>
		return;
 80014aa:	46c0      	nop			@ (mov r8, r8)
		}

	}
}
 80014ac:	46bd      	mov	sp, r7
 80014ae:	b004      	add	sp, #16
 80014b0:	bdb0      	pop	{r4, r5, r7, pc}
 80014b2:	46c0      	nop			@ (mov r8, r8)
 80014b4:	40013800 	.word	0x40013800
 80014b8:	40004800 	.word	0x40004800
 80014bc:	20000270 	.word	0x20000270
 80014c0:	20000278 	.word	0x20000278
 80014c4:	20000280 	.word	0x20000280
 80014c8:	2000026c 	.word	0x2000026c
 80014cc:	20000274 	.word	0x20000274
 80014d0:	2000027c 	.word	0x2000027c
 80014d4:	40004400 	.word	0x40004400

080014d8 <USART1_IRQHandler>:

void USART1_IRQHandler(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	af00      	add	r7, sp, #0
	uart_irq_handler(USART1);
 80014dc:	4b03      	ldr	r3, [pc, #12]	@ (80014ec <USART1_IRQHandler+0x14>)
 80014de:	0018      	movs	r0, r3
 80014e0:	f7ff fee6 	bl	80012b0 <uart_irq_handler>
}
 80014e4:	46c0      	nop			@ (mov r8, r8)
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	46c0      	nop			@ (mov r8, r8)
 80014ec:	40013800 	.word	0x40013800

080014f0 <USART3_4_IRQHandler>:
#endif


#ifdef USING_UART3
void USART3_4_IRQHandler(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	af00      	add	r7, sp, #0
	uart_irq_handler(USART3);
 80014f4:	4b03      	ldr	r3, [pc, #12]	@ (8001504 <USART3_4_IRQHandler+0x14>)
 80014f6:	0018      	movs	r0, r3
 80014f8:	f7ff feda 	bl	80012b0 <uart_irq_handler>
}
 80014fc:	46c0      	nop			@ (mov r8, r8)
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}
 8001502:	46c0      	nop			@ (mov r8, r8)
 8001504:	40004800 	.word	0x40004800

08001508 <AppUartDriver_init>:
  uart_hal_t* uart_hal,
  uint8_t* rx_buf,
  size_t rx_buf_size,
  uint8_t* tx_buf,
  size_t tx_buf_size)
{
 8001508:	b590      	push	{r4, r7, lr}
 800150a:	b085      	sub	sp, #20
 800150c:	af00      	add	r7, sp, #0
 800150e:	60b9      	str	r1, [r7, #8]
 8001510:	607a      	str	r2, [r7, #4]
 8001512:	603b      	str	r3, [r7, #0]
 8001514:	240f      	movs	r4, #15
 8001516:	193b      	adds	r3, r7, r4
 8001518:	1c02      	adds	r2, r0, #0
 800151a:	701a      	strb	r2, [r3, #0]
	/* set the local member's pointer to the HAL config */
	inst_uart[uartIndx].uart_hal = uart_hal;
 800151c:	193b      	adds	r3, r7, r4
 800151e:	781a      	ldrb	r2, [r3, #0]
 8001520:	497f      	ldr	r1, [pc, #508]	@ (8001720 <AppUartDriver_init+0x218>)
 8001522:	0013      	movs	r3, r2
 8001524:	011b      	lsls	r3, r3, #4
 8001526:	189b      	adds	r3, r3, r2
 8001528:	009b      	lsls	r3, r3, #2
 800152a:	68ba      	ldr	r2, [r7, #8]
 800152c:	505a      	str	r2, [r3, r1]

    /* Initialize RX Queue */
	inst_uart[uartIndx].rx_buf = rx_buf;
 800152e:	193b      	adds	r3, r7, r4
 8001530:	781a      	ldrb	r2, [r3, #0]
 8001532:	497b      	ldr	r1, [pc, #492]	@ (8001720 <AppUartDriver_init+0x218>)
 8001534:	0013      	movs	r3, r2
 8001536:	011b      	lsls	r3, r3, #4
 8001538:	189b      	adds	r3, r3, r2
 800153a:	009b      	lsls	r3, r3, #2
 800153c:	18cb      	adds	r3, r1, r3
 800153e:	3304      	adds	r3, #4
 8001540:	687a      	ldr	r2, [r7, #4]
 8001542:	601a      	str	r2, [r3, #0]
	inst_uart[uartIndx].rx_queue.input = 0U;
 8001544:	193b      	adds	r3, r7, r4
 8001546:	781a      	ldrb	r2, [r3, #0]
 8001548:	4975      	ldr	r1, [pc, #468]	@ (8001720 <AppUartDriver_init+0x218>)
 800154a:	0013      	movs	r3, r2
 800154c:	011b      	lsls	r3, r3, #4
 800154e:	189b      	adds	r3, r3, r2
 8001550:	009b      	lsls	r3, r3, #2
 8001552:	18cb      	adds	r3, r1, r3
 8001554:	330c      	adds	r3, #12
 8001556:	2200      	movs	r2, #0
 8001558:	601a      	str	r2, [r3, #0]
	inst_uart[uartIndx].rx_queue.output = 0U;
 800155a:	193b      	adds	r3, r7, r4
 800155c:	781a      	ldrb	r2, [r3, #0]
 800155e:	4970      	ldr	r1, [pc, #448]	@ (8001720 <AppUartDriver_init+0x218>)
 8001560:	0013      	movs	r3, r2
 8001562:	011b      	lsls	r3, r3, #4
 8001564:	189b      	adds	r3, r3, r2
 8001566:	009b      	lsls	r3, r3, #2
 8001568:	18cb      	adds	r3, r1, r3
 800156a:	3310      	adds	r3, #16
 800156c:	2200      	movs	r2, #0
 800156e:	601a      	str	r2, [r3, #0]
	inst_uart[uartIndx].rx_queue.input_byte = 0U;
 8001570:	193b      	adds	r3, r7, r4
 8001572:	781a      	ldrb	r2, [r3, #0]
 8001574:	496a      	ldr	r1, [pc, #424]	@ (8001720 <AppUartDriver_init+0x218>)
 8001576:	0013      	movs	r3, r2
 8001578:	011b      	lsls	r3, r3, #4
 800157a:	189b      	adds	r3, r3, r2
 800157c:	009b      	lsls	r3, r3, #2
 800157e:	18cb      	adds	r3, r1, r3
 8001580:	3314      	adds	r3, #20
 8001582:	2200      	movs	r2, #0
 8001584:	601a      	str	r2, [r3, #0]
	inst_uart[uartIndx].rx_queue.output_byte = 0U;
 8001586:	193b      	adds	r3, r7, r4
 8001588:	781a      	ldrb	r2, [r3, #0]
 800158a:	4965      	ldr	r1, [pc, #404]	@ (8001720 <AppUartDriver_init+0x218>)
 800158c:	0013      	movs	r3, r2
 800158e:	011b      	lsls	r3, r3, #4
 8001590:	189b      	adds	r3, r3, r2
 8001592:	009b      	lsls	r3, r3, #2
 8001594:	18cb      	adds	r3, r1, r3
 8001596:	3318      	adds	r3, #24
 8001598:	2200      	movs	r2, #0
 800159a:	601a      	str	r2, [r3, #0]
	inst_uart[uartIndx].rx_queue.item_size = sizeof(inst_uart[uartIndx].rx_buf[0U]);
 800159c:	193b      	adds	r3, r7, r4
 800159e:	781a      	ldrb	r2, [r3, #0]
 80015a0:	495f      	ldr	r1, [pc, #380]	@ (8001720 <AppUartDriver_init+0x218>)
 80015a2:	0013      	movs	r3, r2
 80015a4:	011b      	lsls	r3, r3, #4
 80015a6:	189b      	adds	r3, r3, r2
 80015a8:	009b      	lsls	r3, r3, #2
 80015aa:	18cb      	adds	r3, r1, r3
 80015ac:	331c      	adds	r3, #28
 80015ae:	2201      	movs	r2, #1
 80015b0:	601a      	str	r2, [r3, #0]
	inst_uart[uartIndx].rx_queue.elements_in_array_minus_one = rx_buf_size - 1U;
 80015b2:	193b      	adds	r3, r7, r4
 80015b4:	781a      	ldrb	r2, [r3, #0]
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	1e59      	subs	r1, r3, #1
 80015ba:	4859      	ldr	r0, [pc, #356]	@ (8001720 <AppUartDriver_init+0x218>)
 80015bc:	0013      	movs	r3, r2
 80015be:	011b      	lsls	r3, r3, #4
 80015c0:	189b      	adds	r3, r3, r2
 80015c2:	009b      	lsls	r3, r3, #2
 80015c4:	18c3      	adds	r3, r0, r3
 80015c6:	3320      	adds	r3, #32
 80015c8:	6019      	str	r1, [r3, #0]
	inst_uart[uartIndx].rx_queue.array = inst_uart[uartIndx].rx_buf;
 80015ca:	193b      	adds	r3, r7, r4
 80015cc:	7819      	ldrb	r1, [r3, #0]
 80015ce:	193b      	adds	r3, r7, r4
 80015d0:	781a      	ldrb	r2, [r3, #0]
 80015d2:	4853      	ldr	r0, [pc, #332]	@ (8001720 <AppUartDriver_init+0x218>)
 80015d4:	000b      	movs	r3, r1
 80015d6:	011b      	lsls	r3, r3, #4
 80015d8:	185b      	adds	r3, r3, r1
 80015da:	009b      	lsls	r3, r3, #2
 80015dc:	18c3      	adds	r3, r0, r3
 80015de:	3304      	adds	r3, #4
 80015e0:	6819      	ldr	r1, [r3, #0]
 80015e2:	484f      	ldr	r0, [pc, #316]	@ (8001720 <AppUartDriver_init+0x218>)
 80015e4:	0013      	movs	r3, r2
 80015e6:	011b      	lsls	r3, r3, #4
 80015e8:	189b      	adds	r3, r3, r2
 80015ea:	009b      	lsls	r3, r3, #2
 80015ec:	18c3      	adds	r3, r0, r3
 80015ee:	3324      	adds	r3, #36	@ 0x24
 80015f0:	6019      	str	r1, [r3, #0]

    /* Initialize TX Queue */
	inst_uart[uartIndx].tx_buf = tx_buf;
 80015f2:	193b      	adds	r3, r7, r4
 80015f4:	781a      	ldrb	r2, [r3, #0]
 80015f6:	494a      	ldr	r1, [pc, #296]	@ (8001720 <AppUartDriver_init+0x218>)
 80015f8:	0013      	movs	r3, r2
 80015fa:	011b      	lsls	r3, r3, #4
 80015fc:	189b      	adds	r3, r3, r2
 80015fe:	009b      	lsls	r3, r3, #2
 8001600:	18cb      	adds	r3, r1, r3
 8001602:	3308      	adds	r3, #8
 8001604:	6a3a      	ldr	r2, [r7, #32]
 8001606:	601a      	str	r2, [r3, #0]
	inst_uart[uartIndx].tx_queue.input = 0U;
 8001608:	193b      	adds	r3, r7, r4
 800160a:	781a      	ldrb	r2, [r3, #0]
 800160c:	4944      	ldr	r1, [pc, #272]	@ (8001720 <AppUartDriver_init+0x218>)
 800160e:	0013      	movs	r3, r2
 8001610:	011b      	lsls	r3, r3, #4
 8001612:	189b      	adds	r3, r3, r2
 8001614:	009b      	lsls	r3, r3, #2
 8001616:	18cb      	adds	r3, r1, r3
 8001618:	3328      	adds	r3, #40	@ 0x28
 800161a:	2200      	movs	r2, #0
 800161c:	601a      	str	r2, [r3, #0]
	inst_uart[uartIndx].tx_queue.output = 0U;
 800161e:	193b      	adds	r3, r7, r4
 8001620:	781a      	ldrb	r2, [r3, #0]
 8001622:	493f      	ldr	r1, [pc, #252]	@ (8001720 <AppUartDriver_init+0x218>)
 8001624:	0013      	movs	r3, r2
 8001626:	011b      	lsls	r3, r3, #4
 8001628:	189b      	adds	r3, r3, r2
 800162a:	009b      	lsls	r3, r3, #2
 800162c:	18cb      	adds	r3, r1, r3
 800162e:	332c      	adds	r3, #44	@ 0x2c
 8001630:	2200      	movs	r2, #0
 8001632:	601a      	str	r2, [r3, #0]
	inst_uart[uartIndx].tx_queue.input_byte = 0U;
 8001634:	193b      	adds	r3, r7, r4
 8001636:	781a      	ldrb	r2, [r3, #0]
 8001638:	4939      	ldr	r1, [pc, #228]	@ (8001720 <AppUartDriver_init+0x218>)
 800163a:	0013      	movs	r3, r2
 800163c:	011b      	lsls	r3, r3, #4
 800163e:	189b      	adds	r3, r3, r2
 8001640:	009b      	lsls	r3, r3, #2
 8001642:	18cb      	adds	r3, r1, r3
 8001644:	3330      	adds	r3, #48	@ 0x30
 8001646:	2200      	movs	r2, #0
 8001648:	601a      	str	r2, [r3, #0]
	inst_uart[uartIndx].tx_queue.output_byte = 0U;
 800164a:	193b      	adds	r3, r7, r4
 800164c:	781a      	ldrb	r2, [r3, #0]
 800164e:	4934      	ldr	r1, [pc, #208]	@ (8001720 <AppUartDriver_init+0x218>)
 8001650:	0013      	movs	r3, r2
 8001652:	011b      	lsls	r3, r3, #4
 8001654:	189b      	adds	r3, r3, r2
 8001656:	009b      	lsls	r3, r3, #2
 8001658:	18cb      	adds	r3, r1, r3
 800165a:	3334      	adds	r3, #52	@ 0x34
 800165c:	2200      	movs	r2, #0
 800165e:	601a      	str	r2, [r3, #0]
	inst_uart[uartIndx].tx_queue.item_size = sizeof(inst_uart[uartIndx].tx_buf[0U]);
 8001660:	193b      	adds	r3, r7, r4
 8001662:	781a      	ldrb	r2, [r3, #0]
 8001664:	492e      	ldr	r1, [pc, #184]	@ (8001720 <AppUartDriver_init+0x218>)
 8001666:	0013      	movs	r3, r2
 8001668:	011b      	lsls	r3, r3, #4
 800166a:	189b      	adds	r3, r3, r2
 800166c:	009b      	lsls	r3, r3, #2
 800166e:	18cb      	adds	r3, r1, r3
 8001670:	3338      	adds	r3, #56	@ 0x38
 8001672:	2201      	movs	r2, #1
 8001674:	601a      	str	r2, [r3, #0]
	inst_uart[uartIndx].tx_queue.elements_in_array_minus_one = (tx_buf_size/inst_uart[uartIndx].tx_queue.item_size) - 1U;
 8001676:	193b      	adds	r3, r7, r4
 8001678:	781a      	ldrb	r2, [r3, #0]
 800167a:	4929      	ldr	r1, [pc, #164]	@ (8001720 <AppUartDriver_init+0x218>)
 800167c:	0013      	movs	r3, r2
 800167e:	011b      	lsls	r3, r3, #4
 8001680:	189b      	adds	r3, r3, r2
 8001682:	009b      	lsls	r3, r3, #2
 8001684:	18cb      	adds	r3, r1, r3
 8001686:	3338      	adds	r3, #56	@ 0x38
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	0019      	movs	r1, r3
 800168c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800168e:	f7fe fd93 	bl	80001b8 <__udivsi3>
 8001692:	0003      	movs	r3, r0
 8001694:	0019      	movs	r1, r3
 8001696:	193b      	adds	r3, r7, r4
 8001698:	781a      	ldrb	r2, [r3, #0]
 800169a:	3901      	subs	r1, #1
 800169c:	4820      	ldr	r0, [pc, #128]	@ (8001720 <AppUartDriver_init+0x218>)
 800169e:	0013      	movs	r3, r2
 80016a0:	011b      	lsls	r3, r3, #4
 80016a2:	189b      	adds	r3, r3, r2
 80016a4:	009b      	lsls	r3, r3, #2
 80016a6:	18c3      	adds	r3, r0, r3
 80016a8:	333c      	adds	r3, #60	@ 0x3c
 80016aa:	6019      	str	r1, [r3, #0]
	inst_uart[uartIndx].tx_queue.array = inst_uart[uartIndx].tx_buf;
 80016ac:	193b      	adds	r3, r7, r4
 80016ae:	7819      	ldrb	r1, [r3, #0]
 80016b0:	193b      	adds	r3, r7, r4
 80016b2:	781a      	ldrb	r2, [r3, #0]
 80016b4:	481a      	ldr	r0, [pc, #104]	@ (8001720 <AppUartDriver_init+0x218>)
 80016b6:	000b      	movs	r3, r1
 80016b8:	011b      	lsls	r3, r3, #4
 80016ba:	185b      	adds	r3, r3, r1
 80016bc:	009b      	lsls	r3, r3, #2
 80016be:	18c3      	adds	r3, r0, r3
 80016c0:	3308      	adds	r3, #8
 80016c2:	6819      	ldr	r1, [r3, #0]
 80016c4:	4816      	ldr	r0, [pc, #88]	@ (8001720 <AppUartDriver_init+0x218>)
 80016c6:	0013      	movs	r3, r2
 80016c8:	011b      	lsls	r3, r3, #4
 80016ca:	189b      	adds	r3, r3, r2
 80016cc:	009b      	lsls	r3, r3, #2
 80016ce:	18c3      	adds	r3, r0, r3
 80016d0:	3340      	adds	r3, #64	@ 0x40
 80016d2:	6019      	str	r1, [r3, #0]

	if (UART1INDX == uartIndx)
 80016d4:	193b      	adds	r3, r7, r4
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d106      	bne.n	80016ea <AppUartDriver_init+0x1e2>
	{
		/* tie the UARTA driver call-backs to the HAL ISRs */
		AppUartA_callback_init(uarta_driver_buffered_byte_tx,
 80016dc:	4a11      	ldr	r2, [pc, #68]	@ (8001724 <AppUartDriver_init+0x21c>)
 80016de:	4b12      	ldr	r3, [pc, #72]	@ (8001728 <AppUartDriver_init+0x220>)
 80016e0:	0011      	movs	r1, r2
 80016e2:	0018      	movs	r0, r3
 80016e4:	f7ff fce2 	bl	80010ac <AppUartA_callback_init>
 80016e8:	e00a      	b.n	8001700 <AppUartDriver_init+0x1f8>
		AppUartB_callback_init(uartb_driver_buffered_byte_tx,
								uartb_driver_buffered_byte_rx);
	}
#endif
#ifdef USING_UART3
	else if (UART3INDX == uartIndx)
 80016ea:	230f      	movs	r3, #15
 80016ec:	18fb      	adds	r3, r7, r3
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	2b01      	cmp	r3, #1
 80016f2:	d105      	bne.n	8001700 <AppUartDriver_init+0x1f8>
	{
		/* tie the UARTC driver call-backs to the HAL ISRs */
		AppUartC_callback_init(uartc_driver_buffered_byte_tx,
 80016f4:	4a0d      	ldr	r2, [pc, #52]	@ (800172c <AppUartDriver_init+0x224>)
 80016f6:	4b0e      	ldr	r3, [pc, #56]	@ (8001730 <AppUartDriver_init+0x228>)
 80016f8:	0011      	movs	r1, r2
 80016fa:	0018      	movs	r0, r3
 80016fc:	f7ff fcea 	bl	80010d4 <AppUartC_callback_init>
								uartd_driver_buffered_byte_rx);
	}
#endif

	//AppUart_init(inst_uart[uartIndx].uart_hal);
	MX_USART1_UART_Init();
 8001700:	f001 f872 	bl	80027e8 <MX_USART1_UART_Init>

	return &inst_uart[uartIndx];
 8001704:	230f      	movs	r3, #15
 8001706:	18fb      	adds	r3, r7, r3
 8001708:	781a      	ldrb	r2, [r3, #0]
 800170a:	0013      	movs	r3, r2
 800170c:	011b      	lsls	r3, r3, #4
 800170e:	189b      	adds	r3, r3, r2
 8001710:	009b      	lsls	r3, r3, #2
 8001712:	4a03      	ldr	r2, [pc, #12]	@ (8001720 <AppUartDriver_init+0x218>)
 8001714:	189b      	adds	r3, r3, r2
}
 8001716:	0018      	movs	r0, r3
 8001718:	46bd      	mov	sp, r7
 800171a:	b005      	add	sp, #20
 800171c:	bd90      	pop	{r4, r7, pc}
 800171e:	46c0      	nop			@ (mov r8, r8)
 8001720:	20000304 	.word	0x20000304
 8001724:	08001791 	.word	0x08001791
 8001728:	080017b5 	.word	0x080017b5
 800172c:	080017dd 	.word	0x080017dd
 8001730:	08001801 	.word	0x08001801

08001734 <AppUartDriver_init_this_uart>:


AppUartDriver_t* AppUartDriver_init_this_uart(uint8_t thisUartNumber)
{
 8001734:	b590      	push	{r4, r7, lr}
 8001736:	b085      	sub	sp, #20
 8001738:	af02      	add	r7, sp, #8
 800173a:	0002      	movs	r2, r0
 800173c:	1dfb      	adds	r3, r7, #7
 800173e:	701a      	strb	r2, [r3, #0]
	return AppUartDriver_init(thisUartNumber,
				              (uart_hal_t*) &uart_defs[thisUartNumber].uart_hal,
 8001740:	1dfb      	adds	r3, r7, #7
 8001742:	781a      	ldrb	r2, [r3, #0]
	return AppUartDriver_init(thisUartNumber,
 8001744:	0013      	movs	r3, r2
 8001746:	005b      	lsls	r3, r3, #1
 8001748:	189b      	adds	r3, r3, r2
 800174a:	00db      	lsls	r3, r3, #3
 800174c:	4a0e      	ldr	r2, [pc, #56]	@ (8001788 <AppUartDriver_init_this_uart+0x54>)
 800174e:	189b      	adds	r3, r3, r2
 8001750:	1d19      	adds	r1, r3, #4
						      AppUartDriverBuffers[thisUartNumber].rx_buf,
 8001752:	1dfb      	adds	r3, r7, #7
 8001754:	781b      	ldrb	r3, [r3, #0]
 8001756:	019a      	lsls	r2, r3, #6
 8001758:	4b0c      	ldr	r3, [pc, #48]	@ (800178c <AppUartDriver_init_this_uart+0x58>)
 800175a:	18d4      	adds	r4, r2, r3
						      RX_BUF_SIZE,
						      AppUartDriverBuffers[thisUartNumber].tx_buf,
 800175c:	1dfb      	adds	r3, r7, #7
 800175e:	781b      	ldrb	r3, [r3, #0]
 8001760:	019b      	lsls	r3, r3, #6
 8001762:	3320      	adds	r3, #32
 8001764:	001a      	movs	r2, r3
 8001766:	4b09      	ldr	r3, [pc, #36]	@ (800178c <AppUartDriver_init_this_uart+0x58>)
 8001768:	18d3      	adds	r3, r2, r3
	return AppUartDriver_init(thisUartNumber,
 800176a:	1dfa      	adds	r2, r7, #7
 800176c:	7810      	ldrb	r0, [r2, #0]
 800176e:	2220      	movs	r2, #32
 8001770:	9201      	str	r2, [sp, #4]
 8001772:	9300      	str	r3, [sp, #0]
 8001774:	2320      	movs	r3, #32
 8001776:	0022      	movs	r2, r4
 8001778:	f7ff fec6 	bl	8001508 <AppUartDriver_init>
 800177c:	0003      	movs	r3, r0
						      TX_BUF_SIZE);
}
 800177e:	0018      	movs	r0, r3
 8001780:	46bd      	mov	sp, r7
 8001782:	b003      	add	sp, #12
 8001784:	bd90      	pop	{r4, r7, pc}
 8001786:	46c0      	nop			@ (mov r8, r8)
 8001788:	200000c0 	.word	0x200000c0
 800178c:	20000284 	.word	0x20000284

08001790 <uarta_driver_buffered_byte_rx>:



static void uarta_driver_buffered_byte_rx(uint8_t byte_rx)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0
 8001796:	0002      	movs	r2, r0
 8001798:	1dfb      	adds	r3, r7, #7
 800179a:	701a      	strb	r2, [r3, #0]
	(void)cyclic_fifo_queue_add_item((cyclic_fifo_queue_struct*)&inst_uart[UART1INDX].rx_queue, &byte_rx);
 800179c:	1dfa      	adds	r2, r7, #7
 800179e:	4b04      	ldr	r3, [pc, #16]	@ (80017b0 <uarta_driver_buffered_byte_rx+0x20>)
 80017a0:	0011      	movs	r1, r2
 80017a2:	0018      	movs	r0, r3
 80017a4:	f004 fff4 	bl	8006790 <cyclic_fifo_queue_add_item>
}
 80017a8:	46c0      	nop			@ (mov r8, r8)
 80017aa:	46bd      	mov	sp, r7
 80017ac:	b002      	add	sp, #8
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	20000310 	.word	0x20000310

080017b4 <uarta_driver_buffered_byte_tx>:
}
#endif


static uint8_t uarta_driver_buffered_byte_tx(uint8_t* byte_to_tx)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b082      	sub	sp, #8
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
	return( cyclic_fifo_queue_get_item((cyclic_fifo_queue_struct*)&inst_uart[UART1INDX].tx_queue, byte_to_tx) == (unsigned int)0);
 80017bc:	687a      	ldr	r2, [r7, #4]
 80017be:	4b06      	ldr	r3, [pc, #24]	@ (80017d8 <uarta_driver_buffered_byte_tx+0x24>)
 80017c0:	0011      	movs	r1, r2
 80017c2:	0018      	movs	r0, r3
 80017c4:	f005 f829 	bl	800681a <cyclic_fifo_queue_get_item>
 80017c8:	0003      	movs	r3, r0
 80017ca:	425a      	negs	r2, r3
 80017cc:	4153      	adcs	r3, r2
 80017ce:	b2db      	uxtb	r3, r3
}
 80017d0:	0018      	movs	r0, r3
 80017d2:	46bd      	mov	sp, r7
 80017d4:	b002      	add	sp, #8
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	2000032c 	.word	0x2000032c

080017dc <uartc_driver_buffered_byte_rx>:
}
#endif

#ifdef USING_UART3
void uartc_driver_buffered_byte_rx(uint8_t byte_rx)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b082      	sub	sp, #8
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	0002      	movs	r2, r0
 80017e4:	1dfb      	adds	r3, r7, #7
 80017e6:	701a      	strb	r2, [r3, #0]
	(void)cyclic_fifo_queue_add_item(&inst_uart[UART3INDX].rx_queue, &byte_rx);
 80017e8:	1dfa      	adds	r2, r7, #7
 80017ea:	4b04      	ldr	r3, [pc, #16]	@ (80017fc <uartc_driver_buffered_byte_rx+0x20>)
 80017ec:	0011      	movs	r1, r2
 80017ee:	0018      	movs	r0, r3
 80017f0:	f004 ffce 	bl	8006790 <cyclic_fifo_queue_add_item>
}
 80017f4:	46c0      	nop			@ (mov r8, r8)
 80017f6:	46bd      	mov	sp, r7
 80017f8:	b002      	add	sp, #8
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	20000354 	.word	0x20000354

08001800 <uartc_driver_buffered_byte_tx>:
static uint8_t uartc_driver_buffered_byte_tx(uint8_t* byte_to_tx)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b082      	sub	sp, #8
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
	return( cyclic_fifo_queue_get_item(&inst_uart[UART3INDX].tx_queue, byte_to_tx) == (unsigned int)0);
 8001808:	687a      	ldr	r2, [r7, #4]
 800180a:	4b06      	ldr	r3, [pc, #24]	@ (8001824 <uartc_driver_buffered_byte_tx+0x24>)
 800180c:	0011      	movs	r1, r2
 800180e:	0018      	movs	r0, r3
 8001810:	f005 f803 	bl	800681a <cyclic_fifo_queue_get_item>
 8001814:	0003      	movs	r3, r0
 8001816:	425a      	negs	r2, r3
 8001818:	4153      	adcs	r3, r2
 800181a:	b2db      	uxtb	r3, r3
}
 800181c:	0018      	movs	r0, r3
 800181e:	46bd      	mov	sp, r7
 8001820:	b002      	add	sp, #8
 8001822:	bd80      	pop	{r7, pc}
 8001824:	20000370 	.word	0x20000370

08001828 <AppUartDriver_byte_available>:
}
#endif


unsigned int AppUartDriver_byte_available(uart_indx_t uartIndx, uint8_t *byte)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b082      	sub	sp, #8
 800182c:	af00      	add	r7, sp, #0
 800182e:	0002      	movs	r2, r0
 8001830:	6039      	str	r1, [r7, #0]
 8001832:	1dfb      	adds	r3, r7, #7
 8001834:	701a      	strb	r2, [r3, #0]
    return cyclic_fifo_queue_get_item(&inst_uart[uartIndx].rx_queue, byte);
 8001836:	1dfb      	adds	r3, r7, #7
 8001838:	781a      	ldrb	r2, [r3, #0]
 800183a:	0013      	movs	r3, r2
 800183c:	011b      	lsls	r3, r3, #4
 800183e:	189b      	adds	r3, r3, r2
 8001840:	009b      	lsls	r3, r3, #2
 8001842:	3308      	adds	r3, #8
 8001844:	001a      	movs	r2, r3
 8001846:	4b06      	ldr	r3, [pc, #24]	@ (8001860 <AppUartDriver_byte_available+0x38>)
 8001848:	18d3      	adds	r3, r2, r3
 800184a:	3304      	adds	r3, #4
 800184c:	683a      	ldr	r2, [r7, #0]
 800184e:	0011      	movs	r1, r2
 8001850:	0018      	movs	r0, r3
 8001852:	f004 ffe2 	bl	800681a <cyclic_fifo_queue_get_item>
 8001856:	0003      	movs	r3, r0
}
 8001858:	0018      	movs	r0, r3
 800185a:	46bd      	mov	sp, r7
 800185c:	b002      	add	sp, #8
 800185e:	bd80      	pop	{r7, pc}
 8001860:	20000304 	.word	0x20000304

08001864 <AppUartDriver_tx_add_byte>:
{
        return cyclic_fifo_queue_slots_remaining(&(inst_uart[uartIndx].tx_queue));
}

void AppUartDriver_tx_add_byte(uart_indx_t uartIndx, uint8_t const *byte)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b082      	sub	sp, #8
 8001868:	af00      	add	r7, sp, #0
 800186a:	0002      	movs	r2, r0
 800186c:	6039      	str	r1, [r7, #0]
 800186e:	1dfb      	adds	r3, r7, #7
 8001870:	701a      	strb	r2, [r3, #0]
    (void)cyclic_fifo_queue_add_item(&(inst_uart[uartIndx].tx_queue), byte);
 8001872:	1dfb      	adds	r3, r7, #7
 8001874:	781a      	ldrb	r2, [r3, #0]
 8001876:	0013      	movs	r3, r2
 8001878:	011b      	lsls	r3, r3, #4
 800187a:	189b      	adds	r3, r3, r2
 800187c:	009b      	lsls	r3, r3, #2
 800187e:	3328      	adds	r3, #40	@ 0x28
 8001880:	001a      	movs	r2, r3
 8001882:	4b05      	ldr	r3, [pc, #20]	@ (8001898 <AppUartDriver_tx_add_byte+0x34>)
 8001884:	18d3      	adds	r3, r2, r3
 8001886:	683a      	ldr	r2, [r7, #0]
 8001888:	0011      	movs	r1, r2
 800188a:	0018      	movs	r0, r3
 800188c:	f004 ff80 	bl	8006790 <cyclic_fifo_queue_add_item>
}
 8001890:	46c0      	nop			@ (mov r8, r8)
 8001892:	46bd      	mov	sp, r7
 8001894:	b002      	add	sp, #8
 8001896:	bd80      	pop	{r7, pc}
 8001898:	20000304 	.word	0x20000304

0800189c <AppUartDriver_start_transmit_if_stopped>:
{
	return AppUart_is_waiting_for_transmit_complete(uartIndx);
}

void AppUartDriver_start_transmit_if_stopped(uart_indx_t uartIndx)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b082      	sub	sp, #8
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	0002      	movs	r2, r0
 80018a4:	1dfb      	adds	r3, r7, #7
 80018a6:	701a      	strb	r2, [r3, #0]
	AppUart_disable_rx(uartIndx);
 80018a8:	1dfb      	adds	r3, r7, #7
 80018aa:	781b      	ldrb	r3, [r3, #0]
 80018ac:	0018      	movs	r0, r3
 80018ae:	f7ff fce5 	bl	800127c <AppUart_disable_rx>

	AppUart_enable_tx(uartIndx);
 80018b2:	1dfb      	adds	r3, r7, #7
 80018b4:	781b      	ldrb	r3, [r3, #0]
 80018b6:	0018      	movs	r0, r3
 80018b8:	f7ff fc20 	bl	80010fc <AppUart_enable_tx>
}
 80018bc:	46c0      	nop			@ (mov r8, r8)
 80018be:	46bd      	mov	sp, r7
 80018c0:	b002      	add	sp, #8
 80018c2:	bd80      	pop	{r7, pc}

080018c4 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b084      	sub	sp, #16
 80018c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80018ca:	1d3b      	adds	r3, r7, #4
 80018cc:	0018      	movs	r0, r3
 80018ce:	230c      	movs	r3, #12
 80018d0:	001a      	movs	r2, r3
 80018d2:	2100      	movs	r1, #0
 80018d4:	f008 fbde 	bl	800a094 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80018d8:	4b2d      	ldr	r3, [pc, #180]	@ (8001990 <MX_ADC1_Init+0xcc>)
 80018da:	4a2e      	ldr	r2, [pc, #184]	@ (8001994 <MX_ADC1_Init+0xd0>)
 80018dc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80018de:	4b2c      	ldr	r3, [pc, #176]	@ (8001990 <MX_ADC1_Init+0xcc>)
 80018e0:	2280      	movs	r2, #128	@ 0x80
 80018e2:	05d2      	lsls	r2, r2, #23
 80018e4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80018e6:	4b2a      	ldr	r3, [pc, #168]	@ (8001990 <MX_ADC1_Init+0xcc>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80018ec:	4b28      	ldr	r3, [pc, #160]	@ (8001990 <MX_ADC1_Init+0xcc>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80018f2:	4b27      	ldr	r3, [pc, #156]	@ (8001990 <MX_ADC1_Init+0xcc>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80018f8:	4b25      	ldr	r3, [pc, #148]	@ (8001990 <MX_ADC1_Init+0xcc>)
 80018fa:	2204      	movs	r2, #4
 80018fc:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80018fe:	4b24      	ldr	r3, [pc, #144]	@ (8001990 <MX_ADC1_Init+0xcc>)
 8001900:	2200      	movs	r2, #0
 8001902:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8001904:	4b22      	ldr	r3, [pc, #136]	@ (8001990 <MX_ADC1_Init+0xcc>)
 8001906:	2200      	movs	r2, #0
 8001908:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800190a:	4b21      	ldr	r3, [pc, #132]	@ (8001990 <MX_ADC1_Init+0xcc>)
 800190c:	2200      	movs	r2, #0
 800190e:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8001910:	4b1f      	ldr	r3, [pc, #124]	@ (8001990 <MX_ADC1_Init+0xcc>)
 8001912:	2201      	movs	r2, #1
 8001914:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001916:	4b1e      	ldr	r3, [pc, #120]	@ (8001990 <MX_ADC1_Init+0xcc>)
 8001918:	2220      	movs	r2, #32
 800191a:	2100      	movs	r1, #0
 800191c:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800191e:	4b1c      	ldr	r3, [pc, #112]	@ (8001990 <MX_ADC1_Init+0xcc>)
 8001920:	2200      	movs	r2, #0
 8001922:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001924:	4b1a      	ldr	r3, [pc, #104]	@ (8001990 <MX_ADC1_Init+0xcc>)
 8001926:	2200      	movs	r2, #0
 8001928:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800192a:	4b19      	ldr	r3, [pc, #100]	@ (8001990 <MX_ADC1_Init+0xcc>)
 800192c:	222c      	movs	r2, #44	@ 0x2c
 800192e:	2100      	movs	r1, #0
 8001930:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001932:	4b17      	ldr	r3, [pc, #92]	@ (8001990 <MX_ADC1_Init+0xcc>)
 8001934:	2200      	movs	r2, #0
 8001936:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8001938:	4b15      	ldr	r3, [pc, #84]	@ (8001990 <MX_ADC1_Init+0xcc>)
 800193a:	2200      	movs	r2, #0
 800193c:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 800193e:	4b14      	ldr	r3, [pc, #80]	@ (8001990 <MX_ADC1_Init+0xcc>)
 8001940:	2200      	movs	r2, #0
 8001942:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8001944:	4b12      	ldr	r3, [pc, #72]	@ (8001990 <MX_ADC1_Init+0xcc>)
 8001946:	223c      	movs	r2, #60	@ 0x3c
 8001948:	2100      	movs	r1, #0
 800194a:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 800194c:	4b10      	ldr	r3, [pc, #64]	@ (8001990 <MX_ADC1_Init+0xcc>)
 800194e:	2200      	movs	r2, #0
 8001950:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001952:	4b0f      	ldr	r3, [pc, #60]	@ (8001990 <MX_ADC1_Init+0xcc>)
 8001954:	0018      	movs	r0, r3
 8001956:	f001 f9fd 	bl	8002d54 <HAL_ADC_Init>
 800195a:	1e03      	subs	r3, r0, #0
 800195c:	d001      	beq.n	8001962 <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 800195e:	f000 fb3a 	bl	8001fd6 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001962:	1d3b      	adds	r3, r7, #4
 8001964:	4a0c      	ldr	r2, [pc, #48]	@ (8001998 <MX_ADC1_Init+0xd4>)
 8001966:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001968:	1d3b      	adds	r3, r7, #4
 800196a:	2200      	movs	r2, #0
 800196c:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 800196e:	1d3b      	adds	r3, r7, #4
 8001970:	2200      	movs	r2, #0
 8001972:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001974:	1d3a      	adds	r2, r7, #4
 8001976:	4b06      	ldr	r3, [pc, #24]	@ (8001990 <MX_ADC1_Init+0xcc>)
 8001978:	0011      	movs	r1, r2
 800197a:	0018      	movs	r0, r3
 800197c:	f001 fcc2 	bl	8003304 <HAL_ADC_ConfigChannel>
 8001980:	1e03      	subs	r3, r0, #0
 8001982:	d001      	beq.n	8001988 <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 8001984:	f000 fb27 	bl	8001fd6 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001988:	46c0      	nop			@ (mov r8, r8)
 800198a:	46bd      	mov	sp, r7
 800198c:	b004      	add	sp, #16
 800198e:	bd80      	pop	{r7, pc}
 8001990:	2000038c 	.word	0x2000038c
 8001994:	40012400 	.word	0x40012400
 8001998:	28000400 	.word	0x28000400

0800199c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800199c:	b590      	push	{r4, r7, lr}
 800199e:	b08b      	sub	sp, #44	@ 0x2c
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019a4:	2414      	movs	r4, #20
 80019a6:	193b      	adds	r3, r7, r4
 80019a8:	0018      	movs	r0, r3
 80019aa:	2314      	movs	r3, #20
 80019ac:	001a      	movs	r2, r3
 80019ae:	2100      	movs	r1, #0
 80019b0:	f008 fb70 	bl	800a094 <memset>
  if(adcHandle->Instance==ADC1)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a29      	ldr	r2, [pc, #164]	@ (8001a60 <HAL_ADC_MspInit+0xc4>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d14c      	bne.n	8001a58 <HAL_ADC_MspInit+0xbc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80019be:	4b29      	ldr	r3, [pc, #164]	@ (8001a64 <HAL_ADC_MspInit+0xc8>)
 80019c0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80019c2:	4b28      	ldr	r3, [pc, #160]	@ (8001a64 <HAL_ADC_MspInit+0xc8>)
 80019c4:	2180      	movs	r1, #128	@ 0x80
 80019c6:	0349      	lsls	r1, r1, #13
 80019c8:	430a      	orrs	r2, r1
 80019ca:	641a      	str	r2, [r3, #64]	@ 0x40
 80019cc:	4b25      	ldr	r3, [pc, #148]	@ (8001a64 <HAL_ADC_MspInit+0xc8>)
 80019ce:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80019d0:	2380      	movs	r3, #128	@ 0x80
 80019d2:	035b      	lsls	r3, r3, #13
 80019d4:	4013      	ands	r3, r2
 80019d6:	613b      	str	r3, [r7, #16]
 80019d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019da:	4b22      	ldr	r3, [pc, #136]	@ (8001a64 <HAL_ADC_MspInit+0xc8>)
 80019dc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80019de:	4b21      	ldr	r3, [pc, #132]	@ (8001a64 <HAL_ADC_MspInit+0xc8>)
 80019e0:	2101      	movs	r1, #1
 80019e2:	430a      	orrs	r2, r1
 80019e4:	635a      	str	r2, [r3, #52]	@ 0x34
 80019e6:	4b1f      	ldr	r3, [pc, #124]	@ (8001a64 <HAL_ADC_MspInit+0xc8>)
 80019e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80019ea:	2201      	movs	r2, #1
 80019ec:	4013      	ands	r3, r2
 80019ee:	60fb      	str	r3, [r7, #12]
 80019f0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019f2:	4b1c      	ldr	r3, [pc, #112]	@ (8001a64 <HAL_ADC_MspInit+0xc8>)
 80019f4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80019f6:	4b1b      	ldr	r3, [pc, #108]	@ (8001a64 <HAL_ADC_MspInit+0xc8>)
 80019f8:	2102      	movs	r1, #2
 80019fa:	430a      	orrs	r2, r1
 80019fc:	635a      	str	r2, [r3, #52]	@ 0x34
 80019fe:	4b19      	ldr	r3, [pc, #100]	@ (8001a64 <HAL_ADC_MspInit+0xc8>)
 8001a00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a02:	2202      	movs	r2, #2
 8001a04:	4013      	ands	r3, r2
 8001a06:	60bb      	str	r3, [r7, #8]
 8001a08:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN0
    PA7     ------> ADC1_IN7
    PB2     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = VBOOST_FDBK_Pin|VIN_MONITOR_Pin;
 8001a0a:	193b      	adds	r3, r7, r4
 8001a0c:	2281      	movs	r2, #129	@ 0x81
 8001a0e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a10:	193b      	adds	r3, r7, r4
 8001a12:	2203      	movs	r2, #3
 8001a14:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a16:	193b      	adds	r3, r7, r4
 8001a18:	2200      	movs	r2, #0
 8001a1a:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a1c:	193a      	adds	r2, r7, r4
 8001a1e:	23a0      	movs	r3, #160	@ 0xa0
 8001a20:	05db      	lsls	r3, r3, #23
 8001a22:	0011      	movs	r1, r2
 8001a24:	0018      	movs	r0, r3
 8001a26:	f001 ff43 	bl	80038b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = NFC_VOUT_SENSE_Pin;
 8001a2a:	193b      	adds	r3, r7, r4
 8001a2c:	2204      	movs	r2, #4
 8001a2e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a30:	193b      	adds	r3, r7, r4
 8001a32:	2203      	movs	r2, #3
 8001a34:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a36:	193b      	adds	r3, r7, r4
 8001a38:	2200      	movs	r2, #0
 8001a3a:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(NFC_VOUT_SENSE_GPIO_Port, &GPIO_InitStruct);
 8001a3c:	193b      	adds	r3, r7, r4
 8001a3e:	4a0a      	ldr	r2, [pc, #40]	@ (8001a68 <HAL_ADC_MspInit+0xcc>)
 8001a40:	0019      	movs	r1, r3
 8001a42:	0010      	movs	r0, r2
 8001a44:	f001 ff34 	bl	80038b0 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 8001a48:	2200      	movs	r2, #0
 8001a4a:	2100      	movs	r1, #0
 8001a4c:	200c      	movs	r0, #12
 8001a4e:	f001 fefd 	bl	800384c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8001a52:	200c      	movs	r0, #12
 8001a54:	f001 ff0f 	bl	8003876 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001a58:	46c0      	nop			@ (mov r8, r8)
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	b00b      	add	sp, #44	@ 0x2c
 8001a5e:	bd90      	pop	{r4, r7, pc}
 8001a60:	40012400 	.word	0x40012400
 8001a64:	40021000 	.word	0x40021000
 8001a68:	50000400 	.word	0x50000400

08001a6c <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8001a6c:	b590      	push	{r4, r7, lr}
 8001a6e:	b08b      	sub	sp, #44	@ 0x2c
 8001a70:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a72:	2414      	movs	r4, #20
 8001a74:	193b      	adds	r3, r7, r4
 8001a76:	0018      	movs	r0, r3
 8001a78:	2314      	movs	r3, #20
 8001a7a:	001a      	movs	r2, r3
 8001a7c:	2100      	movs	r1, #0
 8001a7e:	f008 fb09 	bl	800a094 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a82:	4b6f      	ldr	r3, [pc, #444]	@ (8001c40 <MX_GPIO_Init+0x1d4>)
 8001a84:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001a86:	4b6e      	ldr	r3, [pc, #440]	@ (8001c40 <MX_GPIO_Init+0x1d4>)
 8001a88:	2104      	movs	r1, #4
 8001a8a:	430a      	orrs	r2, r1
 8001a8c:	635a      	str	r2, [r3, #52]	@ 0x34
 8001a8e:	4b6c      	ldr	r3, [pc, #432]	@ (8001c40 <MX_GPIO_Init+0x1d4>)
 8001a90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a92:	2204      	movs	r2, #4
 8001a94:	4013      	ands	r3, r2
 8001a96:	613b      	str	r3, [r7, #16]
 8001a98:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001a9a:	4b69      	ldr	r3, [pc, #420]	@ (8001c40 <MX_GPIO_Init+0x1d4>)
 8001a9c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001a9e:	4b68      	ldr	r3, [pc, #416]	@ (8001c40 <MX_GPIO_Init+0x1d4>)
 8001aa0:	2120      	movs	r1, #32
 8001aa2:	430a      	orrs	r2, r1
 8001aa4:	635a      	str	r2, [r3, #52]	@ 0x34
 8001aa6:	4b66      	ldr	r3, [pc, #408]	@ (8001c40 <MX_GPIO_Init+0x1d4>)
 8001aa8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001aaa:	2220      	movs	r2, #32
 8001aac:	4013      	ands	r3, r2
 8001aae:	60fb      	str	r3, [r7, #12]
 8001ab0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ab2:	4b63      	ldr	r3, [pc, #396]	@ (8001c40 <MX_GPIO_Init+0x1d4>)
 8001ab4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001ab6:	4b62      	ldr	r3, [pc, #392]	@ (8001c40 <MX_GPIO_Init+0x1d4>)
 8001ab8:	2101      	movs	r1, #1
 8001aba:	430a      	orrs	r2, r1
 8001abc:	635a      	str	r2, [r3, #52]	@ 0x34
 8001abe:	4b60      	ldr	r3, [pc, #384]	@ (8001c40 <MX_GPIO_Init+0x1d4>)
 8001ac0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ac2:	2201      	movs	r2, #1
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	60bb      	str	r3, [r7, #8]
 8001ac8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aca:	4b5d      	ldr	r3, [pc, #372]	@ (8001c40 <MX_GPIO_Init+0x1d4>)
 8001acc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001ace:	4b5c      	ldr	r3, [pc, #368]	@ (8001c40 <MX_GPIO_Init+0x1d4>)
 8001ad0:	2102      	movs	r1, #2
 8001ad2:	430a      	orrs	r2, r1
 8001ad4:	635a      	str	r2, [r3, #52]	@ 0x34
 8001ad6:	4b5a      	ldr	r3, [pc, #360]	@ (8001c40 <MX_GPIO_Init+0x1d4>)
 8001ad8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ada:	2202      	movs	r2, #2
 8001adc:	4013      	ands	r3, r2
 8001ade:	607b      	str	r3, [r7, #4]
 8001ae0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ae2:	4b57      	ldr	r3, [pc, #348]	@ (8001c40 <MX_GPIO_Init+0x1d4>)
 8001ae4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001ae6:	4b56      	ldr	r3, [pc, #344]	@ (8001c40 <MX_GPIO_Init+0x1d4>)
 8001ae8:	2108      	movs	r1, #8
 8001aea:	430a      	orrs	r2, r1
 8001aec:	635a      	str	r2, [r3, #52]	@ 0x34
 8001aee:	4b54      	ldr	r3, [pc, #336]	@ (8001c40 <MX_GPIO_Init+0x1d4>)
 8001af0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001af2:	2208      	movs	r2, #8
 8001af4:	4013      	ands	r3, r2
 8001af6:	603b      	str	r3, [r7, #0]
 8001af8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, VBOOST_ENABLE_Pin|LED_RED_Pin|LED_YELLOW_Pin|LED_GREEN_Pin
 8001afa:	4952      	ldr	r1, [pc, #328]	@ (8001c44 <MX_GPIO_Init+0x1d8>)
 8001afc:	23a0      	movs	r3, #160	@ 0xa0
 8001afe:	05db      	lsls	r3, r3, #23
 8001b00:	2200      	movs	r2, #0
 8001b02:	0018      	movs	r0, r3
 8001b04:	f002 f838 	bl	8003b78 <HAL_GPIO_WritePin>
                          |CHARGE_EN_Pin|BATTERY_ENABLE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NFC_POWER_ENABLE_GPIO_Port, NFC_POWER_ENABLE_Pin, GPIO_PIN_RESET);
 8001b08:	4b4f      	ldr	r3, [pc, #316]	@ (8001c48 <MX_GPIO_Init+0x1dc>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	2140      	movs	r1, #64	@ 0x40
 8001b0e:	0018      	movs	r0, r3
 8001b10:	f002 f832 	bl	8003b78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 8001b14:	193b      	adds	r3, r7, r4
 8001b16:	2280      	movs	r2, #128	@ 0x80
 8001b18:	0192      	lsls	r2, r2, #6
 8001b1a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b1c:	193b      	adds	r3, r7, r4
 8001b1e:	2200      	movs	r2, #0
 8001b20:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b22:	193b      	adds	r3, r7, r4
 8001b24:	2200      	movs	r2, #0
 8001b26:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8001b28:	193b      	adds	r3, r7, r4
 8001b2a:	4a48      	ldr	r2, [pc, #288]	@ (8001c4c <MX_GPIO_Init+0x1e0>)
 8001b2c:	0019      	movs	r1, r3
 8001b2e:	0010      	movs	r0, r2
 8001b30:	f001 febe 	bl	80038b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 PC6 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_6|GPIO_PIN_7;
 8001b34:	193b      	adds	r3, r7, r4
 8001b36:	4a46      	ldr	r2, [pc, #280]	@ (8001c50 <MX_GPIO_Init+0x1e4>)
 8001b38:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b3a:	193b      	adds	r3, r7, r4
 8001b3c:	2203      	movs	r2, #3
 8001b3e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b40:	193b      	adds	r3, r7, r4
 8001b42:	2200      	movs	r2, #0
 8001b44:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b46:	193b      	adds	r3, r7, r4
 8001b48:	4a40      	ldr	r2, [pc, #256]	@ (8001c4c <MX_GPIO_Init+0x1e0>)
 8001b4a:	0019      	movs	r1, r3
 8001b4c:	0010      	movs	r0, r2
 8001b4e:	f001 feaf 	bl	80038b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001b52:	193b      	adds	r3, r7, r4
 8001b54:	2203      	movs	r2, #3
 8001b56:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b58:	193b      	adds	r3, r7, r4
 8001b5a:	2203      	movs	r2, #3
 8001b5c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b5e:	193b      	adds	r3, r7, r4
 8001b60:	2200      	movs	r2, #0
 8001b62:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001b64:	193b      	adds	r3, r7, r4
 8001b66:	4a3b      	ldr	r2, [pc, #236]	@ (8001c54 <MX_GPIO_Init+0x1e8>)
 8001b68:	0019      	movs	r1, r3
 8001b6a:	0010      	movs	r0, r2
 8001b6c:	f001 fea0 	bl	80038b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : VBOOST_ENABLE_Pin LED_RED_Pin LED_YELLOW_Pin LED_GREEN_Pin
                           CHARGE_EN_Pin BATTERY_ENABLE_Pin */
  GPIO_InitStruct.Pin = VBOOST_ENABLE_Pin|LED_RED_Pin|LED_YELLOW_Pin|LED_GREEN_Pin
 8001b70:	193b      	adds	r3, r7, r4
 8001b72:	4a34      	ldr	r2, [pc, #208]	@ (8001c44 <MX_GPIO_Init+0x1d8>)
 8001b74:	601a      	str	r2, [r3, #0]
                          |CHARGE_EN_Pin|BATTERY_ENABLE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b76:	193b      	adds	r3, r7, r4
 8001b78:	2201      	movs	r2, #1
 8001b7a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b7c:	193b      	adds	r3, r7, r4
 8001b7e:	2200      	movs	r2, #0
 8001b80:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b82:	193b      	adds	r3, r7, r4
 8001b84:	2200      	movs	r2, #0
 8001b86:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b88:	193a      	adds	r2, r7, r4
 8001b8a:	23a0      	movs	r3, #160	@ 0xa0
 8001b8c:	05db      	lsls	r3, r3, #23
 8001b8e:	0011      	movs	r1, r2
 8001b90:	0018      	movs	r0, r3
 8001b92:	f001 fe8d 	bl	80038b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB11 PB12 PB13
                           PB14 PB15 PB3 PB4
                           PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8001b96:	193b      	adds	r3, r7, r4
 8001b98:	4a2f      	ldr	r2, [pc, #188]	@ (8001c58 <MX_GPIO_Init+0x1ec>)
 8001b9a:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4
                          |GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b9c:	193b      	adds	r3, r7, r4
 8001b9e:	2203      	movs	r2, #3
 8001ba0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba2:	193b      	adds	r3, r7, r4
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ba8:	193b      	adds	r3, r7, r4
 8001baa:	4a27      	ldr	r2, [pc, #156]	@ (8001c48 <MX_GPIO_Init+0x1dc>)
 8001bac:	0019      	movs	r1, r3
 8001bae:	0010      	movs	r0, r2
 8001bb0:	f001 fe7e 	bl	80038b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001bb4:	193b      	adds	r3, r7, r4
 8001bb6:	2280      	movs	r2, #128	@ 0x80
 8001bb8:	0152      	lsls	r2, r2, #5
 8001bba:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001bbc:	193b      	adds	r3, r7, r4
 8001bbe:	2203      	movs	r2, #3
 8001bc0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc2:	193b      	adds	r3, r7, r4
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bc8:	193a      	adds	r2, r7, r4
 8001bca:	23a0      	movs	r3, #160	@ 0xa0
 8001bcc:	05db      	lsls	r3, r3, #23
 8001bce:	0011      	movs	r1, r2
 8001bd0:	0018      	movs	r0, r3
 8001bd2:	f001 fe6d 	bl	80038b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD2 PD3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001bd6:	193b      	adds	r3, r7, r4
 8001bd8:	220f      	movs	r2, #15
 8001bda:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001bdc:	193b      	adds	r3, r7, r4
 8001bde:	2203      	movs	r2, #3
 8001be0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be2:	193b      	adds	r3, r7, r4
 8001be4:	2200      	movs	r2, #0
 8001be6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001be8:	193b      	adds	r3, r7, r4
 8001bea:	4a1c      	ldr	r2, [pc, #112]	@ (8001c5c <MX_GPIO_Init+0x1f0>)
 8001bec:	0019      	movs	r1, r3
 8001bee:	0010      	movs	r0, r2
 8001bf0:	f001 fe5e 	bl	80038b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : NFC_POWER_ENABLE_Pin */
  GPIO_InitStruct.Pin = NFC_POWER_ENABLE_Pin;
 8001bf4:	193b      	adds	r3, r7, r4
 8001bf6:	2240      	movs	r2, #64	@ 0x40
 8001bf8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bfa:	193b      	adds	r3, r7, r4
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c00:	193b      	adds	r3, r7, r4
 8001c02:	2200      	movs	r2, #0
 8001c04:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c06:	193b      	adds	r3, r7, r4
 8001c08:	2200      	movs	r2, #0
 8001c0a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(NFC_POWER_ENABLE_GPIO_Port, &GPIO_InitStruct);
 8001c0c:	193b      	adds	r3, r7, r4
 8001c0e:	4a0e      	ldr	r2, [pc, #56]	@ (8001c48 <MX_GPIO_Init+0x1dc>)
 8001c10:	0019      	movs	r1, r3
 8001c12:	0010      	movs	r0, r2
 8001c14:	f001 fe4c 	bl	80038b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : NFC_FD_INT_Pin */
  GPIO_InitStruct.Pin = NFC_FD_INT_Pin;
 8001c18:	0021      	movs	r1, r4
 8001c1a:	187b      	adds	r3, r7, r1
 8001c1c:	2280      	movs	r2, #128	@ 0x80
 8001c1e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c20:	187b      	adds	r3, r7, r1
 8001c22:	2200      	movs	r2, #0
 8001c24:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c26:	187b      	adds	r3, r7, r1
 8001c28:	2200      	movs	r2, #0
 8001c2a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(NFC_FD_INT_GPIO_Port, &GPIO_InitStruct);
 8001c2c:	187b      	adds	r3, r7, r1
 8001c2e:	4a06      	ldr	r2, [pc, #24]	@ (8001c48 <MX_GPIO_Init+0x1dc>)
 8001c30:	0019      	movs	r1, r3
 8001c32:	0010      	movs	r0, r2
 8001c34:	f001 fe3c 	bl	80038b0 <HAL_GPIO_Init>

}
 8001c38:	46c0      	nop			@ (mov r8, r8)
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	b00b      	add	sp, #44	@ 0x2c
 8001c3e:	bd90      	pop	{r4, r7, pc}
 8001c40:	40021000 	.word	0x40021000
 8001c44:	0000883c 	.word	0x0000883c
 8001c48:	50000400 	.word	0x50000400
 8001c4c:	50000800 	.word	0x50000800
 8001c50:	0000c0c0 	.word	0x0000c0c0
 8001c54:	50001400 	.word	0x50001400
 8001c58:	0000f83a 	.word	0x0000f83a
 8001c5c:	50000c00 	.word	0x50000c00

08001c60 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001c64:	4b1b      	ldr	r3, [pc, #108]	@ (8001cd4 <MX_I2C1_Init+0x74>)
 8001c66:	4a1c      	ldr	r2, [pc, #112]	@ (8001cd8 <MX_I2C1_Init+0x78>)
 8001c68:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10906999;
 8001c6a:	4b1a      	ldr	r3, [pc, #104]	@ (8001cd4 <MX_I2C1_Init+0x74>)
 8001c6c:	4a1b      	ldr	r2, [pc, #108]	@ (8001cdc <MX_I2C1_Init+0x7c>)
 8001c6e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001c70:	4b18      	ldr	r3, [pc, #96]	@ (8001cd4 <MX_I2C1_Init+0x74>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c76:	4b17      	ldr	r3, [pc, #92]	@ (8001cd4 <MX_I2C1_Init+0x74>)
 8001c78:	2201      	movs	r2, #1
 8001c7a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c7c:	4b15      	ldr	r3, [pc, #84]	@ (8001cd4 <MX_I2C1_Init+0x74>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001c82:	4b14      	ldr	r3, [pc, #80]	@ (8001cd4 <MX_I2C1_Init+0x74>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001c88:	4b12      	ldr	r3, [pc, #72]	@ (8001cd4 <MX_I2C1_Init+0x74>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c8e:	4b11      	ldr	r3, [pc, #68]	@ (8001cd4 <MX_I2C1_Init+0x74>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c94:	4b0f      	ldr	r3, [pc, #60]	@ (8001cd4 <MX_I2C1_Init+0x74>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001c9a:	4b0e      	ldr	r3, [pc, #56]	@ (8001cd4 <MX_I2C1_Init+0x74>)
 8001c9c:	0018      	movs	r0, r3
 8001c9e:	f001 ff89 	bl	8003bb4 <HAL_I2C_Init>
 8001ca2:	1e03      	subs	r3, r0, #0
 8001ca4:	d001      	beq.n	8001caa <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001ca6:	f000 f996 	bl	8001fd6 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001caa:	4b0a      	ldr	r3, [pc, #40]	@ (8001cd4 <MX_I2C1_Init+0x74>)
 8001cac:	2100      	movs	r1, #0
 8001cae:	0018      	movs	r0, r3
 8001cb0:	f002 f826 	bl	8003d00 <HAL_I2CEx_ConfigAnalogFilter>
 8001cb4:	1e03      	subs	r3, r0, #0
 8001cb6:	d001      	beq.n	8001cbc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001cb8:	f000 f98d 	bl	8001fd6 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001cbc:	4b05      	ldr	r3, [pc, #20]	@ (8001cd4 <MX_I2C1_Init+0x74>)
 8001cbe:	2100      	movs	r1, #0
 8001cc0:	0018      	movs	r0, r3
 8001cc2:	f002 f869 	bl	8003d98 <HAL_I2CEx_ConfigDigitalFilter>
 8001cc6:	1e03      	subs	r3, r0, #0
 8001cc8:	d001      	beq.n	8001cce <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001cca:	f000 f984 	bl	8001fd6 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001cce:	46c0      	nop			@ (mov r8, r8)
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}
 8001cd4:	200003f0 	.word	0x200003f0
 8001cd8:	40005400 	.word	0x40005400
 8001cdc:	10906999 	.word	0x10906999

08001ce0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001ce0:	b590      	push	{r4, r7, lr}
 8001ce2:	b091      	sub	sp, #68	@ 0x44
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ce8:	232c      	movs	r3, #44	@ 0x2c
 8001cea:	18fb      	adds	r3, r7, r3
 8001cec:	0018      	movs	r0, r3
 8001cee:	2314      	movs	r3, #20
 8001cf0:	001a      	movs	r2, r3
 8001cf2:	2100      	movs	r1, #0
 8001cf4:	f008 f9ce 	bl	800a094 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001cf8:	2410      	movs	r4, #16
 8001cfa:	193b      	adds	r3, r7, r4
 8001cfc:	0018      	movs	r0, r3
 8001cfe:	231c      	movs	r3, #28
 8001d00:	001a      	movs	r2, r3
 8001d02:	2100      	movs	r1, #0
 8001d04:	f008 f9c6 	bl	800a094 <memset>
  if(i2cHandle->Instance==I2C1)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a22      	ldr	r2, [pc, #136]	@ (8001d98 <HAL_I2C_MspInit+0xb8>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d13e      	bne.n	8001d90 <HAL_I2C_MspInit+0xb0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001d12:	193b      	adds	r3, r7, r4
 8001d14:	2220      	movs	r2, #32
 8001d16:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001d18:	193b      	adds	r3, r7, r4
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d1e:	193b      	adds	r3, r7, r4
 8001d20:	0018      	movs	r0, r3
 8001d22:	f002 fded 	bl	8004900 <HAL_RCCEx_PeriphCLKConfig>
 8001d26:	1e03      	subs	r3, r0, #0
 8001d28:	d001      	beq.n	8001d2e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001d2a:	f000 f954 	bl	8001fd6 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d2e:	4b1b      	ldr	r3, [pc, #108]	@ (8001d9c <HAL_I2C_MspInit+0xbc>)
 8001d30:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001d32:	4b1a      	ldr	r3, [pc, #104]	@ (8001d9c <HAL_I2C_MspInit+0xbc>)
 8001d34:	2102      	movs	r1, #2
 8001d36:	430a      	orrs	r2, r1
 8001d38:	635a      	str	r2, [r3, #52]	@ 0x34
 8001d3a:	4b18      	ldr	r3, [pc, #96]	@ (8001d9c <HAL_I2C_MspInit+0xbc>)
 8001d3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d3e:	2202      	movs	r2, #2
 8001d40:	4013      	ands	r3, r2
 8001d42:	60fb      	str	r3, [r7, #12]
 8001d44:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = NFC_I2C_SCL_Pin|NFC_I2C_SDA_Pin;
 8001d46:	212c      	movs	r1, #44	@ 0x2c
 8001d48:	187b      	adds	r3, r7, r1
 8001d4a:	22c0      	movs	r2, #192	@ 0xc0
 8001d4c:	0092      	lsls	r2, r2, #2
 8001d4e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d50:	187b      	adds	r3, r7, r1
 8001d52:	2212      	movs	r2, #18
 8001d54:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d56:	187b      	adds	r3, r7, r1
 8001d58:	2200      	movs	r2, #0
 8001d5a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d5c:	187b      	adds	r3, r7, r1
 8001d5e:	2200      	movs	r2, #0
 8001d60:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8001d62:	187b      	adds	r3, r7, r1
 8001d64:	2206      	movs	r2, #6
 8001d66:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d68:	187b      	adds	r3, r7, r1
 8001d6a:	4a0d      	ldr	r2, [pc, #52]	@ (8001da0 <HAL_I2C_MspInit+0xc0>)
 8001d6c:	0019      	movs	r1, r3
 8001d6e:	0010      	movs	r0, r2
 8001d70:	f001 fd9e 	bl	80038b0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001d74:	4b09      	ldr	r3, [pc, #36]	@ (8001d9c <HAL_I2C_MspInit+0xbc>)
 8001d76:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001d78:	4b08      	ldr	r3, [pc, #32]	@ (8001d9c <HAL_I2C_MspInit+0xbc>)
 8001d7a:	2180      	movs	r1, #128	@ 0x80
 8001d7c:	0389      	lsls	r1, r1, #14
 8001d7e:	430a      	orrs	r2, r1
 8001d80:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001d82:	4b06      	ldr	r3, [pc, #24]	@ (8001d9c <HAL_I2C_MspInit+0xbc>)
 8001d84:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001d86:	2380      	movs	r3, #128	@ 0x80
 8001d88:	039b      	lsls	r3, r3, #14
 8001d8a:	4013      	ands	r3, r2
 8001d8c:	60bb      	str	r3, [r7, #8]
 8001d8e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001d90:	46c0      	nop			@ (mov r8, r8)
 8001d92:	46bd      	mov	sp, r7
 8001d94:	b011      	add	sp, #68	@ 0x44
 8001d96:	bd90      	pop	{r4, r7, pc}
 8001d98:	40005400 	.word	0x40005400
 8001d9c:	40021000 	.word	0x40021000
 8001da0:	50000400 	.word	0x50000400

08001da4 <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8001da8:	4b0b      	ldr	r3, [pc, #44]	@ (8001dd8 <MX_IWDG_Init+0x34>)
 8001daa:	4a0c      	ldr	r2, [pc, #48]	@ (8001ddc <MX_IWDG_Init+0x38>)
 8001dac:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
 8001dae:	4b0a      	ldr	r3, [pc, #40]	@ (8001dd8 <MX_IWDG_Init+0x34>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 8001db4:	4b08      	ldr	r3, [pc, #32]	@ (8001dd8 <MX_IWDG_Init+0x34>)
 8001db6:	4a0a      	ldr	r2, [pc, #40]	@ (8001de0 <MX_IWDG_Init+0x3c>)
 8001db8:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 4095;
 8001dba:	4b07      	ldr	r3, [pc, #28]	@ (8001dd8 <MX_IWDG_Init+0x34>)
 8001dbc:	4a08      	ldr	r2, [pc, #32]	@ (8001de0 <MX_IWDG_Init+0x3c>)
 8001dbe:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8001dc0:	4b05      	ldr	r3, [pc, #20]	@ (8001dd8 <MX_IWDG_Init+0x34>)
 8001dc2:	0018      	movs	r0, r3
 8001dc4:	f002 f834 	bl	8003e30 <HAL_IWDG_Init>
 8001dc8:	1e03      	subs	r3, r0, #0
 8001dca:	d001      	beq.n	8001dd0 <MX_IWDG_Init+0x2c>
  {
    Error_Handler();
 8001dcc:	f000 f903 	bl	8001fd6 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8001dd0:	46c0      	nop			@ (mov r8, r8)
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	46c0      	nop			@ (mov r8, r8)
 8001dd8:	20000444 	.word	0x20000444
 8001ddc:	40003000 	.word	0x40003000
 8001de0:	00000fff 	.word	0x00000fff

08001de4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b082      	sub	sp, #8
 8001de8:	af00      	add	r7, sp, #0

	static bool Authorized			= false;
	static bool ValidSdcIsPresent	= false;
	static bool buttonPressed		= false;

	bool chirp = true;
 8001dea:	1dfb      	adds	r3, r7, #7
 8001dec:	2201      	movs	r2, #1
 8001dee:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001df0:	f000 fdf8 	bl	80029e4 <HAL_Init>
 #endif

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001df4:	f000 f892 	bl	8001f1c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */

  // Update the SystemCoreClock variable. Note that this function must be called any time that the
  // system clock is changed.
  SystemCoreClockUpdate();
 8001df8:	f000 f942 	bl	8002080 <SystemCoreClockUpdate>

  hal_gpio_init();
 8001dfc:	f005 facb 	bl	8007396 <hal_gpio_init>

  MX_I2C1_Init();
 8001e00:	f7ff ff2e 	bl	8001c60 <MX_I2C1_Init>

  MX_ADC1_Init();
 8001e04:	f7ff fd5e 	bl	80018c4 <MX_ADC1_Init>

  // The Vboost duty cycle must be retrieved from flash before initializing the VBoost PWM timer.
  GetVBoostVboostPwmDutyCyclePctFromFlash();
 8001e08:	f7fe fed3 	bl	8000bb2 <GetVBoostVboostPwmDutyCyclePctFromFlash>

  hal_timer_init();
 8001e0c:	f005 fb3e 	bl	800748c <hal_timer_init>



  WptControllerInit();
 8001e10:	f7fe fef8 	bl	8000c04 <WptControllerInit>
#if 0
    // TODO: decide what to do with these initialization function call:   
	hal_interrupts_enable();
#endif
	
	irkey_gl_init(IR_INTERFACE_UART_INDEX);
 8001e14:	2000      	movs	r0, #0
 8001e16:	f7fe ff4f 	bl	8000cb8 <irkey_gl_init>
  MX_USART3_UART_Init();
  MX_TIM6_Init();
  MX_TIM15_Init();
  /* USER CODE BEGIN 2 */
#endif
  hal_watchdog_init(); // Initialize the the watch dog handle in submod-hal_generic
 8001e1a:	f006 f825 	bl	8007e68 <hal_watchdog_init>

  // Turn on the red LED to indicate that we have power but we are not authorized.
  while (1)
  {
	  // Get the number of milliseconds since the last trip through this loop:
	  TicksinceLastLoop = hal_timer_get_ticks_since_count(LastLoopTick);
 8001e1e:	4b3a      	ldr	r3, [pc, #232]	@ (8001f08 <main+0x124>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	0018      	movs	r0, r3
 8001e24:	f005 fb17 	bl	8007456 <hal_timer_get_ticks_since_count>
 8001e28:	0002      	movs	r2, r0
 8001e2a:	4b38      	ldr	r3, [pc, #224]	@ (8001f0c <main+0x128>)
 8001e2c:	601a      	str	r2, [r3, #0]

	  // Get the current sys tick.
	  LastLoopTick = hal_timer_get_systick();
 8001e2e:	f005 fb0a 	bl	8007446 <hal_timer_get_systick>
 8001e32:	0002      	movs	r2, r0
 8001e34:	4b34      	ldr	r3, [pc, #208]	@ (8001f08 <main+0x124>)
 8001e36:	601a      	str	r2, [r3, #0]

	  /* reset the WDT */
	  hal_watchdog_reset();
 8001e38:	f006 f828 	bl	8007e8c <hal_watchdog_reset>

	  ac_audio_controller((uint16_t) TicksinceLastLoop);
 8001e3c:	4b33      	ldr	r3, [pc, #204]	@ (8001f0c <main+0x128>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	b29b      	uxth	r3, r3
 8001e42:	0018      	movs	r0, r3
 8001e44:	f7fe fb96 	bl	8000574 <ac_audio_controller>

      UtilDebounceReadAndDebounceInputs();
 8001e48:	f7fe fd8a 	bl	8000960 <UtilDebounceReadAndDebounceInputs>


      TickSinceLastExecution = hal_timer_get_ticks_since_count(LastExecutionTickCount);
 8001e4c:	4b30      	ldr	r3, [pc, #192]	@ (8001f10 <main+0x12c>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	0018      	movs	r0, r3
 8001e52:	f005 fb00 	bl	8007456 <hal_timer_get_ticks_since_count>
 8001e56:	0002      	movs	r2, r0
 8001e58:	4b2e      	ldr	r3, [pc, #184]	@ (8001f14 <main+0x130>)
 8001e5a:	601a      	str	r2, [r3, #0]

	  if (LOOP_THROTTLE_INTERVAL <= TickSinceLastExecution)
 8001e5c:	4b2d      	ldr	r3, [pc, #180]	@ (8001f14 <main+0x130>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	2b09      	cmp	r3, #9
 8001e62:	d94e      	bls.n	8001f02 <main+0x11e>
	  {
		  irKey_gl_HandleTimers(TickSinceLastExecution);
 8001e64:	4b2b      	ldr	r3, [pc, #172]	@ (8001f14 <main+0x130>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	0018      	movs	r0, r3
 8001e6a:	f7fe ff91 	bl	8000d90 <irKey_gl_HandleTimers>

		  LastExecutionTickCount = hal_timer_get_systick();
 8001e6e:	f005 faea 	bl	8007446 <hal_timer_get_systick>
 8001e72:	0002      	movs	r2, r0
 8001e74:	4b26      	ldr	r3, [pc, #152]	@ (8001f10 <main+0x12c>)
 8001e76:	601a      	str	r2, [r3, #0]
#if 0
		  if ((true == IRCommsDetacherIsAuthorized()) && (true == ValidSdcIsPresent))
#endif
		  {
			  /* reset the WDT */
			  hal_watchdog_reset();
 8001e78:	f006 f808 	bl	8007e8c <hal_watchdog_reset>

			  irkey_gl_key_handler();
 8001e7c:	f7fe ffe6 	bl	8000e4c <irkey_gl_key_handler>

			  // check debounced button and interrupt inputs
			  if (false == buttonPressed)
 8001e80:	4b25      	ldr	r3, [pc, #148]	@ (8001f18 <main+0x134>)
 8001e82:	781b      	ldrb	r3, [r3, #0]
 8001e84:	2201      	movs	r2, #1
 8001e86:	4053      	eors	r3, r2
 8001e88:	b2db      	uxtb	r3, r3
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d028      	beq.n	8001ee0 <main+0xfc>
			  {
			      // Check the User Button to see if it was just pressed.
				  if (UtilDebounceCheckPinState(USER_BUTTON,BUTTON_PRESSED) == true)
 8001e8e:	2100      	movs	r1, #0
 8001e90:	2000      	movs	r0, #0
 8001e92:	f7fe fde9 	bl	8000a68 <UtilDebounceCheckPinState>
 8001e96:	1e03      	subs	r3, r0, #0
 8001e98:	d033      	beq.n	8001f02 <main+0x11e>
				  {
#if USE_RTT_FOR_DEBUGGING && DEBUG_MAIN // Note that both of these are #defined to 1 in periphdefs.h.
			debug_rtt_printf("main() The user button has been pressed.\r\n");
#endif
					  buttonPressed = true;
 8001e9a:	4b1f      	ldr	r3, [pc, #124]	@ (8001f18 <main+0x134>)
 8001e9c:	2201      	movs	r2, #1
 8001e9e:	701a      	strb	r2, [r3, #0]

					  // Activate the WPT PWM
					  hal_timer_RunPwAtDutyCycle(TIMER_WPT_PWM, PWM_DEFAULT_DUTY_CYCLE);
 8001ea0:	2132      	movs	r1, #50	@ 0x32
 8001ea2:	2001      	movs	r0, #1
 8001ea4:	f005 fb02 	bl	80074ac <hal_timer_RunPwAtDutyCycle>

					  // Activate Vboost PWM
					  VboostStartPWM();
 8001ea8:	f7fe fe94 	bl	8000bd4 <VboostStartPWM>

					  // Activate Piezo PWM
					  // hal_timer_RunPwAtDutyCycle(TIMER_PIEZO_PWM, PWM_DEFAULT_DUTY_CYCLE);
					  // Do one chirp

					  if (chirp == true)
 8001eac:	1dfb      	adds	r3, r7, #7
 8001eae:	781b      	ldrb	r3, [r3, #0]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d00a      	beq.n	8001eca <main+0xe6>
					  {
					     ac_chirp(1);
 8001eb4:	2001      	movs	r0, #1
 8001eb6:	f7fe fb25 	bl	8000504 <ac_chirp>
					     chirp = false;
 8001eba:	1dfb      	adds	r3, r7, #7
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	701a      	strb	r2, [r3, #0]
					     hal_gpio_set_output(LED_GREEN,true);
 8001ec0:	2101      	movs	r1, #1
 8001ec2:	2003      	movs	r0, #3
 8001ec4:	f005 fa6e 	bl	80073a4 <hal_gpio_set_output>
 8001ec8:	e01b      	b.n	8001f02 <main+0x11e>
					  }
					  else
					  {
						  ac_error_tone(1);
 8001eca:	2001      	movs	r0, #1
 8001ecc:	f7fe fb36 	bl	800053c <ac_error_tone>
						  chirp = true;
 8001ed0:	1dfb      	adds	r3, r7, #7
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	701a      	strb	r2, [r3, #0]
						     hal_gpio_set_output(LED_GREEN,false);
 8001ed6:	2100      	movs	r1, #0
 8001ed8:	2003      	movs	r0, #3
 8001eda:	f005 fa63 	bl	80073a4 <hal_gpio_set_output>
 8001ede:	e010      	b.n	8001f02 <main+0x11e>
				  }
			  }
			  else
			  {
				  // Check the User Button to see if it was just release.
				  if (UtilDebounceCheckPinState(USER_BUTTON,BUTTON_RELEASED) == true)
 8001ee0:	2101      	movs	r1, #1
 8001ee2:	2000      	movs	r0, #0
 8001ee4:	f7fe fdc0 	bl	8000a68 <UtilDebounceCheckPinState>
 8001ee8:	1e03      	subs	r3, r0, #0
 8001eea:	d00a      	beq.n	8001f02 <main+0x11e>
				  {
#if USE_RTT_FOR_DEBUGGING && DEBUG_MAIN // Note that both of these are #defined to 1 in periphdefs.h.
			          debug_rtt_printf("main() The user button has been released.\r\n");
#endif
					  buttonPressed = false;
 8001eec:	4b0a      	ldr	r3, [pc, #40]	@ (8001f18 <main+0x134>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	701a      	strb	r2, [r3, #0]

					  // Stop the WPT PWM
					  hal_timer_StopPwmOutput(TIMER_WPT_PWM);
 8001ef2:	2001      	movs	r0, #1
 8001ef4:	f005 fb14 	bl	8007520 <hal_timer_StopPwmOutput>

					  // Stop the Vboost PWM
					  VboostStopPWM();
 8001ef8:	f7fe fe78 	bl	8000bec <VboostStopPWM>

					  // Stop the Piezo PWM
					  hal_timer_StopPwmOutput(TIMER_PIEZO_PWM);
 8001efc:	2000      	movs	r0, #0
 8001efe:	f005 fb0f 	bl	8007520 <hal_timer_StopPwmOutput>
	  }

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  hal_watchdog_reset();
 8001f02:	f005 ffc3 	bl	8007e8c <hal_watchdog_reset>
	  TicksinceLastLoop = hal_timer_get_ticks_since_count(LastLoopTick);
 8001f06:	e78a      	b.n	8001e1e <main+0x3a>
 8001f08:	20000454 	.word	0x20000454
 8001f0c:	20000458 	.word	0x20000458
 8001f10:	2000045c 	.word	0x2000045c
 8001f14:	20000460 	.word	0x20000460
 8001f18:	20000464 	.word	0x20000464

08001f1c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f1c:	b590      	push	{r4, r7, lr}
 8001f1e:	b093      	sub	sp, #76	@ 0x4c
 8001f20:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f22:	2414      	movs	r4, #20
 8001f24:	193b      	adds	r3, r7, r4
 8001f26:	0018      	movs	r0, r3
 8001f28:	2334      	movs	r3, #52	@ 0x34
 8001f2a:	001a      	movs	r2, r3
 8001f2c:	2100      	movs	r1, #0
 8001f2e:	f008 f8b1 	bl	800a094 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f32:	1d3b      	adds	r3, r7, #4
 8001f34:	0018      	movs	r0, r3
 8001f36:	2310      	movs	r3, #16
 8001f38:	001a      	movs	r2, r3
 8001f3a:	2100      	movs	r1, #0
 8001f3c:	f008 f8aa 	bl	800a094 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f40:	2380      	movs	r3, #128	@ 0x80
 8001f42:	009b      	lsls	r3, r3, #2
 8001f44:	0018      	movs	r0, r3
 8001f46:	f001 ffd5 	bl	8003ef4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8001f4a:	193b      	adds	r3, r7, r4
 8001f4c:	220a      	movs	r2, #10
 8001f4e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001f50:	193b      	adds	r3, r7, r4
 8001f52:	2280      	movs	r2, #128	@ 0x80
 8001f54:	0052      	lsls	r2, r2, #1
 8001f56:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8001f58:	0021      	movs	r1, r4
 8001f5a:	187b      	adds	r3, r7, r1
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001f60:	187b      	adds	r3, r7, r1
 8001f62:	2240      	movs	r2, #64	@ 0x40
 8001f64:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001f66:	187b      	adds	r3, r7, r1
 8001f68:	2201      	movs	r2, #1
 8001f6a:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f6c:	187b      	adds	r3, r7, r1
 8001f6e:	2202      	movs	r2, #2
 8001f70:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001f72:	187b      	adds	r3, r7, r1
 8001f74:	2202      	movs	r2, #2
 8001f76:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8001f78:	187b      	adds	r3, r7, r1
 8001f7a:	2210      	movs	r2, #16
 8001f7c:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 27;
 8001f7e:	187b      	adds	r3, r7, r1
 8001f80:	221b      	movs	r2, #27
 8001f82:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001f84:	187b      	adds	r3, r7, r1
 8001f86:	2280      	movs	r2, #128	@ 0x80
 8001f88:	0292      	lsls	r2, r2, #10
 8001f8a:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 8001f8c:	187b      	adds	r3, r7, r1
 8001f8e:	22c0      	movs	r2, #192	@ 0xc0
 8001f90:	05d2      	lsls	r2, r2, #23
 8001f92:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f94:	187b      	adds	r3, r7, r1
 8001f96:	0018      	movs	r0, r3
 8001f98:	f001 fff8 	bl	8003f8c <HAL_RCC_OscConfig>
 8001f9c:	1e03      	subs	r3, r0, #0
 8001f9e:	d001      	beq.n	8001fa4 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8001fa0:	f000 f819 	bl	8001fd6 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001fa4:	1d3b      	adds	r3, r7, #4
 8001fa6:	2207      	movs	r2, #7
 8001fa8:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001faa:	1d3b      	adds	r3, r7, #4
 8001fac:	2202      	movs	r2, #2
 8001fae:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001fb0:	1d3b      	adds	r3, r7, #4
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001fb6:	1d3b      	adds	r3, r7, #4
 8001fb8:	2200      	movs	r2, #0
 8001fba:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001fbc:	1d3b      	adds	r3, r7, #4
 8001fbe:	2102      	movs	r1, #2
 8001fc0:	0018      	movs	r0, r3
 8001fc2:	f002 faf3 	bl	80045ac <HAL_RCC_ClockConfig>
 8001fc6:	1e03      	subs	r3, r0, #0
 8001fc8:	d001      	beq.n	8001fce <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8001fca:	f000 f804 	bl	8001fd6 <Error_Handler>
  }
}
 8001fce:	46c0      	nop			@ (mov r8, r8)
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	b013      	add	sp, #76	@ 0x4c
 8001fd4:	bd90      	pop	{r4, r7, pc}

08001fd6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001fd6:	b580      	push	{r7, lr}
 8001fd8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001fda:	b672      	cpsid	i
}
 8001fdc:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001fde:	46c0      	nop			@ (mov r8, r8)
 8001fe0:	e7fd      	b.n	8001fde <Error_Handler+0x8>
	...

08001fe4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b082      	sub	sp, #8
 8001fe8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fea:	4b11      	ldr	r3, [pc, #68]	@ (8002030 <HAL_MspInit+0x4c>)
 8001fec:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001fee:	4b10      	ldr	r3, [pc, #64]	@ (8002030 <HAL_MspInit+0x4c>)
 8001ff0:	2101      	movs	r1, #1
 8001ff2:	430a      	orrs	r2, r1
 8001ff4:	641a      	str	r2, [r3, #64]	@ 0x40
 8001ff6:	4b0e      	ldr	r3, [pc, #56]	@ (8002030 <HAL_MspInit+0x4c>)
 8001ff8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	607b      	str	r3, [r7, #4]
 8002000:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002002:	4b0b      	ldr	r3, [pc, #44]	@ (8002030 <HAL_MspInit+0x4c>)
 8002004:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002006:	4b0a      	ldr	r3, [pc, #40]	@ (8002030 <HAL_MspInit+0x4c>)
 8002008:	2180      	movs	r1, #128	@ 0x80
 800200a:	0549      	lsls	r1, r1, #21
 800200c:	430a      	orrs	r2, r1
 800200e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002010:	4b07      	ldr	r3, [pc, #28]	@ (8002030 <HAL_MspInit+0x4c>)
 8002012:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002014:	2380      	movs	r3, #128	@ 0x80
 8002016:	055b      	lsls	r3, r3, #21
 8002018:	4013      	ands	r3, r2
 800201a:	603b      	str	r3, [r7, #0]
 800201c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 800201e:	23c0      	movs	r3, #192	@ 0xc0
 8002020:	00db      	lsls	r3, r3, #3
 8002022:	0018      	movs	r0, r3
 8002024:	f000 fd64 	bl	8002af0 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002028:	46c0      	nop			@ (mov r8, r8)
 800202a:	46bd      	mov	sp, r7
 800202c:	b002      	add	sp, #8
 800202e:	bd80      	pop	{r7, pc}
 8002030:	40021000 	.word	0x40021000

08002034 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002038:	46c0      	nop			@ (mov r8, r8)
 800203a:	e7fd      	b.n	8002038 <NMI_Handler+0x4>

0800203c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002040:	46c0      	nop			@ (mov r8, r8)
 8002042:	e7fd      	b.n	8002040 <HardFault_Handler+0x4>

08002044 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002048:	46c0      	nop			@ (mov r8, r8)
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}

0800204e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800204e:	b580      	push	{r7, lr}
 8002050:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002052:	46c0      	nop			@ (mov r8, r8)
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}

08002058 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800205c:	f000 fd2c 	bl	8002ab8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002060:	46c0      	nop			@ (mov r8, r8)
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}
	...

08002068 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 interrupt.
  */
void ADC1_IRQHandler(void)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800206c:	4b03      	ldr	r3, [pc, #12]	@ (800207c <ADC1_IRQHandler+0x14>)
 800206e:	0018      	movs	r0, r3
 8002070:	f001 f818 	bl	80030a4 <HAL_ADC_IRQHandler>
  /* USER CODE END USART3_4_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
  /* USER CODE BEGIN USART3_4_IRQn 1 */
#endif
  /* USER CODE END USART3_4_IRQn 1 */
}
 8002074:	46c0      	nop			@ (mov r8, r8)
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}
 800207a:	46c0      	nop			@ (mov r8, r8)
 800207c:	2000038c 	.word	0x2000038c

08002080 <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b086      	sub	sp, #24
 8002084:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t pllm;
  uint32_t hsidiv;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002086:	4b3b      	ldr	r3, [pc, #236]	@ (8002174 <SystemCoreClockUpdate+0xf4>)
 8002088:	689b      	ldr	r3, [r3, #8]
 800208a:	2238      	movs	r2, #56	@ 0x38
 800208c:	4013      	ands	r3, r2
 800208e:	2b20      	cmp	r3, #32
 8002090:	d011      	beq.n	80020b6 <SystemCoreClockUpdate+0x36>
 8002092:	d849      	bhi.n	8002128 <SystemCoreClockUpdate+0xa8>
 8002094:	2b18      	cmp	r3, #24
 8002096:	d009      	beq.n	80020ac <SystemCoreClockUpdate+0x2c>
 8002098:	d846      	bhi.n	8002128 <SystemCoreClockUpdate+0xa8>
 800209a:	2b08      	cmp	r3, #8
 800209c:	d002      	beq.n	80020a4 <SystemCoreClockUpdate+0x24>
 800209e:	2b10      	cmp	r3, #16
 80020a0:	d00e      	beq.n	80020c0 <SystemCoreClockUpdate+0x40>
 80020a2:	e041      	b.n	8002128 <SystemCoreClockUpdate+0xa8>
  {
    case RCC_CFGR_SWS_0:                /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
 80020a4:	4b34      	ldr	r3, [pc, #208]	@ (8002178 <SystemCoreClockUpdate+0xf8>)
 80020a6:	4a35      	ldr	r2, [pc, #212]	@ (800217c <SystemCoreClockUpdate+0xfc>)
 80020a8:	601a      	str	r2, [r3, #0]
      break;
 80020aa:	e04f      	b.n	800214c <SystemCoreClockUpdate+0xcc>

    case (RCC_CFGR_SWS_1 | RCC_CFGR_SWS_0):  /* LSI used as system clock */
      SystemCoreClock = LSI_VALUE;
 80020ac:	4b32      	ldr	r3, [pc, #200]	@ (8002178 <SystemCoreClockUpdate+0xf8>)
 80020ae:	22fa      	movs	r2, #250	@ 0xfa
 80020b0:	01d2      	lsls	r2, r2, #7
 80020b2:	601a      	str	r2, [r3, #0]
      break;
 80020b4:	e04a      	b.n	800214c <SystemCoreClockUpdate+0xcc>

    case RCC_CFGR_SWS_2:                /* LSE used as system clock */
      SystemCoreClock = LSE_VALUE;
 80020b6:	4b30      	ldr	r3, [pc, #192]	@ (8002178 <SystemCoreClockUpdate+0xf8>)
 80020b8:	2280      	movs	r2, #128	@ 0x80
 80020ba:	0212      	lsls	r2, r2, #8
 80020bc:	601a      	str	r2, [r3, #0]
      break;
 80020be:	e045      	b.n	800214c <SystemCoreClockUpdate+0xcc>

    case RCC_CFGR_SWS_1:  /* PLL used as system clock */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80020c0:	4b2c      	ldr	r3, [pc, #176]	@ (8002174 <SystemCoreClockUpdate+0xf4>)
 80020c2:	68db      	ldr	r3, [r3, #12]
 80020c4:	2203      	movs	r2, #3
 80020c6:	4013      	ands	r3, r2
 80020c8:	613b      	str	r3, [r7, #16]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1UL;
 80020ca:	4b2a      	ldr	r3, [pc, #168]	@ (8002174 <SystemCoreClockUpdate+0xf4>)
 80020cc:	68db      	ldr	r3, [r3, #12]
 80020ce:	091b      	lsrs	r3, r3, #4
 80020d0:	2207      	movs	r2, #7
 80020d2:	4013      	ands	r3, r2
 80020d4:	3301      	adds	r3, #1
 80020d6:	60fb      	str	r3, [r7, #12]

      if(pllsource == 0x03UL)           /* HSE used as PLL clock source */
 80020d8:	693b      	ldr	r3, [r7, #16]
 80020da:	2b03      	cmp	r3, #3
 80020dc:	d106      	bne.n	80020ec <SystemCoreClockUpdate+0x6c>
      {
        pllvco = (HSE_VALUE / pllm);
 80020de:	68f9      	ldr	r1, [r7, #12]
 80020e0:	4826      	ldr	r0, [pc, #152]	@ (800217c <SystemCoreClockUpdate+0xfc>)
 80020e2:	f7fe f869 	bl	80001b8 <__udivsi3>
 80020e6:	0003      	movs	r3, r0
 80020e8:	617b      	str	r3, [r7, #20]
 80020ea:	e005      	b.n	80020f8 <SystemCoreClockUpdate+0x78>
      }
      else                              /* HSI used as PLL clock source */
      {
          pllvco = (HSI_VALUE / pllm);
 80020ec:	68f9      	ldr	r1, [r7, #12]
 80020ee:	4824      	ldr	r0, [pc, #144]	@ (8002180 <SystemCoreClockUpdate+0x100>)
 80020f0:	f7fe f862 	bl	80001b8 <__udivsi3>
 80020f4:	0003      	movs	r3, r0
 80020f6:	617b      	str	r3, [r7, #20]
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80020f8:	4b1e      	ldr	r3, [pc, #120]	@ (8002174 <SystemCoreClockUpdate+0xf4>)
 80020fa:	68db      	ldr	r3, [r3, #12]
 80020fc:	0a1b      	lsrs	r3, r3, #8
 80020fe:	227f      	movs	r2, #127	@ 0x7f
 8002100:	401a      	ands	r2, r3
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	4353      	muls	r3, r2
 8002106:	617b      	str	r3, [r7, #20]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1UL);
 8002108:	4b1a      	ldr	r3, [pc, #104]	@ (8002174 <SystemCoreClockUpdate+0xf4>)
 800210a:	68db      	ldr	r3, [r3, #12]
 800210c:	0f5b      	lsrs	r3, r3, #29
 800210e:	2207      	movs	r2, #7
 8002110:	4013      	ands	r3, r2
 8002112:	3301      	adds	r3, #1
 8002114:	60bb      	str	r3, [r7, #8]

      SystemCoreClock = pllvco/pllr;
 8002116:	68b9      	ldr	r1, [r7, #8]
 8002118:	6978      	ldr	r0, [r7, #20]
 800211a:	f7fe f84d 	bl	80001b8 <__udivsi3>
 800211e:	0003      	movs	r3, r0
 8002120:	001a      	movs	r2, r3
 8002122:	4b15      	ldr	r3, [pc, #84]	@ (8002178 <SystemCoreClockUpdate+0xf8>)
 8002124:	601a      	str	r2, [r3, #0]
      break;
 8002126:	e011      	b.n	800214c <SystemCoreClockUpdate+0xcc>
      
    case 0x00000000U:                   /* HSI used as system clock */
    default:                            /* HSI used as system clock */
      hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV))>> RCC_CR_HSIDIV_Pos));
 8002128:	4b12      	ldr	r3, [pc, #72]	@ (8002174 <SystemCoreClockUpdate+0xf4>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	0adb      	lsrs	r3, r3, #11
 800212e:	2207      	movs	r2, #7
 8002130:	4013      	ands	r3, r2
 8002132:	2201      	movs	r2, #1
 8002134:	409a      	lsls	r2, r3
 8002136:	0013      	movs	r3, r2
 8002138:	607b      	str	r3, [r7, #4]
      SystemCoreClock = (HSI_VALUE/hsidiv);
 800213a:	6879      	ldr	r1, [r7, #4]
 800213c:	4810      	ldr	r0, [pc, #64]	@ (8002180 <SystemCoreClockUpdate+0x100>)
 800213e:	f7fe f83b 	bl	80001b8 <__udivsi3>
 8002142:	0003      	movs	r3, r0
 8002144:	001a      	movs	r2, r3
 8002146:	4b0c      	ldr	r3, [pc, #48]	@ (8002178 <SystemCoreClockUpdate+0xf8>)
 8002148:	601a      	str	r2, [r3, #0]
      break;
 800214a:	46c0      	nop			@ (mov r8, r8)
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800214c:	4b09      	ldr	r3, [pc, #36]	@ (8002174 <SystemCoreClockUpdate+0xf4>)
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	0a1b      	lsrs	r3, r3, #8
 8002152:	220f      	movs	r2, #15
 8002154:	401a      	ands	r2, r3
 8002156:	4b0b      	ldr	r3, [pc, #44]	@ (8002184 <SystemCoreClockUpdate+0x104>)
 8002158:	0092      	lsls	r2, r2, #2
 800215a:	58d3      	ldr	r3, [r2, r3]
 800215c:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 800215e:	4b06      	ldr	r3, [pc, #24]	@ (8002178 <SystemCoreClockUpdate+0xf8>)
 8002160:	681a      	ldr	r2, [r3, #0]
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	40da      	lsrs	r2, r3
 8002166:	4b04      	ldr	r3, [pc, #16]	@ (8002178 <SystemCoreClockUpdate+0xf8>)
 8002168:	601a      	str	r2, [r3, #0]
}
 800216a:	46c0      	nop			@ (mov r8, r8)
 800216c:	46bd      	mov	sp, r7
 800216e:	b006      	add	sp, #24
 8002170:	bd80      	pop	{r7, pc}
 8002172:	46c0      	nop			@ (mov r8, r8)
 8002174:	40021000 	.word	0x40021000
 8002178:	200000f0 	.word	0x200000f0
 800217c:	007a1200 	.word	0x007a1200
 8002180:	00f42400 	.word	0x00f42400
 8002184:	0800a118 	.word	0x0800a118

08002188 <MX_TIM1_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim15;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b09c      	sub	sp, #112	@ 0x70
 800218c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800218e:	2360      	movs	r3, #96	@ 0x60
 8002190:	18fb      	adds	r3, r7, r3
 8002192:	0018      	movs	r0, r3
 8002194:	2310      	movs	r3, #16
 8002196:	001a      	movs	r2, r3
 8002198:	2100      	movs	r1, #0
 800219a:	f007 ff7b 	bl	800a094 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800219e:	2354      	movs	r3, #84	@ 0x54
 80021a0:	18fb      	adds	r3, r7, r3
 80021a2:	0018      	movs	r0, r3
 80021a4:	230c      	movs	r3, #12
 80021a6:	001a      	movs	r2, r3
 80021a8:	2100      	movs	r1, #0
 80021aa:	f007 ff73 	bl	800a094 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80021ae:	2338      	movs	r3, #56	@ 0x38
 80021b0:	18fb      	adds	r3, r7, r3
 80021b2:	0018      	movs	r0, r3
 80021b4:	231c      	movs	r3, #28
 80021b6:	001a      	movs	r2, r3
 80021b8:	2100      	movs	r1, #0
 80021ba:	f007 ff6b 	bl	800a094 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80021be:	1d3b      	adds	r3, r7, #4
 80021c0:	0018      	movs	r0, r3
 80021c2:	2334      	movs	r3, #52	@ 0x34
 80021c4:	001a      	movs	r2, r3
 80021c6:	2100      	movs	r1, #0
 80021c8:	f007 ff64 	bl	800a094 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80021cc:	4b51      	ldr	r3, [pc, #324]	@ (8002314 <MX_TIM1_Init+0x18c>)
 80021ce:	4a52      	ldr	r2, [pc, #328]	@ (8002318 <MX_TIM1_Init+0x190>)
 80021d0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = PIEZO_PWM_PRESCALER;
 80021d2:	4b50      	ldr	r3, [pc, #320]	@ (8002314 <MX_TIM1_Init+0x18c>)
 80021d4:	2235      	movs	r2, #53	@ 0x35
 80021d6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021d8:	4b4e      	ldr	r3, [pc, #312]	@ (8002314 <MX_TIM1_Init+0x18c>)
 80021da:	2200      	movs	r2, #0
 80021dc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = PIEZO_PWM_ARR_VAL;
 80021de:	4b4d      	ldr	r3, [pc, #308]	@ (8002314 <MX_TIM1_Init+0x18c>)
 80021e0:	2263      	movs	r2, #99	@ 0x63
 80021e2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021e4:	4b4b      	ldr	r3, [pc, #300]	@ (8002314 <MX_TIM1_Init+0x18c>)
 80021e6:	2200      	movs	r2, #0
 80021e8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80021ea:	4b4a      	ldr	r3, [pc, #296]	@ (8002314 <MX_TIM1_Init+0x18c>)
 80021ec:	2200      	movs	r2, #0
 80021ee:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021f0:	4b48      	ldr	r3, [pc, #288]	@ (8002314 <MX_TIM1_Init+0x18c>)
 80021f2:	2200      	movs	r2, #0
 80021f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80021f6:	4b47      	ldr	r3, [pc, #284]	@ (8002314 <MX_TIM1_Init+0x18c>)
 80021f8:	0018      	movs	r0, r3
 80021fa:	f002 fcb5 	bl	8004b68 <HAL_TIM_Base_Init>
 80021fe:	1e03      	subs	r3, r0, #0
 8002200:	d001      	beq.n	8002206 <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 8002202:	f7ff fee8 	bl	8001fd6 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002206:	2160      	movs	r1, #96	@ 0x60
 8002208:	187b      	adds	r3, r7, r1
 800220a:	2280      	movs	r2, #128	@ 0x80
 800220c:	0152      	lsls	r2, r2, #5
 800220e:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002210:	187a      	adds	r2, r7, r1
 8002212:	4b40      	ldr	r3, [pc, #256]	@ (8002314 <MX_TIM1_Init+0x18c>)
 8002214:	0011      	movs	r1, r2
 8002216:	0018      	movs	r0, r3
 8002218:	f002 fe5e 	bl	8004ed8 <HAL_TIM_ConfigClockSource>
 800221c:	1e03      	subs	r3, r0, #0
 800221e:	d001      	beq.n	8002224 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8002220:	f7ff fed9 	bl	8001fd6 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002224:	4b3b      	ldr	r3, [pc, #236]	@ (8002314 <MX_TIM1_Init+0x18c>)
 8002226:	0018      	movs	r0, r3
 8002228:	f002 fcf6 	bl	8004c18 <HAL_TIM_PWM_Init>
 800222c:	1e03      	subs	r3, r0, #0
 800222e:	d001      	beq.n	8002234 <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 8002230:	f7ff fed1 	bl	8001fd6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002234:	2154      	movs	r1, #84	@ 0x54
 8002236:	187b      	adds	r3, r7, r1
 8002238:	2200      	movs	r2, #0
 800223a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800223c:	187b      	adds	r3, r7, r1
 800223e:	2200      	movs	r2, #0
 8002240:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002242:	187b      	adds	r3, r7, r1
 8002244:	2200      	movs	r2, #0
 8002246:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002248:	187a      	adds	r2, r7, r1
 800224a:	4b32      	ldr	r3, [pc, #200]	@ (8002314 <MX_TIM1_Init+0x18c>)
 800224c:	0011      	movs	r1, r2
 800224e:	0018      	movs	r0, r3
 8002250:	f003 fbf6 	bl	8005a40 <HAL_TIMEx_MasterConfigSynchronization>
 8002254:	1e03      	subs	r3, r0, #0
 8002256:	d001      	beq.n	800225c <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 8002258:	f7ff febd 	bl	8001fd6 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800225c:	2138      	movs	r1, #56	@ 0x38
 800225e:	187b      	adds	r3, r7, r1
 8002260:	2260      	movs	r2, #96	@ 0x60
 8002262:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 49;
 8002264:	187b      	adds	r3, r7, r1
 8002266:	2231      	movs	r2, #49	@ 0x31
 8002268:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800226a:	187b      	adds	r3, r7, r1
 800226c:	2200      	movs	r2, #0
 800226e:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002270:	187b      	adds	r3, r7, r1
 8002272:	2200      	movs	r2, #0
 8002274:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002276:	187b      	adds	r3, r7, r1
 8002278:	2200      	movs	r2, #0
 800227a:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800227c:	187b      	adds	r3, r7, r1
 800227e:	2200      	movs	r2, #0
 8002280:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002282:	187b      	adds	r3, r7, r1
 8002284:	2200      	movs	r2, #0
 8002286:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002288:	1879      	adds	r1, r7, r1
 800228a:	4b22      	ldr	r3, [pc, #136]	@ (8002314 <MX_TIM1_Init+0x18c>)
 800228c:	2200      	movs	r2, #0
 800228e:	0018      	movs	r0, r3
 8002290:	f002 fd22 	bl	8004cd8 <HAL_TIM_PWM_ConfigChannel>
 8002294:	1e03      	subs	r3, r0, #0
 8002296:	d001      	beq.n	800229c <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 8002298:	f7ff fe9d 	bl	8001fd6 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800229c:	1d3b      	adds	r3, r7, #4
 800229e:	2200      	movs	r2, #0
 80022a0:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80022a2:	1d3b      	adds	r3, r7, #4
 80022a4:	2200      	movs	r2, #0
 80022a6:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80022a8:	1d3b      	adds	r3, r7, #4
 80022aa:	2200      	movs	r2, #0
 80022ac:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80022ae:	1d3b      	adds	r3, r7, #4
 80022b0:	2200      	movs	r2, #0
 80022b2:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80022b4:	1d3b      	adds	r3, r7, #4
 80022b6:	2200      	movs	r2, #0
 80022b8:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80022ba:	1d3b      	adds	r3, r7, #4
 80022bc:	2280      	movs	r2, #128	@ 0x80
 80022be:	0192      	lsls	r2, r2, #6
 80022c0:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80022c2:	1d3b      	adds	r3, r7, #4
 80022c4:	2200      	movs	r2, #0
 80022c6:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80022c8:	1d3b      	adds	r3, r7, #4
 80022ca:	2200      	movs	r2, #0
 80022cc:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80022ce:	1d3b      	adds	r3, r7, #4
 80022d0:	2200      	movs	r2, #0
 80022d2:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80022d4:	1d3b      	adds	r3, r7, #4
 80022d6:	2280      	movs	r2, #128	@ 0x80
 80022d8:	0492      	lsls	r2, r2, #18
 80022da:	625a      	str	r2, [r3, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80022dc:	1d3b      	adds	r3, r7, #4
 80022de:	2200      	movs	r2, #0
 80022e0:	629a      	str	r2, [r3, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80022e2:	1d3b      	adds	r3, r7, #4
 80022e4:	2200      	movs	r2, #0
 80022e6:	62da      	str	r2, [r3, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80022e8:	1d3b      	adds	r3, r7, #4
 80022ea:	2200      	movs	r2, #0
 80022ec:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80022ee:	1d3a      	adds	r2, r7, #4
 80022f0:	4b08      	ldr	r3, [pc, #32]	@ (8002314 <MX_TIM1_Init+0x18c>)
 80022f2:	0011      	movs	r1, r2
 80022f4:	0018      	movs	r0, r3
 80022f6:	f003 fc0b 	bl	8005b10 <HAL_TIMEx_ConfigBreakDeadTime>
 80022fa:	1e03      	subs	r3, r0, #0
 80022fc:	d001      	beq.n	8002302 <MX_TIM1_Init+0x17a>
  {
    Error_Handler();
 80022fe:	f7ff fe6a 	bl	8001fd6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002302:	4b04      	ldr	r3, [pc, #16]	@ (8002314 <MX_TIM1_Init+0x18c>)
 8002304:	0018      	movs	r0, r3
 8002306:	f000 f9db 	bl	80026c0 <HAL_TIM_MspPostInit>

}
 800230a:	46c0      	nop			@ (mov r8, r8)
 800230c:	46bd      	mov	sp, r7
 800230e:	b01c      	add	sp, #112	@ 0x70
 8002310:	bd80      	pop	{r7, pc}
 8002312:	46c0      	nop			@ (mov r8, r8)
 8002314:	20000468 	.word	0x20000468
 8002318:	40012c00 	.word	0x40012c00

0800231c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b08e      	sub	sp, #56	@ 0x38
 8002320:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002322:	2328      	movs	r3, #40	@ 0x28
 8002324:	18fb      	adds	r3, r7, r3
 8002326:	0018      	movs	r0, r3
 8002328:	2310      	movs	r3, #16
 800232a:	001a      	movs	r2, r3
 800232c:	2100      	movs	r1, #0
 800232e:	f007 feb1 	bl	800a094 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002332:	231c      	movs	r3, #28
 8002334:	18fb      	adds	r3, r7, r3
 8002336:	0018      	movs	r0, r3
 8002338:	230c      	movs	r3, #12
 800233a:	001a      	movs	r2, r3
 800233c:	2100      	movs	r1, #0
 800233e:	f007 fea9 	bl	800a094 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002342:	003b      	movs	r3, r7
 8002344:	0018      	movs	r0, r3
 8002346:	231c      	movs	r3, #28
 8002348:	001a      	movs	r2, r3
 800234a:	2100      	movs	r1, #0
 800234c:	f007 fea2 	bl	800a094 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002350:	4b30      	ldr	r3, [pc, #192]	@ (8002414 <MX_TIM3_Init+0xf8>)
 8002352:	4a31      	ldr	r2, [pc, #196]	@ (8002418 <MX_TIM3_Init+0xfc>)
 8002354:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = WPT_PWM_PRESCALER;
 8002356:	4b2f      	ldr	r3, [pc, #188]	@ (8002414 <MX_TIM3_Init+0xf8>)
 8002358:	2200      	movs	r2, #0
 800235a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800235c:	4b2d      	ldr	r3, [pc, #180]	@ (8002414 <MX_TIM3_Init+0xf8>)
 800235e:	2200      	movs	r2, #0
 8002360:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = WPT_PWM_ARR_VAL;
 8002362:	4b2c      	ldr	r3, [pc, #176]	@ (8002414 <MX_TIM3_Init+0xf8>)
 8002364:	2290      	movs	r2, #144	@ 0x90
 8002366:	32ff      	adds	r2, #255	@ 0xff
 8002368:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800236a:	4b2a      	ldr	r3, [pc, #168]	@ (8002414 <MX_TIM3_Init+0xf8>)
 800236c:	2200      	movs	r2, #0
 800236e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002370:	4b28      	ldr	r3, [pc, #160]	@ (8002414 <MX_TIM3_Init+0xf8>)
 8002372:	2200      	movs	r2, #0
 8002374:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002376:	4b27      	ldr	r3, [pc, #156]	@ (8002414 <MX_TIM3_Init+0xf8>)
 8002378:	0018      	movs	r0, r3
 800237a:	f002 fbf5 	bl	8004b68 <HAL_TIM_Base_Init>
 800237e:	1e03      	subs	r3, r0, #0
 8002380:	d001      	beq.n	8002386 <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 8002382:	f7ff fe28 	bl	8001fd6 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002386:	2128      	movs	r1, #40	@ 0x28
 8002388:	187b      	adds	r3, r7, r1
 800238a:	2280      	movs	r2, #128	@ 0x80
 800238c:	0152      	lsls	r2, r2, #5
 800238e:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002390:	187a      	adds	r2, r7, r1
 8002392:	4b20      	ldr	r3, [pc, #128]	@ (8002414 <MX_TIM3_Init+0xf8>)
 8002394:	0011      	movs	r1, r2
 8002396:	0018      	movs	r0, r3
 8002398:	f002 fd9e 	bl	8004ed8 <HAL_TIM_ConfigClockSource>
 800239c:	1e03      	subs	r3, r0, #0
 800239e:	d001      	beq.n	80023a4 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 80023a0:	f7ff fe19 	bl	8001fd6 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80023a4:	4b1b      	ldr	r3, [pc, #108]	@ (8002414 <MX_TIM3_Init+0xf8>)
 80023a6:	0018      	movs	r0, r3
 80023a8:	f002 fc36 	bl	8004c18 <HAL_TIM_PWM_Init>
 80023ac:	1e03      	subs	r3, r0, #0
 80023ae:	d001      	beq.n	80023b4 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80023b0:	f7ff fe11 	bl	8001fd6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023b4:	211c      	movs	r1, #28
 80023b6:	187b      	adds	r3, r7, r1
 80023b8:	2200      	movs	r2, #0
 80023ba:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023bc:	187b      	adds	r3, r7, r1
 80023be:	2200      	movs	r2, #0
 80023c0:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80023c2:	187a      	adds	r2, r7, r1
 80023c4:	4b13      	ldr	r3, [pc, #76]	@ (8002414 <MX_TIM3_Init+0xf8>)
 80023c6:	0011      	movs	r1, r2
 80023c8:	0018      	movs	r0, r3
 80023ca:	f003 fb39 	bl	8005a40 <HAL_TIMEx_MasterConfigSynchronization>
 80023ce:	1e03      	subs	r3, r0, #0
 80023d0:	d001      	beq.n	80023d6 <MX_TIM3_Init+0xba>
  {
    Error_Handler();
 80023d2:	f7ff fe00 	bl	8001fd6 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80023d6:	003b      	movs	r3, r7
 80023d8:	2260      	movs	r2, #96	@ 0x60
 80023da:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80023dc:	003b      	movs	r3, r7
 80023de:	2200      	movs	r2, #0
 80023e0:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80023e2:	003b      	movs	r3, r7
 80023e4:	2200      	movs	r2, #0
 80023e6:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80023e8:	003b      	movs	r3, r7
 80023ea:	2200      	movs	r2, #0
 80023ec:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80023ee:	0039      	movs	r1, r7
 80023f0:	4b08      	ldr	r3, [pc, #32]	@ (8002414 <MX_TIM3_Init+0xf8>)
 80023f2:	2200      	movs	r2, #0
 80023f4:	0018      	movs	r0, r3
 80023f6:	f002 fc6f 	bl	8004cd8 <HAL_TIM_PWM_ConfigChannel>
 80023fa:	1e03      	subs	r3, r0, #0
 80023fc:	d001      	beq.n	8002402 <MX_TIM3_Init+0xe6>
  {
    Error_Handler();
 80023fe:	f7ff fdea 	bl	8001fd6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002402:	4b04      	ldr	r3, [pc, #16]	@ (8002414 <MX_TIM3_Init+0xf8>)
 8002404:	0018      	movs	r0, r3
 8002406:	f000 f95b 	bl	80026c0 <HAL_TIM_MspPostInit>

}
 800240a:	46c0      	nop			@ (mov r8, r8)
 800240c:	46bd      	mov	sp, r7
 800240e:	b00e      	add	sp, #56	@ 0x38
 8002410:	bd80      	pop	{r7, pc}
 8002412:	46c0      	nop			@ (mov r8, r8)
 8002414:	200004b4 	.word	0x200004b4
 8002418:	40000400 	.word	0x40000400

0800241c <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b084      	sub	sp, #16
 8002420:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002422:	1d3b      	adds	r3, r7, #4
 8002424:	0018      	movs	r0, r3
 8002426:	230c      	movs	r3, #12
 8002428:	001a      	movs	r2, r3
 800242a:	2100      	movs	r1, #0
 800242c:	f007 fe32 	bl	800a094 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002430:	4b15      	ldr	r3, [pc, #84]	@ (8002488 <MX_TIM6_Init+0x6c>)
 8002432:	4a16      	ldr	r2, [pc, #88]	@ (800248c <MX_TIM6_Init+0x70>)
 8002434:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = BLOCKING_DELAY_PRESCALER;
 8002436:	4b14      	ldr	r3, [pc, #80]	@ (8002488 <MX_TIM6_Init+0x6c>)
 8002438:	2235      	movs	r2, #53	@ 0x35
 800243a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800243c:	4b12      	ldr	r3, [pc, #72]	@ (8002488 <MX_TIM6_Init+0x6c>)
 800243e:	2200      	movs	r2, #0
 8002440:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 0;
 8002442:	4b11      	ldr	r3, [pc, #68]	@ (8002488 <MX_TIM6_Init+0x6c>)
 8002444:	2200      	movs	r2, #0
 8002446:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002448:	4b0f      	ldr	r3, [pc, #60]	@ (8002488 <MX_TIM6_Init+0x6c>)
 800244a:	2200      	movs	r2, #0
 800244c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800244e:	4b0e      	ldr	r3, [pc, #56]	@ (8002488 <MX_TIM6_Init+0x6c>)
 8002450:	0018      	movs	r0, r3
 8002452:	f002 fb89 	bl	8004b68 <HAL_TIM_Base_Init>
 8002456:	1e03      	subs	r3, r0, #0
 8002458:	d001      	beq.n	800245e <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 800245a:	f7ff fdbc 	bl	8001fd6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800245e:	1d3b      	adds	r3, r7, #4
 8002460:	2220      	movs	r2, #32
 8002462:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002464:	1d3b      	adds	r3, r7, #4
 8002466:	2200      	movs	r2, #0
 8002468:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800246a:	1d3a      	adds	r2, r7, #4
 800246c:	4b06      	ldr	r3, [pc, #24]	@ (8002488 <MX_TIM6_Init+0x6c>)
 800246e:	0011      	movs	r1, r2
 8002470:	0018      	movs	r0, r3
 8002472:	f003 fae5 	bl	8005a40 <HAL_TIMEx_MasterConfigSynchronization>
 8002476:	1e03      	subs	r3, r0, #0
 8002478:	d001      	beq.n	800247e <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 800247a:	f7ff fdac 	bl	8001fd6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800247e:	46c0      	nop			@ (mov r8, r8)
 8002480:	46bd      	mov	sp, r7
 8002482:	b004      	add	sp, #16
 8002484:	bd80      	pop	{r7, pc}
 8002486:	46c0      	nop			@ (mov r8, r8)
 8002488:	20000500 	.word	0x20000500
 800248c:	40001000 	.word	0x40001000

08002490 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8002490:	b590      	push	{r4, r7, lr}
 8002492:	b09d      	sub	sp, #116	@ 0x74
 8002494:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002496:	2360      	movs	r3, #96	@ 0x60
 8002498:	18fb      	adds	r3, r7, r3
 800249a:	0018      	movs	r0, r3
 800249c:	2310      	movs	r3, #16
 800249e:	001a      	movs	r2, r3
 80024a0:	2100      	movs	r1, #0
 80024a2:	f007 fdf7 	bl	800a094 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024a6:	2354      	movs	r3, #84	@ 0x54
 80024a8:	18fb      	adds	r3, r7, r3
 80024aa:	0018      	movs	r0, r3
 80024ac:	230c      	movs	r3, #12
 80024ae:	001a      	movs	r2, r3
 80024b0:	2100      	movs	r1, #0
 80024b2:	f007 fdef 	bl	800a094 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80024b6:	2338      	movs	r3, #56	@ 0x38
 80024b8:	18fb      	adds	r3, r7, r3
 80024ba:	0018      	movs	r0, r3
 80024bc:	231c      	movs	r3, #28
 80024be:	001a      	movs	r2, r3
 80024c0:	2100      	movs	r1, #0
 80024c2:	f007 fde7 	bl	800a094 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80024c6:	1d3b      	adds	r3, r7, #4
 80024c8:	0018      	movs	r0, r3
 80024ca:	2334      	movs	r3, #52	@ 0x34
 80024cc:	001a      	movs	r2, r3
 80024ce:	2100      	movs	r1, #0
 80024d0:	f007 fde0 	bl	800a094 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80024d4:	4b49      	ldr	r3, [pc, #292]	@ (80025fc <MX_TIM15_Init+0x16c>)
 80024d6:	4a4a      	ldr	r2, [pc, #296]	@ (8002600 <MX_TIM15_Init+0x170>)
 80024d8:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = VBOOST_PRESCALER;
 80024da:	4b48      	ldr	r3, [pc, #288]	@ (80025fc <MX_TIM15_Init+0x16c>)
 80024dc:	2209      	movs	r2, #9
 80024de:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024e0:	4b46      	ldr	r3, [pc, #280]	@ (80025fc <MX_TIM15_Init+0x16c>)
 80024e2:	2200      	movs	r2, #0
 80024e4:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = VBOOST_ARR_VAL;
 80024e6:	4b45      	ldr	r3, [pc, #276]	@ (80025fc <MX_TIM15_Init+0x16c>)
 80024e8:	2263      	movs	r2, #99	@ 0x63
 80024ea:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024ec:	4b43      	ldr	r3, [pc, #268]	@ (80025fc <MX_TIM15_Init+0x16c>)
 80024ee:	2200      	movs	r2, #0
 80024f0:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80024f2:	4b42      	ldr	r3, [pc, #264]	@ (80025fc <MX_TIM15_Init+0x16c>)
 80024f4:	2200      	movs	r2, #0
 80024f6:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024f8:	4b40      	ldr	r3, [pc, #256]	@ (80025fc <MX_TIM15_Init+0x16c>)
 80024fa:	2200      	movs	r2, #0
 80024fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 80024fe:	4b3f      	ldr	r3, [pc, #252]	@ (80025fc <MX_TIM15_Init+0x16c>)
 8002500:	0018      	movs	r0, r3
 8002502:	f002 fb31 	bl	8004b68 <HAL_TIM_Base_Init>
 8002506:	1e03      	subs	r3, r0, #0
 8002508:	d001      	beq.n	800250e <MX_TIM15_Init+0x7e>
  {
    Error_Handler();
 800250a:	f7ff fd64 	bl	8001fd6 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800250e:	2160      	movs	r1, #96	@ 0x60
 8002510:	187b      	adds	r3, r7, r1
 8002512:	2280      	movs	r2, #128	@ 0x80
 8002514:	0152      	lsls	r2, r2, #5
 8002516:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8002518:	187a      	adds	r2, r7, r1
 800251a:	4b38      	ldr	r3, [pc, #224]	@ (80025fc <MX_TIM15_Init+0x16c>)
 800251c:	0011      	movs	r1, r2
 800251e:	0018      	movs	r0, r3
 8002520:	f002 fcda 	bl	8004ed8 <HAL_TIM_ConfigClockSource>
 8002524:	1e03      	subs	r3, r0, #0
 8002526:	d001      	beq.n	800252c <MX_TIM15_Init+0x9c>
  {
    Error_Handler();
 8002528:	f7ff fd55 	bl	8001fd6 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 800252c:	4b33      	ldr	r3, [pc, #204]	@ (80025fc <MX_TIM15_Init+0x16c>)
 800252e:	0018      	movs	r0, r3
 8002530:	f002 fb72 	bl	8004c18 <HAL_TIM_PWM_Init>
 8002534:	1e03      	subs	r3, r0, #0
 8002536:	d001      	beq.n	800253c <MX_TIM15_Init+0xac>
  {
    Error_Handler();
 8002538:	f7ff fd4d 	bl	8001fd6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800253c:	2154      	movs	r1, #84	@ 0x54
 800253e:	187b      	adds	r3, r7, r1
 8002540:	2200      	movs	r2, #0
 8002542:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002544:	187b      	adds	r3, r7, r1
 8002546:	2200      	movs	r2, #0
 8002548:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 800254a:	187a      	adds	r2, r7, r1
 800254c:	4b2b      	ldr	r3, [pc, #172]	@ (80025fc <MX_TIM15_Init+0x16c>)
 800254e:	0011      	movs	r1, r2
 8002550:	0018      	movs	r0, r3
 8002552:	f003 fa75 	bl	8005a40 <HAL_TIMEx_MasterConfigSynchronization>
 8002556:	1e03      	subs	r3, r0, #0
 8002558:	d001      	beq.n	800255e <MX_TIM15_Init+0xce>
  {
    Error_Handler();
 800255a:	f7ff fd3c 	bl	8001fd6 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800255e:	2438      	movs	r4, #56	@ 0x38
 8002560:	193b      	adds	r3, r7, r4
 8002562:	2260      	movs	r2, #96	@ 0x60
 8002564:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = GetVboostPwmDutyCyclePct();
 8002566:	f7fe fb2b 	bl	8000bc0 <GetVboostPwmDutyCyclePct>
 800256a:	0003      	movs	r3, r0
 800256c:	001a      	movs	r2, r3
 800256e:	0021      	movs	r1, r4
 8002570:	187b      	adds	r3, r7, r1
 8002572:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002574:	187b      	adds	r3, r7, r1
 8002576:	2200      	movs	r2, #0
 8002578:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800257a:	187b      	adds	r3, r7, r1
 800257c:	2200      	movs	r2, #0
 800257e:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002580:	187b      	adds	r3, r7, r1
 8002582:	2200      	movs	r2, #0
 8002584:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002586:	187b      	adds	r3, r7, r1
 8002588:	2200      	movs	r2, #0
 800258a:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800258c:	187b      	adds	r3, r7, r1
 800258e:	2200      	movs	r2, #0
 8002590:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002592:	1879      	adds	r1, r7, r1
 8002594:	4b19      	ldr	r3, [pc, #100]	@ (80025fc <MX_TIM15_Init+0x16c>)
 8002596:	2200      	movs	r2, #0
 8002598:	0018      	movs	r0, r3
 800259a:	f002 fb9d 	bl	8004cd8 <HAL_TIM_PWM_ConfigChannel>
 800259e:	1e03      	subs	r3, r0, #0
 80025a0:	d001      	beq.n	80025a6 <MX_TIM15_Init+0x116>
  {
    Error_Handler();
 80025a2:	f7ff fd18 	bl	8001fd6 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80025a6:	1d3b      	adds	r3, r7, #4
 80025a8:	2200      	movs	r2, #0
 80025aa:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80025ac:	1d3b      	adds	r3, r7, #4
 80025ae:	2200      	movs	r2, #0
 80025b0:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80025b2:	1d3b      	adds	r3, r7, #4
 80025b4:	2200      	movs	r2, #0
 80025b6:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80025b8:	1d3b      	adds	r3, r7, #4
 80025ba:	2200      	movs	r2, #0
 80025bc:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80025be:	1d3b      	adds	r3, r7, #4
 80025c0:	2200      	movs	r2, #0
 80025c2:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80025c4:	1d3b      	adds	r3, r7, #4
 80025c6:	2280      	movs	r2, #128	@ 0x80
 80025c8:	0192      	lsls	r2, r2, #6
 80025ca:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80025cc:	1d3b      	adds	r3, r7, #4
 80025ce:	2200      	movs	r2, #0
 80025d0:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80025d2:	1d3b      	adds	r3, r7, #4
 80025d4:	2200      	movs	r2, #0
 80025d6:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 80025d8:	1d3a      	adds	r2, r7, #4
 80025da:	4b08      	ldr	r3, [pc, #32]	@ (80025fc <MX_TIM15_Init+0x16c>)
 80025dc:	0011      	movs	r1, r2
 80025de:	0018      	movs	r0, r3
 80025e0:	f003 fa96 	bl	8005b10 <HAL_TIMEx_ConfigBreakDeadTime>
 80025e4:	1e03      	subs	r3, r0, #0
 80025e6:	d001      	beq.n	80025ec <MX_TIM15_Init+0x15c>
  {
    Error_Handler();
 80025e8:	f7ff fcf5 	bl	8001fd6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 80025ec:	4b03      	ldr	r3, [pc, #12]	@ (80025fc <MX_TIM15_Init+0x16c>)
 80025ee:	0018      	movs	r0, r3
 80025f0:	f000 f866 	bl	80026c0 <HAL_TIM_MspPostInit>

}
 80025f4:	46c0      	nop			@ (mov r8, r8)
 80025f6:	46bd      	mov	sp, r7
 80025f8:	b01d      	add	sp, #116	@ 0x74
 80025fa:	bd90      	pop	{r4, r7, pc}
 80025fc:	2000054c 	.word	0x2000054c
 8002600:	40014000 	.word	0x40014000

08002604 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b086      	sub	sp, #24
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a26      	ldr	r2, [pc, #152]	@ (80026ac <HAL_TIM_Base_MspInit+0xa8>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d10e      	bne.n	8002634 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002616:	4b26      	ldr	r3, [pc, #152]	@ (80026b0 <HAL_TIM_Base_MspInit+0xac>)
 8002618:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800261a:	4b25      	ldr	r3, [pc, #148]	@ (80026b0 <HAL_TIM_Base_MspInit+0xac>)
 800261c:	2180      	movs	r1, #128	@ 0x80
 800261e:	0109      	lsls	r1, r1, #4
 8002620:	430a      	orrs	r2, r1
 8002622:	641a      	str	r2, [r3, #64]	@ 0x40
 8002624:	4b22      	ldr	r3, [pc, #136]	@ (80026b0 <HAL_TIM_Base_MspInit+0xac>)
 8002626:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002628:	2380      	movs	r3, #128	@ 0x80
 800262a:	011b      	lsls	r3, r3, #4
 800262c:	4013      	ands	r3, r2
 800262e:	617b      	str	r3, [r7, #20]
 8002630:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM15_CLK_ENABLE();
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 8002632:	e036      	b.n	80026a2 <HAL_TIM_Base_MspInit+0x9e>
  else if(tim_baseHandle->Instance==TIM3)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a1e      	ldr	r2, [pc, #120]	@ (80026b4 <HAL_TIM_Base_MspInit+0xb0>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d10c      	bne.n	8002658 <HAL_TIM_Base_MspInit+0x54>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800263e:	4b1c      	ldr	r3, [pc, #112]	@ (80026b0 <HAL_TIM_Base_MspInit+0xac>)
 8002640:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002642:	4b1b      	ldr	r3, [pc, #108]	@ (80026b0 <HAL_TIM_Base_MspInit+0xac>)
 8002644:	2102      	movs	r1, #2
 8002646:	430a      	orrs	r2, r1
 8002648:	63da      	str	r2, [r3, #60]	@ 0x3c
 800264a:	4b19      	ldr	r3, [pc, #100]	@ (80026b0 <HAL_TIM_Base_MspInit+0xac>)
 800264c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800264e:	2202      	movs	r2, #2
 8002650:	4013      	ands	r3, r2
 8002652:	613b      	str	r3, [r7, #16]
 8002654:	693b      	ldr	r3, [r7, #16]
}
 8002656:	e024      	b.n	80026a2 <HAL_TIM_Base_MspInit+0x9e>
  else if(tim_baseHandle->Instance==TIM6)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a16      	ldr	r2, [pc, #88]	@ (80026b8 <HAL_TIM_Base_MspInit+0xb4>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d10c      	bne.n	800267c <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002662:	4b13      	ldr	r3, [pc, #76]	@ (80026b0 <HAL_TIM_Base_MspInit+0xac>)
 8002664:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002666:	4b12      	ldr	r3, [pc, #72]	@ (80026b0 <HAL_TIM_Base_MspInit+0xac>)
 8002668:	2110      	movs	r1, #16
 800266a:	430a      	orrs	r2, r1
 800266c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800266e:	4b10      	ldr	r3, [pc, #64]	@ (80026b0 <HAL_TIM_Base_MspInit+0xac>)
 8002670:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002672:	2210      	movs	r2, #16
 8002674:	4013      	ands	r3, r2
 8002676:	60fb      	str	r3, [r7, #12]
 8002678:	68fb      	ldr	r3, [r7, #12]
}
 800267a:	e012      	b.n	80026a2 <HAL_TIM_Base_MspInit+0x9e>
  else if(tim_baseHandle->Instance==TIM15)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a0e      	ldr	r2, [pc, #56]	@ (80026bc <HAL_TIM_Base_MspInit+0xb8>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d10d      	bne.n	80026a2 <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8002686:	4b0a      	ldr	r3, [pc, #40]	@ (80026b0 <HAL_TIM_Base_MspInit+0xac>)
 8002688:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800268a:	4b09      	ldr	r3, [pc, #36]	@ (80026b0 <HAL_TIM_Base_MspInit+0xac>)
 800268c:	2180      	movs	r1, #128	@ 0x80
 800268e:	0249      	lsls	r1, r1, #9
 8002690:	430a      	orrs	r2, r1
 8002692:	641a      	str	r2, [r3, #64]	@ 0x40
 8002694:	4b06      	ldr	r3, [pc, #24]	@ (80026b0 <HAL_TIM_Base_MspInit+0xac>)
 8002696:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002698:	2380      	movs	r3, #128	@ 0x80
 800269a:	025b      	lsls	r3, r3, #9
 800269c:	4013      	ands	r3, r2
 800269e:	60bb      	str	r3, [r7, #8]
 80026a0:	68bb      	ldr	r3, [r7, #8]
}
 80026a2:	46c0      	nop			@ (mov r8, r8)
 80026a4:	46bd      	mov	sp, r7
 80026a6:	b006      	add	sp, #24
 80026a8:	bd80      	pop	{r7, pc}
 80026aa:	46c0      	nop			@ (mov r8, r8)
 80026ac:	40012c00 	.word	0x40012c00
 80026b0:	40021000 	.word	0x40021000
 80026b4:	40000400 	.word	0x40000400
 80026b8:	40001000 	.word	0x40001000
 80026bc:	40014000 	.word	0x40014000

080026c0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80026c0:	b590      	push	{r4, r7, lr}
 80026c2:	b08b      	sub	sp, #44	@ 0x2c
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026c8:	2414      	movs	r4, #20
 80026ca:	193b      	adds	r3, r7, r4
 80026cc:	0018      	movs	r0, r3
 80026ce:	2314      	movs	r3, #20
 80026d0:	001a      	movs	r2, r3
 80026d2:	2100      	movs	r1, #0
 80026d4:	f007 fcde 	bl	800a094 <memset>
  if(timHandle->Instance==TIM1)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a3e      	ldr	r2, [pc, #248]	@ (80027d8 <HAL_TIM_MspPostInit+0x118>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d124      	bne.n	800272c <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026e2:	4b3e      	ldr	r3, [pc, #248]	@ (80027dc <HAL_TIM_MspPostInit+0x11c>)
 80026e4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80026e6:	4b3d      	ldr	r3, [pc, #244]	@ (80027dc <HAL_TIM_MspPostInit+0x11c>)
 80026e8:	2101      	movs	r1, #1
 80026ea:	430a      	orrs	r2, r1
 80026ec:	635a      	str	r2, [r3, #52]	@ 0x34
 80026ee:	4b3b      	ldr	r3, [pc, #236]	@ (80027dc <HAL_TIM_MspPostInit+0x11c>)
 80026f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80026f2:	2201      	movs	r2, #1
 80026f4:	4013      	ands	r3, r2
 80026f6:	613b      	str	r3, [r7, #16]
 80026f8:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = PIEZO_PWM_Pin;
 80026fa:	193b      	adds	r3, r7, r4
 80026fc:	2280      	movs	r2, #128	@ 0x80
 80026fe:	0052      	lsls	r2, r2, #1
 8002700:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002702:	0021      	movs	r1, r4
 8002704:	187b      	adds	r3, r7, r1
 8002706:	2202      	movs	r2, #2
 8002708:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800270a:	187b      	adds	r3, r7, r1
 800270c:	2200      	movs	r2, #0
 800270e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002710:	187b      	adds	r3, r7, r1
 8002712:	2200      	movs	r2, #0
 8002714:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8002716:	187b      	adds	r3, r7, r1
 8002718:	2202      	movs	r2, #2
 800271a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(PIEZO_PWM_GPIO_Port, &GPIO_InitStruct);
 800271c:	187a      	adds	r2, r7, r1
 800271e:	23a0      	movs	r3, #160	@ 0xa0
 8002720:	05db      	lsls	r3, r3, #23
 8002722:	0011      	movs	r1, r2
 8002724:	0018      	movs	r0, r3
 8002726:	f001 f8c3 	bl	80038b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 800272a:	e050      	b.n	80027ce <HAL_TIM_MspPostInit+0x10e>
  else if(timHandle->Instance==TIM3)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a2b      	ldr	r2, [pc, #172]	@ (80027e0 <HAL_TIM_MspPostInit+0x120>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d123      	bne.n	800277e <HAL_TIM_MspPostInit+0xbe>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002736:	4b29      	ldr	r3, [pc, #164]	@ (80027dc <HAL_TIM_MspPostInit+0x11c>)
 8002738:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800273a:	4b28      	ldr	r3, [pc, #160]	@ (80027dc <HAL_TIM_MspPostInit+0x11c>)
 800273c:	2101      	movs	r1, #1
 800273e:	430a      	orrs	r2, r1
 8002740:	635a      	str	r2, [r3, #52]	@ 0x34
 8002742:	4b26      	ldr	r3, [pc, #152]	@ (80027dc <HAL_TIM_MspPostInit+0x11c>)
 8002744:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002746:	2201      	movs	r2, #1
 8002748:	4013      	ands	r3, r2
 800274a:	60fb      	str	r3, [r7, #12]
 800274c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = WPT_PWM_Pin;
 800274e:	2114      	movs	r1, #20
 8002750:	187b      	adds	r3, r7, r1
 8002752:	2240      	movs	r2, #64	@ 0x40
 8002754:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002756:	187b      	adds	r3, r7, r1
 8002758:	2202      	movs	r2, #2
 800275a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800275c:	187b      	adds	r3, r7, r1
 800275e:	2200      	movs	r2, #0
 8002760:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002762:	187b      	adds	r3, r7, r1
 8002764:	2200      	movs	r2, #0
 8002766:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8002768:	187b      	adds	r3, r7, r1
 800276a:	2201      	movs	r2, #1
 800276c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(WPT_PWM_GPIO_Port, &GPIO_InitStruct);
 800276e:	187a      	adds	r2, r7, r1
 8002770:	23a0      	movs	r3, #160	@ 0xa0
 8002772:	05db      	lsls	r3, r3, #23
 8002774:	0011      	movs	r1, r2
 8002776:	0018      	movs	r0, r3
 8002778:	f001 f89a 	bl	80038b0 <HAL_GPIO_Init>
}
 800277c:	e027      	b.n	80027ce <HAL_TIM_MspPostInit+0x10e>
  else if(timHandle->Instance==TIM15)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a18      	ldr	r2, [pc, #96]	@ (80027e4 <HAL_TIM_MspPostInit+0x124>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d122      	bne.n	80027ce <HAL_TIM_MspPostInit+0x10e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002788:	4b14      	ldr	r3, [pc, #80]	@ (80027dc <HAL_TIM_MspPostInit+0x11c>)
 800278a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800278c:	4b13      	ldr	r3, [pc, #76]	@ (80027dc <HAL_TIM_MspPostInit+0x11c>)
 800278e:	2101      	movs	r1, #1
 8002790:	430a      	orrs	r2, r1
 8002792:	635a      	str	r2, [r3, #52]	@ 0x34
 8002794:	4b11      	ldr	r3, [pc, #68]	@ (80027dc <HAL_TIM_MspPostInit+0x11c>)
 8002796:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002798:	2201      	movs	r2, #1
 800279a:	4013      	ands	r3, r2
 800279c:	60bb      	str	r3, [r7, #8]
 800279e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = VBOOST_CAL_PWM_Pin;
 80027a0:	2114      	movs	r1, #20
 80027a2:	187b      	adds	r3, r7, r1
 80027a4:	2202      	movs	r2, #2
 80027a6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027a8:	187b      	adds	r3, r7, r1
 80027aa:	2202      	movs	r2, #2
 80027ac:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ae:	187b      	adds	r3, r7, r1
 80027b0:	2200      	movs	r2, #0
 80027b2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027b4:	187b      	adds	r3, r7, r1
 80027b6:	2200      	movs	r2, #0
 80027b8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM15;
 80027ba:	187b      	adds	r3, r7, r1
 80027bc:	2205      	movs	r2, #5
 80027be:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(VBOOST_CAL_PWM_GPIO_Port, &GPIO_InitStruct);
 80027c0:	187a      	adds	r2, r7, r1
 80027c2:	23a0      	movs	r3, #160	@ 0xa0
 80027c4:	05db      	lsls	r3, r3, #23
 80027c6:	0011      	movs	r1, r2
 80027c8:	0018      	movs	r0, r3
 80027ca:	f001 f871 	bl	80038b0 <HAL_GPIO_Init>
}
 80027ce:	46c0      	nop			@ (mov r8, r8)
 80027d0:	46bd      	mov	sp, r7
 80027d2:	b00b      	add	sp, #44	@ 0x2c
 80027d4:	bd90      	pop	{r4, r7, pc}
 80027d6:	46c0      	nop			@ (mov r8, r8)
 80027d8:	40012c00 	.word	0x40012c00
 80027dc:	40021000 	.word	0x40021000
 80027e0:	40000400 	.word	0x40000400
 80027e4:	40014000 	.word	0x40014000

080027e8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80027ec:	4b22      	ldr	r3, [pc, #136]	@ (8002878 <MX_USART1_UART_Init+0x90>)
 80027ee:	4a23      	ldr	r2, [pc, #140]	@ (800287c <MX_USART1_UART_Init+0x94>)
 80027f0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 6553;
 80027f2:	4b21      	ldr	r3, [pc, #132]	@ (8002878 <MX_USART1_UART_Init+0x90>)
 80027f4:	4a22      	ldr	r2, [pc, #136]	@ (8002880 <MX_USART1_UART_Init+0x98>)
 80027f6:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80027f8:	4b1f      	ldr	r3, [pc, #124]	@ (8002878 <MX_USART1_UART_Init+0x90>)
 80027fa:	2200      	movs	r2, #0
 80027fc:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80027fe:	4b1e      	ldr	r3, [pc, #120]	@ (8002878 <MX_USART1_UART_Init+0x90>)
 8002800:	2200      	movs	r2, #0
 8002802:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002804:	4b1c      	ldr	r3, [pc, #112]	@ (8002878 <MX_USART1_UART_Init+0x90>)
 8002806:	2200      	movs	r2, #0
 8002808:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800280a:	4b1b      	ldr	r3, [pc, #108]	@ (8002878 <MX_USART1_UART_Init+0x90>)
 800280c:	220c      	movs	r2, #12
 800280e:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002810:	4b19      	ldr	r3, [pc, #100]	@ (8002878 <MX_USART1_UART_Init+0x90>)
 8002812:	2200      	movs	r2, #0
 8002814:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002816:	4b18      	ldr	r3, [pc, #96]	@ (8002878 <MX_USART1_UART_Init+0x90>)
 8002818:	2200      	movs	r2, #0
 800281a:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800281c:	4b16      	ldr	r3, [pc, #88]	@ (8002878 <MX_USART1_UART_Init+0x90>)
 800281e:	2200      	movs	r2, #0
 8002820:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002822:	4b15      	ldr	r3, [pc, #84]	@ (8002878 <MX_USART1_UART_Init+0x90>)
 8002824:	2200      	movs	r2, #0
 8002826:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002828:	4b13      	ldr	r3, [pc, #76]	@ (8002878 <MX_USART1_UART_Init+0x90>)
 800282a:	2200      	movs	r2, #0
 800282c:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800282e:	4b12      	ldr	r3, [pc, #72]	@ (8002878 <MX_USART1_UART_Init+0x90>)
 8002830:	0018      	movs	r0, r3
 8002832:	f003 fa2d 	bl	8005c90 <HAL_UART_Init>
 8002836:	1e03      	subs	r3, r0, #0
 8002838:	d001      	beq.n	800283e <MX_USART1_UART_Init+0x56>
  {
    Error_Handler();
 800283a:	f7ff fbcc 	bl	8001fd6 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800283e:	4b0e      	ldr	r3, [pc, #56]	@ (8002878 <MX_USART1_UART_Init+0x90>)
 8002840:	2100      	movs	r1, #0
 8002842:	0018      	movs	r0, r3
 8002844:	f003 fe8c 	bl	8006560 <HAL_UARTEx_SetTxFifoThreshold>
 8002848:	1e03      	subs	r3, r0, #0
 800284a:	d001      	beq.n	8002850 <MX_USART1_UART_Init+0x68>
  {
    Error_Handler();
 800284c:	f7ff fbc3 	bl	8001fd6 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002850:	4b09      	ldr	r3, [pc, #36]	@ (8002878 <MX_USART1_UART_Init+0x90>)
 8002852:	2100      	movs	r1, #0
 8002854:	0018      	movs	r0, r3
 8002856:	f003 fec3 	bl	80065e0 <HAL_UARTEx_SetRxFifoThreshold>
 800285a:	1e03      	subs	r3, r0, #0
 800285c:	d001      	beq.n	8002862 <MX_USART1_UART_Init+0x7a>
  {
    Error_Handler();
 800285e:	f7ff fbba 	bl	8001fd6 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002862:	4b05      	ldr	r3, [pc, #20]	@ (8002878 <MX_USART1_UART_Init+0x90>)
 8002864:	0018      	movs	r0, r3
 8002866:	f003 fe41 	bl	80064ec <HAL_UARTEx_DisableFifoMode>
 800286a:	1e03      	subs	r3, r0, #0
 800286c:	d001      	beq.n	8002872 <MX_USART1_UART_Init+0x8a>
  {
    Error_Handler();
 800286e:	f7ff fbb2 	bl	8001fd6 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002872:	46c0      	nop			@ (mov r8, r8)
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}
 8002878:	20000598 	.word	0x20000598
 800287c:	40013800 	.word	0x40013800
 8002880:	00001999 	.word	0x00001999

08002884 <HAL_UART_MspInit>:
  /* USER CODE END USART3_Init 2 */

}

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002884:	b590      	push	{r4, r7, lr}
 8002886:	b093      	sub	sp, #76	@ 0x4c
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800288c:	2334      	movs	r3, #52	@ 0x34
 800288e:	18fb      	adds	r3, r7, r3
 8002890:	0018      	movs	r0, r3
 8002892:	2314      	movs	r3, #20
 8002894:	001a      	movs	r2, r3
 8002896:	2100      	movs	r1, #0
 8002898:	f007 fbfc 	bl	800a094 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800289c:	2418      	movs	r4, #24
 800289e:	193b      	adds	r3, r7, r4
 80028a0:	0018      	movs	r0, r3
 80028a2:	231c      	movs	r3, #28
 80028a4:	001a      	movs	r2, r3
 80028a6:	2100      	movs	r1, #0
 80028a8:	f007 fbf4 	bl	800a094 <memset>
  if(uartHandle->Instance==USART1)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a46      	ldr	r2, [pc, #280]	@ (80029cc <HAL_UART_MspInit+0x148>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d148      	bne.n	8002948 <HAL_UART_MspInit+0xc4>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80028b6:	193b      	adds	r3, r7, r4
 80028b8:	2201      	movs	r2, #1
 80028ba:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80028bc:	193b      	adds	r3, r7, r4
 80028be:	2200      	movs	r2, #0
 80028c0:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80028c2:	193b      	adds	r3, r7, r4
 80028c4:	0018      	movs	r0, r3
 80028c6:	f002 f81b 	bl	8004900 <HAL_RCCEx_PeriphCLKConfig>
 80028ca:	1e03      	subs	r3, r0, #0
 80028cc:	d001      	beq.n	80028d2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80028ce:	f7ff fb82 	bl	8001fd6 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80028d2:	4b3f      	ldr	r3, [pc, #252]	@ (80029d0 <HAL_UART_MspInit+0x14c>)
 80028d4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80028d6:	4b3e      	ldr	r3, [pc, #248]	@ (80029d0 <HAL_UART_MspInit+0x14c>)
 80028d8:	2180      	movs	r1, #128	@ 0x80
 80028da:	01c9      	lsls	r1, r1, #7
 80028dc:	430a      	orrs	r2, r1
 80028de:	641a      	str	r2, [r3, #64]	@ 0x40
 80028e0:	4b3b      	ldr	r3, [pc, #236]	@ (80029d0 <HAL_UART_MspInit+0x14c>)
 80028e2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80028e4:	2380      	movs	r3, #128	@ 0x80
 80028e6:	01db      	lsls	r3, r3, #7
 80028e8:	4013      	ands	r3, r2
 80028ea:	617b      	str	r3, [r7, #20]
 80028ec:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028ee:	4b38      	ldr	r3, [pc, #224]	@ (80029d0 <HAL_UART_MspInit+0x14c>)
 80028f0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80028f2:	4b37      	ldr	r3, [pc, #220]	@ (80029d0 <HAL_UART_MspInit+0x14c>)
 80028f4:	2101      	movs	r1, #1
 80028f6:	430a      	orrs	r2, r1
 80028f8:	635a      	str	r2, [r3, #52]	@ 0x34
 80028fa:	4b35      	ldr	r3, [pc, #212]	@ (80029d0 <HAL_UART_MspInit+0x14c>)
 80028fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028fe:	2201      	movs	r2, #1
 8002900:	4013      	ands	r3, r2
 8002902:	613b      	str	r3, [r7, #16]
 8002904:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = IR_UART_TX_Pin|IR_UART_RX_Pin;
 8002906:	2134      	movs	r1, #52	@ 0x34
 8002908:	187b      	adds	r3, r7, r1
 800290a:	22c0      	movs	r2, #192	@ 0xc0
 800290c:	00d2      	lsls	r2, r2, #3
 800290e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002910:	187b      	adds	r3, r7, r1
 8002912:	2202      	movs	r2, #2
 8002914:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002916:	187b      	adds	r3, r7, r1
 8002918:	2200      	movs	r2, #0
 800291a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800291c:	187b      	adds	r3, r7, r1
 800291e:	2200      	movs	r2, #0
 8002920:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8002922:	187b      	adds	r3, r7, r1
 8002924:	2201      	movs	r2, #1
 8002926:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002928:	187a      	adds	r2, r7, r1
 800292a:	23a0      	movs	r3, #160	@ 0xa0
 800292c:	05db      	lsls	r3, r3, #23
 800292e:	0011      	movs	r1, r2
 8002930:	0018      	movs	r0, r3
 8002932:	f000 ffbd 	bl	80038b0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 8002936:	2200      	movs	r2, #0
 8002938:	2101      	movs	r1, #1
 800293a:	201b      	movs	r0, #27
 800293c:	f000 ff86 	bl	800384c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002940:	201b      	movs	r0, #27
 8002942:	f000 ff98 	bl	8003876 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_4_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002946:	e03c      	b.n	80029c2 <HAL_UART_MspInit+0x13e>
  else if(uartHandle->Instance==USART3)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a21      	ldr	r2, [pc, #132]	@ (80029d4 <HAL_UART_MspInit+0x150>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d137      	bne.n	80029c2 <HAL_UART_MspInit+0x13e>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002952:	4b1f      	ldr	r3, [pc, #124]	@ (80029d0 <HAL_UART_MspInit+0x14c>)
 8002954:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002956:	4b1e      	ldr	r3, [pc, #120]	@ (80029d0 <HAL_UART_MspInit+0x14c>)
 8002958:	2180      	movs	r1, #128	@ 0x80
 800295a:	02c9      	lsls	r1, r1, #11
 800295c:	430a      	orrs	r2, r1
 800295e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002960:	4b1b      	ldr	r3, [pc, #108]	@ (80029d0 <HAL_UART_MspInit+0x14c>)
 8002962:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002964:	2380      	movs	r3, #128	@ 0x80
 8002966:	02db      	lsls	r3, r3, #11
 8002968:	4013      	ands	r3, r2
 800296a:	60fb      	str	r3, [r7, #12]
 800296c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800296e:	4b18      	ldr	r3, [pc, #96]	@ (80029d0 <HAL_UART_MspInit+0x14c>)
 8002970:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002972:	4b17      	ldr	r3, [pc, #92]	@ (80029d0 <HAL_UART_MspInit+0x14c>)
 8002974:	2102      	movs	r1, #2
 8002976:	430a      	orrs	r2, r1
 8002978:	635a      	str	r2, [r3, #52]	@ 0x34
 800297a:	4b15      	ldr	r3, [pc, #84]	@ (80029d0 <HAL_UART_MspInit+0x14c>)
 800297c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800297e:	2202      	movs	r2, #2
 8002980:	4013      	ands	r3, r2
 8002982:	60bb      	str	r3, [r7, #8]
 8002984:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = DEBUG_RX_Pin|DEBUG_TX_Pin;
 8002986:	2134      	movs	r1, #52	@ 0x34
 8002988:	187b      	adds	r3, r7, r1
 800298a:	4a13      	ldr	r2, [pc, #76]	@ (80029d8 <HAL_UART_MspInit+0x154>)
 800298c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800298e:	187b      	adds	r3, r7, r1
 8002990:	2202      	movs	r2, #2
 8002992:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002994:	187b      	adds	r3, r7, r1
 8002996:	2200      	movs	r2, #0
 8002998:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800299a:	187b      	adds	r3, r7, r1
 800299c:	2200      	movs	r2, #0
 800299e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 80029a0:	187b      	adds	r3, r7, r1
 80029a2:	2204      	movs	r2, #4
 80029a4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029a6:	187b      	adds	r3, r7, r1
 80029a8:	4a0c      	ldr	r2, [pc, #48]	@ (80029dc <HAL_UART_MspInit+0x158>)
 80029aa:	0019      	movs	r1, r3
 80029ac:	0010      	movs	r0, r2
 80029ae:	f000 ff7f 	bl	80038b0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_4_IRQn, 0, 0);
 80029b2:	2200      	movs	r2, #0
 80029b4:	2100      	movs	r1, #0
 80029b6:	201d      	movs	r0, #29
 80029b8:	f000 ff48 	bl	800384c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_IRQn);
 80029bc:	201d      	movs	r0, #29
 80029be:	f000 ff5a 	bl	8003876 <HAL_NVIC_EnableIRQ>
}
 80029c2:	46c0      	nop			@ (mov r8, r8)
 80029c4:	46bd      	mov	sp, r7
 80029c6:	b013      	add	sp, #76	@ 0x4c
 80029c8:	bd90      	pop	{r4, r7, pc}
 80029ca:	46c0      	nop			@ (mov r8, r8)
 80029cc:	40013800 	.word	0x40013800
 80029d0:	40021000 	.word	0x40021000
 80029d4:	40004800 	.word	0x40004800
 80029d8:	00000401 	.word	0x00000401
 80029dc:	50000400 	.word	0x50000400

080029e0 <DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80029e0:	e7fe      	b.n	80029e0 <DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler>
	...

080029e4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b082      	sub	sp, #8
 80029e8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80029ea:	1dfb      	adds	r3, r7, #7
 80029ec:	2200      	movs	r2, #0
 80029ee:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80029f0:	4b0b      	ldr	r3, [pc, #44]	@ (8002a20 <HAL_Init+0x3c>)
 80029f2:	681a      	ldr	r2, [r3, #0]
 80029f4:	4b0a      	ldr	r3, [pc, #40]	@ (8002a20 <HAL_Init+0x3c>)
 80029f6:	2180      	movs	r1, #128	@ 0x80
 80029f8:	0049      	lsls	r1, r1, #1
 80029fa:	430a      	orrs	r2, r1
 80029fc:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80029fe:	2003      	movs	r0, #3
 8002a00:	f000 f810 	bl	8002a24 <HAL_InitTick>
 8002a04:	1e03      	subs	r3, r0, #0
 8002a06:	d003      	beq.n	8002a10 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8002a08:	1dfb      	adds	r3, r7, #7
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	701a      	strb	r2, [r3, #0]
 8002a0e:	e001      	b.n	8002a14 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8002a10:	f7ff fae8 	bl	8001fe4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002a14:	1dfb      	adds	r3, r7, #7
 8002a16:	781b      	ldrb	r3, [r3, #0]
}
 8002a18:	0018      	movs	r0, r3
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	b002      	add	sp, #8
 8002a1e:	bd80      	pop	{r7, pc}
 8002a20:	40022000 	.word	0x40022000

08002a24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a24:	b590      	push	{r4, r7, lr}
 8002a26:	b085      	sub	sp, #20
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002a2c:	230f      	movs	r3, #15
 8002a2e:	18fb      	adds	r3, r7, r3
 8002a30:	2200      	movs	r2, #0
 8002a32:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8002a34:	4b1d      	ldr	r3, [pc, #116]	@ (8002aac <HAL_InitTick+0x88>)
 8002a36:	781b      	ldrb	r3, [r3, #0]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d02b      	beq.n	8002a94 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8002a3c:	4b1c      	ldr	r3, [pc, #112]	@ (8002ab0 <HAL_InitTick+0x8c>)
 8002a3e:	681c      	ldr	r4, [r3, #0]
 8002a40:	4b1a      	ldr	r3, [pc, #104]	@ (8002aac <HAL_InitTick+0x88>)
 8002a42:	781b      	ldrb	r3, [r3, #0]
 8002a44:	0019      	movs	r1, r3
 8002a46:	23fa      	movs	r3, #250	@ 0xfa
 8002a48:	0098      	lsls	r0, r3, #2
 8002a4a:	f7fd fbb5 	bl	80001b8 <__udivsi3>
 8002a4e:	0003      	movs	r3, r0
 8002a50:	0019      	movs	r1, r3
 8002a52:	0020      	movs	r0, r4
 8002a54:	f7fd fbb0 	bl	80001b8 <__udivsi3>
 8002a58:	0003      	movs	r3, r0
 8002a5a:	0018      	movs	r0, r3
 8002a5c:	f000 ff1b 	bl	8003896 <HAL_SYSTICK_Config>
 8002a60:	1e03      	subs	r3, r0, #0
 8002a62:	d112      	bne.n	8002a8a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2b03      	cmp	r3, #3
 8002a68:	d80a      	bhi.n	8002a80 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a6a:	6879      	ldr	r1, [r7, #4]
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	425b      	negs	r3, r3
 8002a70:	2200      	movs	r2, #0
 8002a72:	0018      	movs	r0, r3
 8002a74:	f000 feea 	bl	800384c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002a78:	4b0e      	ldr	r3, [pc, #56]	@ (8002ab4 <HAL_InitTick+0x90>)
 8002a7a:	687a      	ldr	r2, [r7, #4]
 8002a7c:	601a      	str	r2, [r3, #0]
 8002a7e:	e00d      	b.n	8002a9c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8002a80:	230f      	movs	r3, #15
 8002a82:	18fb      	adds	r3, r7, r3
 8002a84:	2201      	movs	r2, #1
 8002a86:	701a      	strb	r2, [r3, #0]
 8002a88:	e008      	b.n	8002a9c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002a8a:	230f      	movs	r3, #15
 8002a8c:	18fb      	adds	r3, r7, r3
 8002a8e:	2201      	movs	r2, #1
 8002a90:	701a      	strb	r2, [r3, #0]
 8002a92:	e003      	b.n	8002a9c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002a94:	230f      	movs	r3, #15
 8002a96:	18fb      	adds	r3, r7, r3
 8002a98:	2201      	movs	r2, #1
 8002a9a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8002a9c:	230f      	movs	r3, #15
 8002a9e:	18fb      	adds	r3, r7, r3
 8002aa0:	781b      	ldrb	r3, [r3, #0]
}
 8002aa2:	0018      	movs	r0, r3
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	b005      	add	sp, #20
 8002aa8:	bd90      	pop	{r4, r7, pc}
 8002aaa:	46c0      	nop			@ (mov r8, r8)
 8002aac:	200000f8 	.word	0x200000f8
 8002ab0:	200000f0 	.word	0x200000f0
 8002ab4:	200000f4 	.word	0x200000f4

08002ab8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002abc:	4b05      	ldr	r3, [pc, #20]	@ (8002ad4 <HAL_IncTick+0x1c>)
 8002abe:	781b      	ldrb	r3, [r3, #0]
 8002ac0:	001a      	movs	r2, r3
 8002ac2:	4b05      	ldr	r3, [pc, #20]	@ (8002ad8 <HAL_IncTick+0x20>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	18d2      	adds	r2, r2, r3
 8002ac8:	4b03      	ldr	r3, [pc, #12]	@ (8002ad8 <HAL_IncTick+0x20>)
 8002aca:	601a      	str	r2, [r3, #0]
}
 8002acc:	46c0      	nop			@ (mov r8, r8)
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}
 8002ad2:	46c0      	nop			@ (mov r8, r8)
 8002ad4:	200000f8 	.word	0x200000f8
 8002ad8:	2000062c 	.word	0x2000062c

08002adc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	af00      	add	r7, sp, #0
  return uwTick;
 8002ae0:	4b02      	ldr	r3, [pc, #8]	@ (8002aec <HAL_GetTick+0x10>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
}
 8002ae4:	0018      	movs	r0, r3
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}
 8002aea:	46c0      	nop			@ (mov r8, r8)
 8002aec:	2000062c 	.word	0x2000062c

08002af0 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b082      	sub	sp, #8
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8002af8:	4b06      	ldr	r3, [pc, #24]	@ (8002b14 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a06      	ldr	r2, [pc, #24]	@ (8002b18 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8002afe:	4013      	ands	r3, r2
 8002b00:	0019      	movs	r1, r3
 8002b02:	4b04      	ldr	r3, [pc, #16]	@ (8002b14 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8002b04:	687a      	ldr	r2, [r7, #4]
 8002b06:	430a      	orrs	r2, r1
 8002b08:	601a      	str	r2, [r3, #0]
}
 8002b0a:	46c0      	nop			@ (mov r8, r8)
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	b002      	add	sp, #8
 8002b10:	bd80      	pop	{r7, pc}
 8002b12:	46c0      	nop			@ (mov r8, r8)
 8002b14:	40010000 	.word	0x40010000
 8002b18:	fffff9ff 	.word	0xfffff9ff

08002b1c <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b082      	sub	sp, #8
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
 8002b24:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a05      	ldr	r2, [pc, #20]	@ (8002b40 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8002b2c:	401a      	ands	r2, r3
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	431a      	orrs	r2, r3
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	601a      	str	r2, [r3, #0]
}
 8002b36:	46c0      	nop			@ (mov r8, r8)
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	b002      	add	sp, #8
 8002b3c:	bd80      	pop	{r7, pc}
 8002b3e:	46c0      	nop			@ (mov r8, r8)
 8002b40:	fe3fffff 	.word	0xfe3fffff

08002b44 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b082      	sub	sp, #8
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681a      	ldr	r2, [r3, #0]
 8002b50:	23e0      	movs	r3, #224	@ 0xe0
 8002b52:	045b      	lsls	r3, r3, #17
 8002b54:	4013      	ands	r3, r2
}
 8002b56:	0018      	movs	r0, r3
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	b002      	add	sp, #8
 8002b5c:	bd80      	pop	{r7, pc}

08002b5e <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8002b5e:	b580      	push	{r7, lr}
 8002b60:	b084      	sub	sp, #16
 8002b62:	af00      	add	r7, sp, #0
 8002b64:	60f8      	str	r0, [r7, #12]
 8002b66:	60b9      	str	r1, [r7, #8]
 8002b68:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	695b      	ldr	r3, [r3, #20]
 8002b6e:	68ba      	ldr	r2, [r7, #8]
 8002b70:	2104      	movs	r1, #4
 8002b72:	400a      	ands	r2, r1
 8002b74:	2107      	movs	r1, #7
 8002b76:	4091      	lsls	r1, r2
 8002b78:	000a      	movs	r2, r1
 8002b7a:	43d2      	mvns	r2, r2
 8002b7c:	401a      	ands	r2, r3
 8002b7e:	68bb      	ldr	r3, [r7, #8]
 8002b80:	2104      	movs	r1, #4
 8002b82:	400b      	ands	r3, r1
 8002b84:	6879      	ldr	r1, [r7, #4]
 8002b86:	4099      	lsls	r1, r3
 8002b88:	000b      	movs	r3, r1
 8002b8a:	431a      	orrs	r2, r3
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8002b90:	46c0      	nop			@ (mov r8, r8)
 8002b92:	46bd      	mov	sp, r7
 8002b94:	b004      	add	sp, #16
 8002b96:	bd80      	pop	{r7, pc}

08002b98 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b082      	sub	sp, #8
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
 8002ba0:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	695b      	ldr	r3, [r3, #20]
 8002ba6:	683a      	ldr	r2, [r7, #0]
 8002ba8:	2104      	movs	r1, #4
 8002baa:	400a      	ands	r2, r1
 8002bac:	2107      	movs	r1, #7
 8002bae:	4091      	lsls	r1, r2
 8002bb0:	000a      	movs	r2, r1
 8002bb2:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	2104      	movs	r1, #4
 8002bb8:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8002bba:	40da      	lsrs	r2, r3
 8002bbc:	0013      	movs	r3, r2
}
 8002bbe:	0018      	movs	r0, r3
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	b002      	add	sp, #8
 8002bc4:	bd80      	pop	{r7, pc}

08002bc6 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002bc6:	b580      	push	{r7, lr}
 8002bc8:	b082      	sub	sp, #8
 8002bca:	af00      	add	r7, sp, #0
 8002bcc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	68da      	ldr	r2, [r3, #12]
 8002bd2:	23c0      	movs	r3, #192	@ 0xc0
 8002bd4:	011b      	lsls	r3, r3, #4
 8002bd6:	4013      	ands	r3, r2
 8002bd8:	d101      	bne.n	8002bde <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e000      	b.n	8002be0 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002bde:	2300      	movs	r3, #0
}
 8002be0:	0018      	movs	r0, r3
 8002be2:	46bd      	mov	sp, r7
 8002be4:	b002      	add	sp, #8
 8002be6:	bd80      	pop	{r7, pc}

08002be8 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b084      	sub	sp, #16
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	60f8      	str	r0, [r7, #12]
 8002bf0:	60b9      	str	r1, [r7, #8]
 8002bf2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bf8:	68ba      	ldr	r2, [r7, #8]
 8002bfa:	211f      	movs	r1, #31
 8002bfc:	400a      	ands	r2, r1
 8002bfe:	210f      	movs	r1, #15
 8002c00:	4091      	lsls	r1, r2
 8002c02:	000a      	movs	r2, r1
 8002c04:	43d2      	mvns	r2, r2
 8002c06:	401a      	ands	r2, r3
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	0e9b      	lsrs	r3, r3, #26
 8002c0c:	210f      	movs	r1, #15
 8002c0e:	4019      	ands	r1, r3
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	201f      	movs	r0, #31
 8002c14:	4003      	ands	r3, r0
 8002c16:	4099      	lsls	r1, r3
 8002c18:	000b      	movs	r3, r1
 8002c1a:	431a      	orrs	r2, r3
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002c20:	46c0      	nop			@ (mov r8, r8)
 8002c22:	46bd      	mov	sp, r7
 8002c24:	b004      	add	sp, #16
 8002c26:	bd80      	pop	{r7, pc}

08002c28 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b082      	sub	sp, #8
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
 8002c30:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	035b      	lsls	r3, r3, #13
 8002c3a:	0b5b      	lsrs	r3, r3, #13
 8002c3c:	431a      	orrs	r2, r3
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002c42:	46c0      	nop			@ (mov r8, r8)
 8002c44:	46bd      	mov	sp, r7
 8002c46:	b002      	add	sp, #8
 8002c48:	bd80      	pop	{r7, pc}

08002c4a <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002c4a:	b580      	push	{r7, lr}
 8002c4c:	b082      	sub	sp, #8
 8002c4e:	af00      	add	r7, sp, #0
 8002c50:	6078      	str	r0, [r7, #4]
 8002c52:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c58:	683a      	ldr	r2, [r7, #0]
 8002c5a:	0352      	lsls	r2, r2, #13
 8002c5c:	0b52      	lsrs	r2, r2, #13
 8002c5e:	43d2      	mvns	r2, r2
 8002c60:	401a      	ands	r2, r3
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002c66:	46c0      	nop			@ (mov r8, r8)
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	b002      	add	sp, #8
 8002c6c:	bd80      	pop	{r7, pc}

08002c6e <LL_ADC_REG_GetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  */
__STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(const ADC_TypeDef *ADCx)
{
 8002c6e:	b580      	push	{r7, lr}
 8002c70:	b082      	sub	sp, #8
 8002c72:	af00      	add	r7, sp, #0
 8002c74:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG));
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	68db      	ldr	r3, [r3, #12]
 8002c7a:	2203      	movs	r2, #3
 8002c7c:	4013      	ands	r3, r2
}
 8002c7e:	0018      	movs	r0, r3
 8002c80:	46bd      	mov	sp, r7
 8002c82:	b002      	add	sp, #8
 8002c84:	bd80      	pop	{r7, pc}
	...

08002c88 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b084      	sub	sp, #16
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	60f8      	str	r0, [r7, #12]
 8002c90:	60b9      	str	r1, [r7, #8]
 8002c92:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	695b      	ldr	r3, [r3, #20]
 8002c98:	68ba      	ldr	r2, [r7, #8]
 8002c9a:	0212      	lsls	r2, r2, #8
 8002c9c:	43d2      	mvns	r2, r2
 8002c9e:	401a      	ands	r2, r3
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	021b      	lsls	r3, r3, #8
 8002ca4:	6879      	ldr	r1, [r7, #4]
 8002ca6:	400b      	ands	r3, r1
 8002ca8:	4904      	ldr	r1, [pc, #16]	@ (8002cbc <LL_ADC_SetChannelSamplingTime+0x34>)
 8002caa:	400b      	ands	r3, r1
 8002cac:	431a      	orrs	r2, r3
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8002cb2:	46c0      	nop			@ (mov r8, r8)
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	b004      	add	sp, #16
 8002cb8:	bd80      	pop	{r7, pc}
 8002cba:	46c0      	nop			@ (mov r8, r8)
 8002cbc:	07ffff00 	.word	0x07ffff00

08002cc0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b082      	sub	sp, #8
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	689b      	ldr	r3, [r3, #8]
 8002ccc:	4a05      	ldr	r2, [pc, #20]	@ (8002ce4 <LL_ADC_EnableInternalRegulator+0x24>)
 8002cce:	4013      	ands	r3, r2
 8002cd0:	2280      	movs	r2, #128	@ 0x80
 8002cd2:	0552      	lsls	r2, r2, #21
 8002cd4:	431a      	orrs	r2, r3
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002cda:	46c0      	nop			@ (mov r8, r8)
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	b002      	add	sp, #8
 8002ce0:	bd80      	pop	{r7, pc}
 8002ce2:	46c0      	nop			@ (mov r8, r8)
 8002ce4:	6fffffe8 	.word	0x6fffffe8

08002ce8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b082      	sub	sp, #8
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	689a      	ldr	r2, [r3, #8]
 8002cf4:	2380      	movs	r3, #128	@ 0x80
 8002cf6:	055b      	lsls	r3, r3, #21
 8002cf8:	401a      	ands	r2, r3
 8002cfa:	2380      	movs	r3, #128	@ 0x80
 8002cfc:	055b      	lsls	r3, r3, #21
 8002cfe:	429a      	cmp	r2, r3
 8002d00:	d101      	bne.n	8002d06 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8002d02:	2301      	movs	r3, #1
 8002d04:	e000      	b.n	8002d08 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8002d06:	2300      	movs	r3, #0
}
 8002d08:	0018      	movs	r0, r3
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	b002      	add	sp, #8
 8002d0e:	bd80      	pop	{r7, pc}

08002d10 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b082      	sub	sp, #8
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	2201      	movs	r2, #1
 8002d1e:	4013      	ands	r3, r2
 8002d20:	2b01      	cmp	r3, #1
 8002d22:	d101      	bne.n	8002d28 <LL_ADC_IsEnabled+0x18>
 8002d24:	2301      	movs	r3, #1
 8002d26:	e000      	b.n	8002d2a <LL_ADC_IsEnabled+0x1a>
 8002d28:	2300      	movs	r3, #0
}
 8002d2a:	0018      	movs	r0, r3
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	b002      	add	sp, #8
 8002d30:	bd80      	pop	{r7, pc}

08002d32 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002d32:	b580      	push	{r7, lr}
 8002d34:	b082      	sub	sp, #8
 8002d36:	af00      	add	r7, sp, #0
 8002d38:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	2204      	movs	r2, #4
 8002d40:	4013      	ands	r3, r2
 8002d42:	2b04      	cmp	r3, #4
 8002d44:	d101      	bne.n	8002d4a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002d46:	2301      	movs	r3, #1
 8002d48:	e000      	b.n	8002d4c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002d4a:	2300      	movs	r3, #0
}
 8002d4c:	0018      	movs	r0, r3
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	b002      	add	sp, #8
 8002d52:	bd80      	pop	{r7, pc}

08002d54 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b088      	sub	sp, #32
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d5c:	231f      	movs	r3, #31
 8002d5e:	18fb      	adds	r3, r7, r3
 8002d60:	2200      	movs	r2, #0
 8002d62:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 8002d64:	2300      	movs	r3, #0
 8002d66:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 8002d68:	2300      	movs	r3, #0
 8002d6a:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d101      	bne.n	8002d7a <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	e17f      	b.n	800307a <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d10a      	bne.n	8002d98 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	0018      	movs	r0, r3
 8002d86:	f7fe fe09 	bl	800199c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2254      	movs	r2, #84	@ 0x54
 8002d94:	2100      	movs	r1, #0
 8002d96:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	0018      	movs	r0, r3
 8002d9e:	f7ff ffa3 	bl	8002ce8 <LL_ADC_IsInternalRegulatorEnabled>
 8002da2:	1e03      	subs	r3, r0, #0
 8002da4:	d115      	bne.n	8002dd2 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	0018      	movs	r0, r3
 8002dac:	f7ff ff88 	bl	8002cc0 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002db0:	4bb4      	ldr	r3, [pc, #720]	@ (8003084 <HAL_ADC_Init+0x330>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	49b4      	ldr	r1, [pc, #720]	@ (8003088 <HAL_ADC_Init+0x334>)
 8002db6:	0018      	movs	r0, r3
 8002db8:	f7fd f9fe 	bl	80001b8 <__udivsi3>
 8002dbc:	0003      	movs	r3, r0
 8002dbe:	3301      	adds	r3, #1
 8002dc0:	005b      	lsls	r3, r3, #1
 8002dc2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002dc4:	e002      	b.n	8002dcc <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	3b01      	subs	r3, #1
 8002dca:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d1f9      	bne.n	8002dc6 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	0018      	movs	r0, r3
 8002dd8:	f7ff ff86 	bl	8002ce8 <LL_ADC_IsInternalRegulatorEnabled>
 8002ddc:	1e03      	subs	r3, r0, #0
 8002dde:	d10f      	bne.n	8002e00 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002de4:	2210      	movs	r2, #16
 8002de6:	431a      	orrs	r2, r3
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002df0:	2201      	movs	r2, #1
 8002df2:	431a      	orrs	r2, r3
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002df8:	231f      	movs	r3, #31
 8002dfa:	18fb      	adds	r3, r7, r3
 8002dfc:	2201      	movs	r2, #1
 8002dfe:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	0018      	movs	r0, r3
 8002e06:	f7ff ff94 	bl	8002d32 <LL_ADC_REG_IsConversionOngoing>
 8002e0a:	0003      	movs	r3, r0
 8002e0c:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e12:	2210      	movs	r2, #16
 8002e14:	4013      	ands	r3, r2
 8002e16:	d000      	beq.n	8002e1a <HAL_ADC_Init+0xc6>
 8002e18:	e122      	b.n	8003060 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d000      	beq.n	8002e22 <HAL_ADC_Init+0xce>
 8002e20:	e11e      	b.n	8003060 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e26:	4a99      	ldr	r2, [pc, #612]	@ (800308c <HAL_ADC_Init+0x338>)
 8002e28:	4013      	ands	r3, r2
 8002e2a:	2202      	movs	r2, #2
 8002e2c:	431a      	orrs	r2, r3
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	0018      	movs	r0, r3
 8002e38:	f7ff ff6a 	bl	8002d10 <LL_ADC_IsEnabled>
 8002e3c:	1e03      	subs	r3, r0, #0
 8002e3e:	d000      	beq.n	8002e42 <HAL_ADC_Init+0xee>
 8002e40:	e0ad      	b.n	8002f9e <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	7e1b      	ldrb	r3, [r3, #24]
 8002e4a:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8002e4c:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	7e5b      	ldrb	r3, [r3, #25]
 8002e52:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002e54:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	7e9b      	ldrb	r3, [r3, #26]
 8002e5a:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002e5c:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d002      	beq.n	8002e6c <HAL_ADC_Init+0x118>
 8002e66:	2380      	movs	r3, #128	@ 0x80
 8002e68:	015b      	lsls	r3, r3, #5
 8002e6a:	e000      	b.n	8002e6e <HAL_ADC_Init+0x11a>
 8002e6c:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002e6e:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002e74:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	691b      	ldr	r3, [r3, #16]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	da04      	bge.n	8002e88 <HAL_ADC_Init+0x134>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	691b      	ldr	r3, [r3, #16]
 8002e82:	005b      	lsls	r3, r3, #1
 8002e84:	085b      	lsrs	r3, r3, #1
 8002e86:	e001      	b.n	8002e8c <HAL_ADC_Init+0x138>
 8002e88:	2380      	movs	r3, #128	@ 0x80
 8002e8a:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 8002e8c:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	212c      	movs	r1, #44	@ 0x2c
 8002e92:	5c5b      	ldrb	r3, [r3, r1]
 8002e94:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002e96:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8002e98:	69ba      	ldr	r2, [r7, #24]
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2220      	movs	r2, #32
 8002ea2:	5c9b      	ldrb	r3, [r3, r2]
 8002ea4:	2b01      	cmp	r3, #1
 8002ea6:	d115      	bne.n	8002ed4 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	7e9b      	ldrb	r3, [r3, #26]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d105      	bne.n	8002ebc <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 8002eb0:	69bb      	ldr	r3, [r7, #24]
 8002eb2:	2280      	movs	r2, #128	@ 0x80
 8002eb4:	0252      	lsls	r2, r2, #9
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	61bb      	str	r3, [r7, #24]
 8002eba:	e00b      	b.n	8002ed4 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ec0:	2220      	movs	r2, #32
 8002ec2:	431a      	orrs	r2, r3
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ecc:	2201      	movs	r2, #1
 8002ece:	431a      	orrs	r2, r3
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d00a      	beq.n	8002ef2 <HAL_ADC_Init+0x19e>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002ee0:	23e0      	movs	r3, #224	@ 0xe0
 8002ee2:	005b      	lsls	r3, r3, #1
 8002ee4:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002eea:	4313      	orrs	r3, r2
 8002eec:	69ba      	ldr	r2, [r7, #24]
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	68db      	ldr	r3, [r3, #12]
 8002ef8:	4a65      	ldr	r2, [pc, #404]	@ (8003090 <HAL_ADC_Init+0x33c>)
 8002efa:	4013      	ands	r3, r2
 8002efc:	0019      	movs	r1, r3
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	69ba      	ldr	r2, [r7, #24]
 8002f04:	430a      	orrs	r2, r1
 8002f06:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	0f9b      	lsrs	r3, r3, #30
 8002f0e:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002f14:	4313      	orrs	r3, r2
 8002f16:	697a      	ldr	r2, [r7, #20]
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	223c      	movs	r2, #60	@ 0x3c
 8002f20:	5c9b      	ldrb	r3, [r3, r2]
 8002f22:	2b01      	cmp	r3, #1
 8002f24:	d111      	bne.n	8002f4a <HAL_ADC_Init+0x1f6>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	0f9b      	lsrs	r3, r3, #30
 8002f2c:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002f32:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                      hadc->Init.Oversampling.Ratio         |
 8002f38:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                      hadc->Init.Oversampling.RightBitShift |
 8002f3e:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	4313      	orrs	r3, r2
 8002f44:	2201      	movs	r2, #1
 8002f46:	4313      	orrs	r3, r2
 8002f48:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	691b      	ldr	r3, [r3, #16]
 8002f50:	4a50      	ldr	r2, [pc, #320]	@ (8003094 <HAL_ADC_Init+0x340>)
 8002f52:	4013      	ands	r3, r2
 8002f54:	0019      	movs	r1, r3
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	697a      	ldr	r2, [r7, #20]
 8002f5c:	430a      	orrs	r2, r1
 8002f5e:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	685a      	ldr	r2, [r3, #4]
 8002f64:	23c0      	movs	r3, #192	@ 0xc0
 8002f66:	061b      	lsls	r3, r3, #24
 8002f68:	429a      	cmp	r2, r3
 8002f6a:	d018      	beq.n	8002f9e <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8002f70:	2380      	movs	r3, #128	@ 0x80
 8002f72:	05db      	lsls	r3, r3, #23
 8002f74:	429a      	cmp	r2, r3
 8002f76:	d012      	beq.n	8002f9e <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8002f7c:	2380      	movs	r3, #128	@ 0x80
 8002f7e:	061b      	lsls	r3, r3, #24
 8002f80:	429a      	cmp	r2, r3
 8002f82:	d00c      	beq.n	8002f9e <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8002f84:	4b44      	ldr	r3, [pc, #272]	@ (8003098 <HAL_ADC_Init+0x344>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a44      	ldr	r2, [pc, #272]	@ (800309c <HAL_ADC_Init+0x348>)
 8002f8a:	4013      	ands	r3, r2
 8002f8c:	0019      	movs	r1, r3
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	685a      	ldr	r2, [r3, #4]
 8002f92:	23f0      	movs	r3, #240	@ 0xf0
 8002f94:	039b      	lsls	r3, r3, #14
 8002f96:	401a      	ands	r2, r3
 8002f98:	4b3f      	ldr	r3, [pc, #252]	@ (8003098 <HAL_ADC_Init+0x344>)
 8002f9a:	430a      	orrs	r2, r1
 8002f9c:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6818      	ldr	r0, [r3, #0]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fa6:	001a      	movs	r2, r3
 8002fa8:	2100      	movs	r1, #0
 8002faa:	f7ff fdd8 	bl	8002b5e <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6818      	ldr	r0, [r3, #0]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fb6:	493a      	ldr	r1, [pc, #232]	@ (80030a0 <HAL_ADC_Init+0x34c>)
 8002fb8:	001a      	movs	r2, r3
 8002fba:	f7ff fdd0 	bl	8002b5e <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	691b      	ldr	r3, [r3, #16]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d109      	bne.n	8002fda <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	2110      	movs	r1, #16
 8002fd2:	4249      	negs	r1, r1
 8002fd4:	430a      	orrs	r2, r1
 8002fd6:	629a      	str	r2, [r3, #40]	@ 0x28
 8002fd8:	e018      	b.n	800300c <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	691a      	ldr	r2, [r3, #16]
 8002fde:	2380      	movs	r3, #128	@ 0x80
 8002fe0:	039b      	lsls	r3, r3, #14
 8002fe2:	429a      	cmp	r2, r3
 8002fe4:	d112      	bne.n	800300c <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	69db      	ldr	r3, [r3, #28]
 8002ff0:	3b01      	subs	r3, #1
 8002ff2:	009b      	lsls	r3, r3, #2
 8002ff4:	221c      	movs	r2, #28
 8002ff6:	4013      	ands	r3, r2
 8002ff8:	2210      	movs	r2, #16
 8002ffa:	4252      	negs	r2, r2
 8002ffc:	409a      	lsls	r2, r3
 8002ffe:	0011      	movs	r1, r2
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	430a      	orrs	r2, r1
 800300a:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	2100      	movs	r1, #0
 8003012:	0018      	movs	r0, r3
 8003014:	f7ff fdc0 	bl	8002b98 <LL_ADC_GetSamplingTimeCommonChannels>
 8003018:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800301e:	429a      	cmp	r2, r3
 8003020:	d10b      	bne.n	800303a <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2200      	movs	r2, #0
 8003026:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800302c:	2203      	movs	r2, #3
 800302e:	4393      	bics	r3, r2
 8003030:	2201      	movs	r2, #1
 8003032:	431a      	orrs	r2, r3
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003038:	e01c      	b.n	8003074 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800303e:	2212      	movs	r2, #18
 8003040:	4393      	bics	r3, r2
 8003042:	2210      	movs	r2, #16
 8003044:	431a      	orrs	r2, r3
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800304e:	2201      	movs	r2, #1
 8003050:	431a      	orrs	r2, r3
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 8003056:	231f      	movs	r3, #31
 8003058:	18fb      	adds	r3, r7, r3
 800305a:	2201      	movs	r2, #1
 800305c:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800305e:	e009      	b.n	8003074 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003064:	2210      	movs	r2, #16
 8003066:	431a      	orrs	r2, r3
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800306c:	231f      	movs	r3, #31
 800306e:	18fb      	adds	r3, r7, r3
 8003070:	2201      	movs	r2, #1
 8003072:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8003074:	231f      	movs	r3, #31
 8003076:	18fb      	adds	r3, r7, r3
 8003078:	781b      	ldrb	r3, [r3, #0]
}
 800307a:	0018      	movs	r0, r3
 800307c:	46bd      	mov	sp, r7
 800307e:	b008      	add	sp, #32
 8003080:	bd80      	pop	{r7, pc}
 8003082:	46c0      	nop			@ (mov r8, r8)
 8003084:	200000f0 	.word	0x200000f0
 8003088:	00030d40 	.word	0x00030d40
 800308c:	fffffefd 	.word	0xfffffefd
 8003090:	ffde0201 	.word	0xffde0201
 8003094:	1ffffc02 	.word	0x1ffffc02
 8003098:	40012708 	.word	0x40012708
 800309c:	ffc3ffff 	.word	0xffc3ffff
 80030a0:	07ffff04 	.word	0x07ffff04

080030a4 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b086      	sub	sp, #24
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80030ac:	2300      	movs	r3, #0
 80030ae:	617b      	str	r3, [r7, #20]
  uint32_t tmp_isr = hadc->Instance->ISR;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_ier = hadc->Instance->IER;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80030c0:	693b      	ldr	r3, [r7, #16]
 80030c2:	2202      	movs	r2, #2
 80030c4:	4013      	ands	r3, r2
 80030c6:	d017      	beq.n	80030f8 <HAL_ADC_IRQHandler+0x54>
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	2202      	movs	r2, #2
 80030cc:	4013      	ands	r3, r2
 80030ce:	d013      	beq.n	80030f8 <HAL_ADC_IRQHandler+0x54>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030d4:	2210      	movs	r2, #16
 80030d6:	4013      	ands	r3, r2
 80030d8:	d106      	bne.n	80030e8 <HAL_ADC_IRQHandler+0x44>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030de:	2280      	movs	r2, #128	@ 0x80
 80030e0:	0112      	lsls	r2, r2, #4
 80030e2:	431a      	orrs	r2, r3
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	659a      	str	r2, [r3, #88]	@ 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	0018      	movs	r0, r3
 80030ec:	f000 faf2 	bl	80036d4 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	2202      	movs	r2, #2
 80030f6:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80030f8:	693b      	ldr	r3, [r7, #16]
 80030fa:	2204      	movs	r2, #4
 80030fc:	4013      	ands	r3, r2
 80030fe:	d003      	beq.n	8003108 <HAL_ADC_IRQHandler+0x64>
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	2204      	movs	r2, #4
 8003104:	4013      	ands	r3, r2
 8003106:	d107      	bne.n	8003118 <HAL_ADC_IRQHandler+0x74>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003108:	693b      	ldr	r3, [r7, #16]
 800310a:	2208      	movs	r2, #8
 800310c:	4013      	ands	r3, r2
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800310e:	d04d      	beq.n	80031ac <HAL_ADC_IRQHandler+0x108>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	2208      	movs	r2, #8
 8003114:	4013      	ands	r3, r2
 8003116:	d049      	beq.n	80031ac <HAL_ADC_IRQHandler+0x108>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800311c:	2210      	movs	r2, #16
 800311e:	4013      	ands	r3, r2
 8003120:	d106      	bne.n	8003130 <HAL_ADC_IRQHandler+0x8c>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003126:	2280      	movs	r2, #128	@ 0x80
 8003128:	0092      	lsls	r2, r2, #2
 800312a:	431a      	orrs	r2, r3
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	0018      	movs	r0, r3
 8003136:	f7ff fd46 	bl	8002bc6 <LL_ADC_REG_IsTriggerSourceSWStart>
 800313a:	1e03      	subs	r3, r0, #0
 800313c:	d02e      	beq.n	800319c <HAL_ADC_IRQHandler+0xf8>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	7e9b      	ldrb	r3, [r3, #26]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d12a      	bne.n	800319c <HAL_ADC_IRQHandler+0xf8>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	2208      	movs	r2, #8
 800314e:	4013      	ands	r3, r2
 8003150:	2b08      	cmp	r3, #8
 8003152:	d123      	bne.n	800319c <HAL_ADC_IRQHandler+0xf8>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	0018      	movs	r0, r3
 800315a:	f7ff fdea 	bl	8002d32 <LL_ADC_REG_IsConversionOngoing>
 800315e:	1e03      	subs	r3, r0, #0
 8003160:	d110      	bne.n	8003184 <HAL_ADC_IRQHandler+0xe0>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	685a      	ldr	r2, [r3, #4]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	210c      	movs	r1, #12
 800316e:	438a      	bics	r2, r1
 8003170:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003176:	4a56      	ldr	r2, [pc, #344]	@ (80032d0 <HAL_ADC_IRQHandler+0x22c>)
 8003178:	4013      	ands	r3, r2
 800317a:	2201      	movs	r2, #1
 800317c:	431a      	orrs	r2, r3
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	659a      	str	r2, [r3, #88]	@ 0x58
 8003182:	e00b      	b.n	800319c <HAL_ADC_IRQHandler+0xf8>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003188:	2220      	movs	r2, #32
 800318a:	431a      	orrs	r2, r3
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003194:	2201      	movs	r2, #1
 8003196:	431a      	orrs	r2, r3
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	65da      	str	r2, [r3, #92]	@ 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	0018      	movs	r0, r3
 80031a0:	f000 f898 	bl	80032d4 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	220c      	movs	r2, #12
 80031aa:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80031ac:	693b      	ldr	r3, [r7, #16]
 80031ae:	2280      	movs	r2, #128	@ 0x80
 80031b0:	4013      	ands	r3, r2
 80031b2:	d012      	beq.n	80031da <HAL_ADC_IRQHandler+0x136>
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	2280      	movs	r2, #128	@ 0x80
 80031b8:	4013      	ands	r3, r2
 80031ba:	d00e      	beq.n	80031da <HAL_ADC_IRQHandler+0x136>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031c0:	2280      	movs	r2, #128	@ 0x80
 80031c2:	0252      	lsls	r2, r2, #9
 80031c4:	431a      	orrs	r2, r3
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	0018      	movs	r0, r3
 80031ce:	f000 f889 	bl	80032e4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	2280      	movs	r2, #128	@ 0x80
 80031d8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80031da:	693a      	ldr	r2, [r7, #16]
 80031dc:	2380      	movs	r3, #128	@ 0x80
 80031de:	005b      	lsls	r3, r3, #1
 80031e0:	4013      	ands	r3, r2
 80031e2:	d014      	beq.n	800320e <HAL_ADC_IRQHandler+0x16a>
 80031e4:	68fa      	ldr	r2, [r7, #12]
 80031e6:	2380      	movs	r3, #128	@ 0x80
 80031e8:	005b      	lsls	r3, r3, #1
 80031ea:	4013      	ands	r3, r2
 80031ec:	d00f      	beq.n	800320e <HAL_ADC_IRQHandler+0x16a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031f2:	2280      	movs	r2, #128	@ 0x80
 80031f4:	0292      	lsls	r2, r2, #10
 80031f6:	431a      	orrs	r2, r3
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	0018      	movs	r0, r3
 8003200:	f000 fa58 	bl	80036b4 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	2280      	movs	r2, #128	@ 0x80
 800320a:	0052      	lsls	r2, r2, #1
 800320c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 800320e:	693a      	ldr	r2, [r7, #16]
 8003210:	2380      	movs	r3, #128	@ 0x80
 8003212:	009b      	lsls	r3, r3, #2
 8003214:	4013      	ands	r3, r2
 8003216:	d014      	beq.n	8003242 <HAL_ADC_IRQHandler+0x19e>
 8003218:	68fa      	ldr	r2, [r7, #12]
 800321a:	2380      	movs	r3, #128	@ 0x80
 800321c:	009b      	lsls	r3, r3, #2
 800321e:	4013      	ands	r3, r2
 8003220:	d00f      	beq.n	8003242 <HAL_ADC_IRQHandler+0x19e>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003226:	2280      	movs	r2, #128	@ 0x80
 8003228:	02d2      	lsls	r2, r2, #11
 800322a:	431a      	orrs	r2, r3
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	0018      	movs	r0, r3
 8003234:	f000 fa46 	bl	80036c4 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	2280      	movs	r2, #128	@ 0x80
 800323e:	0092      	lsls	r2, r2, #2
 8003240:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003242:	693b      	ldr	r3, [r7, #16]
 8003244:	2210      	movs	r2, #16
 8003246:	4013      	ands	r3, r2
 8003248:	d02b      	beq.n	80032a2 <HAL_ADC_IRQHandler+0x1fe>
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	2210      	movs	r2, #16
 800324e:	4013      	ands	r3, r2
 8003250:	d027      	beq.n	80032a2 <HAL_ADC_IRQHandler+0x1fe>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003256:	2b00      	cmp	r3, #0
 8003258:	d102      	bne.n	8003260 <HAL_ADC_IRQHandler+0x1bc>
    {
      overrun_error = 1UL;
 800325a:	2301      	movs	r3, #1
 800325c:	617b      	str	r3, [r7, #20]
 800325e:	e008      	b.n	8003272 <HAL_ADC_IRQHandler+0x1ce>
    }
    else
    {
      /* Check DMA configuration */
      if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	0018      	movs	r0, r3
 8003266:	f7ff fd02 	bl	8002c6e <LL_ADC_REG_GetDMATransfer>
 800326a:	1e03      	subs	r3, r0, #0
 800326c:	d001      	beq.n	8003272 <HAL_ADC_IRQHandler+0x1ce>
      {
        overrun_error = 1UL;
 800326e:	2301      	movs	r3, #1
 8003270:	617b      	str	r3, [r7, #20]
      }
    }

    if (overrun_error == 1UL)
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	2b01      	cmp	r3, #1
 8003276:	d110      	bne.n	800329a <HAL_ADC_IRQHandler+0x1f6>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800327c:	2280      	movs	r2, #128	@ 0x80
 800327e:	00d2      	lsls	r2, r2, #3
 8003280:	431a      	orrs	r2, r3
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800328a:	2202      	movs	r2, #2
 800328c:	431a      	orrs	r2, r3
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	65da      	str	r2, [r3, #92]	@ 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	0018      	movs	r0, r3
 8003296:	f000 f82d 	bl	80032f4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	2210      	movs	r2, #16
 80032a0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check channel configuration ready flag ========== */
  if (((tmp_isr & ADC_FLAG_CCRDY) == ADC_FLAG_CCRDY) && ((tmp_ier & ADC_IT_CCRDY) == ADC_IT_CCRDY))
 80032a2:	693a      	ldr	r2, [r7, #16]
 80032a4:	2380      	movs	r3, #128	@ 0x80
 80032a6:	019b      	lsls	r3, r3, #6
 80032a8:	4013      	ands	r3, r2
 80032aa:	d00d      	beq.n	80032c8 <HAL_ADC_IRQHandler+0x224>
 80032ac:	68fa      	ldr	r2, [r7, #12]
 80032ae:	2380      	movs	r3, #128	@ 0x80
 80032b0:	019b      	lsls	r3, r3, #6
 80032b2:	4013      	ands	r3, r2
 80032b4:	d008      	beq.n	80032c8 <HAL_ADC_IRQHandler+0x224>
  {
    /* Channel configuration ready callback */
    HAL_ADCEx_ChannelConfigReadyCallback(hadc);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	0018      	movs	r0, r3
 80032ba:	f000 fa13 	bl	80036e4 <HAL_ADCEx_ChannelConfigReadyCallback>

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_CCRDY);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	2280      	movs	r2, #128	@ 0x80
 80032c4:	0192      	lsls	r2, r2, #6
 80032c6:	601a      	str	r2, [r3, #0]
  }
}
 80032c8:	46c0      	nop			@ (mov r8, r8)
 80032ca:	46bd      	mov	sp, r7
 80032cc:	b006      	add	sp, #24
 80032ce:	bd80      	pop	{r7, pc}
 80032d0:	fffffefe 	.word	0xfffffefe

080032d4 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b082      	sub	sp, #8
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80032dc:	46c0      	nop			@ (mov r8, r8)
 80032de:	46bd      	mov	sp, r7
 80032e0:	b002      	add	sp, #8
 80032e2:	bd80      	pop	{r7, pc}

080032e4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b082      	sub	sp, #8
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80032ec:	46c0      	nop			@ (mov r8, r8)
 80032ee:	46bd      	mov	sp, r7
 80032f0:	b002      	add	sp, #8
 80032f2:	bd80      	pop	{r7, pc}

080032f4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b082      	sub	sp, #8
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80032fc:	46c0      	nop			@ (mov r8, r8)
 80032fe:	46bd      	mov	sp, r7
 8003300:	b002      	add	sp, #8
 8003302:	bd80      	pop	{r7, pc}

08003304 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b086      	sub	sp, #24
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
 800330c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800330e:	2317      	movs	r3, #23
 8003310:	18fb      	adds	r3, r7, r3
 8003312:	2200      	movs	r2, #0
 8003314:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003316:	2300      	movs	r3, #0
 8003318:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2254      	movs	r2, #84	@ 0x54
 800331e:	5c9b      	ldrb	r3, [r3, r2]
 8003320:	2b01      	cmp	r3, #1
 8003322:	d101      	bne.n	8003328 <HAL_ADC_ConfigChannel+0x24>
 8003324:	2302      	movs	r3, #2
 8003326:	e1c0      	b.n	80036aa <HAL_ADC_ConfigChannel+0x3a6>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2254      	movs	r2, #84	@ 0x54
 800332c:	2101      	movs	r1, #1
 800332e:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	0018      	movs	r0, r3
 8003336:	f7ff fcfc 	bl	8002d32 <LL_ADC_REG_IsConversionOngoing>
 800333a:	1e03      	subs	r3, r0, #0
 800333c:	d000      	beq.n	8003340 <HAL_ADC_ConfigChannel+0x3c>
 800333e:	e1a3      	b.n	8003688 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	2b02      	cmp	r3, #2
 8003346:	d100      	bne.n	800334a <HAL_ADC_ConfigChannel+0x46>
 8003348:	e143      	b.n	80035d2 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	691a      	ldr	r2, [r3, #16]
 800334e:	2380      	movs	r3, #128	@ 0x80
 8003350:	061b      	lsls	r3, r3, #24
 8003352:	429a      	cmp	r2, r3
 8003354:	d004      	beq.n	8003360 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800335a:	4ac1      	ldr	r2, [pc, #772]	@ (8003660 <HAL_ADC_ConfigChannel+0x35c>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d108      	bne.n	8003372 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681a      	ldr	r2, [r3, #0]
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	0019      	movs	r1, r3
 800336a:	0010      	movs	r0, r2
 800336c:	f7ff fc5c 	bl	8002c28 <LL_ADC_REG_SetSequencerChAdd>
 8003370:	e0c9      	b.n	8003506 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	211f      	movs	r1, #31
 800337c:	400b      	ands	r3, r1
 800337e:	210f      	movs	r1, #15
 8003380:	4099      	lsls	r1, r3
 8003382:	000b      	movs	r3, r1
 8003384:	43db      	mvns	r3, r3
 8003386:	4013      	ands	r3, r2
 8003388:	0019      	movs	r1, r3
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	035b      	lsls	r3, r3, #13
 8003390:	0b5b      	lsrs	r3, r3, #13
 8003392:	d105      	bne.n	80033a0 <HAL_ADC_ConfigChannel+0x9c>
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	0e9b      	lsrs	r3, r3, #26
 800339a:	221f      	movs	r2, #31
 800339c:	4013      	ands	r3, r2
 800339e:	e098      	b.n	80034d2 <HAL_ADC_ConfigChannel+0x1ce>
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	2201      	movs	r2, #1
 80033a6:	4013      	ands	r3, r2
 80033a8:	d000      	beq.n	80033ac <HAL_ADC_ConfigChannel+0xa8>
 80033aa:	e091      	b.n	80034d0 <HAL_ADC_ConfigChannel+0x1cc>
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	2202      	movs	r2, #2
 80033b2:	4013      	ands	r3, r2
 80033b4:	d000      	beq.n	80033b8 <HAL_ADC_ConfigChannel+0xb4>
 80033b6:	e089      	b.n	80034cc <HAL_ADC_ConfigChannel+0x1c8>
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	2204      	movs	r2, #4
 80033be:	4013      	ands	r3, r2
 80033c0:	d000      	beq.n	80033c4 <HAL_ADC_ConfigChannel+0xc0>
 80033c2:	e081      	b.n	80034c8 <HAL_ADC_ConfigChannel+0x1c4>
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	2208      	movs	r2, #8
 80033ca:	4013      	ands	r3, r2
 80033cc:	d000      	beq.n	80033d0 <HAL_ADC_ConfigChannel+0xcc>
 80033ce:	e079      	b.n	80034c4 <HAL_ADC_ConfigChannel+0x1c0>
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	2210      	movs	r2, #16
 80033d6:	4013      	ands	r3, r2
 80033d8:	d000      	beq.n	80033dc <HAL_ADC_ConfigChannel+0xd8>
 80033da:	e071      	b.n	80034c0 <HAL_ADC_ConfigChannel+0x1bc>
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	2220      	movs	r2, #32
 80033e2:	4013      	ands	r3, r2
 80033e4:	d000      	beq.n	80033e8 <HAL_ADC_ConfigChannel+0xe4>
 80033e6:	e069      	b.n	80034bc <HAL_ADC_ConfigChannel+0x1b8>
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	2240      	movs	r2, #64	@ 0x40
 80033ee:	4013      	ands	r3, r2
 80033f0:	d000      	beq.n	80033f4 <HAL_ADC_ConfigChannel+0xf0>
 80033f2:	e061      	b.n	80034b8 <HAL_ADC_ConfigChannel+0x1b4>
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	2280      	movs	r2, #128	@ 0x80
 80033fa:	4013      	ands	r3, r2
 80033fc:	d000      	beq.n	8003400 <HAL_ADC_ConfigChannel+0xfc>
 80033fe:	e059      	b.n	80034b4 <HAL_ADC_ConfigChannel+0x1b0>
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	681a      	ldr	r2, [r3, #0]
 8003404:	2380      	movs	r3, #128	@ 0x80
 8003406:	005b      	lsls	r3, r3, #1
 8003408:	4013      	ands	r3, r2
 800340a:	d151      	bne.n	80034b0 <HAL_ADC_ConfigChannel+0x1ac>
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	681a      	ldr	r2, [r3, #0]
 8003410:	2380      	movs	r3, #128	@ 0x80
 8003412:	009b      	lsls	r3, r3, #2
 8003414:	4013      	ands	r3, r2
 8003416:	d149      	bne.n	80034ac <HAL_ADC_ConfigChannel+0x1a8>
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	681a      	ldr	r2, [r3, #0]
 800341c:	2380      	movs	r3, #128	@ 0x80
 800341e:	00db      	lsls	r3, r3, #3
 8003420:	4013      	ands	r3, r2
 8003422:	d141      	bne.n	80034a8 <HAL_ADC_ConfigChannel+0x1a4>
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	681a      	ldr	r2, [r3, #0]
 8003428:	2380      	movs	r3, #128	@ 0x80
 800342a:	011b      	lsls	r3, r3, #4
 800342c:	4013      	ands	r3, r2
 800342e:	d139      	bne.n	80034a4 <HAL_ADC_ConfigChannel+0x1a0>
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	681a      	ldr	r2, [r3, #0]
 8003434:	2380      	movs	r3, #128	@ 0x80
 8003436:	015b      	lsls	r3, r3, #5
 8003438:	4013      	ands	r3, r2
 800343a:	d131      	bne.n	80034a0 <HAL_ADC_ConfigChannel+0x19c>
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	681a      	ldr	r2, [r3, #0]
 8003440:	2380      	movs	r3, #128	@ 0x80
 8003442:	019b      	lsls	r3, r3, #6
 8003444:	4013      	ands	r3, r2
 8003446:	d129      	bne.n	800349c <HAL_ADC_ConfigChannel+0x198>
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	681a      	ldr	r2, [r3, #0]
 800344c:	2380      	movs	r3, #128	@ 0x80
 800344e:	01db      	lsls	r3, r3, #7
 8003450:	4013      	ands	r3, r2
 8003452:	d121      	bne.n	8003498 <HAL_ADC_ConfigChannel+0x194>
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	681a      	ldr	r2, [r3, #0]
 8003458:	2380      	movs	r3, #128	@ 0x80
 800345a:	021b      	lsls	r3, r3, #8
 800345c:	4013      	ands	r3, r2
 800345e:	d119      	bne.n	8003494 <HAL_ADC_ConfigChannel+0x190>
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	681a      	ldr	r2, [r3, #0]
 8003464:	2380      	movs	r3, #128	@ 0x80
 8003466:	025b      	lsls	r3, r3, #9
 8003468:	4013      	ands	r3, r2
 800346a:	d111      	bne.n	8003490 <HAL_ADC_ConfigChannel+0x18c>
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	681a      	ldr	r2, [r3, #0]
 8003470:	2380      	movs	r3, #128	@ 0x80
 8003472:	029b      	lsls	r3, r3, #10
 8003474:	4013      	ands	r3, r2
 8003476:	d109      	bne.n	800348c <HAL_ADC_ConfigChannel+0x188>
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	681a      	ldr	r2, [r3, #0]
 800347c:	2380      	movs	r3, #128	@ 0x80
 800347e:	02db      	lsls	r3, r3, #11
 8003480:	4013      	ands	r3, r2
 8003482:	d001      	beq.n	8003488 <HAL_ADC_ConfigChannel+0x184>
 8003484:	2312      	movs	r3, #18
 8003486:	e024      	b.n	80034d2 <HAL_ADC_ConfigChannel+0x1ce>
 8003488:	2300      	movs	r3, #0
 800348a:	e022      	b.n	80034d2 <HAL_ADC_ConfigChannel+0x1ce>
 800348c:	2311      	movs	r3, #17
 800348e:	e020      	b.n	80034d2 <HAL_ADC_ConfigChannel+0x1ce>
 8003490:	2310      	movs	r3, #16
 8003492:	e01e      	b.n	80034d2 <HAL_ADC_ConfigChannel+0x1ce>
 8003494:	230f      	movs	r3, #15
 8003496:	e01c      	b.n	80034d2 <HAL_ADC_ConfigChannel+0x1ce>
 8003498:	230e      	movs	r3, #14
 800349a:	e01a      	b.n	80034d2 <HAL_ADC_ConfigChannel+0x1ce>
 800349c:	230d      	movs	r3, #13
 800349e:	e018      	b.n	80034d2 <HAL_ADC_ConfigChannel+0x1ce>
 80034a0:	230c      	movs	r3, #12
 80034a2:	e016      	b.n	80034d2 <HAL_ADC_ConfigChannel+0x1ce>
 80034a4:	230b      	movs	r3, #11
 80034a6:	e014      	b.n	80034d2 <HAL_ADC_ConfigChannel+0x1ce>
 80034a8:	230a      	movs	r3, #10
 80034aa:	e012      	b.n	80034d2 <HAL_ADC_ConfigChannel+0x1ce>
 80034ac:	2309      	movs	r3, #9
 80034ae:	e010      	b.n	80034d2 <HAL_ADC_ConfigChannel+0x1ce>
 80034b0:	2308      	movs	r3, #8
 80034b2:	e00e      	b.n	80034d2 <HAL_ADC_ConfigChannel+0x1ce>
 80034b4:	2307      	movs	r3, #7
 80034b6:	e00c      	b.n	80034d2 <HAL_ADC_ConfigChannel+0x1ce>
 80034b8:	2306      	movs	r3, #6
 80034ba:	e00a      	b.n	80034d2 <HAL_ADC_ConfigChannel+0x1ce>
 80034bc:	2305      	movs	r3, #5
 80034be:	e008      	b.n	80034d2 <HAL_ADC_ConfigChannel+0x1ce>
 80034c0:	2304      	movs	r3, #4
 80034c2:	e006      	b.n	80034d2 <HAL_ADC_ConfigChannel+0x1ce>
 80034c4:	2303      	movs	r3, #3
 80034c6:	e004      	b.n	80034d2 <HAL_ADC_ConfigChannel+0x1ce>
 80034c8:	2302      	movs	r3, #2
 80034ca:	e002      	b.n	80034d2 <HAL_ADC_ConfigChannel+0x1ce>
 80034cc:	2301      	movs	r3, #1
 80034ce:	e000      	b.n	80034d2 <HAL_ADC_ConfigChannel+0x1ce>
 80034d0:	2300      	movs	r3, #0
 80034d2:	683a      	ldr	r2, [r7, #0]
 80034d4:	6852      	ldr	r2, [r2, #4]
 80034d6:	201f      	movs	r0, #31
 80034d8:	4002      	ands	r2, r0
 80034da:	4093      	lsls	r3, r2
 80034dc:	000a      	movs	r2, r1
 80034de:	431a      	orrs	r2, r3
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	089b      	lsrs	r3, r3, #2
 80034ea:	1c5a      	adds	r2, r3, #1
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	69db      	ldr	r3, [r3, #28]
 80034f0:	429a      	cmp	r2, r3
 80034f2:	d808      	bhi.n	8003506 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6818      	ldr	r0, [r3, #0]
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	6859      	ldr	r1, [r3, #4]
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	001a      	movs	r2, r3
 8003502:	f7ff fb71 	bl	8002be8 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6818      	ldr	r0, [r3, #0]
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	6819      	ldr	r1, [r3, #0]
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	689b      	ldr	r3, [r3, #8]
 8003512:	001a      	movs	r2, r3
 8003514:	f7ff fbb8 	bl	8002c88 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	2b00      	cmp	r3, #0
 800351e:	db00      	blt.n	8003522 <HAL_ADC_ConfigChannel+0x21e>
 8003520:	e0bc      	b.n	800369c <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003522:	4b50      	ldr	r3, [pc, #320]	@ (8003664 <HAL_ADC_ConfigChannel+0x360>)
 8003524:	0018      	movs	r0, r3
 8003526:	f7ff fb0d 	bl	8002b44 <LL_ADC_GetCommonPathInternalCh>
 800352a:	0003      	movs	r3, r0
 800352c:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a4d      	ldr	r2, [pc, #308]	@ (8003668 <HAL_ADC_ConfigChannel+0x364>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d122      	bne.n	800357e <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003538:	693a      	ldr	r2, [r7, #16]
 800353a:	2380      	movs	r3, #128	@ 0x80
 800353c:	041b      	lsls	r3, r3, #16
 800353e:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003540:	d11d      	bne.n	800357e <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003542:	693b      	ldr	r3, [r7, #16]
 8003544:	2280      	movs	r2, #128	@ 0x80
 8003546:	0412      	lsls	r2, r2, #16
 8003548:	4313      	orrs	r3, r2
 800354a:	4a46      	ldr	r2, [pc, #280]	@ (8003664 <HAL_ADC_ConfigChannel+0x360>)
 800354c:	0019      	movs	r1, r3
 800354e:	0010      	movs	r0, r2
 8003550:	f7ff fae4 	bl	8002b1c <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003554:	4b45      	ldr	r3, [pc, #276]	@ (800366c <HAL_ADC_ConfigChannel+0x368>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4945      	ldr	r1, [pc, #276]	@ (8003670 <HAL_ADC_ConfigChannel+0x36c>)
 800355a:	0018      	movs	r0, r3
 800355c:	f7fc fe2c 	bl	80001b8 <__udivsi3>
 8003560:	0003      	movs	r3, r0
 8003562:	1c5a      	adds	r2, r3, #1
 8003564:	0013      	movs	r3, r2
 8003566:	005b      	lsls	r3, r3, #1
 8003568:	189b      	adds	r3, r3, r2
 800356a:	009b      	lsls	r3, r3, #2
 800356c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800356e:	e002      	b.n	8003576 <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	3b01      	subs	r3, #1
 8003574:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d1f9      	bne.n	8003570 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800357c:	e08e      	b.n	800369c <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a3c      	ldr	r2, [pc, #240]	@ (8003674 <HAL_ADC_ConfigChannel+0x370>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d10e      	bne.n	80035a6 <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003588:	693a      	ldr	r2, [r7, #16]
 800358a:	2380      	movs	r3, #128	@ 0x80
 800358c:	045b      	lsls	r3, r3, #17
 800358e:	4013      	ands	r3, r2
 8003590:	d109      	bne.n	80035a6 <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003592:	693b      	ldr	r3, [r7, #16]
 8003594:	2280      	movs	r2, #128	@ 0x80
 8003596:	0452      	lsls	r2, r2, #17
 8003598:	4313      	orrs	r3, r2
 800359a:	4a32      	ldr	r2, [pc, #200]	@ (8003664 <HAL_ADC_ConfigChannel+0x360>)
 800359c:	0019      	movs	r1, r3
 800359e:	0010      	movs	r0, r2
 80035a0:	f7ff fabc 	bl	8002b1c <LL_ADC_SetCommonPathInternalCh>
 80035a4:	e07a      	b.n	800369c <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a33      	ldr	r2, [pc, #204]	@ (8003678 <HAL_ADC_ConfigChannel+0x374>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d000      	beq.n	80035b2 <HAL_ADC_ConfigChannel+0x2ae>
 80035b0:	e074      	b.n	800369c <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80035b2:	693a      	ldr	r2, [r7, #16]
 80035b4:	2380      	movs	r3, #128	@ 0x80
 80035b6:	03db      	lsls	r3, r3, #15
 80035b8:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80035ba:	d000      	beq.n	80035be <HAL_ADC_ConfigChannel+0x2ba>
 80035bc:	e06e      	b.n	800369c <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80035be:	693b      	ldr	r3, [r7, #16]
 80035c0:	2280      	movs	r2, #128	@ 0x80
 80035c2:	03d2      	lsls	r2, r2, #15
 80035c4:	4313      	orrs	r3, r2
 80035c6:	4a27      	ldr	r2, [pc, #156]	@ (8003664 <HAL_ADC_ConfigChannel+0x360>)
 80035c8:	0019      	movs	r1, r3
 80035ca:	0010      	movs	r0, r2
 80035cc:	f7ff faa6 	bl	8002b1c <LL_ADC_SetCommonPathInternalCh>
 80035d0:	e064      	b.n	800369c <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	691a      	ldr	r2, [r3, #16]
 80035d6:	2380      	movs	r3, #128	@ 0x80
 80035d8:	061b      	lsls	r3, r3, #24
 80035da:	429a      	cmp	r2, r3
 80035dc:	d004      	beq.n	80035e8 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80035e2:	4a1f      	ldr	r2, [pc, #124]	@ (8003660 <HAL_ADC_ConfigChannel+0x35c>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d107      	bne.n	80035f8 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681a      	ldr	r2, [r3, #0]
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	0019      	movs	r1, r3
 80035f2:	0010      	movs	r0, r2
 80035f4:	f7ff fb29 	bl	8002c4a <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	da4d      	bge.n	800369c <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003600:	4b18      	ldr	r3, [pc, #96]	@ (8003664 <HAL_ADC_ConfigChannel+0x360>)
 8003602:	0018      	movs	r0, r3
 8003604:	f7ff fa9e 	bl	8002b44 <LL_ADC_GetCommonPathInternalCh>
 8003608:	0003      	movs	r3, r0
 800360a:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a15      	ldr	r2, [pc, #84]	@ (8003668 <HAL_ADC_ConfigChannel+0x364>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d108      	bne.n	8003628 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003616:	693b      	ldr	r3, [r7, #16]
 8003618:	4a18      	ldr	r2, [pc, #96]	@ (800367c <HAL_ADC_ConfigChannel+0x378>)
 800361a:	4013      	ands	r3, r2
 800361c:	4a11      	ldr	r2, [pc, #68]	@ (8003664 <HAL_ADC_ConfigChannel+0x360>)
 800361e:	0019      	movs	r1, r3
 8003620:	0010      	movs	r0, r2
 8003622:	f7ff fa7b 	bl	8002b1c <LL_ADC_SetCommonPathInternalCh>
 8003626:	e039      	b.n	800369c <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a11      	ldr	r2, [pc, #68]	@ (8003674 <HAL_ADC_ConfigChannel+0x370>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d108      	bne.n	8003644 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003632:	693b      	ldr	r3, [r7, #16]
 8003634:	4a12      	ldr	r2, [pc, #72]	@ (8003680 <HAL_ADC_ConfigChannel+0x37c>)
 8003636:	4013      	ands	r3, r2
 8003638:	4a0a      	ldr	r2, [pc, #40]	@ (8003664 <HAL_ADC_ConfigChannel+0x360>)
 800363a:	0019      	movs	r1, r3
 800363c:	0010      	movs	r0, r2
 800363e:	f7ff fa6d 	bl	8002b1c <LL_ADC_SetCommonPathInternalCh>
 8003642:	e02b      	b.n	800369c <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a0b      	ldr	r2, [pc, #44]	@ (8003678 <HAL_ADC_ConfigChannel+0x374>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d126      	bne.n	800369c <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	4a0c      	ldr	r2, [pc, #48]	@ (8003684 <HAL_ADC_ConfigChannel+0x380>)
 8003652:	4013      	ands	r3, r2
 8003654:	4a03      	ldr	r2, [pc, #12]	@ (8003664 <HAL_ADC_ConfigChannel+0x360>)
 8003656:	0019      	movs	r1, r3
 8003658:	0010      	movs	r0, r2
 800365a:	f7ff fa5f 	bl	8002b1c <LL_ADC_SetCommonPathInternalCh>
 800365e:	e01d      	b.n	800369c <HAL_ADC_ConfigChannel+0x398>
 8003660:	80000004 	.word	0x80000004
 8003664:	40012708 	.word	0x40012708
 8003668:	b0001000 	.word	0xb0001000
 800366c:	200000f0 	.word	0x200000f0
 8003670:	00030d40 	.word	0x00030d40
 8003674:	b8004000 	.word	0xb8004000
 8003678:	b4002000 	.word	0xb4002000
 800367c:	ff7fffff 	.word	0xff7fffff
 8003680:	feffffff 	.word	0xfeffffff
 8003684:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800368c:	2220      	movs	r2, #32
 800368e:	431a      	orrs	r2, r3
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8003694:	2317      	movs	r3, #23
 8003696:	18fb      	adds	r3, r7, r3
 8003698:	2201      	movs	r2, #1
 800369a:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2254      	movs	r2, #84	@ 0x54
 80036a0:	2100      	movs	r1, #0
 80036a2:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 80036a4:	2317      	movs	r3, #23
 80036a6:	18fb      	adds	r3, r7, r3
 80036a8:	781b      	ldrb	r3, [r3, #0]
}
 80036aa:	0018      	movs	r0, r3
 80036ac:	46bd      	mov	sp, r7
 80036ae:	b006      	add	sp, #24
 80036b0:	bd80      	pop	{r7, pc}
 80036b2:	46c0      	nop			@ (mov r8, r8)

080036b4 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b082      	sub	sp, #8
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80036bc:	46c0      	nop			@ (mov r8, r8)
 80036be:	46bd      	mov	sp, r7
 80036c0:	b002      	add	sp, #8
 80036c2:	bd80      	pop	{r7, pc}

080036c4 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b082      	sub	sp, #8
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80036cc:	46c0      	nop			@ (mov r8, r8)
 80036ce:	46bd      	mov	sp, r7
 80036d0:	b002      	add	sp, #8
 80036d2:	bd80      	pop	{r7, pc}

080036d4 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b082      	sub	sp, #8
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80036dc:	46c0      	nop			@ (mov r8, r8)
 80036de:	46bd      	mov	sp, r7
 80036e0:	b002      	add	sp, #8
 80036e2:	bd80      	pop	{r7, pc}

080036e4 <HAL_ADCEx_ChannelConfigReadyCallback>:
  * @brief  ADC channel configuration ready callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_ChannelConfigReadyCallback(ADC_HandleTypeDef *hadc)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b082      	sub	sp, #8
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_ChannelConfigReadyCallback must be implemented in the user file.
  */
}
 80036ec:	46c0      	nop			@ (mov r8, r8)
 80036ee:	46bd      	mov	sp, r7
 80036f0:	b002      	add	sp, #8
 80036f2:	bd80      	pop	{r7, pc}

080036f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b082      	sub	sp, #8
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	0002      	movs	r2, r0
 80036fc:	1dfb      	adds	r3, r7, #7
 80036fe:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003700:	1dfb      	adds	r3, r7, #7
 8003702:	781b      	ldrb	r3, [r3, #0]
 8003704:	2b7f      	cmp	r3, #127	@ 0x7f
 8003706:	d809      	bhi.n	800371c <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003708:	1dfb      	adds	r3, r7, #7
 800370a:	781b      	ldrb	r3, [r3, #0]
 800370c:	001a      	movs	r2, r3
 800370e:	231f      	movs	r3, #31
 8003710:	401a      	ands	r2, r3
 8003712:	4b04      	ldr	r3, [pc, #16]	@ (8003724 <__NVIC_EnableIRQ+0x30>)
 8003714:	2101      	movs	r1, #1
 8003716:	4091      	lsls	r1, r2
 8003718:	000a      	movs	r2, r1
 800371a:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 800371c:	46c0      	nop			@ (mov r8, r8)
 800371e:	46bd      	mov	sp, r7
 8003720:	b002      	add	sp, #8
 8003722:	bd80      	pop	{r7, pc}
 8003724:	e000e100 	.word	0xe000e100

08003728 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003728:	b590      	push	{r4, r7, lr}
 800372a:	b083      	sub	sp, #12
 800372c:	af00      	add	r7, sp, #0
 800372e:	0002      	movs	r2, r0
 8003730:	6039      	str	r1, [r7, #0]
 8003732:	1dfb      	adds	r3, r7, #7
 8003734:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003736:	1dfb      	adds	r3, r7, #7
 8003738:	781b      	ldrb	r3, [r3, #0]
 800373a:	2b7f      	cmp	r3, #127	@ 0x7f
 800373c:	d828      	bhi.n	8003790 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800373e:	4a2f      	ldr	r2, [pc, #188]	@ (80037fc <__NVIC_SetPriority+0xd4>)
 8003740:	1dfb      	adds	r3, r7, #7
 8003742:	781b      	ldrb	r3, [r3, #0]
 8003744:	b25b      	sxtb	r3, r3
 8003746:	089b      	lsrs	r3, r3, #2
 8003748:	33c0      	adds	r3, #192	@ 0xc0
 800374a:	009b      	lsls	r3, r3, #2
 800374c:	589b      	ldr	r3, [r3, r2]
 800374e:	1dfa      	adds	r2, r7, #7
 8003750:	7812      	ldrb	r2, [r2, #0]
 8003752:	0011      	movs	r1, r2
 8003754:	2203      	movs	r2, #3
 8003756:	400a      	ands	r2, r1
 8003758:	00d2      	lsls	r2, r2, #3
 800375a:	21ff      	movs	r1, #255	@ 0xff
 800375c:	4091      	lsls	r1, r2
 800375e:	000a      	movs	r2, r1
 8003760:	43d2      	mvns	r2, r2
 8003762:	401a      	ands	r2, r3
 8003764:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	019b      	lsls	r3, r3, #6
 800376a:	22ff      	movs	r2, #255	@ 0xff
 800376c:	401a      	ands	r2, r3
 800376e:	1dfb      	adds	r3, r7, #7
 8003770:	781b      	ldrb	r3, [r3, #0]
 8003772:	0018      	movs	r0, r3
 8003774:	2303      	movs	r3, #3
 8003776:	4003      	ands	r3, r0
 8003778:	00db      	lsls	r3, r3, #3
 800377a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800377c:	481f      	ldr	r0, [pc, #124]	@ (80037fc <__NVIC_SetPriority+0xd4>)
 800377e:	1dfb      	adds	r3, r7, #7
 8003780:	781b      	ldrb	r3, [r3, #0]
 8003782:	b25b      	sxtb	r3, r3
 8003784:	089b      	lsrs	r3, r3, #2
 8003786:	430a      	orrs	r2, r1
 8003788:	33c0      	adds	r3, #192	@ 0xc0
 800378a:	009b      	lsls	r3, r3, #2
 800378c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800378e:	e031      	b.n	80037f4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003790:	4a1b      	ldr	r2, [pc, #108]	@ (8003800 <__NVIC_SetPriority+0xd8>)
 8003792:	1dfb      	adds	r3, r7, #7
 8003794:	781b      	ldrb	r3, [r3, #0]
 8003796:	0019      	movs	r1, r3
 8003798:	230f      	movs	r3, #15
 800379a:	400b      	ands	r3, r1
 800379c:	3b08      	subs	r3, #8
 800379e:	089b      	lsrs	r3, r3, #2
 80037a0:	3306      	adds	r3, #6
 80037a2:	009b      	lsls	r3, r3, #2
 80037a4:	18d3      	adds	r3, r2, r3
 80037a6:	3304      	adds	r3, #4
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	1dfa      	adds	r2, r7, #7
 80037ac:	7812      	ldrb	r2, [r2, #0]
 80037ae:	0011      	movs	r1, r2
 80037b0:	2203      	movs	r2, #3
 80037b2:	400a      	ands	r2, r1
 80037b4:	00d2      	lsls	r2, r2, #3
 80037b6:	21ff      	movs	r1, #255	@ 0xff
 80037b8:	4091      	lsls	r1, r2
 80037ba:	000a      	movs	r2, r1
 80037bc:	43d2      	mvns	r2, r2
 80037be:	401a      	ands	r2, r3
 80037c0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	019b      	lsls	r3, r3, #6
 80037c6:	22ff      	movs	r2, #255	@ 0xff
 80037c8:	401a      	ands	r2, r3
 80037ca:	1dfb      	adds	r3, r7, #7
 80037cc:	781b      	ldrb	r3, [r3, #0]
 80037ce:	0018      	movs	r0, r3
 80037d0:	2303      	movs	r3, #3
 80037d2:	4003      	ands	r3, r0
 80037d4:	00db      	lsls	r3, r3, #3
 80037d6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80037d8:	4809      	ldr	r0, [pc, #36]	@ (8003800 <__NVIC_SetPriority+0xd8>)
 80037da:	1dfb      	adds	r3, r7, #7
 80037dc:	781b      	ldrb	r3, [r3, #0]
 80037de:	001c      	movs	r4, r3
 80037e0:	230f      	movs	r3, #15
 80037e2:	4023      	ands	r3, r4
 80037e4:	3b08      	subs	r3, #8
 80037e6:	089b      	lsrs	r3, r3, #2
 80037e8:	430a      	orrs	r2, r1
 80037ea:	3306      	adds	r3, #6
 80037ec:	009b      	lsls	r3, r3, #2
 80037ee:	18c3      	adds	r3, r0, r3
 80037f0:	3304      	adds	r3, #4
 80037f2:	601a      	str	r2, [r3, #0]
}
 80037f4:	46c0      	nop			@ (mov r8, r8)
 80037f6:	46bd      	mov	sp, r7
 80037f8:	b003      	add	sp, #12
 80037fa:	bd90      	pop	{r4, r7, pc}
 80037fc:	e000e100 	.word	0xe000e100
 8003800:	e000ed00 	.word	0xe000ed00

08003804 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b082      	sub	sp, #8
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	1e5a      	subs	r2, r3, #1
 8003810:	2380      	movs	r3, #128	@ 0x80
 8003812:	045b      	lsls	r3, r3, #17
 8003814:	429a      	cmp	r2, r3
 8003816:	d301      	bcc.n	800381c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003818:	2301      	movs	r3, #1
 800381a:	e010      	b.n	800383e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800381c:	4b0a      	ldr	r3, [pc, #40]	@ (8003848 <SysTick_Config+0x44>)
 800381e:	687a      	ldr	r2, [r7, #4]
 8003820:	3a01      	subs	r2, #1
 8003822:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003824:	2301      	movs	r3, #1
 8003826:	425b      	negs	r3, r3
 8003828:	2103      	movs	r1, #3
 800382a:	0018      	movs	r0, r3
 800382c:	f7ff ff7c 	bl	8003728 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003830:	4b05      	ldr	r3, [pc, #20]	@ (8003848 <SysTick_Config+0x44>)
 8003832:	2200      	movs	r2, #0
 8003834:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003836:	4b04      	ldr	r3, [pc, #16]	@ (8003848 <SysTick_Config+0x44>)
 8003838:	2207      	movs	r2, #7
 800383a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800383c:	2300      	movs	r3, #0
}
 800383e:	0018      	movs	r0, r3
 8003840:	46bd      	mov	sp, r7
 8003842:	b002      	add	sp, #8
 8003844:	bd80      	pop	{r7, pc}
 8003846:	46c0      	nop			@ (mov r8, r8)
 8003848:	e000e010 	.word	0xe000e010

0800384c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b084      	sub	sp, #16
 8003850:	af00      	add	r7, sp, #0
 8003852:	60b9      	str	r1, [r7, #8]
 8003854:	607a      	str	r2, [r7, #4]
 8003856:	210f      	movs	r1, #15
 8003858:	187b      	adds	r3, r7, r1
 800385a:	1c02      	adds	r2, r0, #0
 800385c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800385e:	68ba      	ldr	r2, [r7, #8]
 8003860:	187b      	adds	r3, r7, r1
 8003862:	781b      	ldrb	r3, [r3, #0]
 8003864:	b25b      	sxtb	r3, r3
 8003866:	0011      	movs	r1, r2
 8003868:	0018      	movs	r0, r3
 800386a:	f7ff ff5d 	bl	8003728 <__NVIC_SetPriority>
}
 800386e:	46c0      	nop			@ (mov r8, r8)
 8003870:	46bd      	mov	sp, r7
 8003872:	b004      	add	sp, #16
 8003874:	bd80      	pop	{r7, pc}

08003876 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003876:	b580      	push	{r7, lr}
 8003878:	b082      	sub	sp, #8
 800387a:	af00      	add	r7, sp, #0
 800387c:	0002      	movs	r2, r0
 800387e:	1dfb      	adds	r3, r7, #7
 8003880:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003882:	1dfb      	adds	r3, r7, #7
 8003884:	781b      	ldrb	r3, [r3, #0]
 8003886:	b25b      	sxtb	r3, r3
 8003888:	0018      	movs	r0, r3
 800388a:	f7ff ff33 	bl	80036f4 <__NVIC_EnableIRQ>
}
 800388e:	46c0      	nop			@ (mov r8, r8)
 8003890:	46bd      	mov	sp, r7
 8003892:	b002      	add	sp, #8
 8003894:	bd80      	pop	{r7, pc}

08003896 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003896:	b580      	push	{r7, lr}
 8003898:	b082      	sub	sp, #8
 800389a:	af00      	add	r7, sp, #0
 800389c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	0018      	movs	r0, r3
 80038a2:	f7ff ffaf 	bl	8003804 <SysTick_Config>
 80038a6:	0003      	movs	r3, r0
}
 80038a8:	0018      	movs	r0, r3
 80038aa:	46bd      	mov	sp, r7
 80038ac:	b002      	add	sp, #8
 80038ae:	bd80      	pop	{r7, pc}

080038b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b086      	sub	sp, #24
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
 80038b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80038ba:	2300      	movs	r3, #0
 80038bc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80038be:	e147      	b.n	8003b50 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	2101      	movs	r1, #1
 80038c6:	697a      	ldr	r2, [r7, #20]
 80038c8:	4091      	lsls	r1, r2
 80038ca:	000a      	movs	r2, r1
 80038cc:	4013      	ands	r3, r2
 80038ce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d100      	bne.n	80038d8 <HAL_GPIO_Init+0x28>
 80038d6:	e138      	b.n	8003b4a <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	2203      	movs	r2, #3
 80038de:	4013      	ands	r3, r2
 80038e0:	2b01      	cmp	r3, #1
 80038e2:	d005      	beq.n	80038f0 <HAL_GPIO_Init+0x40>
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	2203      	movs	r2, #3
 80038ea:	4013      	ands	r3, r2
 80038ec:	2b02      	cmp	r3, #2
 80038ee:	d130      	bne.n	8003952 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	689b      	ldr	r3, [r3, #8]
 80038f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80038f6:	697b      	ldr	r3, [r7, #20]
 80038f8:	005b      	lsls	r3, r3, #1
 80038fa:	2203      	movs	r2, #3
 80038fc:	409a      	lsls	r2, r3
 80038fe:	0013      	movs	r3, r2
 8003900:	43da      	mvns	r2, r3
 8003902:	693b      	ldr	r3, [r7, #16]
 8003904:	4013      	ands	r3, r2
 8003906:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	68da      	ldr	r2, [r3, #12]
 800390c:	697b      	ldr	r3, [r7, #20]
 800390e:	005b      	lsls	r3, r3, #1
 8003910:	409a      	lsls	r2, r3
 8003912:	0013      	movs	r3, r2
 8003914:	693a      	ldr	r2, [r7, #16]
 8003916:	4313      	orrs	r3, r2
 8003918:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	693a      	ldr	r2, [r7, #16]
 800391e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003926:	2201      	movs	r2, #1
 8003928:	697b      	ldr	r3, [r7, #20]
 800392a:	409a      	lsls	r2, r3
 800392c:	0013      	movs	r3, r2
 800392e:	43da      	mvns	r2, r3
 8003930:	693b      	ldr	r3, [r7, #16]
 8003932:	4013      	ands	r3, r2
 8003934:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	091b      	lsrs	r3, r3, #4
 800393c:	2201      	movs	r2, #1
 800393e:	401a      	ands	r2, r3
 8003940:	697b      	ldr	r3, [r7, #20]
 8003942:	409a      	lsls	r2, r3
 8003944:	0013      	movs	r3, r2
 8003946:	693a      	ldr	r2, [r7, #16]
 8003948:	4313      	orrs	r3, r2
 800394a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	693a      	ldr	r2, [r7, #16]
 8003950:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	2203      	movs	r2, #3
 8003958:	4013      	ands	r3, r2
 800395a:	2b03      	cmp	r3, #3
 800395c:	d017      	beq.n	800398e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	68db      	ldr	r3, [r3, #12]
 8003962:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003964:	697b      	ldr	r3, [r7, #20]
 8003966:	005b      	lsls	r3, r3, #1
 8003968:	2203      	movs	r2, #3
 800396a:	409a      	lsls	r2, r3
 800396c:	0013      	movs	r3, r2
 800396e:	43da      	mvns	r2, r3
 8003970:	693b      	ldr	r3, [r7, #16]
 8003972:	4013      	ands	r3, r2
 8003974:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	689a      	ldr	r2, [r3, #8]
 800397a:	697b      	ldr	r3, [r7, #20]
 800397c:	005b      	lsls	r3, r3, #1
 800397e:	409a      	lsls	r2, r3
 8003980:	0013      	movs	r3, r2
 8003982:	693a      	ldr	r2, [r7, #16]
 8003984:	4313      	orrs	r3, r2
 8003986:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	693a      	ldr	r2, [r7, #16]
 800398c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	685b      	ldr	r3, [r3, #4]
 8003992:	2203      	movs	r2, #3
 8003994:	4013      	ands	r3, r2
 8003996:	2b02      	cmp	r3, #2
 8003998:	d123      	bne.n	80039e2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800399a:	697b      	ldr	r3, [r7, #20]
 800399c:	08da      	lsrs	r2, r3, #3
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	3208      	adds	r2, #8
 80039a2:	0092      	lsls	r2, r2, #2
 80039a4:	58d3      	ldr	r3, [r2, r3]
 80039a6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80039a8:	697b      	ldr	r3, [r7, #20]
 80039aa:	2207      	movs	r2, #7
 80039ac:	4013      	ands	r3, r2
 80039ae:	009b      	lsls	r3, r3, #2
 80039b0:	220f      	movs	r2, #15
 80039b2:	409a      	lsls	r2, r3
 80039b4:	0013      	movs	r3, r2
 80039b6:	43da      	mvns	r2, r3
 80039b8:	693b      	ldr	r3, [r7, #16]
 80039ba:	4013      	ands	r3, r2
 80039bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	691a      	ldr	r2, [r3, #16]
 80039c2:	697b      	ldr	r3, [r7, #20]
 80039c4:	2107      	movs	r1, #7
 80039c6:	400b      	ands	r3, r1
 80039c8:	009b      	lsls	r3, r3, #2
 80039ca:	409a      	lsls	r2, r3
 80039cc:	0013      	movs	r3, r2
 80039ce:	693a      	ldr	r2, [r7, #16]
 80039d0:	4313      	orrs	r3, r2
 80039d2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80039d4:	697b      	ldr	r3, [r7, #20]
 80039d6:	08da      	lsrs	r2, r3, #3
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	3208      	adds	r2, #8
 80039dc:	0092      	lsls	r2, r2, #2
 80039de:	6939      	ldr	r1, [r7, #16]
 80039e0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80039e8:	697b      	ldr	r3, [r7, #20]
 80039ea:	005b      	lsls	r3, r3, #1
 80039ec:	2203      	movs	r2, #3
 80039ee:	409a      	lsls	r2, r3
 80039f0:	0013      	movs	r3, r2
 80039f2:	43da      	mvns	r2, r3
 80039f4:	693b      	ldr	r3, [r7, #16]
 80039f6:	4013      	ands	r3, r2
 80039f8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	2203      	movs	r2, #3
 8003a00:	401a      	ands	r2, r3
 8003a02:	697b      	ldr	r3, [r7, #20]
 8003a04:	005b      	lsls	r3, r3, #1
 8003a06:	409a      	lsls	r2, r3
 8003a08:	0013      	movs	r3, r2
 8003a0a:	693a      	ldr	r2, [r7, #16]
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	693a      	ldr	r2, [r7, #16]
 8003a14:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	685a      	ldr	r2, [r3, #4]
 8003a1a:	23c0      	movs	r3, #192	@ 0xc0
 8003a1c:	029b      	lsls	r3, r3, #10
 8003a1e:	4013      	ands	r3, r2
 8003a20:	d100      	bne.n	8003a24 <HAL_GPIO_Init+0x174>
 8003a22:	e092      	b.n	8003b4a <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8003a24:	4a50      	ldr	r2, [pc, #320]	@ (8003b68 <HAL_GPIO_Init+0x2b8>)
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	089b      	lsrs	r3, r3, #2
 8003a2a:	3318      	adds	r3, #24
 8003a2c:	009b      	lsls	r3, r3, #2
 8003a2e:	589b      	ldr	r3, [r3, r2]
 8003a30:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8003a32:	697b      	ldr	r3, [r7, #20]
 8003a34:	2203      	movs	r2, #3
 8003a36:	4013      	ands	r3, r2
 8003a38:	00db      	lsls	r3, r3, #3
 8003a3a:	220f      	movs	r2, #15
 8003a3c:	409a      	lsls	r2, r3
 8003a3e:	0013      	movs	r3, r2
 8003a40:	43da      	mvns	r2, r3
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	4013      	ands	r3, r2
 8003a46:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8003a48:	687a      	ldr	r2, [r7, #4]
 8003a4a:	23a0      	movs	r3, #160	@ 0xa0
 8003a4c:	05db      	lsls	r3, r3, #23
 8003a4e:	429a      	cmp	r2, r3
 8003a50:	d013      	beq.n	8003a7a <HAL_GPIO_Init+0x1ca>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	4a45      	ldr	r2, [pc, #276]	@ (8003b6c <HAL_GPIO_Init+0x2bc>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d00d      	beq.n	8003a76 <HAL_GPIO_Init+0x1c6>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	4a44      	ldr	r2, [pc, #272]	@ (8003b70 <HAL_GPIO_Init+0x2c0>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d007      	beq.n	8003a72 <HAL_GPIO_Init+0x1c2>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	4a43      	ldr	r2, [pc, #268]	@ (8003b74 <HAL_GPIO_Init+0x2c4>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d101      	bne.n	8003a6e <HAL_GPIO_Init+0x1be>
 8003a6a:	2303      	movs	r3, #3
 8003a6c:	e006      	b.n	8003a7c <HAL_GPIO_Init+0x1cc>
 8003a6e:	2305      	movs	r3, #5
 8003a70:	e004      	b.n	8003a7c <HAL_GPIO_Init+0x1cc>
 8003a72:	2302      	movs	r3, #2
 8003a74:	e002      	b.n	8003a7c <HAL_GPIO_Init+0x1cc>
 8003a76:	2301      	movs	r3, #1
 8003a78:	e000      	b.n	8003a7c <HAL_GPIO_Init+0x1cc>
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	697a      	ldr	r2, [r7, #20]
 8003a7e:	2103      	movs	r1, #3
 8003a80:	400a      	ands	r2, r1
 8003a82:	00d2      	lsls	r2, r2, #3
 8003a84:	4093      	lsls	r3, r2
 8003a86:	693a      	ldr	r2, [r7, #16]
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8003a8c:	4936      	ldr	r1, [pc, #216]	@ (8003b68 <HAL_GPIO_Init+0x2b8>)
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	089b      	lsrs	r3, r3, #2
 8003a92:	3318      	adds	r3, #24
 8003a94:	009b      	lsls	r3, r3, #2
 8003a96:	693a      	ldr	r2, [r7, #16]
 8003a98:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003a9a:	4b33      	ldr	r3, [pc, #204]	@ (8003b68 <HAL_GPIO_Init+0x2b8>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	43da      	mvns	r2, r3
 8003aa4:	693b      	ldr	r3, [r7, #16]
 8003aa6:	4013      	ands	r3, r2
 8003aa8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	685a      	ldr	r2, [r3, #4]
 8003aae:	2380      	movs	r3, #128	@ 0x80
 8003ab0:	035b      	lsls	r3, r3, #13
 8003ab2:	4013      	ands	r3, r2
 8003ab4:	d003      	beq.n	8003abe <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8003ab6:	693a      	ldr	r2, [r7, #16]
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	4313      	orrs	r3, r2
 8003abc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003abe:	4b2a      	ldr	r3, [pc, #168]	@ (8003b68 <HAL_GPIO_Init+0x2b8>)
 8003ac0:	693a      	ldr	r2, [r7, #16]
 8003ac2:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8003ac4:	4b28      	ldr	r3, [pc, #160]	@ (8003b68 <HAL_GPIO_Init+0x2b8>)
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	43da      	mvns	r2, r3
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	4013      	ands	r3, r2
 8003ad2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	685a      	ldr	r2, [r3, #4]
 8003ad8:	2380      	movs	r3, #128	@ 0x80
 8003ada:	039b      	lsls	r3, r3, #14
 8003adc:	4013      	ands	r3, r2
 8003ade:	d003      	beq.n	8003ae8 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8003ae0:	693a      	ldr	r2, [r7, #16]
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003ae8:	4b1f      	ldr	r3, [pc, #124]	@ (8003b68 <HAL_GPIO_Init+0x2b8>)
 8003aea:	693a      	ldr	r2, [r7, #16]
 8003aec:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003aee:	4a1e      	ldr	r2, [pc, #120]	@ (8003b68 <HAL_GPIO_Init+0x2b8>)
 8003af0:	2384      	movs	r3, #132	@ 0x84
 8003af2:	58d3      	ldr	r3, [r2, r3]
 8003af4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	43da      	mvns	r2, r3
 8003afa:	693b      	ldr	r3, [r7, #16]
 8003afc:	4013      	ands	r3, r2
 8003afe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	685a      	ldr	r2, [r3, #4]
 8003b04:	2380      	movs	r3, #128	@ 0x80
 8003b06:	029b      	lsls	r3, r3, #10
 8003b08:	4013      	ands	r3, r2
 8003b0a:	d003      	beq.n	8003b14 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8003b0c:	693a      	ldr	r2, [r7, #16]
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	4313      	orrs	r3, r2
 8003b12:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003b14:	4914      	ldr	r1, [pc, #80]	@ (8003b68 <HAL_GPIO_Init+0x2b8>)
 8003b16:	2284      	movs	r2, #132	@ 0x84
 8003b18:	693b      	ldr	r3, [r7, #16]
 8003b1a:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8003b1c:	4a12      	ldr	r2, [pc, #72]	@ (8003b68 <HAL_GPIO_Init+0x2b8>)
 8003b1e:	2380      	movs	r3, #128	@ 0x80
 8003b20:	58d3      	ldr	r3, [r2, r3]
 8003b22:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	43da      	mvns	r2, r3
 8003b28:	693b      	ldr	r3, [r7, #16]
 8003b2a:	4013      	ands	r3, r2
 8003b2c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	685a      	ldr	r2, [r3, #4]
 8003b32:	2380      	movs	r3, #128	@ 0x80
 8003b34:	025b      	lsls	r3, r3, #9
 8003b36:	4013      	ands	r3, r2
 8003b38:	d003      	beq.n	8003b42 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8003b3a:	693a      	ldr	r2, [r7, #16]
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003b42:	4909      	ldr	r1, [pc, #36]	@ (8003b68 <HAL_GPIO_Init+0x2b8>)
 8003b44:	2280      	movs	r2, #128	@ 0x80
 8003b46:	693b      	ldr	r3, [r7, #16]
 8003b48:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8003b4a:	697b      	ldr	r3, [r7, #20]
 8003b4c:	3301      	adds	r3, #1
 8003b4e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	681a      	ldr	r2, [r3, #0]
 8003b54:	697b      	ldr	r3, [r7, #20]
 8003b56:	40da      	lsrs	r2, r3
 8003b58:	1e13      	subs	r3, r2, #0
 8003b5a:	d000      	beq.n	8003b5e <HAL_GPIO_Init+0x2ae>
 8003b5c:	e6b0      	b.n	80038c0 <HAL_GPIO_Init+0x10>
  }
}
 8003b5e:	46c0      	nop			@ (mov r8, r8)
 8003b60:	46c0      	nop			@ (mov r8, r8)
 8003b62:	46bd      	mov	sp, r7
 8003b64:	b006      	add	sp, #24
 8003b66:	bd80      	pop	{r7, pc}
 8003b68:	40021800 	.word	0x40021800
 8003b6c:	50000400 	.word	0x50000400
 8003b70:	50000800 	.word	0x50000800
 8003b74:	50000c00 	.word	0x50000c00

08003b78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b082      	sub	sp, #8
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
 8003b80:	0008      	movs	r0, r1
 8003b82:	0011      	movs	r1, r2
 8003b84:	1cbb      	adds	r3, r7, #2
 8003b86:	1c02      	adds	r2, r0, #0
 8003b88:	801a      	strh	r2, [r3, #0]
 8003b8a:	1c7b      	adds	r3, r7, #1
 8003b8c:	1c0a      	adds	r2, r1, #0
 8003b8e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003b90:	1c7b      	adds	r3, r7, #1
 8003b92:	781b      	ldrb	r3, [r3, #0]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d004      	beq.n	8003ba2 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003b98:	1cbb      	adds	r3, r7, #2
 8003b9a:	881a      	ldrh	r2, [r3, #0]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003ba0:	e003      	b.n	8003baa <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003ba2:	1cbb      	adds	r3, r7, #2
 8003ba4:	881a      	ldrh	r2, [r3, #0]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003baa:	46c0      	nop			@ (mov r8, r8)
 8003bac:	46bd      	mov	sp, r7
 8003bae:	b002      	add	sp, #8
 8003bb0:	bd80      	pop	{r7, pc}
	...

08003bb4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b082      	sub	sp, #8
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d101      	bne.n	8003bc6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	e08f      	b.n	8003ce6 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2241      	movs	r2, #65	@ 0x41
 8003bca:	5c9b      	ldrb	r3, [r3, r2]
 8003bcc:	b2db      	uxtb	r3, r3
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d107      	bne.n	8003be2 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2240      	movs	r2, #64	@ 0x40
 8003bd6:	2100      	movs	r1, #0
 8003bd8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	0018      	movs	r0, r3
 8003bde:	f7fe f87f 	bl	8001ce0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2241      	movs	r2, #65	@ 0x41
 8003be6:	2124      	movs	r1, #36	@ 0x24
 8003be8:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	681a      	ldr	r2, [r3, #0]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	2101      	movs	r1, #1
 8003bf6:	438a      	bics	r2, r1
 8003bf8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	685a      	ldr	r2, [r3, #4]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	493b      	ldr	r1, [pc, #236]	@ (8003cf0 <HAL_I2C_Init+0x13c>)
 8003c04:	400a      	ands	r2, r1
 8003c06:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	689a      	ldr	r2, [r3, #8]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4938      	ldr	r1, [pc, #224]	@ (8003cf4 <HAL_I2C_Init+0x140>)
 8003c14:	400a      	ands	r2, r1
 8003c16:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	68db      	ldr	r3, [r3, #12]
 8003c1c:	2b01      	cmp	r3, #1
 8003c1e:	d108      	bne.n	8003c32 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	689a      	ldr	r2, [r3, #8]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	2180      	movs	r1, #128	@ 0x80
 8003c2a:	0209      	lsls	r1, r1, #8
 8003c2c:	430a      	orrs	r2, r1
 8003c2e:	609a      	str	r2, [r3, #8]
 8003c30:	e007      	b.n	8003c42 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	689a      	ldr	r2, [r3, #8]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	2184      	movs	r1, #132	@ 0x84
 8003c3c:	0209      	lsls	r1, r1, #8
 8003c3e:	430a      	orrs	r2, r1
 8003c40:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	68db      	ldr	r3, [r3, #12]
 8003c46:	2b02      	cmp	r3, #2
 8003c48:	d109      	bne.n	8003c5e <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	685a      	ldr	r2, [r3, #4]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	2180      	movs	r1, #128	@ 0x80
 8003c56:	0109      	lsls	r1, r1, #4
 8003c58:	430a      	orrs	r2, r1
 8003c5a:	605a      	str	r2, [r3, #4]
 8003c5c:	e007      	b.n	8003c6e <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	685a      	ldr	r2, [r3, #4]
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4923      	ldr	r1, [pc, #140]	@ (8003cf8 <HAL_I2C_Init+0x144>)
 8003c6a:	400a      	ands	r2, r1
 8003c6c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	685a      	ldr	r2, [r3, #4]
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4920      	ldr	r1, [pc, #128]	@ (8003cfc <HAL_I2C_Init+0x148>)
 8003c7a:	430a      	orrs	r2, r1
 8003c7c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	68da      	ldr	r2, [r3, #12]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	491a      	ldr	r1, [pc, #104]	@ (8003cf4 <HAL_I2C_Init+0x140>)
 8003c8a:	400a      	ands	r2, r1
 8003c8c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	691a      	ldr	r2, [r3, #16]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	695b      	ldr	r3, [r3, #20]
 8003c96:	431a      	orrs	r2, r3
 8003c98:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	699b      	ldr	r3, [r3, #24]
 8003c9e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	430a      	orrs	r2, r1
 8003ca6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	69d9      	ldr	r1, [r3, #28]
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6a1a      	ldr	r2, [r3, #32]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	430a      	orrs	r2, r1
 8003cb6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	681a      	ldr	r2, [r3, #0]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	2101      	movs	r1, #1
 8003cc4:	430a      	orrs	r2, r1
 8003cc6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2241      	movs	r2, #65	@ 0x41
 8003cd2:	2120      	movs	r1, #32
 8003cd4:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2242      	movs	r2, #66	@ 0x42
 8003ce0:	2100      	movs	r1, #0
 8003ce2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003ce4:	2300      	movs	r3, #0
}
 8003ce6:	0018      	movs	r0, r3
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	b002      	add	sp, #8
 8003cec:	bd80      	pop	{r7, pc}
 8003cee:	46c0      	nop			@ (mov r8, r8)
 8003cf0:	f0ffffff 	.word	0xf0ffffff
 8003cf4:	ffff7fff 	.word	0xffff7fff
 8003cf8:	fffff7ff 	.word	0xfffff7ff
 8003cfc:	02008000 	.word	0x02008000

08003d00 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b082      	sub	sp, #8
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
 8003d08:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2241      	movs	r2, #65	@ 0x41
 8003d0e:	5c9b      	ldrb	r3, [r3, r2]
 8003d10:	b2db      	uxtb	r3, r3
 8003d12:	2b20      	cmp	r3, #32
 8003d14:	d138      	bne.n	8003d88 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2240      	movs	r2, #64	@ 0x40
 8003d1a:	5c9b      	ldrb	r3, [r3, r2]
 8003d1c:	2b01      	cmp	r3, #1
 8003d1e:	d101      	bne.n	8003d24 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003d20:	2302      	movs	r3, #2
 8003d22:	e032      	b.n	8003d8a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2240      	movs	r2, #64	@ 0x40
 8003d28:	2101      	movs	r1, #1
 8003d2a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2241      	movs	r2, #65	@ 0x41
 8003d30:	2124      	movs	r1, #36	@ 0x24
 8003d32:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	681a      	ldr	r2, [r3, #0]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	2101      	movs	r1, #1
 8003d40:	438a      	bics	r2, r1
 8003d42:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	681a      	ldr	r2, [r3, #0]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4911      	ldr	r1, [pc, #68]	@ (8003d94 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8003d50:	400a      	ands	r2, r1
 8003d52:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	6819      	ldr	r1, [r3, #0]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	683a      	ldr	r2, [r7, #0]
 8003d60:	430a      	orrs	r2, r1
 8003d62:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	681a      	ldr	r2, [r3, #0]
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	2101      	movs	r1, #1
 8003d70:	430a      	orrs	r2, r1
 8003d72:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2241      	movs	r2, #65	@ 0x41
 8003d78:	2120      	movs	r1, #32
 8003d7a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2240      	movs	r2, #64	@ 0x40
 8003d80:	2100      	movs	r1, #0
 8003d82:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003d84:	2300      	movs	r3, #0
 8003d86:	e000      	b.n	8003d8a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003d88:	2302      	movs	r3, #2
  }
}
 8003d8a:	0018      	movs	r0, r3
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	b002      	add	sp, #8
 8003d90:	bd80      	pop	{r7, pc}
 8003d92:	46c0      	nop			@ (mov r8, r8)
 8003d94:	ffffefff 	.word	0xffffefff

08003d98 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b084      	sub	sp, #16
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
 8003da0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2241      	movs	r2, #65	@ 0x41
 8003da6:	5c9b      	ldrb	r3, [r3, r2]
 8003da8:	b2db      	uxtb	r3, r3
 8003daa:	2b20      	cmp	r3, #32
 8003dac:	d139      	bne.n	8003e22 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2240      	movs	r2, #64	@ 0x40
 8003db2:	5c9b      	ldrb	r3, [r3, r2]
 8003db4:	2b01      	cmp	r3, #1
 8003db6:	d101      	bne.n	8003dbc <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003db8:	2302      	movs	r3, #2
 8003dba:	e033      	b.n	8003e24 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2240      	movs	r2, #64	@ 0x40
 8003dc0:	2101      	movs	r1, #1
 8003dc2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2241      	movs	r2, #65	@ 0x41
 8003dc8:	2124      	movs	r1, #36	@ 0x24
 8003dca:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	681a      	ldr	r2, [r3, #0]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	2101      	movs	r1, #1
 8003dd8:	438a      	bics	r2, r1
 8003dda:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	4a11      	ldr	r2, [pc, #68]	@ (8003e2c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8003de8:	4013      	ands	r3, r2
 8003dea:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	021b      	lsls	r3, r3, #8
 8003df0:	68fa      	ldr	r2, [r7, #12]
 8003df2:	4313      	orrs	r3, r2
 8003df4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	68fa      	ldr	r2, [r7, #12]
 8003dfc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	681a      	ldr	r2, [r3, #0]
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	2101      	movs	r1, #1
 8003e0a:	430a      	orrs	r2, r1
 8003e0c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2241      	movs	r2, #65	@ 0x41
 8003e12:	2120      	movs	r1, #32
 8003e14:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2240      	movs	r2, #64	@ 0x40
 8003e1a:	2100      	movs	r1, #0
 8003e1c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003e1e:	2300      	movs	r3, #0
 8003e20:	e000      	b.n	8003e24 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003e22:	2302      	movs	r3, #2
  }
}
 8003e24:	0018      	movs	r0, r3
 8003e26:	46bd      	mov	sp, r7
 8003e28:	b004      	add	sp, #16
 8003e2a:	bd80      	pop	{r7, pc}
 8003e2c:	fffff0ff 	.word	0xfffff0ff

08003e30 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b084      	sub	sp, #16
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d101      	bne.n	8003e42 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	e03d      	b.n	8003ebe <HAL_IWDG_Init+0x8e>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4a20      	ldr	r2, [pc, #128]	@ (8003ec8 <HAL_IWDG_Init+0x98>)
 8003e48:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4a1f      	ldr	r2, [pc, #124]	@ (8003ecc <HAL_IWDG_Init+0x9c>)
 8003e50:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	687a      	ldr	r2, [r7, #4]
 8003e58:	6852      	ldr	r2, [r2, #4]
 8003e5a:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	687a      	ldr	r2, [r7, #4]
 8003e62:	6892      	ldr	r2, [r2, #8]
 8003e64:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8003e66:	f7fe fe39 	bl	8002adc <HAL_GetTick>
 8003e6a:	0003      	movs	r3, r0
 8003e6c:	60fb      	str	r3, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8003e6e:	e00e      	b.n	8003e8e <HAL_IWDG_Init+0x5e>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8003e70:	f7fe fe34 	bl	8002adc <HAL_GetTick>
 8003e74:	0002      	movs	r2, r0
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	1ad3      	subs	r3, r2, r3
 8003e7a:	2b31      	cmp	r3, #49	@ 0x31
 8003e7c:	d907      	bls.n	8003e8e <HAL_IWDG_Init+0x5e>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	68db      	ldr	r3, [r3, #12]
 8003e84:	2207      	movs	r2, #7
 8003e86:	4013      	ands	r3, r2
 8003e88:	d001      	beq.n	8003e8e <HAL_IWDG_Init+0x5e>
      {
        return HAL_TIMEOUT;
 8003e8a:	2303      	movs	r3, #3
 8003e8c:	e017      	b.n	8003ebe <HAL_IWDG_Init+0x8e>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	68db      	ldr	r3, [r3, #12]
 8003e94:	2207      	movs	r2, #7
 8003e96:	4013      	ands	r3, r2
 8003e98:	d1ea      	bne.n	8003e70 <HAL_IWDG_Init+0x40>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	691a      	ldr	r2, [r3, #16]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	68db      	ldr	r3, [r3, #12]
 8003ea4:	429a      	cmp	r2, r3
 8003ea6:	d005      	beq.n	8003eb4 <HAL_IWDG_Init+0x84>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	687a      	ldr	r2, [r7, #4]
 8003eae:	68d2      	ldr	r2, [r2, #12]
 8003eb0:	611a      	str	r2, [r3, #16]
 8003eb2:	e003      	b.n	8003ebc <HAL_IWDG_Init+0x8c>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a05      	ldr	r2, [pc, #20]	@ (8003ed0 <HAL_IWDG_Init+0xa0>)
 8003eba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003ebc:	2300      	movs	r3, #0
}
 8003ebe:	0018      	movs	r0, r3
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	b004      	add	sp, #16
 8003ec4:	bd80      	pop	{r7, pc}
 8003ec6:	46c0      	nop			@ (mov r8, r8)
 8003ec8:	0000cccc 	.word	0x0000cccc
 8003ecc:	00005555 	.word	0x00005555
 8003ed0:	0000aaaa 	.word	0x0000aaaa

08003ed4 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b082      	sub	sp, #8
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a03      	ldr	r2, [pc, #12]	@ (8003ef0 <HAL_IWDG_Refresh+0x1c>)
 8003ee2:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003ee4:	2300      	movs	r3, #0
}
 8003ee6:	0018      	movs	r0, r3
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	b002      	add	sp, #8
 8003eec:	bd80      	pop	{r7, pc}
 8003eee:	46c0      	nop			@ (mov r8, r8)
 8003ef0:	0000aaaa 	.word	0x0000aaaa

08003ef4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b084      	sub	sp, #16
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8003efc:	4b19      	ldr	r3, [pc, #100]	@ (8003f64 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a19      	ldr	r2, [pc, #100]	@ (8003f68 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8003f02:	4013      	ands	r3, r2
 8003f04:	0019      	movs	r1, r3
 8003f06:	4b17      	ldr	r3, [pc, #92]	@ (8003f64 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003f08:	687a      	ldr	r2, [r7, #4]
 8003f0a:	430a      	orrs	r2, r1
 8003f0c:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003f0e:	687a      	ldr	r2, [r7, #4]
 8003f10:	2380      	movs	r3, #128	@ 0x80
 8003f12:	009b      	lsls	r3, r3, #2
 8003f14:	429a      	cmp	r2, r3
 8003f16:	d11f      	bne.n	8003f58 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8003f18:	4b14      	ldr	r3, [pc, #80]	@ (8003f6c <HAL_PWREx_ControlVoltageScaling+0x78>)
 8003f1a:	681a      	ldr	r2, [r3, #0]
 8003f1c:	0013      	movs	r3, r2
 8003f1e:	005b      	lsls	r3, r3, #1
 8003f20:	189b      	adds	r3, r3, r2
 8003f22:	005b      	lsls	r3, r3, #1
 8003f24:	4912      	ldr	r1, [pc, #72]	@ (8003f70 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8003f26:	0018      	movs	r0, r3
 8003f28:	f7fc f946 	bl	80001b8 <__udivsi3>
 8003f2c:	0003      	movs	r3, r0
 8003f2e:	3301      	adds	r3, #1
 8003f30:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003f32:	e008      	b.n	8003f46 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d003      	beq.n	8003f42 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	3b01      	subs	r3, #1
 8003f3e:	60fb      	str	r3, [r7, #12]
 8003f40:	e001      	b.n	8003f46 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8003f42:	2303      	movs	r3, #3
 8003f44:	e009      	b.n	8003f5a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003f46:	4b07      	ldr	r3, [pc, #28]	@ (8003f64 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003f48:	695a      	ldr	r2, [r3, #20]
 8003f4a:	2380      	movs	r3, #128	@ 0x80
 8003f4c:	00db      	lsls	r3, r3, #3
 8003f4e:	401a      	ands	r2, r3
 8003f50:	2380      	movs	r3, #128	@ 0x80
 8003f52:	00db      	lsls	r3, r3, #3
 8003f54:	429a      	cmp	r2, r3
 8003f56:	d0ed      	beq.n	8003f34 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8003f58:	2300      	movs	r3, #0
}
 8003f5a:	0018      	movs	r0, r3
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	b004      	add	sp, #16
 8003f60:	bd80      	pop	{r7, pc}
 8003f62:	46c0      	nop			@ (mov r8, r8)
 8003f64:	40007000 	.word	0x40007000
 8003f68:	fffff9ff 	.word	0xfffff9ff
 8003f6c:	200000f0 	.word	0x200000f0
 8003f70:	000f4240 	.word	0x000f4240

08003f74 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8003f78:	4b03      	ldr	r3, [pc, #12]	@ (8003f88 <LL_RCC_GetAPB1Prescaler+0x14>)
 8003f7a:	689a      	ldr	r2, [r3, #8]
 8003f7c:	23e0      	movs	r3, #224	@ 0xe0
 8003f7e:	01db      	lsls	r3, r3, #7
 8003f80:	4013      	ands	r3, r2
}
 8003f82:	0018      	movs	r0, r3
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bd80      	pop	{r7, pc}
 8003f88:	40021000 	.word	0x40021000

08003f8c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b088      	sub	sp, #32
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d101      	bne.n	8003f9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	e2f3      	b.n	8004586 <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	4013      	ands	r3, r2
 8003fa6:	d100      	bne.n	8003faa <HAL_RCC_OscConfig+0x1e>
 8003fa8:	e07c      	b.n	80040a4 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003faa:	4bc3      	ldr	r3, [pc, #780]	@ (80042b8 <HAL_RCC_OscConfig+0x32c>)
 8003fac:	689b      	ldr	r3, [r3, #8]
 8003fae:	2238      	movs	r2, #56	@ 0x38
 8003fb0:	4013      	ands	r3, r2
 8003fb2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003fb4:	4bc0      	ldr	r3, [pc, #768]	@ (80042b8 <HAL_RCC_OscConfig+0x32c>)
 8003fb6:	68db      	ldr	r3, [r3, #12]
 8003fb8:	2203      	movs	r2, #3
 8003fba:	4013      	ands	r3, r2
 8003fbc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8003fbe:	69bb      	ldr	r3, [r7, #24]
 8003fc0:	2b10      	cmp	r3, #16
 8003fc2:	d102      	bne.n	8003fca <HAL_RCC_OscConfig+0x3e>
 8003fc4:	697b      	ldr	r3, [r7, #20]
 8003fc6:	2b03      	cmp	r3, #3
 8003fc8:	d002      	beq.n	8003fd0 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8003fca:	69bb      	ldr	r3, [r7, #24]
 8003fcc:	2b08      	cmp	r3, #8
 8003fce:	d10b      	bne.n	8003fe8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fd0:	4bb9      	ldr	r3, [pc, #740]	@ (80042b8 <HAL_RCC_OscConfig+0x32c>)
 8003fd2:	681a      	ldr	r2, [r3, #0]
 8003fd4:	2380      	movs	r3, #128	@ 0x80
 8003fd6:	029b      	lsls	r3, r3, #10
 8003fd8:	4013      	ands	r3, r2
 8003fda:	d062      	beq.n	80040a2 <HAL_RCC_OscConfig+0x116>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d15e      	bne.n	80040a2 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	e2ce      	b.n	8004586 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	685a      	ldr	r2, [r3, #4]
 8003fec:	2380      	movs	r3, #128	@ 0x80
 8003fee:	025b      	lsls	r3, r3, #9
 8003ff0:	429a      	cmp	r2, r3
 8003ff2:	d107      	bne.n	8004004 <HAL_RCC_OscConfig+0x78>
 8003ff4:	4bb0      	ldr	r3, [pc, #704]	@ (80042b8 <HAL_RCC_OscConfig+0x32c>)
 8003ff6:	681a      	ldr	r2, [r3, #0]
 8003ff8:	4baf      	ldr	r3, [pc, #700]	@ (80042b8 <HAL_RCC_OscConfig+0x32c>)
 8003ffa:	2180      	movs	r1, #128	@ 0x80
 8003ffc:	0249      	lsls	r1, r1, #9
 8003ffe:	430a      	orrs	r2, r1
 8004000:	601a      	str	r2, [r3, #0]
 8004002:	e020      	b.n	8004046 <HAL_RCC_OscConfig+0xba>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	685a      	ldr	r2, [r3, #4]
 8004008:	23a0      	movs	r3, #160	@ 0xa0
 800400a:	02db      	lsls	r3, r3, #11
 800400c:	429a      	cmp	r2, r3
 800400e:	d10e      	bne.n	800402e <HAL_RCC_OscConfig+0xa2>
 8004010:	4ba9      	ldr	r3, [pc, #676]	@ (80042b8 <HAL_RCC_OscConfig+0x32c>)
 8004012:	681a      	ldr	r2, [r3, #0]
 8004014:	4ba8      	ldr	r3, [pc, #672]	@ (80042b8 <HAL_RCC_OscConfig+0x32c>)
 8004016:	2180      	movs	r1, #128	@ 0x80
 8004018:	02c9      	lsls	r1, r1, #11
 800401a:	430a      	orrs	r2, r1
 800401c:	601a      	str	r2, [r3, #0]
 800401e:	4ba6      	ldr	r3, [pc, #664]	@ (80042b8 <HAL_RCC_OscConfig+0x32c>)
 8004020:	681a      	ldr	r2, [r3, #0]
 8004022:	4ba5      	ldr	r3, [pc, #660]	@ (80042b8 <HAL_RCC_OscConfig+0x32c>)
 8004024:	2180      	movs	r1, #128	@ 0x80
 8004026:	0249      	lsls	r1, r1, #9
 8004028:	430a      	orrs	r2, r1
 800402a:	601a      	str	r2, [r3, #0]
 800402c:	e00b      	b.n	8004046 <HAL_RCC_OscConfig+0xba>
 800402e:	4ba2      	ldr	r3, [pc, #648]	@ (80042b8 <HAL_RCC_OscConfig+0x32c>)
 8004030:	681a      	ldr	r2, [r3, #0]
 8004032:	4ba1      	ldr	r3, [pc, #644]	@ (80042b8 <HAL_RCC_OscConfig+0x32c>)
 8004034:	49a1      	ldr	r1, [pc, #644]	@ (80042bc <HAL_RCC_OscConfig+0x330>)
 8004036:	400a      	ands	r2, r1
 8004038:	601a      	str	r2, [r3, #0]
 800403a:	4b9f      	ldr	r3, [pc, #636]	@ (80042b8 <HAL_RCC_OscConfig+0x32c>)
 800403c:	681a      	ldr	r2, [r3, #0]
 800403e:	4b9e      	ldr	r3, [pc, #632]	@ (80042b8 <HAL_RCC_OscConfig+0x32c>)
 8004040:	499f      	ldr	r1, [pc, #636]	@ (80042c0 <HAL_RCC_OscConfig+0x334>)
 8004042:	400a      	ands	r2, r1
 8004044:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d014      	beq.n	8004078 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800404e:	f7fe fd45 	bl	8002adc <HAL_GetTick>
 8004052:	0003      	movs	r3, r0
 8004054:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004056:	e008      	b.n	800406a <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004058:	f7fe fd40 	bl	8002adc <HAL_GetTick>
 800405c:	0002      	movs	r2, r0
 800405e:	693b      	ldr	r3, [r7, #16]
 8004060:	1ad3      	subs	r3, r2, r3
 8004062:	2b64      	cmp	r3, #100	@ 0x64
 8004064:	d901      	bls.n	800406a <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8004066:	2303      	movs	r3, #3
 8004068:	e28d      	b.n	8004586 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800406a:	4b93      	ldr	r3, [pc, #588]	@ (80042b8 <HAL_RCC_OscConfig+0x32c>)
 800406c:	681a      	ldr	r2, [r3, #0]
 800406e:	2380      	movs	r3, #128	@ 0x80
 8004070:	029b      	lsls	r3, r3, #10
 8004072:	4013      	ands	r3, r2
 8004074:	d0f0      	beq.n	8004058 <HAL_RCC_OscConfig+0xcc>
 8004076:	e015      	b.n	80040a4 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004078:	f7fe fd30 	bl	8002adc <HAL_GetTick>
 800407c:	0003      	movs	r3, r0
 800407e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004080:	e008      	b.n	8004094 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004082:	f7fe fd2b 	bl	8002adc <HAL_GetTick>
 8004086:	0002      	movs	r2, r0
 8004088:	693b      	ldr	r3, [r7, #16]
 800408a:	1ad3      	subs	r3, r2, r3
 800408c:	2b64      	cmp	r3, #100	@ 0x64
 800408e:	d901      	bls.n	8004094 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8004090:	2303      	movs	r3, #3
 8004092:	e278      	b.n	8004586 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004094:	4b88      	ldr	r3, [pc, #544]	@ (80042b8 <HAL_RCC_OscConfig+0x32c>)
 8004096:	681a      	ldr	r2, [r3, #0]
 8004098:	2380      	movs	r3, #128	@ 0x80
 800409a:	029b      	lsls	r3, r3, #10
 800409c:	4013      	ands	r3, r2
 800409e:	d1f0      	bne.n	8004082 <HAL_RCC_OscConfig+0xf6>
 80040a0:	e000      	b.n	80040a4 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040a2:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	2202      	movs	r2, #2
 80040aa:	4013      	ands	r3, r2
 80040ac:	d100      	bne.n	80040b0 <HAL_RCC_OscConfig+0x124>
 80040ae:	e099      	b.n	80041e4 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80040b0:	4b81      	ldr	r3, [pc, #516]	@ (80042b8 <HAL_RCC_OscConfig+0x32c>)
 80040b2:	689b      	ldr	r3, [r3, #8]
 80040b4:	2238      	movs	r2, #56	@ 0x38
 80040b6:	4013      	ands	r3, r2
 80040b8:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80040ba:	4b7f      	ldr	r3, [pc, #508]	@ (80042b8 <HAL_RCC_OscConfig+0x32c>)
 80040bc:	68db      	ldr	r3, [r3, #12]
 80040be:	2203      	movs	r2, #3
 80040c0:	4013      	ands	r3, r2
 80040c2:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80040c4:	69bb      	ldr	r3, [r7, #24]
 80040c6:	2b10      	cmp	r3, #16
 80040c8:	d102      	bne.n	80040d0 <HAL_RCC_OscConfig+0x144>
 80040ca:	697b      	ldr	r3, [r7, #20]
 80040cc:	2b02      	cmp	r3, #2
 80040ce:	d002      	beq.n	80040d6 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80040d0:	69bb      	ldr	r3, [r7, #24]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d135      	bne.n	8004142 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80040d6:	4b78      	ldr	r3, [pc, #480]	@ (80042b8 <HAL_RCC_OscConfig+0x32c>)
 80040d8:	681a      	ldr	r2, [r3, #0]
 80040da:	2380      	movs	r3, #128	@ 0x80
 80040dc:	00db      	lsls	r3, r3, #3
 80040de:	4013      	ands	r3, r2
 80040e0:	d005      	beq.n	80040ee <HAL_RCC_OscConfig+0x162>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	68db      	ldr	r3, [r3, #12]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d101      	bne.n	80040ee <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80040ea:	2301      	movs	r3, #1
 80040ec:	e24b      	b.n	8004586 <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040ee:	4b72      	ldr	r3, [pc, #456]	@ (80042b8 <HAL_RCC_OscConfig+0x32c>)
 80040f0:	685b      	ldr	r3, [r3, #4]
 80040f2:	4a74      	ldr	r2, [pc, #464]	@ (80042c4 <HAL_RCC_OscConfig+0x338>)
 80040f4:	4013      	ands	r3, r2
 80040f6:	0019      	movs	r1, r3
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	695b      	ldr	r3, [r3, #20]
 80040fc:	021a      	lsls	r2, r3, #8
 80040fe:	4b6e      	ldr	r3, [pc, #440]	@ (80042b8 <HAL_RCC_OscConfig+0x32c>)
 8004100:	430a      	orrs	r2, r1
 8004102:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004104:	69bb      	ldr	r3, [r7, #24]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d112      	bne.n	8004130 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800410a:	4b6b      	ldr	r3, [pc, #428]	@ (80042b8 <HAL_RCC_OscConfig+0x32c>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4a6e      	ldr	r2, [pc, #440]	@ (80042c8 <HAL_RCC_OscConfig+0x33c>)
 8004110:	4013      	ands	r3, r2
 8004112:	0019      	movs	r1, r3
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	691a      	ldr	r2, [r3, #16]
 8004118:	4b67      	ldr	r3, [pc, #412]	@ (80042b8 <HAL_RCC_OscConfig+0x32c>)
 800411a:	430a      	orrs	r2, r1
 800411c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800411e:	4b66      	ldr	r3, [pc, #408]	@ (80042b8 <HAL_RCC_OscConfig+0x32c>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	0adb      	lsrs	r3, r3, #11
 8004124:	2207      	movs	r2, #7
 8004126:	4013      	ands	r3, r2
 8004128:	4a68      	ldr	r2, [pc, #416]	@ (80042cc <HAL_RCC_OscConfig+0x340>)
 800412a:	40da      	lsrs	r2, r3
 800412c:	4b68      	ldr	r3, [pc, #416]	@ (80042d0 <HAL_RCC_OscConfig+0x344>)
 800412e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004130:	4b68      	ldr	r3, [pc, #416]	@ (80042d4 <HAL_RCC_OscConfig+0x348>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	0018      	movs	r0, r3
 8004136:	f7fe fc75 	bl	8002a24 <HAL_InitTick>
 800413a:	1e03      	subs	r3, r0, #0
 800413c:	d051      	beq.n	80041e2 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800413e:	2301      	movs	r3, #1
 8004140:	e221      	b.n	8004586 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	68db      	ldr	r3, [r3, #12]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d030      	beq.n	80041ac <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800414a:	4b5b      	ldr	r3, [pc, #364]	@ (80042b8 <HAL_RCC_OscConfig+0x32c>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4a5e      	ldr	r2, [pc, #376]	@ (80042c8 <HAL_RCC_OscConfig+0x33c>)
 8004150:	4013      	ands	r3, r2
 8004152:	0019      	movs	r1, r3
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	691a      	ldr	r2, [r3, #16]
 8004158:	4b57      	ldr	r3, [pc, #348]	@ (80042b8 <HAL_RCC_OscConfig+0x32c>)
 800415a:	430a      	orrs	r2, r1
 800415c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800415e:	4b56      	ldr	r3, [pc, #344]	@ (80042b8 <HAL_RCC_OscConfig+0x32c>)
 8004160:	681a      	ldr	r2, [r3, #0]
 8004162:	4b55      	ldr	r3, [pc, #340]	@ (80042b8 <HAL_RCC_OscConfig+0x32c>)
 8004164:	2180      	movs	r1, #128	@ 0x80
 8004166:	0049      	lsls	r1, r1, #1
 8004168:	430a      	orrs	r2, r1
 800416a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800416c:	f7fe fcb6 	bl	8002adc <HAL_GetTick>
 8004170:	0003      	movs	r3, r0
 8004172:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004174:	e008      	b.n	8004188 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004176:	f7fe fcb1 	bl	8002adc <HAL_GetTick>
 800417a:	0002      	movs	r2, r0
 800417c:	693b      	ldr	r3, [r7, #16]
 800417e:	1ad3      	subs	r3, r2, r3
 8004180:	2b02      	cmp	r3, #2
 8004182:	d901      	bls.n	8004188 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8004184:	2303      	movs	r3, #3
 8004186:	e1fe      	b.n	8004586 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004188:	4b4b      	ldr	r3, [pc, #300]	@ (80042b8 <HAL_RCC_OscConfig+0x32c>)
 800418a:	681a      	ldr	r2, [r3, #0]
 800418c:	2380      	movs	r3, #128	@ 0x80
 800418e:	00db      	lsls	r3, r3, #3
 8004190:	4013      	ands	r3, r2
 8004192:	d0f0      	beq.n	8004176 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004194:	4b48      	ldr	r3, [pc, #288]	@ (80042b8 <HAL_RCC_OscConfig+0x32c>)
 8004196:	685b      	ldr	r3, [r3, #4]
 8004198:	4a4a      	ldr	r2, [pc, #296]	@ (80042c4 <HAL_RCC_OscConfig+0x338>)
 800419a:	4013      	ands	r3, r2
 800419c:	0019      	movs	r1, r3
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	695b      	ldr	r3, [r3, #20]
 80041a2:	021a      	lsls	r2, r3, #8
 80041a4:	4b44      	ldr	r3, [pc, #272]	@ (80042b8 <HAL_RCC_OscConfig+0x32c>)
 80041a6:	430a      	orrs	r2, r1
 80041a8:	605a      	str	r2, [r3, #4]
 80041aa:	e01b      	b.n	80041e4 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80041ac:	4b42      	ldr	r3, [pc, #264]	@ (80042b8 <HAL_RCC_OscConfig+0x32c>)
 80041ae:	681a      	ldr	r2, [r3, #0]
 80041b0:	4b41      	ldr	r3, [pc, #260]	@ (80042b8 <HAL_RCC_OscConfig+0x32c>)
 80041b2:	4949      	ldr	r1, [pc, #292]	@ (80042d8 <HAL_RCC_OscConfig+0x34c>)
 80041b4:	400a      	ands	r2, r1
 80041b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041b8:	f7fe fc90 	bl	8002adc <HAL_GetTick>
 80041bc:	0003      	movs	r3, r0
 80041be:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80041c0:	e008      	b.n	80041d4 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041c2:	f7fe fc8b 	bl	8002adc <HAL_GetTick>
 80041c6:	0002      	movs	r2, r0
 80041c8:	693b      	ldr	r3, [r7, #16]
 80041ca:	1ad3      	subs	r3, r2, r3
 80041cc:	2b02      	cmp	r3, #2
 80041ce:	d901      	bls.n	80041d4 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80041d0:	2303      	movs	r3, #3
 80041d2:	e1d8      	b.n	8004586 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80041d4:	4b38      	ldr	r3, [pc, #224]	@ (80042b8 <HAL_RCC_OscConfig+0x32c>)
 80041d6:	681a      	ldr	r2, [r3, #0]
 80041d8:	2380      	movs	r3, #128	@ 0x80
 80041da:	00db      	lsls	r3, r3, #3
 80041dc:	4013      	ands	r3, r2
 80041de:	d1f0      	bne.n	80041c2 <HAL_RCC_OscConfig+0x236>
 80041e0:	e000      	b.n	80041e4 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80041e2:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	2208      	movs	r2, #8
 80041ea:	4013      	ands	r3, r2
 80041ec:	d047      	beq.n	800427e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80041ee:	4b32      	ldr	r3, [pc, #200]	@ (80042b8 <HAL_RCC_OscConfig+0x32c>)
 80041f0:	689b      	ldr	r3, [r3, #8]
 80041f2:	2238      	movs	r2, #56	@ 0x38
 80041f4:	4013      	ands	r3, r2
 80041f6:	2b18      	cmp	r3, #24
 80041f8:	d10a      	bne.n	8004210 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80041fa:	4b2f      	ldr	r3, [pc, #188]	@ (80042b8 <HAL_RCC_OscConfig+0x32c>)
 80041fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041fe:	2202      	movs	r2, #2
 8004200:	4013      	ands	r3, r2
 8004202:	d03c      	beq.n	800427e <HAL_RCC_OscConfig+0x2f2>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	699b      	ldr	r3, [r3, #24]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d138      	bne.n	800427e <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 800420c:	2301      	movs	r3, #1
 800420e:	e1ba      	b.n	8004586 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	699b      	ldr	r3, [r3, #24]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d019      	beq.n	800424c <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8004218:	4b27      	ldr	r3, [pc, #156]	@ (80042b8 <HAL_RCC_OscConfig+0x32c>)
 800421a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800421c:	4b26      	ldr	r3, [pc, #152]	@ (80042b8 <HAL_RCC_OscConfig+0x32c>)
 800421e:	2101      	movs	r1, #1
 8004220:	430a      	orrs	r2, r1
 8004222:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004224:	f7fe fc5a 	bl	8002adc <HAL_GetTick>
 8004228:	0003      	movs	r3, r0
 800422a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800422c:	e008      	b.n	8004240 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800422e:	f7fe fc55 	bl	8002adc <HAL_GetTick>
 8004232:	0002      	movs	r2, r0
 8004234:	693b      	ldr	r3, [r7, #16]
 8004236:	1ad3      	subs	r3, r2, r3
 8004238:	2b02      	cmp	r3, #2
 800423a:	d901      	bls.n	8004240 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 800423c:	2303      	movs	r3, #3
 800423e:	e1a2      	b.n	8004586 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004240:	4b1d      	ldr	r3, [pc, #116]	@ (80042b8 <HAL_RCC_OscConfig+0x32c>)
 8004242:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004244:	2202      	movs	r2, #2
 8004246:	4013      	ands	r3, r2
 8004248:	d0f1      	beq.n	800422e <HAL_RCC_OscConfig+0x2a2>
 800424a:	e018      	b.n	800427e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800424c:	4b1a      	ldr	r3, [pc, #104]	@ (80042b8 <HAL_RCC_OscConfig+0x32c>)
 800424e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004250:	4b19      	ldr	r3, [pc, #100]	@ (80042b8 <HAL_RCC_OscConfig+0x32c>)
 8004252:	2101      	movs	r1, #1
 8004254:	438a      	bics	r2, r1
 8004256:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004258:	f7fe fc40 	bl	8002adc <HAL_GetTick>
 800425c:	0003      	movs	r3, r0
 800425e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004260:	e008      	b.n	8004274 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004262:	f7fe fc3b 	bl	8002adc <HAL_GetTick>
 8004266:	0002      	movs	r2, r0
 8004268:	693b      	ldr	r3, [r7, #16]
 800426a:	1ad3      	subs	r3, r2, r3
 800426c:	2b02      	cmp	r3, #2
 800426e:	d901      	bls.n	8004274 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8004270:	2303      	movs	r3, #3
 8004272:	e188      	b.n	8004586 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004274:	4b10      	ldr	r3, [pc, #64]	@ (80042b8 <HAL_RCC_OscConfig+0x32c>)
 8004276:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004278:	2202      	movs	r2, #2
 800427a:	4013      	ands	r3, r2
 800427c:	d1f1      	bne.n	8004262 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	2204      	movs	r2, #4
 8004284:	4013      	ands	r3, r2
 8004286:	d100      	bne.n	800428a <HAL_RCC_OscConfig+0x2fe>
 8004288:	e0c6      	b.n	8004418 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800428a:	231f      	movs	r3, #31
 800428c:	18fb      	adds	r3, r7, r3
 800428e:	2200      	movs	r2, #0
 8004290:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004292:	4b09      	ldr	r3, [pc, #36]	@ (80042b8 <HAL_RCC_OscConfig+0x32c>)
 8004294:	689b      	ldr	r3, [r3, #8]
 8004296:	2238      	movs	r2, #56	@ 0x38
 8004298:	4013      	ands	r3, r2
 800429a:	2b20      	cmp	r3, #32
 800429c:	d11e      	bne.n	80042dc <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800429e:	4b06      	ldr	r3, [pc, #24]	@ (80042b8 <HAL_RCC_OscConfig+0x32c>)
 80042a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042a2:	2202      	movs	r2, #2
 80042a4:	4013      	ands	r3, r2
 80042a6:	d100      	bne.n	80042aa <HAL_RCC_OscConfig+0x31e>
 80042a8:	e0b6      	b.n	8004418 <HAL_RCC_OscConfig+0x48c>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	689b      	ldr	r3, [r3, #8]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d000      	beq.n	80042b4 <HAL_RCC_OscConfig+0x328>
 80042b2:	e0b1      	b.n	8004418 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80042b4:	2301      	movs	r3, #1
 80042b6:	e166      	b.n	8004586 <HAL_RCC_OscConfig+0x5fa>
 80042b8:	40021000 	.word	0x40021000
 80042bc:	fffeffff 	.word	0xfffeffff
 80042c0:	fffbffff 	.word	0xfffbffff
 80042c4:	ffff80ff 	.word	0xffff80ff
 80042c8:	ffffc7ff 	.word	0xffffc7ff
 80042cc:	00f42400 	.word	0x00f42400
 80042d0:	200000f0 	.word	0x200000f0
 80042d4:	200000f4 	.word	0x200000f4
 80042d8:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80042dc:	4bac      	ldr	r3, [pc, #688]	@ (8004590 <HAL_RCC_OscConfig+0x604>)
 80042de:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80042e0:	2380      	movs	r3, #128	@ 0x80
 80042e2:	055b      	lsls	r3, r3, #21
 80042e4:	4013      	ands	r3, r2
 80042e6:	d101      	bne.n	80042ec <HAL_RCC_OscConfig+0x360>
 80042e8:	2301      	movs	r3, #1
 80042ea:	e000      	b.n	80042ee <HAL_RCC_OscConfig+0x362>
 80042ec:	2300      	movs	r3, #0
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d011      	beq.n	8004316 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80042f2:	4ba7      	ldr	r3, [pc, #668]	@ (8004590 <HAL_RCC_OscConfig+0x604>)
 80042f4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80042f6:	4ba6      	ldr	r3, [pc, #664]	@ (8004590 <HAL_RCC_OscConfig+0x604>)
 80042f8:	2180      	movs	r1, #128	@ 0x80
 80042fa:	0549      	lsls	r1, r1, #21
 80042fc:	430a      	orrs	r2, r1
 80042fe:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004300:	4ba3      	ldr	r3, [pc, #652]	@ (8004590 <HAL_RCC_OscConfig+0x604>)
 8004302:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004304:	2380      	movs	r3, #128	@ 0x80
 8004306:	055b      	lsls	r3, r3, #21
 8004308:	4013      	ands	r3, r2
 800430a:	60fb      	str	r3, [r7, #12]
 800430c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800430e:	231f      	movs	r3, #31
 8004310:	18fb      	adds	r3, r7, r3
 8004312:	2201      	movs	r2, #1
 8004314:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004316:	4b9f      	ldr	r3, [pc, #636]	@ (8004594 <HAL_RCC_OscConfig+0x608>)
 8004318:	681a      	ldr	r2, [r3, #0]
 800431a:	2380      	movs	r3, #128	@ 0x80
 800431c:	005b      	lsls	r3, r3, #1
 800431e:	4013      	ands	r3, r2
 8004320:	d11a      	bne.n	8004358 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004322:	4b9c      	ldr	r3, [pc, #624]	@ (8004594 <HAL_RCC_OscConfig+0x608>)
 8004324:	681a      	ldr	r2, [r3, #0]
 8004326:	4b9b      	ldr	r3, [pc, #620]	@ (8004594 <HAL_RCC_OscConfig+0x608>)
 8004328:	2180      	movs	r1, #128	@ 0x80
 800432a:	0049      	lsls	r1, r1, #1
 800432c:	430a      	orrs	r2, r1
 800432e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8004330:	f7fe fbd4 	bl	8002adc <HAL_GetTick>
 8004334:	0003      	movs	r3, r0
 8004336:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004338:	e008      	b.n	800434c <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800433a:	f7fe fbcf 	bl	8002adc <HAL_GetTick>
 800433e:	0002      	movs	r2, r0
 8004340:	693b      	ldr	r3, [r7, #16]
 8004342:	1ad3      	subs	r3, r2, r3
 8004344:	2b02      	cmp	r3, #2
 8004346:	d901      	bls.n	800434c <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8004348:	2303      	movs	r3, #3
 800434a:	e11c      	b.n	8004586 <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800434c:	4b91      	ldr	r3, [pc, #580]	@ (8004594 <HAL_RCC_OscConfig+0x608>)
 800434e:	681a      	ldr	r2, [r3, #0]
 8004350:	2380      	movs	r3, #128	@ 0x80
 8004352:	005b      	lsls	r3, r3, #1
 8004354:	4013      	ands	r3, r2
 8004356:	d0f0      	beq.n	800433a <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	689b      	ldr	r3, [r3, #8]
 800435c:	2b01      	cmp	r3, #1
 800435e:	d106      	bne.n	800436e <HAL_RCC_OscConfig+0x3e2>
 8004360:	4b8b      	ldr	r3, [pc, #556]	@ (8004590 <HAL_RCC_OscConfig+0x604>)
 8004362:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004364:	4b8a      	ldr	r3, [pc, #552]	@ (8004590 <HAL_RCC_OscConfig+0x604>)
 8004366:	2101      	movs	r1, #1
 8004368:	430a      	orrs	r2, r1
 800436a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800436c:	e01c      	b.n	80043a8 <HAL_RCC_OscConfig+0x41c>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	689b      	ldr	r3, [r3, #8]
 8004372:	2b05      	cmp	r3, #5
 8004374:	d10c      	bne.n	8004390 <HAL_RCC_OscConfig+0x404>
 8004376:	4b86      	ldr	r3, [pc, #536]	@ (8004590 <HAL_RCC_OscConfig+0x604>)
 8004378:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800437a:	4b85      	ldr	r3, [pc, #532]	@ (8004590 <HAL_RCC_OscConfig+0x604>)
 800437c:	2104      	movs	r1, #4
 800437e:	430a      	orrs	r2, r1
 8004380:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004382:	4b83      	ldr	r3, [pc, #524]	@ (8004590 <HAL_RCC_OscConfig+0x604>)
 8004384:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004386:	4b82      	ldr	r3, [pc, #520]	@ (8004590 <HAL_RCC_OscConfig+0x604>)
 8004388:	2101      	movs	r1, #1
 800438a:	430a      	orrs	r2, r1
 800438c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800438e:	e00b      	b.n	80043a8 <HAL_RCC_OscConfig+0x41c>
 8004390:	4b7f      	ldr	r3, [pc, #508]	@ (8004590 <HAL_RCC_OscConfig+0x604>)
 8004392:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004394:	4b7e      	ldr	r3, [pc, #504]	@ (8004590 <HAL_RCC_OscConfig+0x604>)
 8004396:	2101      	movs	r1, #1
 8004398:	438a      	bics	r2, r1
 800439a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800439c:	4b7c      	ldr	r3, [pc, #496]	@ (8004590 <HAL_RCC_OscConfig+0x604>)
 800439e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80043a0:	4b7b      	ldr	r3, [pc, #492]	@ (8004590 <HAL_RCC_OscConfig+0x604>)
 80043a2:	2104      	movs	r1, #4
 80043a4:	438a      	bics	r2, r1
 80043a6:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	689b      	ldr	r3, [r3, #8]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d014      	beq.n	80043da <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043b0:	f7fe fb94 	bl	8002adc <HAL_GetTick>
 80043b4:	0003      	movs	r3, r0
 80043b6:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80043b8:	e009      	b.n	80043ce <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043ba:	f7fe fb8f 	bl	8002adc <HAL_GetTick>
 80043be:	0002      	movs	r2, r0
 80043c0:	693b      	ldr	r3, [r7, #16]
 80043c2:	1ad3      	subs	r3, r2, r3
 80043c4:	4a74      	ldr	r2, [pc, #464]	@ (8004598 <HAL_RCC_OscConfig+0x60c>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d901      	bls.n	80043ce <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80043ca:	2303      	movs	r3, #3
 80043cc:	e0db      	b.n	8004586 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80043ce:	4b70      	ldr	r3, [pc, #448]	@ (8004590 <HAL_RCC_OscConfig+0x604>)
 80043d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043d2:	2202      	movs	r2, #2
 80043d4:	4013      	ands	r3, r2
 80043d6:	d0f0      	beq.n	80043ba <HAL_RCC_OscConfig+0x42e>
 80043d8:	e013      	b.n	8004402 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043da:	f7fe fb7f 	bl	8002adc <HAL_GetTick>
 80043de:	0003      	movs	r3, r0
 80043e0:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80043e2:	e009      	b.n	80043f8 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043e4:	f7fe fb7a 	bl	8002adc <HAL_GetTick>
 80043e8:	0002      	movs	r2, r0
 80043ea:	693b      	ldr	r3, [r7, #16]
 80043ec:	1ad3      	subs	r3, r2, r3
 80043ee:	4a6a      	ldr	r2, [pc, #424]	@ (8004598 <HAL_RCC_OscConfig+0x60c>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d901      	bls.n	80043f8 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80043f4:	2303      	movs	r3, #3
 80043f6:	e0c6      	b.n	8004586 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80043f8:	4b65      	ldr	r3, [pc, #404]	@ (8004590 <HAL_RCC_OscConfig+0x604>)
 80043fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043fc:	2202      	movs	r2, #2
 80043fe:	4013      	ands	r3, r2
 8004400:	d1f0      	bne.n	80043e4 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8004402:	231f      	movs	r3, #31
 8004404:	18fb      	adds	r3, r7, r3
 8004406:	781b      	ldrb	r3, [r3, #0]
 8004408:	2b01      	cmp	r3, #1
 800440a:	d105      	bne.n	8004418 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800440c:	4b60      	ldr	r3, [pc, #384]	@ (8004590 <HAL_RCC_OscConfig+0x604>)
 800440e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004410:	4b5f      	ldr	r3, [pc, #380]	@ (8004590 <HAL_RCC_OscConfig+0x604>)
 8004412:	4962      	ldr	r1, [pc, #392]	@ (800459c <HAL_RCC_OscConfig+0x610>)
 8004414:	400a      	ands	r2, r1
 8004416:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	69db      	ldr	r3, [r3, #28]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d100      	bne.n	8004422 <HAL_RCC_OscConfig+0x496>
 8004420:	e0b0      	b.n	8004584 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004422:	4b5b      	ldr	r3, [pc, #364]	@ (8004590 <HAL_RCC_OscConfig+0x604>)
 8004424:	689b      	ldr	r3, [r3, #8]
 8004426:	2238      	movs	r2, #56	@ 0x38
 8004428:	4013      	ands	r3, r2
 800442a:	2b10      	cmp	r3, #16
 800442c:	d100      	bne.n	8004430 <HAL_RCC_OscConfig+0x4a4>
 800442e:	e078      	b.n	8004522 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	69db      	ldr	r3, [r3, #28]
 8004434:	2b02      	cmp	r3, #2
 8004436:	d153      	bne.n	80044e0 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004438:	4b55      	ldr	r3, [pc, #340]	@ (8004590 <HAL_RCC_OscConfig+0x604>)
 800443a:	681a      	ldr	r2, [r3, #0]
 800443c:	4b54      	ldr	r3, [pc, #336]	@ (8004590 <HAL_RCC_OscConfig+0x604>)
 800443e:	4958      	ldr	r1, [pc, #352]	@ (80045a0 <HAL_RCC_OscConfig+0x614>)
 8004440:	400a      	ands	r2, r1
 8004442:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004444:	f7fe fb4a 	bl	8002adc <HAL_GetTick>
 8004448:	0003      	movs	r3, r0
 800444a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800444c:	e008      	b.n	8004460 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800444e:	f7fe fb45 	bl	8002adc <HAL_GetTick>
 8004452:	0002      	movs	r2, r0
 8004454:	693b      	ldr	r3, [r7, #16]
 8004456:	1ad3      	subs	r3, r2, r3
 8004458:	2b02      	cmp	r3, #2
 800445a:	d901      	bls.n	8004460 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 800445c:	2303      	movs	r3, #3
 800445e:	e092      	b.n	8004586 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004460:	4b4b      	ldr	r3, [pc, #300]	@ (8004590 <HAL_RCC_OscConfig+0x604>)
 8004462:	681a      	ldr	r2, [r3, #0]
 8004464:	2380      	movs	r3, #128	@ 0x80
 8004466:	049b      	lsls	r3, r3, #18
 8004468:	4013      	ands	r3, r2
 800446a:	d1f0      	bne.n	800444e <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800446c:	4b48      	ldr	r3, [pc, #288]	@ (8004590 <HAL_RCC_OscConfig+0x604>)
 800446e:	68db      	ldr	r3, [r3, #12]
 8004470:	4a4c      	ldr	r2, [pc, #304]	@ (80045a4 <HAL_RCC_OscConfig+0x618>)
 8004472:	4013      	ands	r3, r2
 8004474:	0019      	movs	r1, r3
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6a1a      	ldr	r2, [r3, #32]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800447e:	431a      	orrs	r2, r3
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004484:	021b      	lsls	r3, r3, #8
 8004486:	431a      	orrs	r2, r3
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800448c:	431a      	orrs	r2, r3
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004492:	431a      	orrs	r2, r3
 8004494:	4b3e      	ldr	r3, [pc, #248]	@ (8004590 <HAL_RCC_OscConfig+0x604>)
 8004496:	430a      	orrs	r2, r1
 8004498:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800449a:	4b3d      	ldr	r3, [pc, #244]	@ (8004590 <HAL_RCC_OscConfig+0x604>)
 800449c:	681a      	ldr	r2, [r3, #0]
 800449e:	4b3c      	ldr	r3, [pc, #240]	@ (8004590 <HAL_RCC_OscConfig+0x604>)
 80044a0:	2180      	movs	r1, #128	@ 0x80
 80044a2:	0449      	lsls	r1, r1, #17
 80044a4:	430a      	orrs	r2, r1
 80044a6:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80044a8:	4b39      	ldr	r3, [pc, #228]	@ (8004590 <HAL_RCC_OscConfig+0x604>)
 80044aa:	68da      	ldr	r2, [r3, #12]
 80044ac:	4b38      	ldr	r3, [pc, #224]	@ (8004590 <HAL_RCC_OscConfig+0x604>)
 80044ae:	2180      	movs	r1, #128	@ 0x80
 80044b0:	0549      	lsls	r1, r1, #21
 80044b2:	430a      	orrs	r2, r1
 80044b4:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044b6:	f7fe fb11 	bl	8002adc <HAL_GetTick>
 80044ba:	0003      	movs	r3, r0
 80044bc:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80044be:	e008      	b.n	80044d2 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044c0:	f7fe fb0c 	bl	8002adc <HAL_GetTick>
 80044c4:	0002      	movs	r2, r0
 80044c6:	693b      	ldr	r3, [r7, #16]
 80044c8:	1ad3      	subs	r3, r2, r3
 80044ca:	2b02      	cmp	r3, #2
 80044cc:	d901      	bls.n	80044d2 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 80044ce:	2303      	movs	r3, #3
 80044d0:	e059      	b.n	8004586 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80044d2:	4b2f      	ldr	r3, [pc, #188]	@ (8004590 <HAL_RCC_OscConfig+0x604>)
 80044d4:	681a      	ldr	r2, [r3, #0]
 80044d6:	2380      	movs	r3, #128	@ 0x80
 80044d8:	049b      	lsls	r3, r3, #18
 80044da:	4013      	ands	r3, r2
 80044dc:	d0f0      	beq.n	80044c0 <HAL_RCC_OscConfig+0x534>
 80044de:	e051      	b.n	8004584 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044e0:	4b2b      	ldr	r3, [pc, #172]	@ (8004590 <HAL_RCC_OscConfig+0x604>)
 80044e2:	681a      	ldr	r2, [r3, #0]
 80044e4:	4b2a      	ldr	r3, [pc, #168]	@ (8004590 <HAL_RCC_OscConfig+0x604>)
 80044e6:	492e      	ldr	r1, [pc, #184]	@ (80045a0 <HAL_RCC_OscConfig+0x614>)
 80044e8:	400a      	ands	r2, r1
 80044ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044ec:	f7fe faf6 	bl	8002adc <HAL_GetTick>
 80044f0:	0003      	movs	r3, r0
 80044f2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80044f4:	e008      	b.n	8004508 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044f6:	f7fe faf1 	bl	8002adc <HAL_GetTick>
 80044fa:	0002      	movs	r2, r0
 80044fc:	693b      	ldr	r3, [r7, #16]
 80044fe:	1ad3      	subs	r3, r2, r3
 8004500:	2b02      	cmp	r3, #2
 8004502:	d901      	bls.n	8004508 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8004504:	2303      	movs	r3, #3
 8004506:	e03e      	b.n	8004586 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004508:	4b21      	ldr	r3, [pc, #132]	@ (8004590 <HAL_RCC_OscConfig+0x604>)
 800450a:	681a      	ldr	r2, [r3, #0]
 800450c:	2380      	movs	r3, #128	@ 0x80
 800450e:	049b      	lsls	r3, r3, #18
 8004510:	4013      	ands	r3, r2
 8004512:	d1f0      	bne.n	80044f6 <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8004514:	4b1e      	ldr	r3, [pc, #120]	@ (8004590 <HAL_RCC_OscConfig+0x604>)
 8004516:	68da      	ldr	r2, [r3, #12]
 8004518:	4b1d      	ldr	r3, [pc, #116]	@ (8004590 <HAL_RCC_OscConfig+0x604>)
 800451a:	4923      	ldr	r1, [pc, #140]	@ (80045a8 <HAL_RCC_OscConfig+0x61c>)
 800451c:	400a      	ands	r2, r1
 800451e:	60da      	str	r2, [r3, #12]
 8004520:	e030      	b.n	8004584 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	69db      	ldr	r3, [r3, #28]
 8004526:	2b01      	cmp	r3, #1
 8004528:	d101      	bne.n	800452e <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 800452a:	2301      	movs	r3, #1
 800452c:	e02b      	b.n	8004586 <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800452e:	4b18      	ldr	r3, [pc, #96]	@ (8004590 <HAL_RCC_OscConfig+0x604>)
 8004530:	68db      	ldr	r3, [r3, #12]
 8004532:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004534:	697b      	ldr	r3, [r7, #20]
 8004536:	2203      	movs	r2, #3
 8004538:	401a      	ands	r2, r3
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6a1b      	ldr	r3, [r3, #32]
 800453e:	429a      	cmp	r2, r3
 8004540:	d11e      	bne.n	8004580 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004542:	697b      	ldr	r3, [r7, #20]
 8004544:	2270      	movs	r2, #112	@ 0x70
 8004546:	401a      	ands	r2, r3
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800454c:	429a      	cmp	r2, r3
 800454e:	d117      	bne.n	8004580 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004550:	697a      	ldr	r2, [r7, #20]
 8004552:	23fe      	movs	r3, #254	@ 0xfe
 8004554:	01db      	lsls	r3, r3, #7
 8004556:	401a      	ands	r2, r3
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800455c:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800455e:	429a      	cmp	r2, r3
 8004560:	d10e      	bne.n	8004580 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004562:	697a      	ldr	r2, [r7, #20]
 8004564:	23f8      	movs	r3, #248	@ 0xf8
 8004566:	039b      	lsls	r3, r3, #14
 8004568:	401a      	ands	r2, r3
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800456e:	429a      	cmp	r2, r3
 8004570:	d106      	bne.n	8004580 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004572:	697b      	ldr	r3, [r7, #20]
 8004574:	0f5b      	lsrs	r3, r3, #29
 8004576:	075a      	lsls	r2, r3, #29
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800457c:	429a      	cmp	r2, r3
 800457e:	d001      	beq.n	8004584 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8004580:	2301      	movs	r3, #1
 8004582:	e000      	b.n	8004586 <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8004584:	2300      	movs	r3, #0
}
 8004586:	0018      	movs	r0, r3
 8004588:	46bd      	mov	sp, r7
 800458a:	b008      	add	sp, #32
 800458c:	bd80      	pop	{r7, pc}
 800458e:	46c0      	nop			@ (mov r8, r8)
 8004590:	40021000 	.word	0x40021000
 8004594:	40007000 	.word	0x40007000
 8004598:	00001388 	.word	0x00001388
 800459c:	efffffff 	.word	0xefffffff
 80045a0:	feffffff 	.word	0xfeffffff
 80045a4:	1fc1808c 	.word	0x1fc1808c
 80045a8:	effefffc 	.word	0xeffefffc

080045ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b084      	sub	sp, #16
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
 80045b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d101      	bne.n	80045c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80045bc:	2301      	movs	r3, #1
 80045be:	e0e9      	b.n	8004794 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80045c0:	4b76      	ldr	r3, [pc, #472]	@ (800479c <HAL_RCC_ClockConfig+0x1f0>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	2207      	movs	r2, #7
 80045c6:	4013      	ands	r3, r2
 80045c8:	683a      	ldr	r2, [r7, #0]
 80045ca:	429a      	cmp	r2, r3
 80045cc:	d91e      	bls.n	800460c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045ce:	4b73      	ldr	r3, [pc, #460]	@ (800479c <HAL_RCC_ClockConfig+0x1f0>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	2207      	movs	r2, #7
 80045d4:	4393      	bics	r3, r2
 80045d6:	0019      	movs	r1, r3
 80045d8:	4b70      	ldr	r3, [pc, #448]	@ (800479c <HAL_RCC_ClockConfig+0x1f0>)
 80045da:	683a      	ldr	r2, [r7, #0]
 80045dc:	430a      	orrs	r2, r1
 80045de:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80045e0:	f7fe fa7c 	bl	8002adc <HAL_GetTick>
 80045e4:	0003      	movs	r3, r0
 80045e6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80045e8:	e009      	b.n	80045fe <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045ea:	f7fe fa77 	bl	8002adc <HAL_GetTick>
 80045ee:	0002      	movs	r2, r0
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	1ad3      	subs	r3, r2, r3
 80045f4:	4a6a      	ldr	r2, [pc, #424]	@ (80047a0 <HAL_RCC_ClockConfig+0x1f4>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d901      	bls.n	80045fe <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80045fa:	2303      	movs	r3, #3
 80045fc:	e0ca      	b.n	8004794 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80045fe:	4b67      	ldr	r3, [pc, #412]	@ (800479c <HAL_RCC_ClockConfig+0x1f0>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	2207      	movs	r2, #7
 8004604:	4013      	ands	r3, r2
 8004606:	683a      	ldr	r2, [r7, #0]
 8004608:	429a      	cmp	r2, r3
 800460a:	d1ee      	bne.n	80045ea <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	2202      	movs	r2, #2
 8004612:	4013      	ands	r3, r2
 8004614:	d015      	beq.n	8004642 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	2204      	movs	r2, #4
 800461c:	4013      	ands	r3, r2
 800461e:	d006      	beq.n	800462e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004620:	4b60      	ldr	r3, [pc, #384]	@ (80047a4 <HAL_RCC_ClockConfig+0x1f8>)
 8004622:	689a      	ldr	r2, [r3, #8]
 8004624:	4b5f      	ldr	r3, [pc, #380]	@ (80047a4 <HAL_RCC_ClockConfig+0x1f8>)
 8004626:	21e0      	movs	r1, #224	@ 0xe0
 8004628:	01c9      	lsls	r1, r1, #7
 800462a:	430a      	orrs	r2, r1
 800462c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800462e:	4b5d      	ldr	r3, [pc, #372]	@ (80047a4 <HAL_RCC_ClockConfig+0x1f8>)
 8004630:	689b      	ldr	r3, [r3, #8]
 8004632:	4a5d      	ldr	r2, [pc, #372]	@ (80047a8 <HAL_RCC_ClockConfig+0x1fc>)
 8004634:	4013      	ands	r3, r2
 8004636:	0019      	movs	r1, r3
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	689a      	ldr	r2, [r3, #8]
 800463c:	4b59      	ldr	r3, [pc, #356]	@ (80047a4 <HAL_RCC_ClockConfig+0x1f8>)
 800463e:	430a      	orrs	r2, r1
 8004640:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	2201      	movs	r2, #1
 8004648:	4013      	ands	r3, r2
 800464a:	d057      	beq.n	80046fc <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	2b01      	cmp	r3, #1
 8004652:	d107      	bne.n	8004664 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004654:	4b53      	ldr	r3, [pc, #332]	@ (80047a4 <HAL_RCC_ClockConfig+0x1f8>)
 8004656:	681a      	ldr	r2, [r3, #0]
 8004658:	2380      	movs	r3, #128	@ 0x80
 800465a:	029b      	lsls	r3, r3, #10
 800465c:	4013      	ands	r3, r2
 800465e:	d12b      	bne.n	80046b8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004660:	2301      	movs	r3, #1
 8004662:	e097      	b.n	8004794 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	685b      	ldr	r3, [r3, #4]
 8004668:	2b02      	cmp	r3, #2
 800466a:	d107      	bne.n	800467c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800466c:	4b4d      	ldr	r3, [pc, #308]	@ (80047a4 <HAL_RCC_ClockConfig+0x1f8>)
 800466e:	681a      	ldr	r2, [r3, #0]
 8004670:	2380      	movs	r3, #128	@ 0x80
 8004672:	049b      	lsls	r3, r3, #18
 8004674:	4013      	ands	r3, r2
 8004676:	d11f      	bne.n	80046b8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004678:	2301      	movs	r3, #1
 800467a:	e08b      	b.n	8004794 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d107      	bne.n	8004694 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004684:	4b47      	ldr	r3, [pc, #284]	@ (80047a4 <HAL_RCC_ClockConfig+0x1f8>)
 8004686:	681a      	ldr	r2, [r3, #0]
 8004688:	2380      	movs	r3, #128	@ 0x80
 800468a:	00db      	lsls	r3, r3, #3
 800468c:	4013      	ands	r3, r2
 800468e:	d113      	bne.n	80046b8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004690:	2301      	movs	r3, #1
 8004692:	e07f      	b.n	8004794 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	685b      	ldr	r3, [r3, #4]
 8004698:	2b03      	cmp	r3, #3
 800469a:	d106      	bne.n	80046aa <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800469c:	4b41      	ldr	r3, [pc, #260]	@ (80047a4 <HAL_RCC_ClockConfig+0x1f8>)
 800469e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046a0:	2202      	movs	r2, #2
 80046a2:	4013      	ands	r3, r2
 80046a4:	d108      	bne.n	80046b8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80046a6:	2301      	movs	r3, #1
 80046a8:	e074      	b.n	8004794 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80046aa:	4b3e      	ldr	r3, [pc, #248]	@ (80047a4 <HAL_RCC_ClockConfig+0x1f8>)
 80046ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046ae:	2202      	movs	r2, #2
 80046b0:	4013      	ands	r3, r2
 80046b2:	d101      	bne.n	80046b8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80046b4:	2301      	movs	r3, #1
 80046b6:	e06d      	b.n	8004794 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80046b8:	4b3a      	ldr	r3, [pc, #232]	@ (80047a4 <HAL_RCC_ClockConfig+0x1f8>)
 80046ba:	689b      	ldr	r3, [r3, #8]
 80046bc:	2207      	movs	r2, #7
 80046be:	4393      	bics	r3, r2
 80046c0:	0019      	movs	r1, r3
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	685a      	ldr	r2, [r3, #4]
 80046c6:	4b37      	ldr	r3, [pc, #220]	@ (80047a4 <HAL_RCC_ClockConfig+0x1f8>)
 80046c8:	430a      	orrs	r2, r1
 80046ca:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046cc:	f7fe fa06 	bl	8002adc <HAL_GetTick>
 80046d0:	0003      	movs	r3, r0
 80046d2:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046d4:	e009      	b.n	80046ea <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046d6:	f7fe fa01 	bl	8002adc <HAL_GetTick>
 80046da:	0002      	movs	r2, r0
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	1ad3      	subs	r3, r2, r3
 80046e0:	4a2f      	ldr	r2, [pc, #188]	@ (80047a0 <HAL_RCC_ClockConfig+0x1f4>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d901      	bls.n	80046ea <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80046e6:	2303      	movs	r3, #3
 80046e8:	e054      	b.n	8004794 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046ea:	4b2e      	ldr	r3, [pc, #184]	@ (80047a4 <HAL_RCC_ClockConfig+0x1f8>)
 80046ec:	689b      	ldr	r3, [r3, #8]
 80046ee:	2238      	movs	r2, #56	@ 0x38
 80046f0:	401a      	ands	r2, r3
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	00db      	lsls	r3, r3, #3
 80046f8:	429a      	cmp	r2, r3
 80046fa:	d1ec      	bne.n	80046d6 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80046fc:	4b27      	ldr	r3, [pc, #156]	@ (800479c <HAL_RCC_ClockConfig+0x1f0>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	2207      	movs	r2, #7
 8004702:	4013      	ands	r3, r2
 8004704:	683a      	ldr	r2, [r7, #0]
 8004706:	429a      	cmp	r2, r3
 8004708:	d21e      	bcs.n	8004748 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800470a:	4b24      	ldr	r3, [pc, #144]	@ (800479c <HAL_RCC_ClockConfig+0x1f0>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	2207      	movs	r2, #7
 8004710:	4393      	bics	r3, r2
 8004712:	0019      	movs	r1, r3
 8004714:	4b21      	ldr	r3, [pc, #132]	@ (800479c <HAL_RCC_ClockConfig+0x1f0>)
 8004716:	683a      	ldr	r2, [r7, #0]
 8004718:	430a      	orrs	r2, r1
 800471a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800471c:	f7fe f9de 	bl	8002adc <HAL_GetTick>
 8004720:	0003      	movs	r3, r0
 8004722:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004724:	e009      	b.n	800473a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004726:	f7fe f9d9 	bl	8002adc <HAL_GetTick>
 800472a:	0002      	movs	r2, r0
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	1ad3      	subs	r3, r2, r3
 8004730:	4a1b      	ldr	r2, [pc, #108]	@ (80047a0 <HAL_RCC_ClockConfig+0x1f4>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d901      	bls.n	800473a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8004736:	2303      	movs	r3, #3
 8004738:	e02c      	b.n	8004794 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800473a:	4b18      	ldr	r3, [pc, #96]	@ (800479c <HAL_RCC_ClockConfig+0x1f0>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	2207      	movs	r2, #7
 8004740:	4013      	ands	r3, r2
 8004742:	683a      	ldr	r2, [r7, #0]
 8004744:	429a      	cmp	r2, r3
 8004746:	d1ee      	bne.n	8004726 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	2204      	movs	r2, #4
 800474e:	4013      	ands	r3, r2
 8004750:	d009      	beq.n	8004766 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004752:	4b14      	ldr	r3, [pc, #80]	@ (80047a4 <HAL_RCC_ClockConfig+0x1f8>)
 8004754:	689b      	ldr	r3, [r3, #8]
 8004756:	4a15      	ldr	r2, [pc, #84]	@ (80047ac <HAL_RCC_ClockConfig+0x200>)
 8004758:	4013      	ands	r3, r2
 800475a:	0019      	movs	r1, r3
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	68da      	ldr	r2, [r3, #12]
 8004760:	4b10      	ldr	r3, [pc, #64]	@ (80047a4 <HAL_RCC_ClockConfig+0x1f8>)
 8004762:	430a      	orrs	r2, r1
 8004764:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8004766:	f000 f829 	bl	80047bc <HAL_RCC_GetSysClockFreq>
 800476a:	0001      	movs	r1, r0
 800476c:	4b0d      	ldr	r3, [pc, #52]	@ (80047a4 <HAL_RCC_ClockConfig+0x1f8>)
 800476e:	689b      	ldr	r3, [r3, #8]
 8004770:	0a1b      	lsrs	r3, r3, #8
 8004772:	220f      	movs	r2, #15
 8004774:	401a      	ands	r2, r3
 8004776:	4b0e      	ldr	r3, [pc, #56]	@ (80047b0 <HAL_RCC_ClockConfig+0x204>)
 8004778:	0092      	lsls	r2, r2, #2
 800477a:	58d3      	ldr	r3, [r2, r3]
 800477c:	221f      	movs	r2, #31
 800477e:	4013      	ands	r3, r2
 8004780:	000a      	movs	r2, r1
 8004782:	40da      	lsrs	r2, r3
 8004784:	4b0b      	ldr	r3, [pc, #44]	@ (80047b4 <HAL_RCC_ClockConfig+0x208>)
 8004786:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004788:	4b0b      	ldr	r3, [pc, #44]	@ (80047b8 <HAL_RCC_ClockConfig+0x20c>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	0018      	movs	r0, r3
 800478e:	f7fe f949 	bl	8002a24 <HAL_InitTick>
 8004792:	0003      	movs	r3, r0
}
 8004794:	0018      	movs	r0, r3
 8004796:	46bd      	mov	sp, r7
 8004798:	b004      	add	sp, #16
 800479a:	bd80      	pop	{r7, pc}
 800479c:	40022000 	.word	0x40022000
 80047a0:	00001388 	.word	0x00001388
 80047a4:	40021000 	.word	0x40021000
 80047a8:	fffff0ff 	.word	0xfffff0ff
 80047ac:	ffff8fff 	.word	0xffff8fff
 80047b0:	0800a118 	.word	0x0800a118
 80047b4:	200000f0 	.word	0x200000f0
 80047b8:	200000f4 	.word	0x200000f4

080047bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b086      	sub	sp, #24
 80047c0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80047c2:	4b3c      	ldr	r3, [pc, #240]	@ (80048b4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80047c4:	689b      	ldr	r3, [r3, #8]
 80047c6:	2238      	movs	r2, #56	@ 0x38
 80047c8:	4013      	ands	r3, r2
 80047ca:	d10f      	bne.n	80047ec <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80047cc:	4b39      	ldr	r3, [pc, #228]	@ (80048b4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	0adb      	lsrs	r3, r3, #11
 80047d2:	2207      	movs	r2, #7
 80047d4:	4013      	ands	r3, r2
 80047d6:	2201      	movs	r2, #1
 80047d8:	409a      	lsls	r2, r3
 80047da:	0013      	movs	r3, r2
 80047dc:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80047de:	6839      	ldr	r1, [r7, #0]
 80047e0:	4835      	ldr	r0, [pc, #212]	@ (80048b8 <HAL_RCC_GetSysClockFreq+0xfc>)
 80047e2:	f7fb fce9 	bl	80001b8 <__udivsi3>
 80047e6:	0003      	movs	r3, r0
 80047e8:	613b      	str	r3, [r7, #16]
 80047ea:	e05d      	b.n	80048a8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80047ec:	4b31      	ldr	r3, [pc, #196]	@ (80048b4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80047ee:	689b      	ldr	r3, [r3, #8]
 80047f0:	2238      	movs	r2, #56	@ 0x38
 80047f2:	4013      	ands	r3, r2
 80047f4:	2b08      	cmp	r3, #8
 80047f6:	d102      	bne.n	80047fe <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80047f8:	4b30      	ldr	r3, [pc, #192]	@ (80048bc <HAL_RCC_GetSysClockFreq+0x100>)
 80047fa:	613b      	str	r3, [r7, #16]
 80047fc:	e054      	b.n	80048a8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80047fe:	4b2d      	ldr	r3, [pc, #180]	@ (80048b4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004800:	689b      	ldr	r3, [r3, #8]
 8004802:	2238      	movs	r2, #56	@ 0x38
 8004804:	4013      	ands	r3, r2
 8004806:	2b10      	cmp	r3, #16
 8004808:	d138      	bne.n	800487c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800480a:	4b2a      	ldr	r3, [pc, #168]	@ (80048b4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800480c:	68db      	ldr	r3, [r3, #12]
 800480e:	2203      	movs	r2, #3
 8004810:	4013      	ands	r3, r2
 8004812:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004814:	4b27      	ldr	r3, [pc, #156]	@ (80048b4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004816:	68db      	ldr	r3, [r3, #12]
 8004818:	091b      	lsrs	r3, r3, #4
 800481a:	2207      	movs	r2, #7
 800481c:	4013      	ands	r3, r2
 800481e:	3301      	adds	r3, #1
 8004820:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	2b03      	cmp	r3, #3
 8004826:	d10d      	bne.n	8004844 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004828:	68b9      	ldr	r1, [r7, #8]
 800482a:	4824      	ldr	r0, [pc, #144]	@ (80048bc <HAL_RCC_GetSysClockFreq+0x100>)
 800482c:	f7fb fcc4 	bl	80001b8 <__udivsi3>
 8004830:	0003      	movs	r3, r0
 8004832:	0019      	movs	r1, r3
 8004834:	4b1f      	ldr	r3, [pc, #124]	@ (80048b4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004836:	68db      	ldr	r3, [r3, #12]
 8004838:	0a1b      	lsrs	r3, r3, #8
 800483a:	227f      	movs	r2, #127	@ 0x7f
 800483c:	4013      	ands	r3, r2
 800483e:	434b      	muls	r3, r1
 8004840:	617b      	str	r3, [r7, #20]
        break;
 8004842:	e00d      	b.n	8004860 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8004844:	68b9      	ldr	r1, [r7, #8]
 8004846:	481c      	ldr	r0, [pc, #112]	@ (80048b8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004848:	f7fb fcb6 	bl	80001b8 <__udivsi3>
 800484c:	0003      	movs	r3, r0
 800484e:	0019      	movs	r1, r3
 8004850:	4b18      	ldr	r3, [pc, #96]	@ (80048b4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004852:	68db      	ldr	r3, [r3, #12]
 8004854:	0a1b      	lsrs	r3, r3, #8
 8004856:	227f      	movs	r2, #127	@ 0x7f
 8004858:	4013      	ands	r3, r2
 800485a:	434b      	muls	r3, r1
 800485c:	617b      	str	r3, [r7, #20]
        break;
 800485e:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8004860:	4b14      	ldr	r3, [pc, #80]	@ (80048b4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004862:	68db      	ldr	r3, [r3, #12]
 8004864:	0f5b      	lsrs	r3, r3, #29
 8004866:	2207      	movs	r2, #7
 8004868:	4013      	ands	r3, r2
 800486a:	3301      	adds	r3, #1
 800486c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800486e:	6879      	ldr	r1, [r7, #4]
 8004870:	6978      	ldr	r0, [r7, #20]
 8004872:	f7fb fca1 	bl	80001b8 <__udivsi3>
 8004876:	0003      	movs	r3, r0
 8004878:	613b      	str	r3, [r7, #16]
 800487a:	e015      	b.n	80048a8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800487c:	4b0d      	ldr	r3, [pc, #52]	@ (80048b4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800487e:	689b      	ldr	r3, [r3, #8]
 8004880:	2238      	movs	r2, #56	@ 0x38
 8004882:	4013      	ands	r3, r2
 8004884:	2b20      	cmp	r3, #32
 8004886:	d103      	bne.n	8004890 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8004888:	2380      	movs	r3, #128	@ 0x80
 800488a:	021b      	lsls	r3, r3, #8
 800488c:	613b      	str	r3, [r7, #16]
 800488e:	e00b      	b.n	80048a8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004890:	4b08      	ldr	r3, [pc, #32]	@ (80048b4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004892:	689b      	ldr	r3, [r3, #8]
 8004894:	2238      	movs	r2, #56	@ 0x38
 8004896:	4013      	ands	r3, r2
 8004898:	2b18      	cmp	r3, #24
 800489a:	d103      	bne.n	80048a4 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800489c:	23fa      	movs	r3, #250	@ 0xfa
 800489e:	01db      	lsls	r3, r3, #7
 80048a0:	613b      	str	r3, [r7, #16]
 80048a2:	e001      	b.n	80048a8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80048a4:	2300      	movs	r3, #0
 80048a6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80048a8:	693b      	ldr	r3, [r7, #16]
}
 80048aa:	0018      	movs	r0, r3
 80048ac:	46bd      	mov	sp, r7
 80048ae:	b006      	add	sp, #24
 80048b0:	bd80      	pop	{r7, pc}
 80048b2:	46c0      	nop			@ (mov r8, r8)
 80048b4:	40021000 	.word	0x40021000
 80048b8:	00f42400 	.word	0x00f42400
 80048bc:	007a1200 	.word	0x007a1200

080048c0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80048c4:	4b02      	ldr	r3, [pc, #8]	@ (80048d0 <HAL_RCC_GetHCLKFreq+0x10>)
 80048c6:	681b      	ldr	r3, [r3, #0]
}
 80048c8:	0018      	movs	r0, r3
 80048ca:	46bd      	mov	sp, r7
 80048cc:	bd80      	pop	{r7, pc}
 80048ce:	46c0      	nop			@ (mov r8, r8)
 80048d0:	200000f0 	.word	0x200000f0

080048d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80048d4:	b5b0      	push	{r4, r5, r7, lr}
 80048d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80048d8:	f7ff fff2 	bl	80048c0 <HAL_RCC_GetHCLKFreq>
 80048dc:	0004      	movs	r4, r0
 80048de:	f7ff fb49 	bl	8003f74 <LL_RCC_GetAPB1Prescaler>
 80048e2:	0003      	movs	r3, r0
 80048e4:	0b1a      	lsrs	r2, r3, #12
 80048e6:	4b05      	ldr	r3, [pc, #20]	@ (80048fc <HAL_RCC_GetPCLK1Freq+0x28>)
 80048e8:	0092      	lsls	r2, r2, #2
 80048ea:	58d3      	ldr	r3, [r2, r3]
 80048ec:	221f      	movs	r2, #31
 80048ee:	4013      	ands	r3, r2
 80048f0:	40dc      	lsrs	r4, r3
 80048f2:	0023      	movs	r3, r4
}
 80048f4:	0018      	movs	r0, r3
 80048f6:	46bd      	mov	sp, r7
 80048f8:	bdb0      	pop	{r4, r5, r7, pc}
 80048fa:	46c0      	nop			@ (mov r8, r8)
 80048fc:	0800a158 	.word	0x0800a158

08004900 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b086      	sub	sp, #24
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8004908:	2313      	movs	r3, #19
 800490a:	18fb      	adds	r3, r7, r3
 800490c:	2200      	movs	r2, #0
 800490e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004910:	2312      	movs	r3, #18
 8004912:	18fb      	adds	r3, r7, r3
 8004914:	2200      	movs	r2, #0
 8004916:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681a      	ldr	r2, [r3, #0]
 800491c:	2380      	movs	r3, #128	@ 0x80
 800491e:	029b      	lsls	r3, r3, #10
 8004920:	4013      	ands	r3, r2
 8004922:	d100      	bne.n	8004926 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8004924:	e0a3      	b.n	8004a6e <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004926:	2011      	movs	r0, #17
 8004928:	183b      	adds	r3, r7, r0
 800492a:	2200      	movs	r2, #0
 800492c:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800492e:	4b86      	ldr	r3, [pc, #536]	@ (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004930:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004932:	2380      	movs	r3, #128	@ 0x80
 8004934:	055b      	lsls	r3, r3, #21
 8004936:	4013      	ands	r3, r2
 8004938:	d110      	bne.n	800495c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800493a:	4b83      	ldr	r3, [pc, #524]	@ (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800493c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800493e:	4b82      	ldr	r3, [pc, #520]	@ (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004940:	2180      	movs	r1, #128	@ 0x80
 8004942:	0549      	lsls	r1, r1, #21
 8004944:	430a      	orrs	r2, r1
 8004946:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004948:	4b7f      	ldr	r3, [pc, #508]	@ (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800494a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800494c:	2380      	movs	r3, #128	@ 0x80
 800494e:	055b      	lsls	r3, r3, #21
 8004950:	4013      	ands	r3, r2
 8004952:	60bb      	str	r3, [r7, #8]
 8004954:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004956:	183b      	adds	r3, r7, r0
 8004958:	2201      	movs	r2, #1
 800495a:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800495c:	4b7b      	ldr	r3, [pc, #492]	@ (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800495e:	681a      	ldr	r2, [r3, #0]
 8004960:	4b7a      	ldr	r3, [pc, #488]	@ (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8004962:	2180      	movs	r1, #128	@ 0x80
 8004964:	0049      	lsls	r1, r1, #1
 8004966:	430a      	orrs	r2, r1
 8004968:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800496a:	f7fe f8b7 	bl	8002adc <HAL_GetTick>
 800496e:	0003      	movs	r3, r0
 8004970:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004972:	e00b      	b.n	800498c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004974:	f7fe f8b2 	bl	8002adc <HAL_GetTick>
 8004978:	0002      	movs	r2, r0
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	1ad3      	subs	r3, r2, r3
 800497e:	2b02      	cmp	r3, #2
 8004980:	d904      	bls.n	800498c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8004982:	2313      	movs	r3, #19
 8004984:	18fb      	adds	r3, r7, r3
 8004986:	2203      	movs	r2, #3
 8004988:	701a      	strb	r2, [r3, #0]
        break;
 800498a:	e005      	b.n	8004998 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800498c:	4b6f      	ldr	r3, [pc, #444]	@ (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800498e:	681a      	ldr	r2, [r3, #0]
 8004990:	2380      	movs	r3, #128	@ 0x80
 8004992:	005b      	lsls	r3, r3, #1
 8004994:	4013      	ands	r3, r2
 8004996:	d0ed      	beq.n	8004974 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8004998:	2313      	movs	r3, #19
 800499a:	18fb      	adds	r3, r7, r3
 800499c:	781b      	ldrb	r3, [r3, #0]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d154      	bne.n	8004a4c <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80049a2:	4b69      	ldr	r3, [pc, #420]	@ (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80049a4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80049a6:	23c0      	movs	r3, #192	@ 0xc0
 80049a8:	009b      	lsls	r3, r3, #2
 80049aa:	4013      	ands	r3, r2
 80049ac:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80049ae:	697b      	ldr	r3, [r7, #20]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d019      	beq.n	80049e8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	699b      	ldr	r3, [r3, #24]
 80049b8:	697a      	ldr	r2, [r7, #20]
 80049ba:	429a      	cmp	r2, r3
 80049bc:	d014      	beq.n	80049e8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80049be:	4b62      	ldr	r3, [pc, #392]	@ (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80049c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049c2:	4a63      	ldr	r2, [pc, #396]	@ (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80049c4:	4013      	ands	r3, r2
 80049c6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80049c8:	4b5f      	ldr	r3, [pc, #380]	@ (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80049ca:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80049cc:	4b5e      	ldr	r3, [pc, #376]	@ (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80049ce:	2180      	movs	r1, #128	@ 0x80
 80049d0:	0249      	lsls	r1, r1, #9
 80049d2:	430a      	orrs	r2, r1
 80049d4:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80049d6:	4b5c      	ldr	r3, [pc, #368]	@ (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80049d8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80049da:	4b5b      	ldr	r3, [pc, #364]	@ (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80049dc:	495d      	ldr	r1, [pc, #372]	@ (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80049de:	400a      	ands	r2, r1
 80049e0:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80049e2:	4b59      	ldr	r3, [pc, #356]	@ (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80049e4:	697a      	ldr	r2, [r7, #20]
 80049e6:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80049e8:	697b      	ldr	r3, [r7, #20]
 80049ea:	2201      	movs	r2, #1
 80049ec:	4013      	ands	r3, r2
 80049ee:	d016      	beq.n	8004a1e <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049f0:	f7fe f874 	bl	8002adc <HAL_GetTick>
 80049f4:	0003      	movs	r3, r0
 80049f6:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80049f8:	e00c      	b.n	8004a14 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049fa:	f7fe f86f 	bl	8002adc <HAL_GetTick>
 80049fe:	0002      	movs	r2, r0
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	1ad3      	subs	r3, r2, r3
 8004a04:	4a54      	ldr	r2, [pc, #336]	@ (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d904      	bls.n	8004a14 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8004a0a:	2313      	movs	r3, #19
 8004a0c:	18fb      	adds	r3, r7, r3
 8004a0e:	2203      	movs	r2, #3
 8004a10:	701a      	strb	r2, [r3, #0]
            break;
 8004a12:	e004      	b.n	8004a1e <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a14:	4b4c      	ldr	r3, [pc, #304]	@ (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004a16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a18:	2202      	movs	r2, #2
 8004a1a:	4013      	ands	r3, r2
 8004a1c:	d0ed      	beq.n	80049fa <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8004a1e:	2313      	movs	r3, #19
 8004a20:	18fb      	adds	r3, r7, r3
 8004a22:	781b      	ldrb	r3, [r3, #0]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d10a      	bne.n	8004a3e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004a28:	4b47      	ldr	r3, [pc, #284]	@ (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004a2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a2c:	4a48      	ldr	r2, [pc, #288]	@ (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8004a2e:	4013      	ands	r3, r2
 8004a30:	0019      	movs	r1, r3
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	699a      	ldr	r2, [r3, #24]
 8004a36:	4b44      	ldr	r3, [pc, #272]	@ (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004a38:	430a      	orrs	r2, r1
 8004a3a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004a3c:	e00c      	b.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004a3e:	2312      	movs	r3, #18
 8004a40:	18fb      	adds	r3, r7, r3
 8004a42:	2213      	movs	r2, #19
 8004a44:	18ba      	adds	r2, r7, r2
 8004a46:	7812      	ldrb	r2, [r2, #0]
 8004a48:	701a      	strb	r2, [r3, #0]
 8004a4a:	e005      	b.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a4c:	2312      	movs	r3, #18
 8004a4e:	18fb      	adds	r3, r7, r3
 8004a50:	2213      	movs	r2, #19
 8004a52:	18ba      	adds	r2, r7, r2
 8004a54:	7812      	ldrb	r2, [r2, #0]
 8004a56:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004a58:	2311      	movs	r3, #17
 8004a5a:	18fb      	adds	r3, r7, r3
 8004a5c:	781b      	ldrb	r3, [r3, #0]
 8004a5e:	2b01      	cmp	r3, #1
 8004a60:	d105      	bne.n	8004a6e <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a62:	4b39      	ldr	r3, [pc, #228]	@ (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004a64:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004a66:	4b38      	ldr	r3, [pc, #224]	@ (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004a68:	493c      	ldr	r1, [pc, #240]	@ (8004b5c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8004a6a:	400a      	ands	r2, r1
 8004a6c:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	2201      	movs	r2, #1
 8004a74:	4013      	ands	r3, r2
 8004a76:	d009      	beq.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004a78:	4b33      	ldr	r3, [pc, #204]	@ (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004a7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a7c:	2203      	movs	r2, #3
 8004a7e:	4393      	bics	r3, r2
 8004a80:	0019      	movs	r1, r3
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	685a      	ldr	r2, [r3, #4]
 8004a86:	4b30      	ldr	r3, [pc, #192]	@ (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004a88:	430a      	orrs	r2, r1
 8004a8a:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	2202      	movs	r2, #2
 8004a92:	4013      	ands	r3, r2
 8004a94:	d009      	beq.n	8004aaa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004a96:	4b2c      	ldr	r3, [pc, #176]	@ (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004a98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a9a:	220c      	movs	r2, #12
 8004a9c:	4393      	bics	r3, r2
 8004a9e:	0019      	movs	r1, r3
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	689a      	ldr	r2, [r3, #8]
 8004aa4:	4b28      	ldr	r3, [pc, #160]	@ (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004aa6:	430a      	orrs	r2, r1
 8004aa8:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	2220      	movs	r2, #32
 8004ab0:	4013      	ands	r3, r2
 8004ab2:	d009      	beq.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004ab4:	4b24      	ldr	r3, [pc, #144]	@ (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004ab6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ab8:	4a29      	ldr	r2, [pc, #164]	@ (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004aba:	4013      	ands	r3, r2
 8004abc:	0019      	movs	r1, r3
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	68da      	ldr	r2, [r3, #12]
 8004ac2:	4b21      	ldr	r3, [pc, #132]	@ (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004ac4:	430a      	orrs	r2, r1
 8004ac6:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681a      	ldr	r2, [r3, #0]
 8004acc:	2380      	movs	r3, #128	@ 0x80
 8004ace:	01db      	lsls	r3, r3, #7
 8004ad0:	4013      	ands	r3, r2
 8004ad2:	d015      	beq.n	8004b00 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004ad4:	4b1c      	ldr	r3, [pc, #112]	@ (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004ad6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ad8:	009b      	lsls	r3, r3, #2
 8004ada:	0899      	lsrs	r1, r3, #2
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	695a      	ldr	r2, [r3, #20]
 8004ae0:	4b19      	ldr	r3, [pc, #100]	@ (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004ae2:	430a      	orrs	r2, r1
 8004ae4:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	695a      	ldr	r2, [r3, #20]
 8004aea:	2380      	movs	r3, #128	@ 0x80
 8004aec:	05db      	lsls	r3, r3, #23
 8004aee:	429a      	cmp	r2, r3
 8004af0:	d106      	bne.n	8004b00 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004af2:	4b15      	ldr	r3, [pc, #84]	@ (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004af4:	68da      	ldr	r2, [r3, #12]
 8004af6:	4b14      	ldr	r3, [pc, #80]	@ (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004af8:	2180      	movs	r1, #128	@ 0x80
 8004afa:	0249      	lsls	r1, r1, #9
 8004afc:	430a      	orrs	r2, r1
 8004afe:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681a      	ldr	r2, [r3, #0]
 8004b04:	2380      	movs	r3, #128	@ 0x80
 8004b06:	011b      	lsls	r3, r3, #4
 8004b08:	4013      	ands	r3, r2
 8004b0a:	d016      	beq.n	8004b3a <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8004b0c:	4b0e      	ldr	r3, [pc, #56]	@ (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004b0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b10:	4a14      	ldr	r2, [pc, #80]	@ (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004b12:	4013      	ands	r3, r2
 8004b14:	0019      	movs	r1, r3
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	691a      	ldr	r2, [r3, #16]
 8004b1a:	4b0b      	ldr	r3, [pc, #44]	@ (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004b1c:	430a      	orrs	r2, r1
 8004b1e:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	691a      	ldr	r2, [r3, #16]
 8004b24:	2380      	movs	r3, #128	@ 0x80
 8004b26:	01db      	lsls	r3, r3, #7
 8004b28:	429a      	cmp	r2, r3
 8004b2a:	d106      	bne.n	8004b3a <HAL_RCCEx_PeriphCLKConfig+0x23a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004b2c:	4b06      	ldr	r3, [pc, #24]	@ (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004b2e:	68da      	ldr	r2, [r3, #12]
 8004b30:	4b05      	ldr	r3, [pc, #20]	@ (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004b32:	2180      	movs	r1, #128	@ 0x80
 8004b34:	0249      	lsls	r1, r1, #9
 8004b36:	430a      	orrs	r2, r1
 8004b38:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8004b3a:	2312      	movs	r3, #18
 8004b3c:	18fb      	adds	r3, r7, r3
 8004b3e:	781b      	ldrb	r3, [r3, #0]
}
 8004b40:	0018      	movs	r0, r3
 8004b42:	46bd      	mov	sp, r7
 8004b44:	b006      	add	sp, #24
 8004b46:	bd80      	pop	{r7, pc}
 8004b48:	40021000 	.word	0x40021000
 8004b4c:	40007000 	.word	0x40007000
 8004b50:	fffffcff 	.word	0xfffffcff
 8004b54:	fffeffff 	.word	0xfffeffff
 8004b58:	00001388 	.word	0x00001388
 8004b5c:	efffffff 	.word	0xefffffff
 8004b60:	ffffcfff 	.word	0xffffcfff
 8004b64:	ffff3fff 	.word	0xffff3fff

08004b68 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b082      	sub	sp, #8
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d101      	bne.n	8004b7a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004b76:	2301      	movs	r3, #1
 8004b78:	e04a      	b.n	8004c10 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	223d      	movs	r2, #61	@ 0x3d
 8004b7e:	5c9b      	ldrb	r3, [r3, r2]
 8004b80:	b2db      	uxtb	r3, r3
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d107      	bne.n	8004b96 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	223c      	movs	r2, #60	@ 0x3c
 8004b8a:	2100      	movs	r1, #0
 8004b8c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	0018      	movs	r0, r3
 8004b92:	f7fd fd37 	bl	8002604 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	223d      	movs	r2, #61	@ 0x3d
 8004b9a:	2102      	movs	r1, #2
 8004b9c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681a      	ldr	r2, [r3, #0]
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	3304      	adds	r3, #4
 8004ba6:	0019      	movs	r1, r3
 8004ba8:	0010      	movs	r0, r2
 8004baa:	f000 fa6b 	bl	8005084 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2248      	movs	r2, #72	@ 0x48
 8004bb2:	2101      	movs	r1, #1
 8004bb4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	223e      	movs	r2, #62	@ 0x3e
 8004bba:	2101      	movs	r1, #1
 8004bbc:	5499      	strb	r1, [r3, r2]
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	223f      	movs	r2, #63	@ 0x3f
 8004bc2:	2101      	movs	r1, #1
 8004bc4:	5499      	strb	r1, [r3, r2]
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2240      	movs	r2, #64	@ 0x40
 8004bca:	2101      	movs	r1, #1
 8004bcc:	5499      	strb	r1, [r3, r2]
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2241      	movs	r2, #65	@ 0x41
 8004bd2:	2101      	movs	r1, #1
 8004bd4:	5499      	strb	r1, [r3, r2]
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2242      	movs	r2, #66	@ 0x42
 8004bda:	2101      	movs	r1, #1
 8004bdc:	5499      	strb	r1, [r3, r2]
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2243      	movs	r2, #67	@ 0x43
 8004be2:	2101      	movs	r1, #1
 8004be4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2244      	movs	r2, #68	@ 0x44
 8004bea:	2101      	movs	r1, #1
 8004bec:	5499      	strb	r1, [r3, r2]
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2245      	movs	r2, #69	@ 0x45
 8004bf2:	2101      	movs	r1, #1
 8004bf4:	5499      	strb	r1, [r3, r2]
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2246      	movs	r2, #70	@ 0x46
 8004bfa:	2101      	movs	r1, #1
 8004bfc:	5499      	strb	r1, [r3, r2]
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2247      	movs	r2, #71	@ 0x47
 8004c02:	2101      	movs	r1, #1
 8004c04:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	223d      	movs	r2, #61	@ 0x3d
 8004c0a:	2101      	movs	r1, #1
 8004c0c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004c0e:	2300      	movs	r3, #0
}
 8004c10:	0018      	movs	r0, r3
 8004c12:	46bd      	mov	sp, r7
 8004c14:	b002      	add	sp, #8
 8004c16:	bd80      	pop	{r7, pc}

08004c18 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b082      	sub	sp, #8
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d101      	bne.n	8004c2a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004c26:	2301      	movs	r3, #1
 8004c28:	e04a      	b.n	8004cc0 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	223d      	movs	r2, #61	@ 0x3d
 8004c2e:	5c9b      	ldrb	r3, [r3, r2]
 8004c30:	b2db      	uxtb	r3, r3
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d107      	bne.n	8004c46 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	223c      	movs	r2, #60	@ 0x3c
 8004c3a:	2100      	movs	r1, #0
 8004c3c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	0018      	movs	r0, r3
 8004c42:	f000 f841 	bl	8004cc8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	223d      	movs	r2, #61	@ 0x3d
 8004c4a:	2102      	movs	r1, #2
 8004c4c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681a      	ldr	r2, [r3, #0]
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	3304      	adds	r3, #4
 8004c56:	0019      	movs	r1, r3
 8004c58:	0010      	movs	r0, r2
 8004c5a:	f000 fa13 	bl	8005084 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2248      	movs	r2, #72	@ 0x48
 8004c62:	2101      	movs	r1, #1
 8004c64:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	223e      	movs	r2, #62	@ 0x3e
 8004c6a:	2101      	movs	r1, #1
 8004c6c:	5499      	strb	r1, [r3, r2]
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	223f      	movs	r2, #63	@ 0x3f
 8004c72:	2101      	movs	r1, #1
 8004c74:	5499      	strb	r1, [r3, r2]
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2240      	movs	r2, #64	@ 0x40
 8004c7a:	2101      	movs	r1, #1
 8004c7c:	5499      	strb	r1, [r3, r2]
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2241      	movs	r2, #65	@ 0x41
 8004c82:	2101      	movs	r1, #1
 8004c84:	5499      	strb	r1, [r3, r2]
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2242      	movs	r2, #66	@ 0x42
 8004c8a:	2101      	movs	r1, #1
 8004c8c:	5499      	strb	r1, [r3, r2]
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2243      	movs	r2, #67	@ 0x43
 8004c92:	2101      	movs	r1, #1
 8004c94:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2244      	movs	r2, #68	@ 0x44
 8004c9a:	2101      	movs	r1, #1
 8004c9c:	5499      	strb	r1, [r3, r2]
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2245      	movs	r2, #69	@ 0x45
 8004ca2:	2101      	movs	r1, #1
 8004ca4:	5499      	strb	r1, [r3, r2]
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2246      	movs	r2, #70	@ 0x46
 8004caa:	2101      	movs	r1, #1
 8004cac:	5499      	strb	r1, [r3, r2]
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2247      	movs	r2, #71	@ 0x47
 8004cb2:	2101      	movs	r1, #1
 8004cb4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	223d      	movs	r2, #61	@ 0x3d
 8004cba:	2101      	movs	r1, #1
 8004cbc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004cbe:	2300      	movs	r3, #0
}
 8004cc0:	0018      	movs	r0, r3
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	b002      	add	sp, #8
 8004cc6:	bd80      	pop	{r7, pc}

08004cc8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b082      	sub	sp, #8
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004cd0:	46c0      	nop			@ (mov r8, r8)
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	b002      	add	sp, #8
 8004cd6:	bd80      	pop	{r7, pc}

08004cd8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b086      	sub	sp, #24
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	60f8      	str	r0, [r7, #12]
 8004ce0:	60b9      	str	r1, [r7, #8]
 8004ce2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ce4:	2317      	movs	r3, #23
 8004ce6:	18fb      	adds	r3, r7, r3
 8004ce8:	2200      	movs	r2, #0
 8004cea:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	223c      	movs	r2, #60	@ 0x3c
 8004cf0:	5c9b      	ldrb	r3, [r3, r2]
 8004cf2:	2b01      	cmp	r3, #1
 8004cf4:	d101      	bne.n	8004cfa <HAL_TIM_PWM_ConfigChannel+0x22>
 8004cf6:	2302      	movs	r3, #2
 8004cf8:	e0e5      	b.n	8004ec6 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	223c      	movs	r2, #60	@ 0x3c
 8004cfe:	2101      	movs	r1, #1
 8004d00:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2b14      	cmp	r3, #20
 8004d06:	d900      	bls.n	8004d0a <HAL_TIM_PWM_ConfigChannel+0x32>
 8004d08:	e0d1      	b.n	8004eae <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	009a      	lsls	r2, r3, #2
 8004d0e:	4b70      	ldr	r3, [pc, #448]	@ (8004ed0 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8004d10:	18d3      	adds	r3, r2, r3
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	68ba      	ldr	r2, [r7, #8]
 8004d1c:	0011      	movs	r1, r2
 8004d1e:	0018      	movs	r0, r3
 8004d20:	f000 fa34 	bl	800518c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	699a      	ldr	r2, [r3, #24]
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	2108      	movs	r1, #8
 8004d30:	430a      	orrs	r2, r1
 8004d32:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	699a      	ldr	r2, [r3, #24]
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	2104      	movs	r1, #4
 8004d40:	438a      	bics	r2, r1
 8004d42:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	6999      	ldr	r1, [r3, #24]
 8004d4a:	68bb      	ldr	r3, [r7, #8]
 8004d4c:	691a      	ldr	r2, [r3, #16]
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	430a      	orrs	r2, r1
 8004d54:	619a      	str	r2, [r3, #24]
      break;
 8004d56:	e0af      	b.n	8004eb8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	68ba      	ldr	r2, [r7, #8]
 8004d5e:	0011      	movs	r1, r2
 8004d60:	0018      	movs	r0, r3
 8004d62:	f000 fa9d 	bl	80052a0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	699a      	ldr	r2, [r3, #24]
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	2180      	movs	r1, #128	@ 0x80
 8004d72:	0109      	lsls	r1, r1, #4
 8004d74:	430a      	orrs	r2, r1
 8004d76:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	699a      	ldr	r2, [r3, #24]
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	4954      	ldr	r1, [pc, #336]	@ (8004ed4 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8004d84:	400a      	ands	r2, r1
 8004d86:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	6999      	ldr	r1, [r3, #24]
 8004d8e:	68bb      	ldr	r3, [r7, #8]
 8004d90:	691b      	ldr	r3, [r3, #16]
 8004d92:	021a      	lsls	r2, r3, #8
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	430a      	orrs	r2, r1
 8004d9a:	619a      	str	r2, [r3, #24]
      break;
 8004d9c:	e08c      	b.n	8004eb8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	68ba      	ldr	r2, [r7, #8]
 8004da4:	0011      	movs	r1, r2
 8004da6:	0018      	movs	r0, r3
 8004da8:	f000 fafe 	bl	80053a8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	69da      	ldr	r2, [r3, #28]
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	2108      	movs	r1, #8
 8004db8:	430a      	orrs	r2, r1
 8004dba:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	69da      	ldr	r2, [r3, #28]
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	2104      	movs	r1, #4
 8004dc8:	438a      	bics	r2, r1
 8004dca:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	69d9      	ldr	r1, [r3, #28]
 8004dd2:	68bb      	ldr	r3, [r7, #8]
 8004dd4:	691a      	ldr	r2, [r3, #16]
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	430a      	orrs	r2, r1
 8004ddc:	61da      	str	r2, [r3, #28]
      break;
 8004dde:	e06b      	b.n	8004eb8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	68ba      	ldr	r2, [r7, #8]
 8004de6:	0011      	movs	r1, r2
 8004de8:	0018      	movs	r0, r3
 8004dea:	f000 fb65 	bl	80054b8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	69da      	ldr	r2, [r3, #28]
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	2180      	movs	r1, #128	@ 0x80
 8004dfa:	0109      	lsls	r1, r1, #4
 8004dfc:	430a      	orrs	r2, r1
 8004dfe:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	69da      	ldr	r2, [r3, #28]
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4932      	ldr	r1, [pc, #200]	@ (8004ed4 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8004e0c:	400a      	ands	r2, r1
 8004e0e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	69d9      	ldr	r1, [r3, #28]
 8004e16:	68bb      	ldr	r3, [r7, #8]
 8004e18:	691b      	ldr	r3, [r3, #16]
 8004e1a:	021a      	lsls	r2, r3, #8
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	430a      	orrs	r2, r1
 8004e22:	61da      	str	r2, [r3, #28]
      break;
 8004e24:	e048      	b.n	8004eb8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	68ba      	ldr	r2, [r7, #8]
 8004e2c:	0011      	movs	r1, r2
 8004e2e:	0018      	movs	r0, r3
 8004e30:	f000 fbac 	bl	800558c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	2108      	movs	r1, #8
 8004e40:	430a      	orrs	r2, r1
 8004e42:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	2104      	movs	r1, #4
 8004e50:	438a      	bics	r2, r1
 8004e52:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004e5a:	68bb      	ldr	r3, [r7, #8]
 8004e5c:	691a      	ldr	r2, [r3, #16]
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	430a      	orrs	r2, r1
 8004e64:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004e66:	e027      	b.n	8004eb8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	68ba      	ldr	r2, [r7, #8]
 8004e6e:	0011      	movs	r1, r2
 8004e70:	0018      	movs	r0, r3
 8004e72:	f000 fbeb 	bl	800564c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	2180      	movs	r1, #128	@ 0x80
 8004e82:	0109      	lsls	r1, r1, #4
 8004e84:	430a      	orrs	r2, r1
 8004e86:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	4910      	ldr	r1, [pc, #64]	@ (8004ed4 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8004e94:	400a      	ands	r2, r1
 8004e96:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004e9e:	68bb      	ldr	r3, [r7, #8]
 8004ea0:	691b      	ldr	r3, [r3, #16]
 8004ea2:	021a      	lsls	r2, r3, #8
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	430a      	orrs	r2, r1
 8004eaa:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004eac:	e004      	b.n	8004eb8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8004eae:	2317      	movs	r3, #23
 8004eb0:	18fb      	adds	r3, r7, r3
 8004eb2:	2201      	movs	r2, #1
 8004eb4:	701a      	strb	r2, [r3, #0]
      break;
 8004eb6:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	223c      	movs	r2, #60	@ 0x3c
 8004ebc:	2100      	movs	r1, #0
 8004ebe:	5499      	strb	r1, [r3, r2]

  return status;
 8004ec0:	2317      	movs	r3, #23
 8004ec2:	18fb      	adds	r3, r7, r3
 8004ec4:	781b      	ldrb	r3, [r3, #0]
}
 8004ec6:	0018      	movs	r0, r3
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	b006      	add	sp, #24
 8004ecc:	bd80      	pop	{r7, pc}
 8004ece:	46c0      	nop			@ (mov r8, r8)
 8004ed0:	0800a178 	.word	0x0800a178
 8004ed4:	fffffbff 	.word	0xfffffbff

08004ed8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b084      	sub	sp, #16
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
 8004ee0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004ee2:	230f      	movs	r3, #15
 8004ee4:	18fb      	adds	r3, r7, r3
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	223c      	movs	r2, #60	@ 0x3c
 8004eee:	5c9b      	ldrb	r3, [r3, r2]
 8004ef0:	2b01      	cmp	r3, #1
 8004ef2:	d101      	bne.n	8004ef8 <HAL_TIM_ConfigClockSource+0x20>
 8004ef4:	2302      	movs	r3, #2
 8004ef6:	e0bc      	b.n	8005072 <HAL_TIM_ConfigClockSource+0x19a>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	223c      	movs	r2, #60	@ 0x3c
 8004efc:	2101      	movs	r1, #1
 8004efe:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	223d      	movs	r2, #61	@ 0x3d
 8004f04:	2102      	movs	r1, #2
 8004f06:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	689b      	ldr	r3, [r3, #8]
 8004f0e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004f10:	68bb      	ldr	r3, [r7, #8]
 8004f12:	4a5a      	ldr	r2, [pc, #360]	@ (800507c <HAL_TIM_ConfigClockSource+0x1a4>)
 8004f14:	4013      	ands	r3, r2
 8004f16:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f18:	68bb      	ldr	r3, [r7, #8]
 8004f1a:	4a59      	ldr	r2, [pc, #356]	@ (8005080 <HAL_TIM_ConfigClockSource+0x1a8>)
 8004f1c:	4013      	ands	r3, r2
 8004f1e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	68ba      	ldr	r2, [r7, #8]
 8004f26:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	2280      	movs	r2, #128	@ 0x80
 8004f2e:	0192      	lsls	r2, r2, #6
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d040      	beq.n	8004fb6 <HAL_TIM_ConfigClockSource+0xde>
 8004f34:	2280      	movs	r2, #128	@ 0x80
 8004f36:	0192      	lsls	r2, r2, #6
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d900      	bls.n	8004f3e <HAL_TIM_ConfigClockSource+0x66>
 8004f3c:	e088      	b.n	8005050 <HAL_TIM_ConfigClockSource+0x178>
 8004f3e:	2280      	movs	r2, #128	@ 0x80
 8004f40:	0152      	lsls	r2, r2, #5
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d100      	bne.n	8004f48 <HAL_TIM_ConfigClockSource+0x70>
 8004f46:	e088      	b.n	800505a <HAL_TIM_ConfigClockSource+0x182>
 8004f48:	2280      	movs	r2, #128	@ 0x80
 8004f4a:	0152      	lsls	r2, r2, #5
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d900      	bls.n	8004f52 <HAL_TIM_ConfigClockSource+0x7a>
 8004f50:	e07e      	b.n	8005050 <HAL_TIM_ConfigClockSource+0x178>
 8004f52:	2b70      	cmp	r3, #112	@ 0x70
 8004f54:	d018      	beq.n	8004f88 <HAL_TIM_ConfigClockSource+0xb0>
 8004f56:	d900      	bls.n	8004f5a <HAL_TIM_ConfigClockSource+0x82>
 8004f58:	e07a      	b.n	8005050 <HAL_TIM_ConfigClockSource+0x178>
 8004f5a:	2b60      	cmp	r3, #96	@ 0x60
 8004f5c:	d04f      	beq.n	8004ffe <HAL_TIM_ConfigClockSource+0x126>
 8004f5e:	d900      	bls.n	8004f62 <HAL_TIM_ConfigClockSource+0x8a>
 8004f60:	e076      	b.n	8005050 <HAL_TIM_ConfigClockSource+0x178>
 8004f62:	2b50      	cmp	r3, #80	@ 0x50
 8004f64:	d03b      	beq.n	8004fde <HAL_TIM_ConfigClockSource+0x106>
 8004f66:	d900      	bls.n	8004f6a <HAL_TIM_ConfigClockSource+0x92>
 8004f68:	e072      	b.n	8005050 <HAL_TIM_ConfigClockSource+0x178>
 8004f6a:	2b40      	cmp	r3, #64	@ 0x40
 8004f6c:	d057      	beq.n	800501e <HAL_TIM_ConfigClockSource+0x146>
 8004f6e:	d900      	bls.n	8004f72 <HAL_TIM_ConfigClockSource+0x9a>
 8004f70:	e06e      	b.n	8005050 <HAL_TIM_ConfigClockSource+0x178>
 8004f72:	2b30      	cmp	r3, #48	@ 0x30
 8004f74:	d063      	beq.n	800503e <HAL_TIM_ConfigClockSource+0x166>
 8004f76:	d86b      	bhi.n	8005050 <HAL_TIM_ConfigClockSource+0x178>
 8004f78:	2b20      	cmp	r3, #32
 8004f7a:	d060      	beq.n	800503e <HAL_TIM_ConfigClockSource+0x166>
 8004f7c:	d868      	bhi.n	8005050 <HAL_TIM_ConfigClockSource+0x178>
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d05d      	beq.n	800503e <HAL_TIM_ConfigClockSource+0x166>
 8004f82:	2b10      	cmp	r3, #16
 8004f84:	d05b      	beq.n	800503e <HAL_TIM_ConfigClockSource+0x166>
 8004f86:	e063      	b.n	8005050 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004f98:	f000 fc38 	bl	800580c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	689b      	ldr	r3, [r3, #8]
 8004fa2:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004fa4:	68bb      	ldr	r3, [r7, #8]
 8004fa6:	2277      	movs	r2, #119	@ 0x77
 8004fa8:	4313      	orrs	r3, r2
 8004faa:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	68ba      	ldr	r2, [r7, #8]
 8004fb2:	609a      	str	r2, [r3, #8]
      break;
 8004fb4:	e052      	b.n	800505c <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004fc6:	f000 fc21 	bl	800580c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	689a      	ldr	r2, [r3, #8]
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	2180      	movs	r1, #128	@ 0x80
 8004fd6:	01c9      	lsls	r1, r1, #7
 8004fd8:	430a      	orrs	r2, r1
 8004fda:	609a      	str	r2, [r3, #8]
      break;
 8004fdc:	e03e      	b.n	800505c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004fea:	001a      	movs	r2, r3
 8004fec:	f000 fb92 	bl	8005714 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	2150      	movs	r1, #80	@ 0x50
 8004ff6:	0018      	movs	r0, r3
 8004ff8:	f000 fbec 	bl	80057d4 <TIM_ITRx_SetConfig>
      break;
 8004ffc:	e02e      	b.n	800505c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800500a:	001a      	movs	r2, r3
 800500c:	f000 fbb0 	bl	8005770 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	2160      	movs	r1, #96	@ 0x60
 8005016:	0018      	movs	r0, r3
 8005018:	f000 fbdc 	bl	80057d4 <TIM_ITRx_SetConfig>
      break;
 800501c:	e01e      	b.n	800505c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800502a:	001a      	movs	r2, r3
 800502c:	f000 fb72 	bl	8005714 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	2140      	movs	r1, #64	@ 0x40
 8005036:	0018      	movs	r0, r3
 8005038:	f000 fbcc 	bl	80057d4 <TIM_ITRx_SetConfig>
      break;
 800503c:	e00e      	b.n	800505c <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681a      	ldr	r2, [r3, #0]
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	0019      	movs	r1, r3
 8005048:	0010      	movs	r0, r2
 800504a:	f000 fbc3 	bl	80057d4 <TIM_ITRx_SetConfig>
      break;
 800504e:	e005      	b.n	800505c <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8005050:	230f      	movs	r3, #15
 8005052:	18fb      	adds	r3, r7, r3
 8005054:	2201      	movs	r2, #1
 8005056:	701a      	strb	r2, [r3, #0]
      break;
 8005058:	e000      	b.n	800505c <HAL_TIM_ConfigClockSource+0x184>
      break;
 800505a:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	223d      	movs	r2, #61	@ 0x3d
 8005060:	2101      	movs	r1, #1
 8005062:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	223c      	movs	r2, #60	@ 0x3c
 8005068:	2100      	movs	r1, #0
 800506a:	5499      	strb	r1, [r3, r2]

  return status;
 800506c:	230f      	movs	r3, #15
 800506e:	18fb      	adds	r3, r7, r3
 8005070:	781b      	ldrb	r3, [r3, #0]
}
 8005072:	0018      	movs	r0, r3
 8005074:	46bd      	mov	sp, r7
 8005076:	b004      	add	sp, #16
 8005078:	bd80      	pop	{r7, pc}
 800507a:	46c0      	nop			@ (mov r8, r8)
 800507c:	ffceff88 	.word	0xffceff88
 8005080:	ffff00ff 	.word	0xffff00ff

08005084 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005084:	b580      	push	{r7, lr}
 8005086:	b084      	sub	sp, #16
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
 800508c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	4a36      	ldr	r2, [pc, #216]	@ (8005170 <TIM_Base_SetConfig+0xec>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d003      	beq.n	80050a4 <TIM_Base_SetConfig+0x20>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	4a35      	ldr	r2, [pc, #212]	@ (8005174 <TIM_Base_SetConfig+0xf0>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d108      	bne.n	80050b6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	2270      	movs	r2, #112	@ 0x70
 80050a8:	4393      	bics	r3, r2
 80050aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	685b      	ldr	r3, [r3, #4]
 80050b0:	68fa      	ldr	r2, [r7, #12]
 80050b2:	4313      	orrs	r3, r2
 80050b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	4a2d      	ldr	r2, [pc, #180]	@ (8005170 <TIM_Base_SetConfig+0xec>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d013      	beq.n	80050e6 <TIM_Base_SetConfig+0x62>
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	4a2c      	ldr	r2, [pc, #176]	@ (8005174 <TIM_Base_SetConfig+0xf0>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d00f      	beq.n	80050e6 <TIM_Base_SetConfig+0x62>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	4a2b      	ldr	r2, [pc, #172]	@ (8005178 <TIM_Base_SetConfig+0xf4>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d00b      	beq.n	80050e6 <TIM_Base_SetConfig+0x62>
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	4a2a      	ldr	r2, [pc, #168]	@ (800517c <TIM_Base_SetConfig+0xf8>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d007      	beq.n	80050e6 <TIM_Base_SetConfig+0x62>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	4a29      	ldr	r2, [pc, #164]	@ (8005180 <TIM_Base_SetConfig+0xfc>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d003      	beq.n	80050e6 <TIM_Base_SetConfig+0x62>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	4a28      	ldr	r2, [pc, #160]	@ (8005184 <TIM_Base_SetConfig+0x100>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d108      	bne.n	80050f8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	4a27      	ldr	r2, [pc, #156]	@ (8005188 <TIM_Base_SetConfig+0x104>)
 80050ea:	4013      	ands	r3, r2
 80050ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	68db      	ldr	r3, [r3, #12]
 80050f2:	68fa      	ldr	r2, [r7, #12]
 80050f4:	4313      	orrs	r3, r2
 80050f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	2280      	movs	r2, #128	@ 0x80
 80050fc:	4393      	bics	r3, r2
 80050fe:	001a      	movs	r2, r3
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	695b      	ldr	r3, [r3, #20]
 8005104:	4313      	orrs	r3, r2
 8005106:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	68fa      	ldr	r2, [r7, #12]
 800510c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	689a      	ldr	r2, [r3, #8]
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	681a      	ldr	r2, [r3, #0]
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	4a13      	ldr	r2, [pc, #76]	@ (8005170 <TIM_Base_SetConfig+0xec>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d00b      	beq.n	800513e <TIM_Base_SetConfig+0xba>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	4a14      	ldr	r2, [pc, #80]	@ (800517c <TIM_Base_SetConfig+0xf8>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d007      	beq.n	800513e <TIM_Base_SetConfig+0xba>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	4a13      	ldr	r2, [pc, #76]	@ (8005180 <TIM_Base_SetConfig+0xfc>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d003      	beq.n	800513e <TIM_Base_SetConfig+0xba>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	4a12      	ldr	r2, [pc, #72]	@ (8005184 <TIM_Base_SetConfig+0x100>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d103      	bne.n	8005146 <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	691a      	ldr	r2, [r3, #16]
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2201      	movs	r2, #1
 800514a:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	691b      	ldr	r3, [r3, #16]
 8005150:	2201      	movs	r2, #1
 8005152:	4013      	ands	r3, r2
 8005154:	2b01      	cmp	r3, #1
 8005156:	d106      	bne.n	8005166 <TIM_Base_SetConfig+0xe2>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	691b      	ldr	r3, [r3, #16]
 800515c:	2201      	movs	r2, #1
 800515e:	4393      	bics	r3, r2
 8005160:	001a      	movs	r2, r3
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	611a      	str	r2, [r3, #16]
  }
}
 8005166:	46c0      	nop			@ (mov r8, r8)
 8005168:	46bd      	mov	sp, r7
 800516a:	b004      	add	sp, #16
 800516c:	bd80      	pop	{r7, pc}
 800516e:	46c0      	nop			@ (mov r8, r8)
 8005170:	40012c00 	.word	0x40012c00
 8005174:	40000400 	.word	0x40000400
 8005178:	40002000 	.word	0x40002000
 800517c:	40014000 	.word	0x40014000
 8005180:	40014400 	.word	0x40014400
 8005184:	40014800 	.word	0x40014800
 8005188:	fffffcff 	.word	0xfffffcff

0800518c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b086      	sub	sp, #24
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
 8005194:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6a1b      	ldr	r3, [r3, #32]
 800519a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6a1b      	ldr	r3, [r3, #32]
 80051a0:	2201      	movs	r2, #1
 80051a2:	4393      	bics	r3, r2
 80051a4:	001a      	movs	r2, r3
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	685b      	ldr	r3, [r3, #4]
 80051ae:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	699b      	ldr	r3, [r3, #24]
 80051b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	4a32      	ldr	r2, [pc, #200]	@ (8005284 <TIM_OC1_SetConfig+0xf8>)
 80051ba:	4013      	ands	r3, r2
 80051bc:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	2203      	movs	r2, #3
 80051c2:	4393      	bics	r3, r2
 80051c4:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	68fa      	ldr	r2, [r7, #12]
 80051cc:	4313      	orrs	r3, r2
 80051ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80051d0:	697b      	ldr	r3, [r7, #20]
 80051d2:	2202      	movs	r2, #2
 80051d4:	4393      	bics	r3, r2
 80051d6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	689b      	ldr	r3, [r3, #8]
 80051dc:	697a      	ldr	r2, [r7, #20]
 80051de:	4313      	orrs	r3, r2
 80051e0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	4a28      	ldr	r2, [pc, #160]	@ (8005288 <TIM_OC1_SetConfig+0xfc>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d00b      	beq.n	8005202 <TIM_OC1_SetConfig+0x76>
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	4a27      	ldr	r2, [pc, #156]	@ (800528c <TIM_OC1_SetConfig+0x100>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d007      	beq.n	8005202 <TIM_OC1_SetConfig+0x76>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	4a26      	ldr	r2, [pc, #152]	@ (8005290 <TIM_OC1_SetConfig+0x104>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d003      	beq.n	8005202 <TIM_OC1_SetConfig+0x76>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	4a25      	ldr	r2, [pc, #148]	@ (8005294 <TIM_OC1_SetConfig+0x108>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d10c      	bne.n	800521c <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005202:	697b      	ldr	r3, [r7, #20]
 8005204:	2208      	movs	r2, #8
 8005206:	4393      	bics	r3, r2
 8005208:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	68db      	ldr	r3, [r3, #12]
 800520e:	697a      	ldr	r2, [r7, #20]
 8005210:	4313      	orrs	r3, r2
 8005212:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005214:	697b      	ldr	r3, [r7, #20]
 8005216:	2204      	movs	r2, #4
 8005218:	4393      	bics	r3, r2
 800521a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	4a1a      	ldr	r2, [pc, #104]	@ (8005288 <TIM_OC1_SetConfig+0xfc>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d00b      	beq.n	800523c <TIM_OC1_SetConfig+0xb0>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	4a19      	ldr	r2, [pc, #100]	@ (800528c <TIM_OC1_SetConfig+0x100>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d007      	beq.n	800523c <TIM_OC1_SetConfig+0xb0>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	4a18      	ldr	r2, [pc, #96]	@ (8005290 <TIM_OC1_SetConfig+0x104>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d003      	beq.n	800523c <TIM_OC1_SetConfig+0xb0>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	4a17      	ldr	r2, [pc, #92]	@ (8005294 <TIM_OC1_SetConfig+0x108>)
 8005238:	4293      	cmp	r3, r2
 800523a:	d111      	bne.n	8005260 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800523c:	693b      	ldr	r3, [r7, #16]
 800523e:	4a16      	ldr	r2, [pc, #88]	@ (8005298 <TIM_OC1_SetConfig+0x10c>)
 8005240:	4013      	ands	r3, r2
 8005242:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005244:	693b      	ldr	r3, [r7, #16]
 8005246:	4a15      	ldr	r2, [pc, #84]	@ (800529c <TIM_OC1_SetConfig+0x110>)
 8005248:	4013      	ands	r3, r2
 800524a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	695b      	ldr	r3, [r3, #20]
 8005250:	693a      	ldr	r2, [r7, #16]
 8005252:	4313      	orrs	r3, r2
 8005254:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	699b      	ldr	r3, [r3, #24]
 800525a:	693a      	ldr	r2, [r7, #16]
 800525c:	4313      	orrs	r3, r2
 800525e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	693a      	ldr	r2, [r7, #16]
 8005264:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	68fa      	ldr	r2, [r7, #12]
 800526a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	685a      	ldr	r2, [r3, #4]
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	697a      	ldr	r2, [r7, #20]
 8005278:	621a      	str	r2, [r3, #32]
}
 800527a:	46c0      	nop			@ (mov r8, r8)
 800527c:	46bd      	mov	sp, r7
 800527e:	b006      	add	sp, #24
 8005280:	bd80      	pop	{r7, pc}
 8005282:	46c0      	nop			@ (mov r8, r8)
 8005284:	fffeff8f 	.word	0xfffeff8f
 8005288:	40012c00 	.word	0x40012c00
 800528c:	40014000 	.word	0x40014000
 8005290:	40014400 	.word	0x40014400
 8005294:	40014800 	.word	0x40014800
 8005298:	fffffeff 	.word	0xfffffeff
 800529c:	fffffdff 	.word	0xfffffdff

080052a0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b086      	sub	sp, #24
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
 80052a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6a1b      	ldr	r3, [r3, #32]
 80052ae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6a1b      	ldr	r3, [r3, #32]
 80052b4:	2210      	movs	r2, #16
 80052b6:	4393      	bics	r3, r2
 80052b8:	001a      	movs	r2, r3
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	685b      	ldr	r3, [r3, #4]
 80052c2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	699b      	ldr	r3, [r3, #24]
 80052c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	4a2e      	ldr	r2, [pc, #184]	@ (8005388 <TIM_OC2_SetConfig+0xe8>)
 80052ce:	4013      	ands	r3, r2
 80052d0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	4a2d      	ldr	r2, [pc, #180]	@ (800538c <TIM_OC2_SetConfig+0xec>)
 80052d6:	4013      	ands	r3, r2
 80052d8:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	021b      	lsls	r3, r3, #8
 80052e0:	68fa      	ldr	r2, [r7, #12]
 80052e2:	4313      	orrs	r3, r2
 80052e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80052e6:	697b      	ldr	r3, [r7, #20]
 80052e8:	2220      	movs	r2, #32
 80052ea:	4393      	bics	r3, r2
 80052ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	689b      	ldr	r3, [r3, #8]
 80052f2:	011b      	lsls	r3, r3, #4
 80052f4:	697a      	ldr	r2, [r7, #20]
 80052f6:	4313      	orrs	r3, r2
 80052f8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	4a24      	ldr	r2, [pc, #144]	@ (8005390 <TIM_OC2_SetConfig+0xf0>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	d10d      	bne.n	800531e <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005302:	697b      	ldr	r3, [r7, #20]
 8005304:	2280      	movs	r2, #128	@ 0x80
 8005306:	4393      	bics	r3, r2
 8005308:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	68db      	ldr	r3, [r3, #12]
 800530e:	011b      	lsls	r3, r3, #4
 8005310:	697a      	ldr	r2, [r7, #20]
 8005312:	4313      	orrs	r3, r2
 8005314:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005316:	697b      	ldr	r3, [r7, #20]
 8005318:	2240      	movs	r2, #64	@ 0x40
 800531a:	4393      	bics	r3, r2
 800531c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	4a1b      	ldr	r2, [pc, #108]	@ (8005390 <TIM_OC2_SetConfig+0xf0>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d00b      	beq.n	800533e <TIM_OC2_SetConfig+0x9e>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	4a1a      	ldr	r2, [pc, #104]	@ (8005394 <TIM_OC2_SetConfig+0xf4>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d007      	beq.n	800533e <TIM_OC2_SetConfig+0x9e>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	4a19      	ldr	r2, [pc, #100]	@ (8005398 <TIM_OC2_SetConfig+0xf8>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d003      	beq.n	800533e <TIM_OC2_SetConfig+0x9e>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	4a18      	ldr	r2, [pc, #96]	@ (800539c <TIM_OC2_SetConfig+0xfc>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d113      	bne.n	8005366 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800533e:	693b      	ldr	r3, [r7, #16]
 8005340:	4a17      	ldr	r2, [pc, #92]	@ (80053a0 <TIM_OC2_SetConfig+0x100>)
 8005342:	4013      	ands	r3, r2
 8005344:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005346:	693b      	ldr	r3, [r7, #16]
 8005348:	4a16      	ldr	r2, [pc, #88]	@ (80053a4 <TIM_OC2_SetConfig+0x104>)
 800534a:	4013      	ands	r3, r2
 800534c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	695b      	ldr	r3, [r3, #20]
 8005352:	009b      	lsls	r3, r3, #2
 8005354:	693a      	ldr	r2, [r7, #16]
 8005356:	4313      	orrs	r3, r2
 8005358:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	699b      	ldr	r3, [r3, #24]
 800535e:	009b      	lsls	r3, r3, #2
 8005360:	693a      	ldr	r2, [r7, #16]
 8005362:	4313      	orrs	r3, r2
 8005364:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	693a      	ldr	r2, [r7, #16]
 800536a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	68fa      	ldr	r2, [r7, #12]
 8005370:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	685a      	ldr	r2, [r3, #4]
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	697a      	ldr	r2, [r7, #20]
 800537e:	621a      	str	r2, [r3, #32]
}
 8005380:	46c0      	nop			@ (mov r8, r8)
 8005382:	46bd      	mov	sp, r7
 8005384:	b006      	add	sp, #24
 8005386:	bd80      	pop	{r7, pc}
 8005388:	feff8fff 	.word	0xfeff8fff
 800538c:	fffffcff 	.word	0xfffffcff
 8005390:	40012c00 	.word	0x40012c00
 8005394:	40014000 	.word	0x40014000
 8005398:	40014400 	.word	0x40014400
 800539c:	40014800 	.word	0x40014800
 80053a0:	fffffbff 	.word	0xfffffbff
 80053a4:	fffff7ff 	.word	0xfffff7ff

080053a8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b086      	sub	sp, #24
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
 80053b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6a1b      	ldr	r3, [r3, #32]
 80053b6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6a1b      	ldr	r3, [r3, #32]
 80053bc:	4a33      	ldr	r2, [pc, #204]	@ (800548c <TIM_OC3_SetConfig+0xe4>)
 80053be:	401a      	ands	r2, r3
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	685b      	ldr	r3, [r3, #4]
 80053c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	69db      	ldr	r3, [r3, #28]
 80053ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	4a2f      	ldr	r2, [pc, #188]	@ (8005490 <TIM_OC3_SetConfig+0xe8>)
 80053d4:	4013      	ands	r3, r2
 80053d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	2203      	movs	r2, #3
 80053dc:	4393      	bics	r3, r2
 80053de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	68fa      	ldr	r2, [r7, #12]
 80053e6:	4313      	orrs	r3, r2
 80053e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80053ea:	697b      	ldr	r3, [r7, #20]
 80053ec:	4a29      	ldr	r2, [pc, #164]	@ (8005494 <TIM_OC3_SetConfig+0xec>)
 80053ee:	4013      	ands	r3, r2
 80053f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	689b      	ldr	r3, [r3, #8]
 80053f6:	021b      	lsls	r3, r3, #8
 80053f8:	697a      	ldr	r2, [r7, #20]
 80053fa:	4313      	orrs	r3, r2
 80053fc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	4a25      	ldr	r2, [pc, #148]	@ (8005498 <TIM_OC3_SetConfig+0xf0>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d10d      	bne.n	8005422 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005406:	697b      	ldr	r3, [r7, #20]
 8005408:	4a24      	ldr	r2, [pc, #144]	@ (800549c <TIM_OC3_SetConfig+0xf4>)
 800540a:	4013      	ands	r3, r2
 800540c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	68db      	ldr	r3, [r3, #12]
 8005412:	021b      	lsls	r3, r3, #8
 8005414:	697a      	ldr	r2, [r7, #20]
 8005416:	4313      	orrs	r3, r2
 8005418:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800541a:	697b      	ldr	r3, [r7, #20]
 800541c:	4a20      	ldr	r2, [pc, #128]	@ (80054a0 <TIM_OC3_SetConfig+0xf8>)
 800541e:	4013      	ands	r3, r2
 8005420:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	4a1c      	ldr	r2, [pc, #112]	@ (8005498 <TIM_OC3_SetConfig+0xf0>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d00b      	beq.n	8005442 <TIM_OC3_SetConfig+0x9a>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	4a1d      	ldr	r2, [pc, #116]	@ (80054a4 <TIM_OC3_SetConfig+0xfc>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d007      	beq.n	8005442 <TIM_OC3_SetConfig+0x9a>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	4a1c      	ldr	r2, [pc, #112]	@ (80054a8 <TIM_OC3_SetConfig+0x100>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d003      	beq.n	8005442 <TIM_OC3_SetConfig+0x9a>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	4a1b      	ldr	r2, [pc, #108]	@ (80054ac <TIM_OC3_SetConfig+0x104>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d113      	bne.n	800546a <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005442:	693b      	ldr	r3, [r7, #16]
 8005444:	4a1a      	ldr	r2, [pc, #104]	@ (80054b0 <TIM_OC3_SetConfig+0x108>)
 8005446:	4013      	ands	r3, r2
 8005448:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800544a:	693b      	ldr	r3, [r7, #16]
 800544c:	4a19      	ldr	r2, [pc, #100]	@ (80054b4 <TIM_OC3_SetConfig+0x10c>)
 800544e:	4013      	ands	r3, r2
 8005450:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	695b      	ldr	r3, [r3, #20]
 8005456:	011b      	lsls	r3, r3, #4
 8005458:	693a      	ldr	r2, [r7, #16]
 800545a:	4313      	orrs	r3, r2
 800545c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	699b      	ldr	r3, [r3, #24]
 8005462:	011b      	lsls	r3, r3, #4
 8005464:	693a      	ldr	r2, [r7, #16]
 8005466:	4313      	orrs	r3, r2
 8005468:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	693a      	ldr	r2, [r7, #16]
 800546e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	68fa      	ldr	r2, [r7, #12]
 8005474:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	685a      	ldr	r2, [r3, #4]
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	697a      	ldr	r2, [r7, #20]
 8005482:	621a      	str	r2, [r3, #32]
}
 8005484:	46c0      	nop			@ (mov r8, r8)
 8005486:	46bd      	mov	sp, r7
 8005488:	b006      	add	sp, #24
 800548a:	bd80      	pop	{r7, pc}
 800548c:	fffffeff 	.word	0xfffffeff
 8005490:	fffeff8f 	.word	0xfffeff8f
 8005494:	fffffdff 	.word	0xfffffdff
 8005498:	40012c00 	.word	0x40012c00
 800549c:	fffff7ff 	.word	0xfffff7ff
 80054a0:	fffffbff 	.word	0xfffffbff
 80054a4:	40014000 	.word	0x40014000
 80054a8:	40014400 	.word	0x40014400
 80054ac:	40014800 	.word	0x40014800
 80054b0:	ffffefff 	.word	0xffffefff
 80054b4:	ffffdfff 	.word	0xffffdfff

080054b8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b086      	sub	sp, #24
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
 80054c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6a1b      	ldr	r3, [r3, #32]
 80054c6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6a1b      	ldr	r3, [r3, #32]
 80054cc:	4a26      	ldr	r2, [pc, #152]	@ (8005568 <TIM_OC4_SetConfig+0xb0>)
 80054ce:	401a      	ands	r2, r3
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	685b      	ldr	r3, [r3, #4]
 80054d8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	69db      	ldr	r3, [r3, #28]
 80054de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	4a22      	ldr	r2, [pc, #136]	@ (800556c <TIM_OC4_SetConfig+0xb4>)
 80054e4:	4013      	ands	r3, r2
 80054e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	4a21      	ldr	r2, [pc, #132]	@ (8005570 <TIM_OC4_SetConfig+0xb8>)
 80054ec:	4013      	ands	r3, r2
 80054ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	021b      	lsls	r3, r3, #8
 80054f6:	68fa      	ldr	r2, [r7, #12]
 80054f8:	4313      	orrs	r3, r2
 80054fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80054fc:	693b      	ldr	r3, [r7, #16]
 80054fe:	4a1d      	ldr	r2, [pc, #116]	@ (8005574 <TIM_OC4_SetConfig+0xbc>)
 8005500:	4013      	ands	r3, r2
 8005502:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	689b      	ldr	r3, [r3, #8]
 8005508:	031b      	lsls	r3, r3, #12
 800550a:	693a      	ldr	r2, [r7, #16]
 800550c:	4313      	orrs	r3, r2
 800550e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	4a19      	ldr	r2, [pc, #100]	@ (8005578 <TIM_OC4_SetConfig+0xc0>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d00b      	beq.n	8005530 <TIM_OC4_SetConfig+0x78>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	4a18      	ldr	r2, [pc, #96]	@ (800557c <TIM_OC4_SetConfig+0xc4>)
 800551c:	4293      	cmp	r3, r2
 800551e:	d007      	beq.n	8005530 <TIM_OC4_SetConfig+0x78>
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	4a17      	ldr	r2, [pc, #92]	@ (8005580 <TIM_OC4_SetConfig+0xc8>)
 8005524:	4293      	cmp	r3, r2
 8005526:	d003      	beq.n	8005530 <TIM_OC4_SetConfig+0x78>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	4a16      	ldr	r2, [pc, #88]	@ (8005584 <TIM_OC4_SetConfig+0xcc>)
 800552c:	4293      	cmp	r3, r2
 800552e:	d109      	bne.n	8005544 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005530:	697b      	ldr	r3, [r7, #20]
 8005532:	4a15      	ldr	r2, [pc, #84]	@ (8005588 <TIM_OC4_SetConfig+0xd0>)
 8005534:	4013      	ands	r3, r2
 8005536:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	695b      	ldr	r3, [r3, #20]
 800553c:	019b      	lsls	r3, r3, #6
 800553e:	697a      	ldr	r2, [r7, #20]
 8005540:	4313      	orrs	r3, r2
 8005542:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	697a      	ldr	r2, [r7, #20]
 8005548:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	68fa      	ldr	r2, [r7, #12]
 800554e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	685a      	ldr	r2, [r3, #4]
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	693a      	ldr	r2, [r7, #16]
 800555c:	621a      	str	r2, [r3, #32]
}
 800555e:	46c0      	nop			@ (mov r8, r8)
 8005560:	46bd      	mov	sp, r7
 8005562:	b006      	add	sp, #24
 8005564:	bd80      	pop	{r7, pc}
 8005566:	46c0      	nop			@ (mov r8, r8)
 8005568:	ffffefff 	.word	0xffffefff
 800556c:	feff8fff 	.word	0xfeff8fff
 8005570:	fffffcff 	.word	0xfffffcff
 8005574:	ffffdfff 	.word	0xffffdfff
 8005578:	40012c00 	.word	0x40012c00
 800557c:	40014000 	.word	0x40014000
 8005580:	40014400 	.word	0x40014400
 8005584:	40014800 	.word	0x40014800
 8005588:	ffffbfff 	.word	0xffffbfff

0800558c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800558c:	b580      	push	{r7, lr}
 800558e:	b086      	sub	sp, #24
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
 8005594:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6a1b      	ldr	r3, [r3, #32]
 800559a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6a1b      	ldr	r3, [r3, #32]
 80055a0:	4a23      	ldr	r2, [pc, #140]	@ (8005630 <TIM_OC5_SetConfig+0xa4>)
 80055a2:	401a      	ands	r2, r3
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	685b      	ldr	r3, [r3, #4]
 80055ac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	4a1f      	ldr	r2, [pc, #124]	@ (8005634 <TIM_OC5_SetConfig+0xa8>)
 80055b8:	4013      	ands	r3, r2
 80055ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	68fa      	ldr	r2, [r7, #12]
 80055c2:	4313      	orrs	r3, r2
 80055c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80055c6:	693b      	ldr	r3, [r7, #16]
 80055c8:	4a1b      	ldr	r2, [pc, #108]	@ (8005638 <TIM_OC5_SetConfig+0xac>)
 80055ca:	4013      	ands	r3, r2
 80055cc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	689b      	ldr	r3, [r3, #8]
 80055d2:	041b      	lsls	r3, r3, #16
 80055d4:	693a      	ldr	r2, [r7, #16]
 80055d6:	4313      	orrs	r3, r2
 80055d8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	4a17      	ldr	r2, [pc, #92]	@ (800563c <TIM_OC5_SetConfig+0xb0>)
 80055de:	4293      	cmp	r3, r2
 80055e0:	d00b      	beq.n	80055fa <TIM_OC5_SetConfig+0x6e>
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	4a16      	ldr	r2, [pc, #88]	@ (8005640 <TIM_OC5_SetConfig+0xb4>)
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d007      	beq.n	80055fa <TIM_OC5_SetConfig+0x6e>
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	4a15      	ldr	r2, [pc, #84]	@ (8005644 <TIM_OC5_SetConfig+0xb8>)
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d003      	beq.n	80055fa <TIM_OC5_SetConfig+0x6e>
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	4a14      	ldr	r2, [pc, #80]	@ (8005648 <TIM_OC5_SetConfig+0xbc>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d109      	bne.n	800560e <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80055fa:	697b      	ldr	r3, [r7, #20]
 80055fc:	4a0c      	ldr	r2, [pc, #48]	@ (8005630 <TIM_OC5_SetConfig+0xa4>)
 80055fe:	4013      	ands	r3, r2
 8005600:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	695b      	ldr	r3, [r3, #20]
 8005606:	021b      	lsls	r3, r3, #8
 8005608:	697a      	ldr	r2, [r7, #20]
 800560a:	4313      	orrs	r3, r2
 800560c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	697a      	ldr	r2, [r7, #20]
 8005612:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	68fa      	ldr	r2, [r7, #12]
 8005618:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	685a      	ldr	r2, [r3, #4]
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	693a      	ldr	r2, [r7, #16]
 8005626:	621a      	str	r2, [r3, #32]
}
 8005628:	46c0      	nop			@ (mov r8, r8)
 800562a:	46bd      	mov	sp, r7
 800562c:	b006      	add	sp, #24
 800562e:	bd80      	pop	{r7, pc}
 8005630:	fffeffff 	.word	0xfffeffff
 8005634:	fffeff8f 	.word	0xfffeff8f
 8005638:	fffdffff 	.word	0xfffdffff
 800563c:	40012c00 	.word	0x40012c00
 8005640:	40014000 	.word	0x40014000
 8005644:	40014400 	.word	0x40014400
 8005648:	40014800 	.word	0x40014800

0800564c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b086      	sub	sp, #24
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
 8005654:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6a1b      	ldr	r3, [r3, #32]
 800565a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6a1b      	ldr	r3, [r3, #32]
 8005660:	4a24      	ldr	r2, [pc, #144]	@ (80056f4 <TIM_OC6_SetConfig+0xa8>)
 8005662:	401a      	ands	r2, r3
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	685b      	ldr	r3, [r3, #4]
 800566c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005672:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	4a20      	ldr	r2, [pc, #128]	@ (80056f8 <TIM_OC6_SetConfig+0xac>)
 8005678:	4013      	ands	r3, r2
 800567a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	021b      	lsls	r3, r3, #8
 8005682:	68fa      	ldr	r2, [r7, #12]
 8005684:	4313      	orrs	r3, r2
 8005686:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005688:	693b      	ldr	r3, [r7, #16]
 800568a:	4a1c      	ldr	r2, [pc, #112]	@ (80056fc <TIM_OC6_SetConfig+0xb0>)
 800568c:	4013      	ands	r3, r2
 800568e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	689b      	ldr	r3, [r3, #8]
 8005694:	051b      	lsls	r3, r3, #20
 8005696:	693a      	ldr	r2, [r7, #16]
 8005698:	4313      	orrs	r3, r2
 800569a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	4a18      	ldr	r2, [pc, #96]	@ (8005700 <TIM_OC6_SetConfig+0xb4>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d00b      	beq.n	80056bc <TIM_OC6_SetConfig+0x70>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	4a17      	ldr	r2, [pc, #92]	@ (8005704 <TIM_OC6_SetConfig+0xb8>)
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d007      	beq.n	80056bc <TIM_OC6_SetConfig+0x70>
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	4a16      	ldr	r2, [pc, #88]	@ (8005708 <TIM_OC6_SetConfig+0xbc>)
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d003      	beq.n	80056bc <TIM_OC6_SetConfig+0x70>
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	4a15      	ldr	r2, [pc, #84]	@ (800570c <TIM_OC6_SetConfig+0xc0>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d109      	bne.n	80056d0 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80056bc:	697b      	ldr	r3, [r7, #20]
 80056be:	4a14      	ldr	r2, [pc, #80]	@ (8005710 <TIM_OC6_SetConfig+0xc4>)
 80056c0:	4013      	ands	r3, r2
 80056c2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	695b      	ldr	r3, [r3, #20]
 80056c8:	029b      	lsls	r3, r3, #10
 80056ca:	697a      	ldr	r2, [r7, #20]
 80056cc:	4313      	orrs	r3, r2
 80056ce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	697a      	ldr	r2, [r7, #20]
 80056d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	68fa      	ldr	r2, [r7, #12]
 80056da:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	685a      	ldr	r2, [r3, #4]
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	693a      	ldr	r2, [r7, #16]
 80056e8:	621a      	str	r2, [r3, #32]
}
 80056ea:	46c0      	nop			@ (mov r8, r8)
 80056ec:	46bd      	mov	sp, r7
 80056ee:	b006      	add	sp, #24
 80056f0:	bd80      	pop	{r7, pc}
 80056f2:	46c0      	nop			@ (mov r8, r8)
 80056f4:	ffefffff 	.word	0xffefffff
 80056f8:	feff8fff 	.word	0xfeff8fff
 80056fc:	ffdfffff 	.word	0xffdfffff
 8005700:	40012c00 	.word	0x40012c00
 8005704:	40014000 	.word	0x40014000
 8005708:	40014400 	.word	0x40014400
 800570c:	40014800 	.word	0x40014800
 8005710:	fffbffff 	.word	0xfffbffff

08005714 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005714:	b580      	push	{r7, lr}
 8005716:	b086      	sub	sp, #24
 8005718:	af00      	add	r7, sp, #0
 800571a:	60f8      	str	r0, [r7, #12]
 800571c:	60b9      	str	r1, [r7, #8]
 800571e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	6a1b      	ldr	r3, [r3, #32]
 8005724:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	6a1b      	ldr	r3, [r3, #32]
 800572a:	2201      	movs	r2, #1
 800572c:	4393      	bics	r3, r2
 800572e:	001a      	movs	r2, r3
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	699b      	ldr	r3, [r3, #24]
 8005738:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800573a:	693b      	ldr	r3, [r7, #16]
 800573c:	22f0      	movs	r2, #240	@ 0xf0
 800573e:	4393      	bics	r3, r2
 8005740:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	011b      	lsls	r3, r3, #4
 8005746:	693a      	ldr	r2, [r7, #16]
 8005748:	4313      	orrs	r3, r2
 800574a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800574c:	697b      	ldr	r3, [r7, #20]
 800574e:	220a      	movs	r2, #10
 8005750:	4393      	bics	r3, r2
 8005752:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005754:	697a      	ldr	r2, [r7, #20]
 8005756:	68bb      	ldr	r3, [r7, #8]
 8005758:	4313      	orrs	r3, r2
 800575a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	693a      	ldr	r2, [r7, #16]
 8005760:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	697a      	ldr	r2, [r7, #20]
 8005766:	621a      	str	r2, [r3, #32]
}
 8005768:	46c0      	nop			@ (mov r8, r8)
 800576a:	46bd      	mov	sp, r7
 800576c:	b006      	add	sp, #24
 800576e:	bd80      	pop	{r7, pc}

08005770 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005770:	b580      	push	{r7, lr}
 8005772:	b086      	sub	sp, #24
 8005774:	af00      	add	r7, sp, #0
 8005776:	60f8      	str	r0, [r7, #12]
 8005778:	60b9      	str	r1, [r7, #8]
 800577a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	6a1b      	ldr	r3, [r3, #32]
 8005780:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	6a1b      	ldr	r3, [r3, #32]
 8005786:	2210      	movs	r2, #16
 8005788:	4393      	bics	r3, r2
 800578a:	001a      	movs	r2, r3
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	699b      	ldr	r3, [r3, #24]
 8005794:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005796:	693b      	ldr	r3, [r7, #16]
 8005798:	4a0d      	ldr	r2, [pc, #52]	@ (80057d0 <TIM_TI2_ConfigInputStage+0x60>)
 800579a:	4013      	ands	r3, r2
 800579c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	031b      	lsls	r3, r3, #12
 80057a2:	693a      	ldr	r2, [r7, #16]
 80057a4:	4313      	orrs	r3, r2
 80057a6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80057a8:	697b      	ldr	r3, [r7, #20]
 80057aa:	22a0      	movs	r2, #160	@ 0xa0
 80057ac:	4393      	bics	r3, r2
 80057ae:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80057b0:	68bb      	ldr	r3, [r7, #8]
 80057b2:	011b      	lsls	r3, r3, #4
 80057b4:	697a      	ldr	r2, [r7, #20]
 80057b6:	4313      	orrs	r3, r2
 80057b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	693a      	ldr	r2, [r7, #16]
 80057be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	697a      	ldr	r2, [r7, #20]
 80057c4:	621a      	str	r2, [r3, #32]
}
 80057c6:	46c0      	nop			@ (mov r8, r8)
 80057c8:	46bd      	mov	sp, r7
 80057ca:	b006      	add	sp, #24
 80057cc:	bd80      	pop	{r7, pc}
 80057ce:	46c0      	nop			@ (mov r8, r8)
 80057d0:	ffff0fff 	.word	0xffff0fff

080057d4 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b084      	sub	sp, #16
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
 80057dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	689b      	ldr	r3, [r3, #8]
 80057e2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	4a08      	ldr	r2, [pc, #32]	@ (8005808 <TIM_ITRx_SetConfig+0x34>)
 80057e8:	4013      	ands	r3, r2
 80057ea:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80057ec:	683a      	ldr	r2, [r7, #0]
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	4313      	orrs	r3, r2
 80057f2:	2207      	movs	r2, #7
 80057f4:	4313      	orrs	r3, r2
 80057f6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	68fa      	ldr	r2, [r7, #12]
 80057fc:	609a      	str	r2, [r3, #8]
}
 80057fe:	46c0      	nop			@ (mov r8, r8)
 8005800:	46bd      	mov	sp, r7
 8005802:	b004      	add	sp, #16
 8005804:	bd80      	pop	{r7, pc}
 8005806:	46c0      	nop			@ (mov r8, r8)
 8005808:	ffcfff8f 	.word	0xffcfff8f

0800580c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b086      	sub	sp, #24
 8005810:	af00      	add	r7, sp, #0
 8005812:	60f8      	str	r0, [r7, #12]
 8005814:	60b9      	str	r1, [r7, #8]
 8005816:	607a      	str	r2, [r7, #4]
 8005818:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	689b      	ldr	r3, [r3, #8]
 800581e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005820:	697b      	ldr	r3, [r7, #20]
 8005822:	4a09      	ldr	r2, [pc, #36]	@ (8005848 <TIM_ETR_SetConfig+0x3c>)
 8005824:	4013      	ands	r3, r2
 8005826:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	021a      	lsls	r2, r3, #8
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	431a      	orrs	r2, r3
 8005830:	68bb      	ldr	r3, [r7, #8]
 8005832:	4313      	orrs	r3, r2
 8005834:	697a      	ldr	r2, [r7, #20]
 8005836:	4313      	orrs	r3, r2
 8005838:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	697a      	ldr	r2, [r7, #20]
 800583e:	609a      	str	r2, [r3, #8]
}
 8005840:	46c0      	nop			@ (mov r8, r8)
 8005842:	46bd      	mov	sp, r7
 8005844:	b006      	add	sp, #24
 8005846:	bd80      	pop	{r7, pc}
 8005848:	ffff00ff 	.word	0xffff00ff

0800584c <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800584c:	b580      	push	{r7, lr}
 800584e:	b084      	sub	sp, #16
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
 8005854:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d108      	bne.n	800586e <HAL_TIMEx_PWMN_Start+0x22>
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2244      	movs	r2, #68	@ 0x44
 8005860:	5c9b      	ldrb	r3, [r3, r2]
 8005862:	b2db      	uxtb	r3, r3
 8005864:	3b01      	subs	r3, #1
 8005866:	1e5a      	subs	r2, r3, #1
 8005868:	4193      	sbcs	r3, r2
 800586a:	b2db      	uxtb	r3, r3
 800586c:	e01f      	b.n	80058ae <HAL_TIMEx_PWMN_Start+0x62>
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	2b04      	cmp	r3, #4
 8005872:	d108      	bne.n	8005886 <HAL_TIMEx_PWMN_Start+0x3a>
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2245      	movs	r2, #69	@ 0x45
 8005878:	5c9b      	ldrb	r3, [r3, r2]
 800587a:	b2db      	uxtb	r3, r3
 800587c:	3b01      	subs	r3, #1
 800587e:	1e5a      	subs	r2, r3, #1
 8005880:	4193      	sbcs	r3, r2
 8005882:	b2db      	uxtb	r3, r3
 8005884:	e013      	b.n	80058ae <HAL_TIMEx_PWMN_Start+0x62>
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	2b08      	cmp	r3, #8
 800588a:	d108      	bne.n	800589e <HAL_TIMEx_PWMN_Start+0x52>
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2246      	movs	r2, #70	@ 0x46
 8005890:	5c9b      	ldrb	r3, [r3, r2]
 8005892:	b2db      	uxtb	r3, r3
 8005894:	3b01      	subs	r3, #1
 8005896:	1e5a      	subs	r2, r3, #1
 8005898:	4193      	sbcs	r3, r2
 800589a:	b2db      	uxtb	r3, r3
 800589c:	e007      	b.n	80058ae <HAL_TIMEx_PWMN_Start+0x62>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2247      	movs	r2, #71	@ 0x47
 80058a2:	5c9b      	ldrb	r3, [r3, r2]
 80058a4:	b2db      	uxtb	r3, r3
 80058a6:	3b01      	subs	r3, #1
 80058a8:	1e5a      	subs	r2, r3, #1
 80058aa:	4193      	sbcs	r3, r2
 80058ac:	b2db      	uxtb	r3, r3
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d001      	beq.n	80058b6 <HAL_TIMEx_PWMN_Start+0x6a>
  {
    return HAL_ERROR;
 80058b2:	2301      	movs	r3, #1
 80058b4:	e05c      	b.n	8005970 <HAL_TIMEx_PWMN_Start+0x124>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d104      	bne.n	80058c6 <HAL_TIMEx_PWMN_Start+0x7a>
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2244      	movs	r2, #68	@ 0x44
 80058c0:	2102      	movs	r1, #2
 80058c2:	5499      	strb	r1, [r3, r2]
 80058c4:	e013      	b.n	80058ee <HAL_TIMEx_PWMN_Start+0xa2>
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	2b04      	cmp	r3, #4
 80058ca:	d104      	bne.n	80058d6 <HAL_TIMEx_PWMN_Start+0x8a>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2245      	movs	r2, #69	@ 0x45
 80058d0:	2102      	movs	r1, #2
 80058d2:	5499      	strb	r1, [r3, r2]
 80058d4:	e00b      	b.n	80058ee <HAL_TIMEx_PWMN_Start+0xa2>
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	2b08      	cmp	r3, #8
 80058da:	d104      	bne.n	80058e6 <HAL_TIMEx_PWMN_Start+0x9a>
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2246      	movs	r2, #70	@ 0x46
 80058e0:	2102      	movs	r1, #2
 80058e2:	5499      	strb	r1, [r3, r2]
 80058e4:	e003      	b.n	80058ee <HAL_TIMEx_PWMN_Start+0xa2>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2247      	movs	r2, #71	@ 0x47
 80058ea:	2102      	movs	r1, #2
 80058ec:	5499      	strb	r1, [r3, r2]

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	6839      	ldr	r1, [r7, #0]
 80058f4:	2204      	movs	r2, #4
 80058f6:	0018      	movs	r0, r3
 80058f8:	f000 f9a6 	bl	8005c48 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	2180      	movs	r1, #128	@ 0x80
 8005908:	0209      	lsls	r1, r1, #8
 800590a:	430a      	orrs	r2, r1
 800590c:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	4a19      	ldr	r2, [pc, #100]	@ (8005978 <HAL_TIMEx_PWMN_Start+0x12c>)
 8005914:	4293      	cmp	r3, r2
 8005916:	d009      	beq.n	800592c <HAL_TIMEx_PWMN_Start+0xe0>
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	4a17      	ldr	r2, [pc, #92]	@ (800597c <HAL_TIMEx_PWMN_Start+0x130>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d004      	beq.n	800592c <HAL_TIMEx_PWMN_Start+0xe0>
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	4a16      	ldr	r2, [pc, #88]	@ (8005980 <HAL_TIMEx_PWMN_Start+0x134>)
 8005928:	4293      	cmp	r3, r2
 800592a:	d116      	bne.n	800595a <HAL_TIMEx_PWMN_Start+0x10e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	689b      	ldr	r3, [r3, #8]
 8005932:	4a14      	ldr	r2, [pc, #80]	@ (8005984 <HAL_TIMEx_PWMN_Start+0x138>)
 8005934:	4013      	ands	r3, r2
 8005936:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	2b06      	cmp	r3, #6
 800593c:	d016      	beq.n	800596c <HAL_TIMEx_PWMN_Start+0x120>
 800593e:	68fa      	ldr	r2, [r7, #12]
 8005940:	2380      	movs	r3, #128	@ 0x80
 8005942:	025b      	lsls	r3, r3, #9
 8005944:	429a      	cmp	r2, r3
 8005946:	d011      	beq.n	800596c <HAL_TIMEx_PWMN_Start+0x120>
    {
      __HAL_TIM_ENABLE(htim);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	681a      	ldr	r2, [r3, #0]
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	2101      	movs	r1, #1
 8005954:	430a      	orrs	r2, r1
 8005956:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005958:	e008      	b.n	800596c <HAL_TIMEx_PWMN_Start+0x120>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	681a      	ldr	r2, [r3, #0]
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	2101      	movs	r1, #1
 8005966:	430a      	orrs	r2, r1
 8005968:	601a      	str	r2, [r3, #0]
 800596a:	e000      	b.n	800596e <HAL_TIMEx_PWMN_Start+0x122>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800596c:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800596e:	2300      	movs	r3, #0
}
 8005970:	0018      	movs	r0, r3
 8005972:	46bd      	mov	sp, r7
 8005974:	b004      	add	sp, #16
 8005976:	bd80      	pop	{r7, pc}
 8005978:	40012c00 	.word	0x40012c00
 800597c:	40000400 	.word	0x40000400
 8005980:	40014000 	.word	0x40014000
 8005984:	00010007 	.word	0x00010007

08005988 <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b082      	sub	sp, #8
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
 8005990:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	6839      	ldr	r1, [r7, #0]
 8005998:	2200      	movs	r2, #0
 800599a:	0018      	movs	r0, r3
 800599c:	f000 f954 	bl	8005c48 <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	6a1b      	ldr	r3, [r3, #32]
 80059a6:	4a23      	ldr	r2, [pc, #140]	@ (8005a34 <HAL_TIMEx_PWMN_Stop+0xac>)
 80059a8:	4013      	ands	r3, r2
 80059aa:	d10d      	bne.n	80059c8 <HAL_TIMEx_PWMN_Stop+0x40>
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	6a1b      	ldr	r3, [r3, #32]
 80059b2:	4a21      	ldr	r2, [pc, #132]	@ (8005a38 <HAL_TIMEx_PWMN_Stop+0xb0>)
 80059b4:	4013      	ands	r3, r2
 80059b6:	d107      	bne.n	80059c8 <HAL_TIMEx_PWMN_Stop+0x40>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	491e      	ldr	r1, [pc, #120]	@ (8005a3c <HAL_TIMEx_PWMN_Stop+0xb4>)
 80059c4:	400a      	ands	r2, r1
 80059c6:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	6a1b      	ldr	r3, [r3, #32]
 80059ce:	4a19      	ldr	r2, [pc, #100]	@ (8005a34 <HAL_TIMEx_PWMN_Stop+0xac>)
 80059d0:	4013      	ands	r3, r2
 80059d2:	d10d      	bne.n	80059f0 <HAL_TIMEx_PWMN_Stop+0x68>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	6a1b      	ldr	r3, [r3, #32]
 80059da:	4a17      	ldr	r2, [pc, #92]	@ (8005a38 <HAL_TIMEx_PWMN_Stop+0xb0>)
 80059dc:	4013      	ands	r3, r2
 80059de:	d107      	bne.n	80059f0 <HAL_TIMEx_PWMN_Stop+0x68>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	681a      	ldr	r2, [r3, #0]
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	2101      	movs	r1, #1
 80059ec:	438a      	bics	r2, r1
 80059ee:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d104      	bne.n	8005a00 <HAL_TIMEx_PWMN_Stop+0x78>
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2244      	movs	r2, #68	@ 0x44
 80059fa:	2101      	movs	r1, #1
 80059fc:	5499      	strb	r1, [r3, r2]
 80059fe:	e013      	b.n	8005a28 <HAL_TIMEx_PWMN_Stop+0xa0>
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	2b04      	cmp	r3, #4
 8005a04:	d104      	bne.n	8005a10 <HAL_TIMEx_PWMN_Stop+0x88>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2245      	movs	r2, #69	@ 0x45
 8005a0a:	2101      	movs	r1, #1
 8005a0c:	5499      	strb	r1, [r3, r2]
 8005a0e:	e00b      	b.n	8005a28 <HAL_TIMEx_PWMN_Stop+0xa0>
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	2b08      	cmp	r3, #8
 8005a14:	d104      	bne.n	8005a20 <HAL_TIMEx_PWMN_Stop+0x98>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2246      	movs	r2, #70	@ 0x46
 8005a1a:	2101      	movs	r1, #1
 8005a1c:	5499      	strb	r1, [r3, r2]
 8005a1e:	e003      	b.n	8005a28 <HAL_TIMEx_PWMN_Stop+0xa0>
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2247      	movs	r2, #71	@ 0x47
 8005a24:	2101      	movs	r1, #1
 8005a26:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8005a28:	2300      	movs	r3, #0
}
 8005a2a:	0018      	movs	r0, r3
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	b002      	add	sp, #8
 8005a30:	bd80      	pop	{r7, pc}
 8005a32:	46c0      	nop			@ (mov r8, r8)
 8005a34:	00001111 	.word	0x00001111
 8005a38:	00000444 	.word	0x00000444
 8005a3c:	ffff7fff 	.word	0xffff7fff

08005a40 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b084      	sub	sp, #16
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
 8005a48:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	223c      	movs	r2, #60	@ 0x3c
 8005a4e:	5c9b      	ldrb	r3, [r3, r2]
 8005a50:	2b01      	cmp	r3, #1
 8005a52:	d101      	bne.n	8005a58 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005a54:	2302      	movs	r3, #2
 8005a56:	e04f      	b.n	8005af8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	223c      	movs	r2, #60	@ 0x3c
 8005a5c:	2101      	movs	r1, #1
 8005a5e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	223d      	movs	r2, #61	@ 0x3d
 8005a64:	2102      	movs	r1, #2
 8005a66:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	685b      	ldr	r3, [r3, #4]
 8005a6e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	689b      	ldr	r3, [r3, #8]
 8005a76:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4a20      	ldr	r2, [pc, #128]	@ (8005b00 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d108      	bne.n	8005a94 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	4a1f      	ldr	r2, [pc, #124]	@ (8005b04 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005a86:	4013      	ands	r3, r2
 8005a88:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	685b      	ldr	r3, [r3, #4]
 8005a8e:	68fa      	ldr	r2, [r7, #12]
 8005a90:	4313      	orrs	r3, r2
 8005a92:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	2270      	movs	r2, #112	@ 0x70
 8005a98:	4393      	bics	r3, r2
 8005a9a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	68fa      	ldr	r2, [r7, #12]
 8005aa2:	4313      	orrs	r3, r2
 8005aa4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	68fa      	ldr	r2, [r7, #12]
 8005aac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	4a13      	ldr	r2, [pc, #76]	@ (8005b00 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	d009      	beq.n	8005acc <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	4a12      	ldr	r2, [pc, #72]	@ (8005b08 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d004      	beq.n	8005acc <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	4a11      	ldr	r2, [pc, #68]	@ (8005b0c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	d10c      	bne.n	8005ae6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005acc:	68bb      	ldr	r3, [r7, #8]
 8005ace:	2280      	movs	r2, #128	@ 0x80
 8005ad0:	4393      	bics	r3, r2
 8005ad2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	689b      	ldr	r3, [r3, #8]
 8005ad8:	68ba      	ldr	r2, [r7, #8]
 8005ada:	4313      	orrs	r3, r2
 8005adc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	68ba      	ldr	r2, [r7, #8]
 8005ae4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	223d      	movs	r2, #61	@ 0x3d
 8005aea:	2101      	movs	r1, #1
 8005aec:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	223c      	movs	r2, #60	@ 0x3c
 8005af2:	2100      	movs	r1, #0
 8005af4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005af6:	2300      	movs	r3, #0
}
 8005af8:	0018      	movs	r0, r3
 8005afa:	46bd      	mov	sp, r7
 8005afc:	b004      	add	sp, #16
 8005afe:	bd80      	pop	{r7, pc}
 8005b00:	40012c00 	.word	0x40012c00
 8005b04:	ff0fffff 	.word	0xff0fffff
 8005b08:	40000400 	.word	0x40000400
 8005b0c:	40014000 	.word	0x40014000

08005b10 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b084      	sub	sp, #16
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
 8005b18:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	223c      	movs	r2, #60	@ 0x3c
 8005b22:	5c9b      	ldrb	r3, [r3, r2]
 8005b24:	2b01      	cmp	r3, #1
 8005b26:	d101      	bne.n	8005b2c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005b28:	2302      	movs	r3, #2
 8005b2a:	e06f      	b.n	8005c0c <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	223c      	movs	r2, #60	@ 0x3c
 8005b30:	2101      	movs	r1, #1
 8005b32:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	22ff      	movs	r2, #255	@ 0xff
 8005b38:	4393      	bics	r3, r2
 8005b3a:	001a      	movs	r2, r3
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	68db      	ldr	r3, [r3, #12]
 8005b40:	4313      	orrs	r3, r2
 8005b42:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	4a33      	ldr	r2, [pc, #204]	@ (8005c14 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 8005b48:	401a      	ands	r2, r3
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	689b      	ldr	r3, [r3, #8]
 8005b4e:	4313      	orrs	r3, r2
 8005b50:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	4a30      	ldr	r2, [pc, #192]	@ (8005c18 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 8005b56:	401a      	ands	r2, r3
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	685b      	ldr	r3, [r3, #4]
 8005b5c:	4313      	orrs	r3, r2
 8005b5e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	4a2e      	ldr	r2, [pc, #184]	@ (8005c1c <HAL_TIMEx_ConfigBreakDeadTime+0x10c>)
 8005b64:	401a      	ands	r2, r3
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	4313      	orrs	r3, r2
 8005b6c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	4a2b      	ldr	r2, [pc, #172]	@ (8005c20 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8005b72:	401a      	ands	r2, r3
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	691b      	ldr	r3, [r3, #16]
 8005b78:	4313      	orrs	r3, r2
 8005b7a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	4a29      	ldr	r2, [pc, #164]	@ (8005c24 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8005b80:	401a      	ands	r2, r3
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	695b      	ldr	r3, [r3, #20]
 8005b86:	4313      	orrs	r3, r2
 8005b88:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	4a26      	ldr	r2, [pc, #152]	@ (8005c28 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8005b8e:	401a      	ands	r2, r3
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b94:	4313      	orrs	r3, r2
 8005b96:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	4a24      	ldr	r2, [pc, #144]	@ (8005c2c <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8005b9c:	401a      	ands	r2, r3
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	699b      	ldr	r3, [r3, #24]
 8005ba2:	041b      	lsls	r3, r3, #16
 8005ba4:	4313      	orrs	r3, r2
 8005ba6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	4a21      	ldr	r2, [pc, #132]	@ (8005c30 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8005bac:	401a      	ands	r2, r3
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	69db      	ldr	r3, [r3, #28]
 8005bb2:	4313      	orrs	r3, r2
 8005bb4:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	4a1e      	ldr	r2, [pc, #120]	@ (8005c34 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	d11c      	bne.n	8005bfa <HAL_TIMEx_ConfigBreakDeadTime+0xea>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	4a1d      	ldr	r2, [pc, #116]	@ (8005c38 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8005bc4:	401a      	ands	r2, r3
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bca:	051b      	lsls	r3, r3, #20
 8005bcc:	4313      	orrs	r3, r2
 8005bce:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	4a1a      	ldr	r2, [pc, #104]	@ (8005c3c <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8005bd4:	401a      	ands	r2, r3
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	6a1b      	ldr	r3, [r3, #32]
 8005bda:	4313      	orrs	r3, r2
 8005bdc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	4a17      	ldr	r2, [pc, #92]	@ (8005c40 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8005be2:	401a      	ands	r2, r3
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005be8:	4313      	orrs	r3, r2
 8005bea:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	4a15      	ldr	r2, [pc, #84]	@ (8005c44 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8005bf0:	401a      	ands	r2, r3
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bf6:	4313      	orrs	r3, r2
 8005bf8:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	68fa      	ldr	r2, [r7, #12]
 8005c00:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	223c      	movs	r2, #60	@ 0x3c
 8005c06:	2100      	movs	r1, #0
 8005c08:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005c0a:	2300      	movs	r3, #0
}
 8005c0c:	0018      	movs	r0, r3
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	b004      	add	sp, #16
 8005c12:	bd80      	pop	{r7, pc}
 8005c14:	fffffcff 	.word	0xfffffcff
 8005c18:	fffffbff 	.word	0xfffffbff
 8005c1c:	fffff7ff 	.word	0xfffff7ff
 8005c20:	ffffefff 	.word	0xffffefff
 8005c24:	ffffdfff 	.word	0xffffdfff
 8005c28:	ffffbfff 	.word	0xffffbfff
 8005c2c:	fff0ffff 	.word	0xfff0ffff
 8005c30:	efffffff 	.word	0xefffffff
 8005c34:	40012c00 	.word	0x40012c00
 8005c38:	ff0fffff 	.word	0xff0fffff
 8005c3c:	feffffff 	.word	0xfeffffff
 8005c40:	fdffffff 	.word	0xfdffffff
 8005c44:	dfffffff 	.word	0xdfffffff

08005c48 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b086      	sub	sp, #24
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	60f8      	str	r0, [r7, #12]
 8005c50:	60b9      	str	r1, [r7, #8]
 8005c52:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 8005c54:	68bb      	ldr	r3, [r7, #8]
 8005c56:	220f      	movs	r2, #15
 8005c58:	4013      	ands	r3, r2
 8005c5a:	2204      	movs	r2, #4
 8005c5c:	409a      	lsls	r2, r3
 8005c5e:	0013      	movs	r3, r2
 8005c60:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	6a1b      	ldr	r3, [r3, #32]
 8005c66:	697a      	ldr	r2, [r7, #20]
 8005c68:	43d2      	mvns	r2, r2
 8005c6a:	401a      	ands	r2, r3
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	6a1a      	ldr	r2, [r3, #32]
 8005c74:	68bb      	ldr	r3, [r7, #8]
 8005c76:	210f      	movs	r1, #15
 8005c78:	400b      	ands	r3, r1
 8005c7a:	6879      	ldr	r1, [r7, #4]
 8005c7c:	4099      	lsls	r1, r3
 8005c7e:	000b      	movs	r3, r1
 8005c80:	431a      	orrs	r2, r3
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	621a      	str	r2, [r3, #32]
}
 8005c86:	46c0      	nop			@ (mov r8, r8)
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	b006      	add	sp, #24
 8005c8c:	bd80      	pop	{r7, pc}
	...

08005c90 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b082      	sub	sp, #8
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d101      	bne.n	8005ca2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005c9e:	2301      	movs	r3, #1
 8005ca0:	e046      	b.n	8005d30 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	2288      	movs	r2, #136	@ 0x88
 8005ca6:	589b      	ldr	r3, [r3, r2]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d107      	bne.n	8005cbc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2284      	movs	r2, #132	@ 0x84
 8005cb0:	2100      	movs	r1, #0
 8005cb2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	0018      	movs	r0, r3
 8005cb8:	f7fc fde4 	bl	8002884 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2288      	movs	r2, #136	@ 0x88
 8005cc0:	2124      	movs	r1, #36	@ 0x24
 8005cc2:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	681a      	ldr	r2, [r3, #0]
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	2101      	movs	r1, #1
 8005cd0:	438a      	bics	r2, r1
 8005cd2:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d003      	beq.n	8005ce4 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	0018      	movs	r0, r3
 8005ce0:	f000 f9d0 	bl	8006084 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	0018      	movs	r0, r3
 8005ce8:	f000 f828 	bl	8005d3c <UART_SetConfig>
 8005cec:	0003      	movs	r3, r0
 8005cee:	2b01      	cmp	r3, #1
 8005cf0:	d101      	bne.n	8005cf6 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8005cf2:	2301      	movs	r3, #1
 8005cf4:	e01c      	b.n	8005d30 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	685a      	ldr	r2, [r3, #4]
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	490d      	ldr	r1, [pc, #52]	@ (8005d38 <HAL_UART_Init+0xa8>)
 8005d02:	400a      	ands	r2, r1
 8005d04:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	689a      	ldr	r2, [r3, #8]
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	212a      	movs	r1, #42	@ 0x2a
 8005d12:	438a      	bics	r2, r1
 8005d14:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	681a      	ldr	r2, [r3, #0]
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	2101      	movs	r1, #1
 8005d22:	430a      	orrs	r2, r1
 8005d24:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	0018      	movs	r0, r3
 8005d2a:	f000 fa5f 	bl	80061ec <UART_CheckIdleState>
 8005d2e:	0003      	movs	r3, r0
}
 8005d30:	0018      	movs	r0, r3
 8005d32:	46bd      	mov	sp, r7
 8005d34:	b002      	add	sp, #8
 8005d36:	bd80      	pop	{r7, pc}
 8005d38:	ffffb7ff 	.word	0xffffb7ff

08005d3c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	b088      	sub	sp, #32
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005d44:	231a      	movs	r3, #26
 8005d46:	18fb      	adds	r3, r7, r3
 8005d48:	2200      	movs	r2, #0
 8005d4a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	689a      	ldr	r2, [r3, #8]
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	691b      	ldr	r3, [r3, #16]
 8005d54:	431a      	orrs	r2, r3
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	695b      	ldr	r3, [r3, #20]
 8005d5a:	431a      	orrs	r2, r3
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	69db      	ldr	r3, [r3, #28]
 8005d60:	4313      	orrs	r3, r2
 8005d62:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	4abc      	ldr	r2, [pc, #752]	@ (800605c <UART_SetConfig+0x320>)
 8005d6c:	4013      	ands	r3, r2
 8005d6e:	0019      	movs	r1, r3
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	69fa      	ldr	r2, [r7, #28]
 8005d76:	430a      	orrs	r2, r1
 8005d78:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	685b      	ldr	r3, [r3, #4]
 8005d80:	4ab7      	ldr	r2, [pc, #732]	@ (8006060 <UART_SetConfig+0x324>)
 8005d82:	4013      	ands	r3, r2
 8005d84:	0019      	movs	r1, r3
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	68da      	ldr	r2, [r3, #12]
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	430a      	orrs	r2, r1
 8005d90:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	699b      	ldr	r3, [r3, #24]
 8005d96:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	6a1b      	ldr	r3, [r3, #32]
 8005d9c:	69fa      	ldr	r2, [r7, #28]
 8005d9e:	4313      	orrs	r3, r2
 8005da0:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	689b      	ldr	r3, [r3, #8]
 8005da8:	4aae      	ldr	r2, [pc, #696]	@ (8006064 <UART_SetConfig+0x328>)
 8005daa:	4013      	ands	r3, r2
 8005dac:	0019      	movs	r1, r3
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	69fa      	ldr	r2, [r7, #28]
 8005db4:	430a      	orrs	r2, r1
 8005db6:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dbe:	220f      	movs	r2, #15
 8005dc0:	4393      	bics	r3, r2
 8005dc2:	0019      	movs	r1, r3
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	430a      	orrs	r2, r1
 8005dce:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	4aa4      	ldr	r2, [pc, #656]	@ (8006068 <UART_SetConfig+0x32c>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d127      	bne.n	8005e2a <UART_SetConfig+0xee>
 8005dda:	4ba4      	ldr	r3, [pc, #656]	@ (800606c <UART_SetConfig+0x330>)
 8005ddc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005dde:	2203      	movs	r2, #3
 8005de0:	4013      	ands	r3, r2
 8005de2:	2b03      	cmp	r3, #3
 8005de4:	d017      	beq.n	8005e16 <UART_SetConfig+0xda>
 8005de6:	d81b      	bhi.n	8005e20 <UART_SetConfig+0xe4>
 8005de8:	2b02      	cmp	r3, #2
 8005dea:	d00a      	beq.n	8005e02 <UART_SetConfig+0xc6>
 8005dec:	d818      	bhi.n	8005e20 <UART_SetConfig+0xe4>
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d002      	beq.n	8005df8 <UART_SetConfig+0xbc>
 8005df2:	2b01      	cmp	r3, #1
 8005df4:	d00a      	beq.n	8005e0c <UART_SetConfig+0xd0>
 8005df6:	e013      	b.n	8005e20 <UART_SetConfig+0xe4>
 8005df8:	231b      	movs	r3, #27
 8005dfa:	18fb      	adds	r3, r7, r3
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	701a      	strb	r2, [r3, #0]
 8005e00:	e058      	b.n	8005eb4 <UART_SetConfig+0x178>
 8005e02:	231b      	movs	r3, #27
 8005e04:	18fb      	adds	r3, r7, r3
 8005e06:	2202      	movs	r2, #2
 8005e08:	701a      	strb	r2, [r3, #0]
 8005e0a:	e053      	b.n	8005eb4 <UART_SetConfig+0x178>
 8005e0c:	231b      	movs	r3, #27
 8005e0e:	18fb      	adds	r3, r7, r3
 8005e10:	2204      	movs	r2, #4
 8005e12:	701a      	strb	r2, [r3, #0]
 8005e14:	e04e      	b.n	8005eb4 <UART_SetConfig+0x178>
 8005e16:	231b      	movs	r3, #27
 8005e18:	18fb      	adds	r3, r7, r3
 8005e1a:	2208      	movs	r2, #8
 8005e1c:	701a      	strb	r2, [r3, #0]
 8005e1e:	e049      	b.n	8005eb4 <UART_SetConfig+0x178>
 8005e20:	231b      	movs	r3, #27
 8005e22:	18fb      	adds	r3, r7, r3
 8005e24:	2210      	movs	r2, #16
 8005e26:	701a      	strb	r2, [r3, #0]
 8005e28:	e044      	b.n	8005eb4 <UART_SetConfig+0x178>
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	4a90      	ldr	r2, [pc, #576]	@ (8006070 <UART_SetConfig+0x334>)
 8005e30:	4293      	cmp	r3, r2
 8005e32:	d127      	bne.n	8005e84 <UART_SetConfig+0x148>
 8005e34:	4b8d      	ldr	r3, [pc, #564]	@ (800606c <UART_SetConfig+0x330>)
 8005e36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e38:	220c      	movs	r2, #12
 8005e3a:	4013      	ands	r3, r2
 8005e3c:	2b0c      	cmp	r3, #12
 8005e3e:	d017      	beq.n	8005e70 <UART_SetConfig+0x134>
 8005e40:	d81b      	bhi.n	8005e7a <UART_SetConfig+0x13e>
 8005e42:	2b08      	cmp	r3, #8
 8005e44:	d00a      	beq.n	8005e5c <UART_SetConfig+0x120>
 8005e46:	d818      	bhi.n	8005e7a <UART_SetConfig+0x13e>
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d002      	beq.n	8005e52 <UART_SetConfig+0x116>
 8005e4c:	2b04      	cmp	r3, #4
 8005e4e:	d00a      	beq.n	8005e66 <UART_SetConfig+0x12a>
 8005e50:	e013      	b.n	8005e7a <UART_SetConfig+0x13e>
 8005e52:	231b      	movs	r3, #27
 8005e54:	18fb      	adds	r3, r7, r3
 8005e56:	2200      	movs	r2, #0
 8005e58:	701a      	strb	r2, [r3, #0]
 8005e5a:	e02b      	b.n	8005eb4 <UART_SetConfig+0x178>
 8005e5c:	231b      	movs	r3, #27
 8005e5e:	18fb      	adds	r3, r7, r3
 8005e60:	2202      	movs	r2, #2
 8005e62:	701a      	strb	r2, [r3, #0]
 8005e64:	e026      	b.n	8005eb4 <UART_SetConfig+0x178>
 8005e66:	231b      	movs	r3, #27
 8005e68:	18fb      	adds	r3, r7, r3
 8005e6a:	2204      	movs	r2, #4
 8005e6c:	701a      	strb	r2, [r3, #0]
 8005e6e:	e021      	b.n	8005eb4 <UART_SetConfig+0x178>
 8005e70:	231b      	movs	r3, #27
 8005e72:	18fb      	adds	r3, r7, r3
 8005e74:	2208      	movs	r2, #8
 8005e76:	701a      	strb	r2, [r3, #0]
 8005e78:	e01c      	b.n	8005eb4 <UART_SetConfig+0x178>
 8005e7a:	231b      	movs	r3, #27
 8005e7c:	18fb      	adds	r3, r7, r3
 8005e7e:	2210      	movs	r2, #16
 8005e80:	701a      	strb	r2, [r3, #0]
 8005e82:	e017      	b.n	8005eb4 <UART_SetConfig+0x178>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	4a7a      	ldr	r2, [pc, #488]	@ (8006074 <UART_SetConfig+0x338>)
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d104      	bne.n	8005e98 <UART_SetConfig+0x15c>
 8005e8e:	231b      	movs	r3, #27
 8005e90:	18fb      	adds	r3, r7, r3
 8005e92:	2200      	movs	r2, #0
 8005e94:	701a      	strb	r2, [r3, #0]
 8005e96:	e00d      	b.n	8005eb4 <UART_SetConfig+0x178>
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	4a76      	ldr	r2, [pc, #472]	@ (8006078 <UART_SetConfig+0x33c>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d104      	bne.n	8005eac <UART_SetConfig+0x170>
 8005ea2:	231b      	movs	r3, #27
 8005ea4:	18fb      	adds	r3, r7, r3
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	701a      	strb	r2, [r3, #0]
 8005eaa:	e003      	b.n	8005eb4 <UART_SetConfig+0x178>
 8005eac:	231b      	movs	r3, #27
 8005eae:	18fb      	adds	r3, r7, r3
 8005eb0:	2210      	movs	r2, #16
 8005eb2:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	69da      	ldr	r2, [r3, #28]
 8005eb8:	2380      	movs	r3, #128	@ 0x80
 8005eba:	021b      	lsls	r3, r3, #8
 8005ebc:	429a      	cmp	r2, r3
 8005ebe:	d000      	beq.n	8005ec2 <UART_SetConfig+0x186>
 8005ec0:	e065      	b.n	8005f8e <UART_SetConfig+0x252>
  {
    switch (clocksource)
 8005ec2:	231b      	movs	r3, #27
 8005ec4:	18fb      	adds	r3, r7, r3
 8005ec6:	781b      	ldrb	r3, [r3, #0]
 8005ec8:	2b08      	cmp	r3, #8
 8005eca:	d015      	beq.n	8005ef8 <UART_SetConfig+0x1bc>
 8005ecc:	dc18      	bgt.n	8005f00 <UART_SetConfig+0x1c4>
 8005ece:	2b04      	cmp	r3, #4
 8005ed0:	d00d      	beq.n	8005eee <UART_SetConfig+0x1b2>
 8005ed2:	dc15      	bgt.n	8005f00 <UART_SetConfig+0x1c4>
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d002      	beq.n	8005ede <UART_SetConfig+0x1a2>
 8005ed8:	2b02      	cmp	r3, #2
 8005eda:	d005      	beq.n	8005ee8 <UART_SetConfig+0x1ac>
 8005edc:	e010      	b.n	8005f00 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ede:	f7fe fcf9 	bl	80048d4 <HAL_RCC_GetPCLK1Freq>
 8005ee2:	0003      	movs	r3, r0
 8005ee4:	617b      	str	r3, [r7, #20]
        break;
 8005ee6:	e012      	b.n	8005f0e <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ee8:	4b64      	ldr	r3, [pc, #400]	@ (800607c <UART_SetConfig+0x340>)
 8005eea:	617b      	str	r3, [r7, #20]
        break;
 8005eec:	e00f      	b.n	8005f0e <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005eee:	f7fe fc65 	bl	80047bc <HAL_RCC_GetSysClockFreq>
 8005ef2:	0003      	movs	r3, r0
 8005ef4:	617b      	str	r3, [r7, #20]
        break;
 8005ef6:	e00a      	b.n	8005f0e <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ef8:	2380      	movs	r3, #128	@ 0x80
 8005efa:	021b      	lsls	r3, r3, #8
 8005efc:	617b      	str	r3, [r7, #20]
        break;
 8005efe:	e006      	b.n	8005f0e <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8005f00:	2300      	movs	r3, #0
 8005f02:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005f04:	231a      	movs	r3, #26
 8005f06:	18fb      	adds	r3, r7, r3
 8005f08:	2201      	movs	r2, #1
 8005f0a:	701a      	strb	r2, [r3, #0]
        break;
 8005f0c:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005f0e:	697b      	ldr	r3, [r7, #20]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d100      	bne.n	8005f16 <UART_SetConfig+0x1da>
 8005f14:	e08d      	b.n	8006032 <UART_SetConfig+0x2f6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005f1a:	4b59      	ldr	r3, [pc, #356]	@ (8006080 <UART_SetConfig+0x344>)
 8005f1c:	0052      	lsls	r2, r2, #1
 8005f1e:	5ad3      	ldrh	r3, [r2, r3]
 8005f20:	0019      	movs	r1, r3
 8005f22:	6978      	ldr	r0, [r7, #20]
 8005f24:	f7fa f948 	bl	80001b8 <__udivsi3>
 8005f28:	0003      	movs	r3, r0
 8005f2a:	005a      	lsls	r2, r3, #1
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	685b      	ldr	r3, [r3, #4]
 8005f30:	085b      	lsrs	r3, r3, #1
 8005f32:	18d2      	adds	r2, r2, r3
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	685b      	ldr	r3, [r3, #4]
 8005f38:	0019      	movs	r1, r3
 8005f3a:	0010      	movs	r0, r2
 8005f3c:	f7fa f93c 	bl	80001b8 <__udivsi3>
 8005f40:	0003      	movs	r3, r0
 8005f42:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005f44:	693b      	ldr	r3, [r7, #16]
 8005f46:	2b0f      	cmp	r3, #15
 8005f48:	d91c      	bls.n	8005f84 <UART_SetConfig+0x248>
 8005f4a:	693a      	ldr	r2, [r7, #16]
 8005f4c:	2380      	movs	r3, #128	@ 0x80
 8005f4e:	025b      	lsls	r3, r3, #9
 8005f50:	429a      	cmp	r2, r3
 8005f52:	d217      	bcs.n	8005f84 <UART_SetConfig+0x248>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005f54:	693b      	ldr	r3, [r7, #16]
 8005f56:	b29a      	uxth	r2, r3
 8005f58:	200e      	movs	r0, #14
 8005f5a:	183b      	adds	r3, r7, r0
 8005f5c:	210f      	movs	r1, #15
 8005f5e:	438a      	bics	r2, r1
 8005f60:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005f62:	693b      	ldr	r3, [r7, #16]
 8005f64:	085b      	lsrs	r3, r3, #1
 8005f66:	b29b      	uxth	r3, r3
 8005f68:	2207      	movs	r2, #7
 8005f6a:	4013      	ands	r3, r2
 8005f6c:	b299      	uxth	r1, r3
 8005f6e:	183b      	adds	r3, r7, r0
 8005f70:	183a      	adds	r2, r7, r0
 8005f72:	8812      	ldrh	r2, [r2, #0]
 8005f74:	430a      	orrs	r2, r1
 8005f76:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	183a      	adds	r2, r7, r0
 8005f7e:	8812      	ldrh	r2, [r2, #0]
 8005f80:	60da      	str	r2, [r3, #12]
 8005f82:	e056      	b.n	8006032 <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 8005f84:	231a      	movs	r3, #26
 8005f86:	18fb      	adds	r3, r7, r3
 8005f88:	2201      	movs	r2, #1
 8005f8a:	701a      	strb	r2, [r3, #0]
 8005f8c:	e051      	b.n	8006032 <UART_SetConfig+0x2f6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005f8e:	231b      	movs	r3, #27
 8005f90:	18fb      	adds	r3, r7, r3
 8005f92:	781b      	ldrb	r3, [r3, #0]
 8005f94:	2b08      	cmp	r3, #8
 8005f96:	d015      	beq.n	8005fc4 <UART_SetConfig+0x288>
 8005f98:	dc18      	bgt.n	8005fcc <UART_SetConfig+0x290>
 8005f9a:	2b04      	cmp	r3, #4
 8005f9c:	d00d      	beq.n	8005fba <UART_SetConfig+0x27e>
 8005f9e:	dc15      	bgt.n	8005fcc <UART_SetConfig+0x290>
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d002      	beq.n	8005faa <UART_SetConfig+0x26e>
 8005fa4:	2b02      	cmp	r3, #2
 8005fa6:	d005      	beq.n	8005fb4 <UART_SetConfig+0x278>
 8005fa8:	e010      	b.n	8005fcc <UART_SetConfig+0x290>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005faa:	f7fe fc93 	bl	80048d4 <HAL_RCC_GetPCLK1Freq>
 8005fae:	0003      	movs	r3, r0
 8005fb0:	617b      	str	r3, [r7, #20]
        break;
 8005fb2:	e012      	b.n	8005fda <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005fb4:	4b31      	ldr	r3, [pc, #196]	@ (800607c <UART_SetConfig+0x340>)
 8005fb6:	617b      	str	r3, [r7, #20]
        break;
 8005fb8:	e00f      	b.n	8005fda <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005fba:	f7fe fbff 	bl	80047bc <HAL_RCC_GetSysClockFreq>
 8005fbe:	0003      	movs	r3, r0
 8005fc0:	617b      	str	r3, [r7, #20]
        break;
 8005fc2:	e00a      	b.n	8005fda <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005fc4:	2380      	movs	r3, #128	@ 0x80
 8005fc6:	021b      	lsls	r3, r3, #8
 8005fc8:	617b      	str	r3, [r7, #20]
        break;
 8005fca:	e006      	b.n	8005fda <UART_SetConfig+0x29e>
      default:
        pclk = 0U;
 8005fcc:	2300      	movs	r3, #0
 8005fce:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005fd0:	231a      	movs	r3, #26
 8005fd2:	18fb      	adds	r3, r7, r3
 8005fd4:	2201      	movs	r2, #1
 8005fd6:	701a      	strb	r2, [r3, #0]
        break;
 8005fd8:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8005fda:	697b      	ldr	r3, [r7, #20]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d028      	beq.n	8006032 <UART_SetConfig+0x2f6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005fe4:	4b26      	ldr	r3, [pc, #152]	@ (8006080 <UART_SetConfig+0x344>)
 8005fe6:	0052      	lsls	r2, r2, #1
 8005fe8:	5ad3      	ldrh	r3, [r2, r3]
 8005fea:	0019      	movs	r1, r3
 8005fec:	6978      	ldr	r0, [r7, #20]
 8005fee:	f7fa f8e3 	bl	80001b8 <__udivsi3>
 8005ff2:	0003      	movs	r3, r0
 8005ff4:	001a      	movs	r2, r3
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	685b      	ldr	r3, [r3, #4]
 8005ffa:	085b      	lsrs	r3, r3, #1
 8005ffc:	18d2      	adds	r2, r2, r3
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	685b      	ldr	r3, [r3, #4]
 8006002:	0019      	movs	r1, r3
 8006004:	0010      	movs	r0, r2
 8006006:	f7fa f8d7 	bl	80001b8 <__udivsi3>
 800600a:	0003      	movs	r3, r0
 800600c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800600e:	693b      	ldr	r3, [r7, #16]
 8006010:	2b0f      	cmp	r3, #15
 8006012:	d90a      	bls.n	800602a <UART_SetConfig+0x2ee>
 8006014:	693a      	ldr	r2, [r7, #16]
 8006016:	2380      	movs	r3, #128	@ 0x80
 8006018:	025b      	lsls	r3, r3, #9
 800601a:	429a      	cmp	r2, r3
 800601c:	d205      	bcs.n	800602a <UART_SetConfig+0x2ee>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800601e:	693b      	ldr	r3, [r7, #16]
 8006020:	b29a      	uxth	r2, r3
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	60da      	str	r2, [r3, #12]
 8006028:	e003      	b.n	8006032 <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 800602a:	231a      	movs	r3, #26
 800602c:	18fb      	adds	r3, r7, r3
 800602e:	2201      	movs	r2, #1
 8006030:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	226a      	movs	r2, #106	@ 0x6a
 8006036:	2101      	movs	r1, #1
 8006038:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2268      	movs	r2, #104	@ 0x68
 800603e:	2101      	movs	r1, #1
 8006040:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2200      	movs	r2, #0
 8006046:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2200      	movs	r2, #0
 800604c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800604e:	231a      	movs	r3, #26
 8006050:	18fb      	adds	r3, r7, r3
 8006052:	781b      	ldrb	r3, [r3, #0]
}
 8006054:	0018      	movs	r0, r3
 8006056:	46bd      	mov	sp, r7
 8006058:	b008      	add	sp, #32
 800605a:	bd80      	pop	{r7, pc}
 800605c:	cfff69f3 	.word	0xcfff69f3
 8006060:	ffffcfff 	.word	0xffffcfff
 8006064:	11fff4ff 	.word	0x11fff4ff
 8006068:	40013800 	.word	0x40013800
 800606c:	40021000 	.word	0x40021000
 8006070:	40004400 	.word	0x40004400
 8006074:	40004800 	.word	0x40004800
 8006078:	40004c00 	.word	0x40004c00
 800607c:	00f42400 	.word	0x00f42400
 8006080:	0800a1cc 	.word	0x0800a1cc

08006084 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006084:	b580      	push	{r7, lr}
 8006086:	b082      	sub	sp, #8
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006090:	2208      	movs	r2, #8
 8006092:	4013      	ands	r3, r2
 8006094:	d00b      	beq.n	80060ae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	685b      	ldr	r3, [r3, #4]
 800609c:	4a4a      	ldr	r2, [pc, #296]	@ (80061c8 <UART_AdvFeatureConfig+0x144>)
 800609e:	4013      	ands	r3, r2
 80060a0:	0019      	movs	r1, r3
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	430a      	orrs	r2, r1
 80060ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060b2:	2201      	movs	r2, #1
 80060b4:	4013      	ands	r3, r2
 80060b6:	d00b      	beq.n	80060d0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	685b      	ldr	r3, [r3, #4]
 80060be:	4a43      	ldr	r2, [pc, #268]	@ (80061cc <UART_AdvFeatureConfig+0x148>)
 80060c0:	4013      	ands	r3, r2
 80060c2:	0019      	movs	r1, r3
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	430a      	orrs	r2, r1
 80060ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060d4:	2202      	movs	r2, #2
 80060d6:	4013      	ands	r3, r2
 80060d8:	d00b      	beq.n	80060f2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	685b      	ldr	r3, [r3, #4]
 80060e0:	4a3b      	ldr	r2, [pc, #236]	@ (80061d0 <UART_AdvFeatureConfig+0x14c>)
 80060e2:	4013      	ands	r3, r2
 80060e4:	0019      	movs	r1, r3
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	430a      	orrs	r2, r1
 80060f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060f6:	2204      	movs	r2, #4
 80060f8:	4013      	ands	r3, r2
 80060fa:	d00b      	beq.n	8006114 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	685b      	ldr	r3, [r3, #4]
 8006102:	4a34      	ldr	r2, [pc, #208]	@ (80061d4 <UART_AdvFeatureConfig+0x150>)
 8006104:	4013      	ands	r3, r2
 8006106:	0019      	movs	r1, r3
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	430a      	orrs	r2, r1
 8006112:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006118:	2210      	movs	r2, #16
 800611a:	4013      	ands	r3, r2
 800611c:	d00b      	beq.n	8006136 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	689b      	ldr	r3, [r3, #8]
 8006124:	4a2c      	ldr	r2, [pc, #176]	@ (80061d8 <UART_AdvFeatureConfig+0x154>)
 8006126:	4013      	ands	r3, r2
 8006128:	0019      	movs	r1, r3
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	430a      	orrs	r2, r1
 8006134:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800613a:	2220      	movs	r2, #32
 800613c:	4013      	ands	r3, r2
 800613e:	d00b      	beq.n	8006158 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	689b      	ldr	r3, [r3, #8]
 8006146:	4a25      	ldr	r2, [pc, #148]	@ (80061dc <UART_AdvFeatureConfig+0x158>)
 8006148:	4013      	ands	r3, r2
 800614a:	0019      	movs	r1, r3
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	430a      	orrs	r2, r1
 8006156:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800615c:	2240      	movs	r2, #64	@ 0x40
 800615e:	4013      	ands	r3, r2
 8006160:	d01d      	beq.n	800619e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	685b      	ldr	r3, [r3, #4]
 8006168:	4a1d      	ldr	r2, [pc, #116]	@ (80061e0 <UART_AdvFeatureConfig+0x15c>)
 800616a:	4013      	ands	r3, r2
 800616c:	0019      	movs	r1, r3
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	430a      	orrs	r2, r1
 8006178:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800617e:	2380      	movs	r3, #128	@ 0x80
 8006180:	035b      	lsls	r3, r3, #13
 8006182:	429a      	cmp	r2, r3
 8006184:	d10b      	bne.n	800619e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	685b      	ldr	r3, [r3, #4]
 800618c:	4a15      	ldr	r2, [pc, #84]	@ (80061e4 <UART_AdvFeatureConfig+0x160>)
 800618e:	4013      	ands	r3, r2
 8006190:	0019      	movs	r1, r3
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	430a      	orrs	r2, r1
 800619c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061a2:	2280      	movs	r2, #128	@ 0x80
 80061a4:	4013      	ands	r3, r2
 80061a6:	d00b      	beq.n	80061c0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	685b      	ldr	r3, [r3, #4]
 80061ae:	4a0e      	ldr	r2, [pc, #56]	@ (80061e8 <UART_AdvFeatureConfig+0x164>)
 80061b0:	4013      	ands	r3, r2
 80061b2:	0019      	movs	r1, r3
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	430a      	orrs	r2, r1
 80061be:	605a      	str	r2, [r3, #4]
  }
}
 80061c0:	46c0      	nop			@ (mov r8, r8)
 80061c2:	46bd      	mov	sp, r7
 80061c4:	b002      	add	sp, #8
 80061c6:	bd80      	pop	{r7, pc}
 80061c8:	ffff7fff 	.word	0xffff7fff
 80061cc:	fffdffff 	.word	0xfffdffff
 80061d0:	fffeffff 	.word	0xfffeffff
 80061d4:	fffbffff 	.word	0xfffbffff
 80061d8:	ffffefff 	.word	0xffffefff
 80061dc:	ffffdfff 	.word	0xffffdfff
 80061e0:	ffefffff 	.word	0xffefffff
 80061e4:	ff9fffff 	.word	0xff9fffff
 80061e8:	fff7ffff 	.word	0xfff7ffff

080061ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b092      	sub	sp, #72	@ 0x48
 80061f0:	af02      	add	r7, sp, #8
 80061f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2290      	movs	r2, #144	@ 0x90
 80061f8:	2100      	movs	r1, #0
 80061fa:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80061fc:	f7fc fc6e 	bl	8002adc <HAL_GetTick>
 8006200:	0003      	movs	r3, r0
 8006202:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	2208      	movs	r2, #8
 800620c:	4013      	ands	r3, r2
 800620e:	2b08      	cmp	r3, #8
 8006210:	d12d      	bne.n	800626e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006212:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006214:	2280      	movs	r2, #128	@ 0x80
 8006216:	0391      	lsls	r1, r2, #14
 8006218:	6878      	ldr	r0, [r7, #4]
 800621a:	4a47      	ldr	r2, [pc, #284]	@ (8006338 <UART_CheckIdleState+0x14c>)
 800621c:	9200      	str	r2, [sp, #0]
 800621e:	2200      	movs	r2, #0
 8006220:	f000 f88e 	bl	8006340 <UART_WaitOnFlagUntilTimeout>
 8006224:	1e03      	subs	r3, r0, #0
 8006226:	d022      	beq.n	800626e <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006228:	f3ef 8310 	mrs	r3, PRIMASK
 800622c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800622e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006230:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006232:	2301      	movs	r3, #1
 8006234:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006236:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006238:	f383 8810 	msr	PRIMASK, r3
}
 800623c:	46c0      	nop			@ (mov r8, r8)
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	681a      	ldr	r2, [r3, #0]
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	2180      	movs	r1, #128	@ 0x80
 800624a:	438a      	bics	r2, r1
 800624c:	601a      	str	r2, [r3, #0]
 800624e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006250:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006252:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006254:	f383 8810 	msr	PRIMASK, r3
}
 8006258:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	2288      	movs	r2, #136	@ 0x88
 800625e:	2120      	movs	r1, #32
 8006260:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	2284      	movs	r2, #132	@ 0x84
 8006266:	2100      	movs	r1, #0
 8006268:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800626a:	2303      	movs	r3, #3
 800626c:	e060      	b.n	8006330 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	2204      	movs	r2, #4
 8006276:	4013      	ands	r3, r2
 8006278:	2b04      	cmp	r3, #4
 800627a:	d146      	bne.n	800630a <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800627c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800627e:	2280      	movs	r2, #128	@ 0x80
 8006280:	03d1      	lsls	r1, r2, #15
 8006282:	6878      	ldr	r0, [r7, #4]
 8006284:	4a2c      	ldr	r2, [pc, #176]	@ (8006338 <UART_CheckIdleState+0x14c>)
 8006286:	9200      	str	r2, [sp, #0]
 8006288:	2200      	movs	r2, #0
 800628a:	f000 f859 	bl	8006340 <UART_WaitOnFlagUntilTimeout>
 800628e:	1e03      	subs	r3, r0, #0
 8006290:	d03b      	beq.n	800630a <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006292:	f3ef 8310 	mrs	r3, PRIMASK
 8006296:	60fb      	str	r3, [r7, #12]
  return(result);
 8006298:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800629a:	637b      	str	r3, [r7, #52]	@ 0x34
 800629c:	2301      	movs	r3, #1
 800629e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80062a0:	693b      	ldr	r3, [r7, #16]
 80062a2:	f383 8810 	msr	PRIMASK, r3
}
 80062a6:	46c0      	nop			@ (mov r8, r8)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	681a      	ldr	r2, [r3, #0]
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	4922      	ldr	r1, [pc, #136]	@ (800633c <UART_CheckIdleState+0x150>)
 80062b4:	400a      	ands	r2, r1
 80062b6:	601a      	str	r2, [r3, #0]
 80062b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062ba:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80062bc:	697b      	ldr	r3, [r7, #20]
 80062be:	f383 8810 	msr	PRIMASK, r3
}
 80062c2:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80062c4:	f3ef 8310 	mrs	r3, PRIMASK
 80062c8:	61bb      	str	r3, [r7, #24]
  return(result);
 80062ca:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062cc:	633b      	str	r3, [r7, #48]	@ 0x30
 80062ce:	2301      	movs	r3, #1
 80062d0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80062d2:	69fb      	ldr	r3, [r7, #28]
 80062d4:	f383 8810 	msr	PRIMASK, r3
}
 80062d8:	46c0      	nop			@ (mov r8, r8)
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	689a      	ldr	r2, [r3, #8]
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	2101      	movs	r1, #1
 80062e6:	438a      	bics	r2, r1
 80062e8:	609a      	str	r2, [r3, #8]
 80062ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062ec:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80062ee:	6a3b      	ldr	r3, [r7, #32]
 80062f0:	f383 8810 	msr	PRIMASK, r3
}
 80062f4:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	228c      	movs	r2, #140	@ 0x8c
 80062fa:	2120      	movs	r1, #32
 80062fc:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	2284      	movs	r2, #132	@ 0x84
 8006302:	2100      	movs	r1, #0
 8006304:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006306:	2303      	movs	r3, #3
 8006308:	e012      	b.n	8006330 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	2288      	movs	r2, #136	@ 0x88
 800630e:	2120      	movs	r1, #32
 8006310:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	228c      	movs	r2, #140	@ 0x8c
 8006316:	2120      	movs	r1, #32
 8006318:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2200      	movs	r2, #0
 800631e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2200      	movs	r2, #0
 8006324:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	2284      	movs	r2, #132	@ 0x84
 800632a:	2100      	movs	r1, #0
 800632c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800632e:	2300      	movs	r3, #0
}
 8006330:	0018      	movs	r0, r3
 8006332:	46bd      	mov	sp, r7
 8006334:	b010      	add	sp, #64	@ 0x40
 8006336:	bd80      	pop	{r7, pc}
 8006338:	01ffffff 	.word	0x01ffffff
 800633c:	fffffedf 	.word	0xfffffedf

08006340 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006340:	b580      	push	{r7, lr}
 8006342:	b084      	sub	sp, #16
 8006344:	af00      	add	r7, sp, #0
 8006346:	60f8      	str	r0, [r7, #12]
 8006348:	60b9      	str	r1, [r7, #8]
 800634a:	603b      	str	r3, [r7, #0]
 800634c:	1dfb      	adds	r3, r7, #7
 800634e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006350:	e051      	b.n	80063f6 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006352:	69bb      	ldr	r3, [r7, #24]
 8006354:	3301      	adds	r3, #1
 8006356:	d04e      	beq.n	80063f6 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006358:	f7fc fbc0 	bl	8002adc <HAL_GetTick>
 800635c:	0002      	movs	r2, r0
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	1ad3      	subs	r3, r2, r3
 8006362:	69ba      	ldr	r2, [r7, #24]
 8006364:	429a      	cmp	r2, r3
 8006366:	d302      	bcc.n	800636e <UART_WaitOnFlagUntilTimeout+0x2e>
 8006368:	69bb      	ldr	r3, [r7, #24]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d101      	bne.n	8006372 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800636e:	2303      	movs	r3, #3
 8006370:	e051      	b.n	8006416 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	2204      	movs	r2, #4
 800637a:	4013      	ands	r3, r2
 800637c:	d03b      	beq.n	80063f6 <UART_WaitOnFlagUntilTimeout+0xb6>
 800637e:	68bb      	ldr	r3, [r7, #8]
 8006380:	2b80      	cmp	r3, #128	@ 0x80
 8006382:	d038      	beq.n	80063f6 <UART_WaitOnFlagUntilTimeout+0xb6>
 8006384:	68bb      	ldr	r3, [r7, #8]
 8006386:	2b40      	cmp	r3, #64	@ 0x40
 8006388:	d035      	beq.n	80063f6 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	69db      	ldr	r3, [r3, #28]
 8006390:	2208      	movs	r2, #8
 8006392:	4013      	ands	r3, r2
 8006394:	2b08      	cmp	r3, #8
 8006396:	d111      	bne.n	80063bc <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	2208      	movs	r2, #8
 800639e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	0018      	movs	r0, r3
 80063a4:	f000 f83c 	bl	8006420 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	2290      	movs	r2, #144	@ 0x90
 80063ac:	2108      	movs	r1, #8
 80063ae:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	2284      	movs	r2, #132	@ 0x84
 80063b4:	2100      	movs	r1, #0
 80063b6:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80063b8:	2301      	movs	r3, #1
 80063ba:	e02c      	b.n	8006416 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	69da      	ldr	r2, [r3, #28]
 80063c2:	2380      	movs	r3, #128	@ 0x80
 80063c4:	011b      	lsls	r3, r3, #4
 80063c6:	401a      	ands	r2, r3
 80063c8:	2380      	movs	r3, #128	@ 0x80
 80063ca:	011b      	lsls	r3, r3, #4
 80063cc:	429a      	cmp	r2, r3
 80063ce:	d112      	bne.n	80063f6 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	2280      	movs	r2, #128	@ 0x80
 80063d6:	0112      	lsls	r2, r2, #4
 80063d8:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	0018      	movs	r0, r3
 80063de:	f000 f81f 	bl	8006420 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	2290      	movs	r2, #144	@ 0x90
 80063e6:	2120      	movs	r1, #32
 80063e8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	2284      	movs	r2, #132	@ 0x84
 80063ee:	2100      	movs	r1, #0
 80063f0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80063f2:	2303      	movs	r3, #3
 80063f4:	e00f      	b.n	8006416 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	69db      	ldr	r3, [r3, #28]
 80063fc:	68ba      	ldr	r2, [r7, #8]
 80063fe:	4013      	ands	r3, r2
 8006400:	68ba      	ldr	r2, [r7, #8]
 8006402:	1ad3      	subs	r3, r2, r3
 8006404:	425a      	negs	r2, r3
 8006406:	4153      	adcs	r3, r2
 8006408:	b2db      	uxtb	r3, r3
 800640a:	001a      	movs	r2, r3
 800640c:	1dfb      	adds	r3, r7, #7
 800640e:	781b      	ldrb	r3, [r3, #0]
 8006410:	429a      	cmp	r2, r3
 8006412:	d09e      	beq.n	8006352 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006414:	2300      	movs	r3, #0
}
 8006416:	0018      	movs	r0, r3
 8006418:	46bd      	mov	sp, r7
 800641a:	b004      	add	sp, #16
 800641c:	bd80      	pop	{r7, pc}
	...

08006420 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006420:	b580      	push	{r7, lr}
 8006422:	b08e      	sub	sp, #56	@ 0x38
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006428:	f3ef 8310 	mrs	r3, PRIMASK
 800642c:	617b      	str	r3, [r7, #20]
  return(result);
 800642e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006430:	637b      	str	r3, [r7, #52]	@ 0x34
 8006432:	2301      	movs	r3, #1
 8006434:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006436:	69bb      	ldr	r3, [r7, #24]
 8006438:	f383 8810 	msr	PRIMASK, r3
}
 800643c:	46c0      	nop			@ (mov r8, r8)
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	681a      	ldr	r2, [r3, #0]
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	4926      	ldr	r1, [pc, #152]	@ (80064e4 <UART_EndRxTransfer+0xc4>)
 800644a:	400a      	ands	r2, r1
 800644c:	601a      	str	r2, [r3, #0]
 800644e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006450:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006452:	69fb      	ldr	r3, [r7, #28]
 8006454:	f383 8810 	msr	PRIMASK, r3
}
 8006458:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800645a:	f3ef 8310 	mrs	r3, PRIMASK
 800645e:	623b      	str	r3, [r7, #32]
  return(result);
 8006460:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006462:	633b      	str	r3, [r7, #48]	@ 0x30
 8006464:	2301      	movs	r3, #1
 8006466:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006468:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800646a:	f383 8810 	msr	PRIMASK, r3
}
 800646e:	46c0      	nop			@ (mov r8, r8)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	689a      	ldr	r2, [r3, #8]
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	491b      	ldr	r1, [pc, #108]	@ (80064e8 <UART_EndRxTransfer+0xc8>)
 800647c:	400a      	ands	r2, r1
 800647e:	609a      	str	r2, [r3, #8]
 8006480:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006482:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006484:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006486:	f383 8810 	msr	PRIMASK, r3
}
 800648a:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006490:	2b01      	cmp	r3, #1
 8006492:	d118      	bne.n	80064c6 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006494:	f3ef 8310 	mrs	r3, PRIMASK
 8006498:	60bb      	str	r3, [r7, #8]
  return(result);
 800649a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800649c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800649e:	2301      	movs	r3, #1
 80064a0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	f383 8810 	msr	PRIMASK, r3
}
 80064a8:	46c0      	nop			@ (mov r8, r8)
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	681a      	ldr	r2, [r3, #0]
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	2110      	movs	r1, #16
 80064b6:	438a      	bics	r2, r1
 80064b8:	601a      	str	r2, [r3, #0]
 80064ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064bc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80064be:	693b      	ldr	r3, [r7, #16]
 80064c0:	f383 8810 	msr	PRIMASK, r3
}
 80064c4:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	228c      	movs	r2, #140	@ 0x8c
 80064ca:	2120      	movs	r1, #32
 80064cc:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	2200      	movs	r2, #0
 80064d2:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2200      	movs	r2, #0
 80064d8:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80064da:	46c0      	nop			@ (mov r8, r8)
 80064dc:	46bd      	mov	sp, r7
 80064de:	b00e      	add	sp, #56	@ 0x38
 80064e0:	bd80      	pop	{r7, pc}
 80064e2:	46c0      	nop			@ (mov r8, r8)
 80064e4:	fffffedf 	.word	0xfffffedf
 80064e8:	effffffe 	.word	0xeffffffe

080064ec <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80064ec:	b580      	push	{r7, lr}
 80064ee:	b084      	sub	sp, #16
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2284      	movs	r2, #132	@ 0x84
 80064f8:	5c9b      	ldrb	r3, [r3, r2]
 80064fa:	2b01      	cmp	r3, #1
 80064fc:	d101      	bne.n	8006502 <HAL_UARTEx_DisableFifoMode+0x16>
 80064fe:	2302      	movs	r3, #2
 8006500:	e027      	b.n	8006552 <HAL_UARTEx_DisableFifoMode+0x66>
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	2284      	movs	r2, #132	@ 0x84
 8006506:	2101      	movs	r1, #1
 8006508:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	2288      	movs	r2, #136	@ 0x88
 800650e:	2124      	movs	r1, #36	@ 0x24
 8006510:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	681a      	ldr	r2, [r3, #0]
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	2101      	movs	r1, #1
 8006526:	438a      	bics	r2, r1
 8006528:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	4a0b      	ldr	r2, [pc, #44]	@ (800655c <HAL_UARTEx_DisableFifoMode+0x70>)
 800652e:	4013      	ands	r3, r2
 8006530:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	2200      	movs	r2, #0
 8006536:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	68fa      	ldr	r2, [r7, #12]
 800653e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2288      	movs	r2, #136	@ 0x88
 8006544:	2120      	movs	r1, #32
 8006546:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2284      	movs	r2, #132	@ 0x84
 800654c:	2100      	movs	r1, #0
 800654e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006550:	2300      	movs	r3, #0
}
 8006552:	0018      	movs	r0, r3
 8006554:	46bd      	mov	sp, r7
 8006556:	b004      	add	sp, #16
 8006558:	bd80      	pop	{r7, pc}
 800655a:	46c0      	nop			@ (mov r8, r8)
 800655c:	dfffffff 	.word	0xdfffffff

08006560 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006560:	b580      	push	{r7, lr}
 8006562:	b084      	sub	sp, #16
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
 8006568:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2284      	movs	r2, #132	@ 0x84
 800656e:	5c9b      	ldrb	r3, [r3, r2]
 8006570:	2b01      	cmp	r3, #1
 8006572:	d101      	bne.n	8006578 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006574:	2302      	movs	r3, #2
 8006576:	e02e      	b.n	80065d6 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2284      	movs	r2, #132	@ 0x84
 800657c:	2101      	movs	r1, #1
 800657e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2288      	movs	r2, #136	@ 0x88
 8006584:	2124      	movs	r1, #36	@ 0x24
 8006586:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	681a      	ldr	r2, [r3, #0]
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	2101      	movs	r1, #1
 800659c:	438a      	bics	r2, r1
 800659e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	689b      	ldr	r3, [r3, #8]
 80065a6:	00db      	lsls	r3, r3, #3
 80065a8:	08d9      	lsrs	r1, r3, #3
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	683a      	ldr	r2, [r7, #0]
 80065b0:	430a      	orrs	r2, r1
 80065b2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	0018      	movs	r0, r3
 80065b8:	f000 f854 	bl	8006664 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	68fa      	ldr	r2, [r7, #12]
 80065c2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2288      	movs	r2, #136	@ 0x88
 80065c8:	2120      	movs	r1, #32
 80065ca:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2284      	movs	r2, #132	@ 0x84
 80065d0:	2100      	movs	r1, #0
 80065d2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80065d4:	2300      	movs	r3, #0
}
 80065d6:	0018      	movs	r0, r3
 80065d8:	46bd      	mov	sp, r7
 80065da:	b004      	add	sp, #16
 80065dc:	bd80      	pop	{r7, pc}
	...

080065e0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b084      	sub	sp, #16
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
 80065e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2284      	movs	r2, #132	@ 0x84
 80065ee:	5c9b      	ldrb	r3, [r3, r2]
 80065f0:	2b01      	cmp	r3, #1
 80065f2:	d101      	bne.n	80065f8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80065f4:	2302      	movs	r3, #2
 80065f6:	e02f      	b.n	8006658 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2284      	movs	r2, #132	@ 0x84
 80065fc:	2101      	movs	r1, #1
 80065fe:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2288      	movs	r2, #136	@ 0x88
 8006604:	2124      	movs	r1, #36	@ 0x24
 8006606:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	681a      	ldr	r2, [r3, #0]
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	2101      	movs	r1, #1
 800661c:	438a      	bics	r2, r1
 800661e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	689b      	ldr	r3, [r3, #8]
 8006626:	4a0e      	ldr	r2, [pc, #56]	@ (8006660 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8006628:	4013      	ands	r3, r2
 800662a:	0019      	movs	r1, r3
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	683a      	ldr	r2, [r7, #0]
 8006632:	430a      	orrs	r2, r1
 8006634:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	0018      	movs	r0, r3
 800663a:	f000 f813 	bl	8006664 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	68fa      	ldr	r2, [r7, #12]
 8006644:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	2288      	movs	r2, #136	@ 0x88
 800664a:	2120      	movs	r1, #32
 800664c:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	2284      	movs	r2, #132	@ 0x84
 8006652:	2100      	movs	r1, #0
 8006654:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006656:	2300      	movs	r3, #0
}
 8006658:	0018      	movs	r0, r3
 800665a:	46bd      	mov	sp, r7
 800665c:	b004      	add	sp, #16
 800665e:	bd80      	pop	{r7, pc}
 8006660:	f1ffffff 	.word	0xf1ffffff

08006664 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006664:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006666:	b085      	sub	sp, #20
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006670:	2b00      	cmp	r3, #0
 8006672:	d108      	bne.n	8006686 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	226a      	movs	r2, #106	@ 0x6a
 8006678:	2101      	movs	r1, #1
 800667a:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2268      	movs	r2, #104	@ 0x68
 8006680:	2101      	movs	r1, #1
 8006682:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006684:	e043      	b.n	800670e <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006686:	260f      	movs	r6, #15
 8006688:	19bb      	adds	r3, r7, r6
 800668a:	2208      	movs	r2, #8
 800668c:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800668e:	200e      	movs	r0, #14
 8006690:	183b      	adds	r3, r7, r0
 8006692:	2208      	movs	r2, #8
 8006694:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	689b      	ldr	r3, [r3, #8]
 800669c:	0e5b      	lsrs	r3, r3, #25
 800669e:	b2da      	uxtb	r2, r3
 80066a0:	240d      	movs	r4, #13
 80066a2:	193b      	adds	r3, r7, r4
 80066a4:	2107      	movs	r1, #7
 80066a6:	400a      	ands	r2, r1
 80066a8:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	689b      	ldr	r3, [r3, #8]
 80066b0:	0f5b      	lsrs	r3, r3, #29
 80066b2:	b2da      	uxtb	r2, r3
 80066b4:	250c      	movs	r5, #12
 80066b6:	197b      	adds	r3, r7, r5
 80066b8:	2107      	movs	r1, #7
 80066ba:	400a      	ands	r2, r1
 80066bc:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80066be:	183b      	adds	r3, r7, r0
 80066c0:	781b      	ldrb	r3, [r3, #0]
 80066c2:	197a      	adds	r2, r7, r5
 80066c4:	7812      	ldrb	r2, [r2, #0]
 80066c6:	4914      	ldr	r1, [pc, #80]	@ (8006718 <UARTEx_SetNbDataToProcess+0xb4>)
 80066c8:	5c8a      	ldrb	r2, [r1, r2]
 80066ca:	435a      	muls	r2, r3
 80066cc:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 80066ce:	197b      	adds	r3, r7, r5
 80066d0:	781b      	ldrb	r3, [r3, #0]
 80066d2:	4a12      	ldr	r2, [pc, #72]	@ (800671c <UARTEx_SetNbDataToProcess+0xb8>)
 80066d4:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80066d6:	0019      	movs	r1, r3
 80066d8:	f7f9 fdf8 	bl	80002cc <__divsi3>
 80066dc:	0003      	movs	r3, r0
 80066de:	b299      	uxth	r1, r3
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	226a      	movs	r2, #106	@ 0x6a
 80066e4:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80066e6:	19bb      	adds	r3, r7, r6
 80066e8:	781b      	ldrb	r3, [r3, #0]
 80066ea:	193a      	adds	r2, r7, r4
 80066ec:	7812      	ldrb	r2, [r2, #0]
 80066ee:	490a      	ldr	r1, [pc, #40]	@ (8006718 <UARTEx_SetNbDataToProcess+0xb4>)
 80066f0:	5c8a      	ldrb	r2, [r1, r2]
 80066f2:	435a      	muls	r2, r3
 80066f4:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 80066f6:	193b      	adds	r3, r7, r4
 80066f8:	781b      	ldrb	r3, [r3, #0]
 80066fa:	4a08      	ldr	r2, [pc, #32]	@ (800671c <UARTEx_SetNbDataToProcess+0xb8>)
 80066fc:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80066fe:	0019      	movs	r1, r3
 8006700:	f7f9 fde4 	bl	80002cc <__divsi3>
 8006704:	0003      	movs	r3, r0
 8006706:	b299      	uxth	r1, r3
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2268      	movs	r2, #104	@ 0x68
 800670c:	5299      	strh	r1, [r3, r2]
}
 800670e:	46c0      	nop			@ (mov r8, r8)
 8006710:	46bd      	mov	sp, r7
 8006712:	b005      	add	sp, #20
 8006714:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006716:	46c0      	nop			@ (mov r8, r8)
 8006718:	0800a1e4 	.word	0x0800a1e4
 800671c:	0800a1ec 	.word	0x0800a1ec

08006720 <Reset_Handler>:



extern void Reset_Handler(void) __attribute__((__interrupt__));
void Reset_Handler(void)
{
 8006720:	b580      	push	{r7, lr}
 8006722:	b082      	sub	sp, #8
 8006724:	af00      	add	r7, sp, #0
 8006726:	4b13      	ldr	r3, [pc, #76]	@ (8006774 <Reset_Handler+0x54>)
 8006728:	607b      	str	r3, [r7, #4]
 800672a:	4b13      	ldr	r3, [pc, #76]	@ (8006778 <Reset_Handler+0x58>)
 800672c:	603b      	str	r3, [r7, #0]
 800672e:	e007      	b.n	8006740 <Reset_Handler+0x20>
 8006730:	687a      	ldr	r2, [r7, #4]
 8006732:	1d13      	adds	r3, r2, #4
 8006734:	607b      	str	r3, [r7, #4]
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	1d19      	adds	r1, r3, #4
 800673a:	6039      	str	r1, [r7, #0]
 800673c:	6812      	ldr	r2, [r2, #0]
 800673e:	601a      	str	r2, [r3, #0]
 8006740:	683a      	ldr	r2, [r7, #0]
 8006742:	4b0e      	ldr	r3, [pc, #56]	@ (800677c <Reset_Handler+0x5c>)
 8006744:	429a      	cmp	r2, r3
 8006746:	d3f3      	bcc.n	8006730 <Reset_Handler+0x10>
 8006748:	4b0d      	ldr	r3, [pc, #52]	@ (8006780 <Reset_Handler+0x60>)
 800674a:	603b      	str	r3, [r7, #0]
 800674c:	e004      	b.n	8006758 <Reset_Handler+0x38>
 800674e:	683b      	ldr	r3, [r7, #0]
 8006750:	1d1a      	adds	r2, r3, #4
 8006752:	603a      	str	r2, [r7, #0]
 8006754:	2200      	movs	r2, #0
 8006756:	601a      	str	r2, [r3, #0]
 8006758:	683a      	ldr	r2, [r7, #0]
    while (dst < &_edata)
        *dst++ = *src++;

    // Zero out the .bss segment
    dst = &_sbss;
    while (dst < &_ebss)
 800675a:	4b0a      	ldr	r3, [pc, #40]	@ (8006784 <Reset_Handler+0x64>)
 800675c:	429a      	cmp	r2, r3
 800675e:	d3f6      	bcc.n	800674e <Reset_Handler+0x2e>
        *dst++ = 0;

    VTOR_REG = (uint32_t)vectors;
 8006760:	4b09      	ldr	r3, [pc, #36]	@ (8006788 <Reset_Handler+0x68>)
 8006762:	4a0a      	ldr	r2, [pc, #40]	@ (800678c <Reset_Handler+0x6c>)
 8006764:	601a      	str	r2, [r3, #0]

    //__libc_init_array();

    main();
 8006766:	f7fb fb3d 	bl	8001de4 <main>
}
 800676a:	46c0      	nop			@ (mov r8, r8)
 800676c:	46bd      	mov	sp, r7
 800676e:	b002      	add	sp, #8
 8006770:	bd80      	pop	{r7, pc}
 8006772:	46c0      	nop			@ (mov r8, r8)
 8006774:	0800acc4 	.word	0x0800acc4
 8006778:	20000000 	.word	0x20000000
 800677c:	2000013c 	.word	0x2000013c
 8006780:	2000013c 	.word	0x2000013c
 8006784:	2000064c 	.word	0x2000064c
 8006788:	e000ed08 	.word	0xe000ed08
 800678c:	080000b8 	.word	0x080000b8

08006790 <cyclic_fifo_queue_add_item>:
    queue->output_byte = 0x00;
}


unsigned int cyclic_fifo_queue_add_item(cyclic_fifo_queue_struct* queue, const void* new_item)
{
 8006790:	b580      	push	{r7, lr}
 8006792:	b084      	sub	sp, #16
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
 8006798:	6039      	str	r1, [r7, #0]
    if((queue->input + 1 != queue->output) && /* If there is one item's worth of room between the input and output indices. */
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	1c5a      	adds	r2, r3, #1
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	685b      	ldr	r3, [r3, #4]
 80067a4:	429a      	cmp	r2, r3
 80067a6:	d033      	beq.n	8006810 <cyclic_fifo_queue_add_item+0x80>
       !((queue->input == queue->elements_in_array_minus_one) && (queue->output == 0))) /* Check for room again, this time accounting for a possible array wraparound. */
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681a      	ldr	r2, [r3, #0]
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	695b      	ldr	r3, [r3, #20]
    if((queue->input + 1 != queue->output) && /* If there is one item's worth of room between the input and output indices. */
 80067b0:	429a      	cmp	r2, r3
 80067b2:	d103      	bne.n	80067bc <cyclic_fifo_queue_add_item+0x2c>
       !((queue->input == queue->elements_in_array_minus_one) && (queue->output == 0))) /* Check for room again, this time accounting for a possible array wraparound. */
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	685b      	ldr	r3, [r3, #4]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d029      	beq.n	8006810 <cyclic_fifo_queue_add_item+0x80>
    {
        /* We treat the void pointers as arrays of uint8_t. */
        uint8_t* array      = queue->array;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	699b      	ldr	r3, [r3, #24]
 80067c0:	60fb      	str	r3, [r7, #12]
        const uint8_t* item = new_item;
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	60bb      	str	r3, [r7, #8]

        /* Copy the new item into the array. */
        (void)memcpy(&array[queue->input_byte], item, queue->item_size);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	689b      	ldr	r3, [r3, #8]
 80067ca:	68fa      	ldr	r2, [r7, #12]
 80067cc:	18d0      	adds	r0, r2, r3
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	691a      	ldr	r2, [r3, #16]
 80067d2:	68bb      	ldr	r3, [r7, #8]
 80067d4:	0019      	movs	r1, r3
 80067d6:	f003 fc65 	bl	800a0a4 <memcpy>

        /* Increment the input index. */
        if(queue->input >= queue->elements_in_array_minus_one)
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681a      	ldr	r2, [r3, #0]
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	695b      	ldr	r3, [r3, #20]
 80067e2:	429a      	cmp	r2, r3
 80067e4:	d306      	bcc.n	80067f4 <cyclic_fifo_queue_add_item+0x64>
        {
            /* The input index has run past the end of the array, so we're 
             * wrapping it around to 0.
             */
            queue->input      = 0;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	2200      	movs	r2, #0
 80067ea:	601a      	str	r2, [r3, #0]
            queue->input_byte = 0;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2200      	movs	r2, #0
 80067f0:	609a      	str	r2, [r3, #8]
 80067f2:	e00b      	b.n	800680c <cyclic_fifo_queue_add_item+0x7c>
        }
        else
        {
            queue->input++;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	1c5a      	adds	r2, r3, #1
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	601a      	str	r2, [r3, #0]

            /* Keep track of input * item_size to avoid a multiplication in the memcpy(). */
            queue->input_byte += queue->item_size; 
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	689a      	ldr	r2, [r3, #8]
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	691b      	ldr	r3, [r3, #16]
 8006806:	18d2      	adds	r2, r2, r3
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	609a      	str	r2, [r3, #8]
        }

        return 0; /* success */
 800680c:	2300      	movs	r3, #0
 800680e:	e000      	b.n	8006812 <cyclic_fifo_queue_add_item+0x82>
    }

    return 1; /* failure: queue full */
 8006810:	2301      	movs	r3, #1
}
 8006812:	0018      	movs	r0, r3
 8006814:	46bd      	mov	sp, r7
 8006816:	b004      	add	sp, #16
 8006818:	bd80      	pop	{r7, pc}

0800681a <cyclic_fifo_queue_get_item>:


unsigned int cyclic_fifo_queue_get_item(cyclic_fifo_queue_struct* queue, void* item)
{
 800681a:	b580      	push	{r7, lr}
 800681c:	b084      	sub	sp, #16
 800681e:	af00      	add	r7, sp, #0
 8006820:	6078      	str	r0, [r7, #4]
 8006822:	6039      	str	r1, [r7, #0]
    if(queue->input == queue->output)
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681a      	ldr	r2, [r3, #0]
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	685b      	ldr	r3, [r3, #4]
 800682c:	429a      	cmp	r2, r3
 800682e:	d101      	bne.n	8006834 <cyclic_fifo_queue_get_item+0x1a>
    {
        return 1; /* failure: queue empty */
 8006830:	2301      	movs	r3, #1
 8006832:	e028      	b.n	8006886 <cyclic_fifo_queue_get_item+0x6c>
    }
    else
    {
        /* We treat the void pointers as arrays of uint8_t. */
        uint8_t* array = queue->array;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	699b      	ldr	r3, [r3, #24]
 8006838:	60fb      	str	r3, [r7, #12]
        uint8_t* output_item = item;
 800683a:	683b      	ldr	r3, [r7, #0]
 800683c:	60bb      	str	r3, [r7, #8]

        /* Copy the next item from the array into the output variable. */
        (void)memcpy(output_item, &array[queue->output_byte], queue->item_size);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	68db      	ldr	r3, [r3, #12]
 8006842:	68fa      	ldr	r2, [r7, #12]
 8006844:	18d1      	adds	r1, r2, r3
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	691a      	ldr	r2, [r3, #16]
 800684a:	68bb      	ldr	r3, [r7, #8]
 800684c:	0018      	movs	r0, r3
 800684e:	f003 fc29 	bl	800a0a4 <memcpy>

        /* Increment the output index. */
        if(queue->output >= queue->elements_in_array_minus_one)
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	685a      	ldr	r2, [r3, #4]
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	695b      	ldr	r3, [r3, #20]
 800685a:	429a      	cmp	r2, r3
 800685c:	d306      	bcc.n	800686c <cyclic_fifo_queue_get_item+0x52>
        {
            /* The output index has run past the end of the array, so we're 
             * wrapping it around to 0.
             */
            queue->output      = 0;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	2200      	movs	r2, #0
 8006862:	605a      	str	r2, [r3, #4]
            queue->output_byte = 0;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2200      	movs	r2, #0
 8006868:	60da      	str	r2, [r3, #12]
 800686a:	e00b      	b.n	8006884 <cyclic_fifo_queue_get_item+0x6a>
        }
        else
        {
            queue->output++;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	685b      	ldr	r3, [r3, #4]
 8006870:	1c5a      	adds	r2, r3, #1
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	605a      	str	r2, [r3, #4]

            /* Keep track of output * item_size to avoid a multiplication in the memcpy(). */
            queue->output_byte += queue->item_size;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	68da      	ldr	r2, [r3, #12]
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	691b      	ldr	r3, [r3, #16]
 800687e:	18d2      	adds	r2, r2, r3
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	60da      	str	r2, [r3, #12]
        }
    }

    return 0; /* success */
 8006884:	2300      	movs	r3, #0
}
 8006886:	0018      	movs	r0, r3
 8006888:	46bd      	mov	sp, r7
 800688a:	b004      	add	sp, #16
 800688c:	bd80      	pop	{r7, pc}

0800688e <read_mem>:
#define NOT_INVALIDATED_MARKER      0xFF

typedef uint32_t key_t;				/* Assume key's will never be larger than 32 bits. This is mainly for reading. fcs->bytes_per_key is used for writing */

static void read_mem( const flash_controller_struct *fcs, const uint8_t *start, uint8_t *buffer, size_t length_minus_one )
{
 800688e:	b580      	push	{r7, lr}
 8006890:	b084      	sub	sp, #16
 8006892:	af00      	add	r7, sp, #0
 8006894:	60f8      	str	r0, [r7, #12]
 8006896:	60b9      	str	r1, [r7, #8]
 8006898:	607a      	str	r2, [r7, #4]
 800689a:	603b      	str	r3, [r7, #0]
	// Flash callback can be for external memory or it can be just direct access to internal memory
	if( fcs->flash_read_callback )
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	699b      	ldr	r3, [r3, #24]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d006      	beq.n	80068b2 <read_mem+0x24>
	{
		fcs->flash_read_callback( (uint8_t*)start, buffer, length_minus_one );
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	699b      	ldr	r3, [r3, #24]
 80068a8:	683a      	ldr	r2, [r7, #0]
 80068aa:	6879      	ldr	r1, [r7, #4]
 80068ac:	68b8      	ldr	r0, [r7, #8]
 80068ae:	4798      	blx	r3
	else
	{
		// If no callback is provided, assume we are on internal flash and memory is directly accessible by a pointer as originally designed
		memcpy( buffer, start, length_minus_one + 1);
	}
}
 80068b0:	e006      	b.n	80068c0 <read_mem+0x32>
		memcpy( buffer, start, length_minus_one + 1);
 80068b2:	683b      	ldr	r3, [r7, #0]
 80068b4:	1c5a      	adds	r2, r3, #1
 80068b6:	68b9      	ldr	r1, [r7, #8]
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	0018      	movs	r0, r3
 80068bc:	f003 fbf2 	bl	800a0a4 <memcpy>
}
 80068c0:	46c0      	nop			@ (mov r8, r8)
 80068c2:	46bd      	mov	sp, r7
 80068c4:	b004      	add	sp, #16
 80068c6:	bd80      	pop	{r7, pc}

080068c8 <point_to_value_from_index>:

static const uint8_t* point_to_value_from_index(const flash_controller_struct *fcs,
                                                const uint8_t *index,
                                                const uint8_t* sector_group_start)
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b086      	sub	sp, #24
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	60f8      	str	r0, [r7, #12]
 80068d0:	60b9      	str	r1, [r7, #8]
 80068d2:	607a      	str	r2, [r7, #4]
    uint16_t offset; /* offset is stored as 2 bytes, big-endian */

    read_mem( fcs, index + (fcs->minimum_writeable_bytes * 2) + fcs->bytes_per_key, fcs->scratchpadBuffer, sizeof(offset) - 1);
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	791b      	ldrb	r3, [r3, #4]
 80068d8:	005b      	lsls	r3, r3, #1
 80068da:	001a      	movs	r2, r3
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	795b      	ldrb	r3, [r3, #5]
 80068e0:	18d3      	adds	r3, r2, r3
 80068e2:	68ba      	ldr	r2, [r7, #8]
 80068e4:	18d1      	adds	r1, r2, r3
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80068ea:	68f8      	ldr	r0, [r7, #12]
 80068ec:	2301      	movs	r3, #1
 80068ee:	f7ff ffce 	bl	800688e <read_mem>

    /* convert big-endian bytes into one uint16_t */
    offset = (fcs->scratchpadBuffer[0] << 8) | fcs->scratchpadBuffer[1];
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80068f6:	781b      	ldrb	r3, [r3, #0]
 80068f8:	b21b      	sxth	r3, r3
 80068fa:	021b      	lsls	r3, r3, #8
 80068fc:	b21a      	sxth	r2, r3
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006902:	3301      	adds	r3, #1
 8006904:	781b      	ldrb	r3, [r3, #0]
 8006906:	b21b      	sxth	r3, r3
 8006908:	4313      	orrs	r3, r2
 800690a:	b21a      	sxth	r2, r3
 800690c:	2116      	movs	r1, #22
 800690e:	187b      	adds	r3, r7, r1
 8006910:	801a      	strh	r2, [r3, #0]

    /* The offset is an offset from the beginning of the sector group.  So
     * convert the two byte offset into an actual address.
     */
    return sector_group_start + offset;
 8006912:	187b      	adds	r3, r7, r1
 8006914:	881b      	ldrh	r3, [r3, #0]
 8006916:	687a      	ldr	r2, [r7, #4]
 8006918:	18d3      	adds	r3, r2, r3
}
 800691a:	0018      	movs	r0, r3
 800691c:	46bd      	mov	sp, r7
 800691e:	b006      	add	sp, #24
 8006920:	bd80      	pop	{r7, pc}

08006922 <get_active_sector_group_address>:


static const uint8_t* get_active_sector_group_address(const flash_controller_struct *fcs)
{
 8006922:	b580      	push	{r7, lr}
 8006924:	b082      	sub	sp, #8
 8006926:	af00      	add	r7, sp, #0
 8006928:	6078      	str	r0, [r7, #4]
	read_mem( fcs, fcs->second_sector_group_start, &fcs->scratchpadBuffer[0], 0);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	68d9      	ldr	r1, [r3, #12]
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006932:	6878      	ldr	r0, [r7, #4]
 8006934:	2300      	movs	r3, #0
 8006936:	f7ff ffaa 	bl	800688e <read_mem>

	return fcs->scratchpadBuffer[0] /*fcs->second_sector_group_start[0]*/ != NOT_VALIDATED_MARKER ? fcs->second_sector_group_start : fcs->first_sector_group_start;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800693e:	781b      	ldrb	r3, [r3, #0]
 8006940:	2bff      	cmp	r3, #255	@ 0xff
 8006942:	d002      	beq.n	800694a <get_active_sector_group_address+0x28>
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	68db      	ldr	r3, [r3, #12]
 8006948:	e001      	b.n	800694e <get_active_sector_group_address+0x2c>
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	689b      	ldr	r3, [r3, #8]
}
 800694e:	0018      	movs	r0, r3
 8006950:	46bd      	mov	sp, r7
 8006952:	b002      	add	sp, #8
 8006954:	bd80      	pop	{r7, pc}

08006956 <get_last_address_of_sector_group>:


static const uint8_t* get_last_address_of_sector_group(const flash_controller_struct *fcs, const uint8_t* sector_group_start)
{
 8006956:	b580      	push	{r7, lr}
 8006958:	b082      	sub	sp, #8
 800695a:	af00      	add	r7, sp, #0
 800695c:	6078      	str	r0, [r7, #4]
 800695e:	6039      	str	r1, [r7, #0]
    return sector_group_start + fcs->sector_group_length_minus_one;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	683a      	ldr	r2, [r7, #0]
 8006966:	18d3      	adds	r3, r2, r3
}
 8006968:	0018      	movs	r0, r3
 800696a:	46bd      	mov	sp, r7
 800696c:	b002      	add	sp, #8
 800696e:	bd80      	pop	{r7, pc}

08006970 <get_sizeof_index_location>:


static size_t get_sizeof_index_location(const flash_controller_struct *fcs)
{
 8006970:	b580      	push	{r7, lr}
 8006972:	b084      	sub	sp, #16
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
	// The size of the index location must be a multiple of fcs->minimum_writeable_bytes.

	// Start by calculating the size of the information to be written into the index location:
	size_t indexLocationSize = (fcs->minimum_writeable_bytes * 2) + fcs->bytes_per_key + BYTES_OF_OFFSET_FIELD + BYTES_OF_LENGTH_FIELD;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	791b      	ldrb	r3, [r3, #4]
 800697c:	005b      	lsls	r3, r3, #1
 800697e:	687a      	ldr	r2, [r7, #4]
 8006980:	7952      	ldrb	r2, [r2, #5]
 8006982:	189b      	adds	r3, r3, r2
 8006984:	3303      	adds	r3, #3
 8006986:	60fb      	str	r3, [r7, #12]

	// Now if necessary, add bytes to the length until it is a multiple of fcs->minimum_writeable_bytes:
	while (indexLocationSize & (fcs->minimum_writeable_bytes - 1))
 8006988:	e002      	b.n	8006990 <get_sizeof_index_location+0x20>
	{
		// indexLocationSize isn't a multiple of fcs->minimum_writeable_bytes yet so add one to the size and check again.
		++indexLocationSize;
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	3301      	adds	r3, #1
 800698e:	60fb      	str	r3, [r7, #12]
	while (indexLocationSize & (fcs->minimum_writeable_bytes - 1))
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	791b      	ldrb	r3, [r3, #4]
 8006994:	3b01      	subs	r3, #1
 8006996:	001a      	movs	r2, r3
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	4013      	ands	r3, r2
 800699c:	d1f5      	bne.n	800698a <get_sizeof_index_location+0x1a>
	}

    return indexLocationSize;
 800699e:	68fb      	ldr	r3, [r7, #12]
}
 80069a0:	0018      	movs	r0, r3
 80069a2:	46bd      	mov	sp, r7
 80069a4:	b004      	add	sp, #16
 80069a6:	bd80      	pop	{r7, pc}

080069a8 <is_all_0xFFs>:

static unsigned int is_all_0xFFs(const flash_controller_struct *fcs, const uint8_t start[], size_t length_minus_one)
{
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b088      	sub	sp, #32
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	60f8      	str	r0, [r7, #12]
 80069b0:	60b9      	str	r1, [r7, #8]
 80069b2:	607a      	str	r2, [r7, #4]
	size_t locLength = length_minus_one;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	61fb      	str	r3, [r7, #28]
	size_t readSize;
	size_t i = 0;
 80069b8:	2300      	movs	r3, #0
 80069ba:	617b      	str	r3, [r7, #20]

	while( locLength )
 80069bc:	e02d      	b.n	8006a1a <is_all_0xFFs+0x72>
	{
		readSize = locLength > fcs->scratchpadBufferSz ? fcs->scratchpadBufferSz : locLength;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80069c2:	69fb      	ldr	r3, [r7, #28]
 80069c4:	4293      	cmp	r3, r2
 80069c6:	d900      	bls.n	80069ca <is_all_0xFFs+0x22>
 80069c8:	0013      	movs	r3, r2
 80069ca:	61bb      	str	r3, [r7, #24]
		read_mem( fcs, start, fcs->scratchpadBuffer, readSize-1);
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80069d0:	69bb      	ldr	r3, [r7, #24]
 80069d2:	3b01      	subs	r3, #1
 80069d4:	68b9      	ldr	r1, [r7, #8]
 80069d6:	68f8      	ldr	r0, [r7, #12]
 80069d8:	f7ff ff59 	bl	800688e <read_mem>
		locLength = locLength > fcs->scratchpadBufferSz ? locLength - fcs->scratchpadBufferSz : 0;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069e0:	69fa      	ldr	r2, [r7, #28]
 80069e2:	429a      	cmp	r2, r3
 80069e4:	d904      	bls.n	80069f0 <is_all_0xFFs+0x48>
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069ea:	69fa      	ldr	r2, [r7, #28]
 80069ec:	1ad3      	subs	r3, r2, r3
 80069ee:	e000      	b.n	80069f2 <is_all_0xFFs+0x4a>
 80069f0:	2300      	movs	r3, #0
 80069f2:	61fb      	str	r3, [r7, #28]
		i = 0;
 80069f4:	2300      	movs	r3, #0
 80069f6:	617b      	str	r3, [r7, #20]
		// Check for all 0xFF
	    do
	    {
	        if(fcs->scratchpadBuffer[i++] != 0xFF)
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80069fc:	697b      	ldr	r3, [r7, #20]
 80069fe:	1c59      	adds	r1, r3, #1
 8006a00:	6179      	str	r1, [r7, #20]
 8006a02:	18d3      	adds	r3, r2, r3
 8006a04:	781b      	ldrb	r3, [r3, #0]
 8006a06:	2bff      	cmp	r3, #255	@ 0xff
 8006a08:	d001      	beq.n	8006a0e <is_all_0xFFs+0x66>
	        {
	            return 0; /* not all 0xFFs */
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	e009      	b.n	8006a22 <is_all_0xFFs+0x7a>
	        }
	    } while(--readSize > 0);
 8006a0e:	69bb      	ldr	r3, [r7, #24]
 8006a10:	3b01      	subs	r3, #1
 8006a12:	61bb      	str	r3, [r7, #24]
 8006a14:	69bb      	ldr	r3, [r7, #24]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d1ee      	bne.n	80069f8 <is_all_0xFFs+0x50>
	while( locLength )
 8006a1a:	69fb      	ldr	r3, [r7, #28]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d1ce      	bne.n	80069be <is_all_0xFFs+0x16>
	}
    return 1; /* all 0xFFs */
 8006a20:	2301      	movs	r3, #1
}
 8006a22:	0018      	movs	r0, r3
 8006a24:	46bd      	mov	sp, r7
 8006a26:	b008      	add	sp, #32
 8006a28:	bd80      	pop	{r7, pc}

08006a2a <is_index_location_empty>:


static unsigned int is_index_location_empty(const flash_controller_struct *fcs,
                                            const uint8_t *location)
{
 8006a2a:	b580      	push	{r7, lr}
 8006a2c:	b082      	sub	sp, #8
 8006a2e:	af00      	add	r7, sp, #0
 8006a30:	6078      	str	r0, [r7, #4]
 8006a32:	6039      	str	r1, [r7, #0]
    /* Make sure all the bytes are unwritten. */
    return is_all_0xFFs(fcs, location, get_sizeof_index_location(fcs) - 1);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	0018      	movs	r0, r3
 8006a38:	f7ff ff9a 	bl	8006970 <get_sizeof_index_location>
 8006a3c:	0003      	movs	r3, r0
 8006a3e:	1e5a      	subs	r2, r3, #1
 8006a40:	6839      	ldr	r1, [r7, #0]
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	0018      	movs	r0, r3
 8006a46:	f7ff ffaf 	bl	80069a8 <is_all_0xFFs>
 8006a4a:	0003      	movs	r3, r0
}
 8006a4c:	0018      	movs	r0, r3
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	b002      	add	sp, #8
 8006a52:	bd80      	pop	{r7, pc}

08006a54 <get_next_index_location>:


/* Used or unused.  Might not even be valid! */
static const uint8_t* get_next_index_location(const flash_controller_struct *fcs, const uint8_t *index)
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b082      	sub	sp, #8
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
 8006a5c:	6039      	str	r1, [r7, #0]
    return index + get_sizeof_index_location(fcs);
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	0018      	movs	r0, r3
 8006a62:	f7ff ff85 	bl	8006970 <get_sizeof_index_location>
 8006a66:	0002      	movs	r2, r0
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	189b      	adds	r3, r3, r2
}
 8006a6c:	0018      	movs	r0, r3
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	b002      	add	sp, #8
 8006a72:	bd80      	pop	{r7, pc}

08006a74 <get_prev_index_location>:

static const uint8_t* get_prev_index_location(const flash_controller_struct *fcs, const uint8_t *index)
{
 8006a74:	b580      	push	{r7, lr}
 8006a76:	b082      	sub	sp, #8
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
 8006a7c:	6039      	str	r1, [r7, #0]
	return index - get_sizeof_index_location(fcs);
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	0018      	movs	r0, r3
 8006a82:	f7ff ff75 	bl	8006970 <get_sizeof_index_location>
 8006a86:	0003      	movs	r3, r0
 8006a88:	425b      	negs	r3, r3
 8006a8a:	683a      	ldr	r2, [r7, #0]
 8006a8c:	18d3      	adds	r3, r2, r3
}
 8006a8e:	0018      	movs	r0, r3
 8006a90:	46bd      	mov	sp, r7
 8006a92:	b002      	add	sp, #8
 8006a94:	bd80      	pop	{r7, pc}

08006a96 <get_next_unused_index_location>:

/* Next unused slot for a index record*/
static const uint8_t* get_next_unused_index_location(const flash_controller_struct *fcs, const uint8_t* sector_group_start)
{
 8006a96:	b580      	push	{r7, lr}
 8006a98:	b084      	sub	sp, #16
 8006a9a:	af00      	add	r7, sp, #0
 8006a9c:	6078      	str	r0, [r7, #4]
 8006a9e:	6039      	str	r1, [r7, #0]
    const uint8_t *index;
    const uint8_t *last_sector_address = sector_group_start + fcs->sector_group_length_minus_one;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	683a      	ldr	r2, [r7, #0]
 8006aa6:	18d3      	adds	r3, r2, r3
 8006aa8:	60bb      	str	r3, [r7, #8]
    index = sector_group_start;
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	60fb      	str	r3, [r7, #12]

    while(index <= last_sector_address)
 8006aae:	e00f      	b.n	8006ad0 <get_next_unused_index_location+0x3a>
    {
        if(0 != is_index_location_empty(fcs, index))
 8006ab0:	68fa      	ldr	r2, [r7, #12]
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	0011      	movs	r1, r2
 8006ab6:	0018      	movs	r0, r3
 8006ab8:	f7ff ffb7 	bl	8006a2a <is_index_location_empty>
 8006abc:	1e03      	subs	r3, r0, #0
 8006abe:	d10c      	bne.n	8006ada <get_next_unused_index_location+0x44>
        {
            break;
        }
        
        index = get_next_index_location(fcs, index);
 8006ac0:	68fa      	ldr	r2, [r7, #12]
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	0011      	movs	r1, r2
 8006ac6:	0018      	movs	r0, r3
 8006ac8:	f7ff ffc4 	bl	8006a54 <get_next_index_location>
 8006acc:	0003      	movs	r3, r0
 8006ace:	60fb      	str	r3, [r7, #12]
    while(index <= last_sector_address)
 8006ad0:	68fa      	ldr	r2, [r7, #12]
 8006ad2:	68bb      	ldr	r3, [r7, #8]
 8006ad4:	429a      	cmp	r2, r3
 8006ad6:	d9eb      	bls.n	8006ab0 <get_next_unused_index_location+0x1a>
 8006ad8:	e000      	b.n	8006adc <get_next_unused_index_location+0x46>
            break;
 8006ada:	46c0      	nop			@ (mov r8, r8)
    }

    return index;
 8006adc:	68fb      	ldr	r3, [r7, #12]
}
 8006ade:	0018      	movs	r0, r3
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	b004      	add	sp, #16
 8006ae4:	bd80      	pop	{r7, pc}

08006ae6 <is_index_valid>:

static unsigned int is_index_valid(const flash_controller_struct *fcs, const uint8_t *index)
{
 8006ae6:	b5b0      	push	{r4, r5, r7, lr}
 8006ae8:	b084      	sub	sp, #16
 8006aea:	af00      	add	r7, sp, #0
 8006aec:	6078      	str	r0, [r7, #4]
 8006aee:	6039      	str	r1, [r7, #0]
	uint8_t index_data;
	uint8_t index_plus_min_byte_offset;

	read_mem( fcs, index, &index_data, 0);
 8006af0:	240f      	movs	r4, #15
 8006af2:	193a      	adds	r2, r7, r4
 8006af4:	6839      	ldr	r1, [r7, #0]
 8006af6:	6878      	ldr	r0, [r7, #4]
 8006af8:	2300      	movs	r3, #0
 8006afa:	f7ff fec8 	bl	800688e <read_mem>
	read_mem( fcs, index + fcs->minimum_writeable_bytes, &index_plus_min_byte_offset, 0);
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	791b      	ldrb	r3, [r3, #4]
 8006b02:	001a      	movs	r2, r3
 8006b04:	683b      	ldr	r3, [r7, #0]
 8006b06:	1899      	adds	r1, r3, r2
 8006b08:	250e      	movs	r5, #14
 8006b0a:	197a      	adds	r2, r7, r5
 8006b0c:	6878      	ldr	r0, [r7, #4]
 8006b0e:	2300      	movs	r3, #0
 8006b10:	f7ff febd 	bl	800688e <read_mem>

	return ( index_data/*index[0]*/ != NOT_VALIDATED_MARKER) && ( index_plus_min_byte_offset /*index[fcs->minimum_writeable_bytes]*/ == NOT_INVALIDATED_MARKER);
 8006b14:	193b      	adds	r3, r7, r4
 8006b16:	781b      	ldrb	r3, [r3, #0]
 8006b18:	2bff      	cmp	r3, #255	@ 0xff
 8006b1a:	d005      	beq.n	8006b28 <is_index_valid+0x42>
 8006b1c:	197b      	adds	r3, r7, r5
 8006b1e:	781b      	ldrb	r3, [r3, #0]
 8006b20:	2bff      	cmp	r3, #255	@ 0xff
 8006b22:	d101      	bne.n	8006b28 <is_index_valid+0x42>
 8006b24:	2301      	movs	r3, #1
 8006b26:	e000      	b.n	8006b2a <is_index_valid+0x44>
 8006b28:	2300      	movs	r3, #0
}
 8006b2a:	0018      	movs	r0, r3
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	b004      	add	sp, #16
 8006b30:	bdb0      	pop	{r4, r5, r7, pc}

08006b32 <has_index_ever_been_used>:

static unsigned int has_index_ever_been_used(const flash_controller_struct *fcs, const uint8_t *index)
{
 8006b32:	b580      	push	{r7, lr}
 8006b34:	b082      	sub	sp, #8
 8006b36:	af00      	add	r7, sp, #0
 8006b38:	6078      	str	r0, [r7, #4]
 8006b3a:	6039      	str	r1, [r7, #0]
	if (fcs->migration.migrationInProgress == 0 || (fcs->migration.migrationInProgress == 1 && index != fcs->migration.firstIndexInNewGroup ))
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	7f1b      	ldrb	r3, [r3, #28]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d008      	beq.n	8006b56 <has_index_ever_been_used+0x24>
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	7f1b      	ldrb	r3, [r3, #28]
 8006b48:	2b01      	cmp	r3, #1
 8006b4a:	d10a      	bne.n	8006b62 <has_index_ever_been_used+0x30>
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	6a1b      	ldr	r3, [r3, #32]
 8006b50:	683a      	ldr	r2, [r7, #0]
 8006b52:	429a      	cmp	r2, r3
 8006b54:	d005      	beq.n	8006b62 <has_index_ever_been_used+0x30>
		Validation = 0x00  Invalidation = 0xFF: This is a valid record
		Validation = 0x00  Invalidation = 0x00: This is an "invalid" record. This was old data and is safe to use.
		Any other value than 0xFF or 0x00 is technically invalid as it could be a bad write.
		*/
        /*return (index[0] != NOT_VALIDATED_MARKER);*/	/* Only need to check the validation field for this. Anything other than 0xFF then it should be usable*/
		return (index[0] == !NOT_VALIDATED_MARKER);	/* Only need to check the validation field for this. Anything other than 0xFF then it should be usable*/
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	781b      	ldrb	r3, [r3, #0]
 8006b5a:	425a      	negs	r2, r3
 8006b5c:	4153      	adcs	r3, r2
 8006b5e:	b2db      	uxtb	r3, r3
 8006b60:	e000      	b.n	8006b64 <has_index_ever_been_used+0x32>
	}
	/* If we are migrating, the first index will always fail this test so we just have to hope it is correct. */
	return 1;		
 8006b62:	2301      	movs	r3, #1
}
 8006b64:	0018      	movs	r0, r3
 8006b66:	46bd      	mov	sp, r7
 8006b68:	b002      	add	sp, #8
 8006b6a:	bd80      	pop	{r7, pc}

08006b6c <get_first_valid_index_location>:


static const uint8_t* get_first_valid_index_location(const flash_controller_struct *fcs, const uint8_t* sector_group_start)
{
 8006b6c:	b580      	push	{r7, lr}
 8006b6e:	b084      	sub	sp, #16
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
 8006b74:	6039      	str	r1, [r7, #0]
    const uint8_t *index               = sector_group_start;
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	60fb      	str	r3, [r7, #12]
    const uint8_t *last_sector_address = sector_group_start + fcs->sector_group_length_minus_one;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	683a      	ldr	r2, [r7, #0]
 8006b80:	18d3      	adds	r3, r2, r3
 8006b82:	60bb      	str	r3, [r7, #8]

    while(index <= last_sector_address)
 8006b84:	e011      	b.n	8006baa <get_first_valid_index_location+0x3e>
    {
        if(0 != is_index_valid(fcs, index))
 8006b86:	68fa      	ldr	r2, [r7, #12]
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	0011      	movs	r1, r2
 8006b8c:	0018      	movs	r0, r3
 8006b8e:	f7ff ffaa 	bl	8006ae6 <is_index_valid>
 8006b92:	1e03      	subs	r3, r0, #0
 8006b94:	d001      	beq.n	8006b9a <get_first_valid_index_location+0x2e>
        {
            return index;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	e00c      	b.n	8006bb4 <get_first_valid_index_location+0x48>
        }
        
        index = get_next_index_location(fcs, index);
 8006b9a:	68fa      	ldr	r2, [r7, #12]
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	0011      	movs	r1, r2
 8006ba0:	0018      	movs	r0, r3
 8006ba2:	f7ff ff57 	bl	8006a54 <get_next_index_location>
 8006ba6:	0003      	movs	r3, r0
 8006ba8:	60fb      	str	r3, [r7, #12]
    while(index <= last_sector_address)
 8006baa:	68fa      	ldr	r2, [r7, #12]
 8006bac:	68bb      	ldr	r3, [r7, #8]
 8006bae:	429a      	cmp	r2, r3
 8006bb0:	d9e9      	bls.n	8006b86 <get_first_valid_index_location+0x1a>
    }

    return (void*)0; /* no other valid index location */
 8006bb2:	2300      	movs	r3, #0
}
 8006bb4:	0018      	movs	r0, r3
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	b004      	add	sp, #16
 8006bba:	bd80      	pop	{r7, pc}

08006bbc <get_last_used_index_location>:


/* returns void pointer if no indices are used yet */
static const uint8_t* get_last_used_index_location(const flash_controller_struct *fcs, const uint8_t* sector_group_start)
{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b084      	sub	sp, #16
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
 8006bc4:	6039      	str	r1, [r7, #0]
    /* Basically, just get the first unused one... */
    const uint8_t *index = get_next_unused_index_location(fcs, sector_group_start);
 8006bc6:	683a      	ldr	r2, [r7, #0]
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	0011      	movs	r1, r2
 8006bcc:	0018      	movs	r0, r3
 8006bce:	f7ff ff62 	bl	8006a96 <get_next_unused_index_location>
 8006bd2:	0003      	movs	r3, r0
 8006bd4:	60fb      	str	r3, [r7, #12]

    /* ...and if this isn't the very first index, then... */
    if(sector_group_start != index)
 8006bd6:	683a      	ldr	r2, [r7, #0]
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	429a      	cmp	r2, r3
 8006bdc:	d028      	beq.n	8006c30 <get_last_used_index_location+0x74>
    {
		// Start walking backwards to get the last good record. There could be corruption...
		// At the start of this loop, index is pointing to a group of blank erased bytes due to the call of get_next_unused_index_location		
		while (index != sector_group_start)
 8006bde:	e023      	b.n	8006c28 <get_last_used_index_location+0x6c>
		{
			index = get_prev_index_location(fcs, index);	/* ...go backwards one index. */
 8006be0:	68fa      	ldr	r2, [r7, #12]
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	0011      	movs	r1, r2
 8006be6:	0018      	movs	r0, r3
 8006be8:	f7ff ff44 	bl	8006a74 <get_prev_index_location>
 8006bec:	0003      	movs	r3, r0
 8006bee:	60fb      	str	r3, [r7, #12]
			if (has_index_ever_been_used(fcs, index))
 8006bf0:	68fa      	ldr	r2, [r7, #12]
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	0011      	movs	r1, r2
 8006bf6:	0018      	movs	r0, r3
 8006bf8:	f7ff ff9b 	bl	8006b32 <has_index_ever_been_used>
 8006bfc:	1e03      	subs	r3, r0, #0
 8006bfe:	d013      	beq.n	8006c28 <get_last_used_index_location+0x6c>
			{
				// In some cases, the validation field might be okay but the offset is invalid. We need to check bounds.
				const uint8_t *data_loc = point_to_value_from_index(fcs, index, sector_group_start);
 8006c00:	683a      	ldr	r2, [r7, #0]
 8006c02:	68f9      	ldr	r1, [r7, #12]
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	0018      	movs	r0, r3
 8006c08:	f7ff fe5e 	bl	80068c8 <point_to_value_from_index>
 8006c0c:	0003      	movs	r3, r0
 8006c0e:	60bb      	str	r3, [r7, #8]
				if (!(data_loc > get_last_address_of_sector_group(fcs, sector_group_start)))
 8006c10:	683a      	ldr	r2, [r7, #0]
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	0011      	movs	r1, r2
 8006c16:	0018      	movs	r0, r3
 8006c18:	f7ff fe9d 	bl	8006956 <get_last_address_of_sector_group>
 8006c1c:	0002      	movs	r2, r0
 8006c1e:	68bb      	ldr	r3, [r7, #8]
 8006c20:	4293      	cmp	r3, r2
 8006c22:	d801      	bhi.n	8006c28 <get_last_used_index_location+0x6c>
				{
					return index;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	e004      	b.n	8006c32 <get_last_used_index_location+0x76>
		while (index != sector_group_start)
 8006c28:	68fa      	ldr	r2, [r7, #12]
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	429a      	cmp	r2, r3
 8006c2e:	d1d7      	bne.n	8006be0 <get_last_used_index_location+0x24>
#endif
			}
		}
    }

    return (void*)0; /* We found the very first index, which means no indices are used yet. */
 8006c30:	2300      	movs	r3, #0
}
 8006c32:	0018      	movs	r0, r3
 8006c34:	46bd      	mov	sp, r7
 8006c36:	b004      	add	sp, #16
 8006c38:	bd80      	pop	{r7, pc}

08006c3a <get_next_valid_index_location>:

/* Returns (void*)0 if this is the last valid index.  By valid, we mean used, 
 * containing the latest data, and not having been invalidated (moved 
 * elsewhere). */
static const uint8_t* get_next_valid_index_location(const flash_controller_struct *fcs, const uint8_t* index, const uint8_t* sector_group_start)
{
 8006c3a:	b580      	push	{r7, lr}
 8006c3c:	b086      	sub	sp, #24
 8006c3e:	af00      	add	r7, sp, #0
 8006c40:	60f8      	str	r0, [r7, #12]
 8006c42:	60b9      	str	r1, [r7, #8]
 8006c44:	607a      	str	r2, [r7, #4]
    const uint8_t *last_index = get_last_used_index_location(fcs, sector_group_start);
 8006c46:	687a      	ldr	r2, [r7, #4]
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	0011      	movs	r1, r2
 8006c4c:	0018      	movs	r0, r3
 8006c4e:	f7ff ffb5 	bl	8006bbc <get_last_used_index_location>
 8006c52:	0003      	movs	r3, r0
 8006c54:	617b      	str	r3, [r7, #20]
    index = get_next_index_location(fcs, index);
 8006c56:	68ba      	ldr	r2, [r7, #8]
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	0011      	movs	r1, r2
 8006c5c:	0018      	movs	r0, r3
 8006c5e:	f7ff fef9 	bl	8006a54 <get_next_index_location>
 8006c62:	0003      	movs	r3, r0
 8006c64:	60bb      	str	r3, [r7, #8]

    while(index <= last_index)
 8006c66:	e011      	b.n	8006c8c <get_next_valid_index_location+0x52>
    {
        if(0 != is_index_valid(fcs, index))
 8006c68:	68ba      	ldr	r2, [r7, #8]
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	0011      	movs	r1, r2
 8006c6e:	0018      	movs	r0, r3
 8006c70:	f7ff ff39 	bl	8006ae6 <is_index_valid>
 8006c74:	1e03      	subs	r3, r0, #0
 8006c76:	d001      	beq.n	8006c7c <get_next_valid_index_location+0x42>
        {
            return index;
 8006c78:	68bb      	ldr	r3, [r7, #8]
 8006c7a:	e00c      	b.n	8006c96 <get_next_valid_index_location+0x5c>
        }

        index = get_next_index_location(fcs, index);
 8006c7c:	68ba      	ldr	r2, [r7, #8]
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	0011      	movs	r1, r2
 8006c82:	0018      	movs	r0, r3
 8006c84:	f7ff fee6 	bl	8006a54 <get_next_index_location>
 8006c88:	0003      	movs	r3, r0
 8006c8a:	60bb      	str	r3, [r7, #8]
    while(index <= last_index)
 8006c8c:	68ba      	ldr	r2, [r7, #8]
 8006c8e:	697b      	ldr	r3, [r7, #20]
 8006c90:	429a      	cmp	r2, r3
 8006c92:	d9e9      	bls.n	8006c68 <get_next_valid_index_location+0x2e>
    }

    return (void*)0; /* no other valid index location */
 8006c94:	2300      	movs	r3, #0
}
 8006c96:	0018      	movs	r0, r3
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	b006      	add	sp, #24
 8006c9c:	bd80      	pop	{r7, pc}

08006c9e <point_to_key_from_index>:


static const uint8_t* point_to_key_from_index(const flash_controller_struct *fcs,
                                              const uint8_t *index)
{
 8006c9e:	b580      	push	{r7, lr}
 8006ca0:	b082      	sub	sp, #8
 8006ca2:	af00      	add	r7, sp, #0
 8006ca4:	6078      	str	r0, [r7, #4]
 8006ca6:	6039      	str	r1, [r7, #0]
    return index + (fcs->minimum_writeable_bytes * 2);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	791b      	ldrb	r3, [r3, #4]
 8006cac:	005b      	lsls	r3, r3, #1
 8006cae:	001a      	movs	r2, r3
 8006cb0:	683b      	ldr	r3, [r7, #0]
 8006cb2:	189b      	adds	r3, r3, r2
}
 8006cb4:	0018      	movs	r0, r3
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	b002      	add	sp, #8
 8006cba:	bd80      	pop	{r7, pc}

08006cbc <read_key_from_index>:

static key_t read_key_from_index(const flash_controller_struct *fcs, const uint8_t *index)
{
 8006cbc:	b580      	push	{r7, lr}
 8006cbe:	b084      	sub	sp, #16
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]
 8006cc4:	6039      	str	r1, [r7, #0]
	key_t key = 0;
 8006cc6:	2300      	movs	r3, #0
 8006cc8:	60fb      	str	r3, [r7, #12]
	read_mem( fcs, index + (fcs->minimum_writeable_bytes * 2), (uint8_t*)&key, fcs->bytes_per_key - 1);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	791b      	ldrb	r3, [r3, #4]
 8006cce:	005b      	lsls	r3, r3, #1
 8006cd0:	001a      	movs	r2, r3
 8006cd2:	683b      	ldr	r3, [r7, #0]
 8006cd4:	1899      	adds	r1, r3, r2
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	795b      	ldrb	r3, [r3, #5]
 8006cda:	3b01      	subs	r3, #1
 8006cdc:	220c      	movs	r2, #12
 8006cde:	18ba      	adds	r2, r7, r2
 8006ce0:	6878      	ldr	r0, [r7, #4]
 8006ce2:	f7ff fdd4 	bl	800688e <read_mem>
    //return &index[(fcs->minimum_writeable_bytes * 2)];
	return key;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
}
 8006ce8:	0018      	movs	r0, r3
 8006cea:	46bd      	mov	sp, r7
 8006cec:	b004      	add	sp, #16
 8006cee:	bd80      	pop	{r7, pc}

08006cf0 <get_length_from_index>:

/* TODO: generalize to lengths other than one byte wide */
static size_t get_length_from_index(const flash_controller_struct *fcs,
                                    const uint8_t *index)
{
 8006cf0:	b590      	push	{r4, r7, lr}
 8006cf2:	b085      	sub	sp, #20
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
 8006cf8:	6039      	str	r1, [r7, #0]
	uint8_t length;

	read_mem( fcs, index + (fcs->minimum_writeable_bytes * 2) + fcs->bytes_per_key + BYTES_OF_OFFSET_FIELD, &length, 0);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	791b      	ldrb	r3, [r3, #4]
 8006cfe:	005b      	lsls	r3, r3, #1
 8006d00:	001a      	movs	r2, r3
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	795b      	ldrb	r3, [r3, #5]
 8006d06:	18d3      	adds	r3, r2, r3
 8006d08:	3302      	adds	r3, #2
 8006d0a:	683a      	ldr	r2, [r7, #0]
 8006d0c:	18d1      	adds	r1, r2, r3
 8006d0e:	240f      	movs	r4, #15
 8006d10:	193a      	adds	r2, r7, r4
 8006d12:	6878      	ldr	r0, [r7, #4]
 8006d14:	2300      	movs	r3, #0
 8006d16:	f7ff fdba 	bl	800688e <read_mem>
	return length;
 8006d1a:	193b      	adds	r3, r7, r4
 8006d1c:	781b      	ldrb	r3, [r3, #0]
//    return index[(fcs->minimum_writeable_bytes * 2) + fcs->bytes_per_key + BYTES_OF_OFFSET_FIELD];
}
 8006d1e:	0018      	movs	r0, r3
 8006d20:	46bd      	mov	sp, r7
 8006d22:	b005      	add	sp, #20
 8006d24:	bd90      	pop	{r4, r7, pc}

08006d26 <get_next_unused_value_location>:

static const uint8_t* get_next_unused_value_location(const flash_controller_struct *fcs, const uint8_t* sector_group_start)
{
 8006d26:	b580      	push	{r7, lr}
 8006d28:	b084      	sub	sp, #16
 8006d2a:	af00      	add	r7, sp, #0
 8006d2c:	6078      	str	r0, [r7, #4]
 8006d2e:	6039      	str	r1, [r7, #0]
    const uint8_t *index = get_last_used_index_location(fcs, sector_group_start);
 8006d30:	683a      	ldr	r2, [r7, #0]
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	0011      	movs	r1, r2
 8006d36:	0018      	movs	r0, r3
 8006d38:	f7ff ff40 	bl	8006bbc <get_last_used_index_location>
 8006d3c:	0003      	movs	r3, r0
 8006d3e:	60fb      	str	r3, [r7, #12]

    if((void*)0 != index) 
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d008      	beq.n	8006d58 <get_next_unused_value_location+0x32>
    { 
        return point_to_value_from_index(fcs, index, sector_group_start) - 1;
 8006d46:	683a      	ldr	r2, [r7, #0]
 8006d48:	68f9      	ldr	r1, [r7, #12]
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	0018      	movs	r0, r3
 8006d4e:	f7ff fdbb 	bl	80068c8 <point_to_value_from_index>
 8006d52:	0003      	movs	r3, r0
 8006d54:	3b01      	subs	r3, #1
 8006d56:	e006      	b.n	8006d66 <get_next_unused_value_location+0x40>
    }
    else /* void is returned if there are no indices used yet */
    {
        return get_last_address_of_sector_group(fcs, sector_group_start);
 8006d58:	683a      	ldr	r2, [r7, #0]
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	0011      	movs	r1, r2
 8006d5e:	0018      	movs	r0, r3
 8006d60:	f7ff fdf9 	bl	8006956 <get_last_address_of_sector_group>
 8006d64:	0003      	movs	r3, r0
    }
}
 8006d66:	0018      	movs	r0, r3
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	b004      	add	sp, #16
 8006d6c:	bd80      	pop	{r7, pc}

08006d6e <get_unused_sector_group_space>:


static size_t get_unused_sector_group_space(const flash_controller_struct *fcs, const uint8_t* sector_group_start)
{
 8006d6e:	b590      	push	{r4, r7, lr}
 8006d70:	b083      	sub	sp, #12
 8006d72:	af00      	add	r7, sp, #0
 8006d74:	6078      	str	r0, [r7, #4]
 8006d76:	6039      	str	r1, [r7, #0]
    /* end of free space - start of free space gives us the size of the free space */
    return (size_t)(get_next_unused_value_location(fcs, sector_group_start) - get_next_unused_index_location(fcs, sector_group_start));
 8006d78:	683a      	ldr	r2, [r7, #0]
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	0011      	movs	r1, r2
 8006d7e:	0018      	movs	r0, r3
 8006d80:	f7ff ffd1 	bl	8006d26 <get_next_unused_value_location>
 8006d84:	0004      	movs	r4, r0
 8006d86:	683a      	ldr	r2, [r7, #0]
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	0011      	movs	r1, r2
 8006d8c:	0018      	movs	r0, r3
 8006d8e:	f7ff fe82 	bl	8006a96 <get_next_unused_index_location>
 8006d92:	0003      	movs	r3, r0
 8006d94:	1ae3      	subs	r3, r4, r3
}
 8006d96:	0018      	movs	r0, r3
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	b003      	add	sp, #12
 8006d9c:	bd90      	pop	{r4, r7, pc}

08006d9e <convertKeyPtrToValue>:

static key_t convertKeyPtrToValue( const flash_controller_struct *fcs, const uint8_t key[] )
{
 8006d9e:	b580      	push	{r7, lr}
 8006da0:	b086      	sub	sp, #24
 8006da2:	af00      	add	r7, sp, #0
 8006da4:	6078      	str	r0, [r7, #4]
 8006da6:	6039      	str	r1, [r7, #0]
    int i = 1;
 8006da8:	2301      	movs	r3, #1
 8006daa:	60fb      	str	r3, [r7, #12]
    char *p = (char *)&i;
 8006dac:	230c      	movs	r3, #12
 8006dae:	18fb      	adds	r3, r7, r3
 8006db0:	613b      	str	r3, [r7, #16]
    key_t keyVal = 0;
 8006db2:	2300      	movs	r3, #0
 8006db4:	617b      	str	r3, [r7, #20]
    if (p[0] == 1)	/*Little Endian*/
 8006db6:	693b      	ldr	r3, [r7, #16]
 8006db8:	781b      	ldrb	r3, [r3, #0]
 8006dba:	2b01      	cmp	r3, #1
 8006dbc:	d129      	bne.n	8006e12 <convertKeyPtrToValue+0x74>
    {
    	switch( fcs->bytes_per_key )
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	795b      	ldrb	r3, [r3, #5]
 8006dc2:	2b04      	cmp	r3, #4
 8006dc4:	d012      	beq.n	8006dec <convertKeyPtrToValue+0x4e>
 8006dc6:	dc4e      	bgt.n	8006e66 <convertKeyPtrToValue+0xc8>
 8006dc8:	2b01      	cmp	r3, #1
 8006dca:	d002      	beq.n	8006dd2 <convertKeyPtrToValue+0x34>
 8006dcc:	2b02      	cmp	r3, #2
 8006dce:	d004      	beq.n	8006dda <convertKeyPtrToValue+0x3c>
 8006dd0:	e049      	b.n	8006e66 <convertKeyPtrToValue+0xc8>
    	{
    		case 1:	keyVal = *key;	break;
 8006dd2:	683b      	ldr	r3, [r7, #0]
 8006dd4:	781b      	ldrb	r3, [r3, #0]
 8006dd6:	617b      	str	r3, [r7, #20]
 8006dd8:	e045      	b.n	8006e66 <convertKeyPtrToValue+0xc8>
    		case 2: keyVal = ((*key + 1 ) << 8) | *key;	break;
 8006dda:	683b      	ldr	r3, [r7, #0]
 8006ddc:	781b      	ldrb	r3, [r3, #0]
 8006dde:	3301      	adds	r3, #1
 8006de0:	021b      	lsls	r3, r3, #8
 8006de2:	683a      	ldr	r2, [r7, #0]
 8006de4:	7812      	ldrb	r2, [r2, #0]
 8006de6:	4313      	orrs	r3, r2
 8006de8:	617b      	str	r3, [r7, #20]
 8006dea:	e03c      	b.n	8006e66 <convertKeyPtrToValue+0xc8>
    		case 4: keyVal = ((*(key + 3) ) << 24) | ((*(key + 2) ) << 16) | ((*(key + 1) ) << 8) | *key;	break;
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	3303      	adds	r3, #3
 8006df0:	781b      	ldrb	r3, [r3, #0]
 8006df2:	061a      	lsls	r2, r3, #24
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	3302      	adds	r3, #2
 8006df8:	781b      	ldrb	r3, [r3, #0]
 8006dfa:	041b      	lsls	r3, r3, #16
 8006dfc:	431a      	orrs	r2, r3
 8006dfe:	683b      	ldr	r3, [r7, #0]
 8006e00:	3301      	adds	r3, #1
 8006e02:	781b      	ldrb	r3, [r3, #0]
 8006e04:	021b      	lsls	r3, r3, #8
 8006e06:	4313      	orrs	r3, r2
 8006e08:	683a      	ldr	r2, [r7, #0]
 8006e0a:	7812      	ldrb	r2, [r2, #0]
 8006e0c:	4313      	orrs	r3, r2
 8006e0e:	617b      	str	r3, [r7, #20]
 8006e10:	e029      	b.n	8006e66 <convertKeyPtrToValue+0xc8>
    	}
    }
    else
    {
    	switch( fcs->bytes_per_key )
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	795b      	ldrb	r3, [r3, #5]
 8006e16:	2b04      	cmp	r3, #4
 8006e18:	d012      	beq.n	8006e40 <convertKeyPtrToValue+0xa2>
 8006e1a:	dc24      	bgt.n	8006e66 <convertKeyPtrToValue+0xc8>
 8006e1c:	2b01      	cmp	r3, #1
 8006e1e:	d002      	beq.n	8006e26 <convertKeyPtrToValue+0x88>
 8006e20:	2b02      	cmp	r3, #2
 8006e22:	d004      	beq.n	8006e2e <convertKeyPtrToValue+0x90>
 8006e24:	e01f      	b.n	8006e66 <convertKeyPtrToValue+0xc8>
    	{
    		case 1:	keyVal = *key;	break;
 8006e26:	683b      	ldr	r3, [r7, #0]
 8006e28:	781b      	ldrb	r3, [r3, #0]
 8006e2a:	617b      	str	r3, [r7, #20]
 8006e2c:	e01b      	b.n	8006e66 <convertKeyPtrToValue+0xc8>
    		case 2: keyVal = ((*key ) << 8) | (*key + 1);	break;
 8006e2e:	683b      	ldr	r3, [r7, #0]
 8006e30:	781b      	ldrb	r3, [r3, #0]
 8006e32:	021a      	lsls	r2, r3, #8
 8006e34:	683b      	ldr	r3, [r7, #0]
 8006e36:	781b      	ldrb	r3, [r3, #0]
 8006e38:	3301      	adds	r3, #1
 8006e3a:	4313      	orrs	r3, r2
 8006e3c:	617b      	str	r3, [r7, #20]
 8006e3e:	e012      	b.n	8006e66 <convertKeyPtrToValue+0xc8>
    		case 4: keyVal = ((*key ) << 24) | ((*(key + 1) ) << 16) | ((*(key + 2) ) << 8) | *(key + 3);	break;
 8006e40:	683b      	ldr	r3, [r7, #0]
 8006e42:	781b      	ldrb	r3, [r3, #0]
 8006e44:	061a      	lsls	r2, r3, #24
 8006e46:	683b      	ldr	r3, [r7, #0]
 8006e48:	3301      	adds	r3, #1
 8006e4a:	781b      	ldrb	r3, [r3, #0]
 8006e4c:	041b      	lsls	r3, r3, #16
 8006e4e:	431a      	orrs	r2, r3
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	3302      	adds	r3, #2
 8006e54:	781b      	ldrb	r3, [r3, #0]
 8006e56:	021b      	lsls	r3, r3, #8
 8006e58:	4313      	orrs	r3, r2
 8006e5a:	683a      	ldr	r2, [r7, #0]
 8006e5c:	3203      	adds	r2, #3
 8006e5e:	7812      	ldrb	r2, [r2, #0]
 8006e60:	4313      	orrs	r3, r2
 8006e62:	617b      	str	r3, [r7, #20]
 8006e64:	46c0      	nop			@ (mov r8, r8)
    	}
    }
    return keyVal;
 8006e66:	697b      	ldr	r3, [r7, #20]
}
 8006e68:	0018      	movs	r0, r3
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	b006      	add	sp, #24
 8006e6e:	bd80      	pop	{r7, pc}

08006e70 <read>:
                   const uint8_t   key[],
                   uint8_t         value[],
                   size_t          value_size,
                   const uint8_t*  sector_group_start,
                   const uint8_t** index_location)
{
 8006e70:	b590      	push	{r4, r7, lr}
 8006e72:	b08b      	sub	sp, #44	@ 0x2c
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	60f8      	str	r0, [r7, #12]
 8006e78:	60b9      	str	r1, [r7, #8]
 8006e7a:	607a      	str	r2, [r7, #4]
 8006e7c:	603b      	str	r3, [r7, #0]
    const uint8_t *last_address;
    const uint8_t *index = sector_group_start;
 8006e7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e80:	627b      	str	r3, [r7, #36]	@ 0x24
    last_address         = get_last_used_index_location(fcs, sector_group_start);
 8006e82:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	0011      	movs	r1, r2
 8006e88:	0018      	movs	r0, r3
 8006e8a:	f7ff fe97 	bl	8006bbc <get_last_used_index_location>
 8006e8e:	0003      	movs	r3, r0
 8006e90:	623b      	str	r3, [r7, #32]
    key_t readKey;
    key_t searchKey = convertKeyPtrToValue( fcs, key);
 8006e92:	68ba      	ldr	r2, [r7, #8]
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	0011      	movs	r1, r2
 8006e98:	0018      	movs	r0, r3
 8006e9a:	f7ff ff80 	bl	8006d9e <convertKeyPtrToValue>
 8006e9e:	0003      	movs	r3, r0
 8006ea0:	61fb      	str	r3, [r7, #28]

    while(index <= last_address)
 8006ea2:	e052      	b.n	8006f4a <read+0xda>
    {
        /* if the index location's key matches our desired key */
    	readKey = read_key_from_index( fcs, index );
 8006ea4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	0011      	movs	r1, r2
 8006eaa:	0018      	movs	r0, r3
 8006eac:	f7ff ff06 	bl	8006cbc <read_key_from_index>
 8006eb0:	0003      	movs	r3, r0
 8006eb2:	61bb      	str	r3, [r7, #24]
    	if( readKey == searchKey )
 8006eb4:	69ba      	ldr	r2, [r7, #24]
 8006eb6:	69fb      	ldr	r3, [r7, #28]
 8006eb8:	429a      	cmp	r2, r3
 8006eba:	d13e      	bne.n	8006f3a <read+0xca>
        {
            if(is_index_valid(fcs, index))
 8006ebc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	0011      	movs	r1, r2
 8006ec2:	0018      	movs	r0, r3
 8006ec4:	f7ff fe0f 	bl	8006ae6 <is_index_valid>
 8006ec8:	1e03      	subs	r3, r0, #0
 8006eca:	d036      	beq.n	8006f3a <read+0xca>
            {
                /* then copy the data and exit */
                size_t data_length = get_length_from_index(fcs, index);
 8006ecc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	0011      	movs	r1, r2
 8006ed2:	0018      	movs	r0, r3
 8006ed4:	f7ff ff0c 	bl	8006cf0 <get_length_from_index>
 8006ed8:	0003      	movs	r3, r0
 8006eda:	617b      	str	r3, [r7, #20]
                value_size = value_size <= data_length ? value_size : data_length;
 8006edc:	697a      	ldr	r2, [r7, #20]
 8006ede:	683b      	ldr	r3, [r7, #0]
 8006ee0:	4293      	cmp	r3, r2
 8006ee2:	d900      	bls.n	8006ee6 <read+0x76>
 8006ee4:	0013      	movs	r3, r2
 8006ee6:	603b      	str	r3, [r7, #0]
                
                const uint8_t * data_ptr = point_to_value_from_index(fcs, index, sector_group_start);
 8006ee8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006eea:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	0018      	movs	r0, r3
 8006ef0:	f7ff fcea 	bl	80068c8 <point_to_value_from_index>
 8006ef4:	0003      	movs	r3, r0
 8006ef6:	613b      	str	r3, [r7, #16]
				// Sanity check the memory address so we do not attempt to access invalid memory
                if( (( data_ptr + value_size )-1) > get_last_address_of_sector_group(fcs, sector_group_start))
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	3b01      	subs	r3, #1
 8006efc:	693a      	ldr	r2, [r7, #16]
 8006efe:	18d4      	adds	r4, r2, r3
 8006f00:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	0011      	movs	r1, r2
 8006f06:	0018      	movs	r0, r3
 8006f08:	f7ff fd25 	bl	8006956 <get_last_address_of_sector_group>
 8006f0c:	0003      	movs	r3, r0
 8006f0e:	429c      	cmp	r4, r3
 8006f10:	d901      	bls.n	8006f16 <read+0xa6>
                {
#if defined _MSC_VER || defined _WIN32 || defined __linux__ || defined linux /* On PC? */
                	printf("NVM appears corrupted. Data index 0x%X outside of 1K. Line %u in %s\r\n", (unsigned int)data_ptr, __LINE__, __func__);
#endif
					return 0; /* Error: could not find key */
 8006f12:	2300      	movs	r3, #0
 8006f14:	e01e      	b.n	8006f54 <read+0xe4>
                }

                /* The follow read replaces a memcpy. read_mem wants length -1 but this so adjust value_size for that*/
                read_mem( fcs, point_to_value_from_index(fcs, index, sector_group_start), value, value_size-1);
 8006f16:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006f18:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	0018      	movs	r0, r3
 8006f1e:	f7ff fcd3 	bl	80068c8 <point_to_value_from_index>
 8006f22:	0001      	movs	r1, r0
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	3b01      	subs	r3, #1
 8006f28:	687a      	ldr	r2, [r7, #4]
 8006f2a:	68f8      	ldr	r0, [r7, #12]
 8006f2c:	f7ff fcaf 	bl	800688e <read_mem>
                *index_location = index;
 8006f30:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006f34:	601a      	str	r2, [r3, #0]
                return value_size;
 8006f36:	683b      	ldr	r3, [r7, #0]
 8006f38:	e00c      	b.n	8006f54 <read+0xe4>
            }
        }

        index = get_next_index_location(fcs, index);
 8006f3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	0011      	movs	r1, r2
 8006f40:	0018      	movs	r0, r3
 8006f42:	f7ff fd87 	bl	8006a54 <get_next_index_location>
 8006f46:	0003      	movs	r3, r0
 8006f48:	627b      	str	r3, [r7, #36]	@ 0x24
    while(index <= last_address)
 8006f4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006f4c:	6a3b      	ldr	r3, [r7, #32]
 8006f4e:	429a      	cmp	r2, r3
 8006f50:	d9a8      	bls.n	8006ea4 <read+0x34>
    }

    return 0; /* Error: could not find key */
 8006f52:	2300      	movs	r3, #0
}
 8006f54:	0018      	movs	r0, r3
 8006f56:	46bd      	mov	sp, r7
 8006f58:	b00b      	add	sp, #44	@ 0x2c
 8006f5a:	bd90      	pop	{r4, r7, pc}

08006f5c <write>:
                    const uint8_t  key[],
                    const uint8_t  value[],
                    size_t         value_size,
                    const uint8_t* sector_group_start,
                    unsigned int   validate_record)
{
 8006f5c:	b5b0      	push	{r4, r5, r7, lr}
 8006f5e:	b094      	sub	sp, #80	@ 0x50
 8006f60:	af02      	add	r7, sp, #8
 8006f62:	60f8      	str	r0, [r7, #12]
 8006f64:	60b9      	str	r1, [r7, #8]
 8006f66:	607a      	str	r2, [r7, #4]
 8006f68:	603b      	str	r3, [r7, #0]
    uint8_t length;
    uint8_t buffer[28]; /* TODO: come up with a more robust idea for a max size */ 
    unsigned int must_invalidate_old_record;
    uint8_t *old_record_index;
    uint8_t dummy_value;
    const uint8_t validation_byte = !NOT_VALIDATED_MARKER;
 8006f6a:	2312      	movs	r3, #18
 8006f6c:	18fb      	adds	r3, r7, r3
 8006f6e:	2200      	movs	r2, #0
 8006f70:	701a      	strb	r2, [r3, #0]

    length = (uint8_t)value_size;
 8006f72:	683b      	ldr	r3, [r7, #0]
 8006f74:	b2da      	uxtb	r2, r3
 8006f76:	2337      	movs	r3, #55	@ 0x37
 8006f78:	18fb      	adds	r3, r7, r3
 8006f7a:	701a      	strb	r2, [r3, #0]

    /* if a record with this key already exists, we need to invalidate the old 
     * record once we've successfully validated the new record
     */
    must_invalidate_old_record = (0 != read(fcs, key, &dummy_value, sizeof(dummy_value), sector_group_start, (const uint8_t**)&old_record_index));
 8006f7c:	2313      	movs	r3, #19
 8006f7e:	18fa      	adds	r2, r7, r3
 8006f80:	68b9      	ldr	r1, [r7, #8]
 8006f82:	68f8      	ldr	r0, [r7, #12]
 8006f84:	2314      	movs	r3, #20
 8006f86:	18fb      	adds	r3, r7, r3
 8006f88:	9301      	str	r3, [sp, #4]
 8006f8a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006f8c:	9300      	str	r3, [sp, #0]
 8006f8e:	2301      	movs	r3, #1
 8006f90:	f7ff ff6e 	bl	8006e70 <read>
 8006f94:	0003      	movs	r3, r0
 8006f96:	1e5a      	subs	r2, r3, #1
 8006f98:	4193      	sbcs	r3, r2
 8006f9a:	b2db      	uxtb	r3, r3
 8006f9c:	643b      	str	r3, [r7, #64]	@ 0x40
 
    value_location = get_next_unused_value_location(fcs, sector_group_start);
 8006f9e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	0011      	movs	r1, r2
 8006fa4:	0018      	movs	r0, r3
 8006fa6:	f7ff febe 	bl	8006d26 <get_next_unused_value_location>
 8006faa:	0003      	movs	r3, r0
 8006fac:	647b      	str	r3, [r7, #68]	@ 0x44
    value_location -= (value_size - 1);
 8006fae:	683b      	ldr	r3, [r7, #0]
 8006fb0:	2201      	movs	r2, #1
 8006fb2:	1ad3      	subs	r3, r2, r3
 8006fb4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006fb6:	18d3      	adds	r3, r2, r3
 8006fb8:	647b      	str	r3, [r7, #68]	@ 0x44
     * casted to a uint8_t is done because the compiler gives warnings when 
     * directly casting a pointer to an integer of a different size; however 
     * it's totally fine to cast the DIFFERENCE between two pointers to an 
     * integer of a different size.
     */
    if(((uint8_t)(value_location - (uint8_t*)0) & (fcs->minimum_writeable_bytes - 1)) != 0) /* if value_location is not divisible by bytes_per_key... */
 8006fba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006fbc:	b2db      	uxtb	r3, r3
 8006fbe:	001a      	movs	r2, r3
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	791b      	ldrb	r3, [r3, #4]
 8006fc4:	3b01      	subs	r3, #1
 8006fc6:	4013      	ands	r3, r2
 8006fc8:	d00a      	beq.n	8006fe0 <write+0x84>
    {
        value_location -= (uint8_t)(value_location - (uint8_t*)0) & (fcs->minimum_writeable_bytes - 1); /* ...then make it so */
 8006fca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006fcc:	b2db      	uxtb	r3, r3
 8006fce:	001a      	movs	r2, r3
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	791b      	ldrb	r3, [r3, #4]
 8006fd4:	3b01      	subs	r3, #1
 8006fd6:	4013      	ands	r3, r2
 8006fd8:	425b      	negs	r3, r3
 8006fda:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006fdc:	18d3      	adds	r3, r2, r3
 8006fde:	647b      	str	r3, [r7, #68]	@ 0x44
    }

    value_offset[0] = (uint8_t)((uint16_t)((value_location - sector_group_start)) >> 8);
 8006fe0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006fe2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006fe4:	1ad3      	subs	r3, r2, r3
 8006fe6:	b29b      	uxth	r3, r3
 8006fe8:	0a1b      	lsrs	r3, r3, #8
 8006fea:	b29b      	uxth	r3, r3
 8006fec:	b2da      	uxtb	r2, r3
 8006fee:	2438      	movs	r4, #56	@ 0x38
 8006ff0:	193b      	adds	r3, r7, r4
 8006ff2:	701a      	strb	r2, [r3, #0]
    value_offset[1] = (uint8_t)((value_location - sector_group_start));
 8006ff4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006ff6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006ff8:	1ad3      	subs	r3, r2, r3
 8006ffa:	b2da      	uxtb	r2, r3
 8006ffc:	193b      	adds	r3, r7, r4
 8006ffe:	705a      	strb	r2, [r3, #1]

    (void)memcpy(buffer, key, fcs->bytes_per_key);
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	795b      	ldrb	r3, [r3, #5]
 8007004:	001a      	movs	r2, r3
 8007006:	68b9      	ldr	r1, [r7, #8]
 8007008:	2518      	movs	r5, #24
 800700a:	197b      	adds	r3, r7, r5
 800700c:	0018      	movs	r0, r3
 800700e:	f003 f849 	bl	800a0a4 <memcpy>
    (void)memcpy(&buffer[fcs->bytes_per_key], value_offset, BYTES_OF_OFFSET_FIELD);
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	795b      	ldrb	r3, [r3, #5]
 8007016:	001a      	movs	r2, r3
 8007018:	197b      	adds	r3, r7, r5
 800701a:	189a      	adds	r2, r3, r2
 800701c:	193b      	adds	r3, r7, r4
 800701e:	0010      	movs	r0, r2
 8007020:	0019      	movs	r1, r3
 8007022:	2302      	movs	r3, #2
 8007024:	001a      	movs	r2, r3
 8007026:	f003 f83d 	bl	800a0a4 <memcpy>
    (void)memcpy(&buffer[fcs->bytes_per_key + BYTES_OF_OFFSET_FIELD], &length, BYTES_OF_LENGTH_FIELD);
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	795b      	ldrb	r3, [r3, #5]
 800702e:	3302      	adds	r3, #2
 8007030:	197a      	adds	r2, r7, r5
 8007032:	18d3      	adds	r3, r2, r3
 8007034:	2237      	movs	r2, #55	@ 0x37
 8007036:	18ba      	adds	r2, r7, r2
 8007038:	7812      	ldrb	r2, [r2, #0]
 800703a:	701a      	strb	r2, [r3, #0]

    index = (uint8_t*)get_next_unused_index_location(fcs, sector_group_start);
 800703c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	0011      	movs	r1, r2
 8007042:	0018      	movs	r0, r3
 8007044:	f7ff fd27 	bl	8006a96 <get_next_unused_index_location>
 8007048:	0003      	movs	r3, r0
 800704a:	63fb      	str	r3, [r7, #60]	@ 0x3c
	
	// Perform a sanity check on the data location. We do not want to try and write to an invalid location. Value location is always an offset+start address so we can't go below sector start address.
	if ((( value_location + value_size )-1) > get_last_address_of_sector_group(fcs, sector_group_start) )
 800704c:	683b      	ldr	r3, [r7, #0]
 800704e:	3b01      	subs	r3, #1
 8007050:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007052:	18d4      	adds	r4, r2, r3
 8007054:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	0011      	movs	r1, r2
 800705a:	0018      	movs	r0, r3
 800705c:	f7ff fc7b 	bl	8006956 <get_last_address_of_sector_group>
 8007060:	0003      	movs	r3, r0
 8007062:	429c      	cmp	r4, r3
 8007064:	d901      	bls.n	800706a <write+0x10e>
	{
#if defined _MSC_VER || defined _WIN32 || defined __linux__ || defined linux /* On PC? */
		printf("Write command failure. Invalid offset. Line %u in %s\r\n", __LINE__, __func__);
#endif
		//Don't write anything, don't validate. Unfortunately, this is a critical failure b/c all future writes will fail here. 
		return 0; 
 8007066:	2300      	movs	r3, #0
 8007068:	e02f      	b.n	80070ca <write+0x16e>
	}

    /* write the index stuff in the index location */
    fcs->flash_write_callback(index + (fcs->minimum_writeable_bytes * 2), buffer, fcs->bytes_per_key + BYTES_OF_OFFSET_FIELD + BYTES_OF_LENGTH_FIELD - 1);
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	691b      	ldr	r3, [r3, #16]
 800706e:	68fa      	ldr	r2, [r7, #12]
 8007070:	7912      	ldrb	r2, [r2, #4]
 8007072:	0052      	lsls	r2, r2, #1
 8007074:	0011      	movs	r1, r2
 8007076:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8007078:	1850      	adds	r0, r2, r1
 800707a:	68fa      	ldr	r2, [r7, #12]
 800707c:	7952      	ldrb	r2, [r2, #5]
 800707e:	3202      	adds	r2, #2
 8007080:	2118      	movs	r1, #24
 8007082:	1879      	adds	r1, r7, r1
 8007084:	4798      	blx	r3

    /* write the value stuff in the value location */
    fcs->flash_write_callback((uint8_t*)value_location, value, value_size - 1);
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	691b      	ldr	r3, [r3, #16]
 800708a:	683a      	ldr	r2, [r7, #0]
 800708c:	3a01      	subs	r2, #1
 800708e:	6879      	ldr	r1, [r7, #4]
 8007090:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8007092:	4798      	blx	r3

    if(0 != validate_record)
 8007094:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007096:	2b00      	cmp	r3, #0
 8007098:	d006      	beq.n	80070a8 <write+0x14c>
    {
		/* write something into the validation field to mark this record as validated */
		fcs->flash_write_callback(index, &validation_byte, sizeof(validation_byte) - 1);
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	691b      	ldr	r3, [r3, #16]
 800709e:	2212      	movs	r2, #18
 80070a0:	18b9      	adds	r1, r7, r2
 80070a2:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80070a4:	2200      	movs	r2, #0
 80070a6:	4798      	blx	r3
    }


    /* now write something into the old record's invalidation field to invalidate it if it exists */
    if(0 != must_invalidate_old_record)
 80070a8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d00c      	beq.n	80070c8 <write+0x16c>
    {
        const uint8_t invalidation_byte = !NOT_INVALIDATED_MARKER;
 80070ae:	2411      	movs	r4, #17
 80070b0:	193b      	adds	r3, r7, r4
 80070b2:	2200      	movs	r2, #0
 80070b4:	701a      	strb	r2, [r3, #0]
        fcs->flash_write_callback(old_record_index + fcs->minimum_writeable_bytes, &invalidation_byte, sizeof(invalidation_byte) - 1);
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	691b      	ldr	r3, [r3, #16]
 80070ba:	697a      	ldr	r2, [r7, #20]
 80070bc:	68f9      	ldr	r1, [r7, #12]
 80070be:	7909      	ldrb	r1, [r1, #4]
 80070c0:	1850      	adds	r0, r2, r1
 80070c2:	1939      	adds	r1, r7, r4
 80070c4:	2200      	movs	r2, #0
 80070c6:	4798      	blx	r3
    }

    return value_size;
 80070c8:	683b      	ldr	r3, [r7, #0]
}
 80070ca:	0018      	movs	r0, r3
 80070cc:	46bd      	mov	sp, r7
 80070ce:	b012      	add	sp, #72	@ 0x48
 80070d0:	bdb0      	pop	{r4, r5, r7, pc}

080070d2 <migrate_records>:

static void migrate_records(flash_controller_struct *fcs)
{
 80070d2:	b590      	push	{r4, r7, lr}
 80070d4:	b091      	sub	sp, #68	@ 0x44
 80070d6:	af02      	add	r7, sp, #8
 80070d8:	6078      	str	r0, [r7, #4]
     * validate the sector group until all data has been migrated.  So store 
     * the index of the first record, so we can go back to it and validate it 
     * when we're done migrating.
     */
    uint8_t *first_index;
    unsigned int  has_skipped_first_record_yet = 0;
 80070da:	2300      	movs	r3, #0
 80070dc:	633b      	str	r3, [r7, #48]	@ 0x30
	bool validRecordToWrite = false;
 80070de:	232f      	movs	r3, #47	@ 0x2f
 80070e0:	18fb      	adds	r3, r7, r3
 80070e2:	2200      	movs	r2, #0
 80070e4:	701a      	strb	r2, [r3, #0]

    new_group_index = (get_active_sector_group_address(fcs) == fcs->second_sector_group_start) ? fcs->first_sector_group_start : fcs->second_sector_group_start;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	0018      	movs	r0, r3
 80070ea:	f7ff fc1a 	bl	8006922 <get_active_sector_group_address>
 80070ee:	0002      	movs	r2, r0
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	68db      	ldr	r3, [r3, #12]
 80070f4:	429a      	cmp	r2, r3
 80070f6:	d102      	bne.n	80070fe <migrate_records+0x2c>
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	689b      	ldr	r3, [r3, #8]
 80070fc:	e001      	b.n	8007102 <migrate_records+0x30>
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	68db      	ldr	r3, [r3, #12]
 8007102:	61fb      	str	r3, [r7, #28]
    new_group_start = new_group_index;
 8007104:	69fb      	ldr	r3, [r7, #28]
 8007106:	61bb      	str	r3, [r7, #24]
    old_group_start = get_active_sector_group_address(fcs);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	0018      	movs	r0, r3
 800710c:	f7ff fc09 	bl	8006922 <get_active_sector_group_address>
 8007110:	0003      	movs	r3, r0
 8007112:	617b      	str	r3, [r7, #20]
    old_group_index = get_first_valid_index_location(fcs, old_group_start);
 8007114:	697a      	ldr	r2, [r7, #20]
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	0011      	movs	r1, r2
 800711a:	0018      	movs	r0, r3
 800711c:	f7ff fd26 	bl	8006b6c <get_first_valid_index_location>
 8007120:	0003      	movs	r3, r0
 8007122:	637b      	str	r3, [r7, #52]	@ 0x34
    first_index = (uint8_t*)new_group_index;
 8007124:	69fb      	ldr	r3, [r7, #28]
 8007126:	613b      	str	r3, [r7, #16]
    
    if(fcs->migration.flash_migration_start_callback != NULL )
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800712c:	2b00      	cmp	r3, #0
 800712e:	d002      	beq.n	8007136 <migrate_records+0x64>
    {
    	fcs->migration.flash_migration_start_callback();
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007134:	4798      	blx	r3
    }
	fcs->migration.migrationInProgress = 1;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	2201      	movs	r2, #1
 800713a:	771a      	strb	r2, [r3, #28]
	fcs->migration.firstIndexInNewGroup = first_index;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	693a      	ldr	r2, [r7, #16]
 8007140:	621a      	str	r2, [r3, #32]
    {
        const uint8_t *key, *value;
        size_t        value_size;

        /* get the info from the record in the old sector group */
        key        = point_to_key_from_index(fcs, old_group_index);
 8007142:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	0011      	movs	r1, r2
 8007148:	0018      	movs	r0, r3
 800714a:	f7ff fda8 	bl	8006c9e <point_to_key_from_index>
 800714e:	0003      	movs	r3, r0
 8007150:	62bb      	str	r3, [r7, #40]	@ 0x28
        value      = point_to_value_from_index(fcs, old_group_index, old_group_start);
 8007152:	697a      	ldr	r2, [r7, #20]
 8007154:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	0018      	movs	r0, r3
 800715a:	f7ff fbb5 	bl	80068c8 <point_to_value_from_index>
 800715e:	0003      	movs	r3, r0
 8007160:	627b      	str	r3, [r7, #36]	@ 0x24
        value_size = get_length_from_index(fcs, old_group_index);
 8007162:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	0011      	movs	r1, r2
 8007168:	0018      	movs	r0, r3
 800716a:	f7ff fdc1 	bl	8006cf0 <get_length_from_index>
 800716e:	0003      	movs	r3, r0
 8007170:	623b      	str	r3, [r7, #32]

        /* key is a pointer. write expects these to be pointers to the values. This works fine for internal flash systems but does not match external flash architecture which provides address of location.
         * value is a pointer to start of data. Again, this is fine for internal flash but this is the address of data in external memory systems, requiring a read.
         * value_size is an integer, not pointer. */
		if (fcs->flash_read_callback)
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	699b      	ldr	r3, [r3, #24]
 8007176:	2b00      	cmp	r3, #0
 8007178:	d044      	beq.n	8007204 <migrate_records+0x132>
		{
			if (key <= get_last_address_of_sector_group(fcs, old_group_start) && value <= get_last_address_of_sector_group(fcs, old_group_start) )
 800717a:	697a      	ldr	r2, [r7, #20]
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	0011      	movs	r1, r2
 8007180:	0018      	movs	r0, r3
 8007182:	f7ff fbe8 	bl	8006956 <get_last_address_of_sector_group>
 8007186:	0002      	movs	r2, r0
 8007188:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800718a:	4293      	cmp	r3, r2
 800718c:	d848      	bhi.n	8007220 <migrate_records+0x14e>
 800718e:	697a      	ldr	r2, [r7, #20]
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	0011      	movs	r1, r2
 8007194:	0018      	movs	r0, r3
 8007196:	f7ff fbde 	bl	8006956 <get_last_address_of_sector_group>
 800719a:	0002      	movs	r2, r0
 800719c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800719e:	4293      	cmp	r3, r2
 80071a0:	d83e      	bhi.n	8007220 <migrate_records+0x14e>
			{
				/* Cannot use the scratchpad buffer here as it is written to within write function so incorporating a new dataMigrationBuffer */
				read_mem(fcs, key, fcs->migration.dataMigrationBuffer, fcs->bytes_per_key - 1);
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	795b      	ldrb	r3, [r3, #5]
 80071aa:	3b01      	subs	r3, #1
 80071ac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80071ae:	6878      	ldr	r0, [r7, #4]
 80071b0:	f7ff fb6d 	bl	800688e <read_mem>
				if ((value_size + fcs->bytes_per_key) > fcs->migration.dataMigrationBufferSz)
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	795b      	ldrb	r3, [r3, #5]
 80071b8:	001a      	movs	r2, r3
 80071ba:	6a3b      	ldr	r3, [r7, #32]
 80071bc:	18d2      	adds	r2, r2, r3
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071c2:	429a      	cmp	r2, r3
 80071c4:	d905      	bls.n	80071d2 <migrate_records+0x100>
				{
					value_size = fcs->migration.dataMigrationBufferSz - fcs->bytes_per_key;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071ca:	687a      	ldr	r2, [r7, #4]
 80071cc:	7952      	ldrb	r2, [r2, #5]
 80071ce:	1a9b      	subs	r3, r3, r2
 80071d0:	623b      	str	r3, [r7, #32]
				}
				read_mem(fcs, value, fcs->migration.dataMigrationBuffer + fcs->bytes_per_key, value_size - 1);			/* We have to assume scratchpadBuffer is large enough to largest data record + size of key */
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071d6:	687a      	ldr	r2, [r7, #4]
 80071d8:	7952      	ldrb	r2, [r2, #5]
 80071da:	189a      	adds	r2, r3, r2
 80071dc:	6a3b      	ldr	r3, [r7, #32]
 80071de:	3b01      	subs	r3, #1
 80071e0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80071e2:	6878      	ldr	r0, [r7, #4]
 80071e4:	f7ff fb53 	bl	800688e <read_mem>
				key = fcs->migration.dataMigrationBuffer;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071ec:	62bb      	str	r3, [r7, #40]	@ 0x28
				value = fcs->migration.dataMigrationBuffer + fcs->bytes_per_key;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071f2:	687a      	ldr	r2, [r7, #4]
 80071f4:	7952      	ldrb	r2, [r2, #5]
 80071f6:	189b      	adds	r3, r3, r2
 80071f8:	627b      	str	r3, [r7, #36]	@ 0x24

				validRecordToWrite = true;
 80071fa:	232f      	movs	r3, #47	@ 0x2f
 80071fc:	18fb      	adds	r3, r7, r3
 80071fe:	2201      	movs	r2, #1
 8007200:	701a      	strb	r2, [r3, #0]
 8007202:	e00d      	b.n	8007220 <migrate_records+0x14e>
		else
		{
			/* Don't do anything for internal flash devices, they can use pointers to less overhead on migration which means no copying to dataMigrationBuffer before the write. */
			/* and write it into the new sector group */
			// When Migrating, we should do a sanity check. We do not want to migrate a dirty record that has a bad offset. 
			if (value /*address of*/ <= get_last_address_of_sector_group(fcs, old_group_start))
 8007204:	697a      	ldr	r2, [r7, #20]
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	0011      	movs	r1, r2
 800720a:	0018      	movs	r0, r3
 800720c:	f7ff fba3 	bl	8006956 <get_last_address_of_sector_group>
 8007210:	0002      	movs	r2, r0
 8007212:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007214:	4293      	cmp	r3, r2
 8007216:	d803      	bhi.n	8007220 <migrate_records+0x14e>
			{
				validRecordToWrite = true;
 8007218:	232f      	movs	r3, #47	@ 0x2f
 800721a:	18fb      	adds	r3, r7, r3
 800721c:	2201      	movs	r2, #1
 800721e:	701a      	strb	r2, [r3, #0]
			}
		}

		if(validRecordToWrite)
 8007220:	222f      	movs	r2, #47	@ 0x2f
 8007222:	18bb      	adds	r3, r7, r2
 8007224:	781b      	ldrb	r3, [r3, #0]
 8007226:	2b00      	cmp	r3, #0
 8007228:	d012      	beq.n	8007250 <migrate_records+0x17e>
		{
			validRecordToWrite = false;
 800722a:	18bb      	adds	r3, r7, r2
 800722c:	2200      	movs	r2, #0
 800722e:	701a      	strb	r2, [r3, #0]
			write(fcs, key, value, value_size, new_group_start, has_skipped_first_record_yet);
 8007230:	6a3c      	ldr	r4, [r7, #32]
 8007232:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007234:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007236:	6878      	ldr	r0, [r7, #4]
 8007238:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800723a:	9301      	str	r3, [sp, #4]
 800723c:	69bb      	ldr	r3, [r7, #24]
 800723e:	9300      	str	r3, [sp, #0]
 8007240:	0023      	movs	r3, r4
 8007242:	f7ff fe8b 	bl	8006f5c <write>
			
			if (0 == has_skipped_first_record_yet)
 8007246:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007248:	2b00      	cmp	r3, #0
 800724a:	d101      	bne.n	8007250 <migrate_records+0x17e>
			{
				has_skipped_first_record_yet = 1;
 800724c:	2301      	movs	r3, #1
 800724e:	633b      	str	r3, [r7, #48]	@ 0x30
#if defined _MSC_VER || defined _WIN32 || defined __linux__ || defined linux /* On PC? */
			printf("Skipping record in migration Line %u in %s\r\n", __LINE__, __func__);
#endif
		}

    } while((void*)0 != (old_group_index = get_next_valid_index_location(fcs, old_group_index, old_group_start)));
 8007250:	697a      	ldr	r2, [r7, #20]
 8007252:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	0018      	movs	r0, r3
 8007258:	f7ff fcef 	bl	8006c3a <get_next_valid_index_location>
 800725c:	0003      	movs	r3, r0
 800725e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007260:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007262:	2b00      	cmp	r3, #0
 8007264:	d000      	beq.n	8007268 <migrate_records+0x196>
 8007266:	e76c      	b.n	8007142 <migrate_records+0x70>

    /* finally validate the first record, which also validates the entire sector group */
    {
        const uint8_t validation_byte = !NOT_VALIDATED_MARKER;
 8007268:	210f      	movs	r1, #15
 800726a:	187b      	adds	r3, r7, r1
 800726c:	2200      	movs	r2, #0
 800726e:	701a      	strb	r2, [r3, #0]
        fcs->flash_write_callback(first_index, &validation_byte, sizeof(validation_byte) - 1);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	691b      	ldr	r3, [r3, #16]
 8007274:	1879      	adds	r1, r7, r1
 8007276:	6938      	ldr	r0, [r7, #16]
 8007278:	2200      	movs	r2, #0
 800727a:	4798      	blx	r3
    }

    /* All valid data has now been migrated from the old sector group to the 
     * new sector group.  So erase the old sector group.
     */
    fcs->flash_erase_callback((uint8_t*)old_group_start, fcs->sector_group_length_minus_one);
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	695a      	ldr	r2, [r3, #20]
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	6819      	ldr	r1, [r3, #0]
 8007284:	697b      	ldr	r3, [r7, #20]
 8007286:	0018      	movs	r0, r3
 8007288:	4790      	blx	r2

    if(fcs->migration.flash_migration_complete_callback != NULL )
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800728e:	2b00      	cmp	r3, #0
 8007290:	d002      	beq.n	8007298 <migrate_records+0x1c6>
    {
    	fcs->migration.flash_migration_complete_callback();
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007296:	4798      	blx	r3
    }
	fcs->migration.migrationInProgress = 0;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2200      	movs	r2, #0
 800729c:	771a      	strb	r2, [r3, #28]
	fcs->migration.firstIndexInNewGroup = (void*)0;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	2200      	movs	r2, #0
 80072a2:	621a      	str	r2, [r3, #32]
	printf("---------------------------------------------------------------------------------\r\n");
	printf("                               MIGRATION COMPLETE                                \r\n");
	printf("---------------------------------------------------------------------------------\r\n");
#endif
#endif
}
 80072a4:	46c0      	nop			@ (mov r8, r8)
 80072a6:	46bd      	mov	sp, r7
 80072a8:	b00f      	add	sp, #60	@ 0x3c
 80072aa:	bd90      	pop	{r4, r7, pc}

080072ac <flash_controller_read>:

size_t flash_controller_read(const flash_controller_struct *fcs,
                             const uint8_t key[],
                             uint8_t       value[],
                             size_t        value_size)
{
 80072ac:	b5b0      	push	{r4, r5, r7, lr}
 80072ae:	b088      	sub	sp, #32
 80072b0:	af02      	add	r7, sp, #8
 80072b2:	60f8      	str	r0, [r7, #12]
 80072b4:	60b9      	str	r1, [r7, #8]
 80072b6:	607a      	str	r2, [r7, #4]
 80072b8:	603b      	str	r3, [r7, #0]
    const uint8_t* dummy_index; /* not used, but can't be a void pointer */
    return read(fcs, key, value, value_size, get_active_sector_group_address(fcs), &dummy_index);
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	0018      	movs	r0, r3
 80072be:	f7ff fb30 	bl	8006922 <get_active_sector_group_address>
 80072c2:	0005      	movs	r5, r0
 80072c4:	683c      	ldr	r4, [r7, #0]
 80072c6:	687a      	ldr	r2, [r7, #4]
 80072c8:	68b9      	ldr	r1, [r7, #8]
 80072ca:	68f8      	ldr	r0, [r7, #12]
 80072cc:	2314      	movs	r3, #20
 80072ce:	18fb      	adds	r3, r7, r3
 80072d0:	9301      	str	r3, [sp, #4]
 80072d2:	9500      	str	r5, [sp, #0]
 80072d4:	0023      	movs	r3, r4
 80072d6:	f7ff fdcb 	bl	8006e70 <read>
 80072da:	0003      	movs	r3, r0
}
 80072dc:	0018      	movs	r0, r3
 80072de:	46bd      	mov	sp, r7
 80072e0:	b006      	add	sp, #24
 80072e2:	bdb0      	pop	{r4, r5, r7, pc}

080072e4 <flash_controller_write>:

size_t flash_controller_write(const flash_controller_struct *fcs,
                              const uint8_t key[],
                              const uint8_t value[],
                              size_t        value_size)
{
 80072e4:	b5b0      	push	{r4, r5, r7, lr}
 80072e6:	b086      	sub	sp, #24
 80072e8:	af02      	add	r7, sp, #8
 80072ea:	60f8      	str	r0, [r7, #12]
 80072ec:	60b9      	str	r1, [r7, #8]
 80072ee:	607a      	str	r2, [r7, #4]
 80072f0:	603b      	str	r3, [r7, #0]
    /* First verify there is enough free space for this new record.  Note that 
     * the "* 2" is because we want at least one index's worth of bytes free 
     * (in addition to the one we're about to write) always, so the indices and 
     * values don't run into each other.
     */
    if(get_unused_sector_group_space(fcs, get_active_sector_group_address(fcs)) < ((get_sizeof_index_location(fcs) * 2) + value_size))
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	0018      	movs	r0, r3
 80072f6:	f7ff fb14 	bl	8006922 <get_active_sector_group_address>
 80072fa:	0002      	movs	r2, r0
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	0011      	movs	r1, r2
 8007300:	0018      	movs	r0, r3
 8007302:	f7ff fd34 	bl	8006d6e <get_unused_sector_group_space>
 8007306:	0004      	movs	r4, r0
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	0018      	movs	r0, r3
 800730c:	f7ff fb30 	bl	8006970 <get_sizeof_index_location>
 8007310:	0003      	movs	r3, r0
 8007312:	005a      	lsls	r2, r3, #1
 8007314:	683b      	ldr	r3, [r7, #0]
 8007316:	18d3      	adds	r3, r2, r3
 8007318:	429c      	cmp	r4, r3
 800731a:	d203      	bcs.n	8007324 <flash_controller_write+0x40>
    {
        /* Not enough free space.  Need to migrate to the next sector group. */
        migrate_records( (flash_controller_struct *)fcs);
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	0018      	movs	r0, r3
 8007320:	f7ff fed7 	bl	80070d2 <migrate_records>
    }

    write(fcs, key, value, value_size, get_active_sector_group_address(fcs), 1);
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	0018      	movs	r0, r3
 8007328:	f7ff fafb 	bl	8006922 <get_active_sector_group_address>
 800732c:	0004      	movs	r4, r0
 800732e:	683b      	ldr	r3, [r7, #0]
 8007330:	687a      	ldr	r2, [r7, #4]
 8007332:	68b9      	ldr	r1, [r7, #8]
 8007334:	68f8      	ldr	r0, [r7, #12]
 8007336:	2501      	movs	r5, #1
 8007338:	9501      	str	r5, [sp, #4]
 800733a:	9400      	str	r4, [sp, #0]
 800733c:	f7ff fe0e 	bl	8006f5c <write>

    return value_size;
 8007340:	683b      	ldr	r3, [r7, #0]
}
 8007342:	0018      	movs	r0, r3
 8007344:	46bd      	mov	sp, r7
 8007346:	b004      	add	sp, #16
 8007348:	bdb0      	pop	{r4, r5, r7, pc}

0800734a <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 800734a:	b580      	push	{r7, lr}
 800734c:	b084      	sub	sp, #16
 800734e:	af00      	add	r7, sp, #0
 8007350:	60f8      	str	r0, [r7, #12]
 8007352:	60b9      	str	r1, [r7, #8]
 8007354:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	6819      	ldr	r1, [r3, #0]
 800735a:	68bb      	ldr	r3, [r7, #8]
 800735c:	435b      	muls	r3, r3
 800735e:	001a      	movs	r2, r3
 8007360:	0013      	movs	r3, r2
 8007362:	005b      	lsls	r3, r3, #1
 8007364:	189b      	adds	r3, r3, r2
 8007366:	43db      	mvns	r3, r3
 8007368:	400b      	ands	r3, r1
 800736a:	001a      	movs	r2, r3
 800736c:	68bb      	ldr	r3, [r7, #8]
 800736e:	435b      	muls	r3, r3
 8007370:	6879      	ldr	r1, [r7, #4]
 8007372:	434b      	muls	r3, r1
 8007374:	431a      	orrs	r2, r3
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	601a      	str	r2, [r3, #0]
}
 800737a:	46c0      	nop			@ (mov r8, r8)
 800737c:	46bd      	mov	sp, r7
 800737e:	b004      	add	sp, #16
 8007380:	bd80      	pop	{r7, pc}

08007382 <LL_GPIO_ReadInputPort>:
  * @rmtoll IDR          IDy           LL_GPIO_ReadInputPort
  * @param  GPIOx GPIO Port
  * @retval Input data register value of port
  */
__STATIC_INLINE uint32_t LL_GPIO_ReadInputPort(GPIO_TypeDef *GPIOx)
{
 8007382:	b580      	push	{r7, lr}
 8007384:	b082      	sub	sp, #8
 8007386:	af00      	add	r7, sp, #0
 8007388:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(GPIOx->IDR));
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	691b      	ldr	r3, [r3, #16]
}
 800738e:	0018      	movs	r0, r3
 8007390:	46bd      	mov	sp, r7
 8007392:	b002      	add	sp, #8
 8007394:	bd80      	pop	{r7, pc}

08007396 <hal_gpio_init>:
#include "stm32g0xx_ll_gpio.h"
#include "main.h"
#include "gpio.h"

void hal_gpio_init(void)
{
 8007396:	b580      	push	{r7, lr}
 8007398:	af00      	add	r7, sp, #0
	// Call the GPIO initialization function setup by the STM32CubeIDE Device Configuration Tool:
	MX_GPIO_Init();
 800739a:	f7fa fb67 	bl	8001a6c <MX_GPIO_Init>
}
 800739e:	46c0      	nop			@ (mov r8, r8)
 80073a0:	46bd      	mov	sp, r7
 80073a2:	bd80      	pop	{r7, pc}

080073a4 <hal_gpio_set_output>:
{
  return HAL_GPIO_ReadPin(port_defs[id], pin_defs[id].Pin);
}

void hal_gpio_set_output(enum pin_id id, bool value)
{
 80073a4:	b580      	push	{r7, lr}
 80073a6:	b082      	sub	sp, #8
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	0002      	movs	r2, r0
 80073ac:	1dfb      	adds	r3, r7, #7
 80073ae:	701a      	strb	r2, [r3, #0]
 80073b0:	1dbb      	adds	r3, r7, #6
 80073b2:	1c0a      	adds	r2, r1, #0
 80073b4:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin(port_defs[id], pin_defs[id].Pin, (GPIO_PinState)(value != false));
 80073b6:	1dfb      	adds	r3, r7, #7
 80073b8:	781a      	ldrb	r2, [r3, #0]
 80073ba:	4b0a      	ldr	r3, [pc, #40]	@ (80073e4 <hal_gpio_set_output+0x40>)
 80073bc:	0092      	lsls	r2, r2, #2
 80073be:	58d0      	ldr	r0, [r2, r3]
 80073c0:	1dfb      	adds	r3, r7, #7
 80073c2:	781a      	ldrb	r2, [r3, #0]
 80073c4:	4908      	ldr	r1, [pc, #32]	@ (80073e8 <hal_gpio_set_output+0x44>)
 80073c6:	0013      	movs	r3, r2
 80073c8:	009b      	lsls	r3, r3, #2
 80073ca:	189b      	adds	r3, r3, r2
 80073cc:	009b      	lsls	r3, r3, #2
 80073ce:	585b      	ldr	r3, [r3, r1]
 80073d0:	b299      	uxth	r1, r3
 80073d2:	1dbb      	adds	r3, r7, #6
 80073d4:	781b      	ldrb	r3, [r3, #0]
 80073d6:	001a      	movs	r2, r3
 80073d8:	f7fc fbce 	bl	8003b78 <HAL_GPIO_WritePin>
}
 80073dc:	46c0      	nop			@ (mov r8, r8)
 80073de:	46bd      	mov	sp, r7
 80073e0:	b002      	add	sp, #8
 80073e2:	bd80      	pop	{r7, pc}
 80073e4:	0800a314 	.word	0x0800a314
 80073e8:	0800a1fc 	.word	0x0800a1fc

080073ec <hal_gpio_set_pin_mode>:
void hal_gpio_set_pull(enum pin_id id, uint32_t pull)
{
  LL_GPIO_SetPinPull(port_defs[id], pin_defs[id].Pin, pull);
}
void hal_gpio_set_pin_mode(enum pin_id id, uint32_t mode)
{
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b082      	sub	sp, #8
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	0002      	movs	r2, r0
 80073f4:	6039      	str	r1, [r7, #0]
 80073f6:	1dfb      	adds	r3, r7, #7
 80073f8:	701a      	strb	r2, [r3, #0]
	LL_GPIO_SetPinMode(port_defs[id], pin_defs[id].Pin, mode);
 80073fa:	1dfb      	adds	r3, r7, #7
 80073fc:	781a      	ldrb	r2, [r3, #0]
 80073fe:	4b09      	ldr	r3, [pc, #36]	@ (8007424 <hal_gpio_set_pin_mode+0x38>)
 8007400:	0092      	lsls	r2, r2, #2
 8007402:	58d0      	ldr	r0, [r2, r3]
 8007404:	1dfb      	adds	r3, r7, #7
 8007406:	781a      	ldrb	r2, [r3, #0]
 8007408:	4907      	ldr	r1, [pc, #28]	@ (8007428 <hal_gpio_set_pin_mode+0x3c>)
 800740a:	0013      	movs	r3, r2
 800740c:	009b      	lsls	r3, r3, #2
 800740e:	189b      	adds	r3, r3, r2
 8007410:	009b      	lsls	r3, r3, #2
 8007412:	585b      	ldr	r3, [r3, r1]
 8007414:	683a      	ldr	r2, [r7, #0]
 8007416:	0019      	movs	r1, r3
 8007418:	f7ff ff97 	bl	800734a <LL_GPIO_SetPinMode>
}
 800741c:	46c0      	nop			@ (mov r8, r8)
 800741e:	46bd      	mov	sp, r7
 8007420:	b002      	add	sp, #8
 8007422:	bd80      	pop	{r7, pc}
 8007424:	0800a314 	.word	0x0800a314
 8007428:	0800a1fc 	.word	0x0800a1fc

0800742c <hal_gpio_read_port>:
	return LL_GPIO_GetPinMode(port_defs[id], pin_defs[id].Pin);
}

// Returns the bitmap of the pin values within the specified GPIO Port.
uint32_t hal_gpio_read_port(pin_port_t* GpioPort)
{
 800742c:	b580      	push	{r7, lr}
 800742e:	b082      	sub	sp, #8
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
	return LL_GPIO_ReadInputPort(GpioPort);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	0018      	movs	r0, r3
 8007438:	f7ff ffa3 	bl	8007382 <LL_GPIO_ReadInputPort>
 800743c:	0003      	movs	r3, r0
}
 800743e:	0018      	movs	r0, r3
 8007440:	46bd      	mov	sp, r7
 8007442:	b002      	add	sp, #8
 8007444:	bd80      	pop	{r7, pc}

08007446 <hal_timer_get_systick>:
*
*  return values:  The current 1 millisecond systick count
*  remarks:
*********************************************************************************/
uint32_t hal_timer_get_systick(void)
{
 8007446:	b580      	push	{r7, lr}
 8007448:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800744a:	f7fb fb47 	bl	8002adc <HAL_GetTick>
 800744e:	0003      	movs	r3, r0
}
 8007450:	0018      	movs	r0, r3
 8007452:	46bd      	mov	sp, r7
 8007454:	bd80      	pop	{r7, pc}

08007456 <hal_timer_get_ticks_since_count>:
*
*  remarks:
*********************************************************************************/

uint32_t hal_timer_get_ticks_since_count(uint32_t lastCount)
{
 8007456:	b580      	push	{r7, lr}
 8007458:	b084      	sub	sp, #16
 800745a:	af00      	add	r7, sp, #0
 800745c:	6078      	str	r0, [r7, #4]
    uint32_t result;
    uint32_t currentCount = hal_timer_get_systick();
 800745e:	f7ff fff2 	bl	8007446 <hal_timer_get_systick>
 8007462:	0003      	movs	r3, r0
 8007464:	60bb      	str	r3, [r7, #8]

    // Check if the counter rolled over:
    if (currentCount >= lastCount)
 8007466:	68ba      	ldr	r2, [r7, #8]
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	429a      	cmp	r2, r3
 800746c:	d304      	bcc.n	8007478 <hal_timer_get_ticks_since_count+0x22>
    {
        //Counter has not rolled over.
        result = currentCount - lastCount;
 800746e:	68ba      	ldr	r2, [r7, #8]
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	1ad3      	subs	r3, r2, r3
 8007474:	60fb      	str	r3, [r7, #12]
 8007476:	e004      	b.n	8007482 <hal_timer_get_ticks_since_count+0x2c>
    }
    else
    {
        // The counter rolled over / overflowed. Deal with it:
        result = UINT32_MAX - lastCount + currentCount;
 8007478:	68ba      	ldr	r2, [r7, #8]
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	1ad3      	subs	r3, r2, r3
 800747e:	3b01      	subs	r3, #1
 8007480:	60fb      	str	r3, [r7, #12]
    }

    return result;
 8007482:	68fb      	ldr	r3, [r7, #12]
}
 8007484:	0018      	movs	r0, r3
 8007486:	46bd      	mov	sp, r7
 8007488:	b004      	add	sp, #16
 800748a:	bd80      	pop	{r7, pc}

0800748c <hal_timer_init>:
{
	SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk; /* disable systick */
}

void hal_timer_init(void)
{
 800748c:	b580      	push	{r7, lr}
 800748e:	af00      	add	r7, sp, #0

	  // Note that the following "USING" macros are defined in perphdefs.h
#if defined  USING_TIM1
	  MX_TIM1_Init();
 8007490:	f7fa fe7a 	bl	8002188 <MX_TIM1_Init>
#endif
#if defined  USING_TIM3
	  MX_TIM3_Init();
 8007494:	f7fa ff42 	bl	800231c <MX_TIM3_Init>
#endif
#if defined  USING_TIM6
	  MX_TIM6_Init();
 8007498:	f7fa ffc0 	bl	800241c <MX_TIM6_Init>
#endif
#if defined  USING_TIM14
	  MX_TIM14_Init();
#endif
#if defined  USING_TIM15
	  MX_TIM15_Init();
 800749c:	f7fa fff8 	bl	8002490 <MX_TIM15_Init>
#endif
#if defined  USING_TIM17
	  MX_TIM17_Init();
#endif

    hal_timer_set_timer_for_blocking_delays(TIMER_BLOCKING_DELAY);
 80074a0:	2003      	movs	r0, #3
 80074a2:	f000 fbf7 	bl	8007c94 <hal_timer_set_timer_for_blocking_delays>

}
 80074a6:	46c0      	nop			@ (mov r8, r8)
 80074a8:	46bd      	mov	sp, r7
 80074aa:	bd80      	pop	{r7, pc}

080074ac <hal_timer_RunPwAtDutyCycle>:

	return TimerIsRunning;
}

void hal_timer_RunPwAtDutyCycle(enum timer_id id, uint16_t dutyCyclePct)
{
 80074ac:	b590      	push	{r4, r7, lr}
 80074ae:	b085      	sub	sp, #20
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	0002      	movs	r2, r0
 80074b4:	1dfb      	adds	r3, r7, #7
 80074b6:	701a      	strb	r2, [r3, #0]
 80074b8:	1d3b      	adds	r3, r7, #4
 80074ba:	1c0a      	adds	r2, r1, #0
 80074bc:	801a      	strh	r2, [r3, #0]
	// Make sure that we aren't going to overrun our arrays:
	if (NUMBER_OF_TIMERS > id)
 80074be:	1dfb      	adds	r3, r7, #7
 80074c0:	781b      	ldrb	r3, [r3, #0]
 80074c2:	2b03      	cmp	r3, #3
 80074c4:	d826      	bhi.n	8007514 <hal_timer_RunPwAtDutyCycle+0x68>
	{
		// Check the the auto reload register value to see if it is zero:
		if (TimerArrValue[id] != 0)
 80074c6:	1dfb      	adds	r3, r7, #7
 80074c8:	781a      	ldrb	r2, [r3, #0]
 80074ca:	4b14      	ldr	r3, [pc, #80]	@ (800751c <hal_timer_RunPwAtDutyCycle+0x70>)
 80074cc:	0052      	lsls	r2, r2, #1
 80074ce:	5ad3      	ldrh	r3, [r2, r3]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d01f      	beq.n	8007514 <hal_timer_RunPwAtDutyCycle+0x68>
		{
			uint16_t arrValue = TimerArrValue[id];
 80074d4:	1dfb      	adds	r3, r7, #7
 80074d6:	7819      	ldrb	r1, [r3, #0]
 80074d8:	240e      	movs	r4, #14
 80074da:	193b      	adds	r3, r7, r4
 80074dc:	4a0f      	ldr	r2, [pc, #60]	@ (800751c <hal_timer_RunPwAtDutyCycle+0x70>)
 80074de:	0049      	lsls	r1, r1, #1
 80074e0:	5a8a      	ldrh	r2, [r1, r2]
 80074e2:	801a      	strh	r2, [r3, #0]

			uint16_t on_time = (uint16_t)((((uint32_t)arrValue + 1) * (uint32_t)dutyCyclePct)/ 100 );
 80074e4:	193b      	adds	r3, r7, r4
 80074e6:	881b      	ldrh	r3, [r3, #0]
 80074e8:	3301      	adds	r3, #1
 80074ea:	1d3a      	adds	r2, r7, #4
 80074ec:	8812      	ldrh	r2, [r2, #0]
 80074ee:	4353      	muls	r3, r2
 80074f0:	2164      	movs	r1, #100	@ 0x64
 80074f2:	0018      	movs	r0, r3
 80074f4:	f7f8 fe60 	bl	80001b8 <__udivsi3>
 80074f8:	0003      	movs	r3, r0
 80074fa:	001a      	movs	r2, r3
 80074fc:	210c      	movs	r1, #12
 80074fe:	187b      	adds	r3, r7, r1
 8007500:	801a      	strh	r2, [r3, #0]

			hal_timer_set_pwm_output_period(id, arrValue, on_time);
 8007502:	187b      	adds	r3, r7, r1
 8007504:	881a      	ldrh	r2, [r3, #0]
 8007506:	193b      	adds	r3, r7, r4
 8007508:	8819      	ldrh	r1, [r3, #0]
 800750a:	1dfb      	adds	r3, r7, #7
 800750c:	781b      	ldrb	r3, [r3, #0]
 800750e:	0018      	movs	r0, r3
 8007510:	f000 f818 	bl	8007544 <hal_timer_set_pwm_output_period>
		}
	}
}
 8007514:	46c0      	nop			@ (mov r8, r8)
 8007516:	46bd      	mov	sp, r7
 8007518:	b005      	add	sp, #20
 800751a:	bd90      	pop	{r4, r7, pc}
 800751c:	0800a1f4 	.word	0x0800a1f4

08007520 <hal_timer_StopPwmOutput>:

void hal_timer_StopPwmOutput(enum timer_id id)
{
 8007520:	b580      	push	{r7, lr}
 8007522:	b082      	sub	sp, #8
 8007524:	af00      	add	r7, sp, #0
 8007526:	0002      	movs	r2, r0
 8007528:	1dfb      	adds	r3, r7, #7
 800752a:	701a      	strb	r2, [r3, #0]
	// Calling hal_timer_set_pwm_output_period() with a zero in either the period or the on_time
	//turns off the PWM output.
	hal_timer_set_pwm_output_period(id, 0, 0);
 800752c:	1dfb      	adds	r3, r7, #7
 800752e:	781b      	ldrb	r3, [r3, #0]
 8007530:	2200      	movs	r2, #0
 8007532:	2100      	movs	r1, #0
 8007534:	0018      	movs	r0, r3
 8007536:	f000 f805 	bl	8007544 <hal_timer_set_pwm_output_period>
}
 800753a:	46c0      	nop			@ (mov r8, r8)
 800753c:	46bd      	mov	sp, r7
 800753e:	b002      	add	sp, #8
 8007540:	bd80      	pop	{r7, pc}
	...

08007544 <hal_timer_set_pwm_output_period>:

void hal_timer_set_pwm_output_period(enum timer_id id, uint16_t period, uint16_t on_time)
{
 8007544:	b590      	push	{r4, r7, lr}
 8007546:	b085      	sub	sp, #20
 8007548:	af00      	add	r7, sp, #0
 800754a:	0004      	movs	r4, r0
 800754c:	0008      	movs	r0, r1
 800754e:	0011      	movs	r1, r2
 8007550:	1dfb      	adds	r3, r7, #7
 8007552:	1c22      	adds	r2, r4, #0
 8007554:	701a      	strb	r2, [r3, #0]
 8007556:	1d3b      	adds	r3, r7, #4
 8007558:	1c02      	adds	r2, r0, #0
 800755a:	801a      	strh	r2, [r3, #0]
 800755c:	1cbb      	adds	r3, r7, #2
 800755e:	1c0a      	adds	r2, r1, #0
 8007560:	801a      	strh	r2, [r3, #0]
	// TODO: Write function hal_timer_set_pwm_output_period()

    if(DUMMY_TIMER == timer_defs[id].timer)
 8007562:	1dfb      	adds	r3, r7, #7
 8007564:	781a      	ldrb	r2, [r3, #0]
 8007566:	4bc3      	ldr	r3, [pc, #780]	@ (8007874 <hal_timer_set_pwm_output_period+0x330>)
 8007568:	0112      	lsls	r2, r2, #4
 800756a:	58d3      	ldr	r3, [r2, r3]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d100      	bne.n	8007572 <hal_timer_set_pwm_output_period+0x2e>
 8007570:	e37c      	b.n	8007c6c <hal_timer_set_pwm_output_period+0x728>
    {
    	// No timer pointer was defined for this timer_defs member.
        return;
    }

    if((period == 0) || (on_time == 0))
 8007572:	1d3b      	adds	r3, r7, #4
 8007574:	881b      	ldrh	r3, [r3, #0]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d004      	beq.n	8007584 <hal_timer_set_pwm_output_period+0x40>
 800757a:	1cbb      	adds	r3, r7, #2
 800757c:	881b      	ldrh	r3, [r3, #0]
 800757e:	2b00      	cmp	r3, #0
 8007580:	d000      	beq.n	8007584 <hal_timer_set_pwm_output_period+0x40>
 8007582:	e09b      	b.n	80076bc <hal_timer_set_pwm_output_period+0x178>
        	/* disable the timer */
        	((LPTIM_TypeDef*)(timer_defs[id].timer))->CR &= ~LPTIM_CR_ENABLE;
        }
        else
#endif
        if( (timer_defs[id].type == TIM_BASIC) || (timer_defs[id].type == TIM_GEN_PURPOSE) )
 8007584:	1dfb      	adds	r3, r7, #7
 8007586:	781b      	ldrb	r3, [r3, #0]
 8007588:	4aba      	ldr	r2, [pc, #744]	@ (8007874 <hal_timer_set_pwm_output_period+0x330>)
 800758a:	011b      	lsls	r3, r3, #4
 800758c:	18d3      	adds	r3, r2, r3
 800758e:	3304      	adds	r3, #4
 8007590:	781b      	ldrb	r3, [r3, #0]
 8007592:	2b01      	cmp	r3, #1
 8007594:	d009      	beq.n	80075aa <hal_timer_set_pwm_output_period+0x66>
 8007596:	1dfb      	adds	r3, r7, #7
 8007598:	781b      	ldrb	r3, [r3, #0]
 800759a:	4ab6      	ldr	r2, [pc, #728]	@ (8007874 <hal_timer_set_pwm_output_period+0x330>)
 800759c:	011b      	lsls	r3, r3, #4
 800759e:	18d3      	adds	r3, r2, r3
 80075a0:	3304      	adds	r3, #4
 80075a2:	781b      	ldrb	r3, [r3, #0]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d000      	beq.n	80075aa <hal_timer_set_pwm_output_period+0x66>
 80075a8:	e362      	b.n	8007c70 <hal_timer_set_pwm_output_period+0x72c>
        {
        	if( timer_defs[id].channel < NumTimerChannels)
 80075aa:	1dfb      	adds	r3, r7, #7
 80075ac:	781b      	ldrb	r3, [r3, #0]
 80075ae:	4ab1      	ldr	r2, [pc, #708]	@ (8007874 <hal_timer_set_pwm_output_period+0x330>)
 80075b0:	011b      	lsls	r3, r3, #4
 80075b2:	18d3      	adds	r3, r2, r3
 80075b4:	3305      	adds	r3, #5
 80075b6:	781b      	ldrb	r3, [r3, #0]
 80075b8:	2b06      	cmp	r3, #6
 80075ba:	d818      	bhi.n	80075ee <hal_timer_set_pwm_output_period+0xaa>
        	{
        		((TIM_TypeDef *)(timer_defs[id].timer))->CCER  &=  ~ChannelCaptureCompareBits[timer_defs[id].channel].ChannelCCxE;	// Disable the channel.
 80075bc:	1dfb      	adds	r3, r7, #7
 80075be:	781a      	ldrb	r2, [r3, #0]
 80075c0:	4bac      	ldr	r3, [pc, #688]	@ (8007874 <hal_timer_set_pwm_output_period+0x330>)
 80075c2:	0112      	lsls	r2, r2, #4
 80075c4:	58d3      	ldr	r3, [r2, r3]
 80075c6:	6a1a      	ldr	r2, [r3, #32]
 80075c8:	1dfb      	adds	r3, r7, #7
 80075ca:	781b      	ldrb	r3, [r3, #0]
 80075cc:	49a9      	ldr	r1, [pc, #676]	@ (8007874 <hal_timer_set_pwm_output_period+0x330>)
 80075ce:	011b      	lsls	r3, r3, #4
 80075d0:	18cb      	adds	r3, r1, r3
 80075d2:	3305      	adds	r3, #5
 80075d4:	781b      	ldrb	r3, [r3, #0]
 80075d6:	0019      	movs	r1, r3
 80075d8:	4ba7      	ldr	r3, [pc, #668]	@ (8007878 <hal_timer_set_pwm_output_period+0x334>)
 80075da:	0109      	lsls	r1, r1, #4
 80075dc:	58cb      	ldr	r3, [r1, r3]
 80075de:	43d9      	mvns	r1, r3
 80075e0:	1dfb      	adds	r3, r7, #7
 80075e2:	7818      	ldrb	r0, [r3, #0]
 80075e4:	4ba3      	ldr	r3, [pc, #652]	@ (8007874 <hal_timer_set_pwm_output_period+0x330>)
 80075e6:	0100      	lsls	r0, r0, #4
 80075e8:	58c3      	ldr	r3, [r0, r3]
 80075ea:	400a      	ands	r2, r1
 80075ec:	621a      	str	r2, [r3, #32]
        	}

        	uint32_t allChannelEnableBits = 0;
 80075ee:	2300      	movs	r3, #0
 80075f0:	60fb      	str	r3, [r7, #12]

        	for (enum timer_channel ch = TIMER_CH0;ch < NumTimerChannels;ch++)
 80075f2:	230b      	movs	r3, #11
 80075f4:	18fb      	adds	r3, r7, r3
 80075f6:	2200      	movs	r2, #0
 80075f8:	701a      	strb	r2, [r3, #0]
 80075fa:	e013      	b.n	8007624 <hal_timer_set_pwm_output_period+0xe0>
        	{
        		allChannelEnableBits |= ChannelCaptureCompareBits[timer_defs[id].channel].ChannelCCxE;
 80075fc:	1dfb      	adds	r3, r7, #7
 80075fe:	781b      	ldrb	r3, [r3, #0]
 8007600:	4a9c      	ldr	r2, [pc, #624]	@ (8007874 <hal_timer_set_pwm_output_period+0x330>)
 8007602:	011b      	lsls	r3, r3, #4
 8007604:	18d3      	adds	r3, r2, r3
 8007606:	3305      	adds	r3, #5
 8007608:	781b      	ldrb	r3, [r3, #0]
 800760a:	001a      	movs	r2, r3
 800760c:	4b9a      	ldr	r3, [pc, #616]	@ (8007878 <hal_timer_set_pwm_output_period+0x334>)
 800760e:	0112      	lsls	r2, r2, #4
 8007610:	58d3      	ldr	r3, [r2, r3]
 8007612:	68fa      	ldr	r2, [r7, #12]
 8007614:	4313      	orrs	r3, r2
 8007616:	60fb      	str	r3, [r7, #12]
        	for (enum timer_channel ch = TIMER_CH0;ch < NumTimerChannels;ch++)
 8007618:	210b      	movs	r1, #11
 800761a:	187b      	adds	r3, r7, r1
 800761c:	781a      	ldrb	r2, [r3, #0]
 800761e:	187b      	adds	r3, r7, r1
 8007620:	3201      	adds	r2, #1
 8007622:	701a      	strb	r2, [r3, #0]
 8007624:	230b      	movs	r3, #11
 8007626:	18fb      	adds	r3, r7, r3
 8007628:	781b      	ldrb	r3, [r3, #0]
 800762a:	2b06      	cmp	r3, #6
 800762c:	d9e6      	bls.n	80075fc <hal_timer_set_pwm_output_period+0xb8>
        	}
			/* If all channels are disabled, disable the timer too (note: reading channels 3 and 4 on tim21/22 will return 0 so that's okay) */
			if( (((TIM_TypeDef *)(timer_defs[id].timer))->CCER & allChannelEnableBits ) == 0 )
 800762e:	1dfb      	adds	r3, r7, #7
 8007630:	781a      	ldrb	r2, [r3, #0]
 8007632:	4b90      	ldr	r3, [pc, #576]	@ (8007874 <hal_timer_set_pwm_output_period+0x330>)
 8007634:	0112      	lsls	r2, r2, #4
 8007636:	58d3      	ldr	r3, [r2, r3]
 8007638:	6a1b      	ldr	r3, [r3, #32]
 800763a:	68fa      	ldr	r2, [r7, #12]
 800763c:	4013      	ands	r3, r2
 800763e:	d000      	beq.n	8007642 <hal_timer_set_pwm_output_period+0xfe>
 8007640:	e316      	b.n	8007c70 <hal_timer_set_pwm_output_period+0x72c>
			{
				if( IS_TIM_BREAK_INSTANCE(timer_defs[id].timer))		/* Special consideration for timers with the break dead-time feature for PWM */
 8007642:	1dfb      	adds	r3, r7, #7
 8007644:	781a      	ldrb	r2, [r3, #0]
 8007646:	4b8b      	ldr	r3, [pc, #556]	@ (8007874 <hal_timer_set_pwm_output_period+0x330>)
 8007648:	0112      	lsls	r2, r2, #4
 800764a:	58d3      	ldr	r3, [r2, r3]
 800764c:	4a8b      	ldr	r2, [pc, #556]	@ (800787c <hal_timer_set_pwm_output_period+0x338>)
 800764e:	4293      	cmp	r3, r2
 8007650:	d017      	beq.n	8007682 <hal_timer_set_pwm_output_period+0x13e>
 8007652:	1dfb      	adds	r3, r7, #7
 8007654:	781a      	ldrb	r2, [r3, #0]
 8007656:	4b87      	ldr	r3, [pc, #540]	@ (8007874 <hal_timer_set_pwm_output_period+0x330>)
 8007658:	0112      	lsls	r2, r2, #4
 800765a:	58d3      	ldr	r3, [r2, r3]
 800765c:	4a88      	ldr	r2, [pc, #544]	@ (8007880 <hal_timer_set_pwm_output_period+0x33c>)
 800765e:	4293      	cmp	r3, r2
 8007660:	d00f      	beq.n	8007682 <hal_timer_set_pwm_output_period+0x13e>
 8007662:	1dfb      	adds	r3, r7, #7
 8007664:	781a      	ldrb	r2, [r3, #0]
 8007666:	4b83      	ldr	r3, [pc, #524]	@ (8007874 <hal_timer_set_pwm_output_period+0x330>)
 8007668:	0112      	lsls	r2, r2, #4
 800766a:	58d3      	ldr	r3, [r2, r3]
 800766c:	4a85      	ldr	r2, [pc, #532]	@ (8007884 <hal_timer_set_pwm_output_period+0x340>)
 800766e:	4293      	cmp	r3, r2
 8007670:	d007      	beq.n	8007682 <hal_timer_set_pwm_output_period+0x13e>
 8007672:	1dfb      	adds	r3, r7, #7
 8007674:	781a      	ldrb	r2, [r3, #0]
 8007676:	4b7f      	ldr	r3, [pc, #508]	@ (8007874 <hal_timer_set_pwm_output_period+0x330>)
 8007678:	0112      	lsls	r2, r2, #4
 800767a:	58d3      	ldr	r3, [r2, r3]
 800767c:	4a82      	ldr	r2, [pc, #520]	@ (8007888 <hal_timer_set_pwm_output_period+0x344>)
 800767e:	4293      	cmp	r3, r2
 8007680:	d10d      	bne.n	800769e <hal_timer_set_pwm_output_period+0x15a>
				{
					// See the break and dead-time register section of the Reference Manual for details of the meaning of these bits.
					((TIM_TypeDef *)(timer_defs[id].timer))->BDTR &= ~(TIM_BDTR_MOE | TIM_BDTR_OSSI | TIM_BDTR_OSSR);	// Off-state is a don't care so leave it blank
 8007682:	1dfb      	adds	r3, r7, #7
 8007684:	781a      	ldrb	r2, [r3, #0]
 8007686:	4b7b      	ldr	r3, [pc, #492]	@ (8007874 <hal_timer_set_pwm_output_period+0x330>)
 8007688:	0112      	lsls	r2, r2, #4
 800768a:	58d3      	ldr	r3, [r2, r3]
 800768c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800768e:	1dfb      	adds	r3, r7, #7
 8007690:	7819      	ldrb	r1, [r3, #0]
 8007692:	4b78      	ldr	r3, [pc, #480]	@ (8007874 <hal_timer_set_pwm_output_period+0x330>)
 8007694:	0109      	lsls	r1, r1, #4
 8007696:	58cb      	ldr	r3, [r1, r3]
 8007698:	497c      	ldr	r1, [pc, #496]	@ (800788c <hal_timer_set_pwm_output_period+0x348>)
 800769a:	400a      	ands	r2, r1
 800769c:	645a      	str	r2, [r3, #68]	@ 0x44
				}

				/* disable the timer */
				((TIM_TypeDef *)(timer_defs[id].timer))->CR1 &= ~(TIM_CR1_ARPE | TIM_CR1_CEN);
 800769e:	1dfb      	adds	r3, r7, #7
 80076a0:	781a      	ldrb	r2, [r3, #0]
 80076a2:	4b74      	ldr	r3, [pc, #464]	@ (8007874 <hal_timer_set_pwm_output_period+0x330>)
 80076a4:	0112      	lsls	r2, r2, #4
 80076a6:	58d3      	ldr	r3, [r2, r3]
 80076a8:	681a      	ldr	r2, [r3, #0]
 80076aa:	1dfb      	adds	r3, r7, #7
 80076ac:	7819      	ldrb	r1, [r3, #0]
 80076ae:	4b71      	ldr	r3, [pc, #452]	@ (8007874 <hal_timer_set_pwm_output_period+0x330>)
 80076b0:	0109      	lsls	r1, r1, #4
 80076b2:	58cb      	ldr	r3, [r1, r3]
 80076b4:	2181      	movs	r1, #129	@ 0x81
 80076b6:	438a      	bics	r2, r1
 80076b8:	601a      	str	r2, [r3, #0]
        }
        else
        {
            // No other timers supported
        }
        return;
 80076ba:	e2d9      	b.n	8007c70 <hal_timer_set_pwm_output_period+0x72c>
			((LPTIM_TypeDef*)(timer_defs[id].timer))->CR   |= LPTIM_CR_CNTSTRT_Msk;
        }
        else
#endif

        if( (timer_defs[id].type == TIM_BASIC) || (timer_defs[id].type == TIM_GEN_PURPOSE) )
 80076bc:	1dfb      	adds	r3, r7, #7
 80076be:	781b      	ldrb	r3, [r3, #0]
 80076c0:	4a6c      	ldr	r2, [pc, #432]	@ (8007874 <hal_timer_set_pwm_output_period+0x330>)
 80076c2:	011b      	lsls	r3, r3, #4
 80076c4:	18d3      	adds	r3, r2, r3
 80076c6:	3304      	adds	r3, #4
 80076c8:	781b      	ldrb	r3, [r3, #0]
 80076ca:	2b01      	cmp	r3, #1
 80076cc:	d009      	beq.n	80076e2 <hal_timer_set_pwm_output_period+0x19e>
 80076ce:	1dfb      	adds	r3, r7, #7
 80076d0:	781b      	ldrb	r3, [r3, #0]
 80076d2:	4a68      	ldr	r2, [pc, #416]	@ (8007874 <hal_timer_set_pwm_output_period+0x330>)
 80076d4:	011b      	lsls	r3, r3, #4
 80076d6:	18d3      	adds	r3, r2, r3
 80076d8:	3304      	adds	r3, #4
 80076da:	781b      	ldrb	r3, [r3, #0]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d000      	beq.n	80076e2 <hal_timer_set_pwm_output_period+0x19e>
 80076e0:	e2c7      	b.n	8007c72 <hal_timer_set_pwm_output_period+0x72e>
        {
        	((TIM_TypeDef *)(timer_defs[id].timer))->ARR = period;         // set the period.
 80076e2:	1dfb      	adds	r3, r7, #7
 80076e4:	781a      	ldrb	r2, [r3, #0]
 80076e6:	4b63      	ldr	r3, [pc, #396]	@ (8007874 <hal_timer_set_pwm_output_period+0x330>)
 80076e8:	0112      	lsls	r2, r2, #4
 80076ea:	58d3      	ldr	r3, [r2, r3]
 80076ec:	1d3a      	adds	r2, r7, #4
 80076ee:	8812      	ldrh	r2, [r2, #0]
 80076f0:	62da      	str	r2, [r3, #44]	@ 0x2c
        	if( timer_defs[id].channel == TIMER_CH1)
 80076f2:	1dfb      	adds	r3, r7, #7
 80076f4:	781b      	ldrb	r3, [r3, #0]
 80076f6:	4a5f      	ldr	r2, [pc, #380]	@ (8007874 <hal_timer_set_pwm_output_period+0x330>)
 80076f8:	011b      	lsls	r3, r3, #4
 80076fa:	18d3      	adds	r3, r2, r3
 80076fc:	3305      	adds	r3, #5
 80076fe:	781b      	ldrb	r3, [r3, #0]
 8007700:	2b01      	cmp	r3, #1
 8007702:	d14a      	bne.n	800779a <hal_timer_set_pwm_output_period+0x256>
        	{
            	((TIM_TypeDef *)(timer_defs[id].timer))->CCR1 = on_time;        // ..and on time
 8007704:	1dfb      	adds	r3, r7, #7
 8007706:	781a      	ldrb	r2, [r3, #0]
 8007708:	4b5a      	ldr	r3, [pc, #360]	@ (8007874 <hal_timer_set_pwm_output_period+0x330>)
 800770a:	0112      	lsls	r2, r2, #4
 800770c:	58d3      	ldr	r3, [r2, r3]
 800770e:	1cba      	adds	r2, r7, #2
 8007710:	8812      	ldrh	r2, [r2, #0]
 8007712:	635a      	str	r2, [r3, #52]	@ 0x34
            	if( (((TIM_TypeDef *)(timer_defs[id].timer))->CCER & TIM_CCER_CC1E) == 0 )	 /* Channel is currently off */
 8007714:	1dfb      	adds	r3, r7, #7
 8007716:	781a      	ldrb	r2, [r3, #0]
 8007718:	4b56      	ldr	r3, [pc, #344]	@ (8007874 <hal_timer_set_pwm_output_period+0x330>)
 800771a:	0112      	lsls	r2, r2, #4
 800771c:	58d3      	ldr	r3, [r2, r3]
 800771e:	6a1b      	ldr	r3, [r3, #32]
 8007720:	2201      	movs	r2, #1
 8007722:	4013      	ands	r3, r2
 8007724:	d000      	beq.n	8007728 <hal_timer_set_pwm_output_period+0x1e4>
 8007726:	e252      	b.n	8007bce <hal_timer_set_pwm_output_period+0x68a>
				{
                    ((TIM_TypeDef *)(timer_defs[id].timer))->CCMR1 &= ~(TIM_CCMR1_OC1M | TIM_CCMR1_OC1FE);			/* Clear Output compare mode and the fast enable bits*/
 8007728:	1dfb      	adds	r3, r7, #7
 800772a:	781a      	ldrb	r2, [r3, #0]
 800772c:	4b51      	ldr	r3, [pc, #324]	@ (8007874 <hal_timer_set_pwm_output_period+0x330>)
 800772e:	0112      	lsls	r2, r2, #4
 8007730:	58d3      	ldr	r3, [r2, r3]
 8007732:	699a      	ldr	r2, [r3, #24]
 8007734:	1dfb      	adds	r3, r7, #7
 8007736:	7819      	ldrb	r1, [r3, #0]
 8007738:	4b4e      	ldr	r3, [pc, #312]	@ (8007874 <hal_timer_set_pwm_output_period+0x330>)
 800773a:	0109      	lsls	r1, r1, #4
 800773c:	58cb      	ldr	r3, [r1, r3]
 800773e:	4954      	ldr	r1, [pc, #336]	@ (8007890 <hal_timer_set_pwm_output_period+0x34c>)
 8007740:	400a      	ands	r2, r1
 8007742:	619a      	str	r2, [r3, #24]
                    ((TIM_TypeDef *)(timer_defs[id].timer))->CCMR1 |=  (TIM_CCMR1_OC1CE | 	 						/* Set the clear enable */
 8007744:	1dfb      	adds	r3, r7, #7
 8007746:	781a      	ldrb	r2, [r3, #0]
 8007748:	4b4a      	ldr	r3, [pc, #296]	@ (8007874 <hal_timer_set_pwm_output_period+0x330>)
 800774a:	0112      	lsls	r2, r2, #4
 800774c:	58d3      	ldr	r3, [r2, r3]
 800774e:	699a      	ldr	r2, [r3, #24]
 8007750:	1dfb      	adds	r3, r7, #7
 8007752:	7819      	ldrb	r1, [r3, #0]
 8007754:	4b47      	ldr	r3, [pc, #284]	@ (8007874 <hal_timer_set_pwm_output_period+0x330>)
 8007756:	0109      	lsls	r1, r1, #4
 8007758:	58cb      	ldr	r3, [r1, r3]
 800775a:	21e8      	movs	r1, #232	@ 0xe8
 800775c:	430a      	orrs	r2, r1
 800775e:	619a      	str	r2, [r3, #24]
                    													(TIM_CCMR1_OC1M_2 | TIM_CCMR1_OC1M_1) | 	/* Set the PWM Mode 1*/
    																	TIM_CCMR1_OC1PE);							/* Set the Fast Enable bit */
                    ((TIM_TypeDef *)(timer_defs[id].timer))->CCER  &= ~(TIM_CCER_CC1NP | TIM_CCER_CC1P);			/* Clear the channel 2 output polarity flags: OC2 will be active high */
 8007760:	1dfb      	adds	r3, r7, #7
 8007762:	781a      	ldrb	r2, [r3, #0]
 8007764:	4b43      	ldr	r3, [pc, #268]	@ (8007874 <hal_timer_set_pwm_output_period+0x330>)
 8007766:	0112      	lsls	r2, r2, #4
 8007768:	58d3      	ldr	r3, [r2, r3]
 800776a:	6a1a      	ldr	r2, [r3, #32]
 800776c:	1dfb      	adds	r3, r7, #7
 800776e:	7819      	ldrb	r1, [r3, #0]
 8007770:	4b40      	ldr	r3, [pc, #256]	@ (8007874 <hal_timer_set_pwm_output_period+0x330>)
 8007772:	0109      	lsls	r1, r1, #4
 8007774:	58cb      	ldr	r3, [r1, r3]
 8007776:	210a      	movs	r1, #10
 8007778:	438a      	bics	r2, r1
 800777a:	621a      	str	r2, [r3, #32]
                    ((TIM_TypeDef *)(timer_defs[id].timer))->CCER  |=  TIM_CCER_CC1E;								/* Enable channel 2 */
 800777c:	1dfb      	adds	r3, r7, #7
 800777e:	781a      	ldrb	r2, [r3, #0]
 8007780:	4b3c      	ldr	r3, [pc, #240]	@ (8007874 <hal_timer_set_pwm_output_period+0x330>)
 8007782:	0112      	lsls	r2, r2, #4
 8007784:	58d3      	ldr	r3, [r2, r3]
 8007786:	6a1a      	ldr	r2, [r3, #32]
 8007788:	1dfb      	adds	r3, r7, #7
 800778a:	7819      	ldrb	r1, [r3, #0]
 800778c:	4b39      	ldr	r3, [pc, #228]	@ (8007874 <hal_timer_set_pwm_output_period+0x330>)
 800778e:	0109      	lsls	r1, r1, #4
 8007790:	58cb      	ldr	r3, [r1, r3]
 8007792:	2101      	movs	r1, #1
 8007794:	430a      	orrs	r2, r1
 8007796:	621a      	str	r2, [r3, #32]
 8007798:	e219      	b.n	8007bce <hal_timer_set_pwm_output_period+0x68a>
				}
        	}
        	else if (IS_TIM_CC2_INSTANCE(timer_defs[id].timer) && timer_defs[id].channel == TIMER_CH2)						/* Does the timer have channels?*/
 800779a:	1dfb      	adds	r3, r7, #7
 800779c:	781a      	ldrb	r2, [r3, #0]
 800779e:	4b35      	ldr	r3, [pc, #212]	@ (8007874 <hal_timer_set_pwm_output_period+0x330>)
 80077a0:	0112      	lsls	r2, r2, #4
 80077a2:	58d3      	ldr	r3, [r2, r3]
 80077a4:	4a35      	ldr	r2, [pc, #212]	@ (800787c <hal_timer_set_pwm_output_period+0x338>)
 80077a6:	4293      	cmp	r3, r2
 80077a8:	d00f      	beq.n	80077ca <hal_timer_set_pwm_output_period+0x286>
 80077aa:	1dfb      	adds	r3, r7, #7
 80077ac:	781a      	ldrb	r2, [r3, #0]
 80077ae:	4b31      	ldr	r3, [pc, #196]	@ (8007874 <hal_timer_set_pwm_output_period+0x330>)
 80077b0:	0112      	lsls	r2, r2, #4
 80077b2:	58d3      	ldr	r3, [r2, r3]
 80077b4:	4a37      	ldr	r2, [pc, #220]	@ (8007894 <hal_timer_set_pwm_output_period+0x350>)
 80077b6:	4293      	cmp	r3, r2
 80077b8:	d007      	beq.n	80077ca <hal_timer_set_pwm_output_period+0x286>
 80077ba:	1dfb      	adds	r3, r7, #7
 80077bc:	781a      	ldrb	r2, [r3, #0]
 80077be:	4b2d      	ldr	r3, [pc, #180]	@ (8007874 <hal_timer_set_pwm_output_period+0x330>)
 80077c0:	0112      	lsls	r2, r2, #4
 80077c2:	58d3      	ldr	r3, [r2, r3]
 80077c4:	4a2e      	ldr	r2, [pc, #184]	@ (8007880 <hal_timer_set_pwm_output_period+0x33c>)
 80077c6:	4293      	cmp	r3, r2
 80077c8:	d168      	bne.n	800789c <hal_timer_set_pwm_output_period+0x358>
 80077ca:	1dfb      	adds	r3, r7, #7
 80077cc:	781b      	ldrb	r3, [r3, #0]
 80077ce:	4a29      	ldr	r2, [pc, #164]	@ (8007874 <hal_timer_set_pwm_output_period+0x330>)
 80077d0:	011b      	lsls	r3, r3, #4
 80077d2:	18d3      	adds	r3, r2, r3
 80077d4:	3305      	adds	r3, #5
 80077d6:	781b      	ldrb	r3, [r3, #0]
 80077d8:	2b02      	cmp	r3, #2
 80077da:	d15f      	bne.n	800789c <hal_timer_set_pwm_output_period+0x358>
            {
            	((TIM_TypeDef *)(timer_defs[id].timer))->CCR2 = on_time;        // ..and on time
 80077dc:	1dfb      	adds	r3, r7, #7
 80077de:	781a      	ldrb	r2, [r3, #0]
 80077e0:	4b24      	ldr	r3, [pc, #144]	@ (8007874 <hal_timer_set_pwm_output_period+0x330>)
 80077e2:	0112      	lsls	r2, r2, #4
 80077e4:	58d3      	ldr	r3, [r2, r3]
 80077e6:	1cba      	adds	r2, r7, #2
 80077e8:	8812      	ldrh	r2, [r2, #0]
 80077ea:	639a      	str	r2, [r3, #56]	@ 0x38
            	if( (((TIM_TypeDef *)(timer_defs[id].timer))->CCER & TIM_CCER_CC2E) == 0 )	 /* Channel is currently off */
 80077ec:	1dfb      	adds	r3, r7, #7
 80077ee:	781a      	ldrb	r2, [r3, #0]
 80077f0:	4b20      	ldr	r3, [pc, #128]	@ (8007874 <hal_timer_set_pwm_output_period+0x330>)
 80077f2:	0112      	lsls	r2, r2, #4
 80077f4:	58d3      	ldr	r3, [r2, r3]
 80077f6:	6a1b      	ldr	r3, [r3, #32]
 80077f8:	2210      	movs	r2, #16
 80077fa:	4013      	ands	r3, r2
 80077fc:	d000      	beq.n	8007800 <hal_timer_set_pwm_output_period+0x2bc>
 80077fe:	e1e6      	b.n	8007bce <hal_timer_set_pwm_output_period+0x68a>
				{
                    ((TIM_TypeDef *)(timer_defs[id].timer))->CCMR1 &= ~(TIM_CCMR1_OC2M | TIM_CCMR1_OC2FE);			/* Clear Output compare mode and the fast enable bits*/
 8007800:	1dfb      	adds	r3, r7, #7
 8007802:	781a      	ldrb	r2, [r3, #0]
 8007804:	4b1b      	ldr	r3, [pc, #108]	@ (8007874 <hal_timer_set_pwm_output_period+0x330>)
 8007806:	0112      	lsls	r2, r2, #4
 8007808:	58d3      	ldr	r3, [r2, r3]
 800780a:	699a      	ldr	r2, [r3, #24]
 800780c:	1dfb      	adds	r3, r7, #7
 800780e:	7819      	ldrb	r1, [r3, #0]
 8007810:	4b18      	ldr	r3, [pc, #96]	@ (8007874 <hal_timer_set_pwm_output_period+0x330>)
 8007812:	0109      	lsls	r1, r1, #4
 8007814:	58cb      	ldr	r3, [r1, r3]
 8007816:	4920      	ldr	r1, [pc, #128]	@ (8007898 <hal_timer_set_pwm_output_period+0x354>)
 8007818:	400a      	ands	r2, r1
 800781a:	619a      	str	r2, [r3, #24]
                    ((TIM_TypeDef *)(timer_defs[id].timer))->CCMR1 |=  (TIM_CCMR1_OC2CE | 	 						/* Set the clear enable */
 800781c:	1dfb      	adds	r3, r7, #7
 800781e:	781a      	ldrb	r2, [r3, #0]
 8007820:	4b14      	ldr	r3, [pc, #80]	@ (8007874 <hal_timer_set_pwm_output_period+0x330>)
 8007822:	0112      	lsls	r2, r2, #4
 8007824:	58d3      	ldr	r3, [r2, r3]
 8007826:	699a      	ldr	r2, [r3, #24]
 8007828:	1dfb      	adds	r3, r7, #7
 800782a:	7819      	ldrb	r1, [r3, #0]
 800782c:	4b11      	ldr	r3, [pc, #68]	@ (8007874 <hal_timer_set_pwm_output_period+0x330>)
 800782e:	0109      	lsls	r1, r1, #4
 8007830:	58cb      	ldr	r3, [r1, r3]
 8007832:	21e8      	movs	r1, #232	@ 0xe8
 8007834:	0209      	lsls	r1, r1, #8
 8007836:	430a      	orrs	r2, r1
 8007838:	619a      	str	r2, [r3, #24]
                    													(TIM_CCMR1_OC2M_2 | TIM_CCMR1_OC2M_1) | 	/* Set the PWM Mode 1*/
    																	TIM_CCMR1_OC2PE);							/* Set the Fast Enable bit */
                    ((TIM_TypeDef *)(timer_defs[id].timer))->CCER  &= ~(TIM_CCER_CC2NP | TIM_CCER_CC2P);			/* Clear the channel 2 output polarity flags: OC2 will be active high */
 800783a:	1dfb      	adds	r3, r7, #7
 800783c:	781a      	ldrb	r2, [r3, #0]
 800783e:	4b0d      	ldr	r3, [pc, #52]	@ (8007874 <hal_timer_set_pwm_output_period+0x330>)
 8007840:	0112      	lsls	r2, r2, #4
 8007842:	58d3      	ldr	r3, [r2, r3]
 8007844:	6a1a      	ldr	r2, [r3, #32]
 8007846:	1dfb      	adds	r3, r7, #7
 8007848:	7819      	ldrb	r1, [r3, #0]
 800784a:	4b0a      	ldr	r3, [pc, #40]	@ (8007874 <hal_timer_set_pwm_output_period+0x330>)
 800784c:	0109      	lsls	r1, r1, #4
 800784e:	58cb      	ldr	r3, [r1, r3]
 8007850:	21a0      	movs	r1, #160	@ 0xa0
 8007852:	438a      	bics	r2, r1
 8007854:	621a      	str	r2, [r3, #32]
                    ((TIM_TypeDef *)(timer_defs[id].timer))->CCER  |=  TIM_CCER_CC2E;								/* Enable channel 2 */
 8007856:	1dfb      	adds	r3, r7, #7
 8007858:	781a      	ldrb	r2, [r3, #0]
 800785a:	4b06      	ldr	r3, [pc, #24]	@ (8007874 <hal_timer_set_pwm_output_period+0x330>)
 800785c:	0112      	lsls	r2, r2, #4
 800785e:	58d3      	ldr	r3, [r2, r3]
 8007860:	6a1a      	ldr	r2, [r3, #32]
 8007862:	1dfb      	adds	r3, r7, #7
 8007864:	7819      	ldrb	r1, [r3, #0]
 8007866:	4b03      	ldr	r3, [pc, #12]	@ (8007874 <hal_timer_set_pwm_output_period+0x330>)
 8007868:	0109      	lsls	r1, r1, #4
 800786a:	58cb      	ldr	r3, [r1, r3]
 800786c:	2110      	movs	r1, #16
 800786e:	430a      	orrs	r2, r1
 8007870:	621a      	str	r2, [r3, #32]
            	if( (((TIM_TypeDef *)(timer_defs[id].timer))->CCER & TIM_CCER_CC2E) == 0 )	 /* Channel is currently off */
 8007872:	e1ac      	b.n	8007bce <hal_timer_set_pwm_output_period+0x68a>
 8007874:	200000fc 	.word	0x200000fc
 8007878:	0800a34c 	.word	0x0800a34c
 800787c:	40012c00 	.word	0x40012c00
 8007880:	40014000 	.word	0x40014000
 8007884:	40014400 	.word	0x40014400
 8007888:	40014800 	.word	0x40014800
 800788c:	ffff73ff 	.word	0xffff73ff
 8007890:	fffeff8b 	.word	0xfffeff8b
 8007894:	40000400 	.word	0x40000400
 8007898:	feff8bff 	.word	0xfeff8bff
				}
            }
        	else if (IS_TIM_CC3_INSTANCE(timer_defs[id].timer) && timer_defs[id].channel == TIMER_CH3)						/* Does the timer have channels?*/
 800789c:	1dfb      	adds	r3, r7, #7
 800789e:	781a      	ldrb	r2, [r3, #0]
 80078a0:	4b94      	ldr	r3, [pc, #592]	@ (8007af4 <hal_timer_set_pwm_output_period+0x5b0>)
 80078a2:	0112      	lsls	r2, r2, #4
 80078a4:	58d3      	ldr	r3, [r2, r3]
 80078a6:	4a94      	ldr	r2, [pc, #592]	@ (8007af8 <hal_timer_set_pwm_output_period+0x5b4>)
 80078a8:	4293      	cmp	r3, r2
 80078aa:	d007      	beq.n	80078bc <hal_timer_set_pwm_output_period+0x378>
 80078ac:	1dfb      	adds	r3, r7, #7
 80078ae:	781a      	ldrb	r2, [r3, #0]
 80078b0:	4b90      	ldr	r3, [pc, #576]	@ (8007af4 <hal_timer_set_pwm_output_period+0x5b0>)
 80078b2:	0112      	lsls	r2, r2, #4
 80078b4:	58d3      	ldr	r3, [r2, r3]
 80078b6:	4a91      	ldr	r2, [pc, #580]	@ (8007afc <hal_timer_set_pwm_output_period+0x5b8>)
 80078b8:	4293      	cmp	r3, r2
 80078ba:	d155      	bne.n	8007968 <hal_timer_set_pwm_output_period+0x424>
 80078bc:	1dfb      	adds	r3, r7, #7
 80078be:	781b      	ldrb	r3, [r3, #0]
 80078c0:	4a8c      	ldr	r2, [pc, #560]	@ (8007af4 <hal_timer_set_pwm_output_period+0x5b0>)
 80078c2:	011b      	lsls	r3, r3, #4
 80078c4:	18d3      	adds	r3, r2, r3
 80078c6:	3305      	adds	r3, #5
 80078c8:	781b      	ldrb	r3, [r3, #0]
 80078ca:	2b03      	cmp	r3, #3
 80078cc:	d14c      	bne.n	8007968 <hal_timer_set_pwm_output_period+0x424>
            {
				((TIM_TypeDef *)(timer_defs[id].timer))->CCR3 = on_time;        // ..and on time
 80078ce:	1dfb      	adds	r3, r7, #7
 80078d0:	781a      	ldrb	r2, [r3, #0]
 80078d2:	4b88      	ldr	r3, [pc, #544]	@ (8007af4 <hal_timer_set_pwm_output_period+0x5b0>)
 80078d4:	0112      	lsls	r2, r2, #4
 80078d6:	58d3      	ldr	r3, [r2, r3]
 80078d8:	1cba      	adds	r2, r7, #2
 80078da:	8812      	ldrh	r2, [r2, #0]
 80078dc:	63da      	str	r2, [r3, #60]	@ 0x3c
				if( (((TIM_TypeDef *)(timer_defs[id].timer))->CCER & TIM_CCER_CC3E) == 0 )	 /* Channel is currently off */
 80078de:	1dfb      	adds	r3, r7, #7
 80078e0:	781a      	ldrb	r2, [r3, #0]
 80078e2:	4b84      	ldr	r3, [pc, #528]	@ (8007af4 <hal_timer_set_pwm_output_period+0x5b0>)
 80078e4:	0112      	lsls	r2, r2, #4
 80078e6:	58d3      	ldr	r3, [r2, r3]
 80078e8:	6a1a      	ldr	r2, [r3, #32]
 80078ea:	2380      	movs	r3, #128	@ 0x80
 80078ec:	005b      	lsls	r3, r3, #1
 80078ee:	4013      	ands	r3, r2
 80078f0:	d000      	beq.n	80078f4 <hal_timer_set_pwm_output_period+0x3b0>
 80078f2:	e16c      	b.n	8007bce <hal_timer_set_pwm_output_period+0x68a>
				{
					((TIM_TypeDef *)(timer_defs[id].timer))->CCMR2 &= ~(TIM_CCMR2_OC3M | TIM_CCMR2_OC3FE);			/* Clear Output compare mode and the fast enable bits*/
 80078f4:	1dfb      	adds	r3, r7, #7
 80078f6:	781a      	ldrb	r2, [r3, #0]
 80078f8:	4b7e      	ldr	r3, [pc, #504]	@ (8007af4 <hal_timer_set_pwm_output_period+0x5b0>)
 80078fa:	0112      	lsls	r2, r2, #4
 80078fc:	58d3      	ldr	r3, [r2, r3]
 80078fe:	69da      	ldr	r2, [r3, #28]
 8007900:	1dfb      	adds	r3, r7, #7
 8007902:	7819      	ldrb	r1, [r3, #0]
 8007904:	4b7b      	ldr	r3, [pc, #492]	@ (8007af4 <hal_timer_set_pwm_output_period+0x5b0>)
 8007906:	0109      	lsls	r1, r1, #4
 8007908:	58cb      	ldr	r3, [r1, r3]
 800790a:	497d      	ldr	r1, [pc, #500]	@ (8007b00 <hal_timer_set_pwm_output_period+0x5bc>)
 800790c:	400a      	ands	r2, r1
 800790e:	61da      	str	r2, [r3, #28]
					((TIM_TypeDef *)(timer_defs[id].timer))->CCMR2 |=  (TIM_CCMR2_OC3CE | 	 						/* Set the clear enable */
 8007910:	1dfb      	adds	r3, r7, #7
 8007912:	781a      	ldrb	r2, [r3, #0]
 8007914:	4b77      	ldr	r3, [pc, #476]	@ (8007af4 <hal_timer_set_pwm_output_period+0x5b0>)
 8007916:	0112      	lsls	r2, r2, #4
 8007918:	58d3      	ldr	r3, [r2, r3]
 800791a:	69da      	ldr	r2, [r3, #28]
 800791c:	1dfb      	adds	r3, r7, #7
 800791e:	7819      	ldrb	r1, [r3, #0]
 8007920:	4b74      	ldr	r3, [pc, #464]	@ (8007af4 <hal_timer_set_pwm_output_period+0x5b0>)
 8007922:	0109      	lsls	r1, r1, #4
 8007924:	58cb      	ldr	r3, [r1, r3]
 8007926:	21e8      	movs	r1, #232	@ 0xe8
 8007928:	430a      	orrs	r2, r1
 800792a:	61da      	str	r2, [r3, #28]
																		(TIM_CCMR2_OC3M_2 | TIM_CCMR2_OC3M_1) | 	/* Set the PWM Mode 1*/
																		TIM_CCMR2_OC3PE);							/* Set the Fast Enable bit */
					((TIM_TypeDef *)(timer_defs[id].timer))->CCER  &= ~(TIM_CCER_CC3NP | TIM_CCER_CC3P);			/* Clear the channel 2 output polarity flags: OC2 will be active high */
 800792c:	1dfb      	adds	r3, r7, #7
 800792e:	781a      	ldrb	r2, [r3, #0]
 8007930:	4b70      	ldr	r3, [pc, #448]	@ (8007af4 <hal_timer_set_pwm_output_period+0x5b0>)
 8007932:	0112      	lsls	r2, r2, #4
 8007934:	58d3      	ldr	r3, [r2, r3]
 8007936:	6a1a      	ldr	r2, [r3, #32]
 8007938:	1dfb      	adds	r3, r7, #7
 800793a:	7819      	ldrb	r1, [r3, #0]
 800793c:	4b6d      	ldr	r3, [pc, #436]	@ (8007af4 <hal_timer_set_pwm_output_period+0x5b0>)
 800793e:	0109      	lsls	r1, r1, #4
 8007940:	58cb      	ldr	r3, [r1, r3]
 8007942:	4970      	ldr	r1, [pc, #448]	@ (8007b04 <hal_timer_set_pwm_output_period+0x5c0>)
 8007944:	400a      	ands	r2, r1
 8007946:	621a      	str	r2, [r3, #32]
					((TIM_TypeDef *)(timer_defs[id].timer))->CCER  |=  TIM_CCER_CC3E;								/* Enable channel 2 */
 8007948:	1dfb      	adds	r3, r7, #7
 800794a:	781a      	ldrb	r2, [r3, #0]
 800794c:	4b69      	ldr	r3, [pc, #420]	@ (8007af4 <hal_timer_set_pwm_output_period+0x5b0>)
 800794e:	0112      	lsls	r2, r2, #4
 8007950:	58d3      	ldr	r3, [r2, r3]
 8007952:	6a1a      	ldr	r2, [r3, #32]
 8007954:	1dfb      	adds	r3, r7, #7
 8007956:	7819      	ldrb	r1, [r3, #0]
 8007958:	4b66      	ldr	r3, [pc, #408]	@ (8007af4 <hal_timer_set_pwm_output_period+0x5b0>)
 800795a:	0109      	lsls	r1, r1, #4
 800795c:	58cb      	ldr	r3, [r1, r3]
 800795e:	2180      	movs	r1, #128	@ 0x80
 8007960:	0049      	lsls	r1, r1, #1
 8007962:	430a      	orrs	r2, r1
 8007964:	621a      	str	r2, [r3, #32]
				if( (((TIM_TypeDef *)(timer_defs[id].timer))->CCER & TIM_CCER_CC3E) == 0 )	 /* Channel is currently off */
 8007966:	e132      	b.n	8007bce <hal_timer_set_pwm_output_period+0x68a>
				}
            }
        	else if (IS_TIM_CC4_INSTANCE(timer_defs[id].timer) && timer_defs[id].channel == TIMER_CH4)						/* Does the timer have channels?*/
 8007968:	1dfb      	adds	r3, r7, #7
 800796a:	781a      	ldrb	r2, [r3, #0]
 800796c:	4b61      	ldr	r3, [pc, #388]	@ (8007af4 <hal_timer_set_pwm_output_period+0x5b0>)
 800796e:	0112      	lsls	r2, r2, #4
 8007970:	58d3      	ldr	r3, [r2, r3]
 8007972:	4a61      	ldr	r2, [pc, #388]	@ (8007af8 <hal_timer_set_pwm_output_period+0x5b4>)
 8007974:	4293      	cmp	r3, r2
 8007976:	d007      	beq.n	8007988 <hal_timer_set_pwm_output_period+0x444>
 8007978:	1dfb      	adds	r3, r7, #7
 800797a:	781a      	ldrb	r2, [r3, #0]
 800797c:	4b5d      	ldr	r3, [pc, #372]	@ (8007af4 <hal_timer_set_pwm_output_period+0x5b0>)
 800797e:	0112      	lsls	r2, r2, #4
 8007980:	58d3      	ldr	r3, [r2, r3]
 8007982:	4a5e      	ldr	r2, [pc, #376]	@ (8007afc <hal_timer_set_pwm_output_period+0x5b8>)
 8007984:	4293      	cmp	r3, r2
 8007986:	d156      	bne.n	8007a36 <hal_timer_set_pwm_output_period+0x4f2>
 8007988:	1dfb      	adds	r3, r7, #7
 800798a:	781b      	ldrb	r3, [r3, #0]
 800798c:	4a59      	ldr	r2, [pc, #356]	@ (8007af4 <hal_timer_set_pwm_output_period+0x5b0>)
 800798e:	011b      	lsls	r3, r3, #4
 8007990:	18d3      	adds	r3, r2, r3
 8007992:	3305      	adds	r3, #5
 8007994:	781b      	ldrb	r3, [r3, #0]
 8007996:	2b04      	cmp	r3, #4
 8007998:	d14d      	bne.n	8007a36 <hal_timer_set_pwm_output_period+0x4f2>
            {
				((TIM_TypeDef *)(timer_defs[id].timer))->CCR4 = on_time;        // ..and on time
 800799a:	1dfb      	adds	r3, r7, #7
 800799c:	781a      	ldrb	r2, [r3, #0]
 800799e:	4b55      	ldr	r3, [pc, #340]	@ (8007af4 <hal_timer_set_pwm_output_period+0x5b0>)
 80079a0:	0112      	lsls	r2, r2, #4
 80079a2:	58d3      	ldr	r3, [r2, r3]
 80079a4:	1cba      	adds	r2, r7, #2
 80079a6:	8812      	ldrh	r2, [r2, #0]
 80079a8:	641a      	str	r2, [r3, #64]	@ 0x40
				if( (((TIM_TypeDef *)(timer_defs[id].timer))->CCER & TIM_CCER_CC4E) == 0 )	 /* Channel is currently off */
 80079aa:	1dfb      	adds	r3, r7, #7
 80079ac:	781a      	ldrb	r2, [r3, #0]
 80079ae:	4b51      	ldr	r3, [pc, #324]	@ (8007af4 <hal_timer_set_pwm_output_period+0x5b0>)
 80079b0:	0112      	lsls	r2, r2, #4
 80079b2:	58d3      	ldr	r3, [r2, r3]
 80079b4:	6a1a      	ldr	r2, [r3, #32]
 80079b6:	2380      	movs	r3, #128	@ 0x80
 80079b8:	015b      	lsls	r3, r3, #5
 80079ba:	4013      	ands	r3, r2
 80079bc:	d000      	beq.n	80079c0 <hal_timer_set_pwm_output_period+0x47c>
 80079be:	e106      	b.n	8007bce <hal_timer_set_pwm_output_period+0x68a>
				{
					((TIM_TypeDef *)(timer_defs[id].timer))->CCMR2 &= ~(TIM_CCMR2_OC4M | TIM_CCMR2_OC4FE);			/* Clear Output compare mode and the fast enable bits*/
 80079c0:	1dfb      	adds	r3, r7, #7
 80079c2:	781a      	ldrb	r2, [r3, #0]
 80079c4:	4b4b      	ldr	r3, [pc, #300]	@ (8007af4 <hal_timer_set_pwm_output_period+0x5b0>)
 80079c6:	0112      	lsls	r2, r2, #4
 80079c8:	58d3      	ldr	r3, [r2, r3]
 80079ca:	69da      	ldr	r2, [r3, #28]
 80079cc:	1dfb      	adds	r3, r7, #7
 80079ce:	7819      	ldrb	r1, [r3, #0]
 80079d0:	4b48      	ldr	r3, [pc, #288]	@ (8007af4 <hal_timer_set_pwm_output_period+0x5b0>)
 80079d2:	0109      	lsls	r1, r1, #4
 80079d4:	58cb      	ldr	r3, [r1, r3]
 80079d6:	494c      	ldr	r1, [pc, #304]	@ (8007b08 <hal_timer_set_pwm_output_period+0x5c4>)
 80079d8:	400a      	ands	r2, r1
 80079da:	61da      	str	r2, [r3, #28]
					((TIM_TypeDef *)(timer_defs[id].timer))->CCMR2 |=  (TIM_CCMR2_OC4CE | 	 						/* Set the clear enable */
 80079dc:	1dfb      	adds	r3, r7, #7
 80079de:	781a      	ldrb	r2, [r3, #0]
 80079e0:	4b44      	ldr	r3, [pc, #272]	@ (8007af4 <hal_timer_set_pwm_output_period+0x5b0>)
 80079e2:	0112      	lsls	r2, r2, #4
 80079e4:	58d3      	ldr	r3, [r2, r3]
 80079e6:	69da      	ldr	r2, [r3, #28]
 80079e8:	1dfb      	adds	r3, r7, #7
 80079ea:	7819      	ldrb	r1, [r3, #0]
 80079ec:	4b41      	ldr	r3, [pc, #260]	@ (8007af4 <hal_timer_set_pwm_output_period+0x5b0>)
 80079ee:	0109      	lsls	r1, r1, #4
 80079f0:	58cb      	ldr	r3, [r1, r3]
 80079f2:	21e8      	movs	r1, #232	@ 0xe8
 80079f4:	0209      	lsls	r1, r1, #8
 80079f6:	430a      	orrs	r2, r1
 80079f8:	61da      	str	r2, [r3, #28]
																		(TIM_CCMR2_OC4M_2 | TIM_CCMR2_OC4M_1) | 	/* Set the PWM Mode 1*/
																		TIM_CCMR2_OC4PE);							/* Set the Fast Enable bit */
					((TIM_TypeDef *)(timer_defs[id].timer))->CCER  &= ~(TIM_CCER_CC4NP | TIM_CCER_CC4P);			/* Clear the channel 2 output polarity flags: OC2 will be active high */
 80079fa:	1dfb      	adds	r3, r7, #7
 80079fc:	781a      	ldrb	r2, [r3, #0]
 80079fe:	4b3d      	ldr	r3, [pc, #244]	@ (8007af4 <hal_timer_set_pwm_output_period+0x5b0>)
 8007a00:	0112      	lsls	r2, r2, #4
 8007a02:	58d3      	ldr	r3, [r2, r3]
 8007a04:	6a1a      	ldr	r2, [r3, #32]
 8007a06:	1dfb      	adds	r3, r7, #7
 8007a08:	7819      	ldrb	r1, [r3, #0]
 8007a0a:	4b3a      	ldr	r3, [pc, #232]	@ (8007af4 <hal_timer_set_pwm_output_period+0x5b0>)
 8007a0c:	0109      	lsls	r1, r1, #4
 8007a0e:	58cb      	ldr	r3, [r1, r3]
 8007a10:	493e      	ldr	r1, [pc, #248]	@ (8007b0c <hal_timer_set_pwm_output_period+0x5c8>)
 8007a12:	400a      	ands	r2, r1
 8007a14:	621a      	str	r2, [r3, #32]
					((TIM_TypeDef *)(timer_defs[id].timer))->CCER  |=  TIM_CCER_CC4E;								/* Enable channel 2 */
 8007a16:	1dfb      	adds	r3, r7, #7
 8007a18:	781a      	ldrb	r2, [r3, #0]
 8007a1a:	4b36      	ldr	r3, [pc, #216]	@ (8007af4 <hal_timer_set_pwm_output_period+0x5b0>)
 8007a1c:	0112      	lsls	r2, r2, #4
 8007a1e:	58d3      	ldr	r3, [r2, r3]
 8007a20:	6a1a      	ldr	r2, [r3, #32]
 8007a22:	1dfb      	adds	r3, r7, #7
 8007a24:	7819      	ldrb	r1, [r3, #0]
 8007a26:	4b33      	ldr	r3, [pc, #204]	@ (8007af4 <hal_timer_set_pwm_output_period+0x5b0>)
 8007a28:	0109      	lsls	r1, r1, #4
 8007a2a:	58cb      	ldr	r3, [r1, r3]
 8007a2c:	2180      	movs	r1, #128	@ 0x80
 8007a2e:	0149      	lsls	r1, r1, #5
 8007a30:	430a      	orrs	r2, r1
 8007a32:	621a      	str	r2, [r3, #32]
				if( (((TIM_TypeDef *)(timer_defs[id].timer))->CCER & TIM_CCER_CC4E) == 0 )	 /* Channel is currently off */
 8007a34:	e0cb      	b.n	8007bce <hal_timer_set_pwm_output_period+0x68a>
				}
            }
        	else if (IS_TIM_CC5_INSTANCE(timer_defs[id].timer) && timer_defs[id].channel == TIMER_CH5)						/* Does the timer have channels?*/
 8007a36:	1dfb      	adds	r3, r7, #7
 8007a38:	781a      	ldrb	r2, [r3, #0]
 8007a3a:	4b2e      	ldr	r3, [pc, #184]	@ (8007af4 <hal_timer_set_pwm_output_period+0x5b0>)
 8007a3c:	0112      	lsls	r2, r2, #4
 8007a3e:	58d3      	ldr	r3, [r2, r3]
 8007a40:	4a2d      	ldr	r2, [pc, #180]	@ (8007af8 <hal_timer_set_pwm_output_period+0x5b4>)
 8007a42:	4293      	cmp	r3, r2
 8007a44:	d166      	bne.n	8007b14 <hal_timer_set_pwm_output_period+0x5d0>
 8007a46:	1dfb      	adds	r3, r7, #7
 8007a48:	781b      	ldrb	r3, [r3, #0]
 8007a4a:	4a2a      	ldr	r2, [pc, #168]	@ (8007af4 <hal_timer_set_pwm_output_period+0x5b0>)
 8007a4c:	011b      	lsls	r3, r3, #4
 8007a4e:	18d3      	adds	r3, r2, r3
 8007a50:	3305      	adds	r3, #5
 8007a52:	781b      	ldrb	r3, [r3, #0]
 8007a54:	2b05      	cmp	r3, #5
 8007a56:	d15d      	bne.n	8007b14 <hal_timer_set_pwm_output_period+0x5d0>
            {
				((TIM_TypeDef *)(timer_defs[id].timer))->CCR5 = on_time;        // ..and on time
 8007a58:	1dfb      	adds	r3, r7, #7
 8007a5a:	781a      	ldrb	r2, [r3, #0]
 8007a5c:	4b25      	ldr	r3, [pc, #148]	@ (8007af4 <hal_timer_set_pwm_output_period+0x5b0>)
 8007a5e:	0112      	lsls	r2, r2, #4
 8007a60:	58d3      	ldr	r3, [r2, r3]
 8007a62:	1cba      	adds	r2, r7, #2
 8007a64:	8812      	ldrh	r2, [r2, #0]
 8007a66:	659a      	str	r2, [r3, #88]	@ 0x58
				if( (((TIM_TypeDef *)(timer_defs[id].timer))->CCER & TIM_CCER_CC5E) == 0 )	 /* Channel is currently off */
 8007a68:	1dfb      	adds	r3, r7, #7
 8007a6a:	781a      	ldrb	r2, [r3, #0]
 8007a6c:	4b21      	ldr	r3, [pc, #132]	@ (8007af4 <hal_timer_set_pwm_output_period+0x5b0>)
 8007a6e:	0112      	lsls	r2, r2, #4
 8007a70:	58d3      	ldr	r3, [r2, r3]
 8007a72:	6a1a      	ldr	r2, [r3, #32]
 8007a74:	2380      	movs	r3, #128	@ 0x80
 8007a76:	025b      	lsls	r3, r3, #9
 8007a78:	4013      	ands	r3, r2
 8007a7a:	d000      	beq.n	8007a7e <hal_timer_set_pwm_output_period+0x53a>
 8007a7c:	e0a7      	b.n	8007bce <hal_timer_set_pwm_output_period+0x68a>
				{
					((TIM_TypeDef *)(timer_defs[id].timer))->CCMR3 &= ~(TIM_CCMR3_OC5M | TIM_CCMR3_OC5FE);			/* Clear Output compare mode and the fast enable bits*/
 8007a7e:	1dfb      	adds	r3, r7, #7
 8007a80:	781a      	ldrb	r2, [r3, #0]
 8007a82:	4b1c      	ldr	r3, [pc, #112]	@ (8007af4 <hal_timer_set_pwm_output_period+0x5b0>)
 8007a84:	0112      	lsls	r2, r2, #4
 8007a86:	58d3      	ldr	r3, [r2, r3]
 8007a88:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007a8a:	1dfb      	adds	r3, r7, #7
 8007a8c:	7819      	ldrb	r1, [r3, #0]
 8007a8e:	4b19      	ldr	r3, [pc, #100]	@ (8007af4 <hal_timer_set_pwm_output_period+0x5b0>)
 8007a90:	0109      	lsls	r1, r1, #4
 8007a92:	58cb      	ldr	r3, [r1, r3]
 8007a94:	491a      	ldr	r1, [pc, #104]	@ (8007b00 <hal_timer_set_pwm_output_period+0x5bc>)
 8007a96:	400a      	ands	r2, r1
 8007a98:	655a      	str	r2, [r3, #84]	@ 0x54
					((TIM_TypeDef *)(timer_defs[id].timer))->CCMR3 |=  (TIM_CCMR3_OC5CE | 	 						/* Set the clear enable */
 8007a9a:	1dfb      	adds	r3, r7, #7
 8007a9c:	781a      	ldrb	r2, [r3, #0]
 8007a9e:	4b15      	ldr	r3, [pc, #84]	@ (8007af4 <hal_timer_set_pwm_output_period+0x5b0>)
 8007aa0:	0112      	lsls	r2, r2, #4
 8007aa2:	58d3      	ldr	r3, [r2, r3]
 8007aa4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007aa6:	1dfb      	adds	r3, r7, #7
 8007aa8:	7819      	ldrb	r1, [r3, #0]
 8007aaa:	4b12      	ldr	r3, [pc, #72]	@ (8007af4 <hal_timer_set_pwm_output_period+0x5b0>)
 8007aac:	0109      	lsls	r1, r1, #4
 8007aae:	58cb      	ldr	r3, [r1, r3]
 8007ab0:	21e8      	movs	r1, #232	@ 0xe8
 8007ab2:	430a      	orrs	r2, r1
 8007ab4:	655a      	str	r2, [r3, #84]	@ 0x54
																		(TIM_CCMR3_OC5M_2 | TIM_CCMR3_OC5M_1) | 	/* Set the PWM Mode 1*/
																		TIM_CCMR3_OC5PE);							/* Set the Fast Enable bit */
					((TIM_TypeDef *)(timer_defs[id].timer))->CCER  &= ~(TIM_CCER_CC5P);								/* Clear the channel 2 output polarity flags: OC2 will be active high */
 8007ab6:	1dfb      	adds	r3, r7, #7
 8007ab8:	781a      	ldrb	r2, [r3, #0]
 8007aba:	4b0e      	ldr	r3, [pc, #56]	@ (8007af4 <hal_timer_set_pwm_output_period+0x5b0>)
 8007abc:	0112      	lsls	r2, r2, #4
 8007abe:	58d3      	ldr	r3, [r2, r3]
 8007ac0:	6a1a      	ldr	r2, [r3, #32]
 8007ac2:	1dfb      	adds	r3, r7, #7
 8007ac4:	7819      	ldrb	r1, [r3, #0]
 8007ac6:	4b0b      	ldr	r3, [pc, #44]	@ (8007af4 <hal_timer_set_pwm_output_period+0x5b0>)
 8007ac8:	0109      	lsls	r1, r1, #4
 8007aca:	58cb      	ldr	r3, [r1, r3]
 8007acc:	4910      	ldr	r1, [pc, #64]	@ (8007b10 <hal_timer_set_pwm_output_period+0x5cc>)
 8007ace:	400a      	ands	r2, r1
 8007ad0:	621a      	str	r2, [r3, #32]
					((TIM_TypeDef *)(timer_defs[id].timer))->CCER  |=  TIM_CCER_CC5E;								/* Enable channel 5 */
 8007ad2:	1dfb      	adds	r3, r7, #7
 8007ad4:	781a      	ldrb	r2, [r3, #0]
 8007ad6:	4b07      	ldr	r3, [pc, #28]	@ (8007af4 <hal_timer_set_pwm_output_period+0x5b0>)
 8007ad8:	0112      	lsls	r2, r2, #4
 8007ada:	58d3      	ldr	r3, [r2, r3]
 8007adc:	6a1a      	ldr	r2, [r3, #32]
 8007ade:	1dfb      	adds	r3, r7, #7
 8007ae0:	7819      	ldrb	r1, [r3, #0]
 8007ae2:	4b04      	ldr	r3, [pc, #16]	@ (8007af4 <hal_timer_set_pwm_output_period+0x5b0>)
 8007ae4:	0109      	lsls	r1, r1, #4
 8007ae6:	58cb      	ldr	r3, [r1, r3]
 8007ae8:	2180      	movs	r1, #128	@ 0x80
 8007aea:	0249      	lsls	r1, r1, #9
 8007aec:	430a      	orrs	r2, r1
 8007aee:	621a      	str	r2, [r3, #32]
				if( (((TIM_TypeDef *)(timer_defs[id].timer))->CCER & TIM_CCER_CC5E) == 0 )	 /* Channel is currently off */
 8007af0:	e06d      	b.n	8007bce <hal_timer_set_pwm_output_period+0x68a>
 8007af2:	46c0      	nop			@ (mov r8, r8)
 8007af4:	200000fc 	.word	0x200000fc
 8007af8:	40012c00 	.word	0x40012c00
 8007afc:	40000400 	.word	0x40000400
 8007b00:	fffeff8b 	.word	0xfffeff8b
 8007b04:	fffff5ff 	.word	0xfffff5ff
 8007b08:	feff8bff 	.word	0xfeff8bff
 8007b0c:	ffff5fff 	.word	0xffff5fff
 8007b10:	fffdffff 	.word	0xfffdffff
				}
            }
        	else if (IS_TIM_CC6_INSTANCE(timer_defs[id].timer) && timer_defs[id].channel == TIMER_CH6)						/* Does the timer have channels?*/
 8007b14:	1dfb      	adds	r3, r7, #7
 8007b16:	781a      	ldrb	r2, [r3, #0]
 8007b18:	4b57      	ldr	r3, [pc, #348]	@ (8007c78 <hal_timer_set_pwm_output_period+0x734>)
 8007b1a:	0112      	lsls	r2, r2, #4
 8007b1c:	58d3      	ldr	r3, [r2, r3]
 8007b1e:	4a57      	ldr	r2, [pc, #348]	@ (8007c7c <hal_timer_set_pwm_output_period+0x738>)
 8007b20:	4293      	cmp	r3, r2
 8007b22:	d154      	bne.n	8007bce <hal_timer_set_pwm_output_period+0x68a>
 8007b24:	1dfb      	adds	r3, r7, #7
 8007b26:	781b      	ldrb	r3, [r3, #0]
 8007b28:	4a53      	ldr	r2, [pc, #332]	@ (8007c78 <hal_timer_set_pwm_output_period+0x734>)
 8007b2a:	011b      	lsls	r3, r3, #4
 8007b2c:	18d3      	adds	r3, r2, r3
 8007b2e:	3305      	adds	r3, #5
 8007b30:	781b      	ldrb	r3, [r3, #0]
 8007b32:	2b06      	cmp	r3, #6
 8007b34:	d14b      	bne.n	8007bce <hal_timer_set_pwm_output_period+0x68a>
            {
				((TIM_TypeDef *)(timer_defs[id].timer))->CCR6 = on_time;        // ..and on time
 8007b36:	1dfb      	adds	r3, r7, #7
 8007b38:	781a      	ldrb	r2, [r3, #0]
 8007b3a:	4b4f      	ldr	r3, [pc, #316]	@ (8007c78 <hal_timer_set_pwm_output_period+0x734>)
 8007b3c:	0112      	lsls	r2, r2, #4
 8007b3e:	58d3      	ldr	r3, [r2, r3]
 8007b40:	1cba      	adds	r2, r7, #2
 8007b42:	8812      	ldrh	r2, [r2, #0]
 8007b44:	65da      	str	r2, [r3, #92]	@ 0x5c
				if( (((TIM_TypeDef *)(timer_defs[id].timer))->CCER & TIM_CCER_CC6E) == 0 )	 /* Channel is currently off */
 8007b46:	1dfb      	adds	r3, r7, #7
 8007b48:	781a      	ldrb	r2, [r3, #0]
 8007b4a:	4b4b      	ldr	r3, [pc, #300]	@ (8007c78 <hal_timer_set_pwm_output_period+0x734>)
 8007b4c:	0112      	lsls	r2, r2, #4
 8007b4e:	58d3      	ldr	r3, [r2, r3]
 8007b50:	6a1a      	ldr	r2, [r3, #32]
 8007b52:	2380      	movs	r3, #128	@ 0x80
 8007b54:	035b      	lsls	r3, r3, #13
 8007b56:	4013      	ands	r3, r2
 8007b58:	d139      	bne.n	8007bce <hal_timer_set_pwm_output_period+0x68a>
				{
					((TIM_TypeDef *)(timer_defs[id].timer))->CCMR3 &= ~(TIM_CCMR3_OC6M | TIM_CCMR3_OC6FE);			/* Clear Output compare mode and the fast enable bits*/
 8007b5a:	1dfb      	adds	r3, r7, #7
 8007b5c:	781a      	ldrb	r2, [r3, #0]
 8007b5e:	4b46      	ldr	r3, [pc, #280]	@ (8007c78 <hal_timer_set_pwm_output_period+0x734>)
 8007b60:	0112      	lsls	r2, r2, #4
 8007b62:	58d3      	ldr	r3, [r2, r3]
 8007b64:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007b66:	1dfb      	adds	r3, r7, #7
 8007b68:	7819      	ldrb	r1, [r3, #0]
 8007b6a:	4b43      	ldr	r3, [pc, #268]	@ (8007c78 <hal_timer_set_pwm_output_period+0x734>)
 8007b6c:	0109      	lsls	r1, r1, #4
 8007b6e:	58cb      	ldr	r3, [r1, r3]
 8007b70:	4943      	ldr	r1, [pc, #268]	@ (8007c80 <hal_timer_set_pwm_output_period+0x73c>)
 8007b72:	400a      	ands	r2, r1
 8007b74:	655a      	str	r2, [r3, #84]	@ 0x54
					((TIM_TypeDef *)(timer_defs[id].timer))->CCMR3 |=  (TIM_CCMR3_OC6CE | 	 						/* Set the clear enable */
 8007b76:	1dfb      	adds	r3, r7, #7
 8007b78:	781a      	ldrb	r2, [r3, #0]
 8007b7a:	4b3f      	ldr	r3, [pc, #252]	@ (8007c78 <hal_timer_set_pwm_output_period+0x734>)
 8007b7c:	0112      	lsls	r2, r2, #4
 8007b7e:	58d3      	ldr	r3, [r2, r3]
 8007b80:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007b82:	1dfb      	adds	r3, r7, #7
 8007b84:	7819      	ldrb	r1, [r3, #0]
 8007b86:	4b3c      	ldr	r3, [pc, #240]	@ (8007c78 <hal_timer_set_pwm_output_period+0x734>)
 8007b88:	0109      	lsls	r1, r1, #4
 8007b8a:	58cb      	ldr	r3, [r1, r3]
 8007b8c:	21e8      	movs	r1, #232	@ 0xe8
 8007b8e:	0209      	lsls	r1, r1, #8
 8007b90:	430a      	orrs	r2, r1
 8007b92:	655a      	str	r2, [r3, #84]	@ 0x54
																		(TIM_CCMR3_OC6M_2 | TIM_CCMR3_OC6M_1) | 	/* Set the PWM Mode 1*/
																		TIM_CCMR3_OC6PE);							/* Set the Fast Enable bit */
					((TIM_TypeDef *)(timer_defs[id].timer))->CCER  &= ~(TIM_CCER_CC6P);								/* Clear the channel 2 output polarity flags: OC2 will be active high */
 8007b94:	1dfb      	adds	r3, r7, #7
 8007b96:	781a      	ldrb	r2, [r3, #0]
 8007b98:	4b37      	ldr	r3, [pc, #220]	@ (8007c78 <hal_timer_set_pwm_output_period+0x734>)
 8007b9a:	0112      	lsls	r2, r2, #4
 8007b9c:	58d3      	ldr	r3, [r2, r3]
 8007b9e:	6a1a      	ldr	r2, [r3, #32]
 8007ba0:	1dfb      	adds	r3, r7, #7
 8007ba2:	7819      	ldrb	r1, [r3, #0]
 8007ba4:	4b34      	ldr	r3, [pc, #208]	@ (8007c78 <hal_timer_set_pwm_output_period+0x734>)
 8007ba6:	0109      	lsls	r1, r1, #4
 8007ba8:	58cb      	ldr	r3, [r1, r3]
 8007baa:	4936      	ldr	r1, [pc, #216]	@ (8007c84 <hal_timer_set_pwm_output_period+0x740>)
 8007bac:	400a      	ands	r2, r1
 8007bae:	621a      	str	r2, [r3, #32]
					((TIM_TypeDef *)(timer_defs[id].timer))->CCER  |=  TIM_CCER_CC6E;								/* Enable channel 6 */
 8007bb0:	1dfb      	adds	r3, r7, #7
 8007bb2:	781a      	ldrb	r2, [r3, #0]
 8007bb4:	4b30      	ldr	r3, [pc, #192]	@ (8007c78 <hal_timer_set_pwm_output_period+0x734>)
 8007bb6:	0112      	lsls	r2, r2, #4
 8007bb8:	58d3      	ldr	r3, [r2, r3]
 8007bba:	6a1a      	ldr	r2, [r3, #32]
 8007bbc:	1dfb      	adds	r3, r7, #7
 8007bbe:	7819      	ldrb	r1, [r3, #0]
 8007bc0:	4b2d      	ldr	r3, [pc, #180]	@ (8007c78 <hal_timer_set_pwm_output_period+0x734>)
 8007bc2:	0109      	lsls	r1, r1, #4
 8007bc4:	58cb      	ldr	r3, [r1, r3]
 8007bc6:	2180      	movs	r1, #128	@ 0x80
 8007bc8:	0349      	lsls	r1, r1, #13
 8007bca:	430a      	orrs	r2, r1
 8007bcc:	621a      	str	r2, [r3, #32]
				}
            }
			if(((((TIM_TypeDef *)(timer_defs[id].timer))->CR1 &  (TIM_CR1_ARPE | TIM_CR1_CEN)) !=  (TIM_CR1_ARPE | TIM_CR1_CEN)) )	/* If not enabled or auot-reload is not setup */
 8007bce:	1dfb      	adds	r3, r7, #7
 8007bd0:	781a      	ldrb	r2, [r3, #0]
 8007bd2:	4b29      	ldr	r3, [pc, #164]	@ (8007c78 <hal_timer_set_pwm_output_period+0x734>)
 8007bd4:	0112      	lsls	r2, r2, #4
 8007bd6:	58d3      	ldr	r3, [r2, r3]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	2281      	movs	r2, #129	@ 0x81
 8007bdc:	4013      	ands	r3, r2
 8007bde:	2b81      	cmp	r3, #129	@ 0x81
 8007be0:	d00d      	beq.n	8007bfe <hal_timer_set_pwm_output_period+0x6ba>
			{
				((TIM_TypeDef *)(timer_defs[id].timer))->CR1   |=  (TIM_CR1_ARPE | TIM_CR1_CEN);				/* Enable Counter and enable buffered Tx_ARR register */
 8007be2:	1dfb      	adds	r3, r7, #7
 8007be4:	781a      	ldrb	r2, [r3, #0]
 8007be6:	4b24      	ldr	r3, [pc, #144]	@ (8007c78 <hal_timer_set_pwm_output_period+0x734>)
 8007be8:	0112      	lsls	r2, r2, #4
 8007bea:	58d3      	ldr	r3, [r2, r3]
 8007bec:	681a      	ldr	r2, [r3, #0]
 8007bee:	1dfb      	adds	r3, r7, #7
 8007bf0:	7819      	ldrb	r1, [r3, #0]
 8007bf2:	4b21      	ldr	r3, [pc, #132]	@ (8007c78 <hal_timer_set_pwm_output_period+0x734>)
 8007bf4:	0109      	lsls	r1, r1, #4
 8007bf6:	58cb      	ldr	r3, [r1, r3]
 8007bf8:	2181      	movs	r1, #129	@ 0x81
 8007bfa:	430a      	orrs	r2, r1
 8007bfc:	601a      	str	r2, [r3, #0]
			}

			if( IS_TIM_BREAK_INSTANCE(timer_defs[id].timer))		/* Special consideration for timers with the break dead-time feature for PWM */
 8007bfe:	1dfb      	adds	r3, r7, #7
 8007c00:	781a      	ldrb	r2, [r3, #0]
 8007c02:	4b1d      	ldr	r3, [pc, #116]	@ (8007c78 <hal_timer_set_pwm_output_period+0x734>)
 8007c04:	0112      	lsls	r2, r2, #4
 8007c06:	58d3      	ldr	r3, [r2, r3]
 8007c08:	4a1c      	ldr	r2, [pc, #112]	@ (8007c7c <hal_timer_set_pwm_output_period+0x738>)
 8007c0a:	4293      	cmp	r3, r2
 8007c0c:	d017      	beq.n	8007c3e <hal_timer_set_pwm_output_period+0x6fa>
 8007c0e:	1dfb      	adds	r3, r7, #7
 8007c10:	781a      	ldrb	r2, [r3, #0]
 8007c12:	4b19      	ldr	r3, [pc, #100]	@ (8007c78 <hal_timer_set_pwm_output_period+0x734>)
 8007c14:	0112      	lsls	r2, r2, #4
 8007c16:	58d3      	ldr	r3, [r2, r3]
 8007c18:	4a1b      	ldr	r2, [pc, #108]	@ (8007c88 <hal_timer_set_pwm_output_period+0x744>)
 8007c1a:	4293      	cmp	r3, r2
 8007c1c:	d00f      	beq.n	8007c3e <hal_timer_set_pwm_output_period+0x6fa>
 8007c1e:	1dfb      	adds	r3, r7, #7
 8007c20:	781a      	ldrb	r2, [r3, #0]
 8007c22:	4b15      	ldr	r3, [pc, #84]	@ (8007c78 <hal_timer_set_pwm_output_period+0x734>)
 8007c24:	0112      	lsls	r2, r2, #4
 8007c26:	58d3      	ldr	r3, [r2, r3]
 8007c28:	4a18      	ldr	r2, [pc, #96]	@ (8007c8c <hal_timer_set_pwm_output_period+0x748>)
 8007c2a:	4293      	cmp	r3, r2
 8007c2c:	d007      	beq.n	8007c3e <hal_timer_set_pwm_output_period+0x6fa>
 8007c2e:	1dfb      	adds	r3, r7, #7
 8007c30:	781a      	ldrb	r2, [r3, #0]
 8007c32:	4b11      	ldr	r3, [pc, #68]	@ (8007c78 <hal_timer_set_pwm_output_period+0x734>)
 8007c34:	0112      	lsls	r2, r2, #4
 8007c36:	58d3      	ldr	r3, [r2, r3]
 8007c38:	4a15      	ldr	r2, [pc, #84]	@ (8007c90 <hal_timer_set_pwm_output_period+0x74c>)
 8007c3a:	4293      	cmp	r3, r2
 8007c3c:	d107      	bne.n	8007c4e <hal_timer_set_pwm_output_period+0x70a>
			{
				// See page 817 in the RM for the truth table
				((TIM_TypeDef *)(timer_defs[id].timer))->BDTR = (TIM_BDTR_MOE | TIM_BDTR_AOE);		// Enable output, all other bits are 0
 8007c3e:	1dfb      	adds	r3, r7, #7
 8007c40:	781a      	ldrb	r2, [r3, #0]
 8007c42:	4b0d      	ldr	r3, [pc, #52]	@ (8007c78 <hal_timer_set_pwm_output_period+0x734>)
 8007c44:	0112      	lsls	r2, r2, #4
 8007c46:	58d3      	ldr	r3, [r2, r3]
 8007c48:	22c0      	movs	r2, #192	@ 0xc0
 8007c4a:	0212      	lsls	r2, r2, #8
 8007c4c:	645a      	str	r2, [r3, #68]	@ 0x44
//				((TIM_TypeDef *)(timer_defs[id].timer))->BDTR &= ~(TIM_BDTR_OSSI | TIM_BDTR_OSSR);	// Off-state is a don't care so leave it blank
			}

			/* Generate an update event to reload the Prescaler and the repetition counter value immediately */
			((TIM_TypeDef *)(timer_defs[id].timer))->EGR |= TIM_EGR_UG;
 8007c4e:	1dfb      	adds	r3, r7, #7
 8007c50:	781a      	ldrb	r2, [r3, #0]
 8007c52:	4b09      	ldr	r3, [pc, #36]	@ (8007c78 <hal_timer_set_pwm_output_period+0x734>)
 8007c54:	0112      	lsls	r2, r2, #4
 8007c56:	58d3      	ldr	r3, [r2, r3]
 8007c58:	695a      	ldr	r2, [r3, #20]
 8007c5a:	1dfb      	adds	r3, r7, #7
 8007c5c:	7819      	ldrb	r1, [r3, #0]
 8007c5e:	4b06      	ldr	r3, [pc, #24]	@ (8007c78 <hal_timer_set_pwm_output_period+0x734>)
 8007c60:	0109      	lsls	r1, r1, #4
 8007c62:	58cb      	ldr	r3, [r1, r3]
 8007c64:	2101      	movs	r1, #1
 8007c66:	430a      	orrs	r2, r1
 8007c68:	615a      	str	r2, [r3, #20]
 8007c6a:	e002      	b.n	8007c72 <hal_timer_set_pwm_output_period+0x72e>
        return;
 8007c6c:	46c0      	nop			@ (mov r8, r8)
 8007c6e:	e000      	b.n	8007c72 <hal_timer_set_pwm_output_period+0x72e>
        return;
 8007c70:	46c0      	nop			@ (mov r8, r8)
    }
    else
    {
        // No other timers supported
    }
}
 8007c72:	46bd      	mov	sp, r7
 8007c74:	b005      	add	sp, #20
 8007c76:	bd90      	pop	{r4, r7, pc}
 8007c78:	200000fc 	.word	0x200000fc
 8007c7c:	40012c00 	.word	0x40012c00
 8007c80:	feff8bff 	.word	0xfeff8bff
 8007c84:	ffdfffff 	.word	0xffdfffff
 8007c88:	40014000 	.word	0x40014000
 8007c8c:	40014400 	.word	0x40014400
 8007c90:	40014800 	.word	0x40014800

08007c94 <hal_timer_set_timer_for_blocking_delays>:
const uint16_t counts_per_50usec	= ((50  * (BLOCKING_TIMER_OUT_FREQ / 1000000 )) - 1);
const uint16_t counts_per_100usec	= ((100  * (BLOCKING_TIMER_OUT_FREQ / 1000000 )) - 1);
const uint16_t counts_per_152usec	= ((152 * (BLOCKING_TIMER_OUT_FREQ / 1000000 )) - 1);

void hal_timer_set_timer_for_blocking_delays(enum timer_id timer_for_blocking_delays)
{
 8007c94:	b580      	push	{r7, lr}
 8007c96:	b082      	sub	sp, #8
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	0002      	movs	r2, r0
 8007c9c:	1dfb      	adds	r3, r7, #7
 8007c9e:	701a      	strb	r2, [r3, #0]
	/* a basic or general timer must be used for blocking delay functions */
	if ((timer_defs[timer_for_blocking_delays].type != TIM_BASIC) &&
 8007ca0:	1dfb      	adds	r3, r7, #7
 8007ca2:	781b      	ldrb	r3, [r3, #0]
 8007ca4:	4a12      	ldr	r2, [pc, #72]	@ (8007cf0 <hal_timer_set_timer_for_blocking_delays+0x5c>)
 8007ca6:	011b      	lsls	r3, r3, #4
 8007ca8:	18d3      	adds	r3, r2, r3
 8007caa:	3304      	adds	r3, #4
 8007cac:	781b      	ldrb	r3, [r3, #0]
 8007cae:	2b01      	cmp	r3, #1
 8007cb0:	d008      	beq.n	8007cc4 <hal_timer_set_timer_for_blocking_delays+0x30>
		(timer_defs[timer_for_blocking_delays].type != TIM_GEN_PURPOSE))
 8007cb2:	1dfb      	adds	r3, r7, #7
 8007cb4:	781b      	ldrb	r3, [r3, #0]
 8007cb6:	4a0e      	ldr	r2, [pc, #56]	@ (8007cf0 <hal_timer_set_timer_for_blocking_delays+0x5c>)
 8007cb8:	011b      	lsls	r3, r3, #4
 8007cba:	18d3      	adds	r3, r2, r3
 8007cbc:	3304      	adds	r3, #4
 8007cbe:	781b      	ldrb	r3, [r3, #0]
	if ((timer_defs[timer_for_blocking_delays].type != TIM_BASIC) &&
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d110      	bne.n	8007ce6 <hal_timer_set_timer_for_blocking_delays+0x52>
	{
		return;
	}

	blocking_delay_timer_ptr          = (TIM_TypeDef*)timer_defs[timer_for_blocking_delays].timer;
 8007cc4:	1dfb      	adds	r3, r7, #7
 8007cc6:	781a      	ldrb	r2, [r3, #0]
 8007cc8:	4b09      	ldr	r3, [pc, #36]	@ (8007cf0 <hal_timer_set_timer_for_blocking_delays+0x5c>)
 8007cca:	0112      	lsls	r2, r2, #4
 8007ccc:	58d2      	ldr	r2, [r2, r3]
 8007cce:	4b09      	ldr	r3, [pc, #36]	@ (8007cf4 <hal_timer_set_timer_for_blocking_delays+0x60>)
 8007cd0:	601a      	str	r2, [r3, #0]

	//blocking_delay_prescaler_pwr_of_2 = timer_defs[timer_for_blocking_delays].prescale_powers_of_2;

	// The STM32G070 uses a 16bit prescaler.
	blocking_delay_prescaler_16b = timer_defs[timer_for_blocking_delays].prescaler_16b;
 8007cd2:	1dfb      	adds	r3, r7, #7
 8007cd4:	781b      	ldrb	r3, [r3, #0]
 8007cd6:	4a06      	ldr	r2, [pc, #24]	@ (8007cf0 <hal_timer_set_timer_for_blocking_delays+0x5c>)
 8007cd8:	011b      	lsls	r3, r3, #4
 8007cda:	18d3      	adds	r3, r2, r3
 8007cdc:	3306      	adds	r3, #6
 8007cde:	881a      	ldrh	r2, [r3, #0]
 8007ce0:	4b05      	ldr	r3, [pc, #20]	@ (8007cf8 <hal_timer_set_timer_for_blocking_delays+0x64>)
 8007ce2:	801a      	strh	r2, [r3, #0]
 8007ce4:	e000      	b.n	8007ce8 <hal_timer_set_timer_for_blocking_delays+0x54>
		return;
 8007ce6:	46c0      	nop			@ (mov r8, r8)

}
 8007ce8:	46bd      	mov	sp, r7
 8007cea:	b002      	add	sp, #8
 8007cec:	bd80      	pop	{r7, pc}
 8007cee:	46c0      	nop			@ (mov r8, r8)
 8007cf0:	200000fc 	.word	0x200000fc
 8007cf4:	20000630 	.word	0x20000630
 8007cf8:	20000634 	.word	0x20000634

08007cfc <hal_timer_blocking_delay_for_152us>:
	/* disable timer */
	blocking_delay_timer_ptr->CR1 &= ~TIM_CR1_CEN;
}

void hal_timer_blocking_delay_for_152us(void)
{
 8007cfc:	b580      	push	{r7, lr}
 8007cfe:	af00      	add	r7, sp, #0
	/* disable timer */
	blocking_delay_timer_ptr->CR1 &= ~TIM_CR1_CEN;
 8007d00:	4b14      	ldr	r3, [pc, #80]	@ (8007d54 <hal_timer_blocking_delay_for_152us+0x58>)
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	681a      	ldr	r2, [r3, #0]
 8007d06:	4b13      	ldr	r3, [pc, #76]	@ (8007d54 <hal_timer_blocking_delay_for_152us+0x58>)
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	2101      	movs	r1, #1
 8007d0c:	438a      	bics	r2, r1
 8007d0e:	601a      	str	r2, [r3, #0]

	/* set the count */
	blocking_delay_timer_ptr->ARR = counts_per_152usec;
 8007d10:	2297      	movs	r2, #151	@ 0x97
 8007d12:	4b10      	ldr	r3, [pc, #64]	@ (8007d54 <hal_timer_blocking_delay_for_152us+0x58>)
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	62da      	str	r2, [r3, #44]	@ 0x2c

	/* ensure the flag is cleared */
	blocking_delay_timer_ptr->SR = 0;
 8007d18:	4b0e      	ldr	r3, [pc, #56]	@ (8007d54 <hal_timer_blocking_delay_for_152us+0x58>)
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	2200      	movs	r2, #0
 8007d1e:	611a      	str	r2, [r3, #16]

	/* enable timer */
	blocking_delay_timer_ptr->CR1 |= TIM_CR1_CEN;
 8007d20:	4b0c      	ldr	r3, [pc, #48]	@ (8007d54 <hal_timer_blocking_delay_for_152us+0x58>)
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	681a      	ldr	r2, [r3, #0]
 8007d26:	4b0b      	ldr	r3, [pc, #44]	@ (8007d54 <hal_timer_blocking_delay_for_152us+0x58>)
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	2101      	movs	r1, #1
 8007d2c:	430a      	orrs	r2, r1
 8007d2e:	601a      	str	r2, [r3, #0]

	/* wait until the timer expires*/
	while(!(blocking_delay_timer_ptr->SR)) {}
 8007d30:	46c0      	nop			@ (mov r8, r8)
 8007d32:	4b08      	ldr	r3, [pc, #32]	@ (8007d54 <hal_timer_blocking_delay_for_152us+0x58>)
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	691b      	ldr	r3, [r3, #16]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d0fa      	beq.n	8007d32 <hal_timer_blocking_delay_for_152us+0x36>

	/* disable timer */
	blocking_delay_timer_ptr->CR1 &= ~TIM_CR1_CEN;
 8007d3c:	4b05      	ldr	r3, [pc, #20]	@ (8007d54 <hal_timer_blocking_delay_for_152us+0x58>)
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	681a      	ldr	r2, [r3, #0]
 8007d42:	4b04      	ldr	r3, [pc, #16]	@ (8007d54 <hal_timer_blocking_delay_for_152us+0x58>)
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	2101      	movs	r1, #1
 8007d48:	438a      	bics	r2, r1
 8007d4a:	601a      	str	r2, [r3, #0]
}
 8007d4c:	46c0      	nop			@ (mov r8, r8)
 8007d4e:	46bd      	mov	sp, r7
 8007d50:	bd80      	pop	{r7, pc}
 8007d52:	46c0      	nop			@ (mov r8, r8)
 8007d54:	20000630 	.word	0x20000630

08007d58 <hal_timer_blocking_delay_variable_usec>:

void hal_timer_blocking_delay_variable_usec(uint32_t delay_usec)
{
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	b082      	sub	sp, #8
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	6078      	str	r0, [r7, #4]
	/* disable timer */
	blocking_delay_timer_ptr->CR1 &= ~TIM_CR1_CEN;
 8007d60:	4b1d      	ldr	r3, [pc, #116]	@ (8007dd8 <hal_timer_blocking_delay_variable_usec+0x80>)
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	681a      	ldr	r2, [r3, #0]
 8007d66:	4b1c      	ldr	r3, [pc, #112]	@ (8007dd8 <hal_timer_blocking_delay_variable_usec+0x80>)
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	2101      	movs	r1, #1
 8007d6c:	438a      	bics	r2, r1
 8007d6e:	601a      	str	r2, [r3, #0]

	blocking_delay_timer_ptr->ARR = (delay_usec * (BLOCKING_TIMER_CLK_FREQ / (1000000 * blocking_delay_prescaler_16b)));
 8007d70:	4b1a      	ldr	r3, [pc, #104]	@ (8007ddc <hal_timer_blocking_delay_variable_usec+0x84>)
 8007d72:	881b      	ldrh	r3, [r3, #0]
 8007d74:	0019      	movs	r1, r3
 8007d76:	000a      	movs	r2, r1
 8007d78:	0152      	lsls	r2, r2, #5
 8007d7a:	1a52      	subs	r2, r2, r1
 8007d7c:	0193      	lsls	r3, r2, #6
 8007d7e:	1a9b      	subs	r3, r3, r2
 8007d80:	00db      	lsls	r3, r3, #3
 8007d82:	185b      	adds	r3, r3, r1
 8007d84:	019b      	lsls	r3, r3, #6
 8007d86:	0019      	movs	r1, r3
 8007d88:	4815      	ldr	r0, [pc, #84]	@ (8007de0 <hal_timer_blocking_delay_variable_usec+0x88>)
 8007d8a:	f7f8 fa15 	bl	80001b8 <__udivsi3>
 8007d8e:	0003      	movs	r3, r0
 8007d90:	0019      	movs	r1, r3
 8007d92:	4b11      	ldr	r3, [pc, #68]	@ (8007dd8 <hal_timer_blocking_delay_variable_usec+0x80>)
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	687a      	ldr	r2, [r7, #4]
 8007d98:	434a      	muls	r2, r1
 8007d9a:	62da      	str	r2, [r3, #44]	@ 0x2c

	/* ensure the flag is cleared */
	blocking_delay_timer_ptr->SR = 0;
 8007d9c:	4b0e      	ldr	r3, [pc, #56]	@ (8007dd8 <hal_timer_blocking_delay_variable_usec+0x80>)
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	2200      	movs	r2, #0
 8007da2:	611a      	str	r2, [r3, #16]

	/* enable timer */
	blocking_delay_timer_ptr->CR1 |= TIM_CR1_CEN;
 8007da4:	4b0c      	ldr	r3, [pc, #48]	@ (8007dd8 <hal_timer_blocking_delay_variable_usec+0x80>)
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	681a      	ldr	r2, [r3, #0]
 8007daa:	4b0b      	ldr	r3, [pc, #44]	@ (8007dd8 <hal_timer_blocking_delay_variable_usec+0x80>)
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	2101      	movs	r1, #1
 8007db0:	430a      	orrs	r2, r1
 8007db2:	601a      	str	r2, [r3, #0]

	/* wait until the timer expires*/
	while(!(blocking_delay_timer_ptr->SR)) {}
 8007db4:	46c0      	nop			@ (mov r8, r8)
 8007db6:	4b08      	ldr	r3, [pc, #32]	@ (8007dd8 <hal_timer_blocking_delay_variable_usec+0x80>)
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	691b      	ldr	r3, [r3, #16]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d0fa      	beq.n	8007db6 <hal_timer_blocking_delay_variable_usec+0x5e>

	/* disable timer */
	blocking_delay_timer_ptr->CR1 &= ~TIM_CR1_CEN;
 8007dc0:	4b05      	ldr	r3, [pc, #20]	@ (8007dd8 <hal_timer_blocking_delay_variable_usec+0x80>)
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	681a      	ldr	r2, [r3, #0]
 8007dc6:	4b04      	ldr	r3, [pc, #16]	@ (8007dd8 <hal_timer_blocking_delay_variable_usec+0x80>)
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	2101      	movs	r1, #1
 8007dcc:	438a      	bics	r2, r1
 8007dce:	601a      	str	r2, [r3, #0]
}
 8007dd0:	46c0      	nop			@ (mov r8, r8)
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	b002      	add	sp, #8
 8007dd6:	bd80      	pop	{r7, pc}
 8007dd8:	20000630 	.word	0x20000630
 8007ddc:	20000634 	.word	0x20000634
 8007de0:	0337f980 	.word	0x0337f980

08007de4 <irq_cb>:

#if defined TIM15
static void irq_cb(TIM_TypeDef *tmr)
{
 8007de4:	b580      	push	{r7, lr}
 8007de6:	b084      	sub	sp, #16
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	6078      	str	r0, [r7, #4]
	for (uint8_t i=0u; i < NUMBER_OF_TIMERS; i++)
 8007dec:	230f      	movs	r3, #15
 8007dee:	18fb      	adds	r3, r7, r3
 8007df0:	2200      	movs	r2, #0
 8007df2:	701a      	strb	r2, [r3, #0]
 8007df4:	e020      	b.n	8007e38 <irq_cb+0x54>
	{
		if (timer_defs[i].timer == tmr)
 8007df6:	210f      	movs	r1, #15
 8007df8:	187b      	adds	r3, r7, r1
 8007dfa:	781a      	ldrb	r2, [r3, #0]
 8007dfc:	4b13      	ldr	r3, [pc, #76]	@ (8007e4c <irq_cb+0x68>)
 8007dfe:	0112      	lsls	r2, r2, #4
 8007e00:	58d3      	ldr	r3, [r2, r3]
 8007e02:	687a      	ldr	r2, [r7, #4]
 8007e04:	429a      	cmp	r2, r3
 8007e06:	d111      	bne.n	8007e2c <irq_cb+0x48>
		{
			if (timer_defs[i].timer_irq_cb != NULL)
 8007e08:	187b      	adds	r3, r7, r1
 8007e0a:	781b      	ldrb	r3, [r3, #0]
 8007e0c:	4a0f      	ldr	r2, [pc, #60]	@ (8007e4c <irq_cb+0x68>)
 8007e0e:	011b      	lsls	r3, r3, #4
 8007e10:	18d3      	adds	r3, r2, r3
 8007e12:	3308      	adds	r3, #8
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d008      	beq.n	8007e2c <irq_cb+0x48>
			{
				timer_defs[i].timer_irq_cb(0 /* dummy value for now, since this isn't implemented */);
 8007e1a:	187b      	adds	r3, r7, r1
 8007e1c:	781b      	ldrb	r3, [r3, #0]
 8007e1e:	4a0b      	ldr	r2, [pc, #44]	@ (8007e4c <irq_cb+0x68>)
 8007e20:	011b      	lsls	r3, r3, #4
 8007e22:	18d3      	adds	r3, r2, r3
 8007e24:	3308      	adds	r3, #8
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	2000      	movs	r0, #0
 8007e2a:	4798      	blx	r3
	for (uint8_t i=0u; i < NUMBER_OF_TIMERS; i++)
 8007e2c:	210f      	movs	r1, #15
 8007e2e:	187b      	adds	r3, r7, r1
 8007e30:	781a      	ldrb	r2, [r3, #0]
 8007e32:	187b      	adds	r3, r7, r1
 8007e34:	3201      	adds	r2, #1
 8007e36:	701a      	strb	r2, [r3, #0]
 8007e38:	230f      	movs	r3, #15
 8007e3a:	18fb      	adds	r3, r7, r3
 8007e3c:	781b      	ldrb	r3, [r3, #0]
 8007e3e:	2b03      	cmp	r3, #3
 8007e40:	d9d9      	bls.n	8007df6 <irq_cb+0x12>
			}
		}
	}
}
 8007e42:	46c0      	nop			@ (mov r8, r8)
 8007e44:	46c0      	nop			@ (mov r8, r8)
 8007e46:	46bd      	mov	sp, r7
 8007e48:	b004      	add	sp, #16
 8007e4a:	bd80      	pop	{r7, pc}
 8007e4c:	200000fc 	.word	0x200000fc

08007e50 <TIM15_IRQHandler>:

void TIM15_IRQHandler(void)
{
 8007e50:	b580      	push	{r7, lr}
 8007e52:	af00      	add	r7, sp, #0
	irq_cb(TIM15);
 8007e54:	4b03      	ldr	r3, [pc, #12]	@ (8007e64 <TIM15_IRQHandler+0x14>)
 8007e56:	0018      	movs	r0, r3
 8007e58:	f7ff ffc4 	bl	8007de4 <irq_cb>
}
 8007e5c:	46c0      	nop			@ (mov r8, r8)
 8007e5e:	46bd      	mov	sp, r7
 8007e60:	bd80      	pop	{r7, pc}
 8007e62:	46c0      	nop			@ (mov r8, r8)
 8007e64:	40014000 	.word	0x40014000

08007e68 <hal_watchdog_init>:


static IWDG_HandleTypeDef wdg_hdl = {0};

void hal_watchdog_init(void)
{
 8007e68:	b5b0      	push	{r4, r5, r7, lr}
 8007e6a:	af00      	add	r7, sp, #0
    // Call the watch dog initialization function that was created by the hardware configuration tool.
	MX_IWDG_Init();
 8007e6c:	f7f9 ff9a 	bl	8001da4 <MX_IWDG_Init>

	wdg_hdl = hiwdg; // Use the watch dog handle created by the STM32 Hardware Configuration Tool.
 8007e70:	4b04      	ldr	r3, [pc, #16]	@ (8007e84 <hal_watchdog_init+0x1c>)
 8007e72:	4a05      	ldr	r2, [pc, #20]	@ (8007e88 <hal_watchdog_init+0x20>)
 8007e74:	ca13      	ldmia	r2!, {r0, r1, r4}
 8007e76:	c313      	stmia	r3!, {r0, r1, r4}
 8007e78:	6812      	ldr	r2, [r2, #0]
 8007e7a:	601a      	str	r2, [r3, #0]

}
 8007e7c:	46c0      	nop			@ (mov r8, r8)
 8007e7e:	46bd      	mov	sp, r7
 8007e80:	bdb0      	pop	{r4, r5, r7, pc}
 8007e82:	46c0      	nop			@ (mov r8, r8)
 8007e84:	20000638 	.word	0x20000638
 8007e88:	20000444 	.word	0x20000444

08007e8c <hal_watchdog_reset>:
{

}

void hal_watchdog_reset(void)
{
 8007e8c:	b580      	push	{r7, lr}
 8007e8e:	af00      	add	r7, sp, #0
	if( wdg_hdl.Instance != NULL )			// Bootloader was resetting wdt but it was never initialized. This resulted in a null pointer access in HAL functions which impacted FLASH-SR CFGBSY Flag
 8007e90:	4b05      	ldr	r3, [pc, #20]	@ (8007ea8 <hal_watchdog_reset+0x1c>)
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d003      	beq.n	8007ea0 <hal_watchdog_reset+0x14>
	{
		/* reload the WDT */
		HAL_IWDG_Refresh(&wdg_hdl);
 8007e98:	4b03      	ldr	r3, [pc, #12]	@ (8007ea8 <hal_watchdog_reset+0x1c>)
 8007e9a:	0018      	movs	r0, r3
 8007e9c:	f7fc f81a 	bl	8003ed4 <HAL_IWDG_Refresh>
	}
}
 8007ea0:	46c0      	nop			@ (mov r8, r8)
 8007ea2:	46bd      	mov	sp, r7
 8007ea4:	bd80      	pop	{r7, pc}
 8007ea6:	46c0      	nop			@ (mov r8, r8)
 8007ea8:	20000638 	.word	0x20000638

08007eac <parse_bytes_expected>:
*               bool *expectChecksum: Does the message contain a Checksum?
*               invue_ir_mode_enum ir_mode: Current IR mode
*  return:      uint8_t: Length of message
*****************************************************************/
static uint8_t parse_bytes_expected( uint8_t msg_id, bool *expectChecksum, invue_ir_mode_enum ir_mode )
{
 8007eac:	b580      	push	{r7, lr}
 8007eae:	b084      	sub	sp, #16
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	6039      	str	r1, [r7, #0]
 8007eb4:	0011      	movs	r1, r2
 8007eb6:	1dfb      	adds	r3, r7, #7
 8007eb8:	1c02      	adds	r2, r0, #0
 8007eba:	701a      	strb	r2, [r3, #0]
 8007ebc:	1dbb      	adds	r3, r7, #6
 8007ebe:	1c0a      	adds	r2, r1, #0
 8007ec0:	701a      	strb	r2, [r3, #0]
    uint8_t bytes_expected = 0;
 8007ec2:	230f      	movs	r3, #15
 8007ec4:	18fb      	adds	r3, r7, r3
 8007ec6:	2200      	movs	r2, #0
 8007ec8:	701a      	strb	r2, [r3, #0]
    *expectChecksum = false;
 8007eca:	683b      	ldr	r3, [r7, #0]
 8007ecc:	2200      	movs	r2, #0
 8007ece:	701a      	strb	r2, [r3, #0]

    switch(msg_id)
 8007ed0:	1dfb      	adds	r3, r7, #7
 8007ed2:	781b      	ldrb	r3, [r3, #0]
 8007ed4:	3b10      	subs	r3, #16
 8007ed6:	2bde      	cmp	r3, #222	@ 0xde
 8007ed8:	d863      	bhi.n	8007fa2 <parse_bytes_expected+0xf6>
 8007eda:	009a      	lsls	r2, r3, #2
 8007edc:	4b37      	ldr	r3, [pc, #220]	@ (8007fbc <parse_bytes_expected+0x110>)
 8007ede:	18d3      	adds	r3, r2, r3
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	469f      	mov	pc, r3
        case TOKEN_IR1_ACK:
        case TOKEN_IR1_GSN:
        case TOKEN_CT_WIPE:
        case TOKEN_IR2_2_IR4UPGRADE:
        case TOKEN_IR2_SSN_RTL:
            bytes_expected = 2;
 8007ee4:	230f      	movs	r3, #15
 8007ee6:	18fb      	adds	r3, r7, r3
 8007ee8:	2202      	movs	r2, #2
 8007eea:	701a      	strb	r2, [r3, #0]
            break;
 8007eec:	e05e      	b.n	8007fac <parse_bytes_expected+0x100>
        case TOKEN_IR1_SSN:
            bytes_expected = 13;
 8007eee:	230f      	movs	r3, #15
 8007ef0:	18fb      	adds	r3, r7, r3
 8007ef2:	220d      	movs	r2, #13
 8007ef4:	701a      	strb	r2, [r3, #0]
            break;
 8007ef6:	e059      	b.n	8007fac <parse_bytes_expected+0x100>
        case TOKEN_IR1_NACK:
            bytes_expected = 1;
 8007ef8:	230f      	movs	r3, #15
 8007efa:	18fb      	adds	r3, r7, r3
 8007efc:	2201      	movs	r2, #1
 8007efe:	701a      	strb	r2, [r3, #0]
            break;
 8007f00:	e054      	b.n	8007fac <parse_bytes_expected+0x100>
        case TOKEN_IR1_SSDC:
        case TOKEN_IR2_GSTAT:
            if( ir_mode == IR2_MODE )
 8007f02:	1dbb      	adds	r3, r7, #6
 8007f04:	781b      	ldrb	r3, [r3, #0]
 8007f06:	2b02      	cmp	r3, #2
 8007f08:	d102      	bne.n	8007f10 <parse_bytes_expected+0x64>
            {
                *expectChecksum = true;
 8007f0a:	683b      	ldr	r3, [r7, #0]
 8007f0c:	2201      	movs	r2, #1
 8007f0e:	701a      	strb	r2, [r3, #0]
            }
            bytes_expected = 6;
 8007f10:	230f      	movs	r3, #15
 8007f12:	18fb      	adds	r3, r7, r3
 8007f14:	2206      	movs	r2, #6
 8007f16:	701a      	strb	r2, [r3, #0]
            break;
 8007f18:	e048      	b.n	8007fac <parse_bytes_expected+0x100>
        case TOKEN_IR1_PING:
            bytes_expected = 1;
 8007f1a:	230f      	movs	r3, #15
 8007f1c:	18fb      	adds	r3, r7, r3
 8007f1e:	2201      	movs	r2, #1
 8007f20:	701a      	strb	r2, [r3, #0]
            break;
 8007f22:	e043      	b.n	8007fac <parse_bytes_expected+0x100>
        case TOKEN_IR2_SSN:
            bytes_expected = 10;
 8007f24:	230f      	movs	r3, #15
 8007f26:	18fb      	adds	r3, r7, r3
 8007f28:	220a      	movs	r2, #10
 8007f2a:	701a      	strb	r2, [r3, #0]
            // TODO: Figure out if the checksum should be checked.
            //*expectChecksum = true;
            break;
 8007f2c:	e03e      	b.n	8007fac <parse_bytes_expected+0x100>
        case TOKEN_IR2_GSDC:
        case TOKEN_IR2_ADV_GET_INFO:
            bytes_expected    = 6;
 8007f2e:	230f      	movs	r3, #15
 8007f30:	18fb      	adds	r3, r7, r3
 8007f32:	2206      	movs	r2, #6
 8007f34:	701a      	strb	r2, [r3, #0]
            *expectChecksum = true;
 8007f36:	683b      	ldr	r3, [r7, #0]
 8007f38:	2201      	movs	r2, #1
 8007f3a:	701a      	strb	r2, [r3, #0]
            break;
 8007f3c:	e036      	b.n	8007fac <parse_bytes_expected+0x100>
        case TOKEN_IR3_ARTL:
            bytes_expected = 2;
 8007f3e:	230f      	movs	r3, #15
 8007f40:	18fb      	adds	r3, r7, r3
 8007f42:	2202      	movs	r2, #2
 8007f44:	701a      	strb	r2, [r3, #0]
            break;
 8007f46:	e031      	b.n	8007fac <parse_bytes_expected+0x100>
        case TOKEN_IR3_ANACK:
            bytes_expected = 1;
 8007f48:	230f      	movs	r3, #15
 8007f4a:	18fb      	adds	r3, r7, r3
 8007f4c:	2201      	movs	r2, #1
 8007f4e:	701a      	strb	r2, [r3, #0]
            break;
 8007f50:	e02c      	b.n	8007fac <parse_bytes_expected+0x100>
        case TOKEN_IR3_AACK_IR4_NACK:
            if( ir_mode == IR3_MODE )
 8007f52:	1dbb      	adds	r3, r7, #6
 8007f54:	781b      	ldrb	r3, [r3, #0]
 8007f56:	2b03      	cmp	r3, #3
 8007f58:	d104      	bne.n	8007f64 <parse_bytes_expected+0xb8>
            {
                bytes_expected = 1;
 8007f5a:	230f      	movs	r3, #15
 8007f5c:	18fb      	adds	r3, r7, r3
 8007f5e:	2201      	movs	r2, #1
 8007f60:	701a      	strb	r2, [r3, #0]
            }
            else
            {
                bytes_expected = Ir4TwoByteMsgNumBytes;
            }
            break;
 8007f62:	e023      	b.n	8007fac <parse_bytes_expected+0x100>
                bytes_expected = Ir4TwoByteMsgNumBytes;
 8007f64:	230f      	movs	r3, #15
 8007f66:	18fb      	adds	r3, r7, r3
 8007f68:	2202      	movs	r2, #2
 8007f6a:	701a      	strb	r2, [r3, #0]
            break;
 8007f6c:	e01e      	b.n	8007fac <parse_bytes_expected+0x100>
        case TOKEN_IR3_AERR:
        case TOKEN_IR3_INFO:
        case TOKEN_IR3_ARTLA:
        case TOKEN_IR3_AEXE:
            // set the bytes expected to max value, indicating the size byte will be included in the packet
            bytes_expected    = SIZE_BYTE_EXPECTED;
 8007f6e:	230f      	movs	r3, #15
 8007f70:	18fb      	adds	r3, r7, r3
 8007f72:	22ff      	movs	r2, #255	@ 0xff
 8007f74:	701a      	strb	r2, [r3, #0]
            *expectChecksum = true;
 8007f76:	683b      	ldr	r3, [r7, #0]
 8007f78:	2201      	movs	r2, #1
 8007f7a:	701a      	strb	r2, [r3, #0]
            break;
 8007f7c:	e016      	b.n	8007fac <parse_bytes_expected+0x100>
        case TOKEN_IR4_ACK:
            bytes_expected = Ir4TwoByteMsgNumBytes;            // Status request, Ack and Nack messages Are two bytes message with the same byte indices:
 8007f7e:	230f      	movs	r3, #15
 8007f80:	18fb      	adds	r3, r7, r3
 8007f82:	2202      	movs	r2, #2
 8007f84:	701a      	strb	r2, [r3, #0]
            break;
 8007f86:	e011      	b.n	8007fac <parse_bytes_expected+0x100>
        case TOKEN_IR4_TRANS_SDC:
            bytes_expected = Ir4TransSdcNumMsgBytes;
 8007f88:	230f      	movs	r3, #15
 8007f8a:	18fb      	adds	r3, r7, r3
 8007f8c:	221c      	movs	r2, #28
 8007f8e:	701a      	strb	r2, [r3, #0]
            *expectChecksum = true;
 8007f90:	683b      	ldr	r3, [r7, #0]
 8007f92:	2201      	movs	r2, #1
 8007f94:	701a      	strb	r2, [r3, #0]
            break;
 8007f96:	e009      	b.n	8007fac <parse_bytes_expected+0x100>
        case TOKEN_IR4_STAT_REQ:
            bytes_expected = Ir4TwoByteMsgNumBytes;
 8007f98:	230f      	movs	r3, #15
 8007f9a:	18fb      	adds	r3, r7, r3
 8007f9c:	2202      	movs	r2, #2
 8007f9e:	701a      	strb	r2, [r3, #0]
            break;
 8007fa0:	e004      	b.n	8007fac <parse_bytes_expected+0x100>
        default:
            bytes_expected = 0;
 8007fa2:	230f      	movs	r3, #15
 8007fa4:	18fb      	adds	r3, r7, r3
 8007fa6:	2200      	movs	r2, #0
 8007fa8:	701a      	strb	r2, [r3, #0]
            break;
 8007faa:	46c0      	nop			@ (mov r8, r8)
    } // switch ((ir_tokens_e)rx_byte) - First call
    return bytes_expected;
 8007fac:	230f      	movs	r3, #15
 8007fae:	18fb      	adds	r3, r7, r3
 8007fb0:	781b      	ldrb	r3, [r3, #0]
}
 8007fb2:	0018      	movs	r0, r3
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	b004      	add	sp, #16
 8007fb8:	bd80      	pop	{r7, pc}
 8007fba:	46c0      	nop			@ (mov r8, r8)
 8007fbc:	0800a3c0 	.word	0x0800a3c0

08007fc0 <validate_tid>:
*  parameters:  uint8_t *rx_msg
*               invue_ir_mode_enum ir_mode
*  return:      bool: True if valid
*****************************************************************/
static bool validate_tid( uint8_t *rx_msg, uint8_t *last_tid, invue_ir_mode_enum ir_mode)
{
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	b086      	sub	sp, #24
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	60f8      	str	r0, [r7, #12]
 8007fc8:	60b9      	str	r1, [r7, #8]
 8007fca:	1dfb      	adds	r3, r7, #7
 8007fcc:	701a      	strb	r2, [r3, #0]
    bool valid = true;
 8007fce:	2317      	movs	r3, #23
 8007fd0:	18fb      	adds	r3, r7, r3
 8007fd2:	2201      	movs	r2, #1
 8007fd4:	701a      	strb	r2, [r3, #0]
    switch(rx_msg[0])                            // Parse the CMD
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	781b      	ldrb	r3, [r3, #0]
 8007fda:	2bee      	cmp	r3, #238	@ 0xee
 8007fdc:	dd00      	ble.n	8007fe0 <validate_tid+0x20>
 8007fde:	e0e8      	b.n	80081b2 <validate_tid+0x1f2>
 8007fe0:	2b3f      	cmp	r3, #63	@ 0x3f
 8007fe2:	da04      	bge.n	8007fee <validate_tid+0x2e>
 8007fe4:	2b10      	cmp	r3, #16
 8007fe6:	d010      	beq.n	800800a <validate_tid+0x4a>
 8007fe8:	2b12      	cmp	r3, #18
 8007fea:	d032      	beq.n	8008052 <validate_tid+0x92>
 8007fec:	e0e1      	b.n	80081b2 <validate_tid+0x1f2>
 8007fee:	3b3f      	subs	r3, #63	@ 0x3f
 8007ff0:	2baf      	cmp	r3, #175	@ 0xaf
 8007ff2:	d900      	bls.n	8007ff6 <validate_tid+0x36>
 8007ff4:	e0dd      	b.n	80081b2 <validate_tid+0x1f2>
 8007ff6:	009a      	lsls	r2, r3, #2
 8007ff8:	4b74      	ldr	r3, [pc, #464]	@ (80081cc <validate_tid+0x20c>)
 8007ffa:	18d3      	adds	r3, r2, r3
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	469f      	mov	pc, r3
    {
        case TOKEN_IR1_RTL:
        case TOKEN_IR3_ARTL:
            // start the TID value here
            *last_tid = rx_msg[1];
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	785a      	ldrb	r2, [r3, #1]
 8008004:	68bb      	ldr	r3, [r7, #8]
 8008006:	701a      	strb	r2, [r3, #0]
            break;
 8008008:	e0d9      	b.n	80081be <validate_tid+0x1fe>
        case TOKEN_IR1_ACK:
        case TOKEN_IR1_NACK:
        case TOKEN_IR1_GSN:
        case TOKEN_CT_WIPE:
            // if the TID is not valid
            if (rx_msg[1] != (uint8_t)(*last_tid + 1))
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	3301      	adds	r3, #1
 800800e:	781a      	ldrb	r2, [r3, #0]
 8008010:	68bb      	ldr	r3, [r7, #8]
 8008012:	781b      	ldrb	r3, [r3, #0]
 8008014:	3301      	adds	r3, #1
 8008016:	b2db      	uxtb	r3, r3
 8008018:	429a      	cmp	r2, r3
 800801a:	d003      	beq.n	8008024 <validate_tid+0x64>
            {
                valid = false;
 800801c:	2317      	movs	r3, #23
 800801e:	18fb      	adds	r3, r7, r3
 8008020:	2200      	movs	r2, #0
 8008022:	701a      	strb	r2, [r3, #0]
            }
            *last_tid = rx_msg[1];
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	785a      	ldrb	r2, [r3, #1]
 8008028:	68bb      	ldr	r3, [r7, #8]
 800802a:	701a      	strb	r2, [r3, #0]
            break;
 800802c:	e0c7      	b.n	80081be <validate_tid+0x1fe>
        case TOKEN_IR3_AEXE:
            // if the TID is not valid
            if (rx_msg[2] != (uint8_t)(*last_tid + 1))
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	3302      	adds	r3, #2
 8008032:	781a      	ldrb	r2, [r3, #0]
 8008034:	68bb      	ldr	r3, [r7, #8]
 8008036:	781b      	ldrb	r3, [r3, #0]
 8008038:	3301      	adds	r3, #1
 800803a:	b2db      	uxtb	r3, r3
 800803c:	429a      	cmp	r2, r3
 800803e:	d003      	beq.n	8008048 <validate_tid+0x88>
            {
                valid = false;
 8008040:	2317      	movs	r3, #23
 8008042:	18fb      	adds	r3, r7, r3
 8008044:	2200      	movs	r2, #0
 8008046:	701a      	strb	r2, [r3, #0]
            }
            *last_tid = rx_msg[2];
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	789a      	ldrb	r2, [r3, #2]
 800804c:	68bb      	ldr	r3, [r7, #8]
 800804e:	701a      	strb	r2, [r3, #0]
            break;
 8008050:	e0b5      	b.n	80081be <validate_tid+0x1fe>
        case TOKEN_IR1_SSN:
            // in this case, this message is the only one sent, so the TID is irrelevant
            // just save the TID
            *last_tid = rx_msg[1];
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	785a      	ldrb	r2, [r3, #1]
 8008056:	68bb      	ldr	r3, [r7, #8]
 8008058:	701a      	strb	r2, [r3, #0]
            break;
 800805a:	e0b0      	b.n	80081be <validate_tid+0x1fe>
        case TOKEN_IR1_SSDC:
            if( ir_mode == IR2_MODE )
 800805c:	1dfb      	adds	r3, r7, #7
 800805e:	781b      	ldrb	r3, [r3, #0]
 8008060:	2b02      	cmp	r3, #2
 8008062:	d111      	bne.n	8008088 <validate_tid+0xc8>
            {
                if (rx_msg[4] != (uint8_t)(*last_tid + 1))
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	3304      	adds	r3, #4
 8008068:	781a      	ldrb	r2, [r3, #0]
 800806a:	68bb      	ldr	r3, [r7, #8]
 800806c:	781b      	ldrb	r3, [r3, #0]
 800806e:	3301      	adds	r3, #1
 8008070:	b2db      	uxtb	r3, r3
 8008072:	429a      	cmp	r2, r3
 8008074:	d003      	beq.n	800807e <validate_tid+0xbe>
                {
                    valid = false;
 8008076:	2317      	movs	r3, #23
 8008078:	18fb      	adds	r3, r7, r3
 800807a:	2200      	movs	r2, #0
 800807c:	701a      	strb	r2, [r3, #0]
                }
                *last_tid = rx_msg[4];
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	791a      	ldrb	r2, [r3, #4]
 8008082:	68bb      	ldr	r3, [r7, #8]
 8008084:	701a      	strb	r2, [r3, #0]
                {
                    valid = false;
                }
                *last_tid = rx_msg[5];
            }
            break;
 8008086:	e09a      	b.n	80081be <validate_tid+0x1fe>
                if (rx_msg[5] != (uint8_t)(*last_tid + 1))
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	3305      	adds	r3, #5
 800808c:	781a      	ldrb	r2, [r3, #0]
 800808e:	68bb      	ldr	r3, [r7, #8]
 8008090:	781b      	ldrb	r3, [r3, #0]
 8008092:	3301      	adds	r3, #1
 8008094:	b2db      	uxtb	r3, r3
 8008096:	429a      	cmp	r2, r3
 8008098:	d003      	beq.n	80080a2 <validate_tid+0xe2>
                    valid = false;
 800809a:	2317      	movs	r3, #23
 800809c:	18fb      	adds	r3, r7, r3
 800809e:	2200      	movs	r2, #0
 80080a0:	701a      	strb	r2, [r3, #0]
                *last_tid = rx_msg[5];
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	795a      	ldrb	r2, [r3, #5]
 80080a6:	68bb      	ldr	r3, [r7, #8]
 80080a8:	701a      	strb	r2, [r3, #0]
            break;
 80080aa:	e088      	b.n	80081be <validate_tid+0x1fe>
        case TOKEN_IR2_SSN_RTL:
            // We won't check this transaction ID. we'll just store it for future
            // transactions.
            *last_tid = rx_msg[Ir4TwoByteMsgTidIndx];
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	785a      	ldrb	r2, [r3, #1]
 80080b0:	68bb      	ldr	r3, [r7, #8]
 80080b2:	701a      	strb	r2, [r3, #0]
            break;
 80080b4:	e083      	b.n	80081be <validate_tid+0x1fe>
        case TOKEN_IR2_SSN:
            if( rx_msg[8] != (uint8_t)(*last_tid + 1) )
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	3308      	adds	r3, #8
 80080ba:	781a      	ldrb	r2, [r3, #0]
 80080bc:	68bb      	ldr	r3, [r7, #8]
 80080be:	781b      	ldrb	r3, [r3, #0]
 80080c0:	3301      	adds	r3, #1
 80080c2:	b2db      	uxtb	r3, r3
 80080c4:	429a      	cmp	r2, r3
 80080c6:	d003      	beq.n	80080d0 <validate_tid+0x110>
            {
                valid = false;
 80080c8:	2317      	movs	r3, #23
 80080ca:	18fb      	adds	r3, r7, r3
 80080cc:	2200      	movs	r2, #0
 80080ce:	701a      	strb	r2, [r3, #0]
            }
            *last_tid = rx_msg[8];
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	7a1a      	ldrb	r2, [r3, #8]
 80080d4:	68bb      	ldr	r3, [r7, #8]
 80080d6:	701a      	strb	r2, [r3, #0]
            break;
 80080d8:	e071      	b.n	80081be <validate_tid+0x1fe>
        case TOKEN_IR2_GSTAT:
        case TOKEN_IR2_GSDC:
        case TOKEN_IR2_ADV_GET_INFO:
            // if the TID is not valid
            if (rx_msg[4] != (uint8_t)(*last_tid + 1))
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	3304      	adds	r3, #4
 80080de:	781a      	ldrb	r2, [r3, #0]
 80080e0:	68bb      	ldr	r3, [r7, #8]
 80080e2:	781b      	ldrb	r3, [r3, #0]
 80080e4:	3301      	adds	r3, #1
 80080e6:	b2db      	uxtb	r3, r3
 80080e8:	429a      	cmp	r2, r3
 80080ea:	d003      	beq.n	80080f4 <validate_tid+0x134>
            {
                valid = false;
 80080ec:	2317      	movs	r3, #23
 80080ee:	18fb      	adds	r3, r7, r3
 80080f0:	2200      	movs	r2, #0
 80080f2:	701a      	strb	r2, [r3, #0]
            }
            *last_tid = rx_msg[4];
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	791a      	ldrb	r2, [r3, #4]
 80080f8:	68bb      	ldr	r3, [r7, #8]
 80080fa:	701a      	strb	r2, [r3, #0]
            break;
 80080fc:	e05f      	b.n	80081be <validate_tid+0x1fe>
        case TOKEN_IR4_STAT_REQ:
            // if the TID is not valid
            if (rx_msg[Ir4TwoByteMsgTidIndx] != (uint8_t)(*last_tid + 1))
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	3301      	adds	r3, #1
 8008102:	781a      	ldrb	r2, [r3, #0]
 8008104:	68bb      	ldr	r3, [r7, #8]
 8008106:	781b      	ldrb	r3, [r3, #0]
 8008108:	3301      	adds	r3, #1
 800810a:	b2db      	uxtb	r3, r3
 800810c:	429a      	cmp	r2, r3
 800810e:	d003      	beq.n	8008118 <validate_tid+0x158>
            {
                valid = false;
 8008110:	2317      	movs	r3, #23
 8008112:	18fb      	adds	r3, r7, r3
 8008114:	2200      	movs	r2, #0
 8008116:	701a      	strb	r2, [r3, #0]
            }
            *last_tid = rx_msg[Ir4TwoByteMsgTidIndx];
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	785a      	ldrb	r2, [r3, #1]
 800811c:	68bb      	ldr	r3, [r7, #8]
 800811e:	701a      	strb	r2, [r3, #0]
            break;
 8008120:	e04d      	b.n	80081be <validate_tid+0x1fe>
        case TOKEN_IR4_ACK:
            // IR4 ACK has a TID
            break;
        case TOKEN_IR4_TRANS_SDC:
            // if the TID is not valid
            if (rx_msg[Ir4TransSdcTidIndx] != (uint8_t)(*last_tid + 1))
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	331a      	adds	r3, #26
 8008126:	781a      	ldrb	r2, [r3, #0]
 8008128:	68bb      	ldr	r3, [r7, #8]
 800812a:	781b      	ldrb	r3, [r3, #0]
 800812c:	3301      	adds	r3, #1
 800812e:	b2db      	uxtb	r3, r3
 8008130:	429a      	cmp	r2, r3
 8008132:	d003      	beq.n	800813c <validate_tid+0x17c>
            {
                valid = false;
 8008134:	2317      	movs	r3, #23
 8008136:	18fb      	adds	r3, r7, r3
 8008138:	2200      	movs	r2, #0
 800813a:	701a      	strb	r2, [r3, #0]
            }
            *last_tid = rx_msg[Ir4TransSdcTidIndx];
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	7e9a      	ldrb	r2, [r3, #26]
 8008140:	68bb      	ldr	r3, [r7, #8]
 8008142:	701a      	strb	r2, [r3, #0]
            break;
 8008144:	e03b      	b.n	80081be <validate_tid+0x1fe>
        case TOKEN_IR3_INFO:
            // if the TID is not valid
            if (rx_msg[15] != (uint8_t)(*last_tid + 1))
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	330f      	adds	r3, #15
 800814a:	781a      	ldrb	r2, [r3, #0]
 800814c:	68bb      	ldr	r3, [r7, #8]
 800814e:	781b      	ldrb	r3, [r3, #0]
 8008150:	3301      	adds	r3, #1
 8008152:	b2db      	uxtb	r3, r3
 8008154:	429a      	cmp	r2, r3
 8008156:	d003      	beq.n	8008160 <validate_tid+0x1a0>
            {
                valid = false;
 8008158:	2317      	movs	r3, #23
 800815a:	18fb      	adds	r3, r7, r3
 800815c:	2200      	movs	r2, #0
 800815e:	701a      	strb	r2, [r3, #0]
            }
            *last_tid = rx_msg[15];
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	7bda      	ldrb	r2, [r3, #15]
 8008164:	68bb      	ldr	r3, [r7, #8]
 8008166:	701a      	strb	r2, [r3, #0]
            break;
 8008168:	e029      	b.n	80081be <validate_tid+0x1fe>
        case TOKEN_IR3_SSPRD:
            // if the TID is not valid
            if (rx_msg[8] != (uint8_t)(*last_tid + 1))
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	3308      	adds	r3, #8
 800816e:	781a      	ldrb	r2, [r3, #0]
 8008170:	68bb      	ldr	r3, [r7, #8]
 8008172:	781b      	ldrb	r3, [r3, #0]
 8008174:	3301      	adds	r3, #1
 8008176:	b2db      	uxtb	r3, r3
 8008178:	429a      	cmp	r2, r3
 800817a:	d003      	beq.n	8008184 <validate_tid+0x1c4>
            {
                valid = false;
 800817c:	2317      	movs	r3, #23
 800817e:	18fb      	adds	r3, r7, r3
 8008180:	2200      	movs	r2, #0
 8008182:	701a      	strb	r2, [r3, #0]
            }
            *last_tid = rx_msg[8];
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	7a1a      	ldrb	r2, [r3, #8]
 8008188:	68bb      	ldr	r3, [r7, #8]
 800818a:	701a      	strb	r2, [r3, #0]
            break;
 800818c:	e017      	b.n	80081be <validate_tid+0x1fe>
        case TOKEN_IR3_GPUD:
            // if the TID is not valid
            if (rx_msg[4] != (uint8_t)(*last_tid + 1))
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	3304      	adds	r3, #4
 8008192:	781a      	ldrb	r2, [r3, #0]
 8008194:	68bb      	ldr	r3, [r7, #8]
 8008196:	781b      	ldrb	r3, [r3, #0]
 8008198:	3301      	adds	r3, #1
 800819a:	b2db      	uxtb	r3, r3
 800819c:	429a      	cmp	r2, r3
 800819e:	d003      	beq.n	80081a8 <validate_tid+0x1e8>
            {
                valid = false;
 80081a0:	2317      	movs	r3, #23
 80081a2:	18fb      	adds	r3, r7, r3
 80081a4:	2200      	movs	r2, #0
 80081a6:	701a      	strb	r2, [r3, #0]
            }
            *last_tid = rx_msg[4];
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	791a      	ldrb	r2, [r3, #4]
 80081ac:	68bb      	ldr	r3, [r7, #8]
 80081ae:	701a      	strb	r2, [r3, #0]
            break;
 80081b0:	e005      	b.n	80081be <validate_tid+0x1fe>
        case TOKEN_IR3_AERR:
        case TOKEN_IR3_GPRD:
        case TOKEN_IR3_SPRD:
        default:
            // tokens not supported
            valid = false;
 80081b2:	2317      	movs	r3, #23
 80081b4:	18fb      	adds	r3, r7, r3
 80081b6:	2200      	movs	r2, #0
 80081b8:	701a      	strb	r2, [r3, #0]
            break;
 80081ba:	e000      	b.n	80081be <validate_tid+0x1fe>
            break;
 80081bc:	46c0      	nop			@ (mov r8, r8)
    }
    return valid;
 80081be:	2317      	movs	r3, #23
 80081c0:	18fb      	adds	r3, r7, r3
 80081c2:	781b      	ldrb	r3, [r3, #0]
}
 80081c4:	0018      	movs	r0, r3
 80081c6:	46bd      	mov	sp, r7
 80081c8:	b006      	add	sp, #24
 80081ca:	bd80      	pop	{r7, pc}
 80081cc:	0800a73c 	.word	0x0800a73c

080081d0 <is_valid_ir1_msg>:
*               IR1 mode or not.
*  parameters:  uint8_t msg_id: ID of the message received.
*  return:      bool: True if valid
*****************************************************************/
static bool is_valid_ir1_msg( uint8_t msg_id )
{
 80081d0:	b580      	push	{r7, lr}
 80081d2:	b082      	sub	sp, #8
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	0002      	movs	r2, r0
 80081d8:	1dfb      	adds	r3, r7, #7
 80081da:	701a      	strb	r2, [r3, #0]
    switch(msg_id)
 80081dc:	1dfb      	adds	r3, r7, #7
 80081de:	781b      	ldrb	r3, [r3, #0]
 80081e0:	2bab      	cmp	r3, #171	@ 0xab
 80081e2:	d017      	beq.n	8008214 <is_valid_ir1_msg+0x44>
 80081e4:	dc18      	bgt.n	8008218 <is_valid_ir1_msg+0x48>
 80081e6:	2b87      	cmp	r3, #135	@ 0x87
 80081e8:	d014      	beq.n	8008214 <is_valid_ir1_msg+0x44>
 80081ea:	dc15      	bgt.n	8008218 <is_valid_ir1_msg+0x48>
 80081ec:	2b5b      	cmp	r3, #91	@ 0x5b
 80081ee:	dc13      	bgt.n	8008218 <is_valid_ir1_msg+0x48>
 80081f0:	2b41      	cmp	r3, #65	@ 0x41
 80081f2:	da04      	bge.n	80081fe <is_valid_ir1_msg+0x2e>
 80081f4:	2b10      	cmp	r3, #16
 80081f6:	d00d      	beq.n	8008214 <is_valid_ir1_msg+0x44>
 80081f8:	2b12      	cmp	r3, #18
 80081fa:	d00b      	beq.n	8008214 <is_valid_ir1_msg+0x44>
        case TOKEN_IR3_INFO:                // Need to accept INFO to enable IR3 upgrade
        case TOKEN_IR3_SPRD:                // Need to accept SPRD to enable IR3 upgrade
            return true;
            break;
        default:
            break;
 80081fc:	e00c      	b.n	8008218 <is_valid_ir1_msg+0x48>
    switch(msg_id)
 80081fe:	3b41      	subs	r3, #65	@ 0x41
 8008200:	4a08      	ldr	r2, [pc, #32]	@ (8008224 <is_valid_ir1_msg+0x54>)
 8008202:	40da      	lsrs	r2, r3
 8008204:	0013      	movs	r3, r2
 8008206:	2201      	movs	r2, #1
 8008208:	4013      	ands	r3, r2
 800820a:	1e5a      	subs	r2, r3, #1
 800820c:	4193      	sbcs	r3, r2
 800820e:	b2db      	uxtb	r3, r3
 8008210:	2b00      	cmp	r3, #0
 8008212:	d001      	beq.n	8008218 <is_valid_ir1_msg+0x48>
            return true;
 8008214:	2301      	movs	r3, #1
 8008216:	e001      	b.n	800821c <is_valid_ir1_msg+0x4c>
            break;
 8008218:	46c0      	nop			@ (mov r8, r8)
    }
    return false;
 800821a:	2300      	movs	r3, #0
}
 800821c:	0018      	movs	r0, r3
 800821e:	46bd      	mov	sp, r7
 8008220:	b002      	add	sp, #8
 8008222:	bd80      	pop	{r7, pc}
 8008224:	044aa801 	.word	0x044aa801

08008228 <is_valid_ir2_msg>:
*               IR2 mode or not.
*  parameters:  uint8_t msg_id: ID of the message received.
*  return:      bool: True if valid
*****************************************************************/
static bool is_valid_ir2_msg( uint8_t msg_id )
{
 8008228:	b580      	push	{r7, lr}
 800822a:	b082      	sub	sp, #8
 800822c:	af00      	add	r7, sp, #0
 800822e:	0002      	movs	r2, r0
 8008230:	1dfb      	adds	r3, r7, #7
 8008232:	701a      	strb	r2, [r3, #0]
    switch(msg_id)
 8008234:	1dfb      	adds	r3, r7, #7
 8008236:	781b      	ldrb	r3, [r3, #0]
 8008238:	2bd2      	cmp	r3, #210	@ 0xd2
 800823a:	d018      	beq.n	800826e <is_valid_ir2_msg+0x46>
 800823c:	dc19      	bgt.n	8008272 <is_valid_ir2_msg+0x4a>
 800823e:	2bbe      	cmp	r3, #190	@ 0xbe
 8008240:	d015      	beq.n	800826e <is_valid_ir2_msg+0x46>
 8008242:	dc16      	bgt.n	8008272 <is_valid_ir2_msg+0x4a>
 8008244:	2bb1      	cmp	r3, #177	@ 0xb1
 8008246:	d012      	beq.n	800826e <is_valid_ir2_msg+0x46>
 8008248:	dc13      	bgt.n	8008272 <is_valid_ir2_msg+0x4a>
 800824a:	2b3f      	cmp	r3, #63	@ 0x3f
 800824c:	d00f      	beq.n	800826e <is_valid_ir2_msg+0x46>
 800824e:	db10      	blt.n	8008272 <is_valid_ir2_msg+0x4a>
 8008250:	2b61      	cmp	r3, #97	@ 0x61
 8008252:	dc0e      	bgt.n	8008272 <is_valid_ir2_msg+0x4a>
 8008254:	2b4c      	cmp	r3, #76	@ 0x4c
 8008256:	db0c      	blt.n	8008272 <is_valid_ir2_msg+0x4a>
 8008258:	3b4c      	subs	r3, #76	@ 0x4c
 800825a:	4a09      	ldr	r2, [pc, #36]	@ (8008280 <is_valid_ir2_msg+0x58>)
 800825c:	40da      	lsrs	r2, r3
 800825e:	0013      	movs	r3, r2
 8008260:	2201      	movs	r2, #1
 8008262:	4013      	ands	r3, r2
 8008264:	1e5a      	subs	r2, r3, #1
 8008266:	4193      	sbcs	r3, r2
 8008268:	b2db      	uxtb	r3, r3
 800826a:	2b00      	cmp	r3, #0
 800826c:	d001      	beq.n	8008272 <is_valid_ir2_msg+0x4a>
        case TOKEN_IR2_2_IR4UPGRADE:
        case TOKEN_IR2_GSDC:
        case TOKEN_IR1_RTL:                    // IR2 starts with IR1 RTL
        case TOKEN_IR1_SSDC:                // IR2 uses IR1 transfer SDC token
        case TOKEN_IR1_GSDC:                // Adding this for now since we don't have a V2 advanced IR2 code reader to my knowledge
            return true;
 800826e:	2301      	movs	r3, #1
 8008270:	e001      	b.n	8008276 <is_valid_ir2_msg+0x4e>
            break;
        default:
            break;
 8008272:	46c0      	nop			@ (mov r8, r8)
    }
    return false;
 8008274:	2300      	movs	r3, #0
}
 8008276:	0018      	movs	r0, r3
 8008278:	46bd      	mov	sp, r7
 800827a:	b002      	add	sp, #8
 800827c:	bd80      	pop	{r7, pc}
 800827e:	46c0      	nop			@ (mov r8, r8)
 8008280:	003003c1 	.word	0x003003c1

08008284 <is_valid_ir4_msg>:
*               IR4 mode or not.
*  parameters:  uint8_t msg_id: ID of the message received.
*  return:      bool: True if valid
*****************************************************************/
static bool is_valid_ir4_msg( uint8_t msg_id )
{
 8008284:	b580      	push	{r7, lr}
 8008286:	b082      	sub	sp, #8
 8008288:	af00      	add	r7, sp, #0
 800828a:	0002      	movs	r2, r0
 800828c:	1dfb      	adds	r3, r7, #7
 800828e:	701a      	strb	r2, [r3, #0]
    switch(msg_id)
 8008290:	1dfb      	adds	r3, r7, #7
 8008292:	781b      	ldrb	r3, [r3, #0]
 8008294:	2bd4      	cmp	r3, #212	@ 0xd4
 8008296:	d023      	beq.n	80082e0 <is_valid_ir4_msg+0x5c>
 8008298:	dc24      	bgt.n	80082e4 <is_valid_ir4_msg+0x60>
 800829a:	2bb4      	cmp	r3, #180	@ 0xb4
 800829c:	dc22      	bgt.n	80082e4 <is_valid_ir4_msg+0x60>
 800829e:	2ba1      	cmp	r3, #161	@ 0xa1
 80082a0:	da07      	bge.n	80082b2 <is_valid_ir4_msg+0x2e>
 80082a2:	2b12      	cmp	r3, #18
 80082a4:	d01c      	beq.n	80082e0 <is_valid_ir4_msg+0x5c>
 80082a6:	db1d      	blt.n	80082e4 <is_valid_ir4_msg+0x60>
 80082a8:	2b65      	cmp	r3, #101	@ 0x65
 80082aa:	dc1b      	bgt.n	80082e4 <is_valid_ir4_msg+0x60>
 80082ac:	2b4c      	cmp	r3, #76	@ 0x4c
 80082ae:	da0c      	bge.n	80082ca <is_valid_ir4_msg+0x46>
        case TOKEN_IR1_RTL:                    // IR4 starts with IR1 RTL
        case TOKEN_IR1_SSN:                    // IR4 devices still need to acknowledge serialization boxes
            return true;
            break;
        default:
            break;
 80082b0:	e018      	b.n	80082e4 <is_valid_ir4_msg+0x60>
    switch(msg_id)
 80082b2:	3ba1      	subs	r3, #161	@ 0xa1
 80082b4:	4a0e      	ldr	r2, [pc, #56]	@ (80082f0 <is_valid_ir4_msg+0x6c>)
 80082b6:	40da      	lsrs	r2, r3
 80082b8:	0013      	movs	r3, r2
 80082ba:	2201      	movs	r2, #1
 80082bc:	4013      	ands	r3, r2
 80082be:	1e5a      	subs	r2, r3, #1
 80082c0:	4193      	sbcs	r3, r2
 80082c2:	b2db      	uxtb	r3, r3
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d10b      	bne.n	80082e0 <is_valid_ir4_msg+0x5c>
            break;
 80082c8:	e00c      	b.n	80082e4 <is_valid_ir4_msg+0x60>
    switch(msg_id)
 80082ca:	3b4c      	subs	r3, #76	@ 0x4c
 80082cc:	4a09      	ldr	r2, [pc, #36]	@ (80082f4 <is_valid_ir4_msg+0x70>)
 80082ce:	40da      	lsrs	r2, r3
 80082d0:	0013      	movs	r3, r2
 80082d2:	2201      	movs	r2, #1
 80082d4:	4013      	ands	r3, r2
 80082d6:	1e5a      	subs	r2, r3, #1
 80082d8:	4193      	sbcs	r3, r2
 80082da:	b2db      	uxtb	r3, r3
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d001      	beq.n	80082e4 <is_valid_ir4_msg+0x60>
            return true;
 80082e0:	2301      	movs	r3, #1
 80082e2:	e001      	b.n	80082e8 <is_valid_ir4_msg+0x64>
            break;
 80082e4:	46c0      	nop			@ (mov r8, r8)
    }
    return false;
 80082e6:	2300      	movs	r3, #0
}
 80082e8:	0018      	movs	r0, r3
 80082ea:	46bd      	mov	sp, r7
 80082ec:	b002      	add	sp, #8
 80082ee:	bd80      	pop	{r7, pc}
 80082f0:	00090011 	.word	0x00090011
 80082f4:	02040001 	.word	0x02040001

080082f8 <is_valid_ir3_msg>:
*               IR3 mode or not.
*  parameters:  uint8_t msg_id: ID of the message received.
*  return:      bool: True if valid
*****************************************************************/
static bool is_valid_ir3_msg( uint8_t msg_id )
{
 80082f8:	b580      	push	{r7, lr}
 80082fa:	b082      	sub	sp, #8
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	0002      	movs	r2, r0
 8008300:	1dfb      	adds	r3, r7, #7
 8008302:	701a      	strb	r2, [r3, #0]
    switch(msg_id)
 8008304:	1dfb      	adds	r3, r7, #7
 8008306:	781b      	ldrb	r3, [r3, #0]
 8008308:	2bee      	cmp	r3, #238	@ 0xee
 800830a:	d029      	beq.n	8008360 <is_valid_ir3_msg+0x68>
 800830c:	dc2a      	bgt.n	8008364 <is_valid_ir3_msg+0x6c>
 800830e:	2be5      	cmp	r3, #229	@ 0xe5
 8008310:	d026      	beq.n	8008360 <is_valid_ir3_msg+0x68>
 8008312:	dc27      	bgt.n	8008364 <is_valid_ir3_msg+0x6c>
 8008314:	2bba      	cmp	r3, #186	@ 0xba
 8008316:	dc25      	bgt.n	8008364 <is_valid_ir3_msg+0x6c>
 8008318:	2ba3      	cmp	r3, #163	@ 0xa3
 800831a:	da0a      	bge.n	8008332 <is_valid_ir3_msg+0x3a>
 800831c:	2b99      	cmp	r3, #153	@ 0x99
 800831e:	dc21      	bgt.n	8008364 <is_valid_ir3_msg+0x6c>
 8008320:	2b87      	cmp	r3, #135	@ 0x87
 8008322:	da12      	bge.n	800834a <is_valid_ir3_msg+0x52>
 8008324:	2b35      	cmp	r3, #53	@ 0x35
 8008326:	d01b      	beq.n	8008360 <is_valid_ir3_msg+0x68>
 8008328:	db1c      	blt.n	8008364 <is_valid_ir3_msg+0x6c>
 800832a:	3b5a      	subs	r3, #90	@ 0x5a
 800832c:	2b02      	cmp	r3, #2
 800832e:	d819      	bhi.n	8008364 <is_valid_ir3_msg+0x6c>
 8008330:	e016      	b.n	8008360 <is_valid_ir3_msg+0x68>
 8008332:	3ba3      	subs	r3, #163	@ 0xa3
 8008334:	4a0e      	ldr	r2, [pc, #56]	@ (8008370 <is_valid_ir3_msg+0x78>)
 8008336:	40da      	lsrs	r2, r3
 8008338:	0013      	movs	r3, r2
 800833a:	2201      	movs	r2, #1
 800833c:	4013      	ands	r3, r2
 800833e:	1e5a      	subs	r2, r3, #1
 8008340:	4193      	sbcs	r3, r2
 8008342:	b2db      	uxtb	r3, r3
 8008344:	2b00      	cmp	r3, #0
 8008346:	d10b      	bne.n	8008360 <is_valid_ir3_msg+0x68>
        case TOKEN_IR3_INFO:
        case TOKEN_IR3_ARTLA:
            return true;
            break;
        default:
            break;
 8008348:	e00c      	b.n	8008364 <is_valid_ir3_msg+0x6c>
    switch(msg_id)
 800834a:	3b87      	subs	r3, #135	@ 0x87
 800834c:	4a09      	ldr	r2, [pc, #36]	@ (8008374 <is_valid_ir3_msg+0x7c>)
 800834e:	40da      	lsrs	r2, r3
 8008350:	0013      	movs	r3, r2
 8008352:	2201      	movs	r2, #1
 8008354:	4013      	ands	r3, r2
 8008356:	1e5a      	subs	r2, r3, #1
 8008358:	4193      	sbcs	r3, r2
 800835a:	b2db      	uxtb	r3, r3
 800835c:	2b00      	cmp	r3, #0
 800835e:	d001      	beq.n	8008364 <is_valid_ir3_msg+0x6c>
            return true;
 8008360:	2301      	movs	r3, #1
 8008362:	e001      	b.n	8008368 <is_valid_ir3_msg+0x70>
            break;
 8008364:	46c0      	nop			@ (mov r8, r8)
    }
    return false;
 8008366:	2300      	movs	r3, #0
}
 8008368:	0018      	movs	r0, r3
 800836a:	46bd      	mov	sp, r7
 800836c:	b002      	add	sp, #8
 800836e:	bd80      	pop	{r7, pc}
 8008370:	00800105 	.word	0x00800105
 8008374:	00041001 	.word	0x00041001

08008378 <irComms_get_ir_key_packet>:
*               uint8_t rx_byte: Data byte received
*               uint8_t** ir_msg_ptr_ptr: Location to store incoming message data
*  return:      bool: True if a valid message is received
*****************************************************************/
bool irComms_get_ir_key_packet(_ir_comms_ctx_s *ir_comm_ctx, uint32_t time_since_last_rx_msec, bool is_byte_available, uint8_t rx_byte)
{
 8008378:	b590      	push	{r4, r7, lr}
 800837a:	b087      	sub	sp, #28
 800837c:	af00      	add	r7, sp, #0
 800837e:	60f8      	str	r0, [r7, #12]
 8008380:	60b9      	str	r1, [r7, #8]
 8008382:	0019      	movs	r1, r3
 8008384:	1dfb      	adds	r3, r7, #7
 8008386:	701a      	strb	r2, [r3, #0]
 8008388:	1dbb      	adds	r3, r7, #6
 800838a:	1c0a      	adds	r2, r1, #0
 800838c:	701a      	strb	r2, [r3, #0]
    bool return_value                   = false;
 800838e:	2317      	movs	r3, #23
 8008390:	18fb      	adds	r3, r7, r3
 8008392:	2200      	movs	r2, #0
 8008394:	701a      	strb	r2, [r3, #0]

    // if a byte is available
    if (is_byte_available)
 8008396:	1dfb      	adds	r3, r7, #7
 8008398:	781b      	ldrb	r3, [r3, #0]
 800839a:	2b00      	cmp	r3, #0
 800839c:	d06a      	beq.n	8008474 <irComms_get_ir_key_packet+0xfc>
    {
        // save the received byte
        ir_comm_ctx->_buffers.rx_buffer[ir_comm_ctx->_priv_comm_vars.rx_byte_number] = rx_byte;
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	2273      	movs	r2, #115	@ 0x73
 80083a2:	5c9b      	ldrb	r3, [r3, r2]
 80083a4:	0019      	movs	r1, r3
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	2230      	movs	r2, #48	@ 0x30
 80083aa:	185b      	adds	r3, r3, r1
 80083ac:	189b      	adds	r3, r3, r2
 80083ae:	1dba      	adds	r2, r7, #6
 80083b0:	7812      	ldrb	r2, [r2, #0]
 80083b2:	701a      	strb	r2, [r3, #0]

        // if this is the first byte
        if (0 == ir_comm_ctx->_priv_comm_vars.rx_byte_number)
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	2273      	movs	r2, #115	@ 0x73
 80083b8:	5c9b      	ldrb	r3, [r3, r2]
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d120      	bne.n	8008400 <irComms_get_ir_key_packet+0x88>
        {
            // clear the checksum flag
            ir_comm_ctx->_priv_comm_vars.rx_includes_checksum = false;
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	2272      	movs	r2, #114	@ 0x72
 80083c2:	2100      	movs	r1, #0
 80083c4:	5499      	strb	r1, [r3, r2]

            // initialize the byte number as 1
            ir_comm_ctx->_priv_comm_vars.rx_byte_number = 1;
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	2273      	movs	r2, #115	@ 0x73
 80083ca:	2101      	movs	r1, #1
 80083cc:	5499      	strb	r1, [r3, r2]

            // check the token to determine the number of bytes that follow
            ir_comm_ctx->_priv_comm_vars.rx_bytes_expected = parse_bytes_expected( rx_byte, &ir_comm_ctx->_priv_comm_vars.rx_includes_checksum, ir_comm_ctx->ir_mode );
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	3372      	adds	r3, #114	@ 0x72
 80083d2:	0019      	movs	r1, r3
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	789a      	ldrb	r2, [r3, #2]
 80083d8:	1dbb      	adds	r3, r7, #6
 80083da:	781b      	ldrb	r3, [r3, #0]
 80083dc:	0018      	movs	r0, r3
 80083de:	f7ff fd65 	bl	8007eac <parse_bytes_expected>
 80083e2:	0003      	movs	r3, r0
 80083e4:	0019      	movs	r1, r3
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	2271      	movs	r2, #113	@ 0x71
 80083ea:	5499      	strb	r1, [r3, r2]
            if( ir_comm_ctx->_priv_comm_vars.rx_bytes_expected == 0 )
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	2271      	movs	r2, #113	@ 0x71
 80083f0:	5c9b      	ldrb	r3, [r3, r2]
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d145      	bne.n	8008482 <irComms_get_ir_key_packet+0x10a>
            {
                ir_comm_ctx->_priv_comm_vars.rx_byte_number = 0;
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	2273      	movs	r2, #115	@ 0x73
 80083fa:	2100      	movs	r1, #0
 80083fc:	5499      	strb	r1, [r3, r2]
 80083fe:	e040      	b.n	8008482 <irComms_get_ir_key_packet+0x10a>
            }
        } // if (0 == rx_byte_number)
        // else if this is a middle byte (we have received a valid first byte)
        else if ((ir_comm_ctx->_priv_comm_vars.rx_byte_number <= ir_comm_ctx->_priv_comm_vars.rx_bytes_expected) && (ir_comm_ctx->_priv_comm_vars.rx_byte_number > 0))
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	2273      	movs	r2, #115	@ 0x73
 8008404:	5c9a      	ldrb	r2, [r3, r2]
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	2171      	movs	r1, #113	@ 0x71
 800840a:	5c5b      	ldrb	r3, [r3, r1]
 800840c:	429a      	cmp	r2, r3
 800840e:	d838      	bhi.n	8008482 <irComms_get_ir_key_packet+0x10a>
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	2273      	movs	r2, #115	@ 0x73
 8008414:	5c9b      	ldrb	r3, [r3, r2]
 8008416:	2b00      	cmp	r3, #0
 8008418:	d033      	beq.n	8008482 <irComms_get_ir_key_packet+0x10a>
        {
            // save this byte and increment
            ir_comm_ctx->_buffers.rx_buffer[ir_comm_ctx->_priv_comm_vars.rx_byte_number++] = rx_byte;
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	2273      	movs	r2, #115	@ 0x73
 800841e:	5c9b      	ldrb	r3, [r3, r2]
 8008420:	1c5a      	adds	r2, r3, #1
 8008422:	b2d0      	uxtb	r0, r2
 8008424:	68fa      	ldr	r2, [r7, #12]
 8008426:	2173      	movs	r1, #115	@ 0x73
 8008428:	5450      	strb	r0, [r2, r1]
 800842a:	0019      	movs	r1, r3
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	2230      	movs	r2, #48	@ 0x30
 8008430:	185b      	adds	r3, r3, r1
 8008432:	189b      	adds	r3, r3, r2
 8008434:	1dba      	adds	r2, r7, #6
 8008436:	7812      	ldrb	r2, [r2, #0]
 8008438:	701a      	strb	r2, [r3, #0]

            // if the size byte is expected and this is the 2nd byte
            if ((SIZE_BYTE_EXPECTED == ir_comm_ctx->_priv_comm_vars.rx_bytes_expected) && (2 == ir_comm_ctx->_priv_comm_vars.rx_byte_number))
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	2271      	movs	r2, #113	@ 0x71
 800843e:	5c9b      	ldrb	r3, [r3, r2]
 8008440:	2bff      	cmp	r3, #255	@ 0xff
 8008442:	d11e      	bne.n	8008482 <irComms_get_ir_key_packet+0x10a>
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	2273      	movs	r2, #115	@ 0x73
 8008448:	5c9b      	ldrb	r3, [r3, r2]
 800844a:	2b02      	cmp	r3, #2
 800844c:	d119      	bne.n	8008482 <irComms_get_ir_key_packet+0x10a>
            {
                // ensure the size of the incoming data will not overrun the Rx buffer
                // NOTE: this is a bug fix found during investigation of issues found at the Netherlands KPN stores
                //       where the buffer was being overrun to the point where the system state variable was overwritten and corrupt
                if (rx_byte <= IR_MSG_MAX_LENGTH)
 800844e:	1dbb      	adds	r3, r7, #6
 8008450:	781b      	ldrb	r3, [r3, #0]
 8008452:	2b20      	cmp	r3, #32
 8008454:	d805      	bhi.n	8008462 <irComms_get_ir_key_packet+0xea>
                {
                    // set bytes expected equal to this byte
                    ir_comm_ctx->_priv_comm_vars.rx_bytes_expected = rx_byte;
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	1dba      	adds	r2, r7, #6
 800845a:	2171      	movs	r1, #113	@ 0x71
 800845c:	7812      	ldrb	r2, [r2, #0]
 800845e:	545a      	strb	r2, [r3, r1]
 8008460:	e00f      	b.n	8008482 <irComms_get_ir_key_packet+0x10a>
                }
                else
                {
                    // reset the state
                    ir_comm_ctx->_priv_comm_vars.rx_byte_number = 0;
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	2273      	movs	r2, #115	@ 0x73
 8008466:	2100      	movs	r1, #0
 8008468:	5499      	strb	r1, [r3, r2]
                    ir_comm_ctx->_priv_comm_vars.rx_bytes_expected = 0;
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	2271      	movs	r2, #113	@ 0x71
 800846e:	2100      	movs	r1, #0
 8008470:	5499      	strb	r1, [r3, r2]
 8008472:	e006      	b.n	8008482 <irComms_get_ir_key_packet+0x10a>
        }
    }
    else
    {
        // if there is no byte available and timed out
        if (time_since_last_rx_msec >= IR_RX_TIMEOUT_MSEC)
 8008474:	68bb      	ldr	r3, [r7, #8]
 8008476:	2b63      	cmp	r3, #99	@ 0x63
 8008478:	d903      	bls.n	8008482 <irComms_get_ir_key_packet+0x10a>
        {
            /// reset the byte handler to 0
            ir_comm_ctx->_priv_comm_vars.rx_byte_number = 0;
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	2273      	movs	r2, #115	@ 0x73
 800847e:	2100      	movs	r1, #0
 8008480:	5499      	strb	r1, [r3, r2]
        }
    }

    // if we have just received all expected bytes
    if ((ir_comm_ctx->_priv_comm_vars.rx_byte_number == ir_comm_ctx->_priv_comm_vars.rx_bytes_expected) && (ir_comm_ctx->_priv_comm_vars.rx_byte_number > 0))
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	2273      	movs	r2, #115	@ 0x73
 8008486:	5c9a      	ldrb	r2, [r3, r2]
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	2171      	movs	r1, #113	@ 0x71
 800848c:	5c5b      	ldrb	r3, [r3, r1]
 800848e:	429a      	cmp	r2, r3
 8008490:	d140      	bne.n	8008514 <irComms_get_ir_key_packet+0x19c>
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	2273      	movs	r2, #115	@ 0x73
 8008496:	5c9b      	ldrb	r3, [r3, r2]
 8008498:	2b00      	cmp	r3, #0
 800849a:	d03b      	beq.n	8008514 <irComms_get_ir_key_packet+0x19c>
    {
        // if a checksum-enabled IR3 message has been received
        if (ir_comm_ctx->_priv_comm_vars.rx_includes_checksum)
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	2272      	movs	r2, #114	@ 0x72
 80084a0:	5c9b      	ldrb	r3, [r3, r2]
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d01b      	beq.n	80084de <irComms_get_ir_key_packet+0x166>
        {
            /// if the checksum is valid
            if (ir_comm_ctx->_buffers.rx_buffer[ir_comm_ctx->_priv_comm_vars.rx_byte_number-1] == irComms_checksum(ir_comm_ctx->_buffers.rx_buffer, ir_comm_ctx->_priv_comm_vars.rx_byte_number-1))
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	2273      	movs	r2, #115	@ 0x73
 80084aa:	5c9b      	ldrb	r3, [r3, r2]
 80084ac:	3b01      	subs	r3, #1
 80084ae:	68fa      	ldr	r2, [r7, #12]
 80084b0:	2130      	movs	r1, #48	@ 0x30
 80084b2:	18d3      	adds	r3, r2, r3
 80084b4:	185b      	adds	r3, r3, r1
 80084b6:	781c      	ldrb	r4, [r3, #0]
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	3330      	adds	r3, #48	@ 0x30
 80084bc:	001a      	movs	r2, r3
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	2173      	movs	r1, #115	@ 0x73
 80084c2:	5c5b      	ldrb	r3, [r3, r1]
 80084c4:	3b01      	subs	r3, #1
 80084c6:	0019      	movs	r1, r3
 80084c8:	0010      	movs	r0, r2
 80084ca:	f001 fc57 	bl	8009d7c <irComms_checksum>
 80084ce:	0003      	movs	r3, r0
 80084d0:	429c      	cmp	r4, r3
 80084d2:	d108      	bne.n	80084e6 <irComms_get_ir_key_packet+0x16e>
            {
                return_value = true;                                            // notify the application to handle the message
 80084d4:	2317      	movs	r3, #23
 80084d6:	18fb      	adds	r3, r7, r3
 80084d8:	2201      	movs	r2, #1
 80084da:	701a      	strb	r2, [r3, #0]
 80084dc:	e003      	b.n	80084e6 <irComms_get_ir_key_packet+0x16e>
            }
        }
        else
        {
            return_value = true;                                                // notify the application to handle the message
 80084de:	2317      	movs	r3, #23
 80084e0:	18fb      	adds	r3, r7, r3
 80084e2:	2201      	movs	r2, #1
 80084e4:	701a      	strb	r2, [r3, #0]
        }

        // if we have a valid packet (so far), we need to check the TID
        if (return_value)
 80084e6:	2217      	movs	r2, #23
 80084e8:	18bb      	adds	r3, r7, r2
 80084ea:	781b      	ldrb	r3, [r3, #0]
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d00d      	beq.n	800850c <irComms_get_ir_key_packet+0x194>
        {
            return_value = validate_tid( ir_comm_ctx->_buffers.rx_buffer, &ir_comm_ctx->_priv_comm_vars.last_tid, ir_comm_ctx->ir_mode);
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	3330      	adds	r3, #48	@ 0x30
 80084f4:	0018      	movs	r0, r3
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	3370      	adds	r3, #112	@ 0x70
 80084fa:	0019      	movs	r1, r3
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	789b      	ldrb	r3, [r3, #2]
 8008500:	18bc      	adds	r4, r7, r2
 8008502:	001a      	movs	r2, r3
 8008504:	f7ff fd5c 	bl	8007fc0 <validate_tid>
 8008508:	0003      	movs	r3, r0
 800850a:	7023      	strb	r3, [r4, #0]
        }
        // reset the byte number to 0 to prepare for the next message
        ir_comm_ctx->_priv_comm_vars.rx_byte_number = 0;
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	2273      	movs	r2, #115	@ 0x73
 8008510:	2100      	movs	r1, #0
 8008512:	5499      	strb	r1, [r3, r2]
    }

    // if we have fully received a valid packet, next check if its valid per our set protocol mode
    if (return_value)
 8008514:	2117      	movs	r1, #23
 8008516:	187b      	adds	r3, r7, r1
 8008518:	781b      	ldrb	r3, [r3, #0]
 800851a:	2b00      	cmp	r3, #0
 800851c:	d03d      	beq.n	800859a <irComms_get_ir_key_packet+0x222>
    {
        if (ir_comm_ctx->ir_mode == IR2_MODE )
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	789b      	ldrb	r3, [r3, #2]
 8008522:	2b02      	cmp	r3, #2
 8008524:	d109      	bne.n	800853a <irComms_get_ir_key_packet+0x1c2>
        {
            return_value = is_valid_ir2_msg(ir_comm_ctx->_buffers.rx_buffer[0]);
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	2230      	movs	r2, #48	@ 0x30
 800852a:	5c9b      	ldrb	r3, [r3, r2]
 800852c:	187c      	adds	r4, r7, r1
 800852e:	0018      	movs	r0, r3
 8008530:	f7ff fe7a 	bl	8008228 <is_valid_ir2_msg>
 8008534:	0003      	movs	r3, r0
 8008536:	7023      	strb	r3, [r4, #0]
 8008538:	e02f      	b.n	800859a <irComms_get_ir_key_packet+0x222>
        }
        else if (ir_comm_ctx->ir_mode == IR3_MODE )                                                // if we are in IR3 mode, IR1 messages are ignored
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	789b      	ldrb	r3, [r3, #2]
 800853e:	2b03      	cmp	r3, #3
 8008540:	d10a      	bne.n	8008558 <irComms_get_ir_key_packet+0x1e0>
        {
            return_value = is_valid_ir3_msg(ir_comm_ctx->_buffers.rx_buffer[0]);
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	2230      	movs	r2, #48	@ 0x30
 8008546:	5c9b      	ldrb	r3, [r3, r2]
 8008548:	2217      	movs	r2, #23
 800854a:	18bc      	adds	r4, r7, r2
 800854c:	0018      	movs	r0, r3
 800854e:	f7ff fed3 	bl	80082f8 <is_valid_ir3_msg>
 8008552:	0003      	movs	r3, r0
 8008554:	7023      	strb	r3, [r4, #0]
 8008556:	e020      	b.n	800859a <irComms_get_ir_key_packet+0x222>
        }
        else if ( (ir_comm_ctx->ir_mode == IR4_NON_LIVE_ACCESS_MODE) || (ir_comm_ctx->ir_mode == IR4_LIVE_ACCESS_MODE) || ( ir_comm_ctx->ir_mode == IR4_DUAL_KEY_MODE ) )
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	789b      	ldrb	r3, [r3, #2]
 800855c:	2b06      	cmp	r3, #6
 800855e:	d007      	beq.n	8008570 <irComms_get_ir_key_packet+0x1f8>
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	789b      	ldrb	r3, [r3, #2]
 8008564:	2b04      	cmp	r3, #4
 8008566:	d003      	beq.n	8008570 <irComms_get_ir_key_packet+0x1f8>
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	789b      	ldrb	r3, [r3, #2]
 800856c:	2b05      	cmp	r3, #5
 800856e:	d10a      	bne.n	8008586 <irComms_get_ir_key_packet+0x20e>
        {
            return_value = is_valid_ir4_msg(ir_comm_ctx->_buffers.rx_buffer[0]);
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	2230      	movs	r2, #48	@ 0x30
 8008574:	5c9b      	ldrb	r3, [r3, r2]
 8008576:	2217      	movs	r2, #23
 8008578:	18bc      	adds	r4, r7, r2
 800857a:	0018      	movs	r0, r3
 800857c:	f7ff fe82 	bl	8008284 <is_valid_ir4_msg>
 8008580:	0003      	movs	r3, r0
 8008582:	7023      	strb	r3, [r4, #0]
 8008584:	e009      	b.n	800859a <irComms_get_ir_key_packet+0x222>
        }
        else    // This will handle UNUSED_IR_MODE and IR1_MODE
        {
            return_value = is_valid_ir1_msg(ir_comm_ctx->_buffers.rx_buffer[0]);
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	2230      	movs	r2, #48	@ 0x30
 800858a:	5c9b      	ldrb	r3, [r3, r2]
 800858c:	2217      	movs	r2, #23
 800858e:	18bc      	adds	r4, r7, r2
 8008590:	0018      	movs	r0, r3
 8008592:	f7ff fe1d 	bl	80081d0 <is_valid_ir1_msg>
 8008596:	0003      	movs	r3, r0
 8008598:	7023      	strb	r3, [r4, #0]
        }
    }
    return return_value;
 800859a:	2317      	movs	r3, #23
 800859c:	18fb      	adds	r3, r7, r3
 800859e:	781b      	ldrb	r3, [r3, #0]
}
 80085a0:	0018      	movs	r0, r3
 80085a2:	46bd      	mov	sp, r7
 80085a4:	b007      	add	sp, #28
 80085a6:	bd90      	pop	{r4, r7, pc}

080085a8 <irComms_handle_ir_key_message>:
*  parameters:  _ir_comms_ctx_s *ir_comm_ctx: IR Comms Context
*               _ir_comms_output_s *output: Structure containing outputs for the user application to act on (data change)
*  return:      uint32_t: Bytes to send
*****************************************************************/
uint32_t irComms_handle_ir_key_message(_ir_comms_ctx_s *ir_comm_ctx, _ir_comms_output_s *output )
{
 80085a8:	b5b0      	push	{r4, r5, r7, lr}
 80085aa:	b08e      	sub	sp, #56	@ 0x38
 80085ac:	af02      	add	r7, sp, #8
 80085ae:	6078      	str	r0, [r7, #4]
 80085b0:	6039      	str	r1, [r7, #0]
    uint8_t legacy_code_reader_data[9];
    uint32_t IR4_dualAuth_currentTime;
    uint16_t fletcher_csum = 0;
 80085b2:	2324      	movs	r3, #36	@ 0x24
 80085b4:	18fb      	adds	r3, r7, r3
 80085b6:	2200      	movs	r2, #0
 80085b8:	801a      	strh	r2, [r3, #0]
    uint8_t IR2_IR4_Status;														// Locked/Unlocked/Self-locking/etc
    uint8_t IR2_IR4_DeviceState;												// Busy/Okay/Error
    uint8_t IR2_IR4_Error;														// Timeout/Wrong-SDC/etc
    uint32_t byte_num_transmit  = 0;
 80085ba:	2300      	movs	r3, #0
 80085bc:	60bb      	str	r3, [r7, #8]
    uint32_t string_index;
    uint32_t getter_loop;
    ir3_public_getter_e getter_token;
#else
    // use these to avoid compiler warnings about not using them
    if(0==ir_comm_ctx->callbacks.fill_in_IR3_blob)
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d102      	bne.n	80085cc <irComms_handle_ir_key_message+0x24>
    {
        ir_comm_ctx->callbacks.fill_in_IR3_blob = (void*)0;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	2200      	movs	r2, #0
 80085ca:	679a      	str	r2, [r3, #120]	@ 0x78
    }
//    ir_comm_ctx->fw_version_ptr++;
#endif
    memset( output, 0, sizeof(_ir_comms_output_s));
 80085cc:	683b      	ldr	r3, [r7, #0]
 80085ce:	2216      	movs	r2, #22
 80085d0:	2100      	movs	r1, #0
 80085d2:	0018      	movs	r0, r3
 80085d4:	f001 fd5e 	bl	800a094 <memset>

    // Compatibility check: If ir_mode is set to unused, move it to IR1
    if( ir_comm_ctx->ir_mode == UNUSED_IR_MODE)
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	789b      	ldrb	r3, [r3, #2]
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d105      	bne.n	80085ec <irComms_handle_ir_key_message+0x44>
    {
        ir_comm_ctx->ir_mode = IR1_MODE;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	2201      	movs	r2, #1
 80085e4:	709a      	strb	r2, [r3, #2]
        output->data_changed.irMode = true;
 80085e6:	683b      	ldr	r3, [r7, #0]
 80085e8:	2201      	movs	r2, #1
 80085ea:	709a      	strb	r2, [r3, #2]
    }

    /// handle the message immediately
    switch(ir_comm_ctx->_buffers.rx_buffer[0])
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	2230      	movs	r2, #48	@ 0x30
 80085f0:	5c9b      	ldrb	r3, [r3, r2]
 80085f2:	2b12      	cmp	r3, #18
 80085f4:	d100      	bne.n	80085f8 <irComms_handle_ir_key_message+0x50>
 80085f6:	e17a      	b.n	80088ee <irComms_handle_ir_key_message+0x346>
 80085f8:	da01      	bge.n	80085fe <irComms_handle_ir_key_message+0x56>
 80085fa:	f001 fa97 	bl	8009b2c <irComms_handle_ir_key_message+0x1584>
 80085fe:	2bee      	cmp	r3, #238	@ 0xee
 8008600:	dd01      	ble.n	8008606 <irComms_handle_ir_key_message+0x5e>
 8008602:	f001 fa93 	bl	8009b2c <irComms_handle_ir_key_message+0x1584>
 8008606:	2b3f      	cmp	r3, #63	@ 0x3f
 8008608:	da01      	bge.n	800860e <irComms_handle_ir_key_message+0x66>
 800860a:	f001 fa8f 	bl	8009b2c <irComms_handle_ir_key_message+0x1584>
 800860e:	3b3f      	subs	r3, #63	@ 0x3f
 8008610:	2baf      	cmp	r3, #175	@ 0xaf
 8008612:	d901      	bls.n	8008618 <irComms_handle_ir_key_message+0x70>
 8008614:	f001 fa8a 	bl	8009b2c <irComms_handle_ir_key_message+0x1584>
 8008618:	009a      	lsls	r2, r3, #2
 800861a:	4bd3      	ldr	r3, [pc, #844]	@ (8008968 <irComms_handle_ir_key_message+0x3c0>)
 800861c:	18d3      	adds	r3, r2, r3
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	469f      	mov	pc, r3
    {
    case TOKEN_CT_WIPE:
        if( ir_comm_ctx->ct_wipe_supported )
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	222d      	movs	r2, #45	@ 0x2d
 8008626:	5c9b      	ldrb	r3, [r3, r2]
 8008628:	2b00      	cmp	r3, #0
 800862a:	d018      	beq.n	800865e <irComms_handle_ir_key_message+0xb6>
        {
            // if our SDC is non-zero, and we were waiting for a Wipe command
            if (((ir_comm_ctx->sdc[0] != 0) || (ir_comm_ctx->sdc[1] != 0) || (ir_comm_ctx->sdc[2] != 0)) &&
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	791b      	ldrb	r3, [r3, #4]
 8008630:	2b00      	cmp	r3, #0
 8008632:	d109      	bne.n	8008648 <irComms_handle_ir_key_message+0xa0>
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	795b      	ldrb	r3, [r3, #5]
 8008638:	2b00      	cmp	r3, #0
 800863a:	d105      	bne.n	8008648 <irComms_handle_ir_key_message+0xa0>
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	799b      	ldrb	r3, [r3, #6]
 8008640:	2b00      	cmp	r3, #0
 8008642:	d101      	bne.n	8008648 <irComms_handle_ir_key_message+0xa0>
 8008644:	f001 fa7c 	bl	8009b40 <irComms_handle_ir_key_message+0x1598>
                (ir_comm_ctx->waiting_for_TOKEN_CT_WIPE_timeout_msec > 0))
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	7c9b      	ldrb	r3, [r3, #18]
            if (((ir_comm_ctx->sdc[0] != 0) || (ir_comm_ctx->sdc[1] != 0) || (ir_comm_ctx->sdc[2] != 0)) &&
 800864c:	2b00      	cmp	r3, #0
 800864e:	d101      	bne.n	8008654 <irComms_handle_ir_key_message+0xac>
 8008650:	f001 fa76 	bl	8009b40 <irComms_handle_ir_key_message+0x1598>
            {
                ValidIRKeySeen = IR_KEY_MAGIC;
 8008654:	4bc5      	ldr	r3, [pc, #788]	@ (800896c <irComms_handle_ir_key_message+0x3c4>)
 8008656:	2202      	movs	r2, #2
 8008658:	701a      	strb	r2, [r3, #0]
        }
        else
        {
            ir_comm_ctx->waiting_for_TOKEN_CT_WIPE_timeout_msec = 0; /* zero in all cases except when valid SDC is received */
        }
        break;
 800865a:	f001 fa71 	bl	8009b40 <irComms_handle_ir_key_message+0x1598>
            ir_comm_ctx->waiting_for_TOKEN_CT_WIPE_timeout_msec = 0; /* zero in all cases except when valid SDC is received */
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	2200      	movs	r2, #0
 8008662:	749a      	strb	r2, [r3, #18]
        break;
 8008664:	f001 fa6c 	bl	8009b40 <irComms_handle_ir_key_message+0x1598>
    case TOKEN_IR1_RTL:
        memset((uint8_t*)output->key_sn, 0, DEVICE_SN_BYTES);                             // new key, so discard the sn of the previous key
 8008668:	683b      	ldr	r3, [r7, #0]
 800866a:	330c      	adds	r3, #12
 800866c:	2208      	movs	r2, #8
 800866e:	2100      	movs	r1, #0
 8008670:	0018      	movs	r0, r3
 8008672:	f001 fd0f 	bl	800a094 <memset>
        output->rtl_received = true;                                            // set a flag indicating an RTL has been received
 8008676:	683b      	ldr	r3, [r7, #0]
 8008678:	2201      	movs	r2, #1
 800867a:	71da      	strb	r2, [r3, #7]
        if( ir_comm_ctx->ir_mode == IR1_MODE || ir_comm_ctx->ir_mode == IR3_MODE )
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	789b      	ldrb	r3, [r3, #2]
 8008680:	2b01      	cmp	r3, #1
 8008682:	d003      	beq.n	800868c <irComms_handle_ir_key_message+0xe4>
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	789b      	ldrb	r3, [r3, #2]
 8008688:	2b03      	cmp	r3, #3
 800868a:	d11c      	bne.n	80086c6 <irComms_handle_ir_key_message+0x11e>
        {
            ir_comm_ctx->waiting_for_TOKEN_CT_WIPE_timeout_msec = 0; /* zero in all cases except when valid SDC is received */
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	2200      	movs	r2, #0
 8008690:	749a      	strb	r2, [r3, #18]
            ir_comm_ctx->_buffers.tx_buffer[0] = (uint8_t)TOKEN_IR1_ACK;
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	2250      	movs	r2, #80	@ 0x50
 8008696:	2141      	movs	r1, #65	@ 0x41
 8008698:	5499      	strb	r1, [r3, r2]
            ir_comm_ctx->_buffers.tx_buffer[1] = COM_ID_G4AU;
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	2251      	movs	r2, #81	@ 0x51
 800869e:	2103      	movs	r1, #3
 80086a0:	5499      	strb	r1, [r3, r2]
            ir_comm_ctx->_buffers.tx_buffer[2] = ir_comm_ctx->_buffers.rx_buffer[1] + 1;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	2231      	movs	r2, #49	@ 0x31
 80086a6:	5c9b      	ldrb	r3, [r3, r2]
 80086a8:	3301      	adds	r3, #1
 80086aa:	b2d9      	uxtb	r1, r3
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	2252      	movs	r2, #82	@ 0x52
 80086b0:	5499      	strb	r1, [r3, r2]
            ir_comm_ctx->_priv_comm_vars.last_tid = ir_comm_ctx->_buffers.tx_buffer[2];
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	2252      	movs	r2, #82	@ 0x52
 80086b6:	5c99      	ldrb	r1, [r3, r2]
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	2270      	movs	r2, #112	@ 0x70
 80086bc:	5499      	strb	r1, [r3, r2]
            byte_num_transmit = 3;
 80086be:	2303      	movs	r3, #3
 80086c0:	60bb      	str	r3, [r7, #8]
                ir_comm_ctx->_buffers.tx_buffer[1] = ir_comm_ctx->_buffers.rx_buffer[Ir4TwoByteMsgTidIndx] + 1;
                ir_comm_ctx->_priv_comm_vars.last_tid = ir_comm_ctx->_buffers.tx_buffer[1];
                byte_num_transmit = 2;
            }
        }
        break;
 80086c2:	f001 fa48 	bl	8009b56 <irComms_handle_ir_key_message+0x15ae>
            if(ir_comm_ctx->is_my_sn_blank == false)
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	222e      	movs	r2, #46	@ 0x2e
 80086ca:	5c9b      	ldrb	r3, [r3, r2]
 80086cc:	2201      	movs	r2, #1
 80086ce:	4053      	eors	r3, r2
 80086d0:	b2db      	uxtb	r3, r3
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d100      	bne.n	80086d8 <irComms_handle_ir_key_message+0x130>
 80086d6:	e0eb      	b.n	80088b0 <irComms_handle_ir_key_message+0x308>
                if( ir_comm_ctx->ir_mode == IR2_MODE )
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	789b      	ldrb	r3, [r3, #2]
 80086dc:	2b02      	cmp	r3, #2
 80086de:	d141      	bne.n	8008764 <irComms_handle_ir_key_message+0x1bc>
                    ir_comm_ctx->waiting_for_TOKEN_CT_WIPE_timeout_msec = 0; /* zero in all cases except when valid SDC is received */
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	2200      	movs	r2, #0
 80086e4:	749a      	strb	r2, [r3, #18]
                    ir_comm_ctx->_buffers.tx_buffer[0] = (uint8_t)TOKEN_IR2_AACK;
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	2250      	movs	r2, #80	@ 0x50
 80086ea:	21be      	movs	r1, #190	@ 0xbe
 80086ec:	5499      	strb	r1, [r3, r2]
                    ir_comm_ctx->_buffers.tx_buffer[1] = ir_comm_ctx->my_sn[0];    // Product ID MSB
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	7a19      	ldrb	r1, [r3, #8]
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	2251      	movs	r2, #81	@ 0x51
 80086f6:	5499      	strb	r1, [r3, r2]
                    ir_comm_ctx->_buffers.tx_buffer[2] = ir_comm_ctx->my_sn[1];    // Product ID LSB
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	7a59      	ldrb	r1, [r3, #9]
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	2252      	movs	r2, #82	@ 0x52
 8008700:	5499      	strb	r1, [r3, r2]
                    ir_comm_ctx->_buffers.tx_buffer[3] = ir_comm_ctx->my_sn[2];    // Serial MSB
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	7a99      	ldrb	r1, [r3, #10]
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	2253      	movs	r2, #83	@ 0x53
 800870a:	5499      	strb	r1, [r3, r2]
                    ir_comm_ctx->_buffers.tx_buffer[4] = ir_comm_ctx->my_sn[3];
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	7ad9      	ldrb	r1, [r3, #11]
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	2254      	movs	r2, #84	@ 0x54
 8008714:	5499      	strb	r1, [r3, r2]
                    ir_comm_ctx->_buffers.tx_buffer[5] = ir_comm_ctx->my_sn[4];
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	7b19      	ldrb	r1, [r3, #12]
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	2255      	movs	r2, #85	@ 0x55
 800871e:	5499      	strb	r1, [r3, r2]
                    ir_comm_ctx->_buffers.tx_buffer[6] = ir_comm_ctx->my_sn[5];    // Serial LSB
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	7b59      	ldrb	r1, [r3, #13]
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	2256      	movs	r2, #86	@ 0x56
 8008728:	5499      	strb	r1, [r3, r2]
                    ir_comm_ctx->_buffers.tx_buffer[7] = ir_comm_ctx->_buffers.rx_buffer[1] + 1;
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	2231      	movs	r2, #49	@ 0x31
 800872e:	5c9b      	ldrb	r3, [r3, r2]
 8008730:	3301      	adds	r3, #1
 8008732:	b2d9      	uxtb	r1, r3
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	2257      	movs	r2, #87	@ 0x57
 8008738:	5499      	strb	r1, [r3, r2]
                    ir_comm_ctx->_priv_comm_vars.last_tid = ir_comm_ctx->_buffers.tx_buffer[7];
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	2257      	movs	r2, #87	@ 0x57
 800873e:	5c99      	ldrb	r1, [r3, r2]
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	2270      	movs	r2, #112	@ 0x70
 8008744:	5499      	strb	r1, [r3, r2]
                    ir_comm_ctx->_buffers.tx_buffer[8] = irComms_checksum( ir_comm_ctx->_buffers.tx_buffer, 8);
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	3350      	adds	r3, #80	@ 0x50
 800874a:	2108      	movs	r1, #8
 800874c:	0018      	movs	r0, r3
 800874e:	f001 fb15 	bl	8009d7c <irComms_checksum>
 8008752:	0003      	movs	r3, r0
 8008754:	0019      	movs	r1, r3
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	2258      	movs	r2, #88	@ 0x58
 800875a:	5499      	strb	r1, [r3, r2]
                    byte_num_transmit = 9;
 800875c:	2309      	movs	r3, #9
 800875e:	60bb      	str	r3, [r7, #8]
        break;
 8008760:	f001 f9f9 	bl	8009b56 <irComms_handle_ir_key_message+0x15ae>
                    ir_comm_ctx->_buffers.tx_buffer[0] = (uint8_t)TOKEN_IR4_SN;
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	2250      	movs	r2, #80	@ 0x50
 8008768:	21b4      	movs	r1, #180	@ 0xb4
 800876a:	5499      	strb	r1, [r3, r2]
                    ir_comm_ctx->_buffers.tx_buffer[1] = ir_comm_ctx->my_sn[0];
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	7a19      	ldrb	r1, [r3, #8]
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	2251      	movs	r2, #81	@ 0x51
 8008774:	5499      	strb	r1, [r3, r2]
                    ir_comm_ctx->_buffers.tx_buffer[2] = ir_comm_ctx->my_sn[1];
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	7a59      	ldrb	r1, [r3, #9]
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	2252      	movs	r2, #82	@ 0x52
 800877e:	5499      	strb	r1, [r3, r2]
                    ir_comm_ctx->_buffers.tx_buffer[3] = ir_comm_ctx->my_sn[2];
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	7a99      	ldrb	r1, [r3, #10]
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	2253      	movs	r2, #83	@ 0x53
 8008788:	5499      	strb	r1, [r3, r2]
                    ir_comm_ctx->_buffers.tx_buffer[4] = ir_comm_ctx->my_sn[3];
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	7ad9      	ldrb	r1, [r3, #11]
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	2254      	movs	r2, #84	@ 0x54
 8008792:	5499      	strb	r1, [r3, r2]
                    ir_comm_ctx->_buffers.tx_buffer[5] = ir_comm_ctx->my_sn[4];
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	7b19      	ldrb	r1, [r3, #12]
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	2255      	movs	r2, #85	@ 0x55
 800879c:	5499      	strb	r1, [r3, r2]
                    ir_comm_ctx->_buffers.tx_buffer[6] = ir_comm_ctx->my_sn[5];
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	7b59      	ldrb	r1, [r3, #13]
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	2256      	movs	r2, #86	@ 0x56
 80087a6:	5499      	strb	r1, [r3, r2]
                    uint8_t tx_msg_index = 7;
 80087a8:	242e      	movs	r4, #46	@ 0x2e
 80087aa:	193b      	adds	r3, r7, r4
 80087ac:	2207      	movs	r2, #7
 80087ae:	701a      	strb	r2, [r3, #0]
                    if( ir_comm_ctx->IR4_8byte_SN)
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	7c1b      	ldrb	r3, [r3, #16]
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d01f      	beq.n	80087f8 <irComms_handle_ir_key_message+0x250>
                    	ir_comm_ctx->_buffers.tx_buffer[0] = (uint8_t)TOKEN_IR4_SN_8_BYTE;	// Change the Token
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	2250      	movs	r2, #80	@ 0x50
 80087bc:	21b5      	movs	r1, #181	@ 0xb5
 80087be:	5499      	strb	r1, [r3, r2]
                        ir_comm_ctx->_buffers.tx_buffer[tx_msg_index++] = ir_comm_ctx->my_sn[6];
 80087c0:	193b      	adds	r3, r7, r4
 80087c2:	781b      	ldrb	r3, [r3, #0]
 80087c4:	193a      	adds	r2, r7, r4
 80087c6:	1c59      	adds	r1, r3, #1
 80087c8:	7011      	strb	r1, [r2, #0]
 80087ca:	0018      	movs	r0, r3
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	7b99      	ldrb	r1, [r3, #14]
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	2250      	movs	r2, #80	@ 0x50
 80087d4:	181b      	adds	r3, r3, r0
 80087d6:	189b      	adds	r3, r3, r2
 80087d8:	1c0a      	adds	r2, r1, #0
 80087da:	701a      	strb	r2, [r3, #0]
                        ir_comm_ctx->_buffers.tx_buffer[tx_msg_index++] = ir_comm_ctx->my_sn[7];
 80087dc:	193b      	adds	r3, r7, r4
 80087de:	781b      	ldrb	r3, [r3, #0]
 80087e0:	193a      	adds	r2, r7, r4
 80087e2:	1c59      	adds	r1, r3, #1
 80087e4:	7011      	strb	r1, [r2, #0]
 80087e6:	0018      	movs	r0, r3
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	7bd9      	ldrb	r1, [r3, #15]
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	2250      	movs	r2, #80	@ 0x50
 80087f0:	181b      	adds	r3, r3, r0
 80087f2:	189b      	adds	r3, r3, r2
 80087f4:	1c0a      	adds	r2, r1, #0
 80087f6:	701a      	strb	r2, [r3, #0]
                    if(ir_comm_ctx->callbacks.get_IR4_info)
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	2288      	movs	r2, #136	@ 0x88
 80087fc:	589b      	ldr	r3, [r3, r2]
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d00f      	beq.n	8008822 <irComms_handle_ir_key_message+0x27a>
                        ir_comm_ctx->callbacks.get_IR4_info(&ir_comm_ctx->_buffers.tx_buffer[tx_msg_index++], NULL);
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	2288      	movs	r2, #136	@ 0x88
 8008806:	589a      	ldr	r2, [r3, r2]
 8008808:	212e      	movs	r1, #46	@ 0x2e
 800880a:	187b      	adds	r3, r7, r1
 800880c:	781b      	ldrb	r3, [r3, #0]
 800880e:	1879      	adds	r1, r7, r1
 8008810:	1c58      	adds	r0, r3, #1
 8008812:	7008      	strb	r0, [r1, #0]
 8008814:	3350      	adds	r3, #80	@ 0x50
 8008816:	6879      	ldr	r1, [r7, #4]
 8008818:	18cb      	adds	r3, r1, r3
 800881a:	2100      	movs	r1, #0
 800881c:	0018      	movs	r0, r3
 800881e:	4790      	blx	r2
 8008820:	e00c      	b.n	800883c <irComms_handle_ir_key_message+0x294>
                        ir_comm_ctx->_buffers.tx_buffer[tx_msg_index++] = IR4_LOCK_UNLOCKED;
 8008822:	222e      	movs	r2, #46	@ 0x2e
 8008824:	18bb      	adds	r3, r7, r2
 8008826:	781b      	ldrb	r3, [r3, #0]
 8008828:	18ba      	adds	r2, r7, r2
 800882a:	1c59      	adds	r1, r3, #1
 800882c:	7011      	strb	r1, [r2, #0]
 800882e:	0019      	movs	r1, r3
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	2250      	movs	r2, #80	@ 0x50
 8008834:	185b      	adds	r3, r3, r1
 8008836:	189b      	adds	r3, r3, r2
 8008838:	2202      	movs	r2, #2
 800883a:	701a      	strb	r2, [r3, #0]
                    ir_comm_ctx->_buffers.tx_buffer[tx_msg_index] = ir_comm_ctx->_buffers.rx_buffer[1] + 1;
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	2231      	movs	r2, #49	@ 0x31
 8008840:	5c9a      	ldrb	r2, [r3, r2]
 8008842:	242e      	movs	r4, #46	@ 0x2e
 8008844:	193b      	adds	r3, r7, r4
 8008846:	781b      	ldrb	r3, [r3, #0]
 8008848:	3201      	adds	r2, #1
 800884a:	b2d0      	uxtb	r0, r2
 800884c:	687a      	ldr	r2, [r7, #4]
 800884e:	2150      	movs	r1, #80	@ 0x50
 8008850:	18d3      	adds	r3, r2, r3
 8008852:	185b      	adds	r3, r3, r1
 8008854:	1c02      	adds	r2, r0, #0
 8008856:	701a      	strb	r2, [r3, #0]
                    ir_comm_ctx->_priv_comm_vars.last_tid = ir_comm_ctx->_buffers.tx_buffer[tx_msg_index];
 8008858:	193b      	adds	r3, r7, r4
 800885a:	781b      	ldrb	r3, [r3, #0]
 800885c:	687a      	ldr	r2, [r7, #4]
 800885e:	2150      	movs	r1, #80	@ 0x50
 8008860:	18d3      	adds	r3, r2, r3
 8008862:	185b      	adds	r3, r3, r1
 8008864:	7819      	ldrb	r1, [r3, #0]
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	2270      	movs	r2, #112	@ 0x70
 800886a:	5499      	strb	r1, [r3, r2]
                    tx_msg_index++;
 800886c:	193b      	adds	r3, r7, r4
 800886e:	781a      	ldrb	r2, [r3, #0]
 8008870:	0025      	movs	r5, r4
 8008872:	193b      	adds	r3, r7, r4
 8008874:	3201      	adds	r2, #1
 8008876:	701a      	strb	r2, [r3, #0]
                    ir_comm_ctx->_buffers.tx_buffer[tx_msg_index] = irComms_checksum( ir_comm_ctx->_buffers.tx_buffer, tx_msg_index /*Should be 9 or 11 here*/);
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	3350      	adds	r3, #80	@ 0x50
 800887c:	001a      	movs	r2, r3
 800887e:	197b      	adds	r3, r7, r5
 8008880:	7819      	ldrb	r1, [r3, #0]
 8008882:	197b      	adds	r3, r7, r5
 8008884:	781c      	ldrb	r4, [r3, #0]
 8008886:	0010      	movs	r0, r2
 8008888:	f001 fa78 	bl	8009d7c <irComms_checksum>
 800888c:	0003      	movs	r3, r0
 800888e:	0019      	movs	r1, r3
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	2250      	movs	r2, #80	@ 0x50
 8008894:	191b      	adds	r3, r3, r4
 8008896:	189b      	adds	r3, r3, r2
 8008898:	1c0a      	adds	r2, r1, #0
 800889a:	701a      	strb	r2, [r3, #0]
                    byte_num_transmit = ++tx_msg_index;
 800889c:	197b      	adds	r3, r7, r5
 800889e:	197a      	adds	r2, r7, r5
 80088a0:	7812      	ldrb	r2, [r2, #0]
 80088a2:	3201      	adds	r2, #1
 80088a4:	701a      	strb	r2, [r3, #0]
 80088a6:	197b      	adds	r3, r7, r5
 80088a8:	781b      	ldrb	r3, [r3, #0]
 80088aa:	60bb      	str	r3, [r7, #8]
        break;
 80088ac:	f001 f953 	bl	8009b56 <irComms_handle_ir_key_message+0x15ae>
                if( ir_comm_ctx->ir_mode == IR2_MODE )
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	789b      	ldrb	r3, [r3, #2]
 80088b4:	2b02      	cmp	r3, #2
 80088b6:	d104      	bne.n	80088c2 <irComms_handle_ir_key_message+0x31a>
                    ir_comm_ctx->_buffers.tx_buffer[0] = (uint8_t)TOKEN_IR1_NACK;
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	2250      	movs	r2, #80	@ 0x50
 80088bc:	214e      	movs	r1, #78	@ 0x4e
 80088be:	5499      	strb	r1, [r3, r2]
 80088c0:	e003      	b.n	80088ca <irComms_handle_ir_key_message+0x322>
                    ir_comm_ctx->_buffers.tx_buffer[0] = (uint8_t)TOKEN_IR3_AACK_IR4_NACK;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	2250      	movs	r2, #80	@ 0x50
 80088c6:	21a5      	movs	r1, #165	@ 0xa5
 80088c8:	5499      	strb	r1, [r3, r2]
                ir_comm_ctx->_buffers.tx_buffer[1] = ir_comm_ctx->_buffers.rx_buffer[Ir4TwoByteMsgTidIndx] + 1;
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	2231      	movs	r2, #49	@ 0x31
 80088ce:	5c9b      	ldrb	r3, [r3, r2]
 80088d0:	3301      	adds	r3, #1
 80088d2:	b2d9      	uxtb	r1, r3
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	2251      	movs	r2, #81	@ 0x51
 80088d8:	5499      	strb	r1, [r3, r2]
                ir_comm_ctx->_priv_comm_vars.last_tid = ir_comm_ctx->_buffers.tx_buffer[1];
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	2251      	movs	r2, #81	@ 0x51
 80088de:	5c99      	ldrb	r1, [r3, r2]
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	2270      	movs	r2, #112	@ 0x70
 80088e4:	5499      	strb	r1, [r3, r2]
                byte_num_transmit = 2;
 80088e6:	2302      	movs	r3, #2
 80088e8:	60bb      	str	r3, [r7, #8]
        break;
 80088ea:	f001 f934 	bl	8009b56 <irComms_handle_ir_key_message+0x15ae>
    case TOKEN_IR1_SSN:
        ir_comm_ctx->waiting_for_TOKEN_CT_WIPE_timeout_msec = 0; /* zero in all cases except when valid SDC is received */
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	2200      	movs	r2, #0
 80088f2:	749a      	strb	r2, [r3, #18]

        // first, verify the CRC of the TOKEN, VERSION and 8 byte serial number (10 bytes)
        fletcher_csum = irComms_calc_SN_Checksum(ir_comm_ctx->_buffers.rx_buffer, 9); /* note that the 2nd parameters is max index, not byte count */
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	3330      	adds	r3, #48	@ 0x30
 80088f8:	2524      	movs	r5, #36	@ 0x24
 80088fa:	197c      	adds	r4, r7, r5
 80088fc:	2109      	movs	r1, #9
 80088fe:	0018      	movs	r0, r3
 8008900:	f001 fb49 	bl	8009f96 <irComms_calc_SN_Checksum>
 8008904:	0003      	movs	r3, r0
 8008906:	8023      	strh	r3, [r4, #0]

        // if the CRC is valid
        if ((ir_comm_ctx->_buffers.rx_buffer[10] == (uint8_t)(fletcher_csum >> 8)) && (ir_comm_ctx->_buffers.rx_buffer[11] == (uint8_t)(fletcher_csum & 0xFF)))
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	223a      	movs	r2, #58	@ 0x3a
 800890c:	5c9a      	ldrb	r2, [r3, r2]
 800890e:	0029      	movs	r1, r5
 8008910:	187b      	adds	r3, r7, r1
 8008912:	881b      	ldrh	r3, [r3, #0]
 8008914:	0a1b      	lsrs	r3, r3, #8
 8008916:	b29b      	uxth	r3, r3
 8008918:	b2db      	uxtb	r3, r3
 800891a:	429a      	cmp	r2, r3
 800891c:	d001      	beq.n	8008922 <irComms_handle_ir_key_message+0x37a>
 800891e:	f001 f911 	bl	8009b44 <irComms_handle_ir_key_message+0x159c>
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	223b      	movs	r2, #59	@ 0x3b
 8008926:	5c9a      	ldrb	r2, [r3, r2]
 8008928:	187b      	adds	r3, r7, r1
 800892a:	881b      	ldrh	r3, [r3, #0]
 800892c:	b2db      	uxtb	r3, r3
 800892e:	429a      	cmp	r2, r3
 8008930:	d001      	beq.n	8008936 <irComms_handle_ir_key_message+0x38e>
 8008932:	f001 f907 	bl	8009b44 <irComms_handle_ir_key_message+0x159c>
        {
            // if our serial number is presently zero
            if( ir_comm_ctx->is_my_sn_blank )
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	222e      	movs	r2, #46	@ 0x2e
 800893a:	5c9b      	ldrb	r3, [r3, r2]
 800893c:	2b00      	cmp	r3, #0
 800893e:	d058      	beq.n	80089f2 <irComms_handle_ir_key_message+0x44a>
            {
                // if the transmitted product ID is zero
                if ((0 == ir_comm_ctx->_buffers.rx_buffer[2]) && (0 == ir_comm_ctx->_buffers.rx_buffer[3]))
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	2232      	movs	r2, #50	@ 0x32
 8008944:	5c9b      	ldrb	r3, [r3, r2]
 8008946:	2b00      	cmp	r3, #0
 8008948:	d112      	bne.n	8008970 <irComms_handle_ir_key_message+0x3c8>
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	2233      	movs	r2, #51	@ 0x33
 800894e:	5c9b      	ldrb	r3, [r3, r2]
 8008950:	2b00      	cmp	r3, #0
 8008952:	d10d      	bne.n	8008970 <irComms_handle_ir_key_message+0x3c8>
                {
                    // use the product ID values for this build
                    ir_comm_ctx->my_sn[0] = ir_comm_ctx->product_id_product_line;    /* Product ID MSB */
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	781a      	ldrb	r2, [r3, #0]
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	721a      	strb	r2, [r3, #8]
                    ir_comm_ctx->my_sn[1] = ir_comm_ctx->product_id_product_num;     /* Product ID LSB */
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	785a      	ldrb	r2, [r3, #1]
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	725a      	strb	r2, [r3, #9]
 8008964:	e00e      	b.n	8008984 <irComms_handle_ir_key_message+0x3dc>
 8008966:	46c0      	nop			@ (mov r8, r8)
 8008968:	0800a9fc 	.word	0x0800a9fc
 800896c:	20000648 	.word	0x20000648
                }
                else
                {
                    // use the product ID values passed in from the S/N programmer
                    ir_comm_ctx->my_sn[0] = ir_comm_ctx->_buffers.rx_buffer[2];      /* Product ID MSB */
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	2232      	movs	r2, #50	@ 0x32
 8008974:	5c9a      	ldrb	r2, [r3, r2]
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	721a      	strb	r2, [r3, #8]
                    ir_comm_ctx->my_sn[1] = ir_comm_ctx->_buffers.rx_buffer[3];      /* Product ID LSB */
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	2233      	movs	r2, #51	@ 0x33
 800897e:	5c9a      	ldrb	r2, [r3, r2]
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	725a      	strb	r2, [r3, #9]
                }
                ir_comm_ctx->my_sn[2] = ir_comm_ctx->_buffers.rx_buffer[4]; /* CM ID */
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	2234      	movs	r2, #52	@ 0x34
 8008988:	5c9a      	ldrb	r2, [r3, r2]
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	729a      	strb	r2, [r3, #10]
                ir_comm_ctx->my_sn[3] = ir_comm_ctx->_buffers.rx_buffer[5]; /* Box # */
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	2235      	movs	r2, #53	@ 0x35
 8008992:	5c9a      	ldrb	r2, [r3, r2]
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	72da      	strb	r2, [r3, #11]
                ir_comm_ctx->my_sn[4] = ir_comm_ctx->_buffers.rx_buffer[6]; /* Time (or Incremental S/N)  MSB */
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	2236      	movs	r2, #54	@ 0x36
 800899c:	5c9a      	ldrb	r2, [r3, r2]
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	731a      	strb	r2, [r3, #12]
                ir_comm_ctx->my_sn[5] = ir_comm_ctx->_buffers.rx_buffer[7]; /* Time (or Incremental S/N)      */
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	2237      	movs	r2, #55	@ 0x37
 80089a6:	5c9a      	ldrb	r2, [r3, r2]
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	735a      	strb	r2, [r3, #13]
                ir_comm_ctx->my_sn[6] = ir_comm_ctx->_buffers.rx_buffer[8]; /* Time (or Incremental S/N)      */
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	2238      	movs	r2, #56	@ 0x38
 80089b0:	5c9a      	ldrb	r2, [r3, r2]
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	739a      	strb	r2, [r3, #14]
                ir_comm_ctx->my_sn[7] = ir_comm_ctx->_buffers.rx_buffer[9]; /* Time (or Incremental S/N)  LSB */
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	2239      	movs	r2, #57	@ 0x39
 80089ba:	5c9a      	ldrb	r2, [r3, r2]
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	73da      	strb	r2, [r3, #15]

                output->data_changed.serialNum = true;
 80089c0:	683b      	ldr	r3, [r7, #0]
 80089c2:	2201      	movs	r2, #1
 80089c4:	705a      	strb	r2, [r3, #1]
                /// send an ACK
                ir_comm_ctx->_buffers.tx_buffer[0] = (uint8_t)TOKEN_IR1_ACK;
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	2250      	movs	r2, #80	@ 0x50
 80089ca:	2141      	movs	r1, #65	@ 0x41
 80089cc:	5499      	strb	r1, [r3, r2]
                ir_comm_ctx->_buffers.tx_buffer[1] = ir_comm_ctx->_buffers.rx_buffer[12] + 1;
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	223c      	movs	r2, #60	@ 0x3c
 80089d2:	5c9b      	ldrb	r3, [r3, r2]
 80089d4:	3301      	adds	r3, #1
 80089d6:	b2d9      	uxtb	r1, r3
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	2251      	movs	r2, #81	@ 0x51
 80089dc:	5499      	strb	r1, [r3, r2]
                ir_comm_ctx->_priv_comm_vars.last_tid = ir_comm_ctx->_buffers.tx_buffer[1];
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	2251      	movs	r2, #81	@ 0x51
 80089e2:	5c99      	ldrb	r1, [r3, r2]
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	2270      	movs	r2, #112	@ 0x70
 80089e8:	5499      	strb	r1, [r3, r2]
                byte_num_transmit = 2;
 80089ea:	2302      	movs	r3, #2
 80089ec:	60bb      	str	r3, [r7, #8]
        else
        {
            // in this case, drop the message and do not respond
        }

        break;
 80089ee:	f001 f8a9 	bl	8009b44 <irComms_handle_ir_key_message+0x159c>
                ir_comm_ctx->_buffers.tx_buffer[0] = (uint8_t)TOKEN_IR1_NACK;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	2250      	movs	r2, #80	@ 0x50
 80089f6:	214e      	movs	r1, #78	@ 0x4e
 80089f8:	5499      	strb	r1, [r3, r2]
                ir_comm_ctx->_buffers.tx_buffer[1] = ir_comm_ctx->_buffers.rx_buffer[12] + 1;
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	223c      	movs	r2, #60	@ 0x3c
 80089fe:	5c9b      	ldrb	r3, [r3, r2]
 8008a00:	3301      	adds	r3, #1
 8008a02:	b2d9      	uxtb	r1, r3
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	2251      	movs	r2, #81	@ 0x51
 8008a08:	5499      	strb	r1, [r3, r2]
                ir_comm_ctx->_priv_comm_vars.last_tid = ir_comm_ctx->_buffers.tx_buffer[1];
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	2251      	movs	r2, #81	@ 0x51
 8008a0e:	5c99      	ldrb	r1, [r3, r2]
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	2270      	movs	r2, #112	@ 0x70
 8008a14:	5499      	strb	r1, [r3, r2]
                byte_num_transmit = 2;
 8008a16:	2302      	movs	r3, #2
 8008a18:	60bb      	str	r3, [r7, #8]
        break;
 8008a1a:	f001 f893 	bl	8009b44 <irComms_handle_ir_key_message+0x159c>
    case TOKEN_IR1_GSDC:
        ir_comm_ctx->waiting_for_TOKEN_CT_WIPE_timeout_msec = 0; /* zero in all cases except when valid SDC is received */
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	2200      	movs	r2, #0
 8008a22:	749a      	strb	r2, [r3, #18]

        if( ir_comm_ctx->callbacks.get_legacy_code_reader_data)
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	228c      	movs	r2, #140	@ 0x8c
 8008a28:	589b      	ldr	r3, [r3, r2]
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d007      	beq.n	8008a3e <irComms_handle_ir_key_message+0x496>
        {
            ir_comm_ctx->callbacks.get_legacy_code_reader_data( legacy_code_reader_data, sizeof(legacy_code_reader_data));
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	228c      	movs	r2, #140	@ 0x8c
 8008a32:	589b      	ldr	r3, [r3, r2]
 8008a34:	2210      	movs	r2, #16
 8008a36:	18ba      	adds	r2, r7, r2
 8008a38:	2109      	movs	r1, #9
 8008a3a:	0010      	movs	r0, r2
 8008a3c:	4798      	blx	r3
        }

        ir_comm_ctx->_buffers.tx_buffer[0] = (uint8_t)TOKEN_IR1_ACK;
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	2250      	movs	r2, #80	@ 0x50
 8008a42:	2141      	movs	r1, #65	@ 0x41
 8008a44:	5499      	strb	r1, [r3, r2]
        memcpy(&ir_comm_ctx->_buffers.tx_buffer[1], ir_comm_ctx->sdc, 3);              // SDC (bytes 1,2,3)
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	3351      	adds	r3, #81	@ 0x51
 8008a4a:	0018      	movs	r0, r3
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	3304      	adds	r3, #4
 8008a50:	2203      	movs	r2, #3
 8008a52:	0019      	movs	r1, r3
 8008a54:	f001 fb26 	bl	800a0a4 <memcpy>

        ir_comm_ctx->_buffers.tx_buffer[4]  = legacy_code_reader_data[0]; // typically alarm life in seconds (high)
 8008a58:	2010      	movs	r0, #16
 8008a5a:	183b      	adds	r3, r7, r0
 8008a5c:	7819      	ldrb	r1, [r3, #0]
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	2254      	movs	r2, #84	@ 0x54
 8008a62:	5499      	strb	r1, [r3, r2]
        ir_comm_ctx->_buffers.tx_buffer[5]  = legacy_code_reader_data[1]; // typically alarm life in seconds (low)
 8008a64:	183b      	adds	r3, r7, r0
 8008a66:	7859      	ldrb	r1, [r3, #1]
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	2255      	movs	r2, #85	@ 0x55
 8008a6c:	5499      	strb	r1, [r3, r2]
        ir_comm_ctx->_buffers.tx_buffer[6]  = legacy_code_reader_data[2]; // typically battery life (high)
 8008a6e:	183b      	adds	r3, r7, r0
 8008a70:	7899      	ldrb	r1, [r3, #2]
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	2256      	movs	r2, #86	@ 0x56
 8008a76:	5499      	strb	r1, [r3, r2]
        ir_comm_ctx->_buffers.tx_buffer[7]  = legacy_code_reader_data[3]; // typically battery life (low)
 8008a78:	183b      	adds	r3, r7, r0
 8008a7a:	78d9      	ldrb	r1, [r3, #3]
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	2257      	movs	r2, #87	@ 0x57
 8008a80:	5499      	strb	r1, [r3, r2]
        ir_comm_ctx->_buffers.tx_buffer[8]  = legacy_code_reader_data[4]; // 0
 8008a82:	183b      	adds	r3, r7, r0
 8008a84:	7919      	ldrb	r1, [r3, #4]
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	2258      	movs	r2, #88	@ 0x58
 8008a8a:	5499      	strb	r1, [r3, r2]

        ir_comm_ctx->_buffers.tx_buffer[9]  = legacy_code_reader_data[5]; // typically low byte of FW version
 8008a8c:	183b      	adds	r3, r7, r0
 8008a8e:	7959      	ldrb	r1, [r3, #5]
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	2259      	movs	r2, #89	@ 0x59
 8008a94:	5499      	strb	r1, [r3, r2]
        ir_comm_ctx->_buffers.tx_buffer[10] = legacy_code_reader_data[6]; // typically high byte of FW version
 8008a96:	183b      	adds	r3, r7, r0
 8008a98:	7999      	ldrb	r1, [r3, #6]
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	225a      	movs	r2, #90	@ 0x5a
 8008a9e:	5499      	strb	r1, [r3, r2]
        ir_comm_ctx->_buffers.tx_buffer[11] = legacy_code_reader_data[7]; // typically temperature
 8008aa0:	183b      	adds	r3, r7, r0
 8008aa2:	79d9      	ldrb	r1, [r3, #7]
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	225b      	movs	r2, #91	@ 0x5b
 8008aa8:	5499      	strb	r1, [r3, r2]
        ir_comm_ctx->_buffers.tx_buffer[12] = legacy_code_reader_data[8]; //
 8008aaa:	183b      	adds	r3, r7, r0
 8008aac:	7a19      	ldrb	r1, [r3, #8]
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	225c      	movs	r2, #92	@ 0x5c
 8008ab2:	5499      	strb	r1, [r3, r2]
        ir_comm_ctx->_buffers.tx_buffer[13] = ir_comm_ctx->_buffers.rx_buffer[1] + 1;          // TID
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	2231      	movs	r2, #49	@ 0x31
 8008ab8:	5c9b      	ldrb	r3, [r3, r2]
 8008aba:	3301      	adds	r3, #1
 8008abc:	b2d9      	uxtb	r1, r3
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	225d      	movs	r2, #93	@ 0x5d
 8008ac2:	5499      	strb	r1, [r3, r2]
        ir_comm_ctx->_buffers.tx_buffer[14] = (uint8_t)ir_comm_ctx->legacy_device_type;
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	78d9      	ldrb	r1, [r3, #3]
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	225e      	movs	r2, #94	@ 0x5e
 8008acc:	5499      	strb	r1, [r3, r2]
        ir_comm_ctx->_priv_comm_vars.last_tid = ir_comm_ctx->_buffers.tx_buffer[13];
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	225d      	movs	r2, #93	@ 0x5d
 8008ad2:	5c99      	ldrb	r1, [r3, r2]
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	2270      	movs	r2, #112	@ 0x70
 8008ad8:	5499      	strb	r1, [r3, r2]
        byte_num_transmit = 15;
 8008ada:	230f      	movs	r3, #15
 8008adc:	60bb      	str	r3, [r7, #8]

        break;
 8008ade:	f001 f83a 	bl	8009b56 <irComms_handle_ir_key_message+0x15ae>
    case TOKEN_IR2_GSDC:    /*0xD2*/            /* Is this even a real message?*/
        ir_comm_ctx->waiting_for_TOKEN_CT_WIPE_timeout_msec = 0; /* zero in all cases except when valid SDC is received */
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	2200      	movs	r2, #0
 8008ae6:	749a      	strb	r2, [r3, #18]

        if( ir_comm_ctx->callbacks.get_legacy_code_reader_data)
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	228c      	movs	r2, #140	@ 0x8c
 8008aec:	589b      	ldr	r3, [r3, r2]
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d007      	beq.n	8008b02 <irComms_handle_ir_key_message+0x55a>
        {
            ir_comm_ctx->callbacks.get_legacy_code_reader_data( legacy_code_reader_data, sizeof(legacy_code_reader_data));
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	228c      	movs	r2, #140	@ 0x8c
 8008af6:	589b      	ldr	r3, [r3, r2]
 8008af8:	2210      	movs	r2, #16
 8008afa:	18ba      	adds	r2, r7, r2
 8008afc:	2109      	movs	r1, #9
 8008afe:	0010      	movs	r0, r2
 8008b00:	4798      	blx	r3
        }

        ir_comm_ctx->_buffers.tx_buffer[0] = (uint8_t)TOKEN_IR2_AACK;
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	2250      	movs	r2, #80	@ 0x50
 8008b06:	21be      	movs	r1, #190	@ 0xbe
 8008b08:	5499      	strb	r1, [r3, r2]
        ir_comm_ctx->_buffers.tx_buffer[1] = (uint8_t)TOKEN_IR2_GSDC | IR2_RSP_INDICATOR_MASK;
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	2251      	movs	r2, #81	@ 0x51
 8008b0e:	21d2      	movs	r1, #210	@ 0xd2
 8008b10:	5499      	strb	r1, [r3, r2]
        memcpy(&ir_comm_ctx->_buffers.tx_buffer[2], ir_comm_ctx->sdc, 3);              // SDC (bytes 1,2,3)
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	3352      	adds	r3, #82	@ 0x52
 8008b16:	0018      	movs	r0, r3
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	3304      	adds	r3, #4
 8008b1c:	2203      	movs	r2, #3
 8008b1e:	0019      	movs	r1, r3
 8008b20:	f001 fac0 	bl	800a0a4 <memcpy>
        ir_comm_ctx->_buffers.tx_buffer[5]  = legacy_code_reader_data[0]; // typically alarm life in seconds (high)
 8008b24:	2010      	movs	r0, #16
 8008b26:	183b      	adds	r3, r7, r0
 8008b28:	7819      	ldrb	r1, [r3, #0]
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	2255      	movs	r2, #85	@ 0x55
 8008b2e:	5499      	strb	r1, [r3, r2]
        ir_comm_ctx->_buffers.tx_buffer[6]  = legacy_code_reader_data[1]; // typically alarm life in seconds (low)
 8008b30:	183b      	adds	r3, r7, r0
 8008b32:	7859      	ldrb	r1, [r3, #1]
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	2256      	movs	r2, #86	@ 0x56
 8008b38:	5499      	strb	r1, [r3, r2]
        ir_comm_ctx->_buffers.tx_buffer[7]  = legacy_code_reader_data[2]; //
 8008b3a:	183b      	adds	r3, r7, r0
 8008b3c:	7899      	ldrb	r1, [r3, #2]
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	2257      	movs	r2, #87	@ 0x57
 8008b42:	5499      	strb	r1, [r3, r2]
        ir_comm_ctx->_buffers.tx_buffer[8]  = legacy_code_reader_data[3]; //
 8008b44:	183b      	adds	r3, r7, r0
 8008b46:	78d9      	ldrb	r1, [r3, #3]
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	2258      	movs	r2, #88	@ 0x58
 8008b4c:	5499      	strb	r1, [r3, r2]
        ir_comm_ctx->_buffers.tx_buffer[9]  = legacy_code_reader_data[4]; // 0
 8008b4e:	183b      	adds	r3, r7, r0
 8008b50:	7919      	ldrb	r1, [r3, #4]
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	2259      	movs	r2, #89	@ 0x59
 8008b56:	5499      	strb	r1, [r3, r2]

        ir_comm_ctx->_buffers.tx_buffer[10]  = legacy_code_reader_data[5]; // typically low byte of FW version
 8008b58:	183b      	adds	r3, r7, r0
 8008b5a:	7959      	ldrb	r1, [r3, #5]
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	225a      	movs	r2, #90	@ 0x5a
 8008b60:	5499      	strb	r1, [r3, r2]
        ir_comm_ctx->_buffers.tx_buffer[11] = legacy_code_reader_data[6]; // typically high byte of FW version
 8008b62:	183b      	adds	r3, r7, r0
 8008b64:	7999      	ldrb	r1, [r3, #6]
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	225b      	movs	r2, #91	@ 0x5b
 8008b6a:	5499      	strb	r1, [r3, r2]
        ir_comm_ctx->_buffers.tx_buffer[12] = ir_comm_ctx->_buffers.rx_buffer[4] + 1;          // TID
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	2234      	movs	r2, #52	@ 0x34
 8008b70:	5c9b      	ldrb	r3, [r3, r2]
 8008b72:	3301      	adds	r3, #1
 8008b74:	b2d9      	uxtb	r1, r3
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	225c      	movs	r2, #92	@ 0x5c
 8008b7a:	5499      	strb	r1, [r3, r2]
        ir_comm_ctx->_buffers.tx_buffer[13] = (uint8_t)irComms_checksum( ir_comm_ctx->_buffers.tx_buffer, 13);
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	3350      	adds	r3, #80	@ 0x50
 8008b80:	210d      	movs	r1, #13
 8008b82:	0018      	movs	r0, r3
 8008b84:	f001 f8fa 	bl	8009d7c <irComms_checksum>
 8008b88:	0003      	movs	r3, r0
 8008b8a:	0019      	movs	r1, r3
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	225d      	movs	r2, #93	@ 0x5d
 8008b90:	5499      	strb	r1, [r3, r2]
        ir_comm_ctx->_priv_comm_vars.last_tid = ir_comm_ctx->_buffers.tx_buffer[12];
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	225c      	movs	r2, #92	@ 0x5c
 8008b96:	5c99      	ldrb	r1, [r3, r2]
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	2270      	movs	r2, #112	@ 0x70
 8008b9c:	5499      	strb	r1, [r3, r2]
        byte_num_transmit = 14;
 8008b9e:	230e      	movs	r3, #14
 8008ba0:	60bb      	str	r3, [r7, #8]
        break;
 8008ba2:	f000 ffd8 	bl	8009b56 <irComms_handle_ir_key_message+0x15ae>
    case TOKEN_IR2_ADV_GET_INFO:    /*0x53*/
        // This is not fully supported. I don't think we have a V2 Code Reader anyway
        ir_comm_ctx->waiting_for_TOKEN_CT_WIPE_timeout_msec = 0; /* zero in all cases except when valid SDC is received */
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	2200      	movs	r2, #0
 8008baa:	749a      	strb	r2, [r3, #18]

        if( ir_comm_ctx->callbacks.get_legacy_code_reader_data)
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	228c      	movs	r2, #140	@ 0x8c
 8008bb0:	589b      	ldr	r3, [r3, r2]
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d007      	beq.n	8008bc6 <irComms_handle_ir_key_message+0x61e>
        {
            ir_comm_ctx->callbacks.get_legacy_code_reader_data( legacy_code_reader_data, sizeof(legacy_code_reader_data));
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	228c      	movs	r2, #140	@ 0x8c
 8008bba:	589b      	ldr	r3, [r3, r2]
 8008bbc:	2210      	movs	r2, #16
 8008bbe:	18ba      	adds	r2, r7, r2
 8008bc0:	2109      	movs	r1, #9
 8008bc2:	0010      	movs	r0, r2
 8008bc4:	4798      	blx	r3
        }

        ir_comm_ctx->_buffers.tx_buffer[0] = (uint8_t)TOKEN_IR2_AACK;
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	2250      	movs	r2, #80	@ 0x50
 8008bca:	21be      	movs	r1, #190	@ 0xbe
 8008bcc:	5499      	strb	r1, [r3, r2]
        ir_comm_ctx->_buffers.tx_buffer[1] = (uint8_t)TOKEN_IR2_ADV_GET_INFO | IR2_RSP_INDICATOR_MASK;
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	2251      	movs	r2, #81	@ 0x51
 8008bd2:	21d3      	movs	r1, #211	@ 0xd3
 8008bd4:	5499      	strb	r1, [r3, r2]
        ir_comm_ctx->_buffers.tx_buffer[2] = legacy_code_reader_data[0];                        //         Add the Number of activations (not used for locks) to the TX buffer
 8008bd6:	2010      	movs	r0, #16
 8008bd8:	183b      	adds	r3, r7, r0
 8008bda:	7819      	ldrb	r1, [r3, #0]
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	2252      	movs	r2, #82	@ 0x52
 8008be0:	5499      	strb	r1, [r3, r2]
        ir_comm_ctx->_buffers.tx_buffer[3] = legacy_code_reader_data[1];                        //         Add the Number of activations (not used for locks) to the TX buffer
 8008be2:	183b      	adds	r3, r7, r0
 8008be4:	7859      	ldrb	r1, [r3, #1]
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	2253      	movs	r2, #83	@ 0x53
 8008bea:	5499      	strb	r1, [r3, r2]
        ir_comm_ctx->_buffers.tx_buffer[4] = legacy_code_reader_data[2];                         //         Add the Alive Time (not used for locks) to the TX buffer
 8008bec:	183b      	adds	r3, r7, r0
 8008bee:	7899      	ldrb	r1, [r3, #2]
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	2254      	movs	r2, #84	@ 0x54
 8008bf4:	5499      	strb	r1, [r3, r2]
        ir_comm_ctx->_buffers.tx_buffer[5] = legacy_code_reader_data[3];                         //         Add the Alive Time (not used for locks) to the TX buffer
 8008bf6:	183b      	adds	r3, r7, r0
 8008bf8:	78d9      	ldrb	r1, [r3, #3]
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	2255      	movs	r2, #85	@ 0x55
 8008bfe:	5499      	strb	r1, [r3, r2]
        ir_comm_ctx->_buffers.tx_buffer[6] = legacy_code_reader_data[4];                         //         Add the Alive Time (not used for locks) to the TX buffer
 8008c00:	183b      	adds	r3, r7, r0
 8008c02:	7919      	ldrb	r1, [r3, #4]
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	2256      	movs	r2, #86	@ 0x56
 8008c08:	5499      	strb	r1, [r3, r2]
        ir_comm_ctx->_buffers.tx_buffer[7] = 0x00;                                                  //         Add the Alive Time (not used for locks) to the TX buffer
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	2257      	movs	r2, #87	@ 0x57
 8008c0e:	2100      	movs	r1, #0
 8008c10:	5499      	strb	r1, [r3, r2]
        ir_comm_ctx->_buffers.tx_buffer[8]  = legacy_code_reader_data[5]; // typically low byte of FW version
 8008c12:	183b      	adds	r3, r7, r0
 8008c14:	7959      	ldrb	r1, [r3, #5]
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	2258      	movs	r2, #88	@ 0x58
 8008c1a:	5499      	strb	r1, [r3, r2]
        ir_comm_ctx->_buffers.tx_buffer[9] = legacy_code_reader_data[6]; // typically high byte of FW version
 8008c1c:	183b      	adds	r3, r7, r0
 8008c1e:	7999      	ldrb	r1, [r3, #6]
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	2259      	movs	r2, #89	@ 0x59
 8008c24:	5499      	strb	r1, [r3, r2]
        ir_comm_ctx->_buffers.tx_buffer[10] = ir_comm_ctx->_buffers.rx_buffer[4] + 1;          // TID
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	2234      	movs	r2, #52	@ 0x34
 8008c2a:	5c9b      	ldrb	r3, [r3, r2]
 8008c2c:	3301      	adds	r3, #1
 8008c2e:	b2d9      	uxtb	r1, r3
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	225a      	movs	r2, #90	@ 0x5a
 8008c34:	5499      	strb	r1, [r3, r2]
        ir_comm_ctx->_buffers.tx_buffer[11] = (uint8_t)irComms_checksum( ir_comm_ctx->_buffers.tx_buffer, 11);
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	3350      	adds	r3, #80	@ 0x50
 8008c3a:	210b      	movs	r1, #11
 8008c3c:	0018      	movs	r0, r3
 8008c3e:	f001 f89d 	bl	8009d7c <irComms_checksum>
 8008c42:	0003      	movs	r3, r0
 8008c44:	0019      	movs	r1, r3
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	225b      	movs	r2, #91	@ 0x5b
 8008c4a:	5499      	strb	r1, [r3, r2]
        ir_comm_ctx->_priv_comm_vars.last_tid = ir_comm_ctx->_buffers.tx_buffer[10];
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	225a      	movs	r2, #90	@ 0x5a
 8008c50:	5c99      	ldrb	r1, [r3, r2]
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	2270      	movs	r2, #112	@ 0x70
 8008c56:	5499      	strb	r1, [r3, r2]
        byte_num_transmit = 12;
 8008c58:	230c      	movs	r3, #12
 8008c5a:	60bb      	str	r3, [r7, #8]
        break;
 8008c5c:	f000 ff7b 	bl	8009b56 <irComms_handle_ir_key_message+0x15ae>
    case TOKEN_IR1_SSDC:
        // parsing is different if IR1 mode
        if( ir_comm_ctx->ir_mode == IR1_MODE )
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	789b      	ldrb	r3, [r3, #2]
 8008c64:	2b01      	cmp	r3, #1
 8008c66:	d000      	beq.n	8008c6a <irComms_handle_ir_key_message+0x6c2>
 8008c68:	e0a8      	b.n	8008dbc <irComms_handle_ir_key_message+0x814>
        {
            /// if the device type is not a G4 Key
            if(ir_comm_ctx->_buffers.rx_buffer[1] != COM_ID_G4KEY)
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	2231      	movs	r2, #49	@ 0x31
 8008c6e:	5c9b      	ldrb	r3, [r3, r2]
 8008c70:	2b01      	cmp	r3, #1
 8008c72:	d015      	beq.n	8008ca0 <irComms_handle_ir_key_message+0x6f8>
            {
                /// send a NACK
                ir_comm_ctx->_buffers.tx_buffer[0] = (uint8_t)TOKEN_IR1_NACK;
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	2250      	movs	r2, #80	@ 0x50
 8008c78:	214e      	movs	r1, #78	@ 0x4e
 8008c7a:	5499      	strb	r1, [r3, r2]
                ir_comm_ctx->_buffers.tx_buffer[1] = ir_comm_ctx->_buffers.rx_buffer[5] + 1;
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	2235      	movs	r2, #53	@ 0x35
 8008c80:	5c9b      	ldrb	r3, [r3, r2]
 8008c82:	3301      	adds	r3, #1
 8008c84:	b2d9      	uxtb	r1, r3
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	2251      	movs	r2, #81	@ 0x51
 8008c8a:	5499      	strb	r1, [r3, r2]
                ir_comm_ctx->_priv_comm_vars.last_tid = ir_comm_ctx->_buffers.tx_buffer[1];
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	2251      	movs	r2, #81	@ 0x51
 8008c90:	5c99      	ldrb	r1, [r3, r2]
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	2270      	movs	r2, #112	@ 0x70
 8008c96:	5499      	strb	r1, [r3, r2]
                byte_num_transmit = 2;
 8008c98:	2302      	movs	r3, #2
 8008c9a:	60bb      	str	r3, [r7, #8]
            }
            build_IR2_Status(ir_comm_ctx->_buffers.tx_buffer, IR2_IR4_DeviceState, IR2_IR4_Error,  ir_comm_ctx->_buffers.rx_buffer[4] + 1,IR2_IR4_Status);
            ir_comm_ctx->_priv_comm_vars.last_tid = ir_comm_ctx->_buffers.rx_buffer[4] + 1;
            byte_num_transmit = 6;
        }
        break;
 8008c9c:	f000 ff54 	bl	8009b48 <irComms_handle_ir_key_message+0x15a0>
                if( is_magic_key( &ir_comm_ctx->_buffers.rx_buffer[2], false ))                    // if the magic SDC is received
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	3332      	adds	r3, #50	@ 0x32
 8008ca4:	2100      	movs	r1, #0
 8008ca6:	0018      	movs	r0, r3
 8008ca8:	f000 ff9e 	bl	8009be8 <is_magic_key>
 8008cac:	1e03      	subs	r3, r0, #0
 8008cae:	d034      	beq.n	8008d1a <irComms_handle_ir_key_message+0x772>
                    if(ir_comm_ctx->R_n_D_Key_supported)
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	222c      	movs	r2, #44	@ 0x2c
 8008cb4:	5c9b      	ldrb	r3, [r3, r2]
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d101      	bne.n	8008cbe <irComms_handle_ir_key_message+0x716>
 8008cba:	f000 ff45 	bl	8009b48 <irComms_handle_ir_key_message+0x15a0>
                        if ((ir_comm_ctx->sdc[0] != 0) || (ir_comm_ctx->sdc[1] != 0) || (ir_comm_ctx->sdc[2] != 0))
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	791b      	ldrb	r3, [r3, #4]
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d107      	bne.n	8008cd6 <irComms_handle_ir_key_message+0x72e>
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	795b      	ldrb	r3, [r3, #5]
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d103      	bne.n	8008cd6 <irComms_handle_ir_key_message+0x72e>
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	799b      	ldrb	r3, [r3, #6]
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d002      	beq.n	8008cdc <irComms_handle_ir_key_message+0x734>
                            ValidIRKeySeen   = IR_KEY_MAGIC;
 8008cd6:	4bde      	ldr	r3, [pc, #888]	@ (8009050 <irComms_handle_ir_key_message+0xaa8>)
 8008cd8:	2202      	movs	r2, #2
 8008cda:	701a      	strb	r2, [r3, #0]
                        if( ir_comm_ctx->callbacks.magicKey_cb != NULL )
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	2298      	movs	r2, #152	@ 0x98
 8008ce0:	589b      	ldr	r3, [r3, r2]
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d003      	beq.n	8008cee <irComms_handle_ir_key_message+0x746>
                            ir_comm_ctx->callbacks.magicKey_cb();
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	2298      	movs	r2, #152	@ 0x98
 8008cea:	589b      	ldr	r3, [r3, r2]
 8008cec:	4798      	blx	r3
                        ir_comm_ctx->_buffers.tx_buffer[0] = (uint8_t)TOKEN_IR1_ACK;
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	2250      	movs	r2, #80	@ 0x50
 8008cf2:	2141      	movs	r1, #65	@ 0x41
 8008cf4:	5499      	strb	r1, [r3, r2]
                        ir_comm_ctx->_buffers.tx_buffer[1] = ir_comm_ctx->_buffers.rx_buffer[5] + 1;
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	2235      	movs	r2, #53	@ 0x35
 8008cfa:	5c9b      	ldrb	r3, [r3, r2]
 8008cfc:	3301      	adds	r3, #1
 8008cfe:	b2d9      	uxtb	r1, r3
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	2251      	movs	r2, #81	@ 0x51
 8008d04:	5499      	strb	r1, [r3, r2]
                        ir_comm_ctx->_priv_comm_vars.last_tid = ir_comm_ctx->_buffers.tx_buffer[1];
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	2251      	movs	r2, #81	@ 0x51
 8008d0a:	5c99      	ldrb	r1, [r3, r2]
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	2270      	movs	r2, #112	@ 0x70
 8008d10:	5499      	strb	r1, [r3, r2]
                        byte_num_transmit = 2;
 8008d12:	2302      	movs	r3, #2
 8008d14:	60bb      	str	r3, [r7, #8]
        break;
 8008d16:	f000 ff17 	bl	8009b48 <irComms_handle_ir_key_message+0x15a0>
                else if ( is_our_sdc_blank( &ir_comm_ctx->sdc[0], SZ_OF_LEGACY_SDC ) ||
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	3304      	adds	r3, #4
 8008d1e:	2103      	movs	r1, #3
 8008d20:	0018      	movs	r0, r3
 8008d22:	f000 fff7 	bl	8009d14 <is_our_sdc_blank>
 8008d26:	1e03      	subs	r3, r0, #0
 8008d28:	d109      	bne.n	8008d3e <irComms_handle_ir_key_message+0x796>
                        is_sdc_matching( &ir_comm_ctx->sdc[0], &ir_comm_ctx->_buffers.rx_buffer[2], SZ_OF_LEGACY_SDC))
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	1d18      	adds	r0, r3, #4
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	3332      	adds	r3, #50	@ 0x32
 8008d32:	2203      	movs	r2, #3
 8008d34:	0019      	movs	r1, r3
 8008d36:	f000 ff96 	bl	8009c66 <is_sdc_matching>
 8008d3a:	1e03      	subs	r3, r0, #0
                else if ( is_our_sdc_blank( &ir_comm_ctx->sdc[0], SZ_OF_LEGACY_SDC ) ||
 8008d3c:	d02e      	beq.n	8008d9c <irComms_handle_ir_key_message+0x7f4>
                    if (is_our_sdc_blank( &ir_comm_ctx->sdc[0], SZ_OF_LEGACY_SDC ) )
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	3304      	adds	r3, #4
 8008d42:	2103      	movs	r1, #3
 8008d44:	0018      	movs	r0, r3
 8008d46:	f000 ffe5 	bl	8009d14 <is_our_sdc_blank>
 8008d4a:	1e03      	subs	r3, r0, #0
 8008d4c:	d00a      	beq.n	8008d64 <irComms_handle_ir_key_message+0x7bc>
                        memcpy(ir_comm_ctx->sdc, &ir_comm_ctx->_buffers.rx_buffer[2], 3);
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	1d18      	adds	r0, r3, #4
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	3332      	adds	r3, #50	@ 0x32
 8008d56:	2203      	movs	r2, #3
 8008d58:	0019      	movs	r1, r3
 8008d5a:	f001 f9a3 	bl	800a0a4 <memcpy>
                        output->data_changed.sdc = true;
 8008d5e:	683b      	ldr	r3, [r7, #0]
 8008d60:	2201      	movs	r2, #1
 8008d62:	701a      	strb	r2, [r3, #0]
                    ir_comm_ctx->waiting_for_TOKEN_CT_WIPE_timeout_msec = WAITING_FOR_CT_WIPE_TIMEOUT_MSEC;
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	2264      	movs	r2, #100	@ 0x64
 8008d68:	749a      	strb	r2, [r3, #18]
                    ValidIRKeySeen   = IR_KEY_VALID;
 8008d6a:	4bb9      	ldr	r3, [pc, #740]	@ (8009050 <irComms_handle_ir_key_message+0xaa8>)
 8008d6c:	2201      	movs	r2, #1
 8008d6e:	701a      	strb	r2, [r3, #0]
                    ir_comm_ctx->_buffers.tx_buffer[0] = (uint8_t)TOKEN_IR1_ACK;
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	2250      	movs	r2, #80	@ 0x50
 8008d74:	2141      	movs	r1, #65	@ 0x41
 8008d76:	5499      	strb	r1, [r3, r2]
                    ir_comm_ctx->_buffers.tx_buffer[1] = ir_comm_ctx->_buffers.rx_buffer[5] + 1;
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	2235      	movs	r2, #53	@ 0x35
 8008d7c:	5c9b      	ldrb	r3, [r3, r2]
 8008d7e:	3301      	adds	r3, #1
 8008d80:	b2d9      	uxtb	r1, r3
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	2251      	movs	r2, #81	@ 0x51
 8008d86:	5499      	strb	r1, [r3, r2]
                    ir_comm_ctx->_priv_comm_vars.last_tid = ir_comm_ctx->_buffers.tx_buffer[1];
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	2251      	movs	r2, #81	@ 0x51
 8008d8c:	5c99      	ldrb	r1, [r3, r2]
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	2270      	movs	r2, #112	@ 0x70
 8008d92:	5499      	strb	r1, [r3, r2]
                    byte_num_transmit = 2;
 8008d94:	2302      	movs	r3, #2
 8008d96:	60bb      	str	r3, [r7, #8]
        break;
 8008d98:	f000 fed6 	bl	8009b48 <irComms_handle_ir_key_message+0x15a0>
                     if (ir_comm_ctx->callbacks.smartRetail_reject_nonmatch_key_function != NULL)
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	2294      	movs	r2, #148	@ 0x94
 8008da0:	589b      	ldr	r3, [r3, r2]
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d101      	bne.n	8008daa <irComms_handle_ir_key_message+0x802>
 8008da6:	f000 fecf 	bl	8009b48 <irComms_handle_ir_key_message+0x15a0>
                         ir_comm_ctx->callbacks.smartRetail_reject_nonmatch_key_function(ir_comm_ctx->ir_mode);                        // call the smart retail function
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	2294      	movs	r2, #148	@ 0x94
 8008dae:	589b      	ldr	r3, [r3, r2]
 8008db0:	687a      	ldr	r2, [r7, #4]
 8008db2:	7892      	ldrb	r2, [r2, #2]
 8008db4:	0010      	movs	r0, r2
 8008db6:	4798      	blx	r3
        break;
 8008db8:	f000 fec6 	bl	8009b48 <irComms_handle_ir_key_message+0x15a0>
        else if( ir_comm_ctx->ir_mode == IR2_MODE )
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	789b      	ldrb	r3, [r3, #2]
 8008dc0:	2b02      	cmp	r3, #2
 8008dc2:	d001      	beq.n	8008dc8 <irComms_handle_ir_key_message+0x820>
 8008dc4:	f000 fec0 	bl	8009b48 <irComms_handle_ir_key_message+0x15a0>
        	IR2_IR4_DeviceState = IR2_BUSY;
 8008dc8:	230e      	movs	r3, #14
 8008dca:	18fb      	adds	r3, r7, r3
 8008dcc:	2201      	movs	r2, #1
 8008dce:	701a      	strb	r2, [r3, #0]
            IR2_IR4_Error = IR2_TIMEOUT;                                        // Preset to Timeout as SDC error will be set later
 8008dd0:	232f      	movs	r3, #47	@ 0x2f
 8008dd2:	18fb      	adds	r3, r7, r3
 8008dd4:	2201      	movs	r2, #1
 8008dd6:	701a      	strb	r2, [r3, #0]
            IR2_IR4_Status = IR2_LOCK_UNLOCKED;                                 // This is a catch in case the callback wasn't set. This shouldn't be really used
 8008dd8:	210f      	movs	r1, #15
 8008dda:	187b      	adds	r3, r7, r1
 8008ddc:	2202      	movs	r2, #2
 8008dde:	701a      	strb	r2, [r3, #0]
            if( ir_comm_ctx->callbacks.get_IR2_info )
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	2284      	movs	r2, #132	@ 0x84
 8008de4:	589b      	ldr	r3, [r3, r2]
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d006      	beq.n	8008df8 <irComms_handle_ir_key_message+0x850>
                ir_comm_ctx->callbacks.get_IR2_info(&IR2_IR4_Status, NULL);
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	2284      	movs	r2, #132	@ 0x84
 8008dee:	589b      	ldr	r3, [r3, r2]
 8008df0:	187a      	adds	r2, r7, r1
 8008df2:	2100      	movs	r1, #0
 8008df4:	0010      	movs	r0, r2
 8008df6:	4798      	blx	r3
            if( is_magic_key( &ir_comm_ctx->_buffers.rx_buffer[1], false ))                      // if the magic SDC is received
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	3331      	adds	r3, #49	@ 0x31
 8008dfc:	2100      	movs	r1, #0
 8008dfe:	0018      	movs	r0, r3
 8008e00:	f000 fef2 	bl	8009be8 <is_magic_key>
 8008e04:	1e03      	subs	r3, r0, #0
 8008e06:	d023      	beq.n	8008e50 <irComms_handle_ir_key_message+0x8a8>
                if(ir_comm_ctx->R_n_D_Key_supported)
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	222c      	movs	r2, #44	@ 0x2c
 8008e0c:	5c9b      	ldrb	r3, [r3, r2]
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d100      	bne.n	8008e14 <irComms_handle_ir_key_message+0x86c>
 8008e12:	e071      	b.n	8008ef8 <irComms_handle_ir_key_message+0x950>
                    if( is_our_sdc_blank(&ir_comm_ctx->sdc[0], SZ_OF_LEGACY_SDC) == false)
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	3304      	adds	r3, #4
 8008e18:	2103      	movs	r1, #3
 8008e1a:	0018      	movs	r0, r3
 8008e1c:	f000 ff7a 	bl	8009d14 <is_our_sdc_blank>
 8008e20:	0003      	movs	r3, r0
 8008e22:	001a      	movs	r2, r3
 8008e24:	2301      	movs	r3, #1
 8008e26:	4053      	eors	r3, r2
 8008e28:	b2db      	uxtb	r3, r3
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d002      	beq.n	8008e34 <irComms_handle_ir_key_message+0x88c>
                        ValidIRKeySeen = IR_KEY_MAGIC;
 8008e2e:	4b88      	ldr	r3, [pc, #544]	@ (8009050 <irComms_handle_ir_key_message+0xaa8>)
 8008e30:	2202      	movs	r2, #2
 8008e32:	701a      	strb	r2, [r3, #0]
                    if( ir_comm_ctx->callbacks.magicKey_cb != NULL )
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	2298      	movs	r2, #152	@ 0x98
 8008e38:	589b      	ldr	r3, [r3, r2]
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d003      	beq.n	8008e46 <irComms_handle_ir_key_message+0x89e>
                        ir_comm_ctx->callbacks.magicKey_cb();
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	2298      	movs	r2, #152	@ 0x98
 8008e42:	589b      	ldr	r3, [r3, r2]
 8008e44:	4798      	blx	r3
                    IR2_IR4_DeviceState = IR2_OK;
 8008e46:	230e      	movs	r3, #14
 8008e48:	18fb      	adds	r3, r7, r3
 8008e4a:	2200      	movs	r2, #0
 8008e4c:	701a      	strb	r2, [r3, #0]
 8008e4e:	e053      	b.n	8008ef8 <irComms_handle_ir_key_message+0x950>
            else if( is_sdc_testKey(&ir_comm_ctx->_buffers.rx_buffer[1], SZ_OF_LEGACY_SDC) && is_our_sdc_blank(&ir_comm_ctx->sdc[0], SZ_OF_LEGACY_SDC) )
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	3331      	adds	r3, #49	@ 0x31
 8008e54:	2103      	movs	r1, #3
 8008e56:	0018      	movs	r0, r3
 8008e58:	f000 ff46 	bl	8009ce8 <is_sdc_testKey>
 8008e5c:	1e03      	subs	r3, r0, #0
 8008e5e:	d00b      	beq.n	8008e78 <irComms_handle_ir_key_message+0x8d0>
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	3304      	adds	r3, #4
 8008e64:	2103      	movs	r1, #3
 8008e66:	0018      	movs	r0, r3
 8008e68:	f000 ff54 	bl	8009d14 <is_our_sdc_blank>
 8008e6c:	1e03      	subs	r3, r0, #0
 8008e6e:	d003      	beq.n	8008e78 <irComms_handle_ir_key_message+0x8d0>
                ValidIRKeySeen = IR_KEY_VALID;
 8008e70:	4b77      	ldr	r3, [pc, #476]	@ (8009050 <irComms_handle_ir_key_message+0xaa8>)
 8008e72:	2201      	movs	r2, #1
 8008e74:	701a      	strb	r2, [r3, #0]
 8008e76:	e03f      	b.n	8008ef8 <irComms_handle_ir_key_message+0x950>
            else if ( is_our_sdc_blank(&ir_comm_ctx->sdc[0], SZ_OF_LEGACY_SDC) ||
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	3304      	adds	r3, #4
 8008e7c:	2103      	movs	r1, #3
 8008e7e:	0018      	movs	r0, r3
 8008e80:	f000 ff48 	bl	8009d14 <is_our_sdc_blank>
 8008e84:	1e03      	subs	r3, r0, #0
 8008e86:	d109      	bne.n	8008e9c <irComms_handle_ir_key_message+0x8f4>
            		is_sdc_matching( &ir_comm_ctx->sdc[0], &ir_comm_ctx->_buffers.rx_buffer[1], SZ_OF_LEGACY_SDC))
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	1d18      	adds	r0, r3, #4
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	3331      	adds	r3, #49	@ 0x31
 8008e90:	2203      	movs	r2, #3
 8008e92:	0019      	movs	r1, r3
 8008e94:	f000 fee7 	bl	8009c66 <is_sdc_matching>
 8008e98:	1e03      	subs	r3, r0, #0
            else if ( is_our_sdc_blank(&ir_comm_ctx->sdc[0], SZ_OF_LEGACY_SDC) ||
 8008e9a:	d019      	beq.n	8008ed0 <irComms_handle_ir_key_message+0x928>
                if( is_our_sdc_blank(&ir_comm_ctx->sdc[0], SZ_OF_LEGACY_SDC) )
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	3304      	adds	r3, #4
 8008ea0:	2103      	movs	r1, #3
 8008ea2:	0018      	movs	r0, r3
 8008ea4:	f000 ff36 	bl	8009d14 <is_our_sdc_blank>
 8008ea8:	1e03      	subs	r3, r0, #0
 8008eaa:	d00a      	beq.n	8008ec2 <irComms_handle_ir_key_message+0x91a>
                    memcpy(ir_comm_ctx->sdc, &ir_comm_ctx->_buffers.rx_buffer[1], 3);
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	1d18      	adds	r0, r3, #4
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	3331      	adds	r3, #49	@ 0x31
 8008eb4:	2203      	movs	r2, #3
 8008eb6:	0019      	movs	r1, r3
 8008eb8:	f001 f8f4 	bl	800a0a4 <memcpy>
                    output->data_changed.sdc = true;
 8008ebc:	683b      	ldr	r3, [r7, #0]
 8008ebe:	2201      	movs	r2, #1
 8008ec0:	701a      	strb	r2, [r3, #0]
                ir_comm_ctx->waiting_for_TOKEN_CT_WIPE_timeout_msec = WAITING_FOR_CT_WIPE_TIMEOUT_MSEC;
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	2264      	movs	r2, #100	@ 0x64
 8008ec6:	749a      	strb	r2, [r3, #18]
                ValidIRKeySeen = IR_KEY_VALID;
 8008ec8:	4b61      	ldr	r3, [pc, #388]	@ (8009050 <irComms_handle_ir_key_message+0xaa8>)
 8008eca:	2201      	movs	r2, #1
 8008ecc:	701a      	strb	r2, [r3, #0]
 8008ece:	e013      	b.n	8008ef8 <irComms_handle_ir_key_message+0x950>
                IR2_IR4_Error = IR2_WRONG_SDC;
 8008ed0:	232f      	movs	r3, #47	@ 0x2f
 8008ed2:	18fb      	adds	r3, r7, r3
 8008ed4:	2200      	movs	r2, #0
 8008ed6:	701a      	strb	r2, [r3, #0]
                IR2_IR4_DeviceState = IR2_ERROR;
 8008ed8:	230e      	movs	r3, #14
 8008eda:	18fb      	adds	r3, r7, r3
 8008edc:	2202      	movs	r2, #2
 8008ede:	701a      	strb	r2, [r3, #0]
                if (ir_comm_ctx->callbacks.smartRetail_reject_nonmatch_key_function != NULL)
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	2294      	movs	r2, #148	@ 0x94
 8008ee4:	589b      	ldr	r3, [r3, r2]
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d006      	beq.n	8008ef8 <irComms_handle_ir_key_message+0x950>
                    ir_comm_ctx->callbacks.smartRetail_reject_nonmatch_key_function(ir_comm_ctx->ir_mode);                        // call the smart retail function
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	2294      	movs	r2, #148	@ 0x94
 8008eee:	589b      	ldr	r3, [r3, r2]
 8008ef0:	687a      	ldr	r2, [r7, #4]
 8008ef2:	7892      	ldrb	r2, [r2, #2]
 8008ef4:	0010      	movs	r0, r2
 8008ef6:	4798      	blx	r3
            build_IR2_Status(ir_comm_ctx->_buffers.tx_buffer, IR2_IR4_DeviceState, IR2_IR4_Error,  ir_comm_ctx->_buffers.rx_buffer[4] + 1,IR2_IR4_Status);
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	3350      	adds	r3, #80	@ 0x50
 8008efc:	0018      	movs	r0, r3
 8008efe:	230e      	movs	r3, #14
 8008f00:	18fb      	adds	r3, r7, r3
 8008f02:	7819      	ldrb	r1, [r3, #0]
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	2234      	movs	r2, #52	@ 0x34
 8008f08:	5c9b      	ldrb	r3, [r3, r2]
 8008f0a:	3301      	adds	r3, #1
 8008f0c:	b2dc      	uxtb	r4, r3
 8008f0e:	230f      	movs	r3, #15
 8008f10:	18fb      	adds	r3, r7, r3
 8008f12:	781b      	ldrb	r3, [r3, #0]
 8008f14:	222f      	movs	r2, #47	@ 0x2f
 8008f16:	18ba      	adds	r2, r7, r2
 8008f18:	7812      	ldrb	r2, [r2, #0]
 8008f1a:	9300      	str	r3, [sp, #0]
 8008f1c:	0023      	movs	r3, r4
 8008f1e:	f000 ff7f 	bl	8009e20 <build_IR2_Status>
            ir_comm_ctx->_priv_comm_vars.last_tid = ir_comm_ctx->_buffers.rx_buffer[4] + 1;
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	2234      	movs	r2, #52	@ 0x34
 8008f26:	5c9b      	ldrb	r3, [r3, r2]
 8008f28:	3301      	adds	r3, #1
 8008f2a:	b2d9      	uxtb	r1, r3
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	2270      	movs	r2, #112	@ 0x70
 8008f30:	5499      	strb	r1, [r3, r2]
            byte_num_transmit = 6;
 8008f32:	2306      	movs	r3, #6
 8008f34:	60bb      	str	r3, [r7, #8]
        break;
 8008f36:	f000 fe07 	bl	8009b48 <irComms_handle_ir_key_message+0x15a0>
    case TOKEN_IR2_GSTAT:
        ir_comm_ctx->waiting_for_TOKEN_CT_WIPE_timeout_msec = 0; /* zero in all cases except when valid SDC is received */
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	2200      	movs	r2, #0
 8008f3e:	749a      	strb	r2, [r3, #18]
        if( ir_comm_ctx->ir_mode == IR2_MODE )
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	789b      	ldrb	r3, [r3, #2]
 8008f44:	2b02      	cmp	r3, #2
 8008f46:	d001      	beq.n	8008f4c <irComms_handle_ir_key_message+0x9a4>
 8008f48:	f000 fe00 	bl	8009b4c <irComms_handle_ir_key_message+0x15a4>
        {
            bool sendResponse;
            IR2_IR4_DeviceState = IR2_OK;
 8008f4c:	210e      	movs	r1, #14
 8008f4e:	187b      	adds	r3, r7, r1
 8008f50:	2200      	movs	r2, #0
 8008f52:	701a      	strb	r2, [r3, #0]
            IR2_IR4_Error = IR2_TIMEOUT;                                        // Preset to Timeout as SDC error will be set later
 8008f54:	232f      	movs	r3, #47	@ 0x2f
 8008f56:	18fb      	adds	r3, r7, r3
 8008f58:	2201      	movs	r2, #1
 8008f5a:	701a      	strb	r2, [r3, #0]
            IR2_IR4_Status = IR2_LOCK_UNLOCKED;                                 // This is a catch in case the callback wasn't set. This shouldn't be really used
 8008f5c:	200f      	movs	r0, #15
 8008f5e:	183b      	adds	r3, r7, r0
 8008f60:	2202      	movs	r2, #2
 8008f62:	701a      	strb	r2, [r3, #0]
            if( ir_comm_ctx->callbacks.get_IR2_info )
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	2284      	movs	r2, #132	@ 0x84
 8008f68:	589b      	ldr	r3, [r3, r2]
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d006      	beq.n	8008f7c <irComms_handle_ir_key_message+0x9d4>
            {
                ir_comm_ctx->callbacks.get_IR2_info(&IR2_IR4_Status, &IR2_IR4_DeviceState);
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	2284      	movs	r2, #132	@ 0x84
 8008f72:	589b      	ldr	r3, [r3, r2]
 8008f74:	1879      	adds	r1, r7, r1
 8008f76:	183a      	adds	r2, r7, r0
 8008f78:	0010      	movs	r0, r2
 8008f7a:	4798      	blx	r3
            }

            if( is_sdc_matching( &ir_comm_ctx->sdc[0], &ir_comm_ctx->_buffers.rx_buffer[1], SZ_OF_LEGACY_SDC))
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	1d18      	adds	r0, r3, #4
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	3331      	adds	r3, #49	@ 0x31
 8008f84:	2203      	movs	r2, #3
 8008f86:	0019      	movs	r1, r3
 8008f88:	f000 fe6d 	bl	8009c66 <is_sdc_matching>
 8008f8c:	1e03      	subs	r3, r0, #0
 8008f8e:	d004      	beq.n	8008f9a <irComms_handle_ir_key_message+0x9f2>
            {
                sendResponse = true;
 8008f90:	232d      	movs	r3, #45	@ 0x2d
 8008f92:	18fb      	adds	r3, r7, r3
 8008f94:	2201      	movs	r2, #1
 8008f96:	701a      	strb	r2, [r3, #0]
 8008f98:	e031      	b.n	8008ffe <irComms_handle_ir_key_message+0xa56>
            }
            else if( is_sdc_testKey(&ir_comm_ctx->_buffers.rx_buffer[1], SZ_OF_LEGACY_SDC) && is_our_sdc_blank(&ir_comm_ctx->sdc[0], SZ_OF_LEGACY_SDC) )
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	3331      	adds	r3, #49	@ 0x31
 8008f9e:	2103      	movs	r1, #3
 8008fa0:	0018      	movs	r0, r3
 8008fa2:	f000 fea1 	bl	8009ce8 <is_sdc_testKey>
 8008fa6:	1e03      	subs	r3, r0, #0
 8008fa8:	d00c      	beq.n	8008fc4 <irComms_handle_ir_key_message+0xa1c>
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	3304      	adds	r3, #4
 8008fae:	2103      	movs	r1, #3
 8008fb0:	0018      	movs	r0, r3
 8008fb2:	f000 feaf 	bl	8009d14 <is_our_sdc_blank>
 8008fb6:	1e03      	subs	r3, r0, #0
 8008fb8:	d004      	beq.n	8008fc4 <irComms_handle_ir_key_message+0xa1c>
            {
                sendResponse = true;
 8008fba:	232d      	movs	r3, #45	@ 0x2d
 8008fbc:	18fb      	adds	r3, r7, r3
 8008fbe:	2201      	movs	r2, #1
 8008fc0:	701a      	strb	r2, [r3, #0]
 8008fc2:	e01c      	b.n	8008ffe <irComms_handle_ir_key_message+0xa56>
            }
            else if( is_magic_key(&ir_comm_ctx->_buffers.rx_buffer[1], false ))
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	3331      	adds	r3, #49	@ 0x31
 8008fc8:	2100      	movs	r1, #0
 8008fca:	0018      	movs	r0, r3
 8008fcc:	f000 fe0c 	bl	8009be8 <is_magic_key>
 8008fd0:	1e03      	subs	r3, r0, #0
 8008fd2:	d008      	beq.n	8008fe6 <irComms_handle_ir_key_message+0xa3e>
            {
                // Note: it is expected that a key wouldn't send this after SDC reset but it does. Just reply back okay so it doesn't create an error.
                sendResponse = true;
 8008fd4:	232d      	movs	r3, #45	@ 0x2d
 8008fd6:	18fb      	adds	r3, r7, r3
 8008fd8:	2201      	movs	r2, #1
 8008fda:	701a      	strb	r2, [r3, #0]
                IR2_IR4_DeviceState = IR2_OK;
 8008fdc:	230e      	movs	r3, #14
 8008fde:	18fb      	adds	r3, r7, r3
 8008fe0:	2200      	movs	r2, #0
 8008fe2:	701a      	strb	r2, [r3, #0]
 8008fe4:	e00b      	b.n	8008ffe <irComms_handle_ir_key_message+0xa56>
            }
            else
            {
                IR2_IR4_Error = IR2_WRONG_SDC;
 8008fe6:	232f      	movs	r3, #47	@ 0x2f
 8008fe8:	18fb      	adds	r3, r7, r3
 8008fea:	2200      	movs	r2, #0
 8008fec:	701a      	strb	r2, [r3, #0]
                IR2_IR4_DeviceState = IR2_ERROR;
 8008fee:	230e      	movs	r3, #14
 8008ff0:	18fb      	adds	r3, r7, r3
 8008ff2:	2202      	movs	r2, #2
 8008ff4:	701a      	strb	r2, [r3, #0]
                sendResponse = true;
 8008ff6:	232d      	movs	r3, #45	@ 0x2d
 8008ff8:	18fb      	adds	r3, r7, r3
 8008ffa:	2201      	movs	r2, #1
 8008ffc:	701a      	strb	r2, [r3, #0]
            }
            if( sendResponse )
 8008ffe:	232d      	movs	r3, #45	@ 0x2d
 8009000:	18fb      	adds	r3, r7, r3
 8009002:	781b      	ldrb	r3, [r3, #0]
 8009004:	2b00      	cmp	r3, #0
 8009006:	d101      	bne.n	800900c <irComms_handle_ir_key_message+0xa64>
 8009008:	f000 fda0 	bl	8009b4c <irComms_handle_ir_key_message+0x15a4>
            {
                build_IR2_Status(ir_comm_ctx->_buffers.tx_buffer, IR2_IR4_DeviceState, IR2_IR4_Error,  ir_comm_ctx->_buffers.rx_buffer[4] + 1,IR2_IR4_Status);
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	3350      	adds	r3, #80	@ 0x50
 8009010:	0018      	movs	r0, r3
 8009012:	230e      	movs	r3, #14
 8009014:	18fb      	adds	r3, r7, r3
 8009016:	7819      	ldrb	r1, [r3, #0]
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	2234      	movs	r2, #52	@ 0x34
 800901c:	5c9b      	ldrb	r3, [r3, r2]
 800901e:	3301      	adds	r3, #1
 8009020:	b2dc      	uxtb	r4, r3
 8009022:	230f      	movs	r3, #15
 8009024:	18fb      	adds	r3, r7, r3
 8009026:	781b      	ldrb	r3, [r3, #0]
 8009028:	222f      	movs	r2, #47	@ 0x2f
 800902a:	18ba      	adds	r2, r7, r2
 800902c:	7812      	ldrb	r2, [r2, #0]
 800902e:	9300      	str	r3, [sp, #0]
 8009030:	0023      	movs	r3, r4
 8009032:	f000 fef5 	bl	8009e20 <build_IR2_Status>
                ir_comm_ctx->_priv_comm_vars.last_tid = ir_comm_ctx->_buffers.rx_buffer[4] + 1;
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	2234      	movs	r2, #52	@ 0x34
 800903a:	5c9b      	ldrb	r3, [r3, r2]
 800903c:	3301      	adds	r3, #1
 800903e:	b2d9      	uxtb	r1, r3
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	2270      	movs	r2, #112	@ 0x70
 8009044:	5499      	strb	r1, [r3, r2]
                byte_num_transmit = 6;
 8009046:	2306      	movs	r3, #6
 8009048:	60bb      	str	r3, [r7, #8]
            }
        }
        break;
 800904a:	f000 fd7f 	bl	8009b4c <irComms_handle_ir_key_message+0x15a4>
 800904e:	46c0      	nop			@ (mov r8, r8)
 8009050:	20000648 	.word	0x20000648
      case TOKEN_IR2_2_IR4UPGRADE:
        if( ir_comm_ctx->allow_IR_upgrade )
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	222f      	movs	r2, #47	@ 0x2f
 8009058:	5c9b      	ldrb	r3, [r3, r2]
 800905a:	2b00      	cmp	r3, #0
 800905c:	d101      	bne.n	8009062 <irComms_handle_ir_key_message+0xaba>
 800905e:	f000 fd77 	bl	8009b50 <irComms_handle_ir_key_message+0x15a8>
        {
            // We are switching to IR4 mode. The only way to go back from here is to use a factory reset or R&D key (if supported). Calling app is responsible for for writting to NVM
            // Note: IR4 Keys will only send the upgrade command if they are checked out from an OKM that is connected to Live Access so we upgrade directly to IR4_LIVE_ACCESS_MODE.
            ir_comm_ctx->ir_mode = IR4_LIVE_ACCESS_MODE;
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	2204      	movs	r2, #4
 8009066:	709a      	strb	r2, [r3, #2]
            output->data_changed.irMode = true;
 8009068:	683b      	ldr	r3, [r7, #0]
 800906a:	2201      	movs	r2, #1
 800906c:	709a      	strb	r2, [r3, #2]
            // Send an IR2 to IR4 upgrade successful message:
            ir_comm_ctx->_buffers.tx_buffer[0] = (uint8_t)TOKEN_IR2_2_IR4_SUCCESS;
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	2250      	movs	r2, #80	@ 0x50
 8009072:	21b1      	movs	r1, #177	@ 0xb1
 8009074:	5499      	strb	r1, [r3, r2]
            ir_comm_ctx->_buffers.tx_buffer[1] = ir_comm_ctx->_buffers.rx_buffer[Ir4TwoByteMsgTidIndx] + 1;
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	2231      	movs	r2, #49	@ 0x31
 800907a:	5c9b      	ldrb	r3, [r3, r2]
 800907c:	3301      	adds	r3, #1
 800907e:	b2d9      	uxtb	r1, r3
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	2251      	movs	r2, #81	@ 0x51
 8009084:	5499      	strb	r1, [r3, r2]
            ir_comm_ctx->_priv_comm_vars.last_tid = ir_comm_ctx->_buffers.tx_buffer[Ir4TwoByteMsgNumBytes];
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	2252      	movs	r2, #82	@ 0x52
 800908a:	5c99      	ldrb	r1, [r3, r2]
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	2270      	movs	r2, #112	@ 0x70
 8009090:	5499      	strb	r1, [r3, r2]
            byte_num_transmit = 2;
 8009092:	2302      	movs	r3, #2
 8009094:	60bb      	str	r3, [r7, #8]
        }
        break;
 8009096:	f000 fd5b 	bl	8009b50 <irComms_handle_ir_key_message+0x15a8>
      case TOKEN_IR2_SSN_RTL:
        // Check to see if the Serial number is set:
        if (ir_comm_ctx->is_my_sn_blank)
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	222e      	movs	r2, #46	@ 0x2e
 800909e:	5c9b      	ldrb	r3, [r3, r2]
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d019      	beq.n	80090d8 <irComms_handle_ir_key_message+0xb30>
        {
            // The flash space for the serial number is erased. We are good to go so send the response:
            ir_comm_ctx->_buffers.tx_buffer[0] = (uint8_t)TOKEN_IR2_AACK;
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	2250      	movs	r2, #80	@ 0x50
 80090a8:	21be      	movs	r1, #190	@ 0xbe
 80090aa:	5499      	strb	r1, [r3, r2]
            ir_comm_ctx->_buffers.tx_buffer[1] = (uint8_t)COM_IR2_SSN_RTL_RESP;
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	2251      	movs	r2, #81	@ 0x51
 80090b0:	21e0      	movs	r1, #224	@ 0xe0
 80090b2:	5499      	strb	r1, [r3, r2]
            ir_comm_ctx->_buffers.tx_buffer[2] = ir_comm_ctx->_buffers.rx_buffer[Ir4TwoByteMsgTidIndx] + 1;
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	2231      	movs	r2, #49	@ 0x31
 80090b8:	5c9b      	ldrb	r3, [r3, r2]
 80090ba:	3301      	adds	r3, #1
 80090bc:	b2d9      	uxtb	r1, r3
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	2252      	movs	r2, #82	@ 0x52
 80090c2:	5499      	strb	r1, [r3, r2]
            ir_comm_ctx->_priv_comm_vars.last_tid = ir_comm_ctx->_buffers.tx_buffer[Ir4TwoByteMsgNumBytes];
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	2252      	movs	r2, #82	@ 0x52
 80090c8:	5c99      	ldrb	r1, [r3, r2]
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	2270      	movs	r2, #112	@ 0x70
 80090ce:	5499      	strb	r1, [r3, r2]
            byte_num_transmit = 3;
 80090d0:	2303      	movs	r3, #3
 80090d2:	60bb      	str	r3, [r7, #8]
            ir_comm_ctx->_buffers.tx_buffer[0] = (uint8_t)TOKEN_IR1_NACK;
            ir_comm_ctx->_buffers.tx_buffer[1] = ir_comm_ctx->_buffers.rx_buffer[Ir4TwoByteMsgTidIndx] + 1;
            ir_comm_ctx->_priv_comm_vars.last_tid = ir_comm_ctx->_buffers.tx_buffer[1];
            byte_num_transmit = 2;
        }
        break;
 80090d4:	f000 fd3f 	bl	8009b56 <irComms_handle_ir_key_message+0x15ae>
            ir_comm_ctx->_buffers.tx_buffer[0] = (uint8_t)TOKEN_IR1_NACK;
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	2250      	movs	r2, #80	@ 0x50
 80090dc:	214e      	movs	r1, #78	@ 0x4e
 80090de:	5499      	strb	r1, [r3, r2]
            ir_comm_ctx->_buffers.tx_buffer[1] = ir_comm_ctx->_buffers.rx_buffer[Ir4TwoByteMsgTidIndx] + 1;
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	2231      	movs	r2, #49	@ 0x31
 80090e4:	5c9b      	ldrb	r3, [r3, r2]
 80090e6:	3301      	adds	r3, #1
 80090e8:	b2d9      	uxtb	r1, r3
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	2251      	movs	r2, #81	@ 0x51
 80090ee:	5499      	strb	r1, [r3, r2]
            ir_comm_ctx->_priv_comm_vars.last_tid = ir_comm_ctx->_buffers.tx_buffer[1];
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	2251      	movs	r2, #81	@ 0x51
 80090f4:	5c99      	ldrb	r1, [r3, r2]
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	2270      	movs	r2, #112	@ 0x70
 80090fa:	5499      	strb	r1, [r3, r2]
            byte_num_transmit = 2;
 80090fc:	2302      	movs	r3, #2
 80090fe:	60bb      	str	r3, [r7, #8]
        break;
 8009100:	f000 fd29 	bl	8009b56 <irComms_handle_ir_key_message+0x15ae>
      case TOKEN_IR2_SSN:
        // TODO: Decide if it is necessary to check serial number version here.... Does this have a checksum like Yellow box?
        if(ir_comm_ctx->is_my_sn_blank)
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	222e      	movs	r2, #46	@ 0x2e
 8009108:	5c9b      	ldrb	r3, [r3, r2]
 800910a:	2b00      	cmp	r3, #0
 800910c:	d034      	beq.n	8009178 <irComms_handle_ir_key_message+0xbd0>
        {
            // The serial number flash is ready to be written to:
            ir_comm_ctx->my_sn[0] = (uint8_t)ir_comm_ctx->product_id_product_line;
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	781a      	ldrb	r2, [r3, #0]
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	721a      	strb	r2, [r3, #8]
            ir_comm_ctx->my_sn[1] = (uint8_t)ir_comm_ctx->product_id_product_num;
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	785a      	ldrb	r2, [r3, #1]
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	725a      	strb	r2, [r3, #9]

            ir_comm_ctx->my_sn[2] = ir_comm_ctx->_buffers.rx_buffer[4];    /* CM ID */
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	2234      	movs	r2, #52	@ 0x34
 8009122:	5c9a      	ldrb	r2, [r3, r2]
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	729a      	strb	r2, [r3, #10]
            ir_comm_ctx->my_sn[3] = ir_comm_ctx->_buffers.rx_buffer[5];    /* Time (or Incremental S/N)  MSB */
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	2235      	movs	r2, #53	@ 0x35
 800912c:	5c9a      	ldrb	r2, [r3, r2]
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	72da      	strb	r2, [r3, #11]
            ir_comm_ctx->my_sn[4] = ir_comm_ctx->_buffers.rx_buffer[6];    /* Time (or Incremental S/N)      */
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	2236      	movs	r2, #54	@ 0x36
 8009136:	5c9a      	ldrb	r2, [r3, r2]
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	731a      	strb	r2, [r3, #12]
            ir_comm_ctx->my_sn[5] = ir_comm_ctx->_buffers.rx_buffer[7];    /* Time (or Incremental S/N)  LSB */
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	2237      	movs	r2, #55	@ 0x37
 8009140:	5c9a      	ldrb	r2, [r3, r2]
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	735a      	strb	r2, [r3, #13]

            output->data_changed.serialNum = true;
 8009146:	683b      	ldr	r3, [r7, #0]
 8009148:	2201      	movs	r2, #1
 800914a:	705a      	strb	r2, [r3, #1]

            ir_comm_ctx->_buffers.tx_buffer[0] = (uint8_t)TOKEN_IR1_ACK;
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	2250      	movs	r2, #80	@ 0x50
 8009150:	2141      	movs	r1, #65	@ 0x41
 8009152:	5499      	strb	r1, [r3, r2]
            ir_comm_ctx->_buffers.tx_buffer[1] = ir_comm_ctx->_priv_comm_vars.last_tid + 1;
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	2270      	movs	r2, #112	@ 0x70
 8009158:	5c9b      	ldrb	r3, [r3, r2]
 800915a:	3301      	adds	r3, #1
 800915c:	b2d9      	uxtb	r1, r3
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	2251      	movs	r2, #81	@ 0x51
 8009162:	5499      	strb	r1, [r3, r2]
            ir_comm_ctx->_priv_comm_vars.last_tid = ir_comm_ctx->_buffers.tx_buffer[1];
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	2251      	movs	r2, #81	@ 0x51
 8009168:	5c99      	ldrb	r1, [r3, r2]
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	2270      	movs	r2, #112	@ 0x70
 800916e:	5499      	strb	r1, [r3, r2]
            byte_num_transmit = 2;
 8009170:	2302      	movs	r3, #2
 8009172:	60bb      	str	r3, [r7, #8]
            ir_comm_ctx->_buffers.tx_buffer[0] = (uint8_t)TOKEN_IR1_NACK;
            ir_comm_ctx->_buffers.tx_buffer[1] = ir_comm_ctx->_priv_comm_vars.last_tid + 1;
            ir_comm_ctx->_priv_comm_vars.last_tid = ir_comm_ctx->_buffers.tx_buffer[1];
            byte_num_transmit = 2;
        }
        break;
 8009174:	f000 fcef 	bl	8009b56 <irComms_handle_ir_key_message+0x15ae>
            ir_comm_ctx->_buffers.tx_buffer[0] = (uint8_t)TOKEN_IR1_NACK;
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	2250      	movs	r2, #80	@ 0x50
 800917c:	214e      	movs	r1, #78	@ 0x4e
 800917e:	5499      	strb	r1, [r3, r2]
            ir_comm_ctx->_buffers.tx_buffer[1] = ir_comm_ctx->_priv_comm_vars.last_tid + 1;
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	2270      	movs	r2, #112	@ 0x70
 8009184:	5c9b      	ldrb	r3, [r3, r2]
 8009186:	3301      	adds	r3, #1
 8009188:	b2d9      	uxtb	r1, r3
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	2251      	movs	r2, #81	@ 0x51
 800918e:	5499      	strb	r1, [r3, r2]
            ir_comm_ctx->_priv_comm_vars.last_tid = ir_comm_ctx->_buffers.tx_buffer[1];
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	2251      	movs	r2, #81	@ 0x51
 8009194:	5c99      	ldrb	r1, [r3, r2]
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	2270      	movs	r2, #112	@ 0x70
 800919a:	5499      	strb	r1, [r3, r2]
            byte_num_transmit = 2;
 800919c:	2302      	movs	r3, #2
 800919e:	60bb      	str	r3, [r7, #8]
        break;
 80091a0:	f000 fcd9 	bl	8009b56 <irComms_handle_ir_key_message+0x15ae>
        {
            // Note: In most IR4 keys, when the WIPE SDC is sent, the key will keep sending get status requests after the wipe was acknowledged. But the time
            //  TOKEN_IR4_STAT_REQ is sent, the device has likely, in most cases, been reset to IR2 mode and this will be ignored, leading the key to NAK or buzz.
            //   The fix is in the key itself where is should act on the device sending a OKAY response after the SDC instead of ignoring it and pretending the device is busy.
            //   If you are debugging this and get here, note that this message is received but invalidated (is_valid_ir4_msg) on the reception side due to the device resetting to IR2 mode and this is an IR4 message id.
        	IR2_IR4_Error = IR2_TIMEOUT;										// Only used for error state, will be overwritten as needed.
 80091a4:	232f      	movs	r3, #47	@ 0x2f
 80091a6:	18fb      	adds	r3, r7, r3
 80091a8:	2201      	movs	r2, #1
 80091aa:	701a      	strb	r2, [r3, #0]
            IR2_IR4_Status = IR4_LOCK_STATUS_UNREPORTED;
 80091ac:	200f      	movs	r0, #15
 80091ae:	183b      	adds	r3, r7, r0
 80091b0:	2200      	movs	r2, #0
 80091b2:	701a      	strb	r2, [r3, #0]
            // Get the current lock status:
            // IR4 and Dual auth are handled special since Mark decided to overlap dual auth statuses overtop of locked/unlocked fields so this is confusing.
            //   However, the dual auth response(s) seems to be handled in replies during the SDC transfer message so just build response with normal statuses.
            if( ir_comm_ctx->callbacks.get_IR4_info )
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	2288      	movs	r2, #136	@ 0x88
 80091b8:	589b      	ldr	r3, [r3, r2]
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d007      	beq.n	80091ce <irComms_handle_ir_key_message+0xc26>
            {
            	ir_comm_ctx->callbacks.get_IR4_info(&IR2_IR4_Status, &IR2_IR4_DeviceState);
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	2288      	movs	r2, #136	@ 0x88
 80091c2:	589b      	ldr	r3, [r3, r2]
 80091c4:	220e      	movs	r2, #14
 80091c6:	18b9      	adds	r1, r7, r2
 80091c8:	183a      	adds	r2, r7, r0
 80091ca:	0010      	movs	r0, r2
 80091cc:	4798      	blx	r3
            // Production IR4 keys have a bug where they send a 3rd byte on an IR4 status request (F1802-89).
            //     So, if we immediately respond, the 0x5E response byte will be missed by the key, since it's transmit is active.
            //     So, we have to enforce a short delay when responding as a work around so ride through the majority of that 3rd byte before
            //     the front porch is turned on. Since this is a generic module, we can't delay here so calling function must be responsible for
            //     us_delay_required_before_response.
            output->us_delay_required_before_response = 2000;
 80091ce:	683b      	ldr	r3, [r7, #0]
 80091d0:	22fa      	movs	r2, #250	@ 0xfa
 80091d2:	00d2      	lsls	r2, r2, #3
 80091d4:	829a      	strh	r2, [r3, #20]

            // If in dual key mode and we have previously validated the second key, we need to clear the state back to waiting for IR1. Otherwise
            //   we must depend on the calling app to reset this on the unlock.
            if( ir_comm_ctx->ir_mode == IR4_DUAL_KEY_MODE && ir_comm_ctx->ir4_data.IR4_TwoKeyStatus == Ir4TwoKeyKey2Validated)
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	789b      	ldrb	r3, [r3, #2]
 80091da:	2b05      	cmp	r3, #5
 80091dc:	d106      	bne.n	80091ec <irComms_handle_ir_key_message+0xc44>
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	7f1b      	ldrb	r3, [r3, #28]
 80091e2:	2b03      	cmp	r3, #3
 80091e4:	d102      	bne.n	80091ec <irComms_handle_ir_key_message+0xc44>
            {
                ir_comm_ctx->ir4_data.IR4_TwoKeyStatus = Ir4TwoKeyWaiting4Key1;
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	2201      	movs	r2, #1
 80091ea:	771a      	strb	r2, [r3, #28]
            }

            // build the IR4 status response message with the lock status:
            build_IR4_Status(ir_comm_ctx->_buffers.tx_buffer, IR2_IR4_DeviceState, IR2_IR4_Status, IR2_IR4_Error, &ir_comm_ctx->_priv_comm_vars.last_tid, &byte_num_transmit);
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	3350      	adds	r3, #80	@ 0x50
 80091f0:	0018      	movs	r0, r3
 80091f2:	230e      	movs	r3, #14
 80091f4:	18fb      	adds	r3, r7, r3
 80091f6:	7819      	ldrb	r1, [r3, #0]
 80091f8:	230f      	movs	r3, #15
 80091fa:	18fb      	adds	r3, r7, r3
 80091fc:	781c      	ldrb	r4, [r3, #0]
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	3370      	adds	r3, #112	@ 0x70
 8009202:	222f      	movs	r2, #47	@ 0x2f
 8009204:	18ba      	adds	r2, r7, r2
 8009206:	7815      	ldrb	r5, [r2, #0]
 8009208:	2208      	movs	r2, #8
 800920a:	18ba      	adds	r2, r7, r2
 800920c:	9201      	str	r2, [sp, #4]
 800920e:	9300      	str	r3, [sp, #0]
 8009210:	002b      	movs	r3, r5
 8009212:	0022      	movs	r2, r4
 8009214:	f000 fe52 	bl	8009ebc <build_IR4_Status>
        }
        break;
 8009218:	f000 fc9d 	bl	8009b56 <irComms_handle_ir_key_message+0x15ae>
      case TOKEN_IR4_TRANS_SDC:
    	IR2_IR4_Error = IR2_TIMEOUT;											// Only used for error state, will be overwritten as needed.
 800921c:	232f      	movs	r3, #47	@ 0x2f
 800921e:	18fb      	adds	r3, r7, r3
 8009220:	2201      	movs	r2, #1
 8009222:	701a      	strb	r2, [r3, #0]
        if(( ir_comm_ctx->ir_mode == IR4_NON_LIVE_ACCESS_MODE) || ( ir_comm_ctx->ir_mode == IR4_LIVE_ACCESS_MODE) || ( ir_comm_ctx->ir_mode ==  IR4_DUAL_KEY_MODE ))
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	789b      	ldrb	r3, [r3, #2]
 8009228:	2b06      	cmp	r3, #6
 800922a:	d008      	beq.n	800923e <irComms_handle_ir_key_message+0xc96>
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	789b      	ldrb	r3, [r3, #2]
 8009230:	2b04      	cmp	r3, #4
 8009232:	d004      	beq.n	800923e <irComms_handle_ir_key_message+0xc96>
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	789b      	ldrb	r3, [r3, #2]
 8009238:	2b05      	cmp	r3, #5
 800923a:	d000      	beq.n	800923e <irComms_handle_ir_key_message+0xc96>
 800923c:	e2dc      	b.n	80097f8 <irComms_handle_ir_key_message+0x1250>
            /* Handle the IR4 TRANS SDC message. The fields of the message are as follows:
            * D4 SDC2 SDC1 SDC0 Key_state0 Key_ATO Key_OPT Random Random Random
            * UID3 UID2 UID1 UID0 Time3 Time2 Time1 Time0
            * SN7 SN6 SN5 SN4 SN3 SN2 SN1 SN0 TID CS
            */
            IR2_IR4_Status = IR4_LOCK_STATUS_UNREPORTED;
 800923e:	240f      	movs	r4, #15
 8009240:	193b      	adds	r3, r7, r4
 8009242:	2200      	movs	r2, #0
 8009244:	701a      	strb	r2, [r3, #0]
            ir_comm_ctx->_priv_comm_vars.sdc_decoder_key1 = ir_comm_ctx->_buffers.rx_buffer[Ir4TransSdcTime2Indx];                          // use the 2nd LSByte of time for SDC decoder key0
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	223f      	movs	r2, #63	@ 0x3f
 800924a:	5c99      	ldrb	r1, [r3, r2]
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	2274      	movs	r2, #116	@ 0x74
 8009250:	5499      	strb	r1, [r3, r2]
            decode_sdc(&ir_comm_ctx->_buffers.rx_buffer[Ir4TransSdc_SDC2Indx], SZ_OF_IR4_SDC, ir_comm_ctx->_priv_comm_vars.sdc_decoder_key1,  ir_comm_ctx->my_sn[5]);
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	3331      	adds	r3, #49	@ 0x31
 8009256:	0018      	movs	r0, r3
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	2274      	movs	r2, #116	@ 0x74
 800925c:	5c9a      	ldrb	r2, [r3, r2]
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	7b5b      	ldrb	r3, [r3, #13]
 8009262:	2103      	movs	r1, #3
 8009264:	f000 fc80 	bl	8009b68 <decode_sdc>

            if(is_sdc_testKey(&ir_comm_ctx->_buffers.rx_buffer[Ir4TransSdc_SDC2Indx], SZ_OF_IR4_SDC) &&
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	3331      	adds	r3, #49	@ 0x31
 800926c:	2103      	movs	r1, #3
 800926e:	0018      	movs	r0, r3
 8009270:	f000 fd3a 	bl	8009ce8 <is_sdc_testKey>
 8009274:	1e03      	subs	r3, r0, #0
 8009276:	d035      	beq.n	80092e4 <irComms_handle_ir_key_message+0xd3c>
               is_our_sdc_blank(&ir_comm_ctx->sdc[0], SZ_OF_IR4_SDC) &&
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	3304      	adds	r3, #4
 800927c:	2103      	movs	r1, #3
 800927e:	0018      	movs	r0, r3
 8009280:	f000 fd48 	bl	8009d14 <is_our_sdc_blank>
 8009284:	1e03      	subs	r3, r0, #0
            if(is_sdc_testKey(&ir_comm_ctx->_buffers.rx_buffer[Ir4TransSdc_SDC2Indx], SZ_OF_IR4_SDC) &&
 8009286:	d02d      	beq.n	80092e4 <irComms_handle_ir_key_message+0xd3c>
               ((IR4_NON_LIVE_ACCESS_MODE == ir_comm_ctx->ir_mode))) // don't allow Test Keys to work outside Non-Live Access mode
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	789b      	ldrb	r3, [r3, #2]
               is_our_sdc_blank(&ir_comm_ctx->sdc[0], SZ_OF_IR4_SDC) &&
 800928c:	2b06      	cmp	r3, #6
 800928e:	d129      	bne.n	80092e4 <irComms_handle_ir_key_message+0xd3c>
            {
                // IR2 comms and locks: test keys are all 0xFF, not 0x00
                // IR4 test keys also have 0xFFs in all three SDC bytes.
                ValidIRKeySeen   = IR_KEY_VALID;
 8009290:	4bb8      	ldr	r3, [pc, #736]	@ (8009574 <irComms_handle_ir_key_message+0xfcc>)
 8009292:	2201      	movs	r2, #1
 8009294:	701a      	strb	r2, [r3, #0]

                // The response we immediately send has to have the status (okay/busy/err) so there's no time for the application to act on seeing a key.
                //   we have to make the immediate assumption that we are busy until the key sends a get status later.
                IR2_IR4_DeviceState = IR4_DeviceBusy;
 8009296:	230e      	movs	r3, #14
 8009298:	18fb      	adds	r3, r7, r3
 800929a:	2201      	movs	r2, #1
 800929c:	701a      	strb	r2, [r3, #0]
                if(ir_comm_ctx->callbacks.get_IR4_info)
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	2288      	movs	r2, #136	@ 0x88
 80092a2:	589b      	ldr	r3, [r3, r2]
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d006      	beq.n	80092b6 <irComms_handle_ir_key_message+0xd0e>
                {
                	ir_comm_ctx->callbacks.get_IR4_info(&IR2_IR4_Status, NULL);
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	2288      	movs	r2, #136	@ 0x88
 80092ac:	589b      	ldr	r3, [r3, r2]
 80092ae:	193a      	adds	r2, r7, r4
 80092b0:	2100      	movs	r1, #0
 80092b2:	0010      	movs	r0, r2
 80092b4:	4798      	blx	r3
                }
                build_IR4_Status(ir_comm_ctx->_buffers.tx_buffer, IR2_IR4_DeviceState, IR2_IR4_Status, IR2_IR4_Error, &ir_comm_ctx->_priv_comm_vars.last_tid, &byte_num_transmit);
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	3350      	adds	r3, #80	@ 0x50
 80092ba:	0018      	movs	r0, r3
 80092bc:	230e      	movs	r3, #14
 80092be:	18fb      	adds	r3, r7, r3
 80092c0:	7819      	ldrb	r1, [r3, #0]
 80092c2:	230f      	movs	r3, #15
 80092c4:	18fb      	adds	r3, r7, r3
 80092c6:	781c      	ldrb	r4, [r3, #0]
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	3370      	adds	r3, #112	@ 0x70
 80092cc:	222f      	movs	r2, #47	@ 0x2f
 80092ce:	18ba      	adds	r2, r7, r2
 80092d0:	7815      	ldrb	r5, [r2, #0]
 80092d2:	2208      	movs	r2, #8
 80092d4:	18ba      	adds	r2, r7, r2
 80092d6:	9201      	str	r2, [sp, #4]
 80092d8:	9300      	str	r3, [sp, #0]
 80092da:	002b      	movs	r3, r5
 80092dc:	0022      	movs	r2, r4
 80092de:	f000 fded 	bl	8009ebc <build_IR4_Status>
 80092e2:	e288      	b.n	80097f6 <irComms_handle_ir_key_message+0x124e>
            }
            else if( is_magic_key( &ir_comm_ctx->_buffers.rx_buffer[Ir4TransSdc_SDC2Indx], false ))
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	3331      	adds	r3, #49	@ 0x31
 80092e8:	2100      	movs	r1, #0
 80092ea:	0018      	movs	r0, r3
 80092ec:	f000 fc7c 	bl	8009be8 <is_magic_key>
 80092f0:	1e03      	subs	r3, r0, #0
 80092f2:	d046      	beq.n	8009382 <irComms_handle_ir_key_message+0xdda>
            {
                if(ir_comm_ctx->R_n_D_Key_supported)
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	222c      	movs	r2, #44	@ 0x2c
 80092f8:	5c9b      	ldrb	r3, [r3, r2]
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d100      	bne.n	8009300 <irComms_handle_ir_key_message+0xd58>
 80092fe:	e27f      	b.n	8009800 <irComms_handle_ir_key_message+0x1258>
                    // if our SDC is non-zero
                    // Annoyingly, current gen IR4 wiper keys will ignore this inital status if it's anythging but an error.
                    // By the time it sends another status request (100ms), out device has already reset the SDC and IR mode.
                    // If you reset to IR2 mode, then the following Get status request will be ignored and the Wiper key eventually NAK's.
                    // It's a bug in the IR4 Key - see line 2800ish of IR_Comms.c of the IR4 Key.
                    if(is_our_sdc_blank(&ir_comm_ctx->sdc[0], SZ_OF_IR4_SDC) == false)
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	3304      	adds	r3, #4
 8009304:	2103      	movs	r1, #3
 8009306:	0018      	movs	r0, r3
 8009308:	f000 fd04 	bl	8009d14 <is_our_sdc_blank>
 800930c:	0003      	movs	r3, r0
 800930e:	001a      	movs	r2, r3
 8009310:	2301      	movs	r3, #1
 8009312:	4053      	eors	r3, r2
 8009314:	b2db      	uxtb	r3, r3
 8009316:	2b00      	cmp	r3, #0
 8009318:	d002      	beq.n	8009320 <irComms_handle_ir_key_message+0xd78>
                    {
                        ValidIRKeySeen   = IR_KEY_MAGIC;
 800931a:	4b96      	ldr	r3, [pc, #600]	@ (8009574 <irComms_handle_ir_key_message+0xfcc>)
 800931c:	2202      	movs	r2, #2
 800931e:	701a      	strb	r2, [r3, #0]
                    }
                    if( ir_comm_ctx->callbacks.magicKey_cb != NULL )
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	2298      	movs	r2, #152	@ 0x98
 8009324:	589b      	ldr	r3, [r3, r2]
 8009326:	2b00      	cmp	r3, #0
 8009328:	d003      	beq.n	8009332 <irComms_handle_ir_key_message+0xd8a>
                    {
                        ir_comm_ctx->callbacks.magicKey_cb();
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	2298      	movs	r2, #152	@ 0x98
 800932e:	589b      	ldr	r3, [r3, r2]
 8009330:	4798      	blx	r3
                    }
                    IR2_IR4_DeviceState = IR4_DeviceOk;								// Report Okay for Wiper Key since it doesn't drive the motor
 8009332:	230e      	movs	r3, #14
 8009334:	18fb      	adds	r3, r7, r3
 8009336:	2200      	movs	r2, #0
 8009338:	701a      	strb	r2, [r3, #0]
                    if(ir_comm_ctx->callbacks.get_IR4_info)
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	2288      	movs	r2, #136	@ 0x88
 800933e:	589b      	ldr	r3, [r3, r2]
 8009340:	2b00      	cmp	r3, #0
 8009342:	d007      	beq.n	8009354 <irComms_handle_ir_key_message+0xdac>
                    {
                    	ir_comm_ctx->callbacks.get_IR4_info(&IR2_IR4_Status, NULL);
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	2288      	movs	r2, #136	@ 0x88
 8009348:	589b      	ldr	r3, [r3, r2]
 800934a:	220f      	movs	r2, #15
 800934c:	18ba      	adds	r2, r7, r2
 800934e:	2100      	movs	r1, #0
 8009350:	0010      	movs	r0, r2
 8009352:	4798      	blx	r3
                    }
                    build_IR4_Status(ir_comm_ctx->_buffers.tx_buffer, IR2_IR4_DeviceState, IR2_IR4_Status, IR2_IR4_Error, &ir_comm_ctx->_priv_comm_vars.last_tid, &byte_num_transmit);
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	3350      	adds	r3, #80	@ 0x50
 8009358:	0018      	movs	r0, r3
 800935a:	230e      	movs	r3, #14
 800935c:	18fb      	adds	r3, r7, r3
 800935e:	7819      	ldrb	r1, [r3, #0]
 8009360:	230f      	movs	r3, #15
 8009362:	18fb      	adds	r3, r7, r3
 8009364:	781c      	ldrb	r4, [r3, #0]
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	3370      	adds	r3, #112	@ 0x70
 800936a:	222f      	movs	r2, #47	@ 0x2f
 800936c:	18ba      	adds	r2, r7, r2
 800936e:	7815      	ldrb	r5, [r2, #0]
 8009370:	2208      	movs	r2, #8
 8009372:	18ba      	adds	r2, r7, r2
 8009374:	9201      	str	r2, [sp, #4]
 8009376:	9300      	str	r3, [sp, #0]
 8009378:	002b      	movs	r3, r5
 800937a:	0022      	movs	r2, r4
 800937c:	f000 fd9e 	bl	8009ebc <build_IR4_Status>
            if(is_sdc_testKey(&ir_comm_ctx->_buffers.rx_buffer[Ir4TransSdc_SDC2Indx], SZ_OF_IR4_SDC) &&
 8009380:	e23e      	b.n	8009800 <irComms_handle_ir_key_message+0x1258>
                }
            }
            // if our SDC is zero or we receive a matching (non-magic) SDC
            else if( is_sdc_matching( &ir_comm_ctx->sdc[0], &ir_comm_ctx->_buffers.rx_buffer[Ir4TransSdc_SDC2Indx], SZ_OF_IR4_SDC) || is_our_sdc_blank( &ir_comm_ctx->sdc[0], SZ_OF_IR4_SDC ))
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	1d18      	adds	r0, r3, #4
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	3331      	adds	r3, #49	@ 0x31
 800938a:	2203      	movs	r2, #3
 800938c:	0019      	movs	r1, r3
 800938e:	f000 fc6a 	bl	8009c66 <is_sdc_matching>
 8009392:	1e03      	subs	r3, r0, #0
 8009394:	d108      	bne.n	80093a8 <irComms_handle_ir_key_message+0xe00>
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	3304      	adds	r3, #4
 800939a:	2103      	movs	r1, #3
 800939c:	0018      	movs	r0, r3
 800939e:	f000 fcb9 	bl	8009d14 <is_our_sdc_blank>
 80093a2:	1e03      	subs	r3, r0, #0
 80093a4:	d100      	bne.n	80093a8 <irComms_handle_ir_key_message+0xe00>
 80093a6:	e1fa      	b.n	800979e <irComms_handle_ir_key_message+0x11f6>
            {
                const bool nonZeroUidFound = (ir4_check_userid_blank(&ir_comm_ctx->_buffers.rx_buffer[Ir4TransSdcUid3Indx]) == false);
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	333a      	adds	r3, #58	@ 0x3a
 80093ac:	0018      	movs	r0, r3
 80093ae:	f000 fdd0 	bl	8009f52 <ir4_check_userid_blank>
 80093b2:	0003      	movs	r3, r0
 80093b4:	1e5a      	subs	r2, r3, #1
 80093b6:	4193      	sbcs	r3, r2
 80093b8:	b2db      	uxtb	r3, r3
 80093ba:	2201      	movs	r2, #1
 80093bc:	4053      	eors	r3, r2
 80093be:	b2db      	uxtb	r3, r3
 80093c0:	001a      	movs	r2, r3
 80093c2:	2423      	movs	r4, #35	@ 0x23
 80093c4:	193b      	adds	r3, r7, r4
 80093c6:	701a      	strb	r2, [r3, #0]
 80093c8:	781a      	ldrb	r2, [r3, #0]
 80093ca:	2101      	movs	r1, #1
 80093cc:	400a      	ands	r2, r1
 80093ce:	701a      	strb	r2, [r3, #0]

                /* If this unit currently does not have its SDC set (SDC is all zeros)
                * and the message does not contain the SDC for a magic key
                * set the SDC in RAM and set the flag to have it stored in flash:
                */
                if(is_our_sdc_blank( &ir_comm_ctx->sdc[0], SZ_OF_IR4_SDC ) &&
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	3304      	adds	r3, #4
 80093d4:	2103      	movs	r1, #3
 80093d6:	0018      	movs	r0, r3
 80093d8:	f000 fc9c 	bl	8009d14 <is_our_sdc_blank>
 80093dc:	1e03      	subs	r3, r0, #0
 80093de:	d01f      	beq.n	8009420 <irComms_handle_ir_key_message+0xe78>
                   !is_magic_key( &ir_comm_ctx->_buffers.rx_buffer[Ir4TransSdc_SDC2Indx], false) &&
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	3331      	adds	r3, #49	@ 0x31
 80093e4:	2100      	movs	r1, #0
 80093e6:	0018      	movs	r0, r3
 80093e8:	f000 fbfe 	bl	8009be8 <is_magic_key>
 80093ec:	0003      	movs	r3, r0
 80093ee:	001a      	movs	r2, r3
 80093f0:	2301      	movs	r3, #1
 80093f2:	4053      	eors	r3, r2
 80093f4:	b2db      	uxtb	r3, r3
                if(is_our_sdc_blank( &ir_comm_ctx->sdc[0], SZ_OF_IR4_SDC ) &&
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d012      	beq.n	8009420 <irComms_handle_ir_key_message+0xe78>
                   ((IR4_NON_LIVE_ACCESS_MODE == ir_comm_ctx->ir_mode) || nonZeroUidFound)) // it's ok if we're not in Live Access Mode, but if we are then only work with Keys that are in Live Access Mode (i.e. that have a nonzero UID)
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	789b      	ldrb	r3, [r3, #2]
                   !is_magic_key( &ir_comm_ctx->_buffers.rx_buffer[Ir4TransSdc_SDC2Indx], false) &&
 80093fe:	2b06      	cmp	r3, #6
 8009400:	d003      	beq.n	800940a <irComms_handle_ir_key_message+0xe62>
                   ((IR4_NON_LIVE_ACCESS_MODE == ir_comm_ctx->ir_mode) || nonZeroUidFound)) // it's ok if we're not in Live Access Mode, but if we are then only work with Keys that are in Live Access Mode (i.e. that have a nonzero UID)
 8009402:	193b      	adds	r3, r7, r4
 8009404:	781b      	ldrb	r3, [r3, #0]
 8009406:	2b00      	cmp	r3, #0
 8009408:	d00a      	beq.n	8009420 <irComms_handle_ir_key_message+0xe78>
                {
                    /// set our SDC in RAM
                    memcpy(ir_comm_ctx->sdc, &ir_comm_ctx->_buffers.rx_buffer[1], 3);
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	1d18      	adds	r0, r3, #4
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	3331      	adds	r3, #49	@ 0x31
 8009412:	2203      	movs	r2, #3
 8009414:	0019      	movs	r1, r3
 8009416:	f000 fe45 	bl	800a0a4 <memcpy>
                    output->data_changed.sdc = true;
 800941a:	683b      	ldr	r3, [r7, #0]
 800941c:	2201      	movs	r2, #1
 800941e:	701a      	strb	r2, [r3, #0]
                }


                switch (ir_comm_ctx->_buffers.rx_buffer[Ir4TransSdcKeyStateIndx])
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	2234      	movs	r2, #52	@ 0x34
 8009424:	5c9b      	ldrb	r3, [r3, r2]
 8009426:	2b03      	cmp	r3, #3
 8009428:	d100      	bne.n	800942c <irComms_handle_ir_key_message+0xe84>
 800942a:	e18c      	b.n	8009746 <irComms_handle_ir_key_message+0x119e>
 800942c:	dd00      	ble.n	8009430 <irComms_handle_ir_key_message+0xe88>
 800942e:	e19f      	b.n	8009770 <irComms_handle_ir_key_message+0x11c8>
 8009430:	2b01      	cmp	r3, #1
 8009432:	d003      	beq.n	800943c <irComms_handle_ir_key_message+0xe94>
 8009434:	2b02      	cmp	r3, #2
 8009436:	d100      	bne.n	800943a <irComms_handle_ir_key_message+0xe92>
 8009438:	e076      	b.n	8009528 <irComms_handle_ir_key_message+0xf80>
 800943a:	e199      	b.n	8009770 <irComms_handle_ir_key_message+0x11c8>
                {
                    case SINGLE_KEY_REQ:
                        if ( (ir_comm_ctx->ir_mode == IR4_NON_LIVE_ACCESS_MODE && nonZeroUidFound == false ) || (nonZeroUidFound == true ) )
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	789b      	ldrb	r3, [r3, #2]
 8009440:	2b06      	cmp	r3, #6
 8009442:	d107      	bne.n	8009454 <irComms_handle_ir_key_message+0xeac>
 8009444:	2323      	movs	r3, #35	@ 0x23
 8009446:	18fb      	adds	r3, r7, r3
 8009448:	781b      	ldrb	r3, [r3, #0]
 800944a:	2201      	movs	r2, #1
 800944c:	4053      	eors	r3, r2
 800944e:	b2db      	uxtb	r3, r3
 8009450:	2b00      	cmp	r3, #0
 8009452:	d104      	bne.n	800945e <irComms_handle_ir_key_message+0xeb6>
 8009454:	2323      	movs	r3, #35	@ 0x23
 8009456:	18fb      	adds	r3, r7, r3
 8009458:	781b      	ldrb	r3, [r3, #0]
 800945a:	2b00      	cmp	r3, #0
 800945c:	d04a      	beq.n	80094f4 <irComms_handle_ir_key_message+0xf4c>
                        {
                            if( ir_comm_ctx->ir_mode == IR4_DUAL_KEY_MODE)
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	789b      	ldrb	r3, [r3, #2]
 8009462:	2b05      	cmp	r3, #5
 8009464:	d10c      	bne.n	8009480 <irComms_handle_ir_key_message+0xed8>
                            {
                                // put the lock back into single key live access mode:
                                ir_comm_ctx->ir_mode = IR4_LIVE_ACCESS_MODE;
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	2204      	movs	r2, #4
 800946a:	709a      	strb	r2, [r3, #2]
                                output->data_changed.irMode = true;
 800946c:	683b      	ldr	r3, [r7, #0]
 800946e:	2201      	movs	r2, #1
 8009470:	709a      	strb	r2, [r3, #2]
                                // Make sure that the two key status is set to "not active".
                                ir_comm_ctx->ir4_data.IR4_TwoKeyStatus = Ir4TwoKeyNotActive;
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	2200      	movs	r2, #0
 8009476:	771a      	strb	r2, [r3, #28]
                                output->data_changed.IR4_DualAuthState = true;
 8009478:	683b      	ldr	r3, [r7, #0]
 800947a:	2201      	movs	r2, #1
 800947c:	719a      	strb	r2, [r3, #6]
 800947e:	e00e      	b.n	800949e <irComms_handle_ir_key_message+0xef6>
                            }
                            else if( ir_comm_ctx->ir_mode == IR4_NON_LIVE_ACCESS_MODE && nonZeroUidFound )
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	789b      	ldrb	r3, [r3, #2]
 8009484:	2b06      	cmp	r3, #6
 8009486:	d10a      	bne.n	800949e <irComms_handle_ir_key_message+0xef6>
 8009488:	2323      	movs	r3, #35	@ 0x23
 800948a:	18fb      	adds	r3, r7, r3
 800948c:	781b      	ldrb	r3, [r3, #0]
 800948e:	2b00      	cmp	r3, #0
 8009490:	d005      	beq.n	800949e <irComms_handle_ir_key_message+0xef6>
                            {
                                // put the lock back into single key live access mode:
                                ir_comm_ctx->ir_mode = IR4_LIVE_ACCESS_MODE;
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	2204      	movs	r2, #4
 8009496:	709a      	strb	r2, [r3, #2]
                                output->data_changed.irMode = true;
 8009498:	683b      	ldr	r3, [r7, #0]
 800949a:	2201      	movs	r2, #1
 800949c:	709a      	strb	r2, [r3, #2]
                            }

                            // The locks ir mode is IR4_LIVE_ACCESS_MODE and the key has a valid SDC We can do the unlock.
                            ValidIRKeySeen = IR_KEY_VALID;
 800949e:	4b35      	ldr	r3, [pc, #212]	@ (8009574 <irComms_handle_ir_key_message+0xfcc>)
 80094a0:	2201      	movs	r2, #1
 80094a2:	701a      	strb	r2, [r3, #0]
                            // The response we immediately send has to have the status (okay/busy/err) so there's no time for the application to act on seeing a key.
                            //   we have to make the immediate assumption that we are busy until the key sends a get status later.
                            IR2_IR4_DeviceState = IR4_DeviceBusy;
 80094a4:	230e      	movs	r3, #14
 80094a6:	18fb      	adds	r3, r7, r3
 80094a8:	2201      	movs	r2, #1
 80094aa:	701a      	strb	r2, [r3, #0]
                            if(ir_comm_ctx->callbacks.get_IR4_info)
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	2288      	movs	r2, #136	@ 0x88
 80094b0:	589b      	ldr	r3, [r3, r2]
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d007      	beq.n	80094c6 <irComms_handle_ir_key_message+0xf1e>
                            {
                            	ir_comm_ctx->callbacks.get_IR4_info(&IR2_IR4_Status, NULL);
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	2288      	movs	r2, #136	@ 0x88
 80094ba:	589b      	ldr	r3, [r3, r2]
 80094bc:	220f      	movs	r2, #15
 80094be:	18ba      	adds	r2, r7, r2
 80094c0:	2100      	movs	r1, #0
 80094c2:	0010      	movs	r0, r2
 80094c4:	4798      	blx	r3
                            }
                            build_IR4_Status(ir_comm_ctx->_buffers.tx_buffer, IR2_IR4_DeviceState, IR2_IR4_Status, IR2_IR4_Error, &ir_comm_ctx->_priv_comm_vars.last_tid, &byte_num_transmit);
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	3350      	adds	r3, #80	@ 0x50
 80094ca:	0018      	movs	r0, r3
 80094cc:	230e      	movs	r3, #14
 80094ce:	18fb      	adds	r3, r7, r3
 80094d0:	7819      	ldrb	r1, [r3, #0]
 80094d2:	230f      	movs	r3, #15
 80094d4:	18fb      	adds	r3, r7, r3
 80094d6:	781c      	ldrb	r4, [r3, #0]
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	3370      	adds	r3, #112	@ 0x70
 80094dc:	222f      	movs	r2, #47	@ 0x2f
 80094de:	18ba      	adds	r2, r7, r2
 80094e0:	7815      	ldrb	r5, [r2, #0]
 80094e2:	2208      	movs	r2, #8
 80094e4:	18ba      	adds	r2, r7, r2
 80094e6:	9201      	str	r2, [sp, #4]
 80094e8:	9300      	str	r3, [sp, #0]
 80094ea:	002b      	movs	r3, r5
 80094ec:	0022      	movs	r2, r4
 80094ee:	f000 fce5 	bl	8009ebc <build_IR4_Status>
                            ir_comm_ctx->_buffers.tx_buffer[0] = (uint8_t)TOKEN_IR3_AACK_IR4_NACK;
                            ir_comm_ctx->_buffers.tx_buffer[1] = ir_comm_ctx->_priv_comm_vars.last_tid + 1;
                            ir_comm_ctx->_priv_comm_vars.last_tid += 1;
                            byte_num_transmit = 2;
                        }
                        break;
 80094f2:	e153      	b.n	800979c <irComms_handle_ir_key_message+0x11f4>
                            ValidIRKeySeen = IR_KEY_INVALID;
 80094f4:	4b1f      	ldr	r3, [pc, #124]	@ (8009574 <irComms_handle_ir_key_message+0xfcc>)
 80094f6:	2200      	movs	r2, #0
 80094f8:	701a      	strb	r2, [r3, #0]
                            ir_comm_ctx->_buffers.tx_buffer[0] = (uint8_t)TOKEN_IR3_AACK_IR4_NACK;
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	2250      	movs	r2, #80	@ 0x50
 80094fe:	21a5      	movs	r1, #165	@ 0xa5
 8009500:	5499      	strb	r1, [r3, r2]
                            ir_comm_ctx->_buffers.tx_buffer[1] = ir_comm_ctx->_priv_comm_vars.last_tid + 1;
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	2270      	movs	r2, #112	@ 0x70
 8009506:	5c9b      	ldrb	r3, [r3, r2]
 8009508:	3301      	adds	r3, #1
 800950a:	b2d9      	uxtb	r1, r3
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	2251      	movs	r2, #81	@ 0x51
 8009510:	5499      	strb	r1, [r3, r2]
                            ir_comm_ctx->_priv_comm_vars.last_tid += 1;
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	2270      	movs	r2, #112	@ 0x70
 8009516:	5c9b      	ldrb	r3, [r3, r2]
 8009518:	3301      	adds	r3, #1
 800951a:	b2d9      	uxtb	r1, r3
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	2270      	movs	r2, #112	@ 0x70
 8009520:	5499      	strb	r1, [r3, r2]
                            byte_num_transmit = 2;
 8009522:	2302      	movs	r3, #2
 8009524:	60bb      	str	r3, [r7, #8]
                        break;
 8009526:	e139      	b.n	800979c <irComms_handle_ir_key_message+0x11f4>
                    case DUAL_KEY_REQ:
                        // Two keys are required.
                        // Decide of the lock should accept this message. There should always be a user ID for Dual Auth since it's triggered from Live Access
                        if (true == nonZeroUidFound)
 8009528:	2323      	movs	r3, #35	@ 0x23
 800952a:	18fb      	adds	r3, r7, r3
 800952c:	781b      	ldrb	r3, [r3, #0]
 800952e:	2b00      	cmp	r3, #0
 8009530:	d100      	bne.n	8009534 <irComms_handle_ir_key_message+0xf8c>
 8009532:	e132      	b.n	800979a <irComms_handle_ir_key_message+0x11f2>
                            // We've got a valid SDC and a non-zero UID
                            // If the locks IR mode is still live access mode it must be changed to dual key mode.
                            // This is how this unit gets locked into dual key mode. Note that the only way to
                            // get out of dual key mode is to use a "magic key" to wipe the units flash (except for the
                            // serial number).
                            if ( ir_comm_ctx->ir_mode == IR4_LIVE_ACCESS_MODE || ir_comm_ctx->ir_mode == IR4_NON_LIVE_ACCESS_MODE)
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	789b      	ldrb	r3, [r3, #2]
 8009538:	2b04      	cmp	r3, #4
 800953a:	d003      	beq.n	8009544 <irComms_handle_ir_key_message+0xf9c>
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	789b      	ldrb	r3, [r3, #2]
 8009540:	2b06      	cmp	r3, #6
 8009542:	d105      	bne.n	8009550 <irComms_handle_ir_key_message+0xfa8>
                            {
                                ir_comm_ctx->ir_mode = IR4_DUAL_KEY_MODE;
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	2205      	movs	r2, #5
 8009548:	709a      	strb	r2, [r3, #2]
                                output->data_changed.irMode = true;
 800954a:	683b      	ldr	r3, [r7, #0]
 800954c:	2201      	movs	r2, #1
 800954e:	709a      	strb	r2, [r3, #2]
                            }

                            // Figure out if this is the first or the second key.
                            uint32_t loopCnt = 0;
 8009550:	2300      	movs	r3, #0
 8009552:	62bb      	str	r3, [r7, #40]	@ 0x28
                            do
                            {
                                switch (ir_comm_ctx->ir4_data.IR4_TwoKeyStatus)
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	7f1b      	ldrb	r3, [r3, #28]
 8009558:	2b03      	cmp	r3, #3
 800955a:	d100      	bne.n	800955e <irComms_handle_ir_key_message+0xfb6>
 800955c:	e0de      	b.n	800971c <irComms_handle_ir_key_message+0x1174>
 800955e:	dd00      	ble.n	8009562 <irComms_handle_ir_key_message+0xfba>
 8009560:	e0e3      	b.n	800972a <irComms_handle_ir_key_message+0x1182>
 8009562:	2b01      	cmp	r3, #1
 8009564:	dc02      	bgt.n	800956c <irComms_handle_ir_key_message+0xfc4>
 8009566:	2b00      	cmp	r3, #0
 8009568:	da06      	bge.n	8009578 <irComms_handle_ir_key_message+0xfd0>
 800956a:	e0de      	b.n	800972a <irComms_handle_ir_key_message+0x1182>
 800956c:	2b02      	cmp	r3, #2
 800956e:	d056      	beq.n	800961e <irComms_handle_ir_key_message+0x1076>
 8009570:	e0db      	b.n	800972a <irComms_handle_ir_key_message+0x1182>
 8009572:	46c0      	nop			@ (mov r8, r8)
 8009574:	20000648 	.word	0x20000648
                                {
                                case Ir4TwoKeyNotActive:
                                case Ir4TwoKeyWaiting4Key1:
                                    // Set two key status to waiting for key two and save it in flash
                                    ir_comm_ctx->ir4_data.IR4_TwoKeyStatus = Ir4TwoKeyWaiting4Key2;
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	2202      	movs	r2, #2
 800957c:	771a      	strb	r2, [r3, #28]
                                    output->data_changed.IR4_DualAuthState = true;
 800957e:	683b      	ldr	r3, [r7, #0]
 8009580:	2201      	movs	r2, #1
 8009582:	719a      	strb	r2, [r3, #6]
                                    // Store the user ID that was received in the message
                                    memcpy( ir_comm_ctx->ir4_data.IR4_key1_userid, &ir_comm_ctx->_buffers.rx_buffer[Ir4TransSdcUid3Indx], IR4_USERID_BYTES);
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	331d      	adds	r3, #29
 8009588:	0018      	movs	r0, r3
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	333a      	adds	r3, #58	@ 0x3a
 800958e:	2204      	movs	r2, #4
 8009590:	0019      	movs	r1, r3
 8009592:	f000 fd87 	bl	800a0a4 <memcpy>
                                    output->data_changed.IR4_userid_1 = true;
 8009596:	683b      	ldr	r3, [r7, #0]
 8009598:	2201      	movs	r2, #1
 800959a:	70da      	strb	r2, [r3, #3]
                                    // Calculate the current time value and add the time-out (ATO) value from the message to get
                                    // the value for the time before which the second key must be applied to the lock to open it.
                                    ir_comm_ctx->ir4_data.IR4_key1_timeout = ((uint32_t)ir_comm_ctx->_buffers.rx_buffer[Ir4TransSdcTime3Indx] |
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	223e      	movs	r2, #62	@ 0x3e
 80095a0:	5c9b      	ldrb	r3, [r3, r2]
 80095a2:	0019      	movs	r1, r3
                                                    ((uint32_t)ir_comm_ctx->_buffers.rx_buffer[Ir4TransSdcTime2Indx] << 8) |
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	223f      	movs	r2, #63	@ 0x3f
 80095a8:	5c9b      	ldrb	r3, [r3, r2]
 80095aa:	021b      	lsls	r3, r3, #8
                                    ir_comm_ctx->ir4_data.IR4_key1_timeout = ((uint32_t)ir_comm_ctx->_buffers.rx_buffer[Ir4TransSdcTime3Indx] |
 80095ac:	000a      	movs	r2, r1
 80095ae:	431a      	orrs	r2, r3
                                                    ((uint32_t)ir_comm_ctx->_buffers.rx_buffer[Ir4TransSdcTime1Indx] << 16) |
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	2140      	movs	r1, #64	@ 0x40
 80095b4:	5c5b      	ldrb	r3, [r3, r1]
 80095b6:	041b      	lsls	r3, r3, #16
                                                    ((uint32_t)ir_comm_ctx->_buffers.rx_buffer[Ir4TransSdcTime2Indx] << 8) |
 80095b8:	431a      	orrs	r2, r3
                                                    ((uint32_t)ir_comm_ctx->_buffers.rx_buffer[Ir4TransSdcTime0Indx] << 24)) +
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	2141      	movs	r1, #65	@ 0x41
 80095be:	5c5b      	ldrb	r3, [r3, r1]
 80095c0:	061b      	lsls	r3, r3, #24
                                                    ((uint32_t)ir_comm_ctx->_buffers.rx_buffer[Ir4TransSdcTime1Indx] << 16) |
 80095c2:	4313      	orrs	r3, r2
                                                     (uint32_t)ir_comm_ctx->_buffers.rx_buffer[Ir4TransSdcKeyAtoIndx];
 80095c4:	687a      	ldr	r2, [r7, #4]
 80095c6:	2135      	movs	r1, #53	@ 0x35
 80095c8:	5c52      	ldrb	r2, [r2, r1]
                                                    ((uint32_t)ir_comm_ctx->_buffers.rx_buffer[Ir4TransSdcTime0Indx] << 24)) +
 80095ca:	189a      	adds	r2, r3, r2
                                    ir_comm_ctx->ir4_data.IR4_key1_timeout = ((uint32_t)ir_comm_ctx->_buffers.rx_buffer[Ir4TransSdcTime3Indx] |
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	629a      	str	r2, [r3, #40]	@ 0x28
                                    output->data_changed.IR4_keyTimeout = true;
 80095d0:	683b      	ldr	r3, [r7, #0]
 80095d2:	2201      	movs	r2, #1
 80095d4:	715a      	strb	r2, [r3, #5]

                                    ir_comm_ctx->callbacks.get_IR4_info(&IR2_IR4_Status, NULL);
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	2288      	movs	r2, #136	@ 0x88
 80095da:	589b      	ldr	r3, [r3, r2]
 80095dc:	240f      	movs	r4, #15
 80095de:	193a      	adds	r2, r7, r4
 80095e0:	2100      	movs	r1, #0
 80095e2:	0010      	movs	r0, r2
 80095e4:	4798      	blx	r3
                                    IR2_IR4_DeviceState = IR4_DeviceOk;                    	// Looks like response to #1 key should be OKAY
 80095e6:	210e      	movs	r1, #14
 80095e8:	187b      	adds	r3, r7, r1
 80095ea:	2200      	movs	r2, #0
 80095ec:	701a      	strb	r2, [r3, #0]
                                    IR2_IR4_Status = IR4_LOCK_DUAL_AUTH_USER1; 				// Set the IR4 lock status so that it can be sent in the status message.
 80095ee:	193b      	adds	r3, r7, r4
 80095f0:	2203      	movs	r2, #3
 80095f2:	701a      	strb	r2, [r3, #0]
                                    build_IR4_Status(ir_comm_ctx->_buffers.tx_buffer, IR2_IR4_DeviceState, IR2_IR4_Status, IR2_IR4_Error, &ir_comm_ctx->_priv_comm_vars.last_tid, &byte_num_transmit);
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	3350      	adds	r3, #80	@ 0x50
 80095f8:	0018      	movs	r0, r3
 80095fa:	187b      	adds	r3, r7, r1
 80095fc:	7819      	ldrb	r1, [r3, #0]
 80095fe:	193b      	adds	r3, r7, r4
 8009600:	781c      	ldrb	r4, [r3, #0]
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	3370      	adds	r3, #112	@ 0x70
 8009606:	222f      	movs	r2, #47	@ 0x2f
 8009608:	18ba      	adds	r2, r7, r2
 800960a:	7815      	ldrb	r5, [r2, #0]
 800960c:	2208      	movs	r2, #8
 800960e:	18ba      	adds	r2, r7, r2
 8009610:	9201      	str	r2, [sp, #4]
 8009612:	9300      	str	r3, [sp, #0]
 8009614:	002b      	movs	r3, r5
 8009616:	0022      	movs	r2, r4
 8009618:	f000 fc50 	bl	8009ebc <build_IR4_Status>
                                    break;
 800961c:	e08c      	b.n	8009738 <irComms_handle_ir_key_message+0x1190>
                                case Ir4TwoKeyWaiting4Key2:
                                    // [Nick] - Changes for non-racklock devices. If the timeout expires we need to reset to key #1 in all cases.
                                    //             Only if within the auth window should we check the ID.
                                    IR4_dualAuth_currentTime = ((uint32_t)ir_comm_ctx->_buffers.rx_buffer[Ir4TransSdcTime3Indx] |
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	223e      	movs	r2, #62	@ 0x3e
 8009622:	5c9b      	ldrb	r3, [r3, r2]
 8009624:	0019      	movs	r1, r3
                                                    ((uint32_t)ir_comm_ctx->_buffers.rx_buffer[Ir4TransSdcTime2Indx] << 8) |
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	223f      	movs	r2, #63	@ 0x3f
 800962a:	5c9b      	ldrb	r3, [r3, r2]
 800962c:	021b      	lsls	r3, r3, #8
                                    IR4_dualAuth_currentTime = ((uint32_t)ir_comm_ctx->_buffers.rx_buffer[Ir4TransSdcTime3Indx] |
 800962e:	000a      	movs	r2, r1
 8009630:	431a      	orrs	r2, r3
                                                    ((uint32_t)ir_comm_ctx->_buffers.rx_buffer[Ir4TransSdcTime1Indx] << 16) |
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	2140      	movs	r1, #64	@ 0x40
 8009636:	5c5b      	ldrb	r3, [r3, r1]
 8009638:	041b      	lsls	r3, r3, #16
                                                    ((uint32_t)ir_comm_ctx->_buffers.rx_buffer[Ir4TransSdcTime2Indx] << 8) |
 800963a:	431a      	orrs	r2, r3
                                                    ((uint32_t)ir_comm_ctx->_buffers.rx_buffer[Ir4TransSdcTime0Indx] << 24));
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	2141      	movs	r1, #65	@ 0x41
 8009640:	5c5b      	ldrb	r3, [r3, r1]
 8009642:	061b      	lsls	r3, r3, #24
                                    IR4_dualAuth_currentTime = ((uint32_t)ir_comm_ctx->_buffers.rx_buffer[Ir4TransSdcTime3Indx] |
 8009644:	4313      	orrs	r3, r2
 8009646:	61fb      	str	r3, [r7, #28]
                                    if( ir_comm_ctx->ir4_data.IR4_key1_timeout >= IR4_dualAuth_currentTime)
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800964c:	69fa      	ldr	r2, [r7, #28]
 800964e:	429a      	cmp	r2, r3
 8009650:	d85b      	bhi.n	800970a <irComms_handle_ir_key_message+0x1162>
                                    {
                                        bool id_is_unique = memcmp(ir_comm_ctx->ir4_data.IR4_key1_userid, &ir_comm_ctx->_buffers.rx_buffer[Ir4TransSdcUid3Indx], IR4_USERID_BYTES) != 0;
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	331d      	adds	r3, #29
 8009656:	0018      	movs	r0, r3
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	333a      	adds	r3, #58	@ 0x3a
 800965c:	2204      	movs	r2, #4
 800965e:	0019      	movs	r1, r3
 8009660:	f000 fd0a 	bl	800a078 <memcmp>
 8009664:	0002      	movs	r2, r0
 8009666:	201b      	movs	r0, #27
 8009668:	183b      	adds	r3, r7, r0
 800966a:	1e51      	subs	r1, r2, #1
 800966c:	418a      	sbcs	r2, r1
 800966e:	701a      	strb	r2, [r3, #0]
                                        if( id_is_unique )
 8009670:	183b      	adds	r3, r7, r0
 8009672:	781b      	ldrb	r3, [r3, #0]
 8009674:	2b00      	cmp	r3, #0
 8009676:	d02d      	beq.n	80096d4 <irComms_handle_ir_key_message+0x112c>
                                        {
                                            ValidIRKeySeen = IR_KEY_VALID;
 8009678:	4bad      	ldr	r3, [pc, #692]	@ (8009930 <irComms_handle_ir_key_message+0x1388>)
 800967a:	2201      	movs	r2, #1
 800967c:	701a      	strb	r2, [r3, #0]
                                            // Set the two key state to second key validated:
                                            ir_comm_ctx->ir4_data.IR4_TwoKeyStatus = Ir4TwoKeyKey2Validated;
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	2203      	movs	r2, #3
 8009682:	771a      	strb	r2, [r3, #28]
                                            output->data_changed.IR4_DualAuthState = true;
 8009684:	683b      	ldr	r3, [r7, #0]
 8009686:	2201      	movs	r2, #1
 8009688:	719a      	strb	r2, [r3, #6]
                                            if(ir_comm_ctx->callbacks.get_IR4_info)
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	2288      	movs	r2, #136	@ 0x88
 800968e:	589b      	ldr	r3, [r3, r2]
 8009690:	2b00      	cmp	r3, #0
 8009692:	d008      	beq.n	80096a6 <irComms_handle_ir_key_message+0x10fe>
                                            {
                                            	ir_comm_ctx->callbacks.get_IR4_info(&IR2_IR4_Status, &IR2_IR4_DeviceState);
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	2288      	movs	r2, #136	@ 0x88
 8009698:	589b      	ldr	r3, [r3, r2]
 800969a:	220e      	movs	r2, #14
 800969c:	18b9      	adds	r1, r7, r2
 800969e:	220f      	movs	r2, #15
 80096a0:	18ba      	adds	r2, r7, r2
 80096a2:	0010      	movs	r0, r2
 80096a4:	4798      	blx	r3
                                            }

                                            build_IR4_Status(ir_comm_ctx->_buffers.tx_buffer, IR2_IR4_DeviceState, IR2_IR4_Status, IR2_IR4_Error, &ir_comm_ctx->_priv_comm_vars.last_tid, &byte_num_transmit);
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	3350      	adds	r3, #80	@ 0x50
 80096aa:	0018      	movs	r0, r3
 80096ac:	230e      	movs	r3, #14
 80096ae:	18fb      	adds	r3, r7, r3
 80096b0:	7819      	ldrb	r1, [r3, #0]
 80096b2:	230f      	movs	r3, #15
 80096b4:	18fb      	adds	r3, r7, r3
 80096b6:	781c      	ldrb	r4, [r3, #0]
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	3370      	adds	r3, #112	@ 0x70
 80096bc:	222f      	movs	r2, #47	@ 0x2f
 80096be:	18ba      	adds	r2, r7, r2
 80096c0:	7815      	ldrb	r5, [r2, #0]
 80096c2:	2208      	movs	r2, #8
 80096c4:	18ba      	adds	r2, r7, r2
 80096c6:	9201      	str	r2, [sp, #4]
 80096c8:	9300      	str	r3, [sp, #0]
 80096ca:	002b      	movs	r3, r5
 80096cc:	0022      	movs	r2, r4
 80096ce:	f000 fbf5 	bl	8009ebc <build_IR4_Status>
                                        ir_comm_ctx->ir4_data.IR4_TwoKeyStatus = Ir4TwoKeyWaiting4Key1;
                                        output->data_changed.IR4_DualAuthState = true;
                                        // Nick = Set looCnt so we run another time through to handle Key 1 status, we don't want to trigger a nack message here so that's been commented out.
                                        loopCnt = 1;        // Run the loop one more time
                                    }
                                    break;
 80096d2:	e031      	b.n	8009738 <irComms_handle_ir_key_message+0x1190>
                                            ir_comm_ctx->_buffers.tx_buffer[0] = (uint8_t)TOKEN_IR3_AACK_IR4_NACK;
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	2250      	movs	r2, #80	@ 0x50
 80096d8:	21a5      	movs	r1, #165	@ 0xa5
 80096da:	5499      	strb	r1, [r3, r2]
                                            ir_comm_ctx->_buffers.tx_buffer[1] = ir_comm_ctx->_buffers.rx_buffer[Ir4TransSdcTidIndx] + 1;
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	224a      	movs	r2, #74	@ 0x4a
 80096e0:	5c9b      	ldrb	r3, [r3, r2]
 80096e2:	3301      	adds	r3, #1
 80096e4:	b2d9      	uxtb	r1, r3
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	2251      	movs	r2, #81	@ 0x51
 80096ea:	5499      	strb	r1, [r3, r2]
                                            ir_comm_ctx->_priv_comm_vars.last_tid = ir_comm_ctx->_buffers.tx_buffer[1];
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	2251      	movs	r2, #81	@ 0x51
 80096f0:	5c99      	ldrb	r1, [r3, r2]
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	2270      	movs	r2, #112	@ 0x70
 80096f6:	5499      	strb	r1, [r3, r2]
                                            byte_num_transmit = 2;
 80096f8:	2302      	movs	r3, #2
 80096fa:	60bb      	str	r3, [r7, #8]
                                            ir_comm_ctx->ir4_data.IR4_TwoKeyStatus = Ir4TwoKeyWaiting4Key1;
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	2201      	movs	r2, #1
 8009700:	771a      	strb	r2, [r3, #28]
                                            output->data_changed.IR4_DualAuthState = true;
 8009702:	683b      	ldr	r3, [r7, #0]
 8009704:	2201      	movs	r2, #1
 8009706:	719a      	strb	r2, [r3, #6]
                                    break;
 8009708:	e016      	b.n	8009738 <irComms_handle_ir_key_message+0x1190>
                                        ir_comm_ctx->ir4_data.IR4_TwoKeyStatus = Ir4TwoKeyWaiting4Key1;
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	2201      	movs	r2, #1
 800970e:	771a      	strb	r2, [r3, #28]
                                        output->data_changed.IR4_DualAuthState = true;
 8009710:	683b      	ldr	r3, [r7, #0]
 8009712:	2201      	movs	r2, #1
 8009714:	719a      	strb	r2, [r3, #6]
                                        loopCnt = 1;        // Run the loop one more time
 8009716:	2301      	movs	r3, #1
 8009718:	62bb      	str	r3, [r7, #40]	@ 0x28
                                    break;
 800971a:	e00d      	b.n	8009738 <irComms_handle_ir_key_message+0x1190>
                                case Ir4TwoKeyKey2Validated:
                                    // This status shouldn't happen when the TOKEN_IR4_TRANS_SDC message is received. We'll set the two key status back to waiting for key 1.
                                    ir_comm_ctx->ir4_data.IR4_TwoKeyStatus = Ir4TwoKeyWaiting4Key1;
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	2201      	movs	r2, #1
 8009720:	771a      	strb	r2, [r3, #28]
                                    output->data_changed.IR4_DualAuthState = true;
 8009722:	683b      	ldr	r3, [r7, #0]
 8009724:	2201      	movs	r2, #1
 8009726:	719a      	strb	r2, [r3, #6]
                                    break;
 8009728:	e006      	b.n	8009738 <irComms_handle_ir_key_message+0x1190>
                                default:
                                    // If we end up here something has gone wrong with the handling of the two key status. We will set it to Ir4TwoKeyWaiting4Key1
                                    ir_comm_ctx->ir4_data.IR4_TwoKeyStatus = Ir4TwoKeyWaiting4Key1;
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	2201      	movs	r2, #1
 800972e:	771a      	strb	r2, [r3, #28]
                                    output->data_changed.IR4_DualAuthState = true;
 8009730:	683b      	ldr	r3, [r7, #0]
 8009732:	2201      	movs	r2, #1
 8009734:	719a      	strb	r2, [r3, #6]
                                    break;
 8009736:	46c0      	nop			@ (mov r8, r8)
                                } // switch (twoKeyStatus)
                            }while(loopCnt--);
 8009738:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800973a:	1e5a      	subs	r2, r3, #1
 800973c:	62ba      	str	r2, [r7, #40]	@ 0x28
 800973e:	2b00      	cmp	r3, #0
 8009740:	d000      	beq.n	8009744 <irComms_handle_ir_key_message+0x119c>
 8009742:	e707      	b.n	8009554 <irComms_handle_ir_key_message+0xfac>
                        } // if (true == nonZeroUidFound)
                        break;
 8009744:	e029      	b.n	800979a <irComms_handle_ir_key_message+0x11f2>
                    case MASTER_KEY_REQ:
                        // No action defined for this one. We'll just send a NACK
                        // The Key state was invalid send a NACK
                        ir_comm_ctx->_buffers.tx_buffer[0] = (uint8_t)TOKEN_IR3_AACK_IR4_NACK;
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	2250      	movs	r2, #80	@ 0x50
 800974a:	21a5      	movs	r1, #165	@ 0xa5
 800974c:	5499      	strb	r1, [r3, r2]
                        ir_comm_ctx->_buffers.tx_buffer[1] = ir_comm_ctx->_buffers.rx_buffer[Ir4TransSdcTidIndx] + 1;
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	224a      	movs	r2, #74	@ 0x4a
 8009752:	5c9b      	ldrb	r3, [r3, r2]
 8009754:	3301      	adds	r3, #1
 8009756:	b2d9      	uxtb	r1, r3
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	2251      	movs	r2, #81	@ 0x51
 800975c:	5499      	strb	r1, [r3, r2]
                        ir_comm_ctx->_priv_comm_vars.last_tid = ir_comm_ctx->_buffers.tx_buffer[1];
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	2251      	movs	r2, #81	@ 0x51
 8009762:	5c99      	ldrb	r1, [r3, r2]
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	2270      	movs	r2, #112	@ 0x70
 8009768:	5499      	strb	r1, [r3, r2]
                        byte_num_transmit = 2;
 800976a:	2302      	movs	r3, #2
 800976c:	60bb      	str	r3, [r7, #8]
                        break;
 800976e:	e015      	b.n	800979c <irComms_handle_ir_key_message+0x11f4>
                    default:
                        // The Key state was invalid send a NACK
                        ir_comm_ctx->_buffers.tx_buffer[0] = (uint8_t)TOKEN_IR3_AACK_IR4_NACK;
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	2250      	movs	r2, #80	@ 0x50
 8009774:	21a5      	movs	r1, #165	@ 0xa5
 8009776:	5499      	strb	r1, [r3, r2]
                        ir_comm_ctx->_buffers.tx_buffer[1] = ir_comm_ctx->_buffers.rx_buffer[Ir4TransSdcTidIndx] + 1;
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	224a      	movs	r2, #74	@ 0x4a
 800977c:	5c9b      	ldrb	r3, [r3, r2]
 800977e:	3301      	adds	r3, #1
 8009780:	b2d9      	uxtb	r1, r3
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	2251      	movs	r2, #81	@ 0x51
 8009786:	5499      	strb	r1, [r3, r2]
                        ir_comm_ctx->_priv_comm_vars.last_tid = ir_comm_ctx->_buffers.tx_buffer[1];
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	2251      	movs	r2, #81	@ 0x51
 800978c:	5c99      	ldrb	r1, [r3, r2]
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	2270      	movs	r2, #112	@ 0x70
 8009792:	5499      	strb	r1, [r3, r2]
                        byte_num_transmit = 2;
 8009794:	2302      	movs	r3, #2
 8009796:	60bb      	str	r3, [r7, #8]
                        break;
 8009798:	e000      	b.n	800979c <irComms_handle_ir_key_message+0x11f4>
                        break;
 800979a:	46c0      	nop			@ (mov r8, r8)
            {
 800979c:	e02b      	b.n	80097f6 <irComms_handle_ir_key_message+0x124e>
                }
            }
            //non-matching SDC
            else
            {
                IR2_IR4_DeviceState = IR4_DeviceError;							// Report Error for non-matching SDC
 800979e:	210e      	movs	r1, #14
 80097a0:	187b      	adds	r3, r7, r1
 80097a2:	2202      	movs	r2, #2
 80097a4:	701a      	strb	r2, [r3, #0]
                IR2_IR4_Error = IR2_WRONG_SDC;
 80097a6:	252f      	movs	r5, #47	@ 0x2f
 80097a8:	197b      	adds	r3, r7, r5
 80097aa:	2200      	movs	r2, #0
 80097ac:	701a      	strb	r2, [r3, #0]
                build_IR4_Status(ir_comm_ctx->_buffers.tx_buffer, IR2_IR4_DeviceState, IR2_IR4_Status, IR2_IR4_Error, &ir_comm_ctx->_priv_comm_vars.last_tid, &byte_num_transmit);
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	3350      	adds	r3, #80	@ 0x50
 80097b2:	0018      	movs	r0, r3
 80097b4:	187b      	adds	r3, r7, r1
 80097b6:	7819      	ldrb	r1, [r3, #0]
 80097b8:	230f      	movs	r3, #15
 80097ba:	18fb      	adds	r3, r7, r3
 80097bc:	781c      	ldrb	r4, [r3, #0]
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	3370      	adds	r3, #112	@ 0x70
 80097c2:	197a      	adds	r2, r7, r5
 80097c4:	7815      	ldrb	r5, [r2, #0]
 80097c6:	2208      	movs	r2, #8
 80097c8:	18ba      	adds	r2, r7, r2
 80097ca:	9201      	str	r2, [sp, #4]
 80097cc:	9300      	str	r3, [sp, #0]
 80097ce:	002b      	movs	r3, r5
 80097d0:	0022      	movs	r2, r4
 80097d2:	f000 fb73 	bl	8009ebc <build_IR4_Status>
                ir_comm_ctx->waiting_for_TOKEN_CT_WIPE_timeout_msec = 0;
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	2200      	movs	r2, #0
 80097da:	749a      	strb	r2, [r3, #18]
                if (ir_comm_ctx->callbacks.smartRetail_reject_nonmatch_key_function != NULL)
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	2294      	movs	r2, #148	@ 0x94
 80097e0:	589b      	ldr	r3, [r3, r2]
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d00c      	beq.n	8009800 <irComms_handle_ir_key_message+0x1258>
                {
                    ir_comm_ctx->callbacks.smartRetail_reject_nonmatch_key_function(ir_comm_ctx->ir_mode);                        // call the smart retail function
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	2294      	movs	r2, #148	@ 0x94
 80097ea:	589b      	ldr	r3, [r3, r2]
 80097ec:	687a      	ldr	r2, [r7, #4]
 80097ee:	7892      	ldrb	r2, [r2, #2]
 80097f0:	0010      	movs	r0, r2
 80097f2:	4798      	blx	r3
            if(is_sdc_testKey(&ir_comm_ctx->_buffers.rx_buffer[Ir4TransSdc_SDC2Indx], SZ_OF_IR4_SDC) &&
 80097f4:	e004      	b.n	8009800 <irComms_handle_ir_key_message+0x1258>
 80097f6:	e003      	b.n	8009800 <irComms_handle_ir_key_message+0x1258>
            }
        }
        else
        {
            // We are not in the correct mode to receive this message. It will be ignored.
            ir_comm_ctx->waiting_for_TOKEN_CT_WIPE_timeout_msec = 0;
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	2200      	movs	r2, #0
 80097fc:	749a      	strb	r2, [r3, #18]
            // don't respond
        }
        break;
 80097fe:	e1aa      	b.n	8009b56 <irComms_handle_ir_key_message+0x15ae>
            if(is_sdc_testKey(&ir_comm_ctx->_buffers.rx_buffer[Ir4TransSdc_SDC2Indx], SZ_OF_IR4_SDC) &&
 8009800:	46c0      	nop			@ (mov r8, r8)
        break;
 8009802:	e1a8      	b.n	8009b56 <irComms_handle_ir_key_message+0x15ae>
    case TOKEN_IR1_ACK:
    case TOKEN_IR1_NACK:
    case TOKEN_IR3_ANACK:
    case TOKEN_IR4_ACK:
    case TOKEN_IR3_AACK_IR4_NACK:
        ir_comm_ctx->waiting_for_TOKEN_CT_WIPE_timeout_msec = 0; /* zero in all cases except when valid SDC is received */
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	2200      	movs	r2, #0
 8009808:	749a      	strb	r2, [r3, #18]
        // don't respond
        break;
 800980a:	e1a4      	b.n	8009b56 <irComms_handle_ir_key_message+0x15ae>
    case TOKEN_IR3_ARTL:
        if( ir_comm_ctx->ir_mode == IR1_MODE && ir_comm_ctx->allow_IR_upgrade == false )
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	789b      	ldrb	r3, [r3, #2]
 8009810:	2b01      	cmp	r3, #1
 8009812:	d107      	bne.n	8009824 <irComms_handle_ir_key_message+0x127c>
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	222f      	movs	r2, #47	@ 0x2f
 8009818:	5c9b      	ldrb	r3, [r3, r2]
 800981a:	2201      	movs	r2, #1
 800981c:	4053      	eors	r3, r2
 800981e:	b2db      	uxtb	r3, r3
 8009820:	2b00      	cmp	r3, #0
 8009822:	d161      	bne.n	80098e8 <irComms_handle_ir_key_message+0x1340>
        {
            // Special case, we do not want to upgrade. Ignore the message so the key falls back to IR1
        }
        else
        {
            ir_comm_ctx->waiting_for_TOKEN_CT_WIPE_timeout_msec = 0; /* zero in all cases except when valid SDC is received */
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	2200      	movs	r2, #0
 8009828:	749a      	strb	r2, [r3, #18]
            // set a flag indicating an RTL has been received
            output->rtl_received = true;
 800982a:	683b      	ldr	r3, [r7, #0]
 800982c:	2201      	movs	r2, #1
 800982e:	71da      	strb	r2, [r3, #7]
            IR3_pod_status_e my_status = IR3_STAT_WAITING_TO_ARM;
 8009830:	2127      	movs	r1, #39	@ 0x27
 8009832:	187b      	adds	r3, r7, r1
 8009834:	2200      	movs	r2, #0
 8009836:	701a      	strb	r2, [r3, #0]
            if( ir_comm_ctx->callbacks.get_IR3_Pod_Status )
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800983c:	2b00      	cmp	r3, #0
 800983e:	d005      	beq.n	800984c <irComms_handle_ir_key_message+0x12a4>
            {
                my_status = ir_comm_ctx->callbacks.get_IR3_Pod_Status();
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009844:	187c      	adds	r4, r7, r1
 8009846:	4798      	blx	r3
 8009848:	0003      	movs	r3, r0
 800984a:	7023      	strb	r3, [r4, #0]
            }

            ir_comm_ctx->_buffers.tx_buffer[0]  = (uint8_t)TOKEN_IR3_ARTLA;                // advanced RTL ACK
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	2250      	movs	r2, #80	@ 0x50
 8009850:	21e5      	movs	r1, #229	@ 0xe5
 8009852:	5499      	strb	r1, [r3, r2]
            ir_comm_ctx->_buffers.tx_buffer[1]  = 15;                                     // Packet Length
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	2251      	movs	r2, #81	@ 0x51
 8009858:	210f      	movs	r1, #15
 800985a:	5499      	strb	r1, [r3, r2]
            memcpy(&ir_comm_ctx->_buffers.tx_buffer[2], ir_comm_ctx->my_sn, DEVICE_SN_BYTES);  // my Serial Number (bytes 2 -> 9)
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	3352      	adds	r3, #82	@ 0x52
 8009860:	0018      	movs	r0, r3
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	3308      	adds	r3, #8
 8009866:	2208      	movs	r2, #8
 8009868:	0019      	movs	r1, r3
 800986a:	f000 fc1b 	bl	800a0a4 <memcpy>
            ir_comm_ctx->_buffers.tx_buffer[10] = (uint8_t)(0 == ir_comm_ctx->device_chirps);  // set this byte to 1 if the Key should chirp on successful comms
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	7c5b      	ldrb	r3, [r3, #17]
 8009872:	425a      	negs	r2, r3
 8009874:	4153      	adcs	r3, r2
 8009876:	b2db      	uxtb	r3, r3
 8009878:	0019      	movs	r1, r3
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	225a      	movs	r2, #90	@ 0x5a
 800987e:	5499      	strb	r1, [r3, r2]
            ir_comm_ctx->_buffers.tx_buffer[11] = IR3_PROTOCOL_VERSION;                   // IR3 protocol version
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	225b      	movs	r2, #91	@ 0x5b
 8009884:	2101      	movs	r1, #1
 8009886:	5499      	strb	r1, [r3, r2]
            ir_comm_ctx->_buffers.tx_buffer[12] = (uint8_t)my_status;                     // my status byte
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	2227      	movs	r2, #39	@ 0x27
 800988c:	18ba      	adds	r2, r7, r2
 800988e:	215c      	movs	r1, #92	@ 0x5c
 8009890:	7812      	ldrb	r2, [r2, #0]
 8009892:	545a      	strb	r2, [r3, r1]
            ir_comm_ctx->_buffers.tx_buffer[13] = ir_comm_ctx->_buffers.rx_buffer[1] + 1;                  // Incremented TID
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	2231      	movs	r2, #49	@ 0x31
 8009898:	5c9b      	ldrb	r3, [r3, r2]
 800989a:	3301      	adds	r3, #1
 800989c:	b2d9      	uxtb	r1, r3
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	225d      	movs	r2, #93	@ 0x5d
 80098a2:	5499      	strb	r1, [r3, r2]
            ir_comm_ctx->_buffers.tx_buffer[14] = irComms_checksum(ir_comm_ctx->_buffers.tx_buffer, ir_comm_ctx->_buffers.tx_buffer[1] - 1); // checksum
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	3350      	adds	r3, #80	@ 0x50
 80098a8:	001a      	movs	r2, r3
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	2151      	movs	r1, #81	@ 0x51
 80098ae:	5c5b      	ldrb	r3, [r3, r1]
 80098b0:	3b01      	subs	r3, #1
 80098b2:	0019      	movs	r1, r3
 80098b4:	0010      	movs	r0, r2
 80098b6:	f000 fa61 	bl	8009d7c <irComms_checksum>
 80098ba:	0003      	movs	r3, r0
 80098bc:	0019      	movs	r1, r3
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	225e      	movs	r2, #94	@ 0x5e
 80098c2:	5499      	strb	r1, [r3, r2]
            byte_num_transmit = ir_comm_ctx->_buffers.tx_buffer[1];
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	2251      	movs	r2, #81	@ 0x51
 80098c8:	5c9b      	ldrb	r3, [r3, r2]
 80098ca:	60bb      	str	r3, [r7, #8]
            ir_comm_ctx->_priv_comm_vars.last_tid = ir_comm_ctx->_buffers.tx_buffer[13];
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	225d      	movs	r2, #93	@ 0x5d
 80098d0:	5c99      	ldrb	r1, [r3, r2]
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	2270      	movs	r2, #112	@ 0x70
 80098d6:	5499      	strb	r1, [r3, r2]
            (void)memset(output->key_sn, 0, DEVICE_SN_BYTES); // new key, so discard the sn of the previous key
 80098d8:	683b      	ldr	r3, [r7, #0]
 80098da:	330c      	adds	r3, #12
 80098dc:	2208      	movs	r2, #8
 80098de:	2100      	movs	r1, #0
 80098e0:	0018      	movs	r0, r3
 80098e2:	f000 fbd7 	bl	800a094 <memset>
        }
        break;
 80098e6:	e136      	b.n	8009b56 <irComms_handle_ir_key_message+0x15ae>
 80098e8:	e135      	b.n	8009b56 <irComms_handle_ir_key_message+0x15ae>
    case TOKEN_IR3_INFO:
        ir_comm_ctx->waiting_for_TOKEN_CT_WIPE_timeout_msec = 0; /* zero in all cases except when valid SDC is received */
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	2200      	movs	r2, #0
 80098ee:	749a      	strb	r2, [r3, #18]
        (void)memcpy(output->timestamp, &ir_comm_ctx->_buffers.rx_buffer[2], 4/*size of timestamp*/);
 80098f0:	683b      	ldr	r3, [r7, #0]
 80098f2:	3308      	adds	r3, #8
 80098f4:	0018      	movs	r0, r3
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	3332      	adds	r3, #50	@ 0x32
 80098fa:	2204      	movs	r2, #4
 80098fc:	0019      	movs	r1, r3
 80098fe:	f000 fbd1 	bl	800a0a4 <memcpy>
        (void)memcpy(output->key_sn, &ir_comm_ctx->_buffers.rx_buffer[6], DEVICE_SN_BYTES);
 8009902:	683b      	ldr	r3, [r7, #0]
 8009904:	330c      	adds	r3, #12
 8009906:	0018      	movs	r0, r3
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	3336      	adds	r3, #54	@ 0x36
 800990c:	2208      	movs	r2, #8
 800990e:	0019      	movs	r1, r3
 8009910:	f000 fbc8 	bl	800a0a4 <memcpy>
        ir_comm_ctx->_buffers.tx_buffer[0]  = (uint8_t)TOKEN_IR3_AACK_IR4_NACK;                // advanced ACK
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	2250      	movs	r2, #80	@ 0x50
 8009918:	21a5      	movs	r1, #165	@ 0xa5
 800991a:	5499      	strb	r1, [r3, r2]
        byte_num_transmit = 1;
 800991c:	2301      	movs	r3, #1
 800991e:	60bb      	str	r3, [r7, #8]
        ir_comm_ctx->_priv_comm_vars.sdc_decoder_key1 = ir_comm_ctx->_buffers.rx_buffer[4];                                    // use the 2nd LSByte of time for SDC decoder key0
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	2234      	movs	r2, #52	@ 0x34
 8009924:	5c99      	ldrb	r1, [r3, r2]
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	2274      	movs	r2, #116	@ 0x74
 800992a:	5499      	strb	r1, [r3, r2]
        break;
 800992c:	e113      	b.n	8009b56 <irComms_handle_ir_key_message+0x15ae>
 800992e:	46c0      	nop			@ (mov r8, r8)
 8009930:	20000648 	.word	0x20000648
    case TOKEN_IR3_SSPRD:
        ir_comm_ctx->waiting_for_TOKEN_CT_WIPE_timeout_msec = 0; /* zero in all cases except when valid SDC is received */
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	2200      	movs	r2, #0
 8009938:	749a      	strb	r2, [r3, #18]

        // act based on the setter value
        switch ((ir3_setter_e)(((uint16_t)ir_comm_ctx->_buffers.rx_buffer[2] << 8) | ir_comm_ctx->_buffers.rx_buffer[3]))
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	2232      	movs	r2, #50	@ 0x32
 800993e:	5c9b      	ldrb	r3, [r3, r2]
 8009940:	b21b      	sxth	r3, r3
 8009942:	021b      	lsls	r3, r3, #8
 8009944:	b21a      	sxth	r2, r3
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	2133      	movs	r1, #51	@ 0x33
 800994a:	5c5b      	ldrb	r3, [r3, r1]
 800994c:	b21b      	sxth	r3, r3
 800994e:	4313      	orrs	r3, r2
 8009950:	b21b      	sxth	r3, r3
 8009952:	b29b      	uxth	r3, r3
 8009954:	4a82      	ldr	r2, [pc, #520]	@ (8009b60 <irComms_handle_ir_key_message+0x15b8>)
 8009956:	4293      	cmp	r3, r2
 8009958:	d100      	bne.n	800995c <irComms_handle_ir_key_message+0x13b4>
 800995a:	e0ca      	b.n	8009af2 <irComms_handle_ir_key_message+0x154a>
 800995c:	4a80      	ldr	r2, [pc, #512]	@ (8009b60 <irComms_handle_ir_key_message+0x15b8>)
 800995e:	4293      	cmp	r3, r2
 8009960:	dd00      	ble.n	8009964 <irComms_handle_ir_key_message+0x13bc>
 8009962:	e0f7      	b.n	8009b54 <irComms_handle_ir_key_message+0x15ac>
 8009964:	2b04      	cmp	r3, #4
 8009966:	d100      	bne.n	800996a <irComms_handle_ir_key_message+0x13c2>
 8009968:	e0c3      	b.n	8009af2 <irComms_handle_ir_key_message+0x154a>
 800996a:	dd00      	ble.n	800996e <irComms_handle_ir_key_message+0x13c6>
 800996c:	e0f2      	b.n	8009b54 <irComms_handle_ir_key_message+0x15ac>
 800996e:	2b02      	cmp	r3, #2
 8009970:	d100      	bne.n	8009974 <irComms_handle_ir_key_message+0x13cc>
 8009972:	e0be      	b.n	8009af2 <irComms_handle_ir_key_message+0x154a>
 8009974:	2b03      	cmp	r3, #3
 8009976:	d000      	beq.n	800997a <irComms_handle_ir_key_message+0x13d2>
 8009978:	e0ec      	b.n	8009b54 <irComms_handle_ir_key_message+0x15ac>
        {
        case SETTER_SDC:
            // decode the 4 IR3 SDC bytes
            decode_sdc(&ir_comm_ctx->_buffers.rx_buffer[4], SZ_OF_IR3_SDC, ir_comm_ctx->_priv_comm_vars.sdc_decoder_key1,  ir_comm_ctx->my_sn[7]);
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	3334      	adds	r3, #52	@ 0x34
 800997e:	0018      	movs	r0, r3
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	2274      	movs	r2, #116	@ 0x74
 8009984:	5c9a      	ldrb	r2, [r3, r2]
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	7bdb      	ldrb	r3, [r3, #15]
 800998a:	2104      	movs	r1, #4
 800998c:	f000 f8ec 	bl	8009b68 <decode_sdc>

            if( is_magic_key( &ir_comm_ctx->_buffers.rx_buffer[4], true ))
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	3334      	adds	r3, #52	@ 0x34
 8009994:	2101      	movs	r1, #1
 8009996:	0018      	movs	r0, r3
 8009998:	f000 f926 	bl	8009be8 <is_magic_key>
 800999c:	1e03      	subs	r3, r0, #0
 800999e:	d023      	beq.n	80099e8 <irComms_handle_ir_key_message+0x1440>
            {
                if(ir_comm_ctx->R_n_D_Key_supported)
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	222c      	movs	r2, #44	@ 0x2c
 80099a4:	5c9b      	ldrb	r3, [r3, r2]
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d01e      	beq.n	80099e8 <irComms_handle_ir_key_message+0x1440>
                {
                    // if our SDC is non-zero
                    if(  is_our_sdc_blank( &ir_comm_ctx->sdc[0], SZ_OF_IR3_SDC) == false )
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	3304      	adds	r3, #4
 80099ae:	2104      	movs	r1, #4
 80099b0:	0018      	movs	r0, r3
 80099b2:	f000 f9af 	bl	8009d14 <is_our_sdc_blank>
 80099b6:	0003      	movs	r3, r0
 80099b8:	001a      	movs	r2, r3
 80099ba:	2301      	movs	r3, #1
 80099bc:	4053      	eors	r3, r2
 80099be:	b2db      	uxtb	r3, r3
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d008      	beq.n	80099d6 <irComms_handle_ir_key_message+0x142e>
                    {
                         ValidIRKeySeen = IR_KEY_MAGIC;
 80099c4:	4b67      	ldr	r3, [pc, #412]	@ (8009b64 <irComms_handle_ir_key_message+0x15bc>)
 80099c6:	2202      	movs	r2, #2
 80099c8:	701a      	strb	r2, [r3, #0]
                         ir_comm_ctx->_buffers.tx_buffer[0]  = (uint8_t)TOKEN_IR3_AACK_IR4_NACK;            // advanced ACK
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	2250      	movs	r2, #80	@ 0x50
 80099ce:	21a5      	movs	r1, #165	@ 0xa5
 80099d0:	5499      	strb	r1, [r3, r2]
                         byte_num_transmit = 1;
 80099d2:	2301      	movs	r3, #1
 80099d4:	60bb      	str	r3, [r7, #8]
                    }
                    if( ir_comm_ctx->callbacks.magicKey_cb != NULL )
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	2298      	movs	r2, #152	@ 0x98
 80099da:	589b      	ldr	r3, [r3, r2]
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d003      	beq.n	80099e8 <irComms_handle_ir_key_message+0x1440>
                    {
                        ir_comm_ctx->callbacks.magicKey_cb();
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	2298      	movs	r2, #152	@ 0x98
 80099e4:	589b      	ldr	r3, [r3, r2]
 80099e6:	4798      	blx	r3
                }
            }
            // if a zero SDC test key (all FF's) is received.
            // Nick: After talking with Mike, there's no IR3 test key but QA is asking for one. Mike suggested IR3 TK follow IR2/4 to use all FF's for Test Key SDC and not 0's since
            //     it protects against stray light.
            if( is_sdc_testKey(&ir_comm_ctx->_buffers.rx_buffer[4], SZ_OF_IR3_SDC) && is_our_sdc_blank(&ir_comm_ctx->sdc[0], SZ_OF_IR3_SDC))
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	3334      	adds	r3, #52	@ 0x34
 80099ec:	2104      	movs	r1, #4
 80099ee:	0018      	movs	r0, r3
 80099f0:	f000 f97a 	bl	8009ce8 <is_sdc_testKey>
 80099f4:	1e03      	subs	r3, r0, #0
 80099f6:	d011      	beq.n	8009a1c <irComms_handle_ir_key_message+0x1474>
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	3304      	adds	r3, #4
 80099fc:	2104      	movs	r1, #4
 80099fe:	0018      	movs	r0, r3
 8009a00:	f000 f988 	bl	8009d14 <is_our_sdc_blank>
 8009a04:	1e03      	subs	r3, r0, #0
 8009a06:	d009      	beq.n	8009a1c <irComms_handle_ir_key_message+0x1474>
            {
                // DO NOT lock into IR3 mode here since we don't want to lock into IR3 until at the customer site
                ValidIRKeySeen = IR_KEY_VALID;
 8009a08:	4b56      	ldr	r3, [pc, #344]	@ (8009b64 <irComms_handle_ir_key_message+0x15bc>)
 8009a0a:	2201      	movs	r2, #1
 8009a0c:	701a      	strb	r2, [r3, #0]
                ir_comm_ctx->_buffers.tx_buffer[0] = (uint8_t)TOKEN_IR3_AACK_IR4_NACK;            // send an AACK
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	2250      	movs	r2, #80	@ 0x50
 8009a12:	21a5      	movs	r1, #165	@ 0xa5
 8009a14:	5499      	strb	r1, [r3, r2]
                byte_num_transmit = 1;
 8009a16:	2301      	movs	r3, #1
 8009a18:	60bb      	str	r3, [r7, #8]
 8009a1a:	e069      	b.n	8009af0 <irComms_handle_ir_key_message+0x1548>
            }
            // (if our SDC is zero) OR (we receive a matching (non-magic) SDC) OR (we are still in IR1 mode and the first 3 bytes match the first 3 bytes of our SDC)
            else if ( is_our_sdc_blank( &ir_comm_ctx->sdc[0], SZ_OF_IR3_SDC)    ||
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	3304      	adds	r3, #4
 8009a20:	2104      	movs	r1, #4
 8009a22:	0018      	movs	r0, r3
 8009a24:	f000 f976 	bl	8009d14 <is_our_sdc_blank>
 8009a28:	1e03      	subs	r3, r0, #0
 8009a2a:	d117      	bne.n	8009a5c <irComms_handle_ir_key_message+0x14b4>
                    is_sdc_matching( &ir_comm_ctx->sdc[0], &ir_comm_ctx->_buffers.rx_buffer[4], SZ_OF_IR3_SDC) ||
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	1d18      	adds	r0, r3, #4
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	3334      	adds	r3, #52	@ 0x34
 8009a34:	2204      	movs	r2, #4
 8009a36:	0019      	movs	r1, r3
 8009a38:	f000 f915 	bl	8009c66 <is_sdc_matching>
 8009a3c:	1e03      	subs	r3, r0, #0
            else if ( is_our_sdc_blank( &ir_comm_ctx->sdc[0], SZ_OF_IR3_SDC)    ||
 8009a3e:	d10d      	bne.n	8009a5c <irComms_handle_ir_key_message+0x14b4>
                    ((IR1_MODE == ir_comm_ctx->ir_mode) && is_sdc_matching( &ir_comm_ctx->sdc[0], &ir_comm_ctx->_buffers.rx_buffer[5] /*skip 4th SDC*/, SZ_OF_LEGACY_SDC)) )
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	789b      	ldrb	r3, [r3, #2]
                    is_sdc_matching( &ir_comm_ctx->sdc[0], &ir_comm_ctx->_buffers.rx_buffer[4], SZ_OF_IR3_SDC) ||
 8009a44:	2b01      	cmp	r3, #1
 8009a46:	d130      	bne.n	8009aaa <irComms_handle_ir_key_message+0x1502>
                    ((IR1_MODE == ir_comm_ctx->ir_mode) && is_sdc_matching( &ir_comm_ctx->sdc[0], &ir_comm_ctx->_buffers.rx_buffer[5] /*skip 4th SDC*/, SZ_OF_LEGACY_SDC)) )
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	1d18      	adds	r0, r3, #4
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	3335      	adds	r3, #53	@ 0x35
 8009a50:	2203      	movs	r2, #3
 8009a52:	0019      	movs	r1, r3
 8009a54:	f000 f907 	bl	8009c66 <is_sdc_matching>
 8009a58:	1e03      	subs	r3, r0, #0
 8009a5a:	d026      	beq.n	8009aaa <irComms_handle_ir_key_message+0x1502>
            {
                // set the flag indicating a valid SDC has been received
                ValidIRKeySeen = IR_KEY_VALID;
 8009a5c:	4b41      	ldr	r3, [pc, #260]	@ (8009b64 <irComms_handle_ir_key_message+0x15bc>)
 8009a5e:	2201      	movs	r2, #1
 8009a60:	701a      	strb	r2, [r3, #0]

                ir_comm_ctx->_buffers.tx_buffer[0] = (uint8_t)TOKEN_IR3_AACK_IR4_NACK;            // send an AACK
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	2250      	movs	r2, #80	@ 0x50
 8009a66:	21a5      	movs	r1, #165	@ 0xa5
 8009a68:	5499      	strb	r1, [r3, r2]
                byte_num_transmit = 1;
 8009a6a:	2301      	movs	r3, #1
 8009a6c:	60bb      	str	r3, [r7, #8]

                // if the SDC in flash is zero (and the received SDC is non-zero) OR we are upgrading to 4-byte SDC
                if(is_our_sdc_blank( &ir_comm_ctx->sdc[0], SZ_OF_IR3_SDC) || (IR3_MODE != ir_comm_ctx->ir_mode)  )
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	3304      	adds	r3, #4
 8009a72:	2104      	movs	r1, #4
 8009a74:	0018      	movs	r0, r3
 8009a76:	f000 f94d 	bl	8009d14 <is_our_sdc_blank>
 8009a7a:	1e03      	subs	r3, r0, #0
 8009a7c:	d103      	bne.n	8009a86 <irComms_handle_ir_key_message+0x14de>
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	789b      	ldrb	r3, [r3, #2]
 8009a82:	2b03      	cmp	r3, #3
 8009a84:	d033      	beq.n	8009aee <irComms_handle_ir_key_message+0x1546>
                {
                    // lock the device into IR3 mode if we have a new non-zero SDC.
                    // We already made the decision in IR3 ARTL parsing if we are accepting IR upgrade so we don't need to do that here.
                    ir_comm_ctx->ir_mode = IR3_MODE;
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	2203      	movs	r2, #3
 8009a8a:	709a      	strb	r2, [r3, #2]
                    output->data_changed.irMode = true;
 8009a8c:	683b      	ldr	r3, [r7, #0]
 8009a8e:	2201      	movs	r2, #1
 8009a90:	709a      	strb	r2, [r3, #2]
                    // set our SDC to the new non-zero value
                    memcpy(ir_comm_ctx->sdc, &ir_comm_ctx->_buffers.rx_buffer[4], SZ_OF_IR3_SDC);
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	1d18      	adds	r0, r3, #4
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	3334      	adds	r3, #52	@ 0x34
 8009a9a:	2204      	movs	r2, #4
 8009a9c:	0019      	movs	r1, r3
 8009a9e:	f000 fb01 	bl	800a0a4 <memcpy>
                    output->data_changed.sdc = true;
 8009aa2:	683b      	ldr	r3, [r7, #0]
 8009aa4:	2201      	movs	r2, #1
 8009aa6:	701a      	strb	r2, [r3, #0]
                if(is_our_sdc_blank( &ir_comm_ctx->sdc[0], SZ_OF_IR3_SDC) || (IR3_MODE != ir_comm_ctx->ir_mode)  )
 8009aa8:	e021      	b.n	8009aee <irComms_handle_ir_key_message+0x1546>
             // non-matching SDC
             else
             {
                // DO NOT send an AACK or ANACK here; Just ignore the key
                 // if a test key (0x00000000) is received (but rejected)
                 if(is_sdc_testKey(&ir_comm_ctx->_buffers.rx_buffer[4], SZ_OF_IR3_SDC) )
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	3334      	adds	r3, #52	@ 0x34
 8009aae:	2104      	movs	r1, #4
 8009ab0:	0018      	movs	r0, r3
 8009ab2:	f000 f919 	bl	8009ce8 <is_sdc_testKey>
 8009ab6:	1e03      	subs	r3, r0, #0
 8009ab8:	d00c      	beq.n	8009ad4 <irComms_handle_ir_key_message+0x152c>
                 {
                     if (ir_comm_ctx->callbacks.smartRetail_reject_tout_tst_key_function != NULL)
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	2290      	movs	r2, #144	@ 0x90
 8009abe:	589b      	ldr	r3, [r3, r2]
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d020      	beq.n	8009b06 <irComms_handle_ir_key_message+0x155e>
                     {
                         ir_comm_ctx->callbacks.smartRetail_reject_tout_tst_key_function(ir_comm_ctx->ir_mode);                        // call the smart retail function
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	2290      	movs	r2, #144	@ 0x90
 8009ac8:	589b      	ldr	r3, [r3, r2]
 8009aca:	687a      	ldr	r2, [r7, #4]
 8009acc:	7892      	ldrb	r2, [r2, #2]
 8009ace:	0010      	movs	r0, r2
 8009ad0:	4798      	blx	r3
                     {
                         ir_comm_ctx->callbacks.smartRetail_reject_nonmatch_key_function(ir_comm_ctx->ir_mode);                        // call the smart retail function
                     }
                 }
             }
            break;
 8009ad2:	e018      	b.n	8009b06 <irComms_handle_ir_key_message+0x155e>
                     if (ir_comm_ctx->callbacks.smartRetail_reject_nonmatch_key_function != NULL)
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	2294      	movs	r2, #148	@ 0x94
 8009ad8:	589b      	ldr	r3, [r3, r2]
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d013      	beq.n	8009b06 <irComms_handle_ir_key_message+0x155e>
                         ir_comm_ctx->callbacks.smartRetail_reject_nonmatch_key_function(ir_comm_ctx->ir_mode);                        // call the smart retail function
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	2294      	movs	r2, #148	@ 0x94
 8009ae2:	589b      	ldr	r3, [r3, r2]
 8009ae4:	687a      	ldr	r2, [r7, #4]
 8009ae6:	7892      	ldrb	r2, [r2, #2]
 8009ae8:	0010      	movs	r0, r2
 8009aea:	4798      	blx	r3
            break;
 8009aec:	e00b      	b.n	8009b06 <irComms_handle_ir_key_message+0x155e>
                if(is_our_sdc_blank( &ir_comm_ctx->sdc[0], SZ_OF_IR3_SDC) || (IR3_MODE != ir_comm_ctx->ir_mode)  )
 8009aee:	46c0      	nop			@ (mov r8, r8)
            break;
 8009af0:	e009      	b.n	8009b06 <irComms_handle_ir_key_message+0x155e>
        case SETTER_RESET_SDC:
        case SETTER_SN:
        case SETTER_RESET_ALL:
            ir_comm_ctx->waiting_for_TOKEN_CT_WIPE_timeout_msec = 0; /* zero in all cases except when valid SDC is received */
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	2200      	movs	r2, #0
 8009af6:	749a      	strb	r2, [r3, #18]

            ir_comm_ctx->_buffers.tx_buffer[0]  = (uint8_t)TOKEN_IR3_ANACK;            // advanced NACK
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	2250      	movs	r2, #80	@ 0x50
 8009afc:	215a      	movs	r1, #90	@ 0x5a
 8009afe:	5499      	strb	r1, [r3, r2]
            byte_num_transmit = 1;
 8009b00:	2301      	movs	r3, #1
 8009b02:	60bb      	str	r3, [r7, #8]
            break;
 8009b04:	e000      	b.n	8009b08 <irComms_handle_ir_key_message+0x1560>
            break;
 8009b06:	46c0      	nop			@ (mov r8, r8)
        }

        break;
 8009b08:	e024      	b.n	8009b54 <irComms_handle_ir_key_message+0x15ac>
        }
        else
#endif
        {
            // respond with NACK (unsupported token)
            ir_comm_ctx->_buffers.tx_buffer[0]  = (uint8_t)TOKEN_IR3_ANACK;                // advanced NACK
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	2250      	movs	r2, #80	@ 0x50
 8009b0e:	215a      	movs	r1, #90	@ 0x5a
 8009b10:	5499      	strb	r1, [r3, r2]
            byte_num_transmit = 1;                                               // message length
 8009b12:	2301      	movs	r3, #1
 8009b14:	60bb      	str	r3, [r7, #8]
            break;
 8009b16:	e01e      	b.n	8009b56 <irComms_handle_ir_key_message+0x15ae>
        }
        /*lint -e527 Unreachable break point.  Here for good measure due to different compilation options. */
        break;
        /*lint +e527 */
    case TOKEN_IR3_AEXE:
        ir_comm_ctx->waiting_for_TOKEN_CT_WIPE_timeout_msec = 0; /* zero in all cases except when valid SDC is received */
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	2200      	movs	r2, #0
 8009b1c:	749a      	strb	r2, [r3, #18]
        // respond with ACK
        ir_comm_ctx->_buffers.tx_buffer[0]  = (uint8_t)TOKEN_IR3_AACK_IR4_NACK;                    // advanced ACK
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	2250      	movs	r2, #80	@ 0x50
 8009b22:	21a5      	movs	r1, #165	@ 0xa5
 8009b24:	5499      	strb	r1, [r3, r2]
        byte_num_transmit = 1;
 8009b26:	2301      	movs	r3, #1
 8009b28:	60bb      	str	r3, [r7, #8]
        break;
 8009b2a:	e014      	b.n	8009b56 <irComms_handle_ir_key_message+0x15ae>
    case TOKEN_IR3_SPUD:
    case TOKEN_IR3_SPRD:
    case TOKEN_IR3_AERR:
    case TOKEN_IR3_ARTLA:
    default:
        ir_comm_ctx->waiting_for_TOKEN_CT_WIPE_timeout_msec = 0; /* zero in all cases except when valid SDC is received */
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	2200      	movs	r2, #0
 8009b30:	749a      	strb	r2, [r3, #18]

        // respond with NACK (unsupported token)
        ir_comm_ctx->_buffers.tx_buffer[0]  = (uint8_t)TOKEN_IR3_ANACK;                // advanced NACK
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	2250      	movs	r2, #80	@ 0x50
 8009b36:	215a      	movs	r1, #90	@ 0x5a
 8009b38:	5499      	strb	r1, [r3, r2]
        byte_num_transmit = 1;                                               // message length
 8009b3a:	2301      	movs	r3, #1
 8009b3c:	60bb      	str	r3, [r7, #8]
        break;
 8009b3e:	e00a      	b.n	8009b56 <irComms_handle_ir_key_message+0x15ae>
        break;
 8009b40:	46c0      	nop			@ (mov r8, r8)
 8009b42:	e008      	b.n	8009b56 <irComms_handle_ir_key_message+0x15ae>
        break;
 8009b44:	46c0      	nop			@ (mov r8, r8)
 8009b46:	e006      	b.n	8009b56 <irComms_handle_ir_key_message+0x15ae>
        break;
 8009b48:	46c0      	nop			@ (mov r8, r8)
 8009b4a:	e004      	b.n	8009b56 <irComms_handle_ir_key_message+0x15ae>
        break;
 8009b4c:	46c0      	nop			@ (mov r8, r8)
 8009b4e:	e002      	b.n	8009b56 <irComms_handle_ir_key_message+0x15ae>
        break;
 8009b50:	46c0      	nop			@ (mov r8, r8)
 8009b52:	e000      	b.n	8009b56 <irComms_handle_ir_key_message+0x15ae>
        break;
 8009b54:	46c0      	nop			@ (mov r8, r8)
    }

    return byte_num_transmit;
 8009b56:	68bb      	ldr	r3, [r7, #8]
}
 8009b58:	0018      	movs	r0, r3
 8009b5a:	46bd      	mov	sp, r7
 8009b5c:	b00c      	add	sp, #48	@ 0x30
 8009b5e:	bdb0      	pop	{r4, r5, r7, pc}
 8009b60:	0000d431 	.word	0x0000d431
 8009b64:	20000648 	.word	0x20000648

08009b68 <decode_sdc>:
*               const uint8_t key0: Decoder Key 0, extracted from comms
*               const uint8_t key1: Decoder Key 1, extracted from comms
*  return:      void
*****************************************************************/
static void decode_sdc(uint8_t* sdc, const size_t len, const uint8_t key0, const uint8_t key1)
{
 8009b68:	b580      	push	{r7, lr}
 8009b6a:	b086      	sub	sp, #24
 8009b6c:	af00      	add	r7, sp, #0
 8009b6e:	60f8      	str	r0, [r7, #12]
 8009b70:	60b9      	str	r1, [r7, #8]
 8009b72:	0019      	movs	r1, r3
 8009b74:	1dfb      	adds	r3, r7, #7
 8009b76:	701a      	strb	r2, [r3, #0]
 8009b78:	1dbb      	adds	r3, r7, #6
 8009b7a:	1c0a      	adds	r2, r1, #0
 8009b7c:	701a      	strb	r2, [r3, #0]
    uint8_t decoder = key0 + key1;
 8009b7e:	2017      	movs	r0, #23
 8009b80:	183b      	adds	r3, r7, r0
 8009b82:	1df9      	adds	r1, r7, #7
 8009b84:	1dba      	adds	r2, r7, #6
 8009b86:	7809      	ldrb	r1, [r1, #0]
 8009b88:	7812      	ldrb	r2, [r2, #0]
 8009b8a:	188a      	adds	r2, r1, r2
 8009b8c:	701a      	strb	r2, [r3, #0]

    sdc[0] ^= decoder;
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	781a      	ldrb	r2, [r3, #0]
 8009b92:	183b      	adds	r3, r7, r0
 8009b94:	781b      	ldrb	r3, [r3, #0]
 8009b96:	4053      	eors	r3, r2
 8009b98:	b2da      	uxtb	r2, r3
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	701a      	strb	r2, [r3, #0]
    sdc[1] ^= decoder;
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	3301      	adds	r3, #1
 8009ba2:	7819      	ldrb	r1, [r3, #0]
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	3301      	adds	r3, #1
 8009ba8:	183a      	adds	r2, r7, r0
 8009baa:	7812      	ldrb	r2, [r2, #0]
 8009bac:	404a      	eors	r2, r1
 8009bae:	b2d2      	uxtb	r2, r2
 8009bb0:	701a      	strb	r2, [r3, #0]
    sdc[2] ^= decoder;
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	3302      	adds	r3, #2
 8009bb6:	7819      	ldrb	r1, [r3, #0]
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	3302      	adds	r3, #2
 8009bbc:	183a      	adds	r2, r7, r0
 8009bbe:	7812      	ldrb	r2, [r2, #0]
 8009bc0:	404a      	eors	r2, r1
 8009bc2:	b2d2      	uxtb	r2, r2
 8009bc4:	701a      	strb	r2, [r3, #0]
    if( len > 3 )
 8009bc6:	68bb      	ldr	r3, [r7, #8]
 8009bc8:	2b03      	cmp	r3, #3
 8009bca:	d909      	bls.n	8009be0 <decode_sdc+0x78>
    {
        sdc[3] ^= decoder;
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	3303      	adds	r3, #3
 8009bd0:	7819      	ldrb	r1, [r3, #0]
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	3303      	adds	r3, #3
 8009bd6:	183a      	adds	r2, r7, r0
 8009bd8:	7812      	ldrb	r2, [r2, #0]
 8009bda:	404a      	eors	r2, r1
 8009bdc:	b2d2      	uxtb	r2, r2
 8009bde:	701a      	strb	r2, [r3, #0]
    }
}
 8009be0:	46c0      	nop			@ (mov r8, r8)
 8009be2:	46bd      	mov	sp, r7
 8009be4:	b006      	add	sp, #24
 8009be6:	bd80      	pop	{r7, pc}

08009be8 <is_magic_key>:
*  parameters:  uint8_t* bytes_in:
*               bool _4thByte: Include 4th byte in check (IR3)
*  return:      bool: True if a Magic Key
*****************************************************************/
static bool is_magic_key( uint8_t bytes_in[], bool _4thByte )
{
 8009be8:	b580      	push	{r7, lr}
 8009bea:	b082      	sub	sp, #8
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	6078      	str	r0, [r7, #4]
 8009bf0:	000a      	movs	r2, r1
 8009bf2:	1cfb      	adds	r3, r7, #3
 8009bf4:	701a      	strb	r2, [r3, #0]
    if( _4thByte )
 8009bf6:	1cfb      	adds	r3, r7, #3
 8009bf8:	781b      	ldrb	r3, [r3, #0]
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d01a      	beq.n	8009c34 <is_magic_key+0x4c>
    {
        return (('a' == bytes_in[0]) && ('S' == bytes_in[1]) && ('p' == bytes_in[2]) && (0 == bytes_in[3] ));
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	781b      	ldrb	r3, [r3, #0]
 8009c02:	2b61      	cmp	r3, #97	@ 0x61
 8009c04:	d110      	bne.n	8009c28 <is_magic_key+0x40>
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	3301      	adds	r3, #1
 8009c0a:	781b      	ldrb	r3, [r3, #0]
 8009c0c:	2b53      	cmp	r3, #83	@ 0x53
 8009c0e:	d10b      	bne.n	8009c28 <is_magic_key+0x40>
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	3302      	adds	r3, #2
 8009c14:	781b      	ldrb	r3, [r3, #0]
 8009c16:	2b70      	cmp	r3, #112	@ 0x70
 8009c18:	d106      	bne.n	8009c28 <is_magic_key+0x40>
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	3303      	adds	r3, #3
 8009c1e:	781b      	ldrb	r3, [r3, #0]
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d101      	bne.n	8009c28 <is_magic_key+0x40>
 8009c24:	2301      	movs	r3, #1
 8009c26:	e000      	b.n	8009c2a <is_magic_key+0x42>
 8009c28:	2300      	movs	r3, #0
 8009c2a:	1c1a      	adds	r2, r3, #0
 8009c2c:	2301      	movs	r3, #1
 8009c2e:	4013      	ands	r3, r2
 8009c30:	b2db      	uxtb	r3, r3
 8009c32:	e014      	b.n	8009c5e <is_magic_key+0x76>
    }
    return (('a' == bytes_in[0]) && ('S' == bytes_in[1]) && ('p' == bytes_in[2]));
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	781b      	ldrb	r3, [r3, #0]
 8009c38:	2b61      	cmp	r3, #97	@ 0x61
 8009c3a:	d10b      	bne.n	8009c54 <is_magic_key+0x6c>
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	3301      	adds	r3, #1
 8009c40:	781b      	ldrb	r3, [r3, #0]
 8009c42:	2b53      	cmp	r3, #83	@ 0x53
 8009c44:	d106      	bne.n	8009c54 <is_magic_key+0x6c>
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	3302      	adds	r3, #2
 8009c4a:	781b      	ldrb	r3, [r3, #0]
 8009c4c:	2b70      	cmp	r3, #112	@ 0x70
 8009c4e:	d101      	bne.n	8009c54 <is_magic_key+0x6c>
 8009c50:	2301      	movs	r3, #1
 8009c52:	e000      	b.n	8009c56 <is_magic_key+0x6e>
 8009c54:	2300      	movs	r3, #0
 8009c56:	1c1a      	adds	r2, r3, #0
 8009c58:	2301      	movs	r3, #1
 8009c5a:	4013      	ands	r3, r2
 8009c5c:	b2db      	uxtb	r3, r3
}
 8009c5e:	0018      	movs	r0, r3
 8009c60:	46bd      	mov	sp, r7
 8009c62:	b002      	add	sp, #8
 8009c64:	bd80      	pop	{r7, pc}

08009c66 <is_sdc_matching>:
*               const uint8_t *incoming_sdc
*               size_t sdc_length
*  return:      bool: True if there's a SDC match
*****************************************************************/
static bool is_sdc_matching( const uint8_t *our_sdc_ptr, const uint8_t *incoming_sdc, size_t sdc_length )
{
 8009c66:	b580      	push	{r7, lr}
 8009c68:	b086      	sub	sp, #24
 8009c6a:	af00      	add	r7, sp, #0
 8009c6c:	60f8      	str	r0, [r7, #12]
 8009c6e:	60b9      	str	r1, [r7, #8]
 8009c70:	607a      	str	r2, [r7, #4]
    bool match;
    match = (our_sdc_ptr[0] == incoming_sdc[0] ) && (our_sdc_ptr[1] == incoming_sdc[1]) && (our_sdc_ptr[2] == incoming_sdc[2]);
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	781a      	ldrb	r2, [r3, #0]
 8009c76:	68bb      	ldr	r3, [r7, #8]
 8009c78:	781b      	ldrb	r3, [r3, #0]
 8009c7a:	429a      	cmp	r2, r3
 8009c7c:	d111      	bne.n	8009ca2 <is_sdc_matching+0x3c>
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	3301      	adds	r3, #1
 8009c82:	781a      	ldrb	r2, [r3, #0]
 8009c84:	68bb      	ldr	r3, [r7, #8]
 8009c86:	3301      	adds	r3, #1
 8009c88:	781b      	ldrb	r3, [r3, #0]
 8009c8a:	429a      	cmp	r2, r3
 8009c8c:	d109      	bne.n	8009ca2 <is_sdc_matching+0x3c>
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	3302      	adds	r3, #2
 8009c92:	781a      	ldrb	r2, [r3, #0]
 8009c94:	68bb      	ldr	r3, [r7, #8]
 8009c96:	3302      	adds	r3, #2
 8009c98:	781b      	ldrb	r3, [r3, #0]
 8009c9a:	429a      	cmp	r2, r3
 8009c9c:	d101      	bne.n	8009ca2 <is_sdc_matching+0x3c>
 8009c9e:	2201      	movs	r2, #1
 8009ca0:	e000      	b.n	8009ca4 <is_sdc_matching+0x3e>
 8009ca2:	2200      	movs	r2, #0
 8009ca4:	2017      	movs	r0, #23
 8009ca6:	183b      	adds	r3, r7, r0
 8009ca8:	701a      	strb	r2, [r3, #0]
 8009caa:	781a      	ldrb	r2, [r3, #0]
 8009cac:	2101      	movs	r1, #1
 8009cae:	400a      	ands	r2, r1
 8009cb0:	701a      	strb	r2, [r3, #0]
    if( sdc_length > 3 )
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	2b03      	cmp	r3, #3
 8009cb6:	d910      	bls.n	8009cda <is_sdc_matching+0x74>
    {
        match &= (our_sdc_ptr[3] == incoming_sdc[3]);
 8009cb8:	183b      	adds	r3, r7, r0
 8009cba:	781b      	ldrb	r3, [r3, #0]
 8009cbc:	68fa      	ldr	r2, [r7, #12]
 8009cbe:	3203      	adds	r2, #3
 8009cc0:	7811      	ldrb	r1, [r2, #0]
 8009cc2:	68ba      	ldr	r2, [r7, #8]
 8009cc4:	3203      	adds	r2, #3
 8009cc6:	7812      	ldrb	r2, [r2, #0]
 8009cc8:	1a8a      	subs	r2, r1, r2
 8009cca:	4251      	negs	r1, r2
 8009ccc:	414a      	adcs	r2, r1
 8009cce:	b2d2      	uxtb	r2, r2
 8009cd0:	401a      	ands	r2, r3
 8009cd2:	183b      	adds	r3, r7, r0
 8009cd4:	1e51      	subs	r1, r2, #1
 8009cd6:	418a      	sbcs	r2, r1
 8009cd8:	701a      	strb	r2, [r3, #0]
    }
    return match;
 8009cda:	2317      	movs	r3, #23
 8009cdc:	18fb      	adds	r3, r7, r3
 8009cde:	781b      	ldrb	r3, [r3, #0]
}
 8009ce0:	0018      	movs	r0, r3
 8009ce2:	46bd      	mov	sp, r7
 8009ce4:	b006      	add	sp, #24
 8009ce6:	bd80      	pop	{r7, pc}

08009ce8 <is_sdc_testKey>:
*  parameters:  const uint8_t *incoming_sdc
*               size_t sdc_length
*  return:      bool: True if there's a SDC match for a Test Key
*****************************************************************/
static bool is_sdc_testKey( const uint8_t *incoming_sdc, size_t sdc_length )
{
 8009ce8:	b580      	push	{r7, lr}
 8009cea:	b082      	sub	sp, #8
 8009cec:	af00      	add	r7, sp, #0
 8009cee:	6078      	str	r0, [r7, #4]
 8009cf0:	6039      	str	r1, [r7, #0]
    return (memcmp( incoming_sdc, testKey_SDC, sdc_length) == 0);
 8009cf2:	683a      	ldr	r2, [r7, #0]
 8009cf4:	4906      	ldr	r1, [pc, #24]	@ (8009d10 <is_sdc_testKey+0x28>)
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	0018      	movs	r0, r3
 8009cfa:	f000 f9bd 	bl	800a078 <memcmp>
 8009cfe:	0003      	movs	r3, r0
 8009d00:	425a      	negs	r2, r3
 8009d02:	4153      	adcs	r3, r2
 8009d04:	b2db      	uxtb	r3, r3
}
 8009d06:	0018      	movs	r0, r3
 8009d08:	46bd      	mov	sp, r7
 8009d0a:	b002      	add	sp, #8
 8009d0c:	bd80      	pop	{r7, pc}
 8009d0e:	46c0      	nop			@ (mov r8, r8)
 8009d10:	0800a3bc 	.word	0x0800a3bc

08009d14 <is_our_sdc_blank>:
*  parameters:  const uint8_t *our_sdc_ptr
*               size_t sdc_length
*  return:      bool: True if the SDC is blank
*****************************************************************/
static bool is_our_sdc_blank( const uint8_t *our_sdc_ptr, size_t sdc_length )
{
 8009d14:	b580      	push	{r7, lr}
 8009d16:	b084      	sub	sp, #16
 8009d18:	af00      	add	r7, sp, #0
 8009d1a:	6078      	str	r0, [r7, #4]
 8009d1c:	6039      	str	r1, [r7, #0]
    bool match;
    match = (our_sdc_ptr[0] == 0 ) && (our_sdc_ptr[1] == 0) && (our_sdc_ptr[2] == 0);
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	781b      	ldrb	r3, [r3, #0]
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d10b      	bne.n	8009d3e <is_our_sdc_blank+0x2a>
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	3301      	adds	r3, #1
 8009d2a:	781b      	ldrb	r3, [r3, #0]
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d106      	bne.n	8009d3e <is_our_sdc_blank+0x2a>
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	3302      	adds	r3, #2
 8009d34:	781b      	ldrb	r3, [r3, #0]
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d101      	bne.n	8009d3e <is_our_sdc_blank+0x2a>
 8009d3a:	2201      	movs	r2, #1
 8009d3c:	e000      	b.n	8009d40 <is_our_sdc_blank+0x2c>
 8009d3e:	2200      	movs	r2, #0
 8009d40:	200f      	movs	r0, #15
 8009d42:	183b      	adds	r3, r7, r0
 8009d44:	701a      	strb	r2, [r3, #0]
 8009d46:	781a      	ldrb	r2, [r3, #0]
 8009d48:	2101      	movs	r1, #1
 8009d4a:	400a      	ands	r2, r1
 8009d4c:	701a      	strb	r2, [r3, #0]
    if( sdc_length > 3 )
 8009d4e:	683b      	ldr	r3, [r7, #0]
 8009d50:	2b03      	cmp	r3, #3
 8009d52:	d90c      	bls.n	8009d6e <is_our_sdc_blank+0x5a>
    {
        match &= (our_sdc_ptr[3] == 0);
 8009d54:	183b      	adds	r3, r7, r0
 8009d56:	781b      	ldrb	r3, [r3, #0]
 8009d58:	687a      	ldr	r2, [r7, #4]
 8009d5a:	3203      	adds	r2, #3
 8009d5c:	7812      	ldrb	r2, [r2, #0]
 8009d5e:	4251      	negs	r1, r2
 8009d60:	414a      	adcs	r2, r1
 8009d62:	b2d2      	uxtb	r2, r2
 8009d64:	401a      	ands	r2, r3
 8009d66:	183b      	adds	r3, r7, r0
 8009d68:	1e51      	subs	r1, r2, #1
 8009d6a:	418a      	sbcs	r2, r1
 8009d6c:	701a      	strb	r2, [r3, #0]
    }
    return match;
 8009d6e:	230f      	movs	r3, #15
 8009d70:	18fb      	adds	r3, r7, r3
 8009d72:	781b      	ldrb	r3, [r3, #0]
}
 8009d74:	0018      	movs	r0, r3
 8009d76:	46bd      	mov	sp, r7
 8009d78:	b004      	add	sp, #16
 8009d7a:	bd80      	pop	{r7, pc}

08009d7c <irComms_checksum>:
*  parameters:  const uint8_t *data_ptr: Data to calculate checksum over
*               const size_t_t num_bytes: Number of bytes
*  return:      uint8_t: checksum
*****************************************************************/
static uint8_t irComms_checksum(const uint8_t *data_ptr, const size_t num_bytes)
{
 8009d7c:	b580      	push	{r7, lr}
 8009d7e:	b084      	sub	sp, #16
 8009d80:	af00      	add	r7, sp, #0
 8009d82:	6078      	str	r0, [r7, #4]
 8009d84:	6039      	str	r1, [r7, #0]
    uint8_t byte_cntr;
    uint8_t checksum_return = 0;
 8009d86:	230e      	movs	r3, #14
 8009d88:	18fb      	adds	r3, r7, r3
 8009d8a:	2200      	movs	r2, #0
 8009d8c:	701a      	strb	r2, [r3, #0]

    // calculate simple checksum of all bytes
    for (byte_cntr = 0; byte_cntr < num_bytes; ++byte_cntr)
 8009d8e:	230f      	movs	r3, #15
 8009d90:	18fb      	adds	r3, r7, r3
 8009d92:	2200      	movs	r2, #0
 8009d94:	701a      	strb	r2, [r3, #0]
 8009d96:	e010      	b.n	8009dba <irComms_checksum+0x3e>
    {
        checksum_return += data_ptr[byte_cntr];
 8009d98:	200f      	movs	r0, #15
 8009d9a:	183b      	adds	r3, r7, r0
 8009d9c:	781b      	ldrb	r3, [r3, #0]
 8009d9e:	687a      	ldr	r2, [r7, #4]
 8009da0:	18d3      	adds	r3, r2, r3
 8009da2:	7819      	ldrb	r1, [r3, #0]
 8009da4:	220e      	movs	r2, #14
 8009da6:	18bb      	adds	r3, r7, r2
 8009da8:	18ba      	adds	r2, r7, r2
 8009daa:	7812      	ldrb	r2, [r2, #0]
 8009dac:	188a      	adds	r2, r1, r2
 8009dae:	701a      	strb	r2, [r3, #0]
    for (byte_cntr = 0; byte_cntr < num_bytes; ++byte_cntr)
 8009db0:	183b      	adds	r3, r7, r0
 8009db2:	183a      	adds	r2, r7, r0
 8009db4:	7812      	ldrb	r2, [r2, #0]
 8009db6:	3201      	adds	r2, #1
 8009db8:	701a      	strb	r2, [r3, #0]
 8009dba:	230f      	movs	r3, #15
 8009dbc:	18fb      	adds	r3, r7, r3
 8009dbe:	781b      	ldrb	r3, [r3, #0]
 8009dc0:	683a      	ldr	r2, [r7, #0]
 8009dc2:	429a      	cmp	r2, r3
 8009dc4:	d8e8      	bhi.n	8009d98 <irComms_checksum+0x1c>
    }

    // return the bitwise complement
    return ~checksum_return;
 8009dc6:	230e      	movs	r3, #14
 8009dc8:	18fb      	adds	r3, r7, r3
 8009dca:	781b      	ldrb	r3, [r3, #0]
 8009dcc:	43db      	mvns	r3, r3
 8009dce:	b2db      	uxtb	r3, r3
}
 8009dd0:	0018      	movs	r0, r3
 8009dd2:	46bd      	mov	sp, r7
 8009dd4:	b004      	add	sp, #16
 8009dd6:	bd80      	pop	{r7, pc}

08009dd8 <irComms_blank_key_used>:
*  parameters:  invue_ir_mode_enum ir_mode: Current IR Mode
*               const uint8_t *sdc_in_ram_ptr
*  return:      void
*****************************************************************/
void irComms_blank_key_used(invue_ir_mode_enum ir_mode, const uint8_t *sdc_in_ram_ptr)
{
 8009dd8:	b580      	push	{r7, lr}
 8009dda:	b082      	sub	sp, #8
 8009ddc:	af00      	add	r7, sp, #0
 8009dde:	0002      	movs	r2, r0
 8009de0:	6039      	str	r1, [r7, #0]
 8009de2:	1dfb      	adds	r3, r7, #7
 8009de4:	701a      	strb	r2, [r3, #0]
    (void)ir_mode;
    /// if my SDC (in RAM) is zero
    if ((0 == sdc_in_ram_ptr[0]) && (0 == sdc_in_ram_ptr[1]) && (0 == sdc_in_ram_ptr[2]) && (0 == sdc_in_ram_ptr[3]))
 8009de6:	683b      	ldr	r3, [r7, #0]
 8009de8:	781b      	ldrb	r3, [r3, #0]
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d111      	bne.n	8009e12 <irComms_blank_key_used+0x3a>
 8009dee:	683b      	ldr	r3, [r7, #0]
 8009df0:	3301      	adds	r3, #1
 8009df2:	781b      	ldrb	r3, [r3, #0]
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d10c      	bne.n	8009e12 <irComms_blank_key_used+0x3a>
 8009df8:	683b      	ldr	r3, [r7, #0]
 8009dfa:	3302      	adds	r3, #2
 8009dfc:	781b      	ldrb	r3, [r3, #0]
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d107      	bne.n	8009e12 <irComms_blank_key_used+0x3a>
 8009e02:	683b      	ldr	r3, [r7, #0]
 8009e04:	3303      	adds	r3, #3
 8009e06:	781b      	ldrb	r3, [r3, #0]
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d102      	bne.n	8009e12 <irComms_blank_key_used+0x3a>
    {
        ValidIRKeySeen = IR_KEY_VALID;
 8009e0c:	4b03      	ldr	r3, [pc, #12]	@ (8009e1c <irComms_blank_key_used+0x44>)
 8009e0e:	2201      	movs	r2, #1
 8009e10:	701a      	strb	r2, [r3, #0]

    }
}
 8009e12:	46c0      	nop			@ (mov r8, r8)
 8009e14:	46bd      	mov	sp, r7
 8009e16:	b002      	add	sp, #8
 8009e18:	bd80      	pop	{r7, pc}
 8009e1a:	46c0      	nop			@ (mov r8, r8)
 8009e1c:	20000648 	.word	0x20000648

08009e20 <build_IR2_Status>:
static void build_IR2_Status( uint8_t *buffer,
                              IR2_Status_e deviceState,
                              IR2_ErrorCode_e errCode,
                              uint8_t nxtTID,
                              IR2_LockResults_e Status )
{
 8009e20:	b590      	push	{r4, r7, lr}
 8009e22:	b083      	sub	sp, #12
 8009e24:	af00      	add	r7, sp, #0
 8009e26:	6078      	str	r0, [r7, #4]
 8009e28:	000c      	movs	r4, r1
 8009e2a:	0010      	movs	r0, r2
 8009e2c:	0019      	movs	r1, r3
 8009e2e:	1cfb      	adds	r3, r7, #3
 8009e30:	1c22      	adds	r2, r4, #0
 8009e32:	701a      	strb	r2, [r3, #0]
 8009e34:	1cbb      	adds	r3, r7, #2
 8009e36:	1c02      	adds	r2, r0, #0
 8009e38:	701a      	strb	r2, [r3, #0]
 8009e3a:	1c7b      	adds	r3, r7, #1
 8009e3c:	1c0a      	adds	r2, r1, #0
 8009e3e:	701a      	strb	r2, [r3, #0]
    if( errCode > IR2_TIMEOUT )
 8009e40:	1cbb      	adds	r3, r7, #2
 8009e42:	781b      	ldrb	r3, [r3, #0]
 8009e44:	2b01      	cmp	r3, #1
 8009e46:	d902      	bls.n	8009e4e <build_IR2_Status+0x2e>
    {
        errCode = IR2_TIMEOUT;
 8009e48:	1cbb      	adds	r3, r7, #2
 8009e4a:	2201      	movs	r2, #1
 8009e4c:	701a      	strb	r2, [r3, #0]
    }

    buffer[0] = (uint8_t)TOKEN_IR2_AACK;
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	22be      	movs	r2, #190	@ 0xbe
 8009e52:	701a      	strb	r2, [r3, #0]
    buffer[1] = (uint8_t)0xD5;
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	3301      	adds	r3, #1
 8009e58:	22d5      	movs	r2, #213	@ 0xd5
 8009e5a:	701a      	strb	r2, [r3, #0]
    buffer[2] = deviceState;
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	3302      	adds	r3, #2
 8009e60:	1cfa      	adds	r2, r7, #3
 8009e62:	7812      	ldrb	r2, [r2, #0]
 8009e64:	701a      	strb	r2, [r3, #0]
    if( deviceState == IR2_BUSY )
 8009e66:	1cfb      	adds	r3, r7, #3
 8009e68:	781b      	ldrb	r3, [r3, #0]
 8009e6a:	2b01      	cmp	r3, #1
 8009e6c:	d104      	bne.n	8009e78 <build_IR2_Status+0x58>
    {
        //Busytime isn't implemented on IR4 Keys, it uses a default 280mS.
        //Busytime is implemented on IR2 keys, but it 0 is supplied it uses 500ms (first time) then 250mS.
        buffer[3] = 0;            // Let the Keys decide the busy time. This is supported in both IR2 and IR4 Keys
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	3303      	adds	r3, #3
 8009e72:	2200      	movs	r2, #0
 8009e74:	701a      	strb	r2, [r3, #0]
 8009e76:	e00f      	b.n	8009e98 <build_IR2_Status+0x78>
    }
    else if( deviceState == IR2_OK )
 8009e78:	1cfb      	adds	r3, r7, #3
 8009e7a:	781b      	ldrb	r3, [r3, #0]
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d106      	bne.n	8009e8e <build_IR2_Status+0x6e>
    {
        // Note: IR2 and IR4 keys ignore the beep parameters.
        //       IR2 Keys only understand 0x01 and 0x02 results (locked and unlocked). self latch will be parsed as locked.
        //         IR4 Keys understand self latch 0x11.
        //buffer[3] = (uint8_t)( beepOrKeyContrl << 7) | ( (beepCnt & 0x07) << 4);
        buffer[3] = Status;
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	1cda      	adds	r2, r3, #3
 8009e84:	2318      	movs	r3, #24
 8009e86:	18fb      	adds	r3, r7, r3
 8009e88:	781b      	ldrb	r3, [r3, #0]
 8009e8a:	7013      	strb	r3, [r2, #0]
 8009e8c:	e004      	b.n	8009e98 <build_IR2_Status+0x78>
    {
        // Note: IR2 & IR4 Keys ignore beep parameters.
        //            IR4 ignores the show error on LED param
        //       IR4 mistakingly does not mask the non-error bits so any of the beep/led flags will trigger a lock error so just keep them cleared.
        //buffer[3] = (uint8_t)( beepOrKeyContrl << 7) | ( beepCnt << 4) | (showErrorOnLED << 3) | errCode;
        buffer[3] = errCode;
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	3303      	adds	r3, #3
 8009e92:	1cba      	adds	r2, r7, #2
 8009e94:	7812      	ldrb	r2, [r2, #0]
 8009e96:	701a      	strb	r2, [r3, #0]
    }
    buffer[4] = nxtTID;
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	3304      	adds	r3, #4
 8009e9c:	1c7a      	adds	r2, r7, #1
 8009e9e:	7812      	ldrb	r2, [r2, #0]
 8009ea0:	701a      	strb	r2, [r3, #0]
    buffer[5] = irComms_checksum( buffer, 5);
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	1d5c      	adds	r4, r3, #5
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	2105      	movs	r1, #5
 8009eaa:	0018      	movs	r0, r3
 8009eac:	f7ff ff66 	bl	8009d7c <irComms_checksum>
 8009eb0:	0003      	movs	r3, r0
 8009eb2:	7023      	strb	r3, [r4, #0]
}
 8009eb4:	46c0      	nop			@ (mov r8, r8)
 8009eb6:	46bd      	mov	sp, r7
 8009eb8:	b003      	add	sp, #12
 8009eba:	bd90      	pop	{r4, r7, pc}

08009ebc <build_IR4_Status>:
*               uint8_t *currentTidPtr
*               uint32_t *msgLengthPtr
*  return:      void
*****************************************************************/
static void build_IR4_Status(uint8_t *buffer, IR4_DeviceState deviceState, IR4_LockStatus_e Status, IR4_ErrorCode_e errCode, uint8_t *currentTidPtr, uint32_t *msgLengthPtr)
{
 8009ebc:	b590      	push	{r4, r7, lr}
 8009ebe:	b083      	sub	sp, #12
 8009ec0:	af00      	add	r7, sp, #0
 8009ec2:	6078      	str	r0, [r7, #4]
 8009ec4:	000c      	movs	r4, r1
 8009ec6:	0010      	movs	r0, r2
 8009ec8:	0019      	movs	r1, r3
 8009eca:	1cfb      	adds	r3, r7, #3
 8009ecc:	1c22      	adds	r2, r4, #0
 8009ece:	701a      	strb	r2, [r3, #0]
 8009ed0:	1cbb      	adds	r3, r7, #2
 8009ed2:	1c02      	adds	r2, r0, #0
 8009ed4:	701a      	strb	r2, [r3, #0]
 8009ed6:	1c7b      	adds	r3, r7, #1
 8009ed8:	1c0a      	adds	r2, r1, #0
 8009eda:	701a      	strb	r2, [r3, #0]
   *msgLengthPtr = Ir4StatResponseNumBytes;
 8009edc:	69fb      	ldr	r3, [r7, #28]
 8009ede:	2205      	movs	r2, #5
 8009ee0:	601a      	str	r2, [r3, #0]

   buffer[Ir4StatResponseIdIndx] = TOKEN_IR4_STAT_RESP;
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	225e      	movs	r2, #94	@ 0x5e
 8009ee6:	701a      	strb	r2, [r3, #0]
   buffer[Ir4StatResponseStat1Indx] = deviceState;
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	3301      	adds	r3, #1
 8009eec:	1cfa      	adds	r2, r7, #3
 8009eee:	7812      	ldrb	r2, [r2, #0]
 8009ef0:	701a      	strb	r2, [r3, #0]

   if( deviceState == IR4_DeviceBusy )
 8009ef2:	1cfb      	adds	r3, r7, #3
 8009ef4:	781b      	ldrb	r3, [r3, #0]
 8009ef6:	2b01      	cmp	r3, #1
 8009ef8:	d104      	bne.n	8009f04 <build_IR4_Status+0x48>
   {
       buffer[Ir4StatResponseStat0Indx] = 0;									// Let the Keys decide the busy time. This is supported in both IR2 and IR4 Keys
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	3302      	adds	r3, #2
 8009efe:	2200      	movs	r2, #0
 8009f00:	701a      	strb	r2, [r3, #0]
 8009f02:	e00e      	b.n	8009f22 <build_IR4_Status+0x66>
   }
   else if( deviceState == IR4_DeviceOk )
 8009f04:	1cfb      	adds	r3, r7, #3
 8009f06:	781b      	ldrb	r3, [r3, #0]
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d105      	bne.n	8009f18 <build_IR4_Status+0x5c>
   {
       // Note: IR2 and IR4 keys ignore the beep parameters.
       //       IR2 Keys only understand 0x01 and 0x02 results (locked and unlocked). self latch will be parsed as locked.
       //         IR4 Keys understand self latch 0x11.
       buffer[Ir4StatResponseStat0Indx] = (uint8_t)Status;
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	3302      	adds	r3, #2
 8009f10:	1cba      	adds	r2, r7, #2
 8009f12:	7812      	ldrb	r2, [r2, #0]
 8009f14:	701a      	strb	r2, [r3, #0]
 8009f16:	e004      	b.n	8009f22 <build_IR4_Status+0x66>
   }
   else	//IR4_DeviceError
   {
       buffer[Ir4StatResponseStat0Indx] = (uint8_t)errCode;
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	3302      	adds	r3, #2
 8009f1c:	1c7a      	adds	r2, r7, #1
 8009f1e:	7812      	ldrb	r2, [r2, #0]
 8009f20:	701a      	strb	r2, [r3, #0]
   }
   buffer[Ir4StatResponseTidIndx] = *currentTidPtr + 1;
 8009f22:	69bb      	ldr	r3, [r7, #24]
 8009f24:	781a      	ldrb	r2, [r3, #0]
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	3303      	adds	r3, #3
 8009f2a:	3201      	adds	r2, #1
 8009f2c:	b2d2      	uxtb	r2, r2
 8009f2e:	701a      	strb	r2, [r3, #0]
   *currentTidPtr = buffer[Ir4StatResponseTidIndx];
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	78da      	ldrb	r2, [r3, #3]
 8009f34:	69bb      	ldr	r3, [r7, #24]
 8009f36:	701a      	strb	r2, [r3, #0]
   buffer[Ir4StatResponseCSIndx] = irComms_checksum( buffer, (Ir4StatResponseNumBytes - 1));
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	1d1c      	adds	r4, r3, #4
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	2104      	movs	r1, #4
 8009f40:	0018      	movs	r0, r3
 8009f42:	f7ff ff1b 	bl	8009d7c <irComms_checksum>
 8009f46:	0003      	movs	r3, r0
 8009f48:	7023      	strb	r3, [r4, #0]
}
 8009f4a:	46c0      	nop			@ (mov r8, r8)
 8009f4c:	46bd      	mov	sp, r7
 8009f4e:	b003      	add	sp, #12
 8009f50:	bd90      	pop	{r4, r7, pc}

08009f52 <ir4_check_userid_blank>:
*  Description: IR4 helper to check if User ID in IR4 message is blank
*  parameters:  const uint8_t *ptr: Data address of user ID index in set SDC
*  return:      bool: True if blank
*****************************************************************/
static bool ir4_check_userid_blank( const uint8_t *ptr )
{
 8009f52:	b580      	push	{r7, lr}
 8009f54:	b082      	sub	sp, #8
 8009f56:	af00      	add	r7, sp, #0
 8009f58:	6078      	str	r0, [r7, #4]
    return( ptr[0] == 0 && ptr[1] == 0 && ptr[2] == 0 && ptr[3] == 0);
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	781b      	ldrb	r3, [r3, #0]
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d110      	bne.n	8009f84 <ir4_check_userid_blank+0x32>
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	3301      	adds	r3, #1
 8009f66:	781b      	ldrb	r3, [r3, #0]
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d10b      	bne.n	8009f84 <ir4_check_userid_blank+0x32>
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	3302      	adds	r3, #2
 8009f70:	781b      	ldrb	r3, [r3, #0]
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d106      	bne.n	8009f84 <ir4_check_userid_blank+0x32>
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	3303      	adds	r3, #3
 8009f7a:	781b      	ldrb	r3, [r3, #0]
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d101      	bne.n	8009f84 <ir4_check_userid_blank+0x32>
 8009f80:	2301      	movs	r3, #1
 8009f82:	e000      	b.n	8009f86 <ir4_check_userid_blank+0x34>
 8009f84:	2300      	movs	r3, #0
 8009f86:	1c1a      	adds	r2, r3, #0
 8009f88:	2301      	movs	r3, #1
 8009f8a:	4013      	ands	r3, r2
 8009f8c:	b2db      	uxtb	r3, r3
}
 8009f8e:	0018      	movs	r0, r3
 8009f90:	46bd      	mov	sp, r7
 8009f92:	b002      	add	sp, #8
 8009f94:	bd80      	pop	{r7, pc}

08009f96 <irComms_calc_SN_Checksum>:
*  parameters:  const uint8_t* data
*               size_t size_minus_one
*  return:      uint16_t: Checksum
*****************************************************************/
static uint16_t irComms_calc_SN_Checksum(const uint8_t* data, size_t size_minus_one)
{
 8009f96:	b590      	push	{r4, r7, lr}
 8009f98:	b085      	sub	sp, #20
 8009f9a:	af00      	add	r7, sp, #0
 8009f9c:	6078      	str	r0, [r7, #4]
 8009f9e:	6039      	str	r1, [r7, #0]
    uint16_t sum1 = 0x00FF, sum2 = 0x00FF;
 8009fa0:	230e      	movs	r3, #14
 8009fa2:	18fb      	adds	r3, r7, r3
 8009fa4:	22ff      	movs	r2, #255	@ 0xff
 8009fa6:	801a      	strh	r2, [r3, #0]
 8009fa8:	230c      	movs	r3, #12
 8009faa:	18fb      	adds	r3, r7, r3
 8009fac:	22ff      	movs	r2, #255	@ 0xff
 8009fae:	801a      	strh	r2, [r3, #0]
    do
    {
        size_t length = size_minus_one > 19 ? 19 : size_minus_one;
 8009fb0:	683b      	ldr	r3, [r7, #0]
 8009fb2:	2b13      	cmp	r3, #19
 8009fb4:	d900      	bls.n	8009fb8 <irComms_calc_SN_Checksum+0x22>
 8009fb6:	2313      	movs	r3, #19
 8009fb8:	60bb      	str	r3, [r7, #8]
        size_minus_one -= (length + 1);
 8009fba:	683a      	ldr	r2, [r7, #0]
 8009fbc:	68bb      	ldr	r3, [r7, #8]
 8009fbe:	1ad3      	subs	r3, r2, r3
 8009fc0:	3b01      	subs	r3, #1
 8009fc2:	603b      	str	r3, [r7, #0]
        do
        {
            sum1 += *data++;
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	1c5a      	adds	r2, r3, #1
 8009fc8:	607a      	str	r2, [r7, #4]
 8009fca:	781b      	ldrb	r3, [r3, #0]
 8009fcc:	0019      	movs	r1, r3
 8009fce:	200e      	movs	r0, #14
 8009fd0:	183b      	adds	r3, r7, r0
 8009fd2:	183a      	adds	r2, r7, r0
 8009fd4:	8812      	ldrh	r2, [r2, #0]
 8009fd6:	188a      	adds	r2, r1, r2
 8009fd8:	801a      	strh	r2, [r3, #0]
            sum2 += sum1;
 8009fda:	240c      	movs	r4, #12
 8009fdc:	193b      	adds	r3, r7, r4
 8009fde:	1939      	adds	r1, r7, r4
 8009fe0:	183a      	adds	r2, r7, r0
 8009fe2:	8809      	ldrh	r1, [r1, #0]
 8009fe4:	8812      	ldrh	r2, [r2, #0]
 8009fe6:	188a      	adds	r2, r1, r2
 8009fe8:	801a      	strh	r2, [r3, #0]
        } while(length--);
 8009fea:	68bb      	ldr	r3, [r7, #8]
 8009fec:	1e5a      	subs	r2, r3, #1
 8009fee:	60ba      	str	r2, [r7, #8]
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d1e7      	bne.n	8009fc4 <irComms_calc_SN_Checksum+0x2e>
        sum1 = (sum1 & 0x00FF) + (sum1 >> 8);
 8009ff4:	183b      	adds	r3, r7, r0
 8009ff6:	881b      	ldrh	r3, [r3, #0]
 8009ff8:	22ff      	movs	r2, #255	@ 0xff
 8009ffa:	4013      	ands	r3, r2
 8009ffc:	b299      	uxth	r1, r3
 8009ffe:	183b      	adds	r3, r7, r0
 800a000:	881b      	ldrh	r3, [r3, #0]
 800a002:	0a1b      	lsrs	r3, r3, #8
 800a004:	b29a      	uxth	r2, r3
 800a006:	183b      	adds	r3, r7, r0
 800a008:	188a      	adds	r2, r1, r2
 800a00a:	801a      	strh	r2, [r3, #0]
        sum2 = (sum2 & 0x00FF) + (sum2 >> 8);
 800a00c:	193b      	adds	r3, r7, r4
 800a00e:	881b      	ldrh	r3, [r3, #0]
 800a010:	22ff      	movs	r2, #255	@ 0xff
 800a012:	4013      	ands	r3, r2
 800a014:	b299      	uxth	r1, r3
 800a016:	193b      	adds	r3, r7, r4
 800a018:	881b      	ldrh	r3, [r3, #0]
 800a01a:	0a1b      	lsrs	r3, r3, #8
 800a01c:	b29a      	uxth	r2, r3
 800a01e:	193b      	adds	r3, r7, r4
 800a020:	188a      	adds	r2, r1, r2
 800a022:	801a      	strh	r2, [r3, #0]
    } while(size_minus_one + 1);
 800a024:	683b      	ldr	r3, [r7, #0]
 800a026:	3301      	adds	r3, #1
 800a028:	d1c2      	bne.n	8009fb0 <irComms_calc_SN_Checksum+0x1a>
    sum1 = (sum1 & 0x00FF) + (sum1 >> 8);
 800a02a:	183b      	adds	r3, r7, r0
 800a02c:	881b      	ldrh	r3, [r3, #0]
 800a02e:	22ff      	movs	r2, #255	@ 0xff
 800a030:	4013      	ands	r3, r2
 800a032:	b299      	uxth	r1, r3
 800a034:	183b      	adds	r3, r7, r0
 800a036:	881b      	ldrh	r3, [r3, #0]
 800a038:	0a1b      	lsrs	r3, r3, #8
 800a03a:	b29a      	uxth	r2, r3
 800a03c:	183b      	adds	r3, r7, r0
 800a03e:	188a      	adds	r2, r1, r2
 800a040:	801a      	strh	r2, [r3, #0]
    sum2 = (sum2 & 0x00FF) + (sum2 >> 8);
 800a042:	193b      	adds	r3, r7, r4
 800a044:	881b      	ldrh	r3, [r3, #0]
 800a046:	22ff      	movs	r2, #255	@ 0xff
 800a048:	4013      	ands	r3, r2
 800a04a:	b299      	uxth	r1, r3
 800a04c:	193b      	adds	r3, r7, r4
 800a04e:	881b      	ldrh	r3, [r3, #0]
 800a050:	0a1b      	lsrs	r3, r3, #8
 800a052:	b29a      	uxth	r2, r3
 800a054:	193b      	adds	r3, r7, r4
 800a056:	188a      	adds	r2, r1, r2
 800a058:	801a      	strh	r2, [r3, #0]
    return (sum2 << 8) | sum1;
 800a05a:	193b      	adds	r3, r7, r4
 800a05c:	2200      	movs	r2, #0
 800a05e:	5e9b      	ldrsh	r3, [r3, r2]
 800a060:	021b      	lsls	r3, r3, #8
 800a062:	b21a      	sxth	r2, r3
 800a064:	183b      	adds	r3, r7, r0
 800a066:	2100      	movs	r1, #0
 800a068:	5e5b      	ldrsh	r3, [r3, r1]
 800a06a:	4313      	orrs	r3, r2
 800a06c:	b21b      	sxth	r3, r3
 800a06e:	b29b      	uxth	r3, r3
}
 800a070:	0018      	movs	r0, r3
 800a072:	46bd      	mov	sp, r7
 800a074:	b005      	add	sp, #20
 800a076:	bd90      	pop	{r4, r7, pc}

0800a078 <memcmp>:
 800a078:	b530      	push	{r4, r5, lr}
 800a07a:	2400      	movs	r4, #0
 800a07c:	3901      	subs	r1, #1
 800a07e:	42a2      	cmp	r2, r4
 800a080:	d101      	bne.n	800a086 <memcmp+0xe>
 800a082:	2000      	movs	r0, #0
 800a084:	e005      	b.n	800a092 <memcmp+0x1a>
 800a086:	5d03      	ldrb	r3, [r0, r4]
 800a088:	3401      	adds	r4, #1
 800a08a:	5d0d      	ldrb	r5, [r1, r4]
 800a08c:	42ab      	cmp	r3, r5
 800a08e:	d0f6      	beq.n	800a07e <memcmp+0x6>
 800a090:	1b58      	subs	r0, r3, r5
 800a092:	bd30      	pop	{r4, r5, pc}

0800a094 <memset>:
 800a094:	0003      	movs	r3, r0
 800a096:	1882      	adds	r2, r0, r2
 800a098:	4293      	cmp	r3, r2
 800a09a:	d100      	bne.n	800a09e <memset+0xa>
 800a09c:	4770      	bx	lr
 800a09e:	7019      	strb	r1, [r3, #0]
 800a0a0:	3301      	adds	r3, #1
 800a0a2:	e7f9      	b.n	800a098 <memset+0x4>

0800a0a4 <memcpy>:
 800a0a4:	2300      	movs	r3, #0
 800a0a6:	b510      	push	{r4, lr}
 800a0a8:	429a      	cmp	r2, r3
 800a0aa:	d100      	bne.n	800a0ae <memcpy+0xa>
 800a0ac:	bd10      	pop	{r4, pc}
 800a0ae:	5ccc      	ldrb	r4, [r1, r3]
 800a0b0:	54c4      	strb	r4, [r0, r3]
 800a0b2:	3301      	adds	r3, #1
 800a0b4:	e7f8      	b.n	800a0a8 <memcpy+0x4>
	...

0800a0b8 <_init>:
 800a0b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0ba:	46c0      	nop			@ (mov r8, r8)
 800a0bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a0be:	bc08      	pop	{r3}
 800a0c0:	469e      	mov	lr, r3
 800a0c2:	4770      	bx	lr

0800a0c4 <_fini>:
 800a0c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0c6:	46c0      	nop			@ (mov r8, r8)
 800a0c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a0ca:	bc08      	pop	{r3}
 800a0cc:	469e      	mov	lr, r3
 800a0ce:	4770      	bx	lr
