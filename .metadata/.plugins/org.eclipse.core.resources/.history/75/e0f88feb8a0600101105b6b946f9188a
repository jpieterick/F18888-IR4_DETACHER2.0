/**********************************
 * File: periphdefs.h
 * InVue Security Products
 * Copyright 2022
 **********************************/

#ifndef PERIPH_DEFS_H_
#define PERIPH_DEFS_H_

#include <stdbool.h>
#include <stdint.h>
#include "stm32g070xx.h"
#if 0
#include "scheduler_glue.h"
#endif


#define USING_STM32CUBEIDE (1)

// Un-comment the following when defining the timer in the Hardware Configuration tool,
// so that they get initialized by the hal_timer_init() function:
#define USING_TIM1
#define USING_TIM3
//#define USING_TIM6
//#define USING_TIM7
//#define USING_TIM14
#define USING_TIM15
//#define USING_TIM16
//#define USING_TIM17


void MX_TIM1_Init(void);

#if (USING_STM32CUBEIDE == 1)
#include "iwdg.h"
#endif

#define USE_HAL_TIMER (1)

/* define the system clock frequencies as setup in hal_System.c */
#define FREQ_LPO_HZ     (37000UL)
#define FREQ_SYSCLK  (64000000UL)
#define FREQ_AHB_HZ  (FREQ_SYSCLK/1)			// According to SystemClock_64M_Config, this is div1 = 64M
#define FREQ_APB1_HZ (FREQ_SYSCLK/1)			// According to SystemClock_64M_Config, this is div1 = 64M

#define FREQ_BLOCKING_DELAY_TIMER 		(64000000UL)
#define FREQ_BLOCKING_DELAY_TIMER_BATT  (8000000UL)

/******************************************************************
 *                           IWDT
 * ***************************************************************/
#define WDT_CLOCK_PRESCALER        (IWDG_PRESCALER_128)
#define WDT_TIMEOUT_MSECS          (5000U)
#define MAX_WATCHDOG_TIMEOUT_MSECS (28332)



/******************************************************************
 *                           Timers
 * ***************************************************************/

#define PWM_AUDIO_CLOCK_FREQUENCY_HZ     64000000.0
#define PWM_AUDIO_HZ_TO_PERIOD_COUNTS(f) ((uint16_t)(PWM_AUDIO_CLOCK_FREQUENCY_HZ / f))

#define BLOCKING_DELAY_OVERHEAD_COMPENSATION_PERIOD_COUNTS_FULLSPEED  	0.0 	// tuned empirically
#define BLOCKING_DELAY_OVERHEAD_COMPENSATION_PERIOD_COUNTS_LOWPOWER  	0.0 	//

#define BLOCKING_DELAY_US_TO_COUNTS_W_64M_CLK(t) ((uint16_t)((t * (FREQ_BLOCKING_DELAY_TIMER / 1000000.0)) - BLOCKING_DELAY_OVERHEAD_COMPENSATION_PERIOD_COUNTS_FULLSPEED))
#define BLOCKING_DELAY_US_TO_COUNTS_W_8M_CLK(t) ((uint16_t)((t * (FREQ_BLOCKING_DELAY_TIMER_BATT / 1000000.0)) - BLOCKING_DELAY_OVERHEAD_COMPENSATION_PERIOD_COUNTS_LOWPOWER))
#define BLOCKING_DELAY_US_TO_PERIOD_COUNTS(t) (schglue_GetCurrentClockSpeed() == _64Mhz ? BLOCKING_DELAY_US_TO_COUNTS_W_64M_CLK(t) : BLOCKING_DELAY_US_TO_COUNTS_W_8M_CLK(t))


// Note: SysTick is driven by HCLK/8.  HCLK is 64MHz.  Our scheduler interrupt 
// api takes a uint16_t number of counts as input.  So  
// 1/(64000000/8/1000)*65535 == a max of 8.191875ms, which is too small (we 
// want to be able to schedule at least 125ms into the future, for the wakeup).  
// BUT, note that the SysTick timer is actually 24 bit, not 16 bit, so we can 
// scale our requested number of counts by some factor to take advantage of the 
// extra bits.  For example, say we scale by 64, and we want to schedule 125ms 
// into the future.  Ask to schedule an interrupt in 15625 counts (well within 
// the limits of a uint16_t).  The ACTUAL number of target counts we put into 
// the SysTick is 15625*64 == 1000000, well within the limits of the 24 bit 
// SysTick Timer.  Each SysTick count is 1/8MHz, so 1/8Mhz * 1000000 == 0.125, 
// aka 125ms.  The beauty of our HAL api is that the application never actually 
// knows the real count value in the hardware timer; for example it asks to 
// elapse the timer "15625 counts from now," but not "when the timer reaches a 
// count value of 15625."  The application has no clue if it's talking to a 16 
// bit freerunning upcounting timer, or a 24 bit one-shot downcounting timer, 
// or two chained 8-bit counters, or a 32 bit up/down counter, etc.  Such a 
// scaling factor of 64 EFFECTIVELY prescales our 8MHz SysTick down to 125kHz.  
// An alternative solution would be to use one of the STM32 peripheral timers 
// (like TIM14) which has its own built-in prescale register to get its 
// frequency low enough to meet our requirements.
#define SCHED_INT_TMR_SCALING_FACTOR    64

// Max number of ms this macro can take is 524.  65535/(64000000/8/64/1000) == 524.28
// !!!IMPORTANT!!! if this macro or the scaling factor ever changes, be sure to 
// update scheduler_glue.h's SCHGLUE_MS_TO_COUNTS() macro to match.
//#define SCHEDULER_TIMER_MS_TO_COUNTS(t) ((uint16_t)(t * ((64000000/*Hz*/ / 8/*prescale*/ / SCHED_INT_TMR_SCALING_FACTOR) / 1000/*s to ms*/)))

// This macro probably shouldn't be in periphdefs.h. Scheduler glue is probably the better place but to avoid having to clean up all uses of this macro
// we'll alias this macro to the one in scheduler glue.
#define SCHEDULER_TIMER_MS_TO_COUNTS(t) SCHGLUE_MS_TO_COUNTS(t)

enum timer_id
{
    TIMER_WPT_PWM,
    TIMER_BLOCKING_DELAY,
	TIMER_COMMUNICATE_SHUTDOWN,

    TIMER_LAST = TIMER_COMMUNICATE_SHUTDOWN
};
#define NUMBER_OF_TIMERS    (TIMER_LAST + 1U)

enum timer_type
 {
 	TIM_GEN_PURPOSE,
 	TIM_BASIC,
 	TIM_LP,
 	TIM_SYSTICK,
 	TIM_WDT,
 	TIM_GENERIC_INTERRUPT
 };

 // STM32G070CB Timer List:
 // TIM1:  Advanced Control; 6 channels (capture/compare on ch1-4) and PWM)
 // TIM3:  General Purpose;  4 channels
 // TIM14: General Purpose;  1 channel
 // TIM15: General Purpose;  1 channel and 1 complementary channel
 // TIM16: General Purpose;  1 channel and 1 complementary channel
 // TIM17: General Purpose;  1 channel and 1 complementary channel
 // SysTick: ARM Core; Timer only
 // WDT:
 // RTC:

 enum timer_channel
 {
     TIMER_CH0 = 0U,
     TIMER_CH1,
     TIMER_CH2,
     TIMER_CH3,
 };

#define DUMMY_TIMER ((void *)0)
// timer could be of type TPM_Type* or LPTMR_Type*
// Ex. (timer = TPM1 or timer = LPTMR0)
typedef struct timer_config
{
    void*               timer;  // Can be set to DUMMY_TIMER for unimplemented timers
    enum timer_type     type;
    enum timer_channel  channel;
    uint8_t             prescale_powers_of_2;
    void(*timer_irq_cb)(uint16_t);
}timer_config_t;

extern timer_config_t const timer_defs[NUMBER_OF_TIMERS];

/******************************************************************************
 * ANALOG TO DIGITAL CONVERSIONS *********************************************/
#define USE_HAL_ADC

enum adc_id
{
    // Writing the following enums into the ADC's CHSELR register sets the
    // appropriate CHSEL bit in that register.
    //
    //                      Channel#
    //                         |
    //                         V
    ADC_ID_SEC_1_2_3    = 1 << 0,
    ADC_ID_SEC_4_5_6    = 1 << 3,
    ADC_ID_SEC_7_8_9    = 1 << 1,
    ADC_ID_SEC_10_11_12 = 1 << 4,
    ADC_ID_VCC          = 1 << 13, // tecnically measuring Vrefint, using VCC (aka Vref+) as the reference voltage
	ADC_ID_VBAT_MON     = 1 << 13  // using channel 13 (Vrefint) for reading battery voltage as well since VBAT, VREF+ and VDD are all tied together in hardware
};


/******************************************************************
 *                           UART
 * ***************************************************************/
#define USE_HAL_UART
//#define USING_UART4

#if defined USE_HAL_UART
typedef enum uart_buses
{
    UART_BUSA,
	UART_BUSB,
	UART_BUSC,
#ifdef USING_UART4
	UART_BUSD
#endif
	NUM_UART_BUSES // Member NUM_UART_BUSES must always be the last member to have the correct value.
} uart_buses_t;
/*
#define UART_IR_DOT (UART1ID)  // ir dot or daisy chaining
#define UART_POWER (UART2ID)   // micro usb power
#define UART_LORA (UART3ID)
*/
enum uart_type
{
    UART_LOW_POWER,
    UART_STANDARD
};

typedef enum
{
	UART_TYPE_USART,
	UART_TYPE_LPUART
} module_type_t;

typedef enum uart_mode
{
  ONE_WIRE,
  TWO_WIRE,
  TWO_PINS_ONE_WIRE,
  ONE_WIRE_NO_EXTERNAL_PULLUP
} uart_mode_t;

enum uart_baud_rates
{
    BAUD_6553,
    BAUD_9600,
    BAUD_38400,
    BAUD_115200
};


typedef void (*blocking_callback)(void);

typedef struct
{
	USART_TypeDef* 		  uart_module;  	/* both LPUART and USARTS are this type */
	module_type_t		    uart_type;
	uart_mode_t			    uart_mode;
  uint32_t       		  target_baud_bps;
  uint32_t        	  module_clock_hz;
  blocking_callback 	blocking_delay; /* assign a blocking delay callback if you want a delay after a Tx prior to re-enabling Rx (IR Key).  Otherwise set it to (void*)0 */
} uart_hal_t;

typedef struct
{
	uint8_t     uart_bus_num;
	uart_hal_t  uart_hal;
} uart_config_t;

extern uart_config_t const uart_defs[NUMBER_OF_UARTS];


#endif
/******************************************************************/

/******************************************************************
 *                           NVIC
 * ***************************************************************/

typedef enum
{
	NVIC_PRIORITY_HIGH     = 0,
	NVIC_PRIORITY_MID_HIGH = 1,
	NVIC_PRIORITY_MID_LOW  = 2,
	NVIC_PRIORITY_LOW      = 3
} nvic_priority_t;

typedef struct
{
	uint8_t         irq_num;
	nvic_priority_t irq_priority;
} irq_config_t;

enum irqs_with_priority
{
	IRQ_USART_IRDOT,
	IRQ_UART_POWER,
	IRQ_UART_LORA,
	LAST_IRQ = IRQ_UART_LORA
};

#define NUM_PRIORITIZED_IRQS (LAST_IRQ + 1U)

extern irq_config_t irq_priorities[NUM_PRIORITIZED_IRQS];

/******************************************************************/

#endif  // PERIPH_DEFS_H_
