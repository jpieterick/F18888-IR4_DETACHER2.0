/**********************************
 * File: hal_timer.c
 * Invue Security Products
 * Copyright 2020
 *
 * Note: This module only has limited support. PWM is weakly supported if at all. No advanced features of timers are supported.
 * 			General timers generally have 4 channels, are 16-bit or better and have a wide range of features and prescale options
 * 			Basic timers generally have 1 channel, are 16-bit, and are count up timers only.
 *
 * Note on timer clocking in STM32G0 series.
 * TIM1 and TIM15 can use TIMPCLK or PLLQCLK.
 * Other TIMx modules only use TIMPCLK which is:
 * 	The timer clock TIMPCLK is derived from PCLK (used for APB) as follows:
 *        1. If the APB prescaler is set to 1, TIMPCLK frequency is equal to PCLK frequency.
 *        2. Otherwise, the TIMPCLK frequency is set to twice the PCLK frequency.
 **********************************/

/*****************************************************************
 *   Copyright 2025 InVue Security Products, Charlotte, NC
 *
 *  File: timer.c
 *
 *  Description:	This file contains functions for working with timers and systick
 *  				that were setup using the device Configuration Tool in STM32CubeIDE.
 * * *
 *  Author(s): J. Pieterick
 *****************************************************************/

#include "stm32g0xx_hal.h"
// If neither the timer module nor the RTC module is enabled, there is no need to compile this file.
#if (defined(HAL_TIM_MODULE_ENABLED))

#include <periphdefs.h>
#include <stdbool.h>
#include <stdint.h>

#include "hal_interrupts.h"

#include "hal_timer.h"

#if defined(HAL_TIM_MODULE_ENABLED)

#include "tim.h"
#endif

typedef struct TimerChannelCaptureCompareEnableBits
{
	uint32_t ChannelCCxE; /*!<Capture/Compare output enable */

	uint32_t ChannelCCxP; /*!<Capture/Compare output Polarity */

	uint32_t ChannelCCxNE; /*!<Capture/Compare Complementary output enable */

	uint32_t ChannelCCxNP; /*!<Capture/Compare Complementary output Polarity */
}TimerChannelCaptureCompareEnableBits_t;


#if 0
TIM_CCER_CC1E; /*!<Capture/Compare 1 output enable */

TIM_CCER_CC1P; /*!<Capture/Compare 1 output Polarity */

TIM_CCER_CC1NE; /*!<Capture/Compare 1 Complementary output enable */

TIM_CCER_CC1NP; /*!<Capture/Compare 1 Complementary output Polarity */

#endif

#define UNUSED_BIT (0)

static const TimerChannelCaptureCompareEnableBits_t ChannelCaptureCompareBits[NumTimerChannels] =
{
	{
		TIM_CCER_CC1E,  // Capture/Compare 1 output enable
		TIM_CCER_CC1P,  // Capture/Compare 1 output Polarity
		TIM_CCER_CC1NE,  // Capture/Compare 1 Complementary output enable
		TIM_CCER_CC1NP,  // Capture/Compare 1 Complementary output Polarity
	},
	{
		TIM_CCER_CC2E,  // Capture/Compare 2 output enable
		TIM_CCER_CC2P,  // Capture/Compare 2 output Polarity
		TIM_CCER_CC2NE,  // Capture/Compare 2 Complementary output enable
		TIM_CCER_CC2NP,  // Capture/Compare 2 Complementary output Polarity
	},
	{
		TIM_CCER_CC3E,  // Capture/Compare 3 output enable
		TIM_CCER_CC3P,  // Capture/Compare 3 output Polarity
		TIM_CCER_CC3NE,  // Capture/Compare 3 Complementary output enable
		TIM_CCER_CC3NP,  // Capture/Compare 3 Complementary output Polarity
	},
	{
		TIM_CCER_CC4E,  // Capture/Compare 4 output enable
		TIM_CCER_CC4P,  // Capture/Compare 4 output Polarity
		UNUSED_BIT,  	// Capture/Compare 4 Complementary output enable
		TIM_CCER_CC4NP,	// Capture/Compare 4 Complementary output Polarity
	},
	{
		TIM_CCER_CC5E,  // Capture/Compare 5 output enable
		TIM_CCER_CC5P,  // Capture/Compare 5 output Polarity
		UNUSED_BIT,  	// Capture/Compare 5 Complementary output enable
		UNUSED_BIT,  	// Capture/Compare 5 Complementary output Polarity
	},
	{
		TIM_CCER_CC6E,  // Capture/Compare 6 output enable
		TIM_CCER_CC6P,  // Capture/Compare 6 output Polarity
		UNUSED_BIT,  	// Capture/Compare 6 Complementary output enable
		UNUSED_BIT,  	// Capture/Compare 6 Complementary output Polarity
	},
};

#if defined(UsingDeviceConfigurationTool)
/*********************************************************************************
*  uint32_t hal_timer_get_systick(void)
*
*  Description: This function is a wrapper function that returns a 1 millisecond
*               "tick" value. This version of this function calls the HAL_GetTick()
*               function provided by the STM32G0xx library code.
*
*  parameters:  none.
*
*  return values:  The current 1 millisecond systick count
*  remarks:
*********************************************************************************/
uint32_t hal_timer_get_systick(void)
{
  return HAL_GetTick();
}
/*********************************************************************************
*  uint32_t hal_timer_get_ticks_since_count(uint32_t lastCount)
*
*  Description: This function returns the change in systick since the provided last count.
*  				Systick provides an ongoing count of milliseconds. This function and systick
*  				use 32 bit unsigned variables. Because of this, the systick count with overflow
*  				and reset to zero every 49 day, This function deals with the this wrapping when
*  				calculating the number of ticks since the provided count.
*
*  parameters:  lastCount the previous systick value to calculate the elapsed count against.
*
*  return values:  The number of 1 millisecond systick counts since the provided count.
*
*  remarks:
*********************************************************************************/

uint32_t hal_timer_get_ticks_since_count(uint32_t lastCount)
{
    uint32_t result;
    uint32_t currentCount = hal_timer_get_systick();

    // Check if the counter rolled over:
    if (currentCount >= lastCount)
    {
        //Counter has not rolled over.
        result = currentCount - lastCount;
    }
    else
    {
        // The counter rolled over / overflowed. Deal with it:
        result = UINT32_MAX - lastCount + currentCount;
    }

    return result;
}

void hal_timer_start_systick(void)
{
	SysTick->CTRL |= SysTick_CTRL_ENABLE_Msk;
}

//void hal_timer_init_systick( void (*systick_isr_cb)(void) )
//{
//
//}

void hal_timer_stop_systick(void)
{
	SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk; /* disable systick */
}

void hal_timer_init(void)
{

	  // Note that the following "USING" macros are defined in perphdefs.h
#if defined  USING_TIM1
	  MX_TIM1_Init();
#endif
#if defined  USING_TIM3
	  MX_TIM3_Init();
#endif
#if defined  USING_TIM6
	  MX_TIM6_Init();
#endif
#if defined  USING_TIM7
	  MX_TIM7_Init();
#endif
#if defined  USING_TIM14
	  MX_TIM14_Init();
#endif
#if defined  USING_TIM15
	  MX_TIM15_Init();
#endif
#if defined  USING_TIM16
	  MX_TIM16_Init();
#endif
#if defined  USING_TIM17
	  MX_TIM17_Init();
#endif

    hal_timer_set_timer_for_blocking_delays(TIMER_BLOCKING_DELAY);

}


static void (*hal_timer_interrupt_callback)(uint16_t counts_elapsed) = (void*)0;

void hal_timer_init_w_callback(void (*timer_elapsed_callback)(uint16_t))
{
    hal_timer_interrupt_callback = timer_elapsed_callback;
    hal_timer_init();
}

void hal_timer_deinit(enum timer_id id)
{
	if (timer_defs[id].type != TIM_LP)
	{
		((TIM_TypeDef*)(timer_defs[id].timer))->CR1 = 0;
		((TIM_TypeDef*)(timer_defs[id].timer))->DIER = 0;
		((TIM_TypeDef*)(timer_defs[id].timer))->ARR = 0xFFFFFFFF;
	}

#if defined TIM15
	// Disable Interrupts
	if (timer_defs[id].timer == TIM15)
	{
	NVIC_DisableIRQ(TIM15_IRQn);
		// Disable clock
		RCC->APBENR2 &= ~RCC_APBENR2_TIM15EN;
	}
#endif
}

/** @brief hal_timer_is_running_in_pwm_mode
 *  @details  Checks if the current timer id is running and the channel is configured for PWM
 *	@param[in] enum timer_id id
 *  @return bool
 */


bool hal_timer_is_running_in_pwm_mode( enum timer_id id )
{
	bool TimerIsRunning = false;

    if (((NUMBER_OF_TIMERS > id) && (DUMMY_TIMER != timer_defs[id].timer)) &&
    ((timer_defs[id].type == TIM_BASIC) || (timer_defs[id].type == TIM_GEN_PURPOSE) ))
    {
    	// The id is good, the timer is equipped and it is either a general purpose or a basic timer.
    	// We can proceed.
    	if( ((TIM_TypeDef *)(timer_defs[id].timer))->CR1 & TIM_CR1_CEN )
    	{
    		// The timer itself is running. Now we check the timer channel to see if it is enabled.
			if( timer_defs[id].channel < NumTimerChannels)
			{
				// If the enable bit for this timer channel is set in the capture/compare enable register. The PWM is running.
				TimerIsRunning = ((TIM_TypeDef *)(timer_defs[id].timer))->CCER  & ChannelCaptureCompareBits[timer_defs[id].channel].ChannelCCxE;
			}
    	}
	}

	return TimerIsRunning;
}

bool hal_timer_SetPwmDutyCycle(enum timer_id id,uint16 dutyCycleTimes100)
{
	// Make sur that we aren't going to overrun our arrays:
	if (NUMBER_OF_TIMERS > id)
	{
		// Check the the auto reload register value to see if it is zero:
		if (TimerArrValue[id] != 0)
		{
			uint16_t period = TimerArrValue[id];

			uint16_t on_time = (period * dutyCycleTimes100) /100;

			hal_timer_set_pwm_output_period(id, period, on_time);
		}
	}
}


void hal_timer_set_pwm_output_period(enum timer_id id, uint16_t period, uint16_t on_time)
{
	// TODO: Write function hal_timer_set_pwm_output_period()

    if(DUMMY_TIMER == timer_defs[id].timer)
    {
    	// No timer pointer was defined for this timer_defs member.
        return;
    }

    if((period == 0) || (on_time == 0))
    {
#ifdef USING_LPTIMER
        if (timer_defs[id].type == TIM_LP)
        {
        	/* disable the timer */
        	((LPTIM_TypeDef*)(timer_defs[id].timer))->CR &= ~LPTIM_CR_ENABLE;
        }
        else
#endif
        if( (timer_defs[id].type == TIM_BASIC) || (timer_defs[id].type == TIM_GEN_PURPOSE) )
        {
        	if( timer_defs[id].channel < NumTimerChannels)
        	{
        		((TIM_TypeDef *)(timer_defs[id].timer))->CCER  &=  ~ChannelCaptureCompareBits[timer_defs[id].channel].ChannelCCxE;	// Disable the channel.
        	}

        	uint32_t allChannelEnableBits = o;

        	for (enum timer_channel ch = TIMER_CH0;ch < NumTimerChannels;ch++)
        	{
        		allChannelEnableBits |= ChannelCaptureCompareBits[timer_defs[id].channel].ChannelCCxE;
        	}
			/* If all channels are disabled, disable the timer too (note: reading channels 3 and 4 on tim21/22 will return 0 so that's okay) */
			if( (((TIM_TypeDef *)(timer_defs[id].timer))->CCER & allChannelEnableBits ) == 0 )
			{
				if( IS_TIM_BREAK_INSTANCE(timer_defs[id].timer))		/* Special consideration for timers with the break dead-time feature for PWM */
				{
					// See the break and dead-time register section of the Reference Manual for details of the meaning of these bits.
					((TIM_TypeDef *)(timer_defs[id].timer))->BDTR &= ~(TIM_BDTR_MOE | TIM_BDTR_OSSI | TIM_BDTR_OSSR);	// Off-state is a don't care so leave it blank
				}

				/* disable the timer */
				((TIM_TypeDef *)(timer_defs[id].timer))->CR1 &= ~(TIM_CR1_ARPE | TIM_CR1_CEN);
			}
        }
        else
        {
            // No other timers supported
        }
        return;
    }
    else
    {

#ifdef USING_LPTIMER
        if (timer_defs[id].type == TIM_LP)
        {
        	/* enable the timer and set the match polarity properly */
        	((LPTIM_TypeDef*)(timer_defs[id].timer))->CR   |= LPTIM_CR_ENABLE;
        	((LPTIM_TypeDef*)(timer_defs[id].timer))->CFGR |= LPTIM_CFGR_WAVPOL;
			((LPTIM_TypeDef*)(timer_defs[id].timer))->CR   |= LPTIM_CR_CNTSTRT_Msk;
        }
        else
#endif

        if( (timer_defs[id].type == TIM_BASIC) || (timer_defs[id].type == TIM_GEN_PURPOSE) )
        {
        	((TIM_TypeDef *)(timer_defs[id].timer))->ARR = period;         // set the period.
        	if( timer_defs[id].channel == TIMER_CH1)
        	{
            	((TIM_TypeDef *)(timer_defs[id].timer))->CCR1 = on_time;        // ..and on time
            	if( (((TIM_TypeDef *)(timer_defs[id].timer))->CCER & TIM_CCER_CC1E) == 0 )	 /* Channel is currently off */
				{
                    ((TIM_TypeDef *)(timer_defs[id].timer))->CCMR1 &= ~(TIM_CCMR1_OC1M | TIM_CCMR1_OC1FE);			/* Clear Output compare mode and the fast enable bits*/
                    ((TIM_TypeDef *)(timer_defs[id].timer))->CCMR1 |=  (TIM_CCMR1_OC1CE | 	 						/* Set the clear enable */
                    													(TIM_CCMR1_OC1M_2 | TIM_CCMR1_OC1M_1) | 	/* Set the PWM Mode 1*/
    																	TIM_CCMR1_OC1PE);							/* Set the Fast Enable bit */
                    ((TIM_TypeDef *)(timer_defs[id].timer))->CCER  &= ~(TIM_CCER_CC1NP | TIM_CCER_CC1P);			/* Clear the channel 2 output polarity flags: OC2 will be active high */
                    ((TIM_TypeDef *)(timer_defs[id].timer))->CCER  |=  TIM_CCER_CC1E;								/* Enable channel 2 */
				}
        	}
        	else if (IS_TIM_CC2_INSTANCE(timer_defs[id].timer) && timer_defs[id].channel == TIMER_CH2)						/* Does the timer have channels?*/
            {
            	((TIM_TypeDef *)(timer_defs[id].timer))->CCR2 = on_time;        // ..and on time
            	if( (((TIM_TypeDef *)(timer_defs[id].timer))->CCER & TIM_CCER_CC2E) == 0 )	 /* Channel is currently off */
				{
                    ((TIM_TypeDef *)(timer_defs[id].timer))->CCMR1 &= ~(TIM_CCMR1_OC2M | TIM_CCMR1_OC2FE);			/* Clear Output compare mode and the fast enable bits*/
                    ((TIM_TypeDef *)(timer_defs[id].timer))->CCMR1 |=  (TIM_CCMR1_OC2CE | 	 						/* Set the clear enable */
                    													(TIM_CCMR1_OC2M_2 | TIM_CCMR1_OC2M_1) | 	/* Set the PWM Mode 1*/
    																	TIM_CCMR1_OC2PE);							/* Set the Fast Enable bit */
                    ((TIM_TypeDef *)(timer_defs[id].timer))->CCER  &= ~(TIM_CCER_CC2NP | TIM_CCER_CC2P);			/* Clear the channel 2 output polarity flags: OC2 will be active high */
                    ((TIM_TypeDef *)(timer_defs[id].timer))->CCER  |=  TIM_CCER_CC2E;								/* Enable channel 2 */
				}
            }
        	else if (IS_TIM_CC3_INSTANCE(timer_defs[id].timer) && timer_defs[id].channel == TIMER_CH3)						/* Does the timer have channels?*/
            {
				((TIM_TypeDef *)(timer_defs[id].timer))->CCR3 = on_time;        // ..and on time
				if( (((TIM_TypeDef *)(timer_defs[id].timer))->CCER & TIM_CCER_CC3E) == 0 )	 /* Channel is currently off */
				{
					((TIM_TypeDef *)(timer_defs[id].timer))->CCMR2 &= ~(TIM_CCMR2_OC3M | TIM_CCMR2_OC3FE);			/* Clear Output compare mode and the fast enable bits*/
					((TIM_TypeDef *)(timer_defs[id].timer))->CCMR2 |=  (TIM_CCMR2_OC3CE | 	 						/* Set the clear enable */
																		(TIM_CCMR2_OC3M_2 | TIM_CCMR2_OC3M_1) | 	/* Set the PWM Mode 1*/
																		TIM_CCMR2_OC3PE);							/* Set the Fast Enable bit */
					((TIM_TypeDef *)(timer_defs[id].timer))->CCER  &= ~(TIM_CCER_CC3NP | TIM_CCER_CC3P);			/* Clear the channel 2 output polarity flags: OC2 will be active high */
					((TIM_TypeDef *)(timer_defs[id].timer))->CCER  |=  TIM_CCER_CC3E;								/* Enable channel 2 */
				}
            }
        	else if (IS_TIM_CC4_INSTANCE(timer_defs[id].timer) && timer_defs[id].channel == TIMER_CH4)						/* Does the timer have channels?*/
            {
				((TIM_TypeDef *)(timer_defs[id].timer))->CCR4 = on_time;        // ..and on time
				if( (((TIM_TypeDef *)(timer_defs[id].timer))->CCER & TIM_CCER_CC4E) == 0 )	 /* Channel is currently off */
				{
					((TIM_TypeDef *)(timer_defs[id].timer))->CCMR2 &= ~(TIM_CCMR2_OC4M | TIM_CCMR2_OC4FE);			/* Clear Output compare mode and the fast enable bits*/
					((TIM_TypeDef *)(timer_defs[id].timer))->CCMR2 |=  (TIM_CCMR2_OC4CE | 	 						/* Set the clear enable */
																		(TIM_CCMR2_OC4M_2 | TIM_CCMR2_OC4M_1) | 	/* Set the PWM Mode 1*/
																		TIM_CCMR2_OC4PE);							/* Set the Fast Enable bit */
					((TIM_TypeDef *)(timer_defs[id].timer))->CCER  &= ~(TIM_CCER_CC4NP | TIM_CCER_CC4P);			/* Clear the channel 2 output polarity flags: OC2 will be active high */
					((TIM_TypeDef *)(timer_defs[id].timer))->CCER  |=  TIM_CCER_CC4E;								/* Enable channel 2 */
				}
            }
        	else if (IS_TIM_CC5_INSTANCE(timer_defs[id].timer) && timer_defs[id].channel == TIMER_CH5)						/* Does the timer have channels?*/
            {
				((TIM_TypeDef *)(timer_defs[id].timer))->CCR5 = on_time;        // ..and on time
				if( (((TIM_TypeDef *)(timer_defs[id].timer))->CCER & TIM_CCER_CC5E) == 0 )	 /* Channel is currently off */
				{
					((TIM_TypeDef *)(timer_defs[id].timer))->CCMR3 &= ~(TIM_CCMR3_OC5M | TIM_CCMR3_OC5FE);			/* Clear Output compare mode and the fast enable bits*/
					((TIM_TypeDef *)(timer_defs[id].timer))->CCMR3 |=  (TIM_CCMR3_OC5CE | 	 						/* Set the clear enable */
																		(TIM_CCMR3_OC5M_2 | TIM_CCMR3_OC5M_1) | 	/* Set the PWM Mode 1*/
																		TIM_CCMR3_OC5PE);							/* Set the Fast Enable bit */
					((TIM_TypeDef *)(timer_defs[id].timer))->CCER  &= ~(TIM_CCER_CC5P);								/* Clear the channel 2 output polarity flags: OC2 will be active high */
					((TIM_TypeDef *)(timer_defs[id].timer))->CCER  |=  TIM_CCER_CC5E;								/* Enable channel 5 */
				}
            }
        	else if (IS_TIM_CC6_INSTANCE(timer_defs[id].timer) && timer_defs[id].channel == TIMER_CH6)						/* Does the timer have channels?*/
            {
				((TIM_TypeDef *)(timer_defs[id].timer))->CCR6 = on_time;        // ..and on time
				if( (((TIM_TypeDef *)(timer_defs[id].timer))->CCER & TIM_CCER_CC6E) == 0 )	 /* Channel is currently off */
				{
					((TIM_TypeDef *)(timer_defs[id].timer))->CCMR3 &= ~(TIM_CCMR3_OC6M | TIM_CCMR3_OC6FE);			/* Clear Output compare mode and the fast enable bits*/
					((TIM_TypeDef *)(timer_defs[id].timer))->CCMR3 |=  (TIM_CCMR3_OC6CE | 	 						/* Set the clear enable */
																		(TIM_CCMR3_OC6M_2 | TIM_CCMR3_OC6M_1) | 	/* Set the PWM Mode 1*/
																		TIM_CCMR3_OC6PE);							/* Set the Fast Enable bit */
					((TIM_TypeDef *)(timer_defs[id].timer))->CCER  &= ~(TIM_CCER_CC6P);								/* Clear the channel 2 output polarity flags: OC2 will be active high */
					((TIM_TypeDef *)(timer_defs[id].timer))->CCER  |=  TIM_CCER_CC6E;								/* Enable channel 6 */
				}
            }
			if(((((TIM_TypeDef *)(timer_defs[id].timer))->CR1 &  (TIM_CR1_ARPE | TIM_CR1_CEN)) !=  (TIM_CR1_ARPE | TIM_CR1_CEN)) )	/* If not enabled or auot-reload is not setup */
			{
				((TIM_TypeDef *)(timer_defs[id].timer))->CR1   |=  (TIM_CR1_ARPE | TIM_CR1_CEN);				/* Enable Counter and enable buffered Tx_ARR register */
			}

			if( IS_TIM_BREAK_INSTANCE(timer_defs[id].timer))		/* Special consideration for timers with the break dead-time feature for PWM */
			{
				// See page 817 in the RM for the truth table
				((TIM_TypeDef *)(timer_defs[id].timer))->BDTR = (TIM_BDTR_MOE | TIM_BDTR_AOE);		// Enable output, all other bits are 0
//				((TIM_TypeDef *)(timer_defs[id].timer))->BDTR &= ~(TIM_BDTR_OSSI | TIM_BDTR_OSSR);	// Off-state is a don't care so leave it blank
			}

			/* Generate an update event to reload the Prescaler and the repetition counter value immediately */
			((TIM_TypeDef *)(timer_defs[id].timer))->EGR |= TIM_EGR_UG;
        }
        else
        {
            // No other timers supported
        }
    }

#ifdef USING_LPTIMER
    /* set the frequency and duty cycle (note: affects all channels of TIMx) */
    if (timer_defs[id].type == TIM_LP)
    {
    	((LPTIM_TypeDef*)(timer_defs[id].timer))->ARR = period;
    	((LPTIM_TypeDef*)(timer_defs[id].timer))->CMP = on_time;
    }
    else
#endif
    if (timer_defs[id].type == TIM_GEN_PURPOSE)
    {
        // TODO
    }
    else
    {
        // No other timers supported
    }
}
#else
#endif // #if defined(UsingDeviceConfigurationTool) else


#if defined (USING_BLOCKING_DELAY_TIMER)

static TIM_TypeDef* blocking_delay_timer_ptr;
static uint16_t	 blocking_delay_prescaler_16b;

// calculate the counts that will go into the ARR:
const uint16_t counts_per_50usec	= ((50  * (BLOCKING_TIMER_CLK_FREQ / 1000000 )) - 1);
const uint16_t counts_per_100usec	= ((100  * (BLOCKING_TIMER_CLK_FREQ / 1000000 )) - 1);
const uint16_t counts_per_152usec	= ((152 * (BLOCKING_TIMER_CLK_FREQ / 1000000 )) - 1);

void hal_timer_set_timer_for_blocking_delays(enum timer_id timer_for_blocking_delays)
{
	/* a basic or general timer must be used for blocking delay functions */
	if ((timer_defs[timer_for_blocking_delays].type != TIM_BASIC) &&
		(timer_defs[timer_for_blocking_delays].type != TIM_GEN_PURPOSE))
	{
		return;
	}

	blocking_delay_timer_ptr          = (TIM_TypeDef*)timer_defs[timer_for_blocking_delays].timer;
	//blocking_delay_prescaler_pwr_of_2 = timer_defs[timer_for_blocking_delays].prescale_powers_of_2;
	blocking_delay_prescaler_16b = timer_defs[timer_for_blocking_delays].prescaler_16b;

}

void hal_timer_blocking_delay_for_50us(void)
{
	/* disable timer */
	blocking_delay_timer_ptr->CR1 &= ~TIM_CR1_CEN;

	/* set the count */
	blocking_delay_timer_ptr->ARR = counts_per_50usec;

	/* ensure the flag is cleared */
	blocking_delay_timer_ptr->SR = 0;

	/* enable timer */
	blocking_delay_timer_ptr->CR1 |= TIM_CR1_CEN;

	/* wait until the timer expires*/
	while(!(blocking_delay_timer_ptr->SR)) {}

	/* disable timer */
	blocking_delay_timer_ptr->CR1 &= ~TIM_CR1_CEN;
}

void hal_timer_blocking_delay_for_100us(void)
{
	/* disable timer */
	blocking_delay_timer_ptr->CR1 &= ~TIM_CR1_CEN;

	/* set the count */
	blocking_delay_timer_ptr->ARR = counts_per_100usec;

	/* ensure the flag is cleared */
	blocking_delay_timer_ptr->SR = 0;

	/* enable timer */
	blocking_delay_timer_ptr->CR1 |= TIM_CR1_CEN;

	/* wait until the timer expires*/
	while(!(blocking_delay_timer_ptr->SR)) {}

	/* disable timer */
	blocking_delay_timer_ptr->CR1 &= ~TIM_CR1_CEN;
}

void hal_timer_blocking_delay_for_152us(void)
{
	/* disable timer */
	blocking_delay_timer_ptr->CR1 &= ~TIM_CR1_CEN;

	/* set the count */
	blocking_delay_timer_ptr->ARR = counts_per_152usec;

	/* ensure the flag is cleared */
	blocking_delay_timer_ptr->SR = 0;

	/* enable timer */
	blocking_delay_timer_ptr->CR1 |= TIM_CR1_CEN;

	/* wait until the timer expires*/
	while(!(blocking_delay_timer_ptr->SR)) {}

	/* disable timer */
	blocking_delay_timer_ptr->CR1 &= ~TIM_CR1_CEN;
}

void hal_timer_blocking_delay_variable_usec(uint32_t delay_usec)
{
	// TODO: Setup a timer for the usec blocking timer.

	/* note: with a 24Mhz clock (APB1 for TIM6) and a prescaler of 1, max delay is 2730 usec */

	/* disable timer */
	blocking_delay_timer_ptr->CR1 &= ~TIM_CR1_CEN;

	blocking_delay_timer_ptr->ARR = (delay_usec * (TIMPCLK_HZ / (1000000 * (1 << blocking_delay_prescaler_pwr_of_2))));

	/* ensure the flag is cleared */
	blocking_delay_timer_ptr->SR = 0;

	/* enable timer */
	blocking_delay_timer_ptr->CR1 |= TIM_CR1_CEN;

	/* wait until the timer expires*/
	while(!(blocking_delay_timer_ptr->SR)) {}

	/* disable timer */
	blocking_delay_timer_ptr->CR1 &= ~TIM_CR1_CEN;
}

#if defined TIM15
static void irq_cb(TIM_TypeDef *tmr)
{
	for (uint8_t i=0u; i < NUMBER_OF_TIMERS; i++)
	{
		if (timer_defs[i].timer == tmr)
		{
			if (timer_defs[i].timer_irq_cb != NULL)
			{
				timer_defs[i].timer_irq_cb(0 /* dummy value for now, since this isn't implemented */);
			}
		}
	}
}

void TIM15_IRQHandler(void)
{
	irq_cb(TIM15);
}
#endif
#endif // #if defined (USING_BLOCKING_DELAY_TIMER)


/******************************************************************************
 * GENERAL INTERRUPT TIMER RESOURCES *****************************************/

/* This code is legit overly complicated for what we need and I know it's a 
 * mess (3 separate FW Engineers worked on it), but I'm copy/pasting it here 
 * from OnePOD LIVE Sensor for two reasons.  One, I know it works, because it's 
 * in production on the OnePOD LIVE Sensor.  Two, because this same LPTIM timer 
 * is available on all three variants of STM32 on which we're using this HAL on 
 * right now (STM32L072 for all our LoRa products, STM32G071 in our TV Manager, 
 * and now the STM32G031 on our NE360 Frame port).  It includes a lot of cruft 
 * (at least for now, until it's needed one day) related to making it work with 
 * three different source clocks, and handles low power mode which we don't 
 * care about on the NE360 Frame port.  So yes, it can be greatly simplified if 
 * we used a simpler timer and stripped out all the cruft, but meh, I'm on a 
 * schedule with this porting ECR, so copy/paste it is.
 *
 * Also note that, yes, this code exists in OnePOD LIVE Sensor's 
 * hardware_abstraction_layer.c, but now that I've done the working bringing it 
 * into submod-hal_generic, at least in the STM32G variant, maybe one day 
 * someone can copy this to the STM32L variant and we can remove all the 
 * then-duplicated code from OnePOD LIVE Sensor's hardware_abstraction_layer.c.
 */

#if defined(LPTIM1)
#define mRestartLPTMR()					do{ LPTIM1->CR = LPTIM_CR_SNGSTRT | LPTIM_CR_ENABLE; }while(0)
#define MAX_AUTO_RELOAD_VALUE 			0xFFFF
#define MAX_LPTIM_COMPARE_VALUE 		0				/* For one-shot mode, not using this */

static volatile uint16_t timer_value_at_previous_event = 0;
static volatile bool is_timer_scheduled = false;
static volatile uint32_t value_used_for_arr;

static uint32_t hal_read_lptimer_val(void)
{
    volatile uint32_t temp1;
#if defined LPTMR_LSI || defined LPTMR_LSE
	/* Per the ref. manual when accessing the CNT register from LSI clock, need to read multiple times to make sure the same value is returned */
    volatile uint32_t temp2;
    do{
    	temp1 = LPTIM1->CNT;
    	temp2 = LPTIM1->CNT;
    }while( temp1 != temp2);
#else
    temp1 = LPTIM1->CNT;
#endif
    return temp1;
}

static void __attribute__((optimize("O0"))) hal_set_lptmr_period( uint16_t count )
{
	volatile uint32_t count_in = count;

	volatile uint32_t temp1;
	/* Make sure LPTIM_ISR_ARROK is clear before writing */
	if( (LPTIM1->ISR & LPTIM_ISR_ARROK ) != 0 )
	{
		LPTIM1->ICR = LPTIM_ICR_ARROKCF;
	}

    /* Stay in loop trying to update ARR if the ARROK flag doesn't get set by HW */
	{
		LPTIM1->ARR = count_in;
		value_used_for_arr = count_in;
        /* For LSI and LPTMR, we need to check the OK flag (ARROK if using one-shot or CMPOK for continous). There is 2 to 3 clock cycle latency.. */
		do{
			temp1 = LPTIM1->ISR & LPTIM_ISR_ARROK;
		}while(temp1 == 0);
	}
	mRestartLPTMR();							/* Since this is a one-shot implementation, restart the timer now that ARR is updated */
}
// This is a little bit of an hack since this is defined in app code somewhere to interface with the scheduler submodule. The hal_timer structure provides a callback fnc pointer but it
//	doesn't allow for a parameter which the scheduler needs.
extern void called_from_hal_timer_interrupt(uint16_t time_elapsed);

void LPTIM1_IRQHandler(void) __attribute__((__interrupt__));
void LPTIM1_IRQHandler(void)
{
	/* Per reference manual, when using a slower clock, the CNT register should be read multiple times to validate a successful read */
    volatile uint16_t timer_actual_value;
    volatile uint32_t temp1;

    /* Per reference manual, we need to read the CNT multiple times when using LSI */
    temp1 = hal_read_lptimer_val();
    timer_actual_value = (uint16_t)temp1;

#if 0
    /* calculate this to report it later */
    const volatile uint16_t result = timer_actual_value - timer_value_at_previous_event;
#endif

    timer_value_at_previous_event = 0						/*Set timer_value_at_previous_event to 0 since this is a one-shot timer */;

    /* clear all possible interrupt flags except the ARROK and CMPOK status flags, these are handled in HW*/
    LPTIM1->ICR = LPTIM_ICR_DOWNCF | LPTIM_ICR_UPCF | LPTIM_ICR_ARROKCF | LPTIM_ICR_CMPOKCF | LPTIM_ICR_EXTTRIGCF | LPTIM_ICR_ARRMCF | LPTIM_ICR_CMPMCF;

    is_timer_scheduled = false;

    called_from_hal_timer_interrupt(LPTIM1->ARR);			/* Since this is a one-shot, the CNT has been cleared. ARR is the only thing we have and we know it is correct since this is an interrupt...right? */

//    wake_up = true;

    if(!is_timer_scheduled)
    {
        /* If the timer wasn't rescheduled in the context of
         * called_from_hal_timer_interrupt(), then allow it to keep counting so
         * that hal_get_timer_counts_since_last_event() can continue to report
         * accurate values if the user decides to call it.  However, disable
         * the interrupt, because we don't actually want to cause another
         * interrupt to happen again.  Note that we disable the interrupt from
         * the NVIC because the reference manual says you can't modify the
         * LPTIM's interrupt register (IER) without first disabling the timer,
         * and we don't want to disable the timer.
         */

        NVIC_DisableIRQ(LPTIM1_IRQn);

        /* prepare the next compare value as far out into the future as it can go */
        uint16_t new_compare_value = timer_actual_value + 0xFFFF;

// Commenting this out for now, to suppress a compiler warning.  These lines
// are artifacts from when we were interrupting on the Compare register.  Now
// we are interrupting on the Auto Reload register.  Maybe this timer stuff
// needs some cleanup.
#if 0
        /* according to the reference manual, we need to make sure the new
         * compare value is less than the timer's auto reload value
         */
        if(MAX_AUTO_RELOAD_VALUE < new_compare_value)
        {
            new_compare_value = MAX_AUTO_RELOAD_VALUE;
        }
#endif
        hal_set_lptmr_period( timer_actual_value + new_compare_value );
    }

}

// This function sets up LPTIM1 for use as the scheduler timer


static void init_lptim(void)
{
#ifdef LPTMR_LSI
    /* this function assumes all LPTIM1 registers are at default reset value */
    {
        RCC->CSR |= RCC_CSR_LSION; /* enable Low Speed Internal Oscillator */
        while (!(RCC->CSR & RCC_CSR_LSIRDY)) {} /* wait until LSI is ready */
    }

    RCC->CCIPR &= ~RCC_CCIPR_LPTIM1SEL_Msk;
    RCC->CCIPR |= RCC_CCIPR_LPTIM1SEL_0;					/* Select LSI as LPTMR clock source */
    hal_timer_blocking_delay_for_100us();					/* Delay needed here after LSI selected as clock source for LPTIM1, like 2 to 3 clock cycles (60-90uS) */
#elif defined LPTMR_LSE
	RCC->CCIPR |= (RCC_CCIPR_LPTIM1SEL_0 | RCC_CCIPR_LPTIM1SEL_1);			/* Select LSE as LPTMR clock source */
	hal_timer_blocking_delay_for_100us();					/* Delay needed here after LSI selected as clock source for LPTIM1, like 2 to 3 clock cycles (60-90uS) */
#endif
    RCC->APBENR1 |= RCC_APBENR1_LPTIM1EN; 					/* note: in stm32l072xx.h these are defined as APB1ENR and RCC_APB1ENR_LPTIM1EN */
    RCC->APBSMENR1 |= RCC_APBSMENR1_LPTIM1SMEN; 			/* enable LPTM1 during sleep modes */ /* note in stm32l072xx.h these are defined as APB1SMENR and RCC_APB1SMENR_LPTIM1SMEN */
#if !defined LPTMR_LSI && !defined LPTMR_LSE				/* clocked from APB1 */
    LPTIM1->CFGR = LPTIM_CFGR_PRESC_0 | LPTIM_CFGR_PRESC_1 | LPTIM_CFGR_PRESC_2;
#else
    LPTIM1->CFGR = 0;										/* Reset condition, default settings, no prescale */
#endif
    LPTIM1->IER = LPTIM_IER_ARRMIE;							/* For one-shot use the ARR interrupt instead of the CMP interrupt */
    LPTIM1->CR = LPTIM_CR_ENABLE; 							/* enable the timer */

     /* Per reference manual, once the timer is enabled, when running from a slower clock, allow at least 2 clock cycles before writing to ARR and CMP */
    hal_timer_blocking_delay_for_100us();

    LPTIM1->ARR = MAX_AUTO_RELOAD_VALUE; 		/* set value at which rollover happens */
    LPTIM1->CMP = MAX_LPTIM_COMPARE_VALUE;		/* Write initially to CMP so the CMPOK flag will be set by HW. Make this less than ARR per the Ref Manual. For one-shot, set to 0 since it is not used.*/
    hal_timer_blocking_delay_for_100us();
    hal_timer_blocking_delay_for_100us();
    // Lower the LPTIM1's priority to below that of the LPUART1, because on the 
    // STM32G031 port of the NE360 frame from the origianl MKL03, I was finding 
    // that due to the slower clock speed of the STM32G031 we were spending so 
    // much time in timer interrupts that we were missing uart bytes.  I know 
    // this is a very specific setting for a specific project in a HAL used by 
    // multiple projects, but I'm at my wits' end in trying to fix this, and I 
    // have spent SO MUCH TIME trying to not break other projects, and I'm just 
    // done.  I'd have to modify so much stuff to create a generic way to set 
    // this priority BEFORE the interrupt is enabled (it MUST be done before 
    // the interrupt is enabled), and meh.  I'm tired.
    NVIC_SetPriority(LPTIM1_IRQn, 1);

    mRestartLPTMR();
    /* *((volatile uint32_t *)0x40015808) = (1 << 31);*/ /* stop LPTIM1 from counting when halted by debugger */

}


//TODO: this is currently hardcoded to LPTIM1
void hal_timer_enable_general_interrupt_timer_interrupt(void)
{
    NVIC_EnableIRQ(LPTIM1_IRQn);
}

//TODO: this is currently hardcoded to LPTIM1
void hal_timer_disable_general_interrupt_timer_interrupt(void)
{
    NVIC_DisableIRQ(LPTIM1_IRQn);
}


/* Sets the timer to elapse a number of counts from 0 since this is a one-shot timer.
 */
/*
 * NOTE: For some reason when this function is optimized, we get all kinds of 
 * timing irregularities.  For now we're telling GCC not to optimize this 
 * function.
 */
uint16_t __attribute__((optimize("O0"))) hal_timer_set_elapse_count(uint16_t count)
{
	/* Per reference manual, when using a slower clock, the CNT register should be read multiple times to validate a successful read */
//    volatile uint32_t temp1;
//    volatile uint32_t temp2;
	// TODO - Do we need to grab the cnt register to check elapsed time? This function could be called from isr and this will be 0 or could be called from scheduler...
	//temp1 = hal_read_lptimer_val();
    timer_value_at_previous_event = 0;

    if(count > 0) /* if the caller is scheduling a new timeout, rather than canceling an already existing timeout */
    {
        is_timer_scheduled = true;
        hal_set_lptmr_period( count );
        /* clear all possible interrupt flags except the ARROK and CMPOK status flags, these are handled in HW*/
        LPTIM1->ICR = LPTIM_ICR_DOWNCF | LPTIM_ICR_UPCF | /*LPTIM_ICR_ARROKCF | LPTIM_ICR_CMPOKCF |*/ LPTIM_ICR_EXTTRIGCF | LPTIM_ICR_ARRMCF | LPTIM_ICR_CMPMCF;

        /* Note: for the STM32G031 port of the NE360 Frame, which runs at a 
         * slower clock speed than the original MKL03 variant, I had to change 
         * the way the submod-scheduler protects critical sections by instead 
         * of disabling/reenabling ALL interrupts, now we just disable/reenable 
         * the LPTIM1 interrupt.  Otherwise we'd spend too long running timer 
         * code with all interrupts disabled and we'd miss uart bytes coming 
         * in.  In order to make this change, I have to prevent this call from 
         * messing with the NVIC stuff here (since we re-enable the IRQ 
         * elsewhere now), hence it's commented out now.
         */
#if 0
        NVIC_ClearPendingIRQ(LPTIM1_IRQn); /* to avoid a spurious interrupt when we enable the NVIC IRQ below */
        NVIC_EnableIRQ(LPTIM1_IRQn);
#endif
    }
    else /* if we're canceling a potentially already existing timeout */
    {
        // See comment above about why this is commented out now.
        // NVIC_DisableIRQ(LPTIM1_IRQn);

        is_timer_scheduled = false;
    }
    /* Per reference manual, when using a slower clock, the CNT register should be read multiple times to validate a successful read */
    //TODO - Writing to ARR with LSI option likely has 3 clock cycle latency so if hal_set_lptmr_period has been called, this function probably took some time...
    //temp1 = hal_read_lptimer_val();
    return 0;
}

/* If timer is not already set, it returns the number of counts since it had
 * previously elapsed.  If timer was already set, it returns the number of
 * counts since it was previously set.
 */
uint16_t hal_timer_get_counts_since_last_event(void)
{
    /* if the count has already wrapped around, then we just cap the result at
     * the max value, per the function's comments.
     */
    if(LPTIM1->ISR & LPTIM_ISR_ARRM)
    {
        return MAX_AUTO_RELOAD_VALUE;
    }
    /* Per reference manual, when using a slower clock, the CNT register should be read multiple times to validate a successful read */
    volatile uint16_t timer_actual_value;
    timer_actual_value = (uint16_t)hal_read_lptimer_val();

    return timer_actual_value - timer_value_at_previous_event;
}

/* END GENERAL INTERRUPT TIMER RESOURCES *************************************
 *****************************************************************************/


#endif // #if defined(LPTIM1)
#endif  // #if (defined(HAL_TIM_MODULE_ENABLED))
