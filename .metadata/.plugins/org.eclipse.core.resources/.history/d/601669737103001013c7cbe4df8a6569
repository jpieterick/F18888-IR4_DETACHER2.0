/**********************************
 * File: hal_watchdog.c
 * InVue Security Products
 * Copyright 2020
 **********************************/
#include "periphdefs.h"
#include "stm32g0xx.h"
#include "stm32g0xx_hal_rcc.h"
#include "stm32g0xx_hal_iwdg.h"
#include "hal_watchdog.h"

/* Notes:
 * 1.  If the WDT behavior needs to be customized, the timeout value, pre-scaler and or reload
 * value can be specified in your periphdefs.h file.
 *
 * 2. The easiest way to modify behavior is to include a definition for WDT_TIMEOUT_MSEC
 * in your periphdefs.h file which overrides the timeout definition.
 *
 * 3. Keep in mind that a non-volatile memory handler may take quite a bit of time to
 * write to EEPROM, especially during first initialization of all NV parameters. The NV
 * data handler may need to reset the WDT periodically as NV memory is erased/written.
 *
 * 4. By default, the WDT is not active when the MCU is halted (breakpoint).  To accomplish
 * this, the WDT init function actiavtes the DBG module clock and the sets the IWDG disabled
 * when halted.  To disable this behavior and keep the WDT running during an MCU halt,
 * define WDT_ACTIVE_WHEN_HALTED in your periphdefs.h file.
 */

/* default to a 1 second WDT timeout */
#ifndef WDT_TIMEOUT_MSECS
    #define WDT_TIMEOUT_MSECS (1000)
#endif

/* default to a WDT clock equal to LSI / 16 = 2000 Hz */
#ifndef WDT_CLOCK_PRESCALER
    #define WDT_CLOCK_PRESCALER (IWDG_PRESCALER_16)
#endif

/* define the WDT source clock frequency */
#define LSI_WDT_FREQ_HZ (32000U)

/* if the timeout reload value isn't defined,
 * calculate the reload period based on the
 * timeout and prescaler values */
#ifndef WDT_TIMEOUT_RELOAD
	#if (WDT_CLOCK_PRESCALER == IWDG_PRESCALER_4)
    	#define WDT_TIMEOUT_RELOAD ((WDT_TIMEOUT_MSECS * LSI_WDT_FREQ_HZ)/4000)
	#elif (WDT_CLOCK_PRESCALER == IWDG_PRESCALER_8)
    	#define WDT_TIMEOUT_RELOAD ((WDT_TIMEOUT_MSECS * LSI_WDT_FREQ_HZ)/8000)
	#elif (WDT_CLOCK_PRESCALER == IWDG_PRESCALER_16)
    	#define WDT_TIMEOUT_RELOAD ((WDT_TIMEOUT_MSECS * LSI_WDT_FREQ_HZ)/16000)
	#elif (WDT_CLOCK_PRESCALER == IWDG_PRESCALER_32)
		#define WDT_TIMEOUT_RELOAD ((WDT_TIMEOUT_MSECS * LSI_WDT_FREQ_HZ)/32000)
	#elif (WDT_CLOCK_PRESCALER == IWDG_PRESCALER_64)
    	#define WDT_TIMEOUT_RELOAD ((WDT_TIMEOUT_MSECS * LSI_WDT_FREQ_HZ)/64000)
	#elif (WDT_CLOCK_PRESCALER == IWDG_PRESCALER_128)
    	#define WDT_TIMEOUT_RELOAD ((WDT_TIMEOUT_MSECS * LSI_WDT_FREQ_HZ)/128000)
	#else
    	#define WDT_TIMEOUT_RELOAD ((WDT_TIMEOUT_MSECS * LSI_WDT_FREQ_HZ)/256000)
	#endif
#endif

#if (USING_STM32CUBEIDE == 1)
static IWDG_HandleTypeDef wdg_hdl = hiwdg; // Use the watch dog handle created by the STM32 Hardware Configuration Tool.
#else
static IWDG_HandleTypeDef wdg_hdl = {0};
#endif

void hal_watchdog_init(void)
{
#if (USING_STM32CUBEIDE == 0)
	wdg_hdl.Instance = IWDG;
	wdg_hdl.Init.Prescaler = WDT_CLOCK_PRESCALER;
	wdg_hdl.Init.Reload = WDT_TIMEOUT_RELOAD;
	wdg_hdl.Init.Window = IWDG_WINDOW_DISABLE;

	HAL_IWDG_Init(&wdg_hdl);

#ifndef WDT_ACTIVE_WHEN_HALTED
	/* stop the IWDT when the core is halted in debug mode */
	__DBGMCU_CLK_ENABLE();
	__HAL_DBGMCU_FREEZE_IWDG();
#endif
#endif
}

void hal_watchdog_enable(void)
{

}

void hal_watchdog_disable(void)
{

}

void hal_watchdog_reset(void)
{
	if( wdg_hdl.Instance != NULL )			// Bootloader was resetting wdt but it was never initialized. This resulted in a null pointer access in HAL functions which impacted FLASH-SR CFGBSY Flag
	{
		/* reload the WDT */
		HAL_IWDG_Refresh(&wdg_hdl);
	}
}

bool hal_watchdog_was_reset(void)
{
	return (__HAL_RCC_GET_FLAG(RCC_FLAG_SFTRST));
}
