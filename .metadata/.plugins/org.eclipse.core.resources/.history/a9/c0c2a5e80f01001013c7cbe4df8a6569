/*------------------------------------------------------------------------------
* Grayhill, Inc.
* 561 Hillgrove Avenue
* LaGrange IL, 60525
*
*
* (C) Copyright Grayhill, Inc.  All rights reserved.
*------------------------------------------------------------------------------
* Filename: SystemClock.c
*------------------------------------------------------------------------------
*
* Created By: JFP
* Date Created: 6/28/2013
*
* File Description: This file contains firmware that implements a basic 1 millisecond
*                   counter for basic timing purposes.
*
* History:
* Date:      Author Version  Description
* 06/28/13   JFP    1.0      original
* 08/18/16   JFP    ...      modified to work with the STM32 HAL.
*-------------------------------------------------------------------------------
*/

#include "Common.h"
#include "SystemClock.h"

#define TIMER_ISR_PRIORITY (0)
#define USE_SYSTEM_TICK

#ifndef USE_SYSTEM_TICK
volatile uint32 MsecCount = 0;

/*********************************************************************************
 * SystemClockOnTimeOut() The call back function for the time out event of the
 *                        TIMER module. This function  is intended to be called
 *                        by the timer 3 IRQ function TIM3_IRQHandler() in file
 *                        stm32f4xx_it.c.
 *
 * parameters: None.
 *
 * returns:    Nothing.
 *********************************************************************************/
void SystemClockOnTimeOut()
{
	MsecCount++;
}

#endif

/********************************************************************************* 
 * SystemClockMsecCount() function that returns the contents of the msec counter.
 * 
 * parameters: None.
 * 
 * returns:    The current microsecond count.
 *********************************************************************************/
uint32 SystemClockMsecCount(void)
{
#ifndef USE_SYSTEM_TICK
    return MsecCount;
#else
	// On the STM32, use SysTick. It increments every millisecond.
    return HAL_GetTick();
#endif
}

/********************************************************************************* 
 * SystemClockMsecsSinceCount() function that returns the number of milliseconds
 * since the provided millisecond count.
 * 
 * parameters: None.
 * 
 * returns:    The current microsecond count.
 *********************************************************************************/
uint32 SystemClockMsecsSinceCount(uint32 count)
{
    uint32 result;
    uint32 currentCount = SystemClockMsecCount();
    
    // On the off chance that the unit stays up for 49+ days, deal with counter roll over:
    if (currentCount >= count)
    {
        //Counter has not rolled over. 
        result = currentCount - count;
    }
    else
    {
        // The counter rolled over. Deal with it:
        result = UINT32MAX - count + currentCount;
    }
        
    return result;
}

/********************************************************************************* 
 * SystemClockWaitMsecs() function that waits until the millisecond counter is
 *                        incremented the given number before returning. Note
 *                        that the first the first increment will take an  
 *                        indeterminate number of microseconds between 0 and 
 *                        1000.
 * 
 * parameters: msecs - the number of increments to wait.
 * 
 * returns:    Noting.
 *********************************************************************************/
void SystemClockWaitMsecs(uint32 msecs)
{
    uint32 startCount = SystemClockMsecCount();
    bool waiting = TRUE;
    
    while (waiting == TRUE)
    {
    	waiting = (SystemClockMsecsSinceCount(startCount) < (msecs));
    }
}
