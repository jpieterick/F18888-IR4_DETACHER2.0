/**********************************
 * File: hal_gpio.h
 * Invue Security Products
 * Copyright 2020
 **********************************/

#ifndef __gpio_H
#define __gpio_H
#ifdef __cplusplus
 extern "C" {
#endif

#include <stdbool.h>

#include "pindefs.h"

// Initializes all used pins to their default states
// as defined in pindefs.c.
// This should be called once during application initialization.
void hal_gpio_init(void);

// Initializes all used pins as analog pins.
void hal_gpio_deinit(void);

// Initializes a pin to its default state as defined in pindefs.c.
void hal_gpio_pin_init(enum pin_id id);

// Initializes a pin as an analog pin
void hal_gpio_pin_deinit(enum pin_id id);

bool hal_gpio_get_input(enum pin_id id);
void hal_gpio_set_output(enum pin_id id, bool value);
void hal_gpio_toggle_output(enum pin_id id);

// void hal_gpio_set_pin_type();
// void hal_gpio_set_pin_direction();
void hal_gpio_set_pull(enum pin_id id, uint32_t pull);

// sets the mode of a pin (i.e. analog, digital input, digital output, etc...
void hal_gpio_set_pin_mode(enum pin_id id, uint32_t mode);
uint32_t hal_gpio_get_pin_mode(enum pin_id id);
// selects the alternate (mux) setting of the pin
void hal_gpio_set_pin_mux(enum pin_id id, uint32_t alternate);

void hal_gpio_disable_pin_interrupt(enum pin_id id);

void hal_gpio_set_pin_interrupt(enum pin_id id, gpio_interrupt_config setting);

bool hal_gpio_is_pin_interrupt_flag_set(enum pin_id id);

void hal_gpio_set_pin_isr_cb( enum pin_id id, void (*isr_cb)(uint32_t) );

uint32_t hal_gpio_read_port(enum port_id id);

#ifdef __cplusplus
}
#endif
#endif // __gpio_H
